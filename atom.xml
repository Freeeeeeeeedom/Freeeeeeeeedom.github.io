<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>投降输一半</title>
  
  <subtitle>Joker</subtitle>
  <link href="https://freeeeeeeeedom.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://freeeeeeeeedom.gitee.io/"/>
  <updated>2022-05-03T06:04:16.595Z</updated>
  <id>https://freeeeeeeeedom.gitee.io/</id>
  
  <author>
    <name>胡小小小小睿</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>May 3th</title>
    <link href="https://freeeeeeeeedom.gitee.io/2022/05/03/May-3th/"/>
    <id>https://freeeeeeeeedom.gitee.io/2022/05/03/May-3th/</id>
    <published>2022-05-03T06:04:05.000Z</published>
    <updated>2022-05-03T06:04:16.595Z</updated>
    
    
    
    
    <category term="Everday" scheme="https://freeeeeeeeedom.gitee.io/categories/Everday/"/>
    
    <category term="2022_大二下" scheme="https://freeeeeeeeedom.gitee.io/categories/Everday/2022-%E5%A4%A7%E4%BA%8C%E4%B8%8B/"/>
    
    
    <category term="2022_Spring" scheme="https://freeeeeeeeedom.gitee.io/tags/2022-Spring/"/>
    
  </entry>
  
  <entry>
    <title>数据管理基础 ch58-61</title>
    <link href="https://freeeeeeeeedom.gitee.io/2022/05/03/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80-ch58-61/"/>
    <id>https://freeeeeeeeedom.gitee.io/2022/05/03/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80-ch58-61/</id>
    <published>2022-05-03T05:59:55.000Z</published>
    <updated>2022-05-03T06:00:28.709Z</updated>
    
    
    
    
    <category term="数据库" scheme="https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="数据管理基础" scheme="https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="数据管理基础" scheme="https://freeeeeeeeedom.gitee.io/tags/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>May 2th</title>
    <link href="https://freeeeeeeeedom.gitee.io/2022/05/01/May-2th/"/>
    <id>https://freeeeeeeeedom.gitee.io/2022/05/01/May-2th/</id>
    <published>2022-05-01T14:24:10.000Z</published>
    <updated>2022-05-02T07:43:10.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="to-do"><a class="markdownIt-Anchor" href="#to-do"></a> To Do</h1><ul><li><input type="checkbox" id="checkbox0" checked="true" /><label for="checkbox0">软工二</label></li><li><input type="checkbox" id="checkbox1" /><label for="checkbox1">CS144</label></li><li><input type="checkbox" id="checkbox2" /><label for="checkbox2">计网-小程序</label></li><li><input type="checkbox" id="checkbox3" checked="true" /><label for="checkbox3">体育舞蹈</label></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;to-do&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#to-do&quot;&gt;&lt;/a&gt; To Do&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input type=&quot;checkbox&quot; id=&quot;checkbox0&quot; checked=&quot;true&quot; /&gt;&lt;l</summary>
      
    
    
    
    <category term="Everday" scheme="https://freeeeeeeeedom.gitee.io/categories/Everday/"/>
    
    <category term="2022_大二下" scheme="https://freeeeeeeeedom.gitee.io/categories/Everday/2022-%E5%A4%A7%E4%BA%8C%E4%B8%8B/"/>
    
    
    <category term="2022_Spring" scheme="https://freeeeeeeeedom.gitee.io/tags/2022-Spring/"/>
    
  </entry>
  
  <entry>
    <title>May 1th</title>
    <link href="https://freeeeeeeeedom.gitee.io/2022/05/01/May-1th/"/>
    <id>https://freeeeeeeeedom.gitee.io/2022/05/01/May-1th/</id>
    <published>2022-04-30T16:00:20.000Z</published>
    <updated>2022-05-01T15:40:17.879Z</updated>
    
    <content type="html"><![CDATA[<h1 id="to-do"><a class="markdownIt-Anchor" href="#to-do"></a> To Do</h1><ul><li><input type="checkbox" id="checkbox0" checked="true" /><label for="checkbox0">Leetcode每日一题</label></li><li><input type="checkbox" id="checkbox1" checked="true" /><label for="checkbox1">Leetcode</label></li><li><input type="checkbox" id="checkbox2" /><label for="checkbox2">软工二</label></li><li><input type="checkbox" id="checkbox3" /><label for="checkbox3">CS144</label></li><li><input type="checkbox" id="checkbox4" /><label for="checkbox4">计网-小程序</label></li></ul><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>Never go grocery shopping when you’re hungry!</p><p>You grab wrong things.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;to-do&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#to-do&quot;&gt;&lt;/a&gt; To Do&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input type=&quot;checkbox&quot; id=&quot;checkbox0&quot; checked=&quot;true&quot; /&gt;&lt;l</summary>
      
    
    
    
    <category term="Everday" scheme="https://freeeeeeeeedom.gitee.io/categories/Everday/"/>
    
    <category term="2022_大二下" scheme="https://freeeeeeeeedom.gitee.io/categories/Everday/2022-%E5%A4%A7%E4%BA%8C%E4%B8%8B/"/>
    
    
    <category term="2022_Spring" scheme="https://freeeeeeeeedom.gitee.io/tags/2022-Spring/"/>
    
  </entry>
  
  <entry>
    <title>April 30th</title>
    <link href="https://freeeeeeeeedom.gitee.io/2022/04/30/April-30th/"/>
    <id>https://freeeeeeeeedom.gitee.io/2022/04/30/April-30th/</id>
    <published>2022-04-30T02:06:11.000Z</published>
    <updated>2022-04-30T05:52:28.820Z</updated>
    
    <content type="html"><![CDATA[<h1 id="to-do"><a class="markdownIt-Anchor" href="#to-do"></a> To Do</h1><ul><li><input type="checkbox" id="checkbox0" checked="true" /><label for="checkbox0">Leetcode每日一题</label></li><li><input type="checkbox" id="checkbox1" checked="true" /><label for="checkbox1">Leetcode</label></li><li><input type="checkbox" id="checkbox2" /><label for="checkbox2">软工二</label></li><li><input type="checkbox" id="checkbox3" /><label for="checkbox3">CS144</label></li><li><input type="checkbox" id="checkbox4" /><label for="checkbox4">计网-小程序</label></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;to-do&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#to-do&quot;&gt;&lt;/a&gt; To Do&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input type=&quot;checkbox&quot; id=&quot;checkbox0&quot; checked=&quot;true&quot; /&gt;&lt;l</summary>
      
    
    
    
    <category term="Everday" scheme="https://freeeeeeeeedom.gitee.io/categories/Everday/"/>
    
    <category term="2022_大二下" scheme="https://freeeeeeeeedom.gitee.io/categories/Everday/2022-%E5%A4%A7%E4%BA%8C%E4%B8%8B/"/>
    
    
    <category term="2022_Spring" scheme="https://freeeeeeeeedom.gitee.io/tags/2022-Spring/"/>
    
  </entry>
  
  <entry>
    <title>April 29th</title>
    <link href="https://freeeeeeeeedom.gitee.io/2022/04/29/April-29th/"/>
    <id>https://freeeeeeeeedom.gitee.io/2022/04/29/April-29th/</id>
    <published>2022-04-29T04:08:37.000Z</published>
    <updated>2022-04-29T15:44:49.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="to-do"><a class="markdownIt-Anchor" href="#to-do"></a> To Do</h1><ul><li><input type="checkbox" id="checkbox0" checked="true" /><label for="checkbox0">Leetcode每日一题 （前缀和 + DFS）</label></li><li><input type="checkbox" id="checkbox1" checked="true" /><label for="checkbox1">钢琴课</label></li><li><input type="checkbox" id="checkbox2" /><label for="checkbox2">核酸寄</label></li><li><input type="checkbox" id="checkbox3" /><label for="checkbox3">CS144</label></li></ul><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>无</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;to-do&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#to-do&quot;&gt;&lt;/a&gt; To Do&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input type=&quot;checkbox&quot; id=&quot;checkbox0&quot; checked=&quot;true&quot; /&gt;&lt;l</summary>
      
    
    
    
    <category term="Everday" scheme="https://freeeeeeeeedom.gitee.io/categories/Everday/"/>
    
    <category term="2022_大二下" scheme="https://freeeeeeeeedom.gitee.io/categories/Everday/2022-%E5%A4%A7%E4%BA%8C%E4%B8%8B/"/>
    
    
    <category term="2022_Spring" scheme="https://freeeeeeeeedom.gitee.io/tags/2022-Spring/"/>
    
  </entry>
  
  <entry>
    <title>April 28th</title>
    <link href="https://freeeeeeeeedom.gitee.io/2022/04/28/April-28th/"/>
    <id>https://freeeeeeeeedom.gitee.io/2022/04/28/April-28th/</id>
    <published>2022-04-28T00:35:41.000Z</published>
    <updated>2022-04-29T05:50:07.445Z</updated>
    
    <content type="html"><![CDATA[<h1 id="to-do"><a class="markdownIt-Anchor" href="#to-do"></a> To Do</h1><ul><li><input type="checkbox" id="checkbox0" checked="true" /><label for="checkbox0">练琴1h</label></li><li><input type="checkbox" id="checkbox1" checked="true" /><label for="checkbox1">Leetcode每日一题</label></li><li><input type="checkbox" id="checkbox2" checked="true" /><label for="checkbox2">Leetcode</label></li><li><input type="checkbox" id="checkbox3" /><label for="checkbox3">CS144。。。（别鸽了）</label></li><li><input type="checkbox" id="checkbox4" checked="true" /><label for="checkbox4">全州拌饭！</label></li><li><input type="checkbox" id="checkbox5" checked="true" /><label for="checkbox5">计网实验课</label></li></ul><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>芜湖</p><p>逆天</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;to-do&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#to-do&quot;&gt;&lt;/a&gt; To Do&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input type=&quot;checkbox&quot; id=&quot;checkbox0&quot; checked=&quot;true&quot; /&gt;&lt;l</summary>
      
    
    
    
    <category term="Everday" scheme="https://freeeeeeeeedom.gitee.io/categories/Everday/"/>
    
    <category term="2022_大二下" scheme="https://freeeeeeeeedom.gitee.io/categories/Everday/2022-%E5%A4%A7%E4%BA%8C%E4%B8%8B/"/>
    
    
    <category term="2022_Spring" scheme="https://freeeeeeeeedom.gitee.io/tags/2022-Spring/"/>
    
  </entry>
  
  <entry>
    <title>April 27th</title>
    <link href="https://freeeeeeeeedom.gitee.io/2022/04/27/April-27th/"/>
    <id>https://freeeeeeeeedom.gitee.io/2022/04/27/April-27th/</id>
    <published>2022-04-27T04:18:20.000Z</published>
    <updated>2022-04-28T01:14:56.310Z</updated>
    
    <content type="html"><![CDATA[<h1 id="to-do"><a class="markdownIt-Anchor" href="#to-do"></a> To Do</h1><ul><li><input type="checkbox" id="checkbox0" checked="true" /><label for="checkbox0">Leetcode每日一题(只看了DFS一种，还有BFS和并查集做法下次一定)</label></li><li><input type="checkbox" id="checkbox1" checked="true" /><label for="checkbox1">Leetcode（摸鱼成瘾。。）</label></li><li><input type="checkbox" id="checkbox2" checked="true" /><label for="checkbox2">微信小程序</label></li><li><input type="checkbox" id="checkbox3" checked="true" /><label for="checkbox3">计算机网络-整理</label></li></ul><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;to-do&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#to-do&quot;&gt;&lt;/a&gt; To Do&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input type=&quot;checkbox&quot; id=&quot;checkbox0&quot; checked=&quot;true&quot; /&gt;&lt;l</summary>
      
    
    
    
    <category term="Everday" scheme="https://freeeeeeeeedom.gitee.io/categories/Everday/"/>
    
    <category term="2022_大二下" scheme="https://freeeeeeeeedom.gitee.io/categories/Everday/2022-%E5%A4%A7%E4%BA%8C%E4%B8%8B/"/>
    
    
    <category term="2022_Spring" scheme="https://freeeeeeeeedom.gitee.io/tags/2022-Spring/"/>
    
  </entry>
  
  <entry>
    <title>数据链路层</title>
    <link href="https://freeeeeeeeedom.gitee.io/2022/04/26/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"/>
    <id>https://freeeeeeeeedom.gitee.io/2022/04/26/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</id>
    <published>2022-04-26T15:04:49.000Z</published>
    <updated>2022-04-27T15:10:35.521Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据链路层"><a class="markdownIt-Anchor" href="#数据链路层"></a> 数据链路层</h1><h1 id="数据链路层概述"><a class="markdownIt-Anchor" href="#数据链路层概述"></a> 数据链路层概述</h1><ol><li>本章主要是局域网的数据链路层的技术标准</li><li>主要是以太网的介质和无线网的介质两大类。</li><li>是一个直连线路上的介质控制，在无线路由器上，会有不同的第二层(手机到路由器，路由器到远端)，数据链路层只能在一个网段，不能跨链路</li></ol><h2 id="物理层和数据链路层的区别"><a class="markdownIt-Anchor" href="#物理层和数据链路层的区别"></a> 物理层和数据链路层的区别</h2><table><thead><tr><th>第一层</th><th>第二层</th></tr></thead><tbody><tr><td>无法与上层通信</td><td>通过LLC与上层通信</td></tr><tr><td>无法确定哪台主机将会传输或接受二进制数据</td><td>通过MAC确定</td></tr><tr><td>无法命名或标识主机</td><td>通过寻址或命名过程来实现</td></tr><tr><td>仅仅能描述比特流</td><td>通过帧来组织/分组比特</td></tr></tbody></table><h2 id="数据链路层-data-link-layer"><a class="markdownIt-Anchor" href="#数据链路层-data-link-layer"></a> 数据链路层 Data Link Layer</h2><p><img src="https://s2.loli.net/2022/04/27/SwqQ4Vvp8DJ5TfO.png" alt="" /></p><ol><li>问题：如何在不稳定(instable)的链路上正确传输数据？</li><li>数据链路层提供<ul><li>网络介质访问:</li><li>跨媒体物理传输(transmission):</li></ul></li><li>第二层协议明确了<ul><li>在链路上交换的数据格式</li><li>链路上的两个节点的行为</li></ul></li><li>在数据链路层，过程就是协议。</li><li>在两端校验，帧是否是正确的，或者是不正确的，如果正确交付第三层，否则进行相应的处理</li></ol><h2 id="局域网和数据链路"><a class="markdownIt-Anchor" href="#局域网和数据链路"></a> 局域网和数据链路</h2><ol><li>主要工作<ul><li>错误识别(notification)</li><li>网络拓扑(Network topology)</li><li>流控制(Flow control)</li></ul></li><li>第一层和第二层的不同:<ul><li>第一层不可以访问更高层(upper-level layers)，而第二层是通过逻辑链路(Logical Link Control)控制进行</li><li>第1层无法决定哪个主机将发送(transmit)或接收(receive)来自组的二进制数据；第2层使用媒体访问控制(MAC)做到这一点，共用总线链路</li><li>第1层无法命名或识别计算机；第2层使用寻址(或命名)过程，以太网场景下</li><li>第1层只能描述比特流；第2层使用成帧对比特进行组织或分组。</li></ul></li></ol><h2 id="第二层提供的服务"><a class="markdownIt-Anchor" href="#第二层提供的服务"></a> 第二层提供的服务</h2><ol><li>提供给网络层的三层服务<ol><li>(最弱，最不靠谱的)没有确认(acknowledgement)的无连接(Connectionless)服务<ul><li>发送取出就行，不用等收到确认</li><li>可靠(Reliable)的链接(上层以确保数据正确性)</li><li>实时任务，比较高效</li><li>适用于大多数局域网</li></ul></li><li>带有确认的无连接服务：不可靠的链接，例如无线网络：需要保证一定的通信质量(比如无线网络的传输)，同时会损失一定的性能。</li><li>带有确认的连接服务<ul><li>比如蓝牙:需要先确定绑定关系才能进行通信</li><li>手机和手机之间的蓝牙连接需要确定一些信息</li></ul></li></ol></li><li>三种服务的连接的不同和区别:<ol><li>无线连接和有线连接相比多了<strong>确认</strong>的过程</li><li>网线连接:我们通信的对象是路由器，由路由器进行转发</li><li>PPPoP是<strong>路由器和远端</strong>的服务器的连接</li><li>有线无线都接给路由器，都需要连接，但是无线网相对有线网需要确认(包确认)</li></ol></li></ol><h2 id="常见的局域网的介质访问控制media-access-control"><a class="markdownIt-Anchor" href="#常见的局域网的介质访问控制media-access-control"></a> 常见的局域网的介质访问控制(Media Access Control)</h2><p><img src="https://s2.loli.net/2022/04/27/q1TubJLkzFnNMBY.png" alt="" /></p><ol><li>以太网(Ethernet):逻辑总线拓扑(信息流在线性总线上)和物理星形或扩展星形(连线为星形)</li><li>令牌环(Token Ring):逻辑环拓扑(信息流在一个环中)和物理星形拓扑(以星形连接)</li><li>FDDI(光纤分布式数据接口):逻辑环拓扑(信息流在一个环中)和物理双环拓扑(作为双环连接),光纤作为传输介质，曾经很常用，后来被以太网有线接入逐渐替代</li></ol><h2 id="介质访问控制方法access-methods"><a class="markdownIt-Anchor" href="#介质访问控制方法access-methods"></a> 介质访问控制方法(Access Methods)</h2><h3 id="两大类介质访问控制方法"><a class="markdownIt-Anchor" href="#两大类介质访问控制方法"></a> 两大类介质访问控制方法</h3><ol><li>确定性轮流(Deterministic—taking turns):Token Ring and FDDI(Fiber Distributed Data Interface，光纤分布式数据接口)</li><li>争用式(Non-deterministic (probabilistic))<ol><li>非确定性(概率性)-先到先得 first come, first sesrved</li><li>Ethernet/802.3</li><li>70年代，Norman Abramson设计</li><li>Pure ALOHA: 纯ALOHA协议<ul><li>主机任何时候都可以发送数据</li><li>如果发生冲突，延迟一段时间再发送</li></ul></li><li>Slotted ALOHA: 分段ALOHA协议<ul><li>把信道在时间上分段。主机任何时候都发送数据，但是必须等待下一个时间分段的开始才开始发送</li><li>如果发生冲突，延迟一段时间再发送</li></ul></li></ol></li></ol><h3 id="确定性轮流-deterministic-mac-protocols"><a class="markdownIt-Anchor" href="#确定性轮流-deterministic-mac-protocols"></a> 确定性轮流 Deterministic MAC Protocols</h3><ol><li>特殊数据令牌在环中循环(circulates)。</li><li>当主机收到令牌时，它可以传输数据而不是令牌。这称为夺取(seizing)令牌。</li><li>当发送(transmitted)的帧返回到发送器时，站点将发送新令牌； 框架已从环上卸下或脱落(stripped)。</li></ol><h3 id="非确定性mac协议-non-deterministic-mac-protocols"><a class="markdownIt-Anchor" href="#非确定性mac协议-non-deterministic-mac-protocols"></a> 非确定性MAC协议 Non-Deterministic MAC Protocols</h3><ol><li>此MAC协议称为带冲突检测的载波侦听多路访问(CSMA/CD，Carrier Sense Multiple Access with Collision Detection)(<strong>重要考点</strong>)</li><li>为了使用这种共享介质(shared-medium)技术，以太网允许网络设备为传输权进行仲裁(arbitrate)。</li><li>适用于总线结构的以太网。</li></ol><h2 id="局域网数据传输transmitison方式三种"><a class="markdownIt-Anchor" href="#局域网数据传输transmitison方式三种"></a> 局域网数据传输(Transmitison)方式:三种</h2><ol><li>单播(unicast)-将单个数据包从源发送到网络上的单个目标</li><li>多播(multicast)-由发送到网络上特定节点子集的单个数据包组成，这些节点都有同样的进程进行响应</li><li>广播(broadcast)-由单个数据包组成，该数据包传输到网络上的所有节点。(广播的目的地址是0x11111111)</li></ol><h1 id="以太网-和-带冲突检测的载波侦听多路访问-ethernet-and-csmacd"><a class="markdownIt-Anchor" href="#以太网-和-带冲突检测的载波侦听多路访问-ethernet-and-csmacd"></a> 以太网 和 带冲突检测的载波侦听多路访问 Ethernet and CSMA/CD</h1><h2 id="逻辑链路logical-link-control和介质访问控制media-access-control子层"><a class="markdownIt-Anchor" href="#逻辑链路logical-link-control和介质访问控制media-access-control子层"></a> 逻辑链路(Logical Link Control)和介质访问控制(Media Access Control)子层</h2><ol><li>无缘电缆的方式传播电波:以太网</li><li>帧传播速度提高了</li><li>帧的标准没有改变</li></ol><h3 id="局域网标准"><a class="markdownIt-Anchor" href="#局域网标准"></a> 局域网标准</h3><ol><li>定义物理媒体和用于将设备连接到媒体的连接器</li><li>在数据链路层定义设备的通信方式</li><li>数据链路层定义了如何在物理介质上传输数据。</li><li>数据链路层还定义了如何封装(encapsulate)特定于协议的流量(traffic)，以使去往不同上层协议的流量在到达堆栈时可以使用相同的通道。</li></ol><p><img src="https://s2.loli.net/2022/04/27/LvUEYRdFXyrTIjB.png" alt="" /></p><blockquote><p>IEEE 802.2对应LLC，以太网则覆盖物理层和链路层</p></blockquote><ol><li>IEEE将数据链路层分为两部分：<ol><li>媒体访问控制(MAC)(转换为媒体)</li><li>逻辑链路控制(LLC)(过渡到网络层)</li></ol></li><li>乍一看，IEEE标准似乎以两种方式违反了OSI模型。<ol><li>首先，它定义自己的层(LLC)，包括其接口等。</li><li>其次，看来MAC层标准802.3和802.5跨越了第2层/第1层接口。<ul><li>802.5 令牌环网</li><li>802.3 覆盖了物理层和第二层下半层</li></ul></li></ol></li><li>但是，802.3和802.5定义了用于构建特定技术的命名，框架和媒体访问控制规则，都规范了对应的方案，不同方案不同解决标准</li></ol><h3 id="mac-llc"><a class="markdownIt-Anchor" href="#mac-llc"></a> MAC &amp; LLC</h3><ol><li>MAC子层(802.3)<ul><li>定义如何在物理线路上传输帧(frames)</li><li>处理物理寻址</li><li>定义网络拓扑</li><li>定义线路规则(discipline)</li></ul></li><li>LLC 子层(802.2)<ul><li>逻辑上标识不同的协议类型，然后将其封装，兼容不同介质的访问</li><li>使用SAP标识符执行逻辑标识，用来做发送的位置的标识</li><li>LLC帧的类型取决于上层协议期望的标识符，对于上层服务进行支持</li><li>LLC已经比较规范了，后来有的厂商已经放弃继续做</li></ul></li></ol><p><img src="https://s2.loli.net/2022/04/27/V6iCtr48J9dcDyf.png" alt="" /></p><h2 id="media-access-control-sublayer-介质访问控制子层"><a class="markdownIt-Anchor" href="#media-access-control-sublayer-介质访问控制子层"></a> Media Access Control Sublayer 介质访问控制子层</h2><p><img src="https://s2.loli.net/2022/04/27/XGLChzSq67BNQe9.png" alt="" /></p><ol><li>以字节为单位进行帧结构描述</li><li>有802.3的规范和以太网的规范</li><li>MAC 介质访问控制子层的帧结构</li></ol><h3 id="前同步码"><a class="markdownIt-Anchor" href="#前同步码"></a> 前同步码</h3><ol><li>从1和0的交替(alternating)模式开始，称为前同步码(preamble)。前同步码是(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mi>x</mi><mn>1</mn><mn>0</mn><mn>1</mn><mn>0</mn><mn>1</mn><mn>0</mn><mn>1</mn><mn>1</mn></mrow><annotation encoding="application/x-tex">0x10101011</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.64444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">0</span><span class="mord mathit">x</span><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mord mathrm">1</span><span class="mord mathrm">1</span></span></span></span>)，前导码是(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mi>x</mi><mn>1</mn><mn>0</mn><mn>1</mn><mn>0</mn><mn>1</mn><mn>0</mn><mn>1</mn><mn>0</mn></mrow><annotation encoding="application/x-tex">0x10101010</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.64444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">0</span><span class="mord mathit">x</span><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mord mathrm">1</span><span class="mord mathrm">0</span></span></span></span>)<ul><li>告诉接收方，要来数据了，因为不是预约发数据的模式，这个码就是为了保证对方有相应准备时间，前面7个自己是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mi>x</mi><mn>1</mn><mn>0</mn><mn>1</mn><mn>0</mn><mn>1</mn><mn>0</mn><mn>1</mn><mn>0</mn></mrow><annotation encoding="application/x-tex">0x10101010</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.64444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">0</span><span class="mord mathit">x</span><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mord mathrm">1</span><span class="mord mathrm">0</span></span></span></span>，最后一个是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mi>x</mi><mn>1</mn><mn>0</mn><mn>1</mn><mn>0</mn><mn>1</mn><mn>0</mn><mn>1</mn><mn>1</mn></mrow><annotation encoding="application/x-tex">0x10101011</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.64444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">0</span><span class="mord mathit">x</span><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mord mathrm">1</span><span class="mord mathrm">1</span></span></span></span>(用于进行时钟同步)</li><li>使用曼彻斯特编码的方案，无传输的时候是0电平的</li></ul></li><li>前同步码告诉接收站一帧即将到来。</li></ol><h3 id="目标和源物理地址字段"><a class="markdownIt-Anchor" href="#目标和源物理地址字段"></a> 目标和源物理地址字段</h3><p><img src="https://s2.loli.net/2022/04/27/zIFsC5aoQRUdGVm.png" alt="" /></p><ol><li>源地址：始终是单播地址</li><li>目的地址：单播地址，组播地址或广播地址  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi><mi>n</mi><mi>i</mi><mi>c</mi><mi>a</mi><mi>s</mi><mi>t</mi><mspace width="1em"></mspace><mi>m</mi><mi>u</mi><mi>l</mi><mi>t</mi><mi>i</mi><mi>c</mi><mi>a</mi><mi>s</mi><mi>t</mi><mspace width="1em"></mspace><mi>o</mi><mi>r</mi><mspace width="1em"></mspace><mi>b</mi><mi>r</mi><mi>o</mi><mi>a</mi><mi>d</mi><mi>c</mi><mi>a</mi><mi>s</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">unicast \quad multicast \quad or\quad broadcast</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">u</span><span class="mord mathit">n</span><span class="mord mathit">i</span><span class="mord mathit">c</span><span class="mord mathit">a</span><span class="mord mathit">s</span><span class="mord mathit">t</span><span class="mord mspace quad"></span><span class="mord mathit">m</span><span class="mord mathit">u</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">t</span><span class="mord mathit">i</span><span class="mord mathit">c</span><span class="mord mathit">a</span><span class="mord mathit">s</span><span class="mord mathit">t</span><span class="mord mspace quad"></span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mspace quad"></span><span class="mord mathit">b</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit">o</span><span class="mord mathit">a</span><span class="mord mathit">d</span><span class="mord mathit">c</span><span class="mord mathit">a</span><span class="mord mathit">s</span><span class="mord mathit">t</span></span></span></span></li><li>MAC地址：6个字节目的地址(Dest.add) 6个字节源地址(Source.add.)，和第三层第四层报文有差别</li><li>先看目的地址的好处:交换机等看到目的地址就可以进行判断，提高效率</li></ol><h3 id="长度字段"><a class="markdownIt-Anchor" href="#长度字段"></a> 长度字段</h3><blockquote><p>长度字段指示在该字段之后且在帧检查序列字段之前(precede)的数据字节数。</p></blockquote><ol><li>2个字节长，早期规范放的是长度,指定<strong>数据长度</strong>，以太网2标准下则是使用type来完成这部分内容，指定后面的DATA是IP还是IPX的报文数据。</li><li>没有长度也可以计算出来长度，通过有电平长度就可以计算出数据的长度</li><li>数据长度的限制(46-1500字节)，以太网的帧长度不能长于1518字节</li><li>为了避免歧义，只要保证Length的数据大于数据报的最大长度即可保证是表示type，保证和之前兼容</li></ol><h3 id="数据字段"><a class="markdownIt-Anchor" href="#数据字段"></a> 数据字段</h3><blockquote><p>数据字段包含您要发送的信息。</p></blockquote><ol><li>数据的长度为46(18 + 46 = 64字节)-1500字节，帧的大小至少是64个字节，如果数据太短需要补充0才能生成data，前引导码不算帧长度</li><li>最前面8个字段不算帧的内容</li><li><strong>4个64字节大小帧同时发送才能保证占据全部的链路</strong>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mn>0</mn><mn>0</mn><mi>m</mi></mrow><annotation encoding="application/x-tex">100m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.64444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mord mathrm">0</span><span class="mord mathit">m</span></span></span></span>链路，用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5</mn><mn>1</mn><mn>2</mn><mi>u</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">512us</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.64444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">5</span><span class="mord mathrm">1</span><span class="mord mathrm">2</span><span class="mord mathit">u</span><span class="mord mathit">s</span></span></span></span>，就是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5</mn><mn>1</mn><mn>2</mn><mi>b</mi><mi>i</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">512bit</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">5</span><span class="mord mathrm">1</span><span class="mord mathrm">2</span><span class="mord mathit">b</span><span class="mord mathit">i</span><span class="mord mathit">t</span></span></span></span></li></ol><h3 id="fcs字段"><a class="markdownIt-Anchor" href="#fcs字段"></a> FCS字段</h3><blockquote><p>FCS字段(四个字节)包含循环冗余校验(cyclic redundancy check)值</p></blockquote><ol><li>固定4字节</li><li>发送设备创建<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mi>R</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">CRC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.68333em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="mord mathit" style="margin-right:0.00773em;">R</span><span class="mord mathit" style="margin-right:0.07153em;">C</span></span></span></span></li><li>接收设备重新计算<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mi>R</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">CRC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.68333em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="mord mathit" style="margin-right:0.00773em;">R</span><span class="mord mathit" style="margin-right:0.07153em;">C</span></span></span></span>，以检查在传输(transit)过程中可能对帧造成的损坏(damage)。</li><li>发送方用有效帧的内容除以一个数字，取得的余数放到这个位置，进行发送，接收方。也会将这个帧的内容除以那个数，然后将得到的进行比较，判断是否出现错误。</li><li>FCS正确不一定能保证数据是正确的，几次错误后导致FCS还是正确的，但是这种出错率比较低</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mi>R</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">CRC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.68333em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="mord mathit" style="margin-right:0.00773em;">R</span><span class="mord mathit" style="margin-right:0.07153em;">C</span></span></span></span>错误在不同情况下不同处理:有时候是直接抛弃，有时候还要再校验一下。</li></ol><h2 id="llc-逻辑链路控制子层"><a class="markdownIt-Anchor" href="#llc-逻辑链路控制子层"></a> LLC 逻辑链路控制子层</h2><ol><li>逻辑链路控制(LLC)子层通过单个链路管理设备之间的通信</li><li>LLC在IEEE 802.2规范中定义，并且支持无连接和面向连接(connect-oriented)的服务。</li><li>LLC子层允许部分数据链接层独立于现有技术运行,单个LLC子层可以与不同的MAC子层兼容(compatible)。</li><li>LLC子层基有面向连接的，也有不面向连接的，也就是既可以是进行总线服务，也可以实现令牌环路</li><li>LLC为什么被弃用了?因为局域网的正确率比较高，不需要LLC来进行守护，避免拖累速度和效率，而这部分也已经被第四层完成了</li><li>蓝牙等特殊连接，直到第二层就已经结束，所以就需要使用LLC来完成</li><li>有无连接是在LLC部分执行的，无法在MAC上进行处理的</li></ol><h3 id="llc子层封装"><a class="markdownIt-Anchor" href="#llc子层封装"></a> LLC子层：封装</h3><p><img src="https://s2.loli.net/2022/04/27/mCHt9vZ4ukAFzr2.png" alt="" /></p><ol><li>LLC子层服务上层，LLC会放在packet前面，然后再做一次封装。</li><li>第二次封装则为LLC子层向MAC子层请求封装操作。</li><li>如上的过程如下：<ol><li>LLC获取网络协议数据(数据包，packet)，并添加更多控制信息以帮助将数据包传递到其目的地。</li><li>它添加了802.2规范的两个寻址组件，以在每一端标识上层协议：<ul><li>目标服务访问点(DSAP)</li><li>源服务访问点(SSAP)</li></ul></li><li>然后，此重新打包的数据将传输到MAC以进一步封装数据。</li><li>基于SAP规范进行地址和分配。</li></ol></li><li>提供了<ol><li>无确认的无连接服务，被使用在<ol><li>可靠链路(上层来保证数据正确性)</li><li>实时任务</li><li>大多数的局域网内</li></ol></li><li>有确认的无连接服务，被使用在，不可靠链路，比如无线网</li><li>确认的有连接服务</li></ol></li></ol><h2 id="mac子层上的介质访问控制"><a class="markdownIt-Anchor" href="#mac子层上的介质访问控制"></a> MAC子层上的介质访问控制</h2><h3 id="十六进制数hexadecimal作为mac地址"><a class="markdownIt-Anchor" href="#十六进制数hexadecimal作为mac地址"></a> 十六进制数(Hexadecimal)作为MAC地址</h3><ol><li>MAC地址为48位，始终表示为<strong>12个十六进制数字</strong>。</li><li>IEEE管理的前6个十六进制数字(从左到右)标识制造商(manufacturer)或销售商(供应商)，并包括组织唯一标识符(OUI)。<ul><li>OUI是生产的厂商，比如<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mn>0</mn><mn>6</mn><mn>0</mn><mi>C</mi><mi>F</mi></mrow><annotation encoding="application/x-tex">0060CF</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.68333em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">0</span><span class="mord mathrm">0</span><span class="mord mathrm">6</span><span class="mord mathrm">0</span><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="mord mathit" style="margin-right:0.13889em;">F</span></span></span></span>就是Cisco的，然后可以使用后面24个bit进行自己的编码</li><li>一个厂商是可以买多个OUI的，也可以几个单位买一个OUI</li><li>第一个bit取0表示这个地址是一个单播地址，取1则是表示是一个多播地址。</li><li>第二个bit取0表示这个地址是全球唯一地址，取1则表示是一个地址唯一地址</li></ul></li><li>其余的6位十六进制数字包括接口序列号，由特定供应商管理。</li></ol><p><img src="https://s2.loli.net/2022/04/27/cLhF1H4XDakpoSA.png" alt="" /></p><h3 id="以太网8023广播"><a class="markdownIt-Anchor" href="#以太网8023广播"></a> 以太网802.3广播</h3><ol><li>广播<ul><li>目标MAC：全1(FFFF.FFFF.FFFF)</li><li>保证所有的设备都能收到这个地址</li><li>会导致非目的主机进行地址解析</li></ul></li><li>广播会不必要地打断电台(stations)，从而严重影响电台的性能</li><li>因此，仅在以下情况下才应使用广播：<ul><li>目的地的MAC地址未知</li><li>T目的地是所有主机</li></ul></li><li>非必要情况下我们不希望有很多广播，有可能会导致广播风暴</li></ol><h3 id="以太网操作"><a class="markdownIt-Anchor" href="#以太网操作"></a> 以太网操作</h3><ol><li>以太网是广播网络，也就是说，每个站都可以看到所有帧，而不管它们是否是目的地</li><li>通过MAC地址判断站点是否为目的地</li><li>目标站在OSI层上发送数据。其他节点丢弃(discard)帧</li></ol><p><img src="https://s2.loli.net/2022/04/27/gIWL95oRdYBNXbl.png" alt="" /></p><blockquote><p>上图中1是总线拓扑，1发送的数据帧会传达给所有在这个总线上的设备，非目的主机检查目的地址和本机MAC地址不同，则会将该帧丢弃。</p></blockquote><h3 id="广播操作步骤"><a class="markdownIt-Anchor" href="#广播操作步骤"></a> 广播操作步骤</h3><ol><li>听然后传送</li><li>广播 jam 信号<ul><li>是一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn><mn>2</mn><mi>b</mi><mi>i</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">32bit</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">3</span><span class="mord mathrm">2</span><span class="mord mathit">b</span><span class="mord mathit">i</span><span class="mord mathit">t</span></span></span></span>的全1的数据帧表示出现了冲突</li><li>标准思科认为是所有侦听的设备都会发送</li></ul></li><li>发生碰撞(Collision)<ul><li>两个设备同时使用链路发送电信号，则会出错。</li><li>如果有冲突，则会一直侦听总线，等到空闲则可以组织数据帧发送</li><li>还有问题就是多台主机同时进行组织数据帧进行发送</li><li>因为同时还在侦听总线，如果出现冲突，则会发出jam信号，只要有0或者1传输，有电平则会表示使用</li></ul></li><li>设备退回(back off)适当的时间，然后重新传输(retransmit),发生冲突的设备，根据特定的回退算法</li></ol><p><img src="https://s2.loli.net/2022/04/27/K4QqPuHCGwD8pOZ.png" alt="" /></p><ol start="5"><li>为什么64个字节才能抢线路？<ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mn>0</mn><mi>M</mi></mrow><annotation encoding="application/x-tex">10M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.68333em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mord mathit" style="margin-right:0.10903em;">M</span></span></span></span>以太网，64个字节才能在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5</mn><mn>1</mn><mn>2</mn><mi>u</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">512us</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.64444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">5</span><span class="mord mathrm">1</span><span class="mord mathrm">2</span><span class="mord mathit">u</span><span class="mord mathit">s</span></span></span></span>中传输满整个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mn>0</mn><mn>0</mn><mi>m</mi></mrow><annotation encoding="application/x-tex">100m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.64444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mord mathrm">0</span><span class="mord mathit">m</span></span></span></span>的线路</li></ul></li></ol><h3 id="以太网的csmacd"><a class="markdownIt-Anchor" href="#以太网的csmacd"></a> 以太网的CSMA/CD</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec03/11.png" alt="" /></p><ol><li>首先设备要发送数据</li><li>开始侦听链路是非忙，如果忙，则过一阵来再看看</li><li>如果不忙，则开始准备发送<ul><li>如果有错误，则到9，表示有冲突发送，广播一个jam sighnal，把自己尝试的次数 + 1(重发有一定限度)</li><li>尝试次数过多，会像上层协议传输网络不可用</li><li>尝试次数还可，则到13计算一个回退时间，来再次尝试，回退时间单位，会保证A和D的时间差能保证第一个人已经用完电路来避免冲突。</li></ul></li><li>如果没有错误，则一直传输到结束为止</li></ol><h1 id="无线局域网和csmaca"><a class="markdownIt-Anchor" href="#无线局域网和csmaca"></a> 无线局域网和CSMA/CA</h1><h2 id="无线wireless局域网"><a class="markdownIt-Anchor" href="#无线wireless局域网"></a> 无线(Wireless)局域网</h2><ol><li>无线局域网<ul><li>基于单元的通信</li><li>电台发送的信号只能被附近的电台接收</li><li>短距离传输</li></ul></li><li>无线局域网标准<ul><li>IEEE 802.11</li><li>IEEE <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>8</mn><mn>0</mn><mn>2</mn><mi mathvariant="normal">.</mi><mn>1</mn><mn>1</mn><mi>b</mi></mrow><annotation encoding="application/x-tex">802.11b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">8</span><span class="mord mathrm">0</span><span class="mord mathrm">2</span><span class="mord mathrm">.</span><span class="mord mathrm">1</span><span class="mord mathrm">1</span><span class="mord mathit">b</span></span></span></span></li><li>IEEE <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>8</mn><mn>0</mn><mn>2</mn><mi mathvariant="normal">.</mi><mn>1</mn><mn>1</mn><mi>a</mi></mrow><annotation encoding="application/x-tex">802.11a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.64444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">8</span><span class="mord mathrm">0</span><span class="mord mathrm">2</span><span class="mord mathrm">.</span><span class="mord mathrm">1</span><span class="mord mathrm">1</span><span class="mord mathit">a</span></span></span></span></li><li>IEEE <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>8</mn><mn>0</mn><mn>2</mn><mi mathvariant="normal">.</mi><mn>1</mn><mn>1</mn><mi>g</mi></mrow><annotation encoding="application/x-tex">802.11g</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">8</span><span class="mord mathrm">0</span><span class="mord mathrm">2</span><span class="mord mathrm">.</span><span class="mord mathrm">1</span><span class="mord mathrm">1</span><span class="mord mathit" style="margin-right:0.03588em;">g</span></span></span></span></li><li>IEEE <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>8</mn><mn>0</mn><mn>2</mn><mi mathvariant="normal">.</mi><mn>1</mn><mn>1</mn><mi>n</mi></mrow><annotation encoding="application/x-tex">802.11n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.64444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">8</span><span class="mord mathrm">0</span><span class="mord mathrm">2</span><span class="mord mathrm">.</span><span class="mord mathrm">1</span><span class="mord mathrm">1</span><span class="mord mathit">n</span></span></span></span></li></ul></li><li>无线局域网分为两类<ol><li>有基础设施拓扑网络(Infrastructure mode)</li><li>无基础设施拓扑网络(ad-hoc mode)</li></ol></li><li>基础设施是提前建设好的基站，可以覆盖一定的区域<ol><li>无线网卡和基础设施通信</li></ol></li></ol><h3 id="虚拟载波监听"><a class="markdownIt-Anchor" href="#虚拟载波监听"></a> 虚拟载波监听</h3><ol><li>源站把它要占用信道的时间(包括目的站发回确认帧所需的时间)写入到所发送的数据帧中(即在首部中的<code>持续时间</code>中写入需要占用信道的时间，以微秒为单位，一直到目的站把确认帧发送完为止)，以便使其他所有站在这一段时间都不要发送数据。</li><li>当站点检测到正在信道中传送的帧中的<code>持续时间</code>时，就调整自己的(Network Allocation Vector，NAV网络分配向量)。NAV指出了信道处于忙状态的持续时间。</li><li>为什么信道空闲还要再等待呢?就是考虑可能有其他站点有<strong>高优先级</strong>的帧要发送。如有，就让高优先级帧先发迭。等待的时间就是IFS(Inter-Frame Space，帧间间隔)。<ol><li>SIFS(Short Inter-Frame Space，短帧间间隔)最短</li><li>PIFS(Point Inter-Frame Space，点协调功能帧间间隔)其次</li><li>DIFS(Distributed Inter-Frame Space，分布协调功能帧间间隔)最长。</li></ol></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec03/data_link_layer-1-CSMACA.png" alt="WLAN中的CSMA/CA示意" /></p><ol start="5"><li>实际吞吐量<ol><li>因为源站点发出帧后，接收节点需要返回确认帧(ACK)。这将导致吞吐量降到带宽的一半</li><li>还受到信号强度的影响，当信号变弱之后，将会发起ARS(Adaptive Rate Selection，自适应速率选择)，传输单元会将传输速率从11 Mbps降到5.5 Mbps，或5.5到2，或2到1</li></ol></li></ol><h3 id="无线局域网标准"><a class="markdownIt-Anchor" href="#无线局域网标准"></a> 无线局域网标准</h3><ol><li>IEEE 802.11<ul><li>一项关键技术：<strong>直接序列扩频(DSSS，Direct Sequence Spread Spectrum)</strong></li><li>DSSS适用于在 1 到 2 Mbps范围内运行的无线设备，上面的这个速率在实际生活场景中要除以2，因为无线通信都是有确认的，所以一般我们认为信道一来一回才有一次通信。</li><li>DSSS可以高达11 Mbps的速度运行，但在2 Mbps以上时将不被视为兼容</li><li>也称为 Wi-Fi™，无线保证度，是星型拓扑，基站作为中心</li></ul></li><li>IEEE 802.11b(Wi-Fi)<ul><li>传输能力提高到11 Mbps</li><li>所有802.11b系统都向后兼容(backward compliant)，因为它们还仅针对DSSS支持1和2 Mbps数据速率的802.11。</li><li>通过使用与802.11不同的编码技术来实现(Achieves)更高的数据吞吐率</li><li>在2.4 GHz内运行，解决了802.11中出现的部分问题</li><li>使用的是高速直连方案</li></ul></li><li>IEEE 802.11a<ul><li>涵盖在5 GHz传输频带中运行的WLAN设备，运行在5Hz上</li><li>802.11a能够提供54 Mbps的数据吞吐量，并且采用称为&quot;速率加倍&quot;的专有技术已达到108 Mbps。</li><li>实际上，更标准的等级是20-26 Mbps。</li><li>传播距离相比802.11和802.11b短(衰减强)，但是对于多用户上网的支持更好了。</li><li>使用<strong>正交频分复用</strong>技术。</li></ul></li><li>IEEE 802.11g<ul><li>可以提供与802.11a(54Mbps)相同的功能，但具有802.11b的向后兼容性</li><li>使用**正交频分复用(OFDM，Orthogonal Frequency Division Multiplexing)**技术。</li></ul></li><li>IEEE 802.11n: 下一代的WLAN<ul><li>提供的带宽是802.11g的两倍，即108Mbps，理论上可达500-600Mbps。实际上是100M左右</li><li>目前使用比较多的方案。</li></ul></li></ol><h3 id="无线网络拓扑"><a class="markdownIt-Anchor" href="#无线网络拓扑"></a> 无线网络拓扑</h3><p><img src="https://s2.loli.net/2022/04/27/MEWCIvpPqXT9YHb.png" alt="" /></p><ol><li>这里讲的是有基础设施的无线网络拓扑结构</li><li>DS:分配系统，线</li><li>上网还要通过网关</li></ol><h3 id="无线网络的基础设施"><a class="markdownIt-Anchor" href="#无线网络的基础设施"></a> 无线网络的基础设施</h3><ol><li>基本服务集(BSS)包括一个基站(BS)和几个无线主机<ul><li>所有主机都可以在本地BSS中直接相互通信</li><li>基站中两个主机之间是不直接互相通信的。</li><li>同一个BSS中的主机间直接通信</li></ul></li><li>接入点(AP)充当基础架构模式的基站(BS)<ul><li>AP硬连线到有线(cabled)局域网，以提供Internet访问和与有线网络的连接</li><li>安装AP后，将分配服务集标识符(SSID)和通道</li><li>单元格的范围是91.44至152.4米(300至500英尺)</li><li>覆盖大概100m左右</li></ul></li><li>一个BSS可以通过分发系统(DS)连接到另一个BSS，并构造一个扩展服务集(ESS)。</li><li>家里的路由器既有AP的功能又有路由器功能，但是理论上只应该是AP的功能，一般我们认为家用路由器是一个AP</li></ol><h2 id="访问过程accessing-procedure"><a class="markdownIt-Anchor" href="#访问过程accessing-procedure"></a> 访问过程(Accessing Procedure)</h2><ol><li>在WLAN中激活客户端时，它将开始&quot;侦听&quot;与之&quot;关联&quot;的兼容设备</li><li>这被称为&quot;扫描&quot;<ul><li>主动扫描</li><li>被动扫描</li></ul></li><li>需要和AP连接，才能向AP发送数据帧。</li></ol><h3 id="主动扫描"><a class="markdownIt-Anchor" href="#主动扫描"></a> 主动扫描</h3><ol><li>导致从寻求加入网络的无线节点发送探测(probe)请求。</li><li>探测请求将包含它希望加入的网络的服务集标识符(SSID)</li><li>当找到具有相同SSID的AP时，该AP将发出探测响应</li><li>身份验证和关联步骤已完成</li><li>移动端发出请求帧，但是AP不发送自己的信息</li><li>AP比较安全。不用发送出自己的SSID</li></ol><h3 id="被动扫描"><a class="markdownIt-Anchor" href="#被动扫描"></a> 被动扫描</h3><ol><li>(ad hoc) 侦听由AP(基础结构模式)或对等节点(ad hoc)传输的信标管理帧(beacon management frames)，包含自己的SSID信息</li><li>当节点接收到包含要尝试加入的网络的SSID的信标时，将尝试加入该网络。</li><li>被动扫描是一个连续的过程，并且随着信号强度的变化，节点可能会与AP关联或分离，也是因为强度变化，所以连接状态需要维持。</li></ol><h2 id="无线局域网的帧结构"><a class="markdownIt-Anchor" href="#无线局域网的帧结构"></a> 无线局域网的帧结构</h2><ol><li>WLAN不使用标准的802.3帧。</li><li>框架有三种类型<ul><li>控制帧(Control Frames)</li><li>管理帧(Management frames)</li><li>数据帧(仅数据帧类似于802.3帧)</li></ul></li><li>无线数据帧和802.3帧的有效载荷(payload)为1500字节<ul><li>但是，以太帧不能超过1518字节，而无线帧则可能高达<strong>2346字节</strong>。(是因为在无线情况下使用的是有确认的信息，增加无线帧有效数据大小，来对冲，确认的信息的损耗)。</li><li>无线网络帧的大小也不会太大，尽量避免转换成有线帧的时候出现帧的拆分，也就是说大小一般在1500字节以下，通常，WLAN帧大小将被限制为1518字节，因为它最常连接到有线以太网。</li></ul></li></ol><h2 id="数据帧结构80211-无线网"><a class="markdownIt-Anchor" href="#数据帧结构80211-无线网"></a> 数据帧结构(802.11 无线网)</h2><p><img src="https://s2.loli.net/2022/04/27/nm6F1KyVH3qAl58.png" alt="" /></p><ol><li>帧控制信息包含 16 bit</li><li>去往AP和来自AP是我们需要重点确认</li><li>WEP规格，Wired Equivalent Privacy(有线等效保密)</li><li>持续期:参数，<strong>很重要</strong>，CSMA/CA需要，这个信息</li><li>有时间窗口，如果超时没收到信号，则进行重传</li></ol><h3 id="数据帧的的地址分类"><a class="markdownIt-Anchor" href="#数据帧的的地址分类"></a> 数据帧的的地址分类</h3><ol><li>ad hoc(无线网地址)用地址4</li><li>有基础设施用的是地址1、2、3</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据链路层&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#数据链路层&quot;&gt;&lt;/a&gt; 数据链路层&lt;/h1&gt;
&lt;h1 id=&quot;数据链路层概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#数据链路层概述&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="计算机网络" scheme="https://freeeeeeeeedom.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="互联网计算" scheme="https://freeeeeeeeedom.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="互联网计算" scheme="https://freeeeeeeeedom.gitee.io/tags/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>物理层</title>
    <link href="https://freeeeeeeeedom.gitee.io/2022/04/26/%E7%89%A9%E7%90%86%E5%B1%82/"/>
    <id>https://freeeeeeeeedom.gitee.io/2022/04/26/%E7%89%A9%E7%90%86%E5%B1%82/</id>
    <published>2022-04-26T15:04:37.000Z</published>
    <updated>2022-04-27T13:08:07.678Z</updated>
    
    <content type="html"><![CDATA[<h1 id="物理层"><a class="markdownIt-Anchor" href="#物理层"></a> 物理层</h1><ul><li>Type of Network</li><li>LAN Media</li><li>UTP for Ethernet</li><li>Media and signal Problems</li><li>Basic Knowledge of Data Communication</li></ul><h1 id="网络连接类型-type-of-networks"><a class="markdownIt-Anchor" href="#网络连接类型-type-of-networks"></a> 网络连接类型 Type of Networks</h1><img src="https://s2.loli.net/2022/04/27/jz3Zo9gRy2KUvkA.png" style="zoom:50%;" /><ol><li>多路复用共享介质 Shared media environment<ul><li>多个主机可以访问同一介质</li><li>这意味着它们都共享相同的介质—即使&quot;wire&quot;可能是UTP，它有四对线</li></ul></li><li>点对点(Point To Point)网络 Point-to-point network environment<ol><li>一个设备通过链路连接到另一个设备</li><li>最广泛地应用于拨号网络连接，也是你最熟悉的一种。使用电信号来完成传输。</li></ol></li></ol><h1 id="局域网介质"><a class="markdownIt-Anchor" href="#局域网介质"></a> 局域网介质</h1><img src="https://s2.loli.net/2022/04/27/kG3KP2WZuE1vOMJ.png" style="zoom:50%;" /><blockquote><p>第一类传输电信号，第二类传输光信号，第三类传输无线电波。</p></blockquote><ol><li>功能是传输数据 tramdmiy data</li><li>光信号、无线信号等传输过程称为<strong>编码</strong> encoding</li><li>电缆类型包括STP(有屏蔽双绞线)、UTP(无屏蔽双绞线)、同轴电缆、光纤</li><li>调节频率、电压、相位等方式来实现不同01编码</li></ol><h2 id="utp-无屏蔽双绞线-unshielded-twisted-pair"><a class="markdownIt-Anchor" href="#utp-无屏蔽双绞线-unshielded-twisted-pair"></a> UTP (无屏蔽双绞线 Unshielded Twisted Pair)</h2><img src="https://s2.loli.net/2022/04/27/wSLCoqu4PRO3p1H.png" style="zoom:50%;" /><blockquote><p>由八根子线组成,两个线组合成一组，共四组，可以保证每一组电流抵消电磁波干扰(抗干扰能力有限)</p></blockquote><ol><li>仅(solely)依赖于消除效应，由双绞线对产生，以限制由EMI和RFI引起的信号退化</li><li>有四对铜线，阻抗(impedance)为100欧姆，频率低、接口小、布线更加方便。</li><li>一般认为有效范围为100m</li></ol><h3 id="无屏蔽双绞线的优点"><a class="markdownIt-Anchor" href="#无屏蔽双绞线的优点"></a> 无屏蔽双绞线的优点</h3><img src="https://s2.loli.net/2022/04/27/eQvKTHBYpy68rsR.png" style="zoom:50%;" /><ol><li>易于安装且成本较低，线薄接口小 easy to install and is less expensive</li><li>每米成本低于任何其他类型的局域网布线</li><li>较小的外径不能像其他类型的电缆那样迅速地填满布线管道(duct)</li><li>使用RJ连接器安装，因此可以大大减少潜在的网络噪声源，并确保良好的可靠连接</li></ol><h3 id="无屏蔽双绞线的缺点"><a class="markdownIt-Anchor" href="#无屏蔽双绞线的缺点"></a> 无屏蔽双绞线的缺点</h3><ol><li>与其他类型的网络媒体相比，电缆更容易产生<strong>电噪声和干扰</strong></li><li>双绞线的信号增强距离比同轴电缆(Coaxial)和光纤(Fiber-Optic)<strong>短</strong></li></ol><h2 id="同轴电缆-coaxial"><a class="markdownIt-Anchor" href="#同轴电缆-coaxial"></a> 同轴电缆 Coaxial</h2><img src="https://s2.loli.net/2022/04/27/iBLNpQUnZS1E4uW.png" style="zoom: 67%;" /><ol><li>薄/厚</li><li>与双绞线相比，不使用中继器的网络运行时间更长</li><li>比光纤便宜但比双绞线贵</li><li>中间是铜导线，在外面缠上一层金属网，防止外部干扰，细导线传输相对近，粗导线传输相对比较远</li><li>500m左右，无论如何比双绞线传输更加远，成本也要高一点</li><li>内置无线网卡肯定没有同轴电缆，同轴电缆是比较落后的工艺。</li></ol><h2 id="光缆-fiber-optic"><a class="markdownIt-Anchor" href="#光缆-fiber-optic"></a> 光缆 Fiber-Optic</h2><img src="https://s2.loli.net/2022/04/27/8UJSpE7bvQfo3qi.png" style="zoom: 67%;" /><ol><li>传导调制(modulated)光传输</li><li>不易受到电磁干扰或射频干扰，并且能够比其他网络媒体更高的数据速率</li><li>电磁波(electromagnetic wave)通过光纤被引导</li><li>比较可靠，中间是二氧化硅(光导体)，外面是塑料套，两个接口一个接收一个发送</li><li>成本比较高</li></ol><h3 id="光缆模式fiber-optic-mode-type"><a class="markdownIt-Anchor" href="#光缆模式fiber-optic-mode-type"></a> 光缆模式(Fiber-Optic Mode Type)</h3><ol><li>单模式：单个光传输 Single Mode<ul><li>也称为轴(axial)：光沿着电缆的轴传播</li><li>由于多模中的色散(dispersion)，比多模(高达10 Gbps)更快</li><li>通常用于广域网</li><li>直径小于多模(色散较小)</li><li>最常使用ILD，但也使用LED</li><li>光导体直径比较细，相对于多模式光缆要细一个数量级，认为光传输近似直射，能量损耗少，多用于广域网</li></ul></li><li>多模式 多根光不同角度传输 Multimode<ul><li>光以不同的角度进入玻璃管并沿非轴方向传播，这意味着它从玻璃管壁上来回反射</li><li>大于单光模式，最常用于局域网</li><li>易受更大分散性的影响</li><li>光导体直径大一些，同时传输多光信号，按照角度进行识别，一个上面实现多路传输，能量损失大一些(反射)</li></ul></li><li>都需要用注入式激光二极管或者发光二极管进行发射</li></ol><h2 id="无线通信-wireless-communication"><a class="markdownIt-Anchor" href="#无线通信-wireless-communication"></a> 无线通信 Wireless Communication</h2><ol><li>区分不同电磁波的主要方法是通过其频率(频率多路复用)</li></ol><img src="https://s2.loli.net/2022/04/27/JPtTwSmXucCyEov.png" style="zoom:50%;" /><ol start="2"><li>把信号编码成为电磁波的方式<ul><li>不同设备使用不同频段，可以互不干扰</li></ul></li></ol><h2 id="无线传输手段-wireless-transmission-methods"><a class="markdownIt-Anchor" href="#无线传输手段-wireless-transmission-methods"></a> 无线传输手段 Wireless Transmission Methods</h2><ol><li>激光 Lasers<ul><li>输出一个相干(coherent)的电磁场，其中所有的波都在同一频率上，并在同一相位上排列</li><li>约定好电磁波频率范围，使用确定对射方案进行传输，部署在中间没有障碍物的两端之间，不能衍射</li></ul></li><li>红外线 Infrared<ul><li>通常是一种瞄准线(line-of-sight)技术，但可以反弹(bounced)或重定向</li><li>无法通过不透明对象</li><li>红外能量要比激光弱的多，成本低，不能衍射，不能跨障碍物传输</li></ul></li><li>收音机 Radio<ul><li>携带可以通过墙壁的数据信号</li><li>地面(terrestrial)和卫星无线电技术</li><li>可以通过衍射使得信号在比较远的距离和障碍物之间进行通信</li><li>传输距离比较远，辐射能量小，容易受到干扰，比如雨天能量会损失，在功率较大的设备旁边容易被干扰</li><li>路设发送信号:无线电台，卫星发射信号:GPS</li></ul></li></ol><h1 id="utp-for-ethernet-以太网使用的双绞线"><a class="markdownIt-Anchor" href="#utp-for-ethernet-以太网使用的双绞线"></a> UTP for Ethernet 以太网使用的双绞线</h1><h2 id="电缆规格和终端"><a class="markdownIt-Anchor" href="#电缆规格和终端"></a> 电缆规格和终端</h2><ol><li>网络媒体标准由下列团体制定和发布：<ul><li>电气与电子工程师学会 制定硬件标准，指定一些新型的协议。</li><li>保险商实验室</li><li>电子工业联盟</li><li>电信工业协会</li><li>美国国家标准协会</li></ul></li></ol><img src="https://s2.loli.net/2022/04/27/rtsjLGKkNAS654y.png" style="zoom: 67%;" /><ol><li>对应不同的接地等标准</li></ol><h2 id="无屏蔽双绞线的分类"><a class="markdownIt-Anchor" href="#无屏蔽双绞线的分类"></a> 无屏蔽双绞线的分类</h2><ol><li>一类线：主要用于语音传输，不用于数据传输，只有两根线做双绞线，常用作电话的语音通信，并不做语音进行通信</li><li>二类线：传输频率1MHz，用于语音和最高4Mbps的数据传输，常见于令牌网环网，不是很常用</li><li>三类线：EIA/TIA568标准指定电缆，传输频率16MHz，用于语音传输及最高传输速率为10Mbps的数据传输，主要用于10BASE-T(10M带宽的双绞线)</li><li>四类线：传输频率为20MHz，用于语音传输和最高传输速率16Mbps的数据传输，主要用于令牌网和 10BASE-T/100BASE-T</li><li>五类线：增加了绕线密度，外套高质量绝缘材料，用于语音和数据传输(主要为100/1000BASE-T)，是最常用的以太网电缆<ul><li>和三类线相比，绞合度更高，抗干扰能力更强。</li><li>从五类线开始进行了更加标准化的处理。</li></ul></li><li>超五类线(主要使用的)：衰减小，串扰少，具有更高的衰减/串扰比和信噪比、更小的时延误差，主要用于1000BASE-T</li><li>六类线：传输频率为1MHz～250MHz，性能远高于超五类标准，适用于高于1Gbps的应用</li><li>七类线：带宽为600MHz，可能用于今后的10G比特以太网。</li></ol><h2 id="线的类型-type-of-cable"><a class="markdownIt-Anchor" href="#线的类型-type-of-cable"></a> 线的类型 Type of Cable</h2><ol><li>直通线 Straght Cable</li><li>反转线 Rollover Cable</li><li>交叉电缆 Crossover Cable</li><li>两个台式机直连使用交叉线，台式机和交换机相连使用直通线。</li></ol><img src="https://s2.loli.net/2022/04/27/SxDNB8vcgesimld.png" style="zoom:50%;" /><blockquote><p>制作线的过程见上图</p></blockquote><h3 id="直通线"><a class="markdownIt-Anchor" href="#直通线"></a> 直通线</h3><ol><li>100 欧姆平衡双绞线电信插座/连接器</li></ol><img src="https://s2.loli.net/2022/04/27/SxDNB8vcgesimld.png" style="zoom:50%;" /><ol start="2"><li>双绞线是八根不同子线，根据颜色进行划分,从左到右(底下):白绿色、绿色、白橙色、蓝色、白蓝色、橙色、白棕色、棕色</li><li>两边都是T568A或者都是T568B的则是直通线</li></ol><h3 id="反转线"><a class="markdownIt-Anchor" href="#反转线"></a> 反转线</h3><ol><li>别名：控制台电缆,将计算机作为其他网络设备的控制台，如下解释</li><li>用于将工作站或终端连接到路由器/交换机的控制台端口以进行配置</li><li>一端的插脚1连接到另一端的插脚8；然后插脚2连接到插脚7，插脚3连接到插脚6，依此类推，两端是插脚对应是反着的</li><li>使用控制台配置设备(超级终端，使用电脑进行交换机路由器的配置)<ul><li>使用RJ-45-to-DB-9适配器连接计算机的串行端口(com) Connect the serial port (com) of computer by using RJ-45-to-DB-9 adapter</li><li>启动&quot;超级终端&quot; Start up “super terminal”</li><li>使用&quot;默认配置&quot; Use “default configurations”</li><li>注意，我们连接的是console端口，而不能是网口。</li></ul></li></ol><img src="https://s2.loli.net/2022/04/27/SxDNB8vcgesimld.png" style="zoom:50%;" /><h3 id="交叉线"><a class="markdownIt-Anchor" href="#交叉线"></a> 交叉线</h3><ol><li>电缆一端的对2和对3将在另一端反转，一端为T568-A的排序，另一端为T568-B的排序</li><li>被认为是&quot;垂直&quot;布线/主干的一部分</li><li>可以用来<ol><li>连接两个或多个集线器或开关</li><li>连接两个独立的工作站以创建小型</li></ol></li><li>主要用来连接相同的设备，相同的PC之间的连接</li><li>堆叠技术:用交叉线来两个交换机(将两个交换机合成为一个交换机进行使用)或者两个hubs，2个8口交换机，通过一根线连接，则有14个端口</li></ol><h1 id="介质和信号问题物理层"><a class="markdownIt-Anchor" href="#介质和信号问题物理层"></a> 介质和信号问题(物理层)</h1><h2 id="信令和通信问题"><a class="markdownIt-Anchor" href="#信令和通信问题"></a> 信令和通信问题</h2><ol><li>传播(本质是电磁波) Propagation<ul><li>行程时间；速度取决于介质</li><li>随着数据传输速率的增加，有时必须考虑信号传输所需的时间。</li><li>不同介质传播时间是不同的。传播时延。</li></ul></li><li>衰减 Attenuation<ul><li>由于**周围环境(surroundings)**造成的远距离信号丢失</li><li>会影响网络，因为它限制了可以通过其发送消息的网络布线的长度</li><li>在有限长度下进行传输</li></ul></li><li>反射 Reflection<ul><li>由介质的不连续性引起，我们要保证介质稳定。</li><li>发生在电信号中；可能是电缆扭结(kinks)或电缆端接不良的结果</li><li>网络应具有特定的阻抗，以匹配NIC中的电气组件</li></ul></li><li>噪声(电子干扰) Noise<ul><li>对光/电磁信号的不必要的附加</li><li>电缆中其他电线的串扰电噪声</li><li>EMI(电磁干扰)可由电动机引起。</li><li>可以通过扭转线对在网络介质中提供自屏蔽来避免信号的消除。</li></ul></li><li>时间问题 Timing problem<ul><li>色散信号在时间上，可以通过适当的电缆设计、限制电缆长度和找到适当的阻抗来固定</li><li>抖动源和目标不同步，可通过硬件和软件(包括协议)修复</li><li>网络信号延时</li></ul></li></ol><h2 id="冲突和冲突域-collisions-and-collision-domains"><a class="markdownIt-Anchor" href="#冲突和冲突域-collisions-and-collision-domains"></a> 冲突和冲突域 Collisions and Collision Domains</h2><ol><li>当两个位元在同一网路上同时传播时，会发生碰撞。</li><li>通过添加中继器和集线器<strong>扩展</strong>冲突域。</li><li>可以通过添加智能设备(如网桥、交换机和路由器)来分割网络。</li><li>到第二第三层(分段后)才能有效划分冲突域，第一层不能解决冲突问题。</li></ol><h2 id="分割碰撞域-segmenting-collision-domains"><a class="markdownIt-Anchor" href="#分割碰撞域-segmenting-collision-domains"></a> 分割碰撞域 Segmenting Collision Domains</h2><img src="https://s2.loli.net/2022/04/27/FkuQrtaqORN7z9m.png" style="zoom:50%;" /><ol><li>将不同的冲突域进行分段(第一层设备无法解决这些问题)，还是在一个局域网中</li><li>局域网划分是根据TCP/IP的协议栈的IP查询的，到三层才能做网络的分段。</li></ol><h1 id="数据通信的基础信息"><a class="markdownIt-Anchor" href="#数据通信的基础信息"></a> 数据通信的基础信息</h1><ol><li>数据通信的理论基础:<strong>为什么带宽是有上限的</strong><ol><li>基本术语</li><li>信号处理</li><li>波特率与比特率</li></ol></li><li>数据通信技术<ol><li>数据通信系统基本结构</li><li>数据表示和传输方式</li><li>信号的传输</li><li>数字信号编码</li><li>多路复用</li><li>通信方式</li></ol></li><li>参考计算机网络教材，思科网络教程是没有的。</li></ol><h2 id="基本术语"><a class="markdownIt-Anchor" href="#基本术语"></a> 基本术语</h2><ol><li>信号(signal)——数据的电气的或电磁的表现。传输的是数据。<ul><li>“模拟的”(analogous)——消息的参数的取值是<strong>连续</strong>的，模拟信号是随时间变化而平稳变化的连续波形式</li><li>“数字的”(digital)——消息的参数的取值是离散的，数字信号是离散信号，可能包含有限的几个预定值</li></ul></li><li>码元(code)——在使用<strong>时间域</strong>(或简称为时域,基本时间单位)的波形表示数字信号时，代表不同离散数值的基本波形。<ul><li>传输基本单位，并不一定只包含一位，比如有8个单位，那么我们可以根据波形分为8种，8种区分可以传输三位，2<sup>3</sup> = 8</li></ul></li></ol><h2 id="理论基础信号处理"><a class="markdownIt-Anchor" href="#理论基础信号处理"></a> 理论基础:信号处理</h2><ol><li>模拟信号可以被分为简单信号和复合信号<ul><li>简单信号(<strong>正弦波</strong>)不能被分解为更简单的模拟信号</li><li>正弦波和余弦波也就只差一个相位，问题不大。</li><li>一般使用正弦波来进行表示。</li><li>复合信号可以被分解为多个正弦波</li></ul></li><li>复合模拟信号的分解：<strong>傅立叶分析</strong>，任何一个周期为T的有理周期性函数g(t)可分解为若干项(可能无限多项)正弦和余弦函数之和：</li></ol><img src="https://s2.loli.net/2022/04/27/k1tuvMbBSDK5RpO.png" style="zoom:50%;" /><ol start="3"><li>数字信号一般是<strong>非周期性</strong>的，通常在传输介质上表现为<strong>方波</strong>，非周期函数也可以变换成周期函数来进行分析</li><li>一个数字信号可以分解为无穷多个被称为<strong>谐波</strong>的简单正弦波，每个谐波都具有不同的<strong>频率与相位</strong>，最后组合成一个方波。</li><li>在介质上发送数字信号时，其实质是在发送无穷多的简单谐波，如果某些分量未能忠实地通过介质传输，则在接收端将产生信号<strong>畸变</strong>。</li><li>由于介质本身的限制，信号畸变是难以完全避免的:传输距离越远、传输速率越高，越容易受到干扰。</li><li>任何实际的信道都不是理想的，在传输信号时会产生各种失真以及带来多种干扰。</li><li>码元传输的速率越高，或信号传输的距离越远，在信道的输出端的波形的失真就越严重</li></ol><h2 id="数字信号通过实际的信道"><a class="markdownIt-Anchor" href="#数字信号通过实际的信道"></a> 数字信号通过实际的信道</h2><ol><li>有失真，但可识别:形变只要不是不可识别还是可以被处理的。</li></ol><img src="https://s2.loli.net/2022/04/27/au3mtOZ1FVX2Sfd.png" style="zoom:67%;" /><ol start="2"><li>失真大，无法识别:无法区分，码间串扰(无法识别每一个码元)</li></ol><img src="https://s2.loli.net/2022/04/27/sneKlx9dUrFikwN.png" style="zoom:67%;" /><h2 id="无噪声信道的最高传输速率"><a class="markdownIt-Anchor" href="#无噪声信道的最高传输速率"></a> 无噪声信道的最高传输速率</h2><ol><li>1924 年，奈奎斯特(Nyquist) 指出在假定无噪声的信道上，为避免<strong>码间串扰</strong>，传输比特率的上限值为：<ul><li>C = W log<sub>2</sub>L bps</li><li>W 为信道的带宽(以 Hz 为单位)，传输信号的频率(上限)</li><li>L 为表示数据的信号电平的数量(码元能表示的信息数)，能表示8个，则为3。</li></ul></li><li>在任何信道中，码元传输的速率是有上限的，否则就会出现码间串扰的问题，使接收端对码元的判决(即识别)成为不可能。</li><li>如果信道的频带越宽，也就是能够通过的信号高频分量越多，那么就可以用更高的速率传送码元而不出现码间串扰</li><li>这是理想情况下，没有信道干扰。</li></ol><h2 id="噪声信道的最高传输速率"><a class="markdownIt-Anchor" href="#噪声信道的最高传输速率"></a> 噪声信道的最高传输速率</h2><ol><li>香农(Shannon)用信息论的理论推导出了带宽受限且有高斯白噪声干扰的信道的极限、无差错的信息传输速率</li><li>信道的极限信息传输速率 C 可表达为<ul><li>C = W log<sub>2</sub>(1 + S/N) bps</li><li>W 为信道的带宽(以 Hz 为单位)</li><li>S 为信道内所传信号的平均功率</li><li>N 为信道内部的高斯噪声功率(用高斯概率公式去拟合)</li><li>S/N 称为信噪比</li></ul></li><li>香农公式的含义<ol><li>信道带宽或信道的<strong>信噪比</strong>越大，极限传输速率越高</li><li>只要信息传输速率低于信道的极限信息传输速率，就<strong>一定</strong>有办法实现无差错的传输。</li><li>若信道的带宽 W 或信噪比 S/N 没有上限(实际不 可能)，则其极限信息传输速率 C 也没有上限</li><li>实际能够达到的传输速率比香农极限传输速率<strong>低不少</strong></li><li>请注意：对于频带宽度已确定的信道，即使信噪比不能再提高，且码元速率已达上限，也<strong>有办法提高</strong>传输速率。这就是用编码的方法让每个码元携带更多比特的信息量</li></ol></li></ol><h2 id="理论基础波特率和比特率"><a class="markdownIt-Anchor" href="#理论基础波特率和比特率"></a> 理论基础:波特率和比特率</h2><ol><li>波特率(baud)和比特率(bit)<ul><li>波特率(调制速率)：波信号每秒钟变化的次数</li><li>比特率：每秒钟传送的二进制位数。</li></ul></li><li>波特率与比特率的关系取决于信号值与比特位的关系<ul><li>例：每个信号值表示为3位，则比特率是波特率的3倍； 每个信号值表示为1位，则比特率和波特率相同</li><li>对于比特率为a bps的信道，发送8位所需的时间为 8/a秒，若8位为一个周期Ｔ，则一次谐波的频率是：f = a/8 Hz</li></ul></li></ol><h2 id="数据通信系统的模型"><a class="markdownIt-Anchor" href="#数据通信系统的模型"></a> 数据通信系统的模型</h2><img src="https://s2.loli.net/2022/04/27/sneKlx9dUrFikwN.png" style="zoom: 67%;" /><ol><li>在传输工程中，首先从输入方(原系统，数字比特流)，经过传输系统(比较远，用模拟信号系统)，到达目的系统(数字比特流)</li><li>发送方将数字信号调制成模拟信号</li><li>接收方将模拟信号调制成数字信号</li></ol><h2 id="数据通信技术数字数据编码"><a class="markdownIt-Anchor" href="#数据通信技术数字数据编码"></a> 数据通信技术：数字数据编码</h2><ol><li>基带：基本频带，指传输变换前所占用的频带，是原始信号所固有的频带</li><li>基带传输:在传输时直接使用基带数字信号(不转换为 模拟信号，即不调制)<ul><li>基带传输是一种最简单最基本的传输方式，一般 用低电平表示&quot;0&quot;，高电平表示&quot;1&quot;</li><li>适用范围：低速和高速的各种情况。</li><li>限制：因基带信号所带的频率成分很宽(低频、直流成分,有的是不能传输，所以需要使用其他频带进行传输)，所以对传输线有一定的要求。</li></ul></li><li>有的信道不能支持基带信号，需要把基带信号调制为频道信号再进行传输。</li><li>一般频道信号是模拟信号。</li></ol><h2 id="将数字数据转换到模拟信号调制"><a class="markdownIt-Anchor" href="#将数字数据转换到模拟信号调制"></a> 将数字数据转换到模拟信号：调制</h2><img src="https://s2.loli.net/2022/04/27/FTWU4kr8jXtiOwR.png" style="zoom:67%;" /><ol><li>三种不同调制方式</li></ol><h2 id="将数字数据转换到数字信号线路编码"><a class="markdownIt-Anchor" href="#将数字数据转换到数字信号线路编码"></a> 将数字数据转换到数字信号：线路编码</h2><ol><li>线路编码是指将二进制数据转换成可以在物理通信链路上传输的形式，例如电线上的电脉冲、光纤上的光脉冲或空间中的电磁波</li><li>在基带传输时数据离散传输，线路编码是有必要的</li><li>线路编码作用:在发送和接收双方进行协同操作，避免混淆理解，提高传输效率</li></ol><h2 id="数字通信技术编码方式的分类"><a class="markdownIt-Anchor" href="#数字通信技术编码方式的分类"></a> 数字通信技术:编码方式的分类</h2><ol><li>单极性编码:一个正极或者负极</li><li>极化编码<ul><li>NRZ(Non-Return to Zero，不归零制码)</li><li>RZ(Return to Zero，归零制码)</li><li>双相位编码<ul><li>曼彻斯特码</li><li>差分曼彻斯特码</li></ul></li></ul></li><li>双极性编码<ul><li>传号交替反转码(AMI)</li><li>双极性8连0替换码(B8ZS)</li><li>3阶高密度双极性码(HDB3)</li></ul></li></ol><h3 id="单极性编码"><a class="markdownIt-Anchor" href="#单极性编码"></a> 单极性编码</h3><p><img src="https://s2.loli.net/2022/04/27/FTWU4kr8jXtiOwR.png" alt="" /></p><ol><li>原理：用0电平表示&quot;0&quot;，正电平表示&quot;1&quot;</li><li>缺点：<ul><li>难以分辨一位的结束和另一位的开始</li><li>发送方和接收方必须有时钟同步</li><li>若信号中&quot;0&quot;或&quot;1&quot;连续出现，信号直流分量将累加，单极性编码的直流分量问题严重</li><li>不好知道时钟同步，连续多个0的问题，会有电流大量累积。</li></ul></li><li>结论：容易产生传播错误</li></ol><h3 id="极化编码不归零制码nrz-non-return-to-zero"><a class="markdownIt-Anchor" href="#极化编码不归零制码nrz-non-return-to-zero"></a> 极化编码：不归零制码(NRZ: Non-Return to Zero)</h3><p><img src="https://s2.loli.net/2022/04/27/FTWU4kr8jXtiOwR.png" alt="" /></p><ol><li>不归零电平编码，原理：用负电平表示&quot;0&quot;，正电平表示&quot;1&quot; (或相反)，一定的中和。</li><li>缺点：<ul><li>难以分辨一位的结束和另一位的开始</li><li>发送方和接收方必须有时钟同步</li><li>尽管不会如单极性编码严重，但若信号中&quot;0&quot; 或&quot;1&quot;连续出现，信号直流分量仍将累加</li></ul></li><li>不归零反相编码<ul><li>原理：信号电平的一次<strong>翻转</strong>代表比特1，无电平变化代表0</li><li>不归零反相编码优于不归零电平编码：由于每次遇到&quot;1&quot;(或&quot;0&quot;)都要发生跃迁，因此 可以根据电平跃迁进行有限的同步</li><li>不太容易产生电荷的基类，同步还是存在问题的。</li></ul></li></ol><h3 id="极化编码归零制码rz-return-to-zero"><a class="markdownIt-Anchor" href="#极化编码归零制码rz-return-to-zero"></a> 极化编码：归零制码(RZ: Return to Zero)</h3><p><img src="https://s2.loli.net/2022/04/27/9AutljiVyNHfEZx.png" alt="" /></p><ol><li>原理：用负电平表示&quot;0&quot;，正电平表示&quot;1&quot;(或 相反)，比特中位跳变到零电平，从而提供同步</li><li>优点：信号本身带有同步信息，经济性好，且不易出错</li><li>缺点：需要采用3个不同电平，两次信号变化来编码1比特，因此增加了占用的带宽</li></ol><h3 id="极化编码曼彻斯特码manchester"><a class="markdownIt-Anchor" href="#极化编码曼彻斯特码manchester"></a> 极化编码：曼彻斯特码(Manchester)</h3><p><img src="https://s2.loli.net/2022/04/27/Aoa1twnfKjmVydb.png" alt="" /></p><ol><li>原理：每一位中间都有一个跳变，从低跳到高表示&quot;0&quot;，从高跳到低表示&quot;1&quot;<ul><li>请思考：“00” &quot;01&quot;曼彻斯特编码下应怎样表示？</li><li>优点：克服了NRZ码的不足。每位中间的跳变既可作为数据，又可作为时钟，能够自同步；同时只采用两 个电平，跳变减少，比RZ码效率更高</li></ul></li><li>对于归零编码的改进，使用了两个电位表示2个信息</li><li>编码效率为50%，有一半是没有使用的。</li></ol><h3 id="极化编码差分曼彻斯特码differential-manchester"><a class="markdownIt-Anchor" href="#极化编码差分曼彻斯特码differential-manchester"></a> 极化编码：差分曼彻斯特码(Differential Manchester)</h3><img src="https://s2.loli.net/2022/04/27/w2yIDhpjHWCmkPo.png" style="zoom:50%;" /><ol><li>原理：<ul><li>每一位中间跳变：表示时钟</li><li>每一位位前跳变：表示数据：有跳变表示&quot;0&quot;，无跳变表示&quot;1&quot;</li></ul></li><li>优点：时钟、数据分离，便于提取</li><li>有变化是1，无变化是0，这时候它要看前一个波形，来生成，如果是0，无变化，如果是1，有变化。</li></ol><h3 id="双极性编码双极性传号交替反转码ami"><a class="markdownIt-Anchor" href="#双极性编码双极性传号交替反转码ami"></a> 双极性编码：双极性传号交替反转码(AMI)</h3><p><img src="https://s2.loli.net/2022/04/27/VT2Ej75YGpW6hxz.png" alt="" /></p><ol><li>与RZ相同的是: 采用三个电平：正、负与零</li><li>与RZ不同的是: 零电平表示&quot;0&quot;，正负电平的跃迁表示 “1”，实现对&quot;1&quot;电平的交替反转。</li><li>优点：<ol><li>对每次出现的&quot;1&quot;交替反转，使直流分量为0</li><li>尽管连续&quot;0&quot;不能同步，但连续&quot;1&quot;可以同步</li></ol></li><li>这次是1是高点位，下一次就是低电位。</li></ol><h3 id="数据通信技术多路复用"><a class="markdownIt-Anchor" href="#数据通信技术多路复用"></a> 数据通信技术：多路复用</h3><img src="https://s2.loli.net/2022/04/27/J4f8inUPHM3oLDN.png" style="zoom:50%;" /><ol><li>多路复用技术：由于一条传输线路的能力远远超过传输<strong>一个用户</strong>信号所需的能力，为了提高线路利用率，经常让多个信号共用一条物理线路</li><li>复用器和分解器，在逻辑上形成。</li></ol><h2 id="多路复用的分类"><a class="markdownIt-Anchor" href="#多路复用的分类"></a> 多路复用的分类</h2><ol><li>时分复用 TDM ( Time Division Multiplexing)</li><li>频分复用 FDM ( Frequency Division Multiplexing)</li><li>波分复用 WDM ( Wavelength Division Multiplexing)</li><li>码分复用 CDM (Code Division Multiplexing )</li></ol><h3 id="时分复用tdm-time-division-multiplexing"><a class="markdownIt-Anchor" href="#时分复用tdm-time-division-multiplexing"></a> 时分复用TDM (Time Division Multiplexing)</h3><img src="https://s2.loli.net/2022/04/27/1O3wqEdhLcGSz5Y.png" style="zoom: 67%;" /><ol><li>时分复用是将时间划分为一段段等长的时分复用(TDM )帧， 每个时分复用的用户在每个 TDM 帧中占用固定序号的时隙。<ul><li>每个间隙发对应的时分复用帧。</li><li>复用器在发送时进行处理，分解器则是在接收时进行分解。</li></ul></li><li>每一个用户所占用的时隙是周期性地出现</li><li>TDM 信号也称为<strong>等时(isochronous)信号</strong>。</li><li>时分复用的所有用户在不同的时间占用同样的频带宽度。</li></ol><img src="https://s2.loli.net/2022/04/27/V8y2pnjI4gCWufT.png" style="zoom:50%;" /><ol start="5"><li>时分复用可能会造成线路资源的浪费：使用时分复用系统传送计算机数据时，由于计算机数据的突发性质，用户对分配到的子信道的利用率一般不高。</li><li>帧的长度是一定的，划分时间周期是根据设备进行划分的</li></ol><h3 id="统计时分复用-stdm-statistic-tdm"><a class="markdownIt-Anchor" href="#统计时分复用-stdm-statistic-tdm"></a> 统计时分复用 STDM (Statistic TDM)</h3><img src="https://s2.loli.net/2022/04/27/V8y2pnjI4gCWufT.png" style="zoom:50%;" /><ol><li>避免大量信道被浪费。</li><li>不是固定时间进行分配，而是一旦充足就组织起来，然后被服务成帧，在一个时间周期中组织好了就发送。</li><li>问题:不再按照时间来区分用户，所以每个帧都要携带自己的用户信息，会造成浪费<ul><li>比较主流的使用方案</li><li>整体效果好于时分复用</li></ul></li><li>帧是按照时间段来发送，但是是谁先来发送谁的</li></ol><h3 id="频分复用-fdm-frequency-division-multiplexing"><a class="markdownIt-Anchor" href="#频分复用-fdm-frequency-division-multiplexing"></a> 频分复用 FDM (Frequency Division Multiplexing)</h3><img src="https://s2.loli.net/2022/04/27/VFmGvJprtwzxTnB.png" style="zoom: 67%;" /><ol><li>用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带。</li><li>所有用户在同样的时间占用不同的带宽资源(请注意，这里的&quot;带宽&quot;是频率带宽)</li><li>避免互相干扰:相邻比率之间是有间隔的，大家可以同时使用介质发送自己的信号</li></ol><h3 id="波分复用-wdm-wavelength-division-multiplexing"><a class="markdownIt-Anchor" href="#波分复用-wdm-wavelength-division-multiplexing"></a> 波分复用 WDM (Wavelength Division Multiplexing)</h3><ol><li>波分复用就是光的频分复用：频率和波长是成倒数关系的。</li></ol><img src="https://s2.loli.net/2022/04/27/WFS4EC9ibUKwL1Y.png" style="zoom:67%;" /><h3 id="码分复用-cdm-code-division-multiplexing"><a class="markdownIt-Anchor" href="#码分复用-cdm-code-division-multiplexing"></a> 码分复用 CDM (Code Division Multiplexing)</h3><ol><li>常用的名词是<strong>码分多址</strong> CDMA(Code Division Multiple Access)<ul><li>在3G手机时被使用，大家采用相同频率，但是对于数据编码进行变换。(1编译成为n个bits，0编译取1的编译码的反码)</li><li>要求不同基站的1的编码是相互正交的，基站2产生的01序列编码不能对基站1的序列编码产生影响。</li><li>多个基站使用互相正交的编码，互相不影响，进行复用</li></ul></li><li>各用户使用经过特殊挑选的不同码型，因此彼此<br />不会造成干扰。</li><li>这种系统发送的信号有很强的<strong>抗干扰能力</strong>，其频<br />谱类似于白噪声，不易被敌人发现。</li><li>比如: 基站1：11110000表示1,00001111表示0，将一个字节变成8个字节发送，进行扩充，编码内容不同</li><li>频分复用也是使用一个线路</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;物理层&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#物理层&quot;&gt;&lt;/a&gt; 物理层&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Type of Network&lt;/li&gt;
&lt;li&gt;LAN Media&lt;/li&gt;
&lt;li&gt;UTP for Ethernet&lt;/l</summary>
      
    
    
    
    <category term="计算机网络" scheme="https://freeeeeeeeedom.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="互联网计算" scheme="https://freeeeeeeeedom.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="互联网计算" scheme="https://freeeeeeeeedom.gitee.io/tags/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>Routing Protocols</title>
    <link href="https://freeeeeeeeedom.gitee.io/2022/04/26/Routing-Protocols/"/>
    <id>https://freeeeeeeeedom.gitee.io/2022/04/26/Routing-Protocols/</id>
    <published>2022-04-26T15:04:22.000Z</published>
    <updated>2022-04-26T15:07:34.562Z</updated>
    
    
    
    
    <category term="计算机网络" scheme="https://freeeeeeeeedom.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="互联网计算" scheme="https://freeeeeeeeedom.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="互联网计算" scheme="https://freeeeeeeeedom.gitee.io/tags/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>路由器和网络</title>
    <link href="https://freeeeeeeeedom.gitee.io/2022/04/26/%E8%B7%AF%E7%94%B1%E5%99%A8%E5%92%8C%E7%BD%91%E7%BB%9C/"/>
    <id>https://freeeeeeeeedom.gitee.io/2022/04/26/%E8%B7%AF%E7%94%B1%E5%99%A8%E5%92%8C%E7%BD%91%E7%BB%9C/</id>
    <published>2022-04-26T15:04:06.000Z</published>
    <updated>2022-04-26T15:06:21.510Z</updated>
    
    
    
    
    <category term="计算机网络" scheme="https://freeeeeeeeedom.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="互联网计算" scheme="https://freeeeeeeeedom.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="互联网计算" scheme="https://freeeeeeeeedom.gitee.io/tags/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>应用层</title>
    <link href="https://freeeeeeeeedom.gitee.io/2022/04/26/%E5%BA%94%E7%94%A8%E5%B1%82/"/>
    <id>https://freeeeeeeeedom.gitee.io/2022/04/26/%E5%BA%94%E7%94%A8%E5%B1%82/</id>
    <published>2022-04-26T15:03:51.000Z</published>
    <updated>2022-04-26T15:03:51.959Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>运输层</title>
    <link href="https://freeeeeeeeedom.gitee.io/2022/04/26/%E8%BF%90%E8%BE%93%E5%B1%82/"/>
    <id>https://freeeeeeeeedom.gitee.io/2022/04/26/%E8%BF%90%E8%BE%93%E5%B1%82/</id>
    <published>2022-04-26T15:03:40.000Z</published>
    <updated>2022-04-26T15:06:03.659Z</updated>
    
    
    
    
    <category term="计算机网络" scheme="https://freeeeeeeeedom.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="互联网计算" scheme="https://freeeeeeeeedom.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="互联网计算" scheme="https://freeeeeeeeedom.gitee.io/tags/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>April 26th</title>
    <link href="https://freeeeeeeeedom.gitee.io/2022/04/25/April-26th/"/>
    <id>https://freeeeeeeeedom.gitee.io/2022/04/25/April-26th/</id>
    <published>2022-04-25T15:18:49.000Z</published>
    <updated>2022-04-27T04:46:39.256Z</updated>
    
    <content type="html"><![CDATA[<h1 id="to-do"><a class="markdownIt-Anchor" href="#to-do"></a> To Do</h1><ul><li><input type="checkbox" id="checkbox0" checked="true" /><label for="checkbox0">数据库作业</label></li><li><input type="checkbox" id="checkbox1" checked="true" /><label for="checkbox1">Leetcode每日一题</label></li><li><input type="checkbox" id="checkbox2" /><label for="checkbox2">Leetcode</label></li><li><input type="checkbox" id="checkbox3" checked="true" /><label for="checkbox3">计算机网络（网络层）</label></li><li><input type="checkbox" id="checkbox4" /><label for="checkbox4">微信小程序</label></li><li><input type="checkbox" id="checkbox5" checked="true" /><label for="checkbox5">练琴2h</label></li></ul><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;to-do&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#to-do&quot;&gt;&lt;/a&gt; To Do&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input type=&quot;checkbox&quot; id=&quot;checkbox0&quot; checked=&quot;true&quot; /&gt;&lt;l</summary>
      
    
    
    
    <category term="Everday" scheme="https://freeeeeeeeedom.gitee.io/categories/Everday/"/>
    
    <category term="2022_大二下" scheme="https://freeeeeeeeedom.gitee.io/categories/Everday/2022-%E5%A4%A7%E4%BA%8C%E4%B8%8B/"/>
    
    
    <category term="2022_Spring" scheme="https://freeeeeeeeedom.gitee.io/tags/2022-Spring/"/>
    
  </entry>
  
  <entry>
    <title>网络层</title>
    <link href="https://freeeeeeeeedom.gitee.io/2022/04/25/%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
    <id>https://freeeeeeeeedom.gitee.io/2022/04/25/%E7%BD%91%E7%BB%9C%E5%B1%82/</id>
    <published>2022-04-25T05:51:22.000Z</published>
    <updated>2022-04-26T15:01:26.218Z</updated>
    
    <content type="html"><![CDATA[<h1 id="layer3-network-layer-网络层"><a class="markdownIt-Anchor" href="#layer3-network-layer-网络层"></a> Layer3: Network Layer 网络层</h1><ol><li>为什么我们不用硬件地址进行通信?<ol><li>(设备数量问题)因为设备比较多，供应商也比较多</li><li>(规格问题)不同供应商的解决方案不同，所以使用硬件地址进行通信的通用性比较低。</li><li>(寻址问题)全球设备太多，如果使用硬件设备，那么进行定位比较复杂</li></ol></li><li>因为如上情况我们选择使用IP地址(逻辑地址)。</li><li>本章比较重要，期末占比会比较大。</li></ol><h1 id="overview-of-the-network-layer"><a class="markdownIt-Anchor" href="#overview-of-the-network-layer"></a> Overview of the Network Layer</h1><ol><li>对于不同帧使用同一的方案进行处理</li><li>第三层希望通过<strong>路由选择算法</strong>进行路径的选择和转发，对第二层是透明的。</li><li>第三层只能避免拥塞，但是要到第四层(运输层)才能完成流量控制(第三层不能完成流量控制)</li></ol><h2 id="responsibilities-职责"><a class="markdownIt-Anchor" href="#responsibilities-职责"></a> Responsibilities 职责</h2><ul><li><p>Move data through networks</p><p>通过网络移动数据：不同网段之间的通信，不同的广播域，两个广播域之间的进行了划分，互不干扰，不是广播的通信以及对另一个网段的广播需要能传达给对方</p></li><li><p>Use a <em>hierarchical</em> addressing scheme (opposed to MAC addressing, which is flat)</p><p>使用分层寻址方案（和MAC寻址相反，后者平坦）</p></li><li><p>Segment network and control flow of traffic</p><p>细分网络并控制流量(flow)：一步步进行细化，越近了解的越多:IP地址是一致的，也就是可以忽略物理层的不同。(具体原因在开头已经分析过了)</p></li><li><p>Reduce congestion</p><p>减少交通拥堵，基于IP做分段和传达，用来减少拥塞</p></li><li><p>Talk to other network</p><p>与其他网络交谈</p></li></ul><p><img src="https://s2.loli.net/2022/04/25/XEW8cvyLj5euDTM.png" alt="" /></p><ul><li>在上面我们可以发现，对于不同数据链路层的帧，第三层基于IP地址，来实现跨介质的逻辑理解和连通。</li><li>第三层负责进行连通和传达，数据可靠性由终端设备(第四层及以上)来进行保证(不然会带来比较大的计算量)。</li></ul><h2 id="devices-设备"><a class="markdownIt-Anchor" href="#devices-设备"></a> Devices 设备</h2><ul><li><p>Routers</p><ul><li><p>Interconnect network segments <em>or</em> networks</p><p>互联网段 or 网络</p></li><li><p>Make logical decisions based on IP addresses</p><p>根据ip地址做出合理的决定</p></li><li><p>Determine best path</p></li></ul><p>根据路由表决定最佳路径</p><ul><li>Switch packets from incoming ports to outgoing ports</li></ul><p>将数据包从入站端口切换到出站端口</p></li></ul><p>如果A网段的设备向路由器发送了一个B网段的广播地址，那么路由器会进行转发，然而如果A网段设备发射的是本网段的广播地址，路由器不会进行转发（广播域划分）</p><h1 id="ip-addresses-and-subnets-ip地址和子网划分"><a class="markdownIt-Anchor" href="#ip-addresses-and-subnets-ip地址和子网划分"></a> IP Addresses and Subnets IP地址和子网划分</h1><h2 id="packetdatagram-封包数据报格式"><a class="markdownIt-Anchor" href="#packetdatagram-封包数据报格式"></a> Packet/Datagram 封包/数据报格式</h2><p><img src="https://s2.loli.net/2022/04/25/OEoYvuZTV6FWiwX.png" alt="" /></p><p><strong>IP地址在报文中占据一部分(32bit一个IP地址)</strong></p><h2 id="ipv4-报文主要结构"><a class="markdownIt-Anchor" href="#ipv4-报文主要结构"></a> IPv4 报文主要结构</h2><p><img src="https://s2.loli.net/2022/04/25/BOsK86gY3LFrR9P.png" alt="" /></p><h3 id="首部部分"><a class="markdownIt-Anchor" href="#首部部分"></a> 首部部分</h3><blockquote><p>首部部分：上面蓝框部分的整体是首部部分</p></blockquote><h3 id="版本号"><a class="markdownIt-Anchor" href="#版本号"></a> 版本号</h3><blockquote><p>版本号:占 4 bit，指IP协议的版本。目前的 IP 协议版本号为 4 (即 IPv4)(6也就对应IPv6</p></blockquote><h3 id="首部长度"><a class="markdownIt-Anchor" href="#首部长度"></a> 首部长度</h3><blockquote><p>首部长度:占 4 bit，可表示的最大数值是15个单位(一个单位为 4 字节) 因此IP的首部长度的最大值是60字节。</p></blockquote><ol><li>因为首部长度是不确定的，所以我们需要进行标识。(用来方便读取)</li><li>首部长度的32 bit为一行，也就是4个字节为一个单位</li><li>所以IP报文首部字段长度为15行</li></ol><h3 id="服务类型"><a class="markdownIt-Anchor" href="#服务类型"></a> 服务类型</h3><blockquote><p>服务类型:占8bit，用来获得更好的服务，这个字段以前一直没有被人们使用。</p></blockquote><h3 id="总长度"><a class="markdownIt-Anchor" href="#总长度"></a> 总长度</h3><blockquote><p>总长度:占 16 bit，指<strong>首部和数据</strong>之和的长度，单位为字节，因此数据报的最大长度为 65535 字节(由于放到帧里面，所以大多数不比1500字节长)。总长度必须不超过最大传送单元 MTU。</p></blockquote><h3 id="标识"><a class="markdownIt-Anchor" href="#标识"></a> 标识</h3><blockquote><p>标识(identification):占 16 bit，它是一个计数器，用来产生数据报的标识。</p></blockquote><ol><li>他只是为了做报文分片的问题，因为路由器可能连接的是不同网络，比如有线帧和无线帧。</li><li>接收方依据标识号进行合并(相同标识号的报文是一个大报文，可以合并的)</li></ol><h3 id="标志"><a class="markdownIt-Anchor" href="#标志"></a> 标志</h3><blockquote><p>标志占 3 bit，最高位为 0</p></blockquote><ol><li>让发送方对报文进行控制，让中间路由器对其进行控制</li><li>DF(Don’t fragement):是否允许做分片，0允许做分片,1不允许做分片</li><li>MF:MF为0表示最后一个分片,1是指后面还有分片</li></ol><h3 id="片偏移"><a class="markdownIt-Anchor" href="#片偏移"></a> 片偏移</h3><blockquote><p>片偏移(13 bit)指出：较长的分组在分片后某片在原分组中的相对位置。片偏移以8个字节为偏移单位。</p></blockquote><ol><li>相同标识号，然后根据片偏移进行重拍(先发未必先到)，偏移比较小的更靠前</li><li>因为16-3 = 13，2^3 = 8(因为单位是字节，所以用13位就可以补齐)</li><li>例子(计算偏移量):偏移是字节为单位</li></ol><p><img src="https://s2.loli.net/2022/04/26/z4TwGYJ5vSkLq7b.png" alt="" /></p><p><img src="https://s2.loli.net/2022/04/26/WbB5dZhHpMLfn1q.png" alt="" /></p><h3 id="生存时间"><a class="markdownIt-Anchor" href="#生存时间"></a> 生存时间</h3><blockquote><p>生存时间(8 bit)记为 TTL (Time To Live) 数据报在网络中可通过的<strong>路由器数</strong>的最大值。</p></blockquote><ol><li>是通过计数的方式来进行统计</li><li>最大值是255(最多经过255个路由器)</li><li>路由器每转发一次，就会对生存时间-1</li><li>减小为0后，就会丢弃掉，并且通知给发送方我已经丢弃掉这个报文。</li><li>防止在环上进行传输，避免由于回路问题，造成过大的网络资源浪费</li></ol><h3 id="协议"><a class="markdownIt-Anchor" href="#协议"></a> 协议</h3><blockquote><p>协议(8 bit)字段指出此数据报携带的数据使用何种协议以便目的主机的IP层将数据部分上交给哪个处理过程</p></blockquote><ol><li>有的协议是上层的</li><li>有的协议是第三层协议</li><li>具体协议的情况如下</li></ol><h3 id="首部检验和"><a class="markdownIt-Anchor" href="#首部检验和"></a> 首部检验和</h3><p><img src="https://s2.loli.net/2022/04/26/DHUTsyJVahIjSiW.png" alt="" /></p><blockquote><p>首部检验和(16 bit)字段:只检验数据报的首部，不包括数据部分。这里不采用 CRC 检验码而采用简单的计算方法。算法过程如下(比较形式化的问题，并不能解决数据报错误的形式)</p></blockquote><p><img src="https://s2.loli.net/2022/04/26/VwiUXaIoTRjLPzQ.png" alt="" /></p><ol><li>源地址和目的地址都各占 4 字节</li><li>15 * 4: 15行，每行4字节</li></ol><h2 id="网络层地址"><a class="markdownIt-Anchor" href="#网络层地址"></a> 网络层地址</h2><ol><li><p>IP addresses are 32 bits long</p><p>IP地址为32位长(Ipv4中)</p></li><li><p>They are represented as four octets in dotted decimal format 133.14.17.0</p><p>它们以点分十进制格式表示为四个八位字节：133.14.17.0</p></li><li><p>The IP address has two components:</p><p>IP地址包含两个组成部分：</p><ol><li><p>The network ID</p><p>网络ID</p></li><li><p>The host ID</p><p>主机ID</p></li></ol></li></ol><p><img src="https://s2.loli.net/2022/04/26/3jPHJFGUnhNVelv.png" alt="" /></p><h3 id="网络地址用来标识网段"><a class="markdownIt-Anchor" href="#网络地址用来标识网段"></a> 网络地址：用来标识网段</h3><ol><li><p>assigned by ARIN (American Registry for Internet Numbers, <a href="http://www.arin.net">www.arin.net</a>)</p><p>原来由ARIN(美国互联网号码注册机构，<a href="http://www.arin.net">www.arin.net</a>)分配，现在已经换了</p></li><li><p>identifies the network to which a device is attached</p><p>标识设备所连接(attached)的网络</p></li><li><p>may be identified by one, two, or three of the first three octets</p><p>可以由前三个八位位组(octets)中的一个，两个或三个来标识</p></li></ol><h3 id="主机idip地址后面占据1-3个字节"><a class="markdownIt-Anchor" href="#主机idip地址后面占据1-3个字节"></a> 主机ID：IP地址后面占据1-3个字节</h3><ol><li><p>assigned by a network administrator</p><p>由网络管理员分配</p></li><li><p>identifies the specific device on that network</p><p>识别该网络上的特定设备</p></li><li><p>may be identified by one, vvtwo, or three of the last three octets</p><p>可以由最后三个八位位组中的一个，两个或三个来标识</p></li></ol><h2 id="ip地址"><a class="markdownIt-Anchor" href="#ip地址"></a> IP地址</h2><ol><li><p>Different class addresses reserve different amounts of bits for the network and host portions of the address</p><p>不同的类地址为地址的网络部分和主机部分保留不同数量的位</p></li></ol><p><img src="https://s2.loli.net/2022/04/26/uIAEU6FiOkWvsTg.png" alt="" /></p><ol start="2"><li>N是Net ID,H 是 Host ID</li></ol><h3 id="分类"><a class="markdownIt-Anchor" href="#分类"></a> 分类</h3><p><img src="https://s2.loli.net/2022/04/26/fuCd1kcMFVX5QIA.png" alt="" /></p><ol><li>IP地址主要通过第一个字节进行划分</li><li>0–127 Class A address A类地址</li><li>128-191 Class B address B类地址</li><li>192–223 Class C address C类地址</li><li>224–239 Class D – Multicast D类地址：多播：视频点播的原理也是组播(多播)</li><li>240–255 Class E - Research  E类地址：研究</li></ol><h3 id="主机的数量"><a class="markdownIt-Anchor" href="#主机的数量"></a> 主机的数量</h3><ol><li><p>The maximum number of hosts vary for each class.</p><p>每个类别的最大主机数量各不相同。(不包含网络号)</p><ol><li>A类拥有16,777,214个可用主机(2<sup>24</sup> – 2)</li><li>Class B has 65,534 available hosts (2<sup>16</sup> – 2) B类具有65,534个可用主机(2<sup>16</sup> – 2)</li><li>Class C has 254 available hosts (2<sup>8</sup> – 2) C类具有254个可用主机(2<sup>8</sup> –2)</li></ol></li><li><p>为什么每一类地址中都要减去2？</p><ol><li><p>The first address in each network is reserved for the network address</p><p>每个网络中的第一个地址都保留用于该网络地址</p></li><li><p>The last address is reserved for the broadcast address</p><p>最后一个地址是为广播地址保留的。</p></li></ol></li></ol><h3 id="保留reserved地址"><a class="markdownIt-Anchor" href="#保留reserved地址"></a> 保留(Reserved)地址</h3><ol><li>网络地址:在地址的主机部分中以二进制0结尾的IP地址<ol><li>A类网络地址示例：113.0.0.0</li><li>网络上的主机只有具有相同网络ID的其他主机才能直接通信。(用来确定是不是在一个网段里面)</li></ol></li><li>广播地址:用于将数据发送到网络上的所有设备。(一般是一个网段之间的)<ol><li>广播IP地址在地址的主机部分中以二进制1结尾。</li><li>B类地址的广播地址的示例:176.10.255.255 (decimal 255 = binary 11111111)</li></ol></li><li>Class A<ol><li>99.0.0.0: a reserved network number</li><li>99.255.255.255: a broadcast number</li></ol></li><li>Class B<ol><li>156.1.0.0: a reserved network number</li><li>156.1.255.255: a broadcast number</li></ol></li><li>Class C<ol><li>203.1.17.0: a reserved network number</li><li>203.1.17.255:a broadcast number</li></ol></li></ol><h3 id="private-address-space-专用地址空间"><a class="markdownIt-Anchor" href="#private-address-space-专用地址空间"></a> Private Address Space 专用地址空间</h3><blockquote><ol><li>10.0.0.0 - 10.255.255.255</li><li>172.16.0.0 - 172.31.255.255</li><li>192.168.0.0 - 192.168.255.255</li></ol></blockquote><ol><li><p>There are certain IP address ranges reserved for private IP addressing schemes.</p><p>有某些IP地址范围保留用于专用IP寻址方案(Schemas)。上述地址都是用作局域网的内部网段。</p></li><li><p>IP address depletion and its solutions</p><p>IP地址耗尽及其解决方案</p><ol><li>NAT</li><li>CIDR</li><li>IPv6(最终解决方案)</li></ol></li><li><p>发展过程:网络位数小于24，使得其可以组成超网。</p></li><li><p>多个网段进行划分，保留足够的个人子网网段划分</p></li></ol><p><img src="https://s2.loli.net/2022/04/26/lMLcUYwvgQKNtZo.png" alt="" /></p><h2 id="子网划分"><a class="markdownIt-Anchor" href="#子网划分"></a> 子网划分</h2><ol><li><p>Network administrators sometimes need to divide networks into smaller networks, called <em>subnets</em>, in order to provide extra flexibility</p><p>网络管理员有时需要将网络划分为较小的网络，称为<strong>子网</strong>，以提供<strong>额外的灵活性</strong>.</p></li><li><p>Bits are borrowed from the host field and are designated as the subnet field</p><p>从主机字段借来的位被指定为子网字段(Subnet Fields)</p></li><li><p>ABC类网的主机数量比较大,会造成浪费，因为avalible的很多，很少能够用满。</p></li></ol><p><img src="https://s2.loli.net/2022/04/26/V1kIfwSbKHWmNhx.png" alt="" /></p><ol start="4"><li>从Host中借位进行子网划分</li><li>子网掩码:是由发送方提供。</li><li>大的子网划分为小的子网来提高灵活性和利用率。</li></ol><h3 id="子网划分的基本概念"><a class="markdownIt-Anchor" href="#子网划分的基本概念"></a> 子网划分的基本概念</h3><ol><li><p>Subnets are smaller divisions of networks</p><p>子网是网络的较小部分</p><ol><li><p>provide addressing flexibility</p><p>提供寻址灵活性。(小的局域网可以完成隔离)</p></li><li><p>子网划分只需要本网段网络管理员进行处理即可，每一个子网也是一个网络(子网只是一个逻辑形式)</p></li></ol></li><li><p>Subnet addresses are assigned locally, usually by a network administrator.</p><p>子网地址通常由网络管理员在本地分配:每一个子网也是一个Net，实际上是和Net是一个标准的</p></li><li><p>Subnets reduce a broadcast domain</p><p>子网减少了广播域:使得广播域变小，提高网络利用率，避免接受到大量的无用的广播，广播只能在对应子网中进行广播。</p></li></ol><h3 id="how-many-bits-can-i-borrow-我们可以借多少位"><a class="markdownIt-Anchor" href="#how-many-bits-can-i-borrow-我们可以借多少位"></a> How many bits can I borrow? 我们可以借多少位？</h3><ol><li><p>The minimum number of bits you can borrow is <strong>two</strong></p><p>可以借用的最小位数是2</p></li></ol><p><img src="https://s2.loli.net/2022/04/26/Wwys1kuYaXmDetv.png" alt="" /></p><ol><li><p>The minimum number of bits borrowed is 2,WHY?</p><p>借用的最小位数是2，为什么？</p></li><li><ol><li><p>If you were to borrow only 1 bit, to create a subnet, then you would only have a network number - the .0 network - and the broadcast number - the .1 network</p><p>如果只借用1位以创建一个子网，那么您将只有一个网络号-.0网络-和广播号-.1网络，没有可以使用的专用网络。</p></li><li><p>两位的时候，01和10给Host，00给网络ID，11位广播地址</p></li><li><p>全0可能导致误判</p></li></ol></li><li><p>The maximum number of bits that can be borrowed can be any number that leaves at least 2 bits, remaining, for the host number</p><p>可以借用的最大位数可以是保留至少2位主机号的任何数字(给Host至少保留2位，因为1位的话，要么一个是NET无法使用，要么一个是广播地址)</p></li><li><ol><li>A类网络 20位</li><li>B类网络 14位</li><li>C类网络 6位</li></ol></li><li><p>互联网早期时，计算机比较少，没有划分子网。</p></li></ol><h3 id="byproduct-waste-addresses-子网划分的副产品地址浪费"><a class="markdownIt-Anchor" href="#byproduct-waste-addresses-子网划分的副产品地址浪费"></a> Byproduct: Waste Addresses 子网划分的副产品：地址浪费</h3><ol><li><p>We must strike a balance between the number of subnets required, the hosts per subnet that is acceptable, and the resulting waste of addresses</p><p>我们必须在所需的子网数，每个子网可接受的主机以及地址的浪费之间取得平衡(strike a balance)。</p></li><li><ol><li>hostID里面的全0和全1不能使用</li><li>subnet不可以使用全0和全1</li><li>借用4位是最高效率的，提升了划分灵活性，影响了效率</li></ol></li></ol><p><img src="https://s2.loli.net/2022/04/26/4YFUAclW2ZTv9ho.png" alt="" /></p><h3 id="subnet-mask-子网掩码"><a class="markdownIt-Anchor" href="#subnet-mask-子网掩码"></a> Subnet Mask 子网掩码</h3><ol><li><p>Alias: extended network prefix</p><p>别名:扩展网络前缀</p></li><li><p>define how many bits we use to construct the network, and how many bits to describe the host addresses</p><p>定义我们用来构建网络的位数，以及描述主机地址的位数</p></li><li><ol><li>Class A 255.0.0.0</li><li>Class B 255.255.0.0</li><li>Class C 255.255.255.0</li></ol></li></ol><h3 id="calculating-a-subnet-计算子网"><a class="markdownIt-Anchor" href="#calculating-a-subnet-计算子网"></a> Calculating a Subnet 计算子网</h3><ol><li><p>We will subnet the IP address: 223.14.17.0</p><p>我们有一个C类网络：223.14.17.0</p></li><li><p>我们需要完成如下划分</p><ol><li>划分成13个子网</li><li>每个子网有10个主机</li></ol></li></ol><h4 id="第一步"><a class="markdownIt-Anchor" href="#第一步"></a> 第一步</h4><ol><li><p>Determine the default subnet mask</p><p>确定默认的子网掩码</p></li><li><p>Class C default subnet mask: 255.255.255.0</p><p>C类网络的默认子网掩码是：255.255.255.0</p></li></ol><h4 id="第二步"><a class="markdownIt-Anchor" href="#第二步"></a> 第二步</h4><ol><li><p>Figure the actual number of subnets and hosts by borrowing bits from host ID</p><p>通过从主机ID借用位来计算子网和主机的实际数量</p></li><li><p>Borrow 4 bits from the host</p><p>我们对每一个子网需要借用4位来满足一个子网有10台可用的主机。</p></li></ol><h4 id="第三步"><a class="markdownIt-Anchor" href="#第三步"></a> 第三步</h4><p><img src="https://s2.loli.net/2022/04/26/aKtqZboBeNzW7sO.png" alt="" /></p><ol><li><p>We get 16 <em>possible</em> subnets and 16 <em>possible</em> hosts for each subnet because:</p><p>我们为每个子网获得16个可能的子网和16个可能的主机，因为：</p><ol><li><p>For the 4 bits borrowed each bit can be a 1 or a 0 leaving you with 24 or 16 possible combinations</p><p>对于<strong>借用的4位</strong>，每个位可以是1或0，从而有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">2^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8141079999999999em;"></span><span class="strut bottom" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathrm">2</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathrm">4</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>或16种可能的组合。</p></li><li><p>The same goes for the 4 leftover host bits</p><p>4个剩余主机位也是如此。</p></li></ol></li><li><p>Important: There are only 14 <em>available</em> subnets and hosts on each subnet. Why?</p><p>重要：每个子网上只有14个可用子网和主机。(一般情况下，而可用的是15个可用子网，因为0号子网可用)</p><ul><li><p>Because you cannot use the first and last subnet.</p><p>因为您不能使用第一个和最后一个子网。</p></li><li><p>Because you cannot use the first and last address within each subnet.</p><p>因为您不能使用每个子网中的第一个和最后一个地址。</p></li><li><p>For each, one is the broadcast address and one is the network address</p><p>对于每个，一个是广播地址，一个是网络地址。</p></li></ul></li></ol><h4 id="第四步"><a class="markdownIt-Anchor" href="#第四步"></a> 第四步</h4><ol><li><p>Determine the subnet mask.</p><p>确定子网掩码。</p></li></ol><p><img src="https://s2.loli.net/2022/04/26/EjAFk7ebYChWrmJ.png" alt="" /></p><ol><li><p>Where X represents the borrowed bits for subnetting</p><p>其中X表示用于子网划分的借用位。</p></li><li><p>Add the place values of X together to get the last octet decimal value of the subnet mask.</p><p>将X的位值相加，得到子网掩码的最后一个八位位组十进制值：128 + 64 + 32 + 16 = 240</p></li><li><p>子网掩码是：255.255.255.240</p></li><li><p>The subnet mask is used to reveal the subnet and host address fields in IP addresses.</p><p>子网掩码用于显示IP地址中的子网和主机地址字段</p></li></ol><h4 id="第五步"><a class="markdownIt-Anchor" href="#第五步"></a> 第五步</h4><ol><li><p>Determine the ranges of host addresses</p><p>确定主机地址的范围</p></li></ol><p><img src="https://s2.loli.net/2022/04/26/dEW5jeA2wLvyn13.png" alt="" /><br /><img src="https://s2.loli.net/2022/04/26/dEW5jeA2wLvyn13.png" alt="" /></p><ol><li><p>16 <em>possible</em> subnets.</p><p>16个子网</p><p>14 <em>available</em> subnets</p><p>14个可用子网</p></li><li><p>16 <em>possible</em> hosts on each subnet</p><p>每个子网16个主机</p><p>14 <em>available</em> hosts on each subnet</p><p>14个可用主机</p></li></ol><h3 id="计算子网网络地址"><a class="markdownIt-Anchor" href="#计算子网网络地址"></a> 计算子网网络地址</h3><ol><li><p>Step 1: Change the IP host address to binary.</p><p>第一步：将IP主机地址转换为二进制。</p></li><li><p>Step 2: Change the subnet mask to binary.</p><p>第二步：将子网掩码转换为二进制。</p></li><li><p>Step 3: Use the boolean operator AND to combine the two.</p><p>第三步：使用布尔运算符AND将两者进行运算。</p></li><li><p>Step 4: Convert the network binary address to dotted decimal</p><p>第四步：将网络二进制地址转换为点分十进制。</p></li></ol><p><img src="https://s2.loli.net/2022/04/26/7aQ9pSHmOvE1PWb.png" alt="" /></p><ol><li><p>This is the subnet network address</p><p>这是子网的网络地址</p></li><li><p>It can help determine path</p><p>它可以帮助确定路径：用来确定是否是一个网段，是否可以通过网关进行转发</p></li></ol><p><img src="https://s2.loli.net/2022/04/26/scEIwYSMqTBxQA2.png" alt="" /></p><ol><li><p>In order to find the network ID of a subnet, the router must take the IP address, and the subnet mask, and logically, AND them together</p><p>为了找到子网的网络ID，路由器必须采用IP地址和子网掩码，并且在逻辑上将它们取和</p></li><li><p>路由器根据运算的结果进行计算</p></li><li><p>上图中的子网掩码255.255.255.0是255.255.0.0借用了8位产生的(而不要理解成为C类地址的子网掩码)</p></li></ol><h2 id="实践ip寻址问题"><a class="markdownIt-Anchor" href="#实践ip寻址问题"></a> 实践:IP寻址问题</h2><ol><li>Given 195.137.92.0 and needing 8 usable subnets, find the subnetwork numbers, the ranges of host numbers, and subnetwork broadcast numbers. 给定195.137.92.0并且需要8个可用子网，请找到子网号，主机号范围和子网广播号。</li><li>IP Address is a class C. Default subnet mask is 255.255.255.0. We need to extend the network number by enough bits to give 8 usable subnets. IP地址是C类。默认子网掩码是255.255.255.0。 我们需要将网络号扩展足够的位数以提供8个可用子网。</li><li>Stealing 2 bits yields 2 usable subnets, stealing 3 bits yields 6 usable subnets, so we must steal 4 bits to get 14 usable subnets, of which we needed 8. 借用2位会产生2个可用子网，借用3位会产生6个可用子网，因此我们借用4位才能获得14个可用子网，其中我们需要8个可用地址。</li><li>This makes the subnet mask 255.255.255.240. So the Network number is 195.137.92.NNNN HHHH where Ns stand for network extension bits (subnets) and Hs stand for host numbers. 这将使子网掩码为255.255.255.240。 因此，网络号为195.137.92.NNNN HHHH，其中Ns代表网络扩展位(子网)，Hs代表主机号。</li><li>Next we must number the subnets; there are 16 combinations of 4 bit binary numbers but they retain their place value within the last octet. 接下来，我们必须为子网编号。 4位二进制数有16种组合，但它们在最后一个八位位组中保留其位置值。</li><li>借用4-6位都可以，因为并没有规定子网中主机数量，而为什么是6位是因为一个子网中最少用2位给主机。</li></ol><h1 id="layer-3-devices-第三层设备"><a class="markdownIt-Anchor" href="#layer-3-devices-第三层设备"></a> Layer 3 Devices 第三层设备</h1><ol><li>第三层的路由器</li><li>路由器的两个功能:<ol><li>路径选择</li><li>路由转发:将报文转发取出</li></ol></li></ol><h2 id="path-determination-路径选择"><a class="markdownIt-Anchor" href="#path-determination-路径选择"></a> Path determination 路径选择</h2><ol><li><p>The router uses to choose the next hop in the path for the packet to travel to its destination based on the link bandwidth, hop, delay …</p><p>路由器用于根据链路带宽，跳数，延迟 …</p></li><li><p>选择数据包到达目的地的路径中的下一跳。</p></li></ol><p><img src="https://s2.loli.net/2022/04/26/zlQ5hLcieHNrRCE.png" alt="" /></p><ol start="4"><li>Internet 核心层的冗余链路是很必要的(相对于路径选项消耗，其可靠性和稳定性更加重要)</li><li>路由器根据路由规范，选择他当时认为最为合适的路径</li></ol><h2 id="ip地址-2"><a class="markdownIt-Anchor" href="#ip地址-2"></a> IP地址</h2><ol><li><p>IP addresses are implemented in software, and refer to the network on which a device is located</p><p>IP地址是用软件实现的，是指设备所在的网络。</p></li><li><p>Routers connect networks, each of which must have a unique network number in order for routing to be successful.</p><p>路由器连接网络，每个网络必须具有唯一的网络号才能成功进行寻找路径。</p></li><li><p>The unique network number is incorporated into the IP address that is assigned to each device attached to that network</p><p>唯一的网络号包含在分配(incorporated)给该网络上每个设备的IP地址中</p></li><li><p>IP地址是逻辑的，是我们配置的。(不同于MAC地址)</p></li><li><p>IP地址是有层次，做转发的依据是网段而不是具体的IP，同一网段设备都有相同的IP地址，也就是我们只要到达网段即可</p></li></ol><h2 id="路由器端口"><a class="markdownIt-Anchor" href="#路由器端口"></a> 路由器端口</h2><p><img src="https://s2.loli.net/2022/04/26/n1ReDGyS52a3HXA.png" alt="" /></p><ol><li>路由器端口记录了网段的IP地址(和连接的地方是相同的)</li></ol><h2 id="路由器发送的过程"><a class="markdownIt-Anchor" href="#路由器发送的过程"></a> 路由器发送的过程</h2><p><img src="https://s2.loli.net/2022/04/26/u9QOiVedMkIfUDn.png" alt="" /></p><ol><li>A5主机发送报文给B5主机，这个报文的IP地址是B5所在的IP地址，形成帧，然后放上总线。</li></ol><p><img src="https://s2.loli.net/2022/04/26/1XYp8sw95Sucoat.png" alt="" /></p><ol start="2"><li>路由器收到帧，然后进行理解，看到报文，知道目的地是B5(解封装)</li></ol><p><img src="https://s2.loli.net/2022/04/26/MbfdVO8qTQzt4jA.png" alt="" /></p><ol start="3"><li>检查自己的路由表，找到目的地对应的端口</li></ol><p><img src="https://s2.loli.net/2022/04/26/Zz1GxgEDewW5o7I.png" alt="" /></p><ol start="4"><li>在B1端口进行转发，形成新的帧</li></ol><p><img src="https://s2.loli.net/2022/04/26/KoAFL1MHCk8ltSu.png" alt="" /></p><ol><li>形成一个全新的帧，这个帧的MAC地址是B1的MAC的地址。</li></ol><h2 id="路由器端口示例"><a class="markdownIt-Anchor" href="#路由器端口示例"></a> 路由器端口示例</h2><p><img src="https://s2.loli.net/2022/04/26/1KYbPCQlqNAUjcm.png" alt="" /></p><ol><li><p>Interface is a router’s attachment to a network, it may also be referred to as a port in IP routing.</p><p>接口是路由器连接到网络的附件，在IP路由中也可以称为端口。</p></li><li><p>这个IP地址往往被作为这个网络的网关</p></li><li><p>Each interface must have a separate, unique network address</p><p>每个接口必须具有一个单独的唯一网络地址。</p></li><li><ol><li>比如上图中S1和S2不能是相同的IP地址</li><li>路由器的连接的网段一定要是不同的</li></ol></li></ol><h2 id="ip地址分配"><a class="markdownIt-Anchor" href="#ip地址分配"></a> IP地址分配</h2><ol><li><p>静态地址分配(Static addressing)</p><ol><li><p>Configure each individual device with an IP address</p><p>为每个单独的设备配置一个IP地址</p></li><li><p>You should keep very meticulous records, because problems can occur if you use duplicate IP addresses</p><p>您应该保留非常细致的记录，因为如果使用重复的IP地址，可能会出现问题。</p></li><li><p>需要知道规范，然后根据上下文，通过命令行进行分配地址</p></li></ol></li><li><p>动态地址分配(Dynamic addressing)</p><ul><li><p>There are a few different methods can be used to assign IP addresses dynamically</p><p>有几种不同的方法可用于动态分配IP地址：</p><ul><li>RARP: Reverse Address Resolution Protocol. RARP：反向地址解析协议。发起请求</li><li>BOOTP: BOOTstrap Protocol. BOOTP：BOOTstrap协议。用于工作栈</li><li>DHCP: Dynamic Host Configuration Protocol. (比较多用) DHCP：动态主机配置协议</li></ul></li></ul></li><li><p>IP地址和掩码处理后得到网络地址，保证每个网段中的主机的网段地址应该是一致的，不然会出现错误的。</p></li></ol><h2 id="arp-protocol-arp协议"><a class="markdownIt-Anchor" href="#arp-protocol-arp协议"></a> ARP Protocol ARP协议</h2><h3 id="address-resolution-protocol-地址解析协议"><a class="markdownIt-Anchor" href="#address-resolution-protocol-地址解析协议"></a> Address Resolution Protocol 地址解析协议</h3><ol><li><p>In order for devices to communicate, the sending devices need both the IP addresses and the MAC addresses of the destination devices.</p><p>为了使设备进行通信，发送设备需要目标设备的<strong>IP地址和MAC地址</strong>。</p></li><li><p>ARP enables a computer to find the MAC address of the computer that is associated with an IP address</p><p>ARP使计算机能够查找与IP地址关联的计算机的MAC地址。</p></li><li><p>目的方IP地址 -&gt; 目的方MAC地址</p></li><li><p>需要知道对方的MAC地址，来形成数据地址。</p></li></ol><h3 id="arp示例"><a class="markdownIt-Anchor" href="#arp示例"></a> ARP示例</h3><p><img src="https://s2.loli.net/2022/04/26/oUaEzdujiVxKfSM.png" alt="" /></p><ol><li>source主机访问destination</li><li>不知道目的主机在哪里</li></ol><h3 id="arp表的缓存"><a class="markdownIt-Anchor" href="#arp表的缓存"></a> ARP表的缓存</h3><p><img src="https://s2.loli.net/2022/04/26/UINjWtlnhBic4zZ.png" alt="" /></p><ol><li>可以通过lookup命令进行。</li><li>在RAM里面，如果ARP没有本条目的对应MAC地址。</li><li>MAC地址在ARP中是有时效性的。到时间不更新不激活就会删除</li></ol><h3 id="arp的操作"><a class="markdownIt-Anchor" href="#arp的操作"></a> ARP的操作</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec04/30.png" alt="" /></p><ol><li>使用ARP机制</li><li>上图中是一个示意图</li><li>此时ARP table中没有缓存</li><li>图问题:目的MAC地址应该在前面，源MAC地址字后面</li></ol><h4 id="arp-request"><a class="markdownIt-Anchor" href="#arp-request"></a> ARP request</h4><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec04/31.png" alt="" /></p><ol><li>向目的方请求MAC地址</li><li>命令如图：就是找谁是这个主机，你的MAC地址是啥</li><li>将MAC地址设置为全1，作为广播发送</li></ol><h4 id="arp-checking"><a class="markdownIt-Anchor" href="#arp-checking"></a> ARP Checking</h4><p><img src="https://s2.loli.net/2022/04/26/yQHUI1eRl7KgaXP.png" alt="" /></p><ol><li>10.0.2.5发现不是自己的主机，那么解析到这里丢掉就行，同样会记录下来对应的发送方的MAC地址。(攻击原理)</li><li>10.0.2.9发现自己的MAC地址，然后形成ARP应答</li><li>同时10.0.2.9会同时记录下A主机的MAC地址，更新到自己ARP地址中去(会记录对方的)</li></ol><h4 id="arp-reply"><a class="markdownIt-Anchor" href="#arp-reply"></a> ARP reply</h4><p><img src="https://s2.loli.net/2022/04/26/aCM2tHO3RufnVsl.png" alt="" /></p><ol><li>向A主机进行MAC地址应答</li></ol><h4 id="arp-caching"><a class="markdownIt-Anchor" href="#arp-caching"></a> ARP Caching</h4><p><img src="https://s2.loli.net/2022/04/26/vBxmQ1GqARnauCi.png" alt="" /></p><ol><li>A的主机就会把对应的条目写到ARP Table中</li><li>然后再次形成一个数据帧发送出去即可。</li></ol><h3 id="arp-destination-local-目的地址为本地"><a class="markdownIt-Anchor" href="#arp-destination-local-目的地址为本地"></a> ARP: Destination local  目的地址为本地</h3><p><img src="https://s2.loli.net/2022/04/26/TVmbU5jLGaNcPKk.png" alt="" /></p><ol><li>ARP请求是本网段形成的，是一个广播就可以。</li><li>如果目的主机不在本网段中，那么不能跨网段进行广播</li></ol><h3 id="arp-internetwork-communication-网络交流"><a class="markdownIt-Anchor" href="#arp-internetwork-communication-网络交流"></a> ARP: Internetwork Communication 网络交流</h3><p><img src="https://s2.loli.net/2022/04/26/C8VLOkP9R2IuaAJ.png" alt="" /></p><ol><li>如何与不在同一物理网段上的设备通信？如下是两种解决方案。<ol><li>Default gateway 默认网关</li><li>Proxy ARP 代理ARP</li></ol></li></ol><h4 id="default-gateway-默认网关"><a class="markdownIt-Anchor" href="#default-gateway-默认网关"></a> Default gateway 默认网关</h4><ol><li><p>In order for a device to communicate with another device on another network, you must supply it with a default gateway.</p><p>为了使设备与另一网络上的另一设备通信，您必须为其提供<strong>默认网关</strong>。</p></li><li><p>A default gateway is the IP address of the interface on the router that connects to the network segment on which the source host is located.</p><p><strong>默认网关是路由器上连接到源主机所在网段的接口的IP地址。</strong></p></li><li><p>In order for a device to send data to the address of a device that is on another network segment, the source device sends the data to a default gateway.</p><p>为了使设备将数据发送到另一个网段上的设备的地址，源设备将数据发送到<strong>默认网关</strong>。</p></li><li><p>192.168.0.0和192.168.0.1接入到路由器，如果网关错误是无法进行转发的。自己搭建拓扑需要手动配置。</p><ol><li>由网关对对应报文进行转发，默认网关就是</li><li>THPCP Server进行动态生成</li></ol></li><li><p>帧被发送到另一个不通过网段的链路无意义</p></li><li><p>发送报文到另一个网段，需要路由器把对应端口的网关的MAC告诉你，然后通过网关进行转发。</p></li></ol><h4 id="proxy-arp-代理arp"><a class="markdownIt-Anchor" href="#proxy-arp-代理arp"></a> Proxy ARP 代理ARP</h4><ol><li><p>代理ARP是ARP的一种变体(variation)。</p></li><li><p>In the case the source host does not have a default gateway configured.</p><p>如果源主机未配置默认网关。</p></li></ol><p><img src="https://s2.loli.net/2022/04/26/ipAMHZeVT5gjL1a.png" alt="" /></p><ol><li>发送ARP请求，然后路由器给你一个ARP的reply，告诉你MAC地址(一般为本端口的IP地址)</li></ol><h3 id="destination-not-local-arp对应目的方不是本地"><a class="markdownIt-Anchor" href="#destination-not-local-arp对应目的方不是本地"></a> Destination not local ARP对应目的方不是本地</h3><p><img src="https://s2.loli.net/2022/04/26/lgEekbCTO9dNMD6.png" alt="" /></p><ol><li>路由器会把Router MAC的地址给你(连接本网段的MAC地址)</li></ol><h3 id="arp-flowchart-arp流程图"><a class="markdownIt-Anchor" href="#arp-flowchart-arp流程图"></a> ARP Flowchart ARP流程图</h3><p><img src="https://s2.loli.net/2022/04/26/yZOkV93pJ5wYoIW.png" alt="" /></p><ol><li>ARP攻击：有一个机器恶意发送无用帧，然后会将cache写满(解决就是一段时间不处理，然后等待ARP记录中的记录失效)</li><li>ARP学习是收到不同的帧，对帧进行保存</li><li>每一个ARP是有声明期的</li></ol><h1 id="network-layer-services-网络层设备"><a class="markdownIt-Anchor" href="#network-layer-services-网络层设备"></a> Network Layer Services 网络层设备</h1><h2 id="connection-oriented-network-services-面向连接的网络服务"><a class="markdownIt-Anchor" href="#connection-oriented-network-services-面向连接的网络服务"></a> Connection oriented network services 面向连接的网络服务</h2><p>A connection is established between the sender and the recipient before any data is transferred.</p><p><img src="https://s2.loli.net/2022/04/26/xHEMcdSCJbZrKyq.png" alt="" /></p><ol><li>面向连接的网络服务<ol><li>就是任何发送数据的行为之前，先要建立好连接，协商好参数才会开始传输，所有数据进行有序传输</li><li>网络情况导致数据出现问题，需要接受方进行一定处理来保证数据正确</li></ol></li><li>传输过程中要保持连接距离，只有完成传输后才能断开连接。</li><li>传输比较可靠，代价高。</li></ol><h2 id="无连接的网络服务"><a class="markdownIt-Anchor" href="#无连接的网络服务"></a> 无连接的网络服务</h2><p><img src="https://s2.loli.net/2022/04/26/YFQnLVim6OcgoKX.png" alt="" /></p><ol><li>他们分别对待每个数据包。</li><li>IP是<strong>无连接系统</strong>。</li><li>不要求发送方和接收方在发送前先建立一个连接(不打招呼)。</li><li>系统不需要进行大量的数据保留，不需要很多的缓存</li><li>局域网使用的比较多，可靠性比较低，不处理报文丢失</li><li>可靠网中，少量报文使用无连接是可以提高效率的(常用于比较小型的，并且可靠性相对比较高的网络)</li></ol><h2 id="电路交换circuit-switched"><a class="markdownIt-Anchor" href="#电路交换circuit-switched"></a> 电路交换(Circuit switched)</h2><ol><li><p>Connection-oriented vs. circuit switched.</p><p>面向连接与电路交换。</p><ol><li><p>However, the two terms are not the same</p><p>但是，这两个词并不相同</p></li><li><p>要先建立一个虚电路关系，之后报文走对应的虚电路。</p></li></ol></li><li><p>Connection-oriented: establish a connection with the recipient, first, and then begin the data transfer</p><p>面向连接：首先与接收者建立连接，然后开始数据传输。</p></li><li><p>All packets travel sequentially across the same channel, or more commonly, across the same virtual circuit</p><p>所有数据包依次在同一通道上传播，或更常见的是在同一虚拟电路上传播。</p></li><li><p>问题:电路的利用效率低，一个人用了别人就不能用了(虚电路可能是分段建立，可能局部可以复用，但是整体不可以复用)。</p></li><li><p>虚电路要强于面向连接的，传输更加可靠，保证<strong>传输先后关系</strong>。</p></li></ol><h2 id="报文交换packet-switched"><a class="markdownIt-Anchor" href="#报文交换packet-switched"></a> 报文交换(Packet Switched)</h2><ol><li><p>Connectionless network vs. packet switched： The two terms are not the same, either</p><p>无连接网络与数据包交换:这两个词都不一样</p></li><li><p>When the packets pass from source to destination, they can:</p><p>当数据包从源传递到目标时，它们可以：</p><ol><li><p>Switch to different paths.</p><p>切换到其他路径。(每一报文有各自的发送方和接收方，可以根据当前的网络情况，进行路由选择)</p></li><li><p>Arrive out of order.</p><p>乱序到达。</p></li></ol></li><li><p>Devices make the path determination for each packet based on a variety of criteria. Some of the criteria may differ from packet to packet.</p><p>设备根据<strong>各种标准</strong>为每个数据包<strong>确定路径</strong>。某些标准可能因分组而异。</p></li><li><p>将原始数据分为很多的子报文(单位)，每个子报文(单位)自己选择路径进行发送。</p></li><li><p>大部分的Connetionless network都是基于packet switched进行实现，控制网络拥塞。</p></li><li><p>出现问题时候，我们只需要重传对应部分的报文就可以(不用重传全部数据)</p></li></ol><h1 id="network-layer-网络协议操作"><a class="markdownIt-Anchor" href="#network-layer-网络协议操作"></a> Network Layer 网络协议操作</h1><p><img src="https://s2.loli.net/2022/04/26/UB3DhaLxuCylTOw.png" alt="" /></p><ol><li>存在冗余，A转发给B是由当前网络状态处理。</li><li>ABC之间都是通过帧进行计算的。</li></ol><h2 id="routed-protocol-被动可路由协议"><a class="markdownIt-Anchor" href="#routed-protocol-被动可路由协议"></a> Routed protocol 被动可路由协议</h2><ol><li>为网络层提供支持的协议称为路由协议或可路由协议。</li><li>IP是网络层协议，因此，它可以通过互联网络进行路由。</li></ol><h2 id="non-routable-protocol-不可路由协议"><a class="markdownIt-Anchor" href="#non-routable-protocol-不可路由协议"></a> Non-routable protocol 不可路由协议</h2><ol><li><p>Non-routable protocols are protocols that do not support Layer 3</p><p>不可路由协议是不支持第3层的协议。</p></li><li><p>The most common of these non-routable protocols is NetBEUI</p><p>这些不可路由协议中最常见的是NetBEUI。</p><ol><li>直接根据目的方的地址在局域网中进行生成定位</li><li>这个协议不支持第三层，也就是跨局域网是不可以的。</li></ol></li><li><p>NetBEUI is a small, fast, and efficient protocol that is limited to running on one segment</p><p>NetBEUI是一种小型，快速且高效的协议，仅限于在一个网段上运行。</p></li></ol><h2 id="addressing-of-a-routable-protocol-被动可路由协议的寻址"><a class="markdownIt-Anchor" href="#addressing-of-a-routable-protocol-被动可路由协议的寻址"></a> Addressing of a routable protocol 被动可路由协议的寻址</h2><p><img src="https://s2.loli.net/2022/04/26/hMlbis51yArX26a.png" alt="" /></p><p><strong>Routing table</strong></p><p><img src="https://s2.loli.net/2022/04/26/yZ9YnAFegQG3hz7.png" alt="" /></p><ol><li>路由器连接三个网段(列出来的是网络号)</li><li>将目的主机和掩码进行逻辑AND操作，得到对应的网段</li><li>然后请求路由表可以发现E2端口为目的网段</li><li>再次将报文封装转发给对应的主机</li><li>路由表是存储在内存中的</li></ol><h2 id="classification-static-and-dynamic-路由协议的分类静态-动态"><a class="markdownIt-Anchor" href="#classification-static-and-dynamic-路由协议的分类静态-动态"></a> Classification : Static and Dynamic 路由协议的分类:静态、动态</h2><ol><li><p>Static routes: The network administrator manually enter the routing information in the router</p><p>静态路由：网络管理员在路由器中手动输入路由信息。</p></li><li><p>Dynamic routes:</p><p>动态路由</p><ol><li><p>Routers can learn the information from each other on the fly.</p><p>路由器可以在运行过程中互相学习信息。</p></li><li><p>Using routing protocol to update routing information</p><p>使用路由协议更新路由信息。</p></li><li><p>RIP, IGRP, EIGRP, OSPF …</p></li><li><p>人工维护的代价比较大</p></li></ol></li></ol><h3 id="static-vs-dynamic-routes-静态路由和动态路由的区别"><a class="markdownIt-Anchor" href="#static-vs-dynamic-routes-静态路由和动态路由的区别"></a> Static vs. dynamic routes 静态路由和动态路由的区别</h3><ol><li><p>静态路由</p><ol><li><p>For hiding parts of an internetwork 用于<strong>隐藏</strong>部分网络。安全(不必进行路由表的交换)</p></li><li><p>To test a particular link in a network 测试网络中的特定链接。</p></li><li><p>For maintaining routing tables whenever there is only one path to a destination network.</p><p>用于仅在到达目标网络的路径时维护路由表。</p></li></ol></li><li><p>动态路由</p><ol><li>Maintenance of routing table 维护路由表。</li><li>Timely distribution of information in the form of routing updates 以路由更新的形式及时分发信息。</li><li>Relies on routing protocol to share knowledge 依靠路由协议共享知识。</li><li>Routers can adjust to changing network conditions.  路由器可以调整以适应不断变化的网络状况。</li><li>打开后会启动<strong>进程</strong>，按照不同的协议，和网上的不同设备学习信息，然后根据<strong>算法</strong>生成路由表</li></ol></li></ol><h3 id="routing-protocol-主动路由协议routing"><a class="markdownIt-Anchor" href="#routing-protocol-主动路由协议routing"></a> Routing protocol 主动路由协议(Routing)</h3><ol><li><p>Routing protocols determine the paths that routed protocols follow to their destinations.</p><p>路由协议确定路由协议遵循的到达目的地的路径。</p></li><li><p>是用来构建路由表的，所以叫做routing</p></li><li><p>公平、简单、适应变化等特点</p></li></ol><h2 id="routed-vs-routing-protocol-被动路由协议和主动路由协议"><a class="markdownIt-Anchor" href="#routed-vs-routing-protocol-被动路由协议和主动路由协议"></a> Routed vs. Routing protocol 被动路由协议和主动路由协议</h2><p><img src="https://s2.loli.net/2022/04/26/l1uoFkrXJB4KhwH.png" alt="" /></p><ol><li>Routed Portocol用于路由器之间，用来保证路由器之间连通(完成转发)，保证路由器有效连通。</li><li>Routing Protocol用于做各自的路由表的生成：路由器彼此交换信息。</li><li>Routing Protocol 决定 Routed Protocals</li></ol><h2 id="动态路由协议的分类内部网关协议和外部网关协议"><a class="markdownIt-Anchor" href="#动态路由协议的分类内部网关协议和外部网关协议"></a> 动态路由协议的分类：内部网关协议和外部网关协议</h2><ol><li><p>Interior Gateway Protocols (RIP, IGRP, EIGRP, OSPF):</p><p>内部网关协议(Interior Gateway Protocols，RIP，IGRP，EIGRP，OSPF)：</p><p>Be used within an autonomous system, a network of routers under one administration, like a corporate network, a school district’s network, or a government agency’s network.</p><p>可在自治系统(autonomous system，大的单位或者管理方)中使用，该系统是一个主管部门下的路由器网络，例如公司(corporate)网络，学区的网络或政府机构的网络。</p></li><li><p>Exterior Gateway Protocols (EGP, BGP):</p><p>外部网关协议(Exterior Gateway Protocols，EGP，BGP)：</p><p>Be used to route packets between autonomous systems.</p><p>用于在自治系统之间路由数据包。</p></li><li><p>自治系统是<strong>逻辑</strong>的划分,而未必是物理层次的划分。</p></li><li><p>通过BGP，让其他自治系统了解自己的自治系统中的网段。</p></li><li><p>内部网关协议和外部网关协议的区别：</p><ol><li>一个单位对自己内部的网络管理负责，用一些协议。</li><li>IGP是内部确定的管理规则，BGP(EGP)标准来沟通不同自己系统。</li></ol></li></ol><h2 id="内部网关协议的分类dvp-and-lsp"><a class="markdownIt-Anchor" href="#内部网关协议的分类dvp-and-lsp"></a> 内部网关协议的分类：DVP and LSP</h2><ol><li>距离矢量协议(Distance-Vector Protocols，RIP, IGRP):<ol><li>View network topology from neighbor’s perspective. 从<strong>邻居</strong>的角度查看网络拓扑。(注意不基于全局)</li><li>Add distance vectors from router to router. 在路由器之间添加距离向量。(根据跳数来决定，经过一个路由器+1一次)</li><li>Frequent, periodic updates 经常定期(periodic)更新。</li><li>Pass copy of routing tables to neighbor routers 将路由表的<strong>副本</strong>传递到邻居路由器。</li></ol></li><li>链路状态协议(Link State Protocols, OSPF):<ol><li>Gets common view of entire network topology 获取整个网络拓扑的通用视图。(全局的视角，会有代价)</li><li>Calculates the shortest path to other routers. 计算到其他路由器的最短路径。(基于带宽计算出来的cost，形成cost拓扑图，然后计算出对应的路径代价作为评判依据)</li><li>Event-triggered updates <strong>事件</strong>触发的更新。</li><li>Passes link state routing updates to other routers 将链接状态路由更新传递给其他路由器。</li></ol></li></ol><h3 id="distance-vector-routing-距离矢量协议dvp的示例"><a class="markdownIt-Anchor" href="#distance-vector-routing-距离矢量协议dvp的示例"></a> Distance vector routing 距离矢量协议(DVP)的示例</h3><p><img src="https://s2.loli.net/2022/04/26/5xihw9XL6NAyjVd.png" alt="" /></p><ol><li>初始的时候，各自持有的是黑色的部分(直连的线路)</li><li>定时路由表会相互交换给邻居，下一时刻C学习到B，B学习到AC，A学习到B，在下一刻进行再次的转发。</li><li>DVP只知道到达一个网段的最少跳数(但是不知道最佳路径)。</li><li>会生成路由回路</li></ol><h3 id="riprouting-information-protocol-dv的代表"><a class="markdownIt-Anchor" href="#riprouting-information-protocol-dv的代表"></a> RIP(Routing Information Protocol) DV的代表</h3><ol><li>最受欢迎。(实现算法简单，更加靠谱)</li><li>基于距离矢量的内部网关协议。</li><li>唯一的指标是跳数。</li><li>最大跳数为15。(评判依据简单，是一个短板)</li><li>每30秒更新一次(广播)，可以修改。</li><li>并非总是选择最快的路径(而是走跳数最短的路径)。</li><li>产生大量的网络流量。</li><li>RIP v2是RIP v1的改进版本<ul><li>RIP v1用地址广播</li><li>RIP v2用主播地址广播，支持身份认证、路由等，比较安全，常用</li></ul></li></ol><h3 id="link-state-routing-链路状态协议lsp"><a class="markdownIt-Anchor" href="#link-state-routing-链路状态协议lsp"></a> Link state routing 链路状态协议(LSP)</h3><p><img src="https://s2.loli.net/2022/04/26/BKyiYsjO8zeGfWt.png" alt="" /></p><blockquote><p>上图中的Routing table应该叫做初始时刻的Routing Table(本图的问题)</p></blockquote><ol><li>彼此交换连接情况，交换的是<strong>Link state</strong>而不是路由表，包含link的信息，以NetID作为主键(无相同网段)，包含的是link上的路由器邻接关系、链路类型(4种)、链路带宽，会指定谁连接了谁，这个条目就被称为Database(表)。这样子就不仅仅知道链路，还知道更多的全局信息。</li><li>LSP操作过程:<ol><li>相互交换彼此学到对应的Tpological Database(是全局的信息)</li><li>之后使用SPF算法，以自己为根，通过最短路径优先算法，生成以自己为根的树</li><li>根据这一个树再生成路由表(了解全局的信息)，逻辑是树的逻辑。</li></ol></li><li>LSP不是进行定时进行交换的，而是初始的时候进行交换，稳定之后，根据<strong>事件触发</strong>的时候才会更新数据。<ol><li>更新后发送给所有的路由器，需要将Database发送给所有的路由器</li><li>收到的路由器的，根据database更新自己的树，然后再次生成路由表。</li></ol></li><li>LSP是指从所有可达的道路上找到代价最小的路径。</li><li>全局可能会比较大，考虑负载进行处理</li><li>但是没有路由回路，单域内一般不超过20个路由器</li><li>路由表一般只保存一个最优的转发点的(负载均衡)</li></ol><h3 id="ospfopen-shortest-path-first"><a class="markdownIt-Anchor" href="#ospfopen-shortest-path-first"></a> OSPF(Open Shortest Path First)</h3><ol><li>最短路径优先协议，是基于链路状态的内部网关协议，消耗CPU和内存。</li><li>指标由<strong>带宽</strong>，速度，流量，可靠性和安全性组成，本科阶段只考虑带宽的。</li><li>事件触发的更新。</li><li>最快和什么有关？(最快指的是带宽)<ol><li>和实时各条链路上的通信冗余有关，也和管理方案有关，简单来说是和带宽有关</li><li>带宽表示为代价，带宽和代价成<strong>反比</strong>。</li></ol></li></ol><h3 id="igrp-interior-gateway-routing-protocol-and-eigrp-enhanced-igrp"><a class="markdownIt-Anchor" href="#igrp-interior-gateway-routing-protocol-and-eigrp-enhanced-igrp"></a> IGRP (Interior Gateway Routing Protocol) and EIGRP (Enhanced IGRP)</h3><ol><li><p>Cisco proprietary. 思科知识产权的。</p></li><li><p>Interior Gateway Protocol. 基于距离矢量的内部网关协议。</p></li><li><p>Distance Vector Protocol. IGRP最大跳数为255。</p></li><li><p>Metric is compose of bandwidth, load, delay and reliability</p><p>EIGRP指标由**带宽(bandwidth)，负载(load)，延迟(delay)和可靠性(reliability)**组成。加权进行运算</p></li><li><p>Updates every 90 seconds 每90秒更新一次。</p></li><li><p>EIGRP is an advanced version of IGRP, that is hybrid routing protocol.</p><p>EIGRP是IGRP的高级版本，它是<strong>混合</strong>路由协议(不全是根据跳数来计算)。</p></li><li><p>IOS 12.0以后，不支持IGRP，在模拟器中还可以。</p></li><li><p>EIGRP是可以的，和华为等路由器是不兼容的。(因为知识版权是思科独有的)</p></li></ol><h1 id="vlsmvariable-length-subnet-mask-可变长度子网掩码"><a class="markdownIt-Anchor" href="#vlsmvariable-length-subnet-mask-可变长度子网掩码"></a> VLSM(Variable Length Subnet Mask) 可变长度子网掩码</h1><h2 id="classful-routing-vlsm-经典路由和可变长度子网掩码"><a class="markdownIt-Anchor" href="#classful-routing-vlsm-经典路由和可变长度子网掩码"></a> Classful routing &amp; VLSM 经典路由和可变长度子网掩码</h2><h3 id="classful-routing-经典路由classful-routing-无子网掩码"><a class="markdownIt-Anchor" href="#classful-routing-经典路由classful-routing-无子网掩码"></a> Classful routing  经典路由(Classful routing) 无子网掩码</h3><ol><li><p>Classful routing protocols require that a single network use the same subnet mask</p><p>有类的路由协议要求单个网络使用相同的子网掩码。</p></li><li><p>例如：网络192.168.187.0必须仅使用一个子网掩码，例如255.255.255.0。</p></li><li><p>会造成网络号的浪费(为了规格一致，为了保证标准一致，会浪费一些网络号)，比如路由器之间的网络没有必要给很多的hostID。</p></li><li><p>特定的情况:将路由器端口的掩码作为目的网络的掩码，可以进一步完成细化</p></li></ol><h3 id="vlsm-variable-length-subnet-masks-可变长度子网掩码variable-length-subnet-masks-有子网掩码"><a class="markdownIt-Anchor" href="#vlsm-variable-length-subnet-masks-可变长度子网掩码variable-length-subnet-masks-有子网掩码"></a> VLSM — Variable-Length Subnet Masks 可变长度子网掩码(Variable-Length Subnet Masks) 有子网掩码</h3><ol><li><p>VLSM is simply a feature that allows a single autonomous system to have networks with different subnet masks.</p><p>VLSM只是一项功能，它允许单个自治系统的网络具有不同的子网掩码。</p></li><li><p>有效的解决网络号浪费的问题</p></li></ol><h2 id="vslm-可变长度子网掩码"><a class="markdownIt-Anchor" href="#vslm-可变长度子网掩码"></a> VSLM 可变长度子网掩码</h2><ol><li><p>With VLSM, a network administrator can</p><p>使用VLSM，网络管理员可以在主机少的网络上使用长掩码，而在主机多的子网上使用短掩码。(提供了很高的灵活性)</p></li><li><p>如果路由协议允许VLSM</p><ol><li>在路由网络连接上使用30位子网掩码255.255.255.252</li><li>用户网络的24位掩码255.255.255.0</li><li>或者，对于最多1000个用户的网络，甚至是22位掩码255.255.252.0。(保留10位)</li></ol></li><li><p>在CIDR的基础上发展的，报文中包含有子网掩码。</p></li></ol><h2 id="为什么使用vlsm"><a class="markdownIt-Anchor" href="#为什么使用vlsm"></a> 为什么使用VLSM</h2><ol><li><p>VLSM allows an organization to use more than one subnet mask within the same network address space</p><p>VLSM允许组织在同一网络地址空间内使用多个子网掩码。</p></li><li><p>Implementing VLSM is often referred to as “subnetting a subnet”, and can be used to maximize addressing efficiency.</p><p>实施VLSM通常被称为&quot;子网划分&quot;，可用于最大化寻址效率。</p></li><li><p>VLSM is one of the modifications that has helped to bridge the gap between IPv4 and IPv6.</p><p>VLSM是有助于缩小IPv4和IPv6之间差距的修改(modifications)之一。</p></li></ol><h2 id="vlsm优缺点"><a class="markdownIt-Anchor" href="#vlsm优缺点"></a> VLSM优缺点</h2><h3 id="vlsm的优点"><a class="markdownIt-Anchor" href="#vlsm的优点"></a> VLSM的优点</h3><ol><li>Efficient use of IP addresses  高效使用IP地址</li><li>Better route aggregation 更好的路由聚合(aggregation):构建超网</li></ol><h3 id="vlsm的缺点"><a class="markdownIt-Anchor" href="#vlsm的缺点"></a> VLSM的缺点</h3><ol><li><p>会导致地址空间的浪费:广播地址和网络号都无法被使用。</p><ol><li><p>In the past, it has been recommended that the first and last subnet not be used. But we can used the Subnet 0 from Cisco IOS ver12.0</p><p>过去，建议不要使用第一个和最后一个子网。但是我们可以使用Cisco IOS ver12.0中的子网0。</p></li><li><p>从IOS ver12.0起，Cisco路由器默认使用零子网。</p></li><li><p>如果想要禁止零子网，使用该指令:<code>router(config)#no ip subnet-zero()</code></p></li></ol></li></ol><p><img src="https://s2.loli.net/2022/04/26/3Sqe1oWpnFk9Pd5.png" alt="" /></p><blockquote><p>上图解释了子网长度相同会造成怎样的浪费(在路由器所在的子网段我们只需要满足2个主机，也就是需要2位的主机号就可以完成操作)<br />每一个位置都需要30个主机,有7个子网可以使用(全零可以使用，而全一不可以使用)</p></blockquote><h2 id="support-vlsm-routing-protocol-支持vlsm的路由协议"><a class="markdownIt-Anchor" href="#support-vlsm-routing-protocol-支持vlsm的路由协议"></a> Support VLSM Routing Protocol: 支持VLSM的路由协议</h2><ol><li>Open Shortest Path First (OSPF)  开放式最短路径优先(OSPF)</li><li>Integrated Intermediate System to Intermediate System (Integrated IS-IS) 集成中间系统到中间系统(集成IS-IS)</li><li>Enhanced Interior Gateway Routing Protocol (EIGRP) 增强型内部网关路由协议(EIGRP)</li><li>RIP v2</li><li>Static routing 静态路由</li></ol><h2 id="vlsm的表示法"><a class="markdownIt-Anchor" href="#vlsm的表示法"></a> VLSM的表示法</h2><p><img src="https://s2.loli.net/2022/04/26/lz8KqfTxe73XBcd.png" alt="" /></p><ol><li>斜杠的含义是指前面多少位保留给网络位</li><li>此时也就是/30就可以满足路由器之间的网络连通所需(减少浪费)，剩下的网络地址可以在以后网络进行扩展</li><li>这个例子中不使用VLSM还是可以进行解决的</li></ol><h2 id="vlsm的例子"><a class="markdownIt-Anchor" href="#vlsm的例子"></a> VLSM的例子</h2><p><img src="https://s2.loli.net/2022/04/26/mwiH4o176nt8zrp.png" alt="" /></p><h3 id="划分背景"><a class="markdownIt-Anchor" href="#划分背景"></a> 划分背景</h3><ol><li>已分配192.168.10.0/24的C类地址。<ol><li>珀斯，悉尼和新加坡与吉隆坡建立WAN连接。</li><li>珀斯需要60个主机</li><li>KL需要28个主机</li><li>悉尼和新加坡分别需要12位房东。</li></ol></li><li>先划分成大的子网，然后进一步进行划分，然后在慢慢进行细化</li><li>为了计算VLSM子网，各个主机首先从地址范围分配最大的需求。需求级别应从最大到最小列出。</li></ol><h3 id="第一步满足珀斯的主机需求"><a class="markdownIt-Anchor" href="#第一步满足珀斯的主机需求"></a> 第一步:满足珀斯的主机需求</h3><ol><li>在此示例中，珀斯需要60个主机号。</li><li>使用6位，因为2<sup>6</sup> – 2 = 62个可用主机地址。因此，将从第四个八位位组开始使用2位来表示/26的扩展网络前缀，其余6位将用于主机地址。</li><li>在地址192.168.10.0/24上应用VLSM可得到：<ol><li>192.168.10.00 hh hhhh /26</li><li>255.255.255.192 (1100 0000)</li></ol></li></ol><p><img src="https://s2.loli.net/2022/04/26/mW5fUDySJlVXNKF.png" alt="" /></p><ol start="4"><li>第一个给Perth使用，剩下的用作保留未使用的</li></ol><h3 id="第二步为吉隆坡划分子网"><a class="markdownIt-Anchor" href="#第二步为吉隆坡划分子网"></a> 第二步:为吉隆坡划分子网</h3><ol><li>吉隆坡需要28台主机号。192.168.10.63/26之后的下一个可用地址是192.168.10.64/26。</li><li>由于需要28个主机，因此主机地址需要5位，即25 –2 = 30个可用主机地址。</li><li>因此，将需要5位来表示主机，而将使用3位来表示扩展网络前缀/27</li><li>在地址192.168.10.64/26上应用VLSM可得到：<ol><li>192.168.10.010 hhhhh /27</li><li>255.255.255.224 (1110 0000)</li><li>三个子网再借用一位</li></ol></li></ol><p><img src="https://s2.loli.net/2022/04/26/V3CqER5sS1y7z6e.png" alt="" /></p><h3 id="第三步为悉尼和新加坡进行分配地址"><a class="markdownIt-Anchor" href="#第三步为悉尼和新加坡进行分配地址"></a> 第三步:为悉尼和新加坡进行分配地址</h3><ol><li>现在，悉尼和新加坡分别需要12位主机号。 下一个可用地址从192.168.10.96/27开始。</li><li>由于需要12个主机，因此主机地址需要4位，即24 = 16、16 – 2 = 14个可用地址。</li><li>因此，需要4位来表示主机，对于/28的扩展网络前缀需要4位。</li><li>在地址192.168.10.96/27上应用VLSM可得到：<ol><li>192.168.10.0110 hhhh /28</li><li>255.255.255.240 (1111 0000)</li></ol></li></ol><p><img src="https://s2.loli.net/2022/04/26/49nbf1adACErFBT.png" alt="" /></p><h3 id="第四步为之间的路由地址进行划分"><a class="markdownIt-Anchor" href="#第四步为之间的路由地址进行划分"></a> 第四步:为之间的路由地址进行划分</h3><ol><li>现在为WAN连接分配地址。请记住，每个WAN连接都需要两个IP地址。下一个可用的子网是192.168.10.128/28。</li><li>由于每个WAN链路需要2个网络地址，因此主机地址需要2位，即22 –2 = 2个可用地址。</li><li>因此，需要2位来表示链接，并需要6位来表示扩展网络前缀/30。</li><li>在192.168.10.128/28上应用VLSM可得到：<ol><li>192.168.10.011000 hh /30</li><li>255.255.255.252 (1111 1100)</li></ol></li></ol><p><img src="https://s2.loli.net/2022/04/26/261UmiDox9aOdES.png" alt="" /></p><p><img src="https://s2.loli.net/2022/04/26/6MymPAOrfv2z5jI.png" alt="" /></p><ol start="5"><li>通过上述方法，从主机需求量大的部分入手，到主机需求量小的部分是很好的方法。</li></ol><h2 id="vlsm-例子总结"><a class="markdownIt-Anchor" href="#vlsm-例子总结"></a> VLSM: 例子总结</h2><ol><li>重要的是要记住，只有未使用的子网才能进一步划分子网。</li><li>如果使用了子网中的任何地址，则该子网不能再进行子网划分。</li><li>一般是从主机多大到主机少(路由间网络)进行划分</li></ol><h2 id="路由聚集route-aggregation"><a class="markdownIt-Anchor" href="#路由聚集route-aggregation"></a> 路由聚集(Route Aggregation)</h2><ol><li>使用无类域间路由(CIDR，Classless InterDomain Routing)和VLSM不仅可以防止地址浪费，而且还可以促进路由聚合或汇总。</li><li>多个路由条目汇聚成小的路由条目</li><li>比如如下图就是讲3个/24的子网合并成一个/16的网络高速远端</li><li>优点:聚集之后我们只需要知道一个网段就可以，也就是远端的路由表就会变少</li></ol><p><img src="https://s2.loli.net/2022/04/26/WsKGVQgUAbplOei.png" alt="" /></p><h2 id="路由聚集的例子"><a class="markdownIt-Anchor" href="#路由聚集的例子"></a> 路由聚集的例子</h2><p><img src="https://s2.loli.net/2022/04/26/ZvlgT8uCL2UEHr6.png" alt="" /></p><ol><li>多层聚集</li></ol><h2 id="如何进行路由聚集"><a class="markdownIt-Anchor" href="#如何进行路由聚集"></a> 如何进行路由聚集</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec04/60.png" alt="" /></p><blockquote><p>如何进行计算:将尽可能多的位进行聚集，将之后的不通过的位置，作为Host位，就得到了上图的结果</p></blockquote><h2 id="路由聚集的优点"><a class="markdownIt-Anchor" href="#路由聚集的优点"></a> 路由聚集的优点</h2><ol><li>减少路由表条目的数量。</li><li>可用于隔离拓扑更改(聚集之后，只能得到大的网段的信息，因为小的网段的拓扑变化会比较频繁，导致路由表进行不断地计算，只公告比较高聚集后的路由的网段信息)</li></ol><h2 id="路由隔离的其他内容"><a class="markdownIt-Anchor" href="#路由隔离的其他内容"></a> 路由隔离的其他内容</h2><ol><li>为了使聚合正常工作，请以分层方式(hierarchical fashion)仔细分配地址，以便汇总的地址将共享相同的高位。</li><li>VLSM允许路由聚合，并且通过将聚合完全基于左侧共享的高阶位来灵活地增加，即使网络不连续也是如此。</li><li>路由聚集需要严谨，不能让A和B两个端口的聚集后的网络号相同</li><li>VLSM是不做连续性检验的，也就是就算不连续也会进行聚集</li><li>全0子网会在题目中说是否可用</li><li>全1子网尽量不要使用</li></ol><h1 id="因特网控制报文协议-icmp"><a class="markdownIt-Anchor" href="#因特网控制报文协议-icmp"></a> 因特网控制报文协议 ICMP</h1><ol><li>ICMP (Internet Control Message Protocol)：为了提高 IP 数据报交付成功的机会(消息管理和协商)</li><li>ICMP 允许主机或路由器<strong>报告</strong>差错情况和提供有关异常情况的报告</li><li>ICMP 只是IP层的协议</li><li>ICMP 报文作为IP层数据报的数据，加上数据报的首部，组成 IP 数据报发送出去</li><li>一般路由器在丢弃报文的时候(处理之前已经提到的情况)，都会返回一个ICMP差错报文</li></ol><h2 id="icmp-报文的格式"><a class="markdownIt-Anchor" href="#icmp-报文的格式"></a> ICMP 报文的格式</h2><p><img src="https://s2.loli.net/2022/04/26/dsKa3mOh5txEFnf.png" alt="" /></p><ol><li>前四个字节是一样的(格式化的)</li><li>后面都是个根据类型</li></ol><h2 id="两种icmp报文"><a class="markdownIt-Anchor" href="#两种icmp报文"></a> 两种ICMP报文</h2><p><img src="https://s2.loli.net/2022/04/26/HtNkbsmv1LSDxef.png" alt="" /></p><ol><li>查询报文:一般这种情况不是很多</li><li>差错报告报文:一般这种类型会多一些</li></ol><h2 id="目的站不可到达"><a class="markdownIt-Anchor" href="#目的站不可到达"></a> 目的站不可到达</h2><ol><li><strong>网络</strong>不可到达(net unreachable)</li><li><strong>主机</strong>不可到达(host unreachable)</li><li><strong>协议</strong>不可到达(protocol unreachable)</li><li><strong>端口</strong>不可到达(port unreachable)</li><li><strong>源路由选择</strong>不能完成(source route failed)</li><li>目的网络<strong>不可知</strong>(unknown destination network)</li><li>目的主机<strong>不可知</strong>(unknown destination host)</li><li>不可知是完全不可以解析，不可达是可以解析但是不可以到达</li></ol><h2 id="icmp-差错报告报文的数据字段的内容"><a class="markdownIt-Anchor" href="#icmp-差错报告报文的数据字段的内容"></a> ICMP 差错报告报文的数据字段的内容</h2><p><img src="https://s2.loli.net/2022/04/26/L5IkuZAbl487HBo.png" alt="" /></p><ol><li>一般会把原始的IP数据报文的数据报首部 + 8字节(数据的，可能会包含端口信息)作为ICMP的数据部分</li><li>ICMP的前8个字节的是确定的(前4个字节是类型，校验位，后面四个字节是确定的)</li><li>然后添加一个首部作为IP数据报进行发送。</li></ol><h2 id="不应发送-icmp-差错报告报文的几种情况"><a class="markdownIt-Anchor" href="#不应发送-icmp-差错报告报文的几种情况"></a> 不应发送 ICMP 差错报告报文的几种情况</h2><ol><li>对 ICMP 差错报告报文不再发送 ICMP 差错报告报文</li><li>对第一个分片的数据报片的所有后续数据报片都不发送 ICMP 差错报告报文(就是每次传送只要发送一次就够了)</li><li>对具有多播地址的数据报都不发送 ICMP 差错报告报文</li><li>对具有特殊地址(如127.0.0.0或0.0.0.0)的数据报不发送 ICMP 差错报告报文<ol><li>127.0.0.0:逻辑回路地址</li><li>0.0.0.0:确认路由地址</li></ol></li></ol><h2 id="ping-packet-internet-groper"><a class="markdownIt-Anchor" href="#ping-packet-internet-groper"></a> PING (Packet InterNet Groper)</h2><ol><li>PING 是用ICMP的&quot;Echo request&quot;和&quot;Echo reply&quot;消息来实现的</li><li>PING 用来测试两个主机之间的连通性，一般是用来检查局域网的连通性：PING不通，不仅仅是发送不过去，有可能是应答不回来。</li><li>PING 使用了ICMP回送请求与回送回答报文</li><li>PING 是应用层直接使用网络层ICMP的例子，它没有通过运输层的TCP或UDP</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;layer3-network-layer-网络层&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#layer3-network-layer-网络层&quot;&gt;&lt;/a&gt; Layer3: Network Layer 网络层&lt;/h1&gt;
&lt;ol&gt;
&lt;li</summary>
      
    
    
    
    <category term="计算机网络" scheme="https://freeeeeeeeedom.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="互联网计算" scheme="https://freeeeeeeeedom.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="互联网计算" scheme="https://freeeeeeeeedom.gitee.io/tags/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>人机交互设计</title>
    <link href="https://freeeeeeeeedom.gitee.io/2022/04/25/%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92%E8%AE%BE%E8%AE%A1/"/>
    <id>https://freeeeeeeeedom.gitee.io/2022/04/25/%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92%E8%AE%BE%E8%AE%A1/</id>
    <published>2022-04-25T02:12:29.000Z</published>
    <updated>2022-04-25T05:49:26.349Z</updated>
    
    <content type="html"><![CDATA[<h1 id="人机交互设计"><a class="markdownIt-Anchor" href="#人机交互设计"></a> 人机交互设计</h1><ul><li>What is HCI Design?<ul><li>Objectives of HCI - Usability</li></ul></li><li>Three factors in HCI<ul><li>Human</li><li>Computer</li><li>Interaction</li></ul></li><li>HCI Design Process<ul><li>GUI Design</li></ul></li></ul><h1 id="用户和不好的设计"><a class="markdownIt-Anchor" href="#用户和不好的设计"></a> 用户和不好的设计</h1><ol><li>系统用户通常通过系统界面而非功能来判断系统：用户界面的设计应与预期用户的技能，经验和期望相匹配。</li><li>界面设计不当会导致用户发生灾难性错误：不好的UI的设计往往是很多软件系统不被使用的原因。</li><li>IPAD的良好的体验感和可操作性，而早期的Andriod操作系统则主要是从工程师角度出发的操作系统。</li><li>比如医院书写病历:老医生打字困难，所以我们我们应该针对性的进行设计。</li></ol><h1 id="什么是人机交互设计hci"><a class="markdownIt-Anchor" href="#什么是人机交互设计hci"></a> 什么是人机交互设计(HCI)</h1><ol><li>人机交互设计旨在发现最有效的方法来设计人机界面之间的可用和有效的体验</li></ol><h2 id="什么是好的人机交互"><a class="markdownIt-Anchor" href="#什么是好的人机交互"></a> 什么是好的人机交互</h2><ol><li>良好的HCI界面设计可鼓励用户与系统之间<strong>轻松，自然且引人入胜</strong>的交互。</li><li>“当程序的行为完全符合用户的想法时，用户界面就会经过精心设计。”<ol><li>它允许用户执行我们所需的任务。</li><li>一个好的界面应该是<strong>透明</strong>的。有了一个好的用户界面，用户会<strong>忘记自己正在使用计算机</strong>。</li></ol></li><li>如何判断好坏？ 唯一标准:<strong>可用性</strong></li></ol><h2 id="hci的重要组成可用性-重要"><a class="markdownIt-Anchor" href="#hci的重要组成可用性-重要"></a> HCI的重要组成：可用性 重要</h2><ol><li>可用性不是用户界面的单一一维属性，它包含以下维度。<ol><li>易学性：新手用户容易学习，能够很快使用系统。</li><li>效率：熟练的用户可以高效使用它</li><li>易记性：使用过软件系统的用户，能够有效记忆或快速重新学会使用该系统。(超市可以缓存之前的信息)</li><li>出错率：几乎没有错误，可以从错误中快速恢复</li><li>主观满意度：让用户有良好的体验。</li></ol></li></ol><h3 id="不同的用户的学习曲线"><a class="markdownIt-Anchor" href="#不同的用户的学习曲线"></a> 不同的用户的学习曲线</h3><ol><li>易学性和效率是存在冲突的</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt11/1.png" alt="" /></p><ol start="2"><li>大多数的GUI界面都是友好新手的，而命令界面是友好专家用户的。</li></ol><h3 id="记忆"><a class="markdownIt-Anchor" href="#记忆"></a> 记忆</h3><ol><li>涉及编码和回忆知识并采取适当行动</li><li>我们不记得所有的事情:涉及过滤和处理</li><li>上下文对于影响我们的记忆很重要</li><li>我们认识事物比回忆事物好得多</li><li>GUI在基于命令的界面上的兴起</li><li>相比文字，人们更加容易记住图片</li><li>使用图标而不是名称</li></ol><h1 id="人机交互的三个因素"><a class="markdownIt-Anchor" href="#人机交互的三个因素"></a> 人机交互的三个因素</h1><h2 id="人"><a class="markdownIt-Anchor" href="#人"></a> 人</h2><ol><li>什么是人机交互中的人？<ol><li>用户 - 拥有一台笔记本电脑的人，一群一起或远程工作的人，一系列按顺序工作的人…</li><li>一个或多个试图使用计算技术完成工作的人</li><li><strong>用户只想看到它想要看到的</strong></li></ol></li></ol><h3 id="人的特性"><a class="markdownIt-Anchor" href="#人的特性"></a> 人的特性</h3><ol><li>短期记忆有限<ol><li>7±2原则</li><li>电脑可以存储知识</li></ol></li><li>人会犯错：避免，恢复，帮助</li><li>人是不同的：新手用户，知识渊博的间歇用户，专家频繁用户</li><li>人们有不同的互动偏好：有一些人喜欢照片，有一些人喜欢文本</li></ol><h3 id="你看到了什么"><a class="markdownIt-Anchor" href="#你看到了什么"></a> 你看到了什么</h3><p><img src="https://s2.loli.net/2022/04/25/KUpYrWkdMcJI1g5.png" alt="" /></p><ol><li>用户答案<ol><li>成绩</li><li>统计</li></ol></li><li>技术答案<ol><li>2维画面</li><li>可控的组件<ol><li>文本和图片</li><li>图标和工具栏</li><li>可扩展栏和菜单栏</li><li>任务栏和状态信息</li><li>控制器和指针</li><li>颜色集合</li></ol></li><li>文档的代表</li><li>软件功能的代表</li></ol></li><li>进行人机交互设计师，一定要谨记从用户的角度来进行学习和分析</li></ol><h3 id="精神模型-重要"><a class="markdownIt-Anchor" href="#精神模型-重要"></a> 精神模型 重要</h3><ol><li>尝试发现用户对程序帮助他们执行任务的心理模型</li><li>如何？请注意模型的固有隐喻，它们代表任务的概念性组成部分</li><li>隐喻:左上角的开关就应该是控制左上角的灯</li><li><strong>精神模型</strong>就是用户进行人机交互时头脑中的任务模型。依据精神模型可以进行<strong>隐喻</strong>(Metaphor)设计：<ol><li>隐喻又被称为视觉隐喻，是视觉上的图像，但会被用户映射为业务事物。用户在识别图像时，会依据隐喻将控件功能与已知的熟悉事物联系起来，形成任务模型；</li><li>隐喻本质上是在用户已有知识的基础上建立一组新的知识，实现界面视觉提示和系统功能之间的知觉联系。</li></ol></li><li>进行人机交互设计时，要调查用户的目标和任务，分析用户的任务模型，并且据此设计界面隐喻。</li></ol><p><img src="https://s2.loli.net/2022/04/25/oyGPgvd8rWcfap1.png" alt="" /></p><h3 id="发现精神模型"><a class="markdownIt-Anchor" href="#发现精神模型"></a> 发现精神模型</h3><ol><li>发现用户的精神模型<ol><li>找到用户在尝试去做什么！目标！</li><li>用户，目标，结果任务的需求</li><li>仅在确定有助于解决任务的功能时才应添加功能:诱惑：如果添加附加功能很便宜，那么通常要这样做-这会严重损害用户界面的概念！</li><li>与用户个人资料相关的任务的频率</li></ol></li></ol><h3 id="差异性"><a class="markdownIt-Anchor" href="#差异性"></a> 差异性</h3><ol><li>新手用户<ol><li>是对业务不熟悉的⼈</li><li>例如新员工或者新接触系统的⼈。为新手用户设计系统时要关注易学性，进⾏业务导航，尽量避免出错。如果⼀个系统的⼤多数⽤户都是新手用户，整个系统的⼈机交互设计都要侧重<strong>易学性</strong>。</li></ol></li><li>专家用户<ol><li>是能够熟练操作计算机完成业务任务的⼈，⼀般都是⻓时间使⽤软件系统并且计算机操作技能熟练的人。</li><li>为专家用户设计系统时，要关注效率。如果⼀个系统的大多数用户都是专家⽤户，整个系统的⼈机交互设计都要侧重效率。</li></ol></li><li>熟练用户：是介于新手用户和专家用户之间的⼈。为熟练用户设计⼈机交互系统要在易学性和效率之间进行折中。</li><li>好的人机交互应该为不同的用户群体提供差异化的交互机制。<ol><li>既为新⼿用户提供易学性高的⼈机交互机制(图形界面)</li><li>⼜为专家用户提供效率高的⼈机交互机制(命令行、快捷方式、热键)</li></ol></li></ol><h1 id="人机交互设计中的计算机的因素"><a class="markdownIt-Anchor" href="#人机交互设计中的计算机的因素"></a> 人机交互设计中的计算机的因素</h1><h2 id="计算机设备"><a class="markdownIt-Anchor" href="#计算机设备"></a> 计算机设备</h2><ol><li>⼈机交互设备<ol><li>输入设备<ol><li>键盘</li><li>鼠标</li><li>⼿写板</li></ol></li><li>输出设备<ol><li>显示屏</li><li>喇叭</li><li>打印机</li></ol></li></ol></li></ol><h2 id="可视化设计"><a class="markdownIt-Anchor" href="#可视化设计"></a> 可视化设计</h2><ol><li>从可视化设计语言Visual Basic开始，对可视化构件的布局就成为可视化设计的主要⼯作。</li><li>常⻅的可视化构件包括：窗⼝、菜单、标签(Tab)、表单、按钮、列表、树形控件、组合框、输⼊框等等，[Cooper2007]对此有详细的描述。</li><li>要点:<ol><li>按照任务模型设计界⾯隐喻，同时不要把软件系统的<strong>内部构造机制</strong>暴露给⽤户</li><li>可视化设计还应该基于界面隐喻，尽可能地把功能和任务细节表现出来</li></ol></li></ol><h2 id="不要暴露内部结构"><a class="markdownIt-Anchor" href="#不要暴露内部结构"></a> 不要暴露内部结构</h2><p><img src="https://s2.loli.net/2022/04/25/AXR9OJvHNfpi5nM.png" alt="" /></p><ol><li>最初的压缩软件:只有这3个功能，很明白地全部显示了出来</li><li>现在的压缩软件:停到特定的文件的时候给出拉出菜单</li><li>功能和场景结合起来，而不是完全要全新选择，避免用户做出不当的行为</li></ol><h2 id="展示细节"><a class="markdownIt-Anchor" href="#展示细节"></a> 展示细节</h2><p><img src="https://s2.loli.net/2022/04/25/TNOjnha5M9qKQGe.png" alt="" /></p><ol><li>左侧选择字体没有更加细节的展示，而右侧则展示了其中的细节问题</li></ol><h2 id="常见界面类型"><a class="markdownIt-Anchor" href="#常见界面类型"></a> 常见界面类型</h2><p><img src="https://s2.loli.net/2022/04/25/WOhAxr6aKM3wlX9.png" alt="" /></p><h2 id="交互"><a class="markdownIt-Anchor" href="#交互"></a> 交互</h2><ol><li>&quot;交互&quot;是双向的：<ol><li>⼀⽅⾯⽤户主动向软件系统提出请求(输⼊信息)，软件系统给予⽤户响应(输出信息)；</li><li>另⼀⽅⾯，软件系统也应该主动告知⽤户相应的信息，并等待⽤户的响应。</li></ol></li></ol><h3 id="交互方式"><a class="markdownIt-Anchor" href="#交互方式"></a> 交互方式</h3><ol><li>直接操作(图形)：视窗图标</li><li>菜单选择</li><li>表单输入</li><li>命令语言</li><li>自然语言</li></ol><h3 id="直接操作"><a class="markdownIt-Anchor" href="#直接操作"></a> 直接操作</h3><p><img src="https://s2.loli.net/2022/04/25/NC85HeGz6Ynp3ro.png" alt="" /></p><ol><li>优点<ol><li>用户感到可以控制计算机，而不会被计算机吓倒。</li><li>用户学习时间相对较短。</li><li>用户会立即收到有关其操作的反馈。错误经常可以被发现并迅速纠正。</li></ol></li><li>问题<ol><li>如何得出适当的信息模型和隐喻？</li><li>鉴于用户拥有很大的信息空间，他们如何在该空间中导航并始终了解其当前位置</li><li>接口通常很复杂。</li></ol></li></ol><h3 id="菜单系统"><a class="markdownIt-Anchor" href="#菜单系统"></a> 菜单系统</h3><ol><li>下拉式菜单<ol><li>可预测的，但需要更多的屏幕空间</li><li>显示菜单标题。</li><li>用户可以通过此菜单选择命令。</li></ol></li><li>弹出式菜单<ol><li>灵活，量身定制，可能会引起用户惊讶</li><li>它们与实体(例如字段)相关联。</li></ol></li><li>优点<ol><li>用户不需要知道命令名称。</li><li>打字非常少。</li><li>可以避免一些用户错误。</li><li>可以提供上下文相关的帮助。</li></ol></li><li>缺点<ol><li>涉及逻辑结合(和)的动作：或析取(或)难以代表</li><li>注意大型菜单的结构。以下是解决方案<ol><li>滚动菜单</li><li>层级菜单</li><li>步行菜单</li><li>相关的控制面板</li></ol></li></ol></li></ol><h3 id="表单接口"><a class="markdownIt-Anchor" href="#表单接口"></a> 表单接口</h3><p><img src="https://s2.loli.net/2022/04/25/AVPIZ1dyou9BTlb.png" alt="" /></p><ol><li>优点：用于结构化数据表示和填充</li><li>缺点：仅仅是用于结构化数据表示和填充</li></ol><h3 id="命令行模式"><a class="markdownIt-Anchor" href="#命令行模式"></a> 命令行模式</h3><ol><li>优点<ol><li>由于语言处理，实现起来很简单。</li><li>它可以通过许多命令支持非常复杂的系统。</li><li>用户界面需要一些技巧。</li><li>打字非常少。</li><li>可以避免一些用户错误。</li><li>可以提供上下文相关的帮助。</li></ol></li><li>缺点：<ol><li>用户必须学习并记住所有命令。</li><li>难以学习的系统，操作起来不容易。</li><li>用户不可避免地会犯错误</li></ol></li></ol><h3 id="自然语言模式"><a class="markdownIt-Anchor" href="#自然语言模式"></a> 自然语言模式</h3><ol><li>用户以自然语言键入命令。通常，词汇量是有限的，并且这些系统仅限于特定的应用领域(例如，时间表查询)</li><li>NL处理技术现在已经足够好，可以使这些接口对休闲用户有效，但是有经验的用户发现他们需要太多的输入</li><li>往往结合机器学习中的NLP技术</li></ol><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p><img src="https://s2.loli.net/2022/04/25/FLBgZdy4x3Dr5Un.png" alt="" /></p><h1 id="人机设计的交互性"><a class="markdownIt-Anchor" href="#人机设计的交互性"></a> 人机设计的交互性</h1><h2 id="导航-重要"><a class="markdownIt-Anchor" href="#导航-重要"></a> 导航 重要</h2><ol><li>好的人机交互设计就像⼀个服务周到的推销员，能够主动将自己的产品和服务简明扼要地告诉⽤户，这个就是导航。</li><li>好的导航就像⼀个好的餐厅菜单，餐厅菜单能够帮助顾客快速地找到喜欢的⻝物，软件系统导航也要能帮助⽤户找到任务的⼊⼝。</li><li>导航的⽬的就是为⽤户提供⼀个很好的完成任务的⼊⼝，好的导航会让这个⼊⼝⾮常符合⼈的精神模型。</li><li>全局结构按照任务模型将软件产品的功能组织起来，并区分不同的重要性和主题提供给 不同的⽤户。<ol><li>全局结构常⽤的导航控件包括<strong>窗口、菜单、列表、快捷方法、热键</strong>等等。</li><li>全局结构的设计主要以功能分层和任务交互过程为主要依据。</li></ol></li><li>局部结构通过安排界面布局细节，制造<strong>视觉上的线索</strong>来给⽤户提供导航。<ol><li>局部结构常用的导航控件包括可视化控件布局与组合、按钮设置、文本颜色或字体大小等等。</li></ol></li><li>局部结构的设计主要以⽤户关注的任务细节为主要依据。</li></ol><p><img src="https://s2.loli.net/2022/04/25/FX6TRxrcp4CzG8g.png" alt="" /></p><blockquote><p>标注部分详见课本189页</p></blockquote><h2 id="反馈-重要"><a class="markdownIt-Anchor" href="#反馈-重要"></a> 反馈 重要</h2><p><img src="https://s2.loli.net/2022/04/25/1CyTLBlzGKMN5wm.png" alt="" /></p><ol><li>一定要有反馈，避免进行错误的操作</li><li>⽤户喜欢较短的响应时间；</li><li>较⻓的响应时间(&gt;15秒)具有破坏性；</li><li>⽤户会根据响应时间的变化调整⾃⼰的⼯作⽅式；</li><li>较短的响应时间导致了较短的⽤户思考时间；</li><li>较快的节奏可能会提⾼效率，但也会增加出错率；</li><li>根据任务选择适当的响应时间：<ol><li>打字、光标移动、⿏标定位：50～150毫秒</li><li>简单频繁的任务：1秒</li><li>普通的任务：2～4秒</li><li>复杂的任务：8～12秒</li></ol></li><li>响应时间适度的变化是可接受的；</li><li>意外延迟可能具有破坏性；</li><li><strong>经验测试</strong>有助于设置适当的响应时间。</li></ol><h2 id="协作式设计-重要"><a class="markdownIt-Anchor" href="#协作式设计-重要"></a> 协作式设计 重要</h2><ol><li>⼈和计算机是⼈机交互的方法，其中⼈的因素是⽐较固定的，一定时期内不会发⽣⼤的变化，所以要让二者交互顺畅，就需要让计算机更多地适应⼈的因素，这也是⼈机交互设计以⽤户为中⼼的根本原因。</li><li>这种调整计算机因素以更好地适应并帮助⽤户的设计⽅式被称为协作式设计</li></ol><h1 id="一些人机交互设计原则-重要至少记住5条以上"><a class="markdownIt-Anchor" href="#一些人机交互设计原则-重要至少记住5条以上"></a> 一些人机交互设计原则 重要(至少记住5条以上)</h1><h2 id="简洁设计72原则"><a class="markdownIt-Anchor" href="#简洁设计72原则"></a> 简洁设计(7±2原则)</h2><p><img src="https://s2.loli.net/2022/04/25/lxMXeU1ysiDto29.png" alt="" /></p><ol><li>人类的信息处理能力是受限的，一般满足7±2原则</li></ol><h2 id="一致性设计"><a class="markdownIt-Anchor" href="#一致性设计"></a> 一致性设计</h2><ol><li>用户在使用软件系统时，会为软件系统建立精神模型。</li><li>以下是一个不一致性设计的例子。</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt11/13.png" alt="" /></p><h2 id="低出错率设计"><a class="markdownIt-Anchor" href="#低出错率设计"></a> 低出错率设计</h2><ol><li>人机交互设计首先要帮助人们避免犯错，尽可能设计不让⽤户犯严重错误的系统<ol><li>具体措施包括将不适当的菜单选项功能以灰色显示屏蔽</li><li>禁⽌在数值输入域中出现字母字符</li></ol></li><li>当错误出现时，系统还要在⼈机交互中提供简洁、有建设性、具体的指导来帮助⽤户消除错误：填写表单时如果使用输⼊了无效的编码，那么系统应该引导他们对此进行修改，⽽不是要求⽤户重新填写整个表单。</li><li>出错信息应当遵循以下四个简单原则[Shneiderman1982]：<ol><li>应当使用清晰的语言来表达，而不要使用难懂的代码；</li><li>使⽤的语言应当精炼准确，而不是空泛、模糊的；</li><li>应当对用户解决问题提供建设性的帮助；</li><li>出错信息应当友好，不要<strong>威胁或责备</strong>使用。</li></ol></li><li>系统还应该提供错误恢复和故障解决帮助⼿册。</li><li>应当尽快的进行校验(检查用户名重复)</li></ol><h2 id="易记性设计"><a class="markdownIt-Anchor" href="#易记性设计"></a> 易记性设计</h2><p><img src="https://s2.loli.net/2022/04/25/x1vfliI5rq2wa9n.png" alt="" /></p><ol><li>减少短期记忆的负担</li><li>使用逐层递进的方式展示信息</li><li>使用直观的快捷方式</li><li>设置有意义的默认值</li></ol><h2 id="可视化设计要点"><a class="markdownIt-Anchor" href="#可视化设计要点"></a> 可视化设计要点</h2><ol><li>按照任务模型设计界面隐喻，同时不要把软件系统的内部构造机制暴露给用户</li><li>可视化设计还应该基于界面隐喻，尽可能地把功能和任务细节表现出来。</li></ol><h1 id="人机交互设计过程"><a class="markdownIt-Anchor" href="#人机交互设计过程"></a> 人机交互设计过程</h1><h2 id="人机交互设计过程-2"><a class="markdownIt-Anchor" href="#人机交互设计过程-2"></a> ⼈机交互设计过程</h2><p><img src="https://s2.loli.net/2022/04/25/rITbXfhEUQMzejw.png" alt="" /></p><ol><li>导航设计:建立多次交互之间的逻辑衔接结构</li><li>页面设计:设计交互中的具体界面的细节</li><li>页面原型化:使用界面原型工具</li><li>页面的评估与修改:用户进行评估</li></ol><h2 id="对话结构图"><a class="markdownIt-Anchor" href="#对话结构图"></a> 对话结构图</h2><p><img src="https://s2.loli.net/2022/04/25/S1g745KfXiLMD6k.png" alt="" /></p><h2 id="页面设计"><a class="markdownIt-Anchor" href="#页面设计"></a> 页面设计</h2><p><img src="https://s2.loli.net/2022/04/25/TCPonOhisL8bWjw.png" alt="" /></p><h2 id="原型化界面"><a class="markdownIt-Anchor" href="#原型化界面"></a> 原型化界面</h2><p><img src="https://s2.loli.net/2022/04/25/8PEwkjDU6NlqJao.png" alt="" /></p><h1 id="gui设计"><a class="markdownIt-Anchor" href="#gui设计"></a> GUI设计</h1><ol><li>关键点</li><li>常见的GUI元素</li><li>设计你的GUI</li><li>创建你的GUI</li><li>保证实用性</li><li>保证可行性</li></ol><h2 id="在建立有效的gui方面的关键点"><a class="markdownIt-Anchor" href="#在建立有效的gui方面的关键点"></a> 在建立有效的GUI方面的关键点</h2><ol><li>在所有阶段吸引用户</li><li>去看看别人怎么做的</li><li>知道并且在你知道的限制内工作完成</li><li>保证你的GUI是可以使用的并且可行的</li></ol><h2 id="常见的gui元素"><a class="markdownIt-Anchor" href="#常见的gui元素"></a> 常见的GUI元素</h2><ol><li>介绍和支持信息</li><li>获取内容的设施</li><li>主要收藏内容</li><li>扩展特点</li></ol><h3 id="欢迎和支持信息"><a class="markdownIt-Anchor" href="#欢迎和支持信息"></a> 欢迎和支持信息</h3><ol><li>欢迎：通常情况下，彩色的&quot;初始&quot;页面反映了馆藏的某些内容</li><li>收藏的相关信息：谁生产的，它的范围，有时是它的制造方式</li><li>帮助信息：如何使用资源</li><li>联系信息：如何与负责资源的人取得联系</li><li>权利信息或使用条款：有关所有权，版权和用户义务的信息</li></ol><h2 id="查找内容的设施"><a class="markdownIt-Anchor" href="#查找内容的设施"></a> 查找内容的设施</h2><ol><li>浏览信息的方式：用户可以通过单击超链接在集合中导航</li><li>查找信息的方式：用户可以在其中输入搜索查询并查看结果</li></ol><h2 id="主要收藏内容"><a class="markdownIt-Anchor" href="#主要收藏内容"></a> 主要收藏内容</h2><ol><li>总结页：提供浏览或搜索结果的概述，通常带有缩略图</li><li>细节页：具有屏幕大小的图像，视频或音频播放器以及完整的元数据</li></ol><h2 id="扩展功能"><a class="markdownIt-Anchor" href="#扩展功能"></a> 扩展功能</h2><ol><li>能够查看更大尺寸的数字图像：通常通过缩放</li><li>可以观看不同尺寸的视频流：取决于网络带宽</li><li>选择下载文件：到本地硬盘以供以后使用</li><li>嵌入文件的选项：用户将数字视频剪辑嵌入到另一个在线环境中</li><li>能够&quot;标记&quot;文件以供以后参考：通常称为&quot;相册&quot;或&quot;收藏夹&quot;</li><li>能够对图像，视频或音频文件进行注释或评论：供个人使用或公开展示的标签</li></ol><h2 id="规划您的gui"><a class="markdownIt-Anchor" href="#规划您的gui"></a> 规划您的GUI</h2><ol><li>您的用户GUI是首先要考虑的事情-不是最后一件！</li><li>让您的用户参与其GUI的设计</li><li>找出别人做了什么或正在做什么</li></ol><h2 id="建立您的gui"><a class="markdownIt-Anchor" href="#建立您的gui"></a> 建立您的GUI</h2><ol><li>使用&quot;货架&quot;解决方案</li><li>自己动手GUI</li><li>组合解决方案</li></ol><h2 id="检查列表"><a class="markdownIt-Anchor" href="#检查列表"></a> 检查列表</h2><h3 id="数据输入界面"><a class="markdownIt-Anchor" href="#数据输入界面"></a> 数据输入界面</h3><ol><li>您是否可以自定义数据输入界面以改善您的编目工作流(例如，重命名或重新排序字段，设置模板或下拉列表，从不使用的字段中删除)？</li><li>还有其他功能可以提高生产力或准确性吗(例如键盘快捷键，制表键，自动单词补全，拼写检查，数据验证)？</li><li>可以放大字体或更改颜色组合吗？</li></ol><h3 id="可定制的视觉设计"><a class="markdownIt-Anchor" href="#可定制的视觉设计"></a> 可定制的视觉设计</h3><ol><li>您可以添加自己的图形和文本以使其外观和感觉与网站的其余部分一样吗？</li><li>它在不同的Web浏览器和操作系统上是否都能正常工作并且看起来不错？</li></ol><h3 id="搜索和检索界面"><a class="markdownIt-Anchor" href="#搜索和检索界面"></a> 搜索和检索界面</h3><ol><li>您可以自定义搜索或浏览界面以更好地适合您的用户和收藏吗？</li><li>有高级搜索选项吗？</li><li>搜索结果显示良好吗？</li></ol><h3 id="附加的用户功能"><a class="markdownIt-Anchor" href="#附加的用户功能"></a> 附加的用户功能</h3><ol><li>一些系统具有额外的功能，例如使用户能够收集和注释自己的选择，对项目进行分组的能力等。</li></ol><h3 id="控制用户访问"><a class="markdownIt-Anchor" href="#控制用户访问"></a> 控制用户访问</h3><ol><li>您可以将集合的一部分限制为特定用户或用户组吗？</li><li>您能否根据用户提供不同的功能或功能级别或详细信息？</li><li>是否有数字版权管理(DRM)功能，例如自动水印？</li></ol><h3 id="与其他集合的互操作性"><a class="markdownIt-Anchor" href="#与其他集合的互操作性"></a> 与其他集合的互操作性</h3><ol><li>是否支持链接内容和元数据？</li><li>用户可以搜索集合吗？</li></ol><h2 id="确保可用性"><a class="markdownIt-Anchor" href="#确保可用性"></a> 确保可用性</h2><ol><li>ISO 9241：视觉显示终端(VDT)的人机工程学要求，特别是第11部分：可用性指南(1998)</li><li>ISO 13407：以人为本的交互式系统设计过程(1999年)</li></ol><h2 id="评估您的gui"><a class="markdownIt-Anchor" href="#评估您的gui"></a> 评估您的GUI</h2><ol><li><strong>实际用户的可用性测试</strong>。 向典型用户提供一些任务以执行并记录他们的工作以及对资源的看法。 这可能涉及观察用户的行为并记下他们的导航方式。</li><li>您或者专家的可用性评估。 他们可能会使用正式的准则，清单或问题(例如&quot;可用性检查&quot;或&quot;启发式评估&quot;)，也可能会涉及扮演特定用户类型的角色(“认知演练”)。</li><li>收集用户反馈。这些方法涉及在用户使用资源后寻求用户的反馈。常见且简便的方法是<strong>调查用户</strong>，但<strong>访谈和焦点</strong>小组可能会提供更丰富的信息。</li><li>使用情况记录。许多有用的信息由用于传递资源的服务器或软件自动记录。通过分析用户访问了哪些页面以及他们的搜索成功程度，可以构建资源可用性的图景。</li></ol><h2 id="为可用性而设计"><a class="markdownIt-Anchor" href="#为可用性而设计"></a> 为可用性而设计</h2><ol><li>看竞争对手的设计。让一些典型的最终用户评估与您正在开发的资源相似的资源；并告诉您他们对他们的喜好。</li><li>卡分类和标签。要求用户以最有意义的方式组织和标记您的内容和界面。不同的用户会提出不同的解决方案，但是这种方法可能会提供一些有用且令人惊讶的想法。</li><li>原型。要求用户评估资源的模型和模型。 这些可以在纸上或屏幕上创建，并且可以包括真实内容或虚拟内容。</li></ol><h2 id="开发高质量和可用接口的过程iso-13407"><a class="markdownIt-Anchor" href="#开发高质量和可用接口的过程iso-13407"></a> 开发高质量和可用接口的过程(ISO 13407)</h2><ol><li>指定使用环境。了解谁将使用资源以及他们将如何使用它(例如，他们将使用哪个浏览器访问资源？)。</li><li>指定用户和组织要求。列出必须支持的任务(例如，搜索视频)以及一些可衡量的目标，以了解如何有效，有效和令人满意地执行这些任务(例如，&quot;在70％的搜索中找到视频，两次单击即可获得90％的满意度 &quot;)。</li><li>产生设计解决方案。设计资源以满足第2步中确定的要求。</li><li>根据用户要求评估设计。检查开发是否确实符合您在先前步骤中确定的要求和目标。</li></ol><h2 id="确保可访问性"><a class="markdownIt-Anchor" href="#确保可访问性"></a> 确保可访问性</h2><ol><li>考虑无障碍性的法律义务</li><li>无障碍不仅是残疾人的问题</li><li>努力做到灵活</li><li>开发在线收藏时要考虑的一些事情</li></ol><h2 id="开发在线收藏夹时要考虑的一些事情"><a class="markdownIt-Anchor" href="#开发在线收藏夹时要考虑的一些事情"></a> 开发在线收藏夹时要考虑的一些事情</h2><h3 id="接口"><a class="markdownIt-Anchor" href="#接口"></a> 接口</h3><ol><li>可以通过各种设备和浏览器访问该界面吗？</li><li>用户是否可以更改颜色和字体大小？</li><li>是否使用样式表来格式化资源(而不是框架，表格或图形)？所有说明都写清楚吗？</li><li>文字信息是否以文字形式显示(而不只是文字图片)？</li></ol><h3 id="导航"><a class="markdownIt-Anchor" href="#导航"></a> 导航</h3><ol><li>是否总是清楚您在哪里以及可以去哪里？</li><li>是否清楚地标识了超链接并以文本形式(而不是仅图形形式)提供超链接？</li><li>用户能否完全控制其导航和资源使用(例如，暂停任何视频或声音元素)？</li></ol><h3 id="搜索和检索"><a class="markdownIt-Anchor" href="#搜索和检索"></a> 搜索和检索。</h3><ol><li>用户可以通过键盘访问搜索表单(还是取决于鼠标)？</li><li>搜索和结果是否以HTML或XML(或嵌入到其他应用程序，如Flash或Java)中显示？</li></ol><h3 id="文件的尺寸和大小"><a class="markdownIt-Anchor" href="#文件的尺寸和大小"></a> 文件的尺寸和大小</h3><ol><li>是否有满足不同需求的图像/视频尺寸范围(尺寸和文件尺寸)？</li><li>当用户将要访问很大的文件时，用户是否知道？</li><li>是否可以详细查看图像(大图像，图像的放大部分或缩放功能)？</li></ol><h3 id="文件说明"><a class="markdownIt-Anchor" href="#文件说明"></a> 文件说明</h3><ol><li>是否有所有视觉资源的文字说明？</li><li>是否有音频和视频文件的抄录？</li><li>在书写页面已被数字化的情况下，是否存在可搜索的等效文本？</li></ol><h2 id="黄金法则"><a class="markdownIt-Anchor" href="#黄金法则"></a> 黄金法则</h2><ol><li>让用户掌控一切</li><li>减少用户的内存负载</li><li>始终如一</li></ol><h2 id="十条原则"><a class="markdownIt-Anchor" href="#十条原则"></a> 十条原则</h2><ol><li>紧凑而自然的对话</li><li>设计图和颜色</li><li>简约就足够了</li><li>使用用户语言</li><li>用户所需的最小内存</li><li>一致的</li><li>反馈</li><li>识别退出清除</li><li>捷径</li><li>良好的错误讯息</li><li>避免错误</li><li>帮助和文件</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;人机交互设计&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#人机交互设计&quot;&gt;&lt;/a&gt; 人机交互设计&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;What is HCI Design?
&lt;ul&gt;
&lt;li&gt;Objectives of HCI - Usabi</summary>
      
    
    
    
    <category term="软件工程" scheme="https://freeeeeeeeedom.gitee.io/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="软件工程与计算2" scheme="https://freeeeeeeeedom.gitee.io/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%972/"/>
    
    
    <category term="软件工程" scheme="https://freeeeeeeeedom.gitee.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>April 25th</title>
    <link href="https://freeeeeeeeedom.gitee.io/2022/04/25/April-25th/"/>
    <id>https://freeeeeeeeedom.gitee.io/2022/04/25/April-25th/</id>
    <published>2022-04-24T16:19:51.000Z</published>
    <updated>2022-04-25T05:48:47.297Z</updated>
    
    <content type="html"><![CDATA[<h1 id="to-do"><a class="markdownIt-Anchor" href="#to-do"></a> To Do</h1><ul><li><input type="checkbox" id="checkbox0" checked="true" /><label for="checkbox0">麦当当！！！</label></li><li><input type="checkbox" id="checkbox1" /><label for="checkbox1">数据库作业</label></li><li><input type="checkbox" id="checkbox2" checked="true" /><label for="checkbox2">Leetcode每日一题</label></li><li><input type="checkbox" id="checkbox3" /><label for="checkbox3">Leetcode</label></li><li><input type="checkbox" id="checkbox4" /><label for="checkbox4">计算机网络</label></li></ul><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;to-do&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#to-do&quot;&gt;&lt;/a&gt; To Do&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input type=&quot;checkbox&quot; id=&quot;checkbox0&quot; checked=&quot;true&quot; /&gt;&lt;l</summary>
      
    
    
    
    <category term="Everday" scheme="https://freeeeeeeeedom.gitee.io/categories/Everday/"/>
    
    <category term="2022_大二下" scheme="https://freeeeeeeeedom.gitee.io/categories/Everday/2022-%E5%A4%A7%E4%BA%8C%E4%B8%8B/"/>
    
    
    <category term="2022_Spring" scheme="https://freeeeeeeeedom.gitee.io/tags/2022-Spring/"/>
    
  </entry>
  
  <entry>
    <title>April 24th</title>
    <link href="https://freeeeeeeeedom.gitee.io/2022/04/24/April-24th/"/>
    <id>https://freeeeeeeeedom.gitee.io/2022/04/24/April-24th/</id>
    <published>2022-04-24T08:16:50.000Z</published>
    <updated>2022-04-24T15:38:08.391Z</updated>
    
    <content type="html"><![CDATA[<h1 id="to-do"><a class="markdownIt-Anchor" href="#to-do"></a> To Do</h1><ul><li><input type="checkbox" id="checkbox0" /><label for="checkbox0">CS144 lab2</label></li><li><input type="checkbox" id="checkbox1" checked="true" /><label for="checkbox1">Leetcode *3</label></li><li><input type="checkbox" id="checkbox2" checked="true" /><label for="checkbox2">Leetcode 每日一题</label></li><li><input type="checkbox" id="checkbox3" /><label for="checkbox3">微信小程序</label></li><li><input type="checkbox" id="checkbox4" /><label for="checkbox4">计网实验</label></li><li><input type="checkbox" id="checkbox5" checked="true" /><label for="checkbox5">核酸</label></li></ul><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;to-do&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#to-do&quot;&gt;&lt;/a&gt; To Do&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input type=&quot;checkbox&quot; id=&quot;checkbox0&quot; /&gt;&lt;label for=&quot;check</summary>
      
    
    
    
    <category term="Everday" scheme="https://freeeeeeeeedom.gitee.io/categories/Everday/"/>
    
    <category term="2022_大二下" scheme="https://freeeeeeeeedom.gitee.io/categories/Everday/2022-%E5%A4%A7%E4%BA%8C%E4%B8%8B/"/>
    
    
    <category term="2022_Spring" scheme="https://freeeeeeeeedom.gitee.io/tags/2022-Spring/"/>
    
  </entry>
  
  <entry>
    <title>April 23th</title>
    <link href="https://freeeeeeeeedom.gitee.io/2022/04/24/April-23th/"/>
    <id>https://freeeeeeeeedom.gitee.io/2022/04/24/April-23th/</id>
    <published>2022-04-24T08:16:37.000Z</published>
    <updated>2022-04-24T08:17:53.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="to-do"><a class="markdownIt-Anchor" href="#to-do"></a> To Do</h1><ul><li><input type="checkbox" id="checkbox0" /><label for="checkbox0">CS144 lab2</label></li><li><input type="checkbox" id="checkbox1" /><label for="checkbox1">Leetcode *3</label></li><li><input type="checkbox" id="checkbox2" checked="true" /><label for="checkbox2">Leetcode 每日一题</label></li><li><input type="checkbox" id="checkbox3" /><label for="checkbox3">微信小程序（add page of categories）</label></li><li><input type="checkbox" id="checkbox4" /><label for="checkbox4">计网实验</label></li></ul><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>麻了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;to-do&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#to-do&quot;&gt;&lt;/a&gt; To Do&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input type=&quot;checkbox&quot; id=&quot;checkbox0&quot; /&gt;&lt;label for=&quot;check</summary>
      
    
    
    
    <category term="Everday" scheme="https://freeeeeeeeedom.gitee.io/categories/Everday/"/>
    
    <category term="2022_大二下" scheme="https://freeeeeeeeedom.gitee.io/categories/Everday/2022-%E5%A4%A7%E4%BA%8C%E4%B8%8B/"/>
    
    
    <category term="2022_Spring" scheme="https://freeeeeeeeedom.gitee.io/tags/2022-Spring/"/>
    
  </entry>
  
</feed>
