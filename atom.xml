<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>投降输一半</title>
  
  <subtitle>BLOG</subtitle>
  <link href="http://little-hurui.cloud/atom.xml" rel="self"/>
  
  <link href="http://little-hurui.cloud/"/>
  <updated>2022-05-27T11:11:49.046Z</updated>
  <id>http://little-hurui.cloud/</id>
  
  <author>
    <name>胡小小小小睿</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Routing and Routers</title>
    <link href="http://little-hurui.cloud/2022/05/27/Routing-and-Routers/"/>
    <id>http://little-hurui.cloud/2022/05/27/Routing-and-Routers/</id>
    <published>2022-05-27T10:59:35.000Z</published>
    <updated>2022-05-27T11:11:49.046Z</updated>
    
    <content type="html"><![CDATA[<h1 id="路由器基础"><a class="markdownIt-Anchor" href="#路由器基础"></a> 路由器基础</h1><h2 id="路由器的内部组件"><a class="markdownIt-Anchor" href="#路由器的内部组件"></a> 路由器的内部组件</h2><p><img src="https://s2.loli.net/2022/05/27/a4rPZNuK7M9pAdT.png" alt="" /></p><ul><li>特殊组件的计算机</li><li>console口进行具体的调试</li><li>辅助口(Auxiliary):一般不用，但是可能会用到</li></ul><h3 id="随机存取存储器ram-random-access-memory"><a class="markdownIt-Anchor" href="#随机存取存储器ram-random-access-memory"></a> 随机存取存储器(RAM, Random Access Memory)</h3><ol><li>路由器配置文件的临时存储，一般做为内存使用</li><li>断电或重新启动时RAM内容丢失</li><li>存储:<ol><li>路由表</li><li>ARP缓存</li><li>快速切换缓存</li><li>报文缓存:可能前面有正在处理的，需要等待</li><li>数据包保留队列</li></ol></li><li>根据地址位就可以读到地址内容(访问比较快)</li></ol><h3 id="非易失随机存取存储器nvram-non-volatile-ram"><a class="markdownIt-Anchor" href="#非易失随机存取存储器nvram-non-volatile-ram"></a> 非易失随机存取存储器(NVRAM, Non-volatile RAM)</h3><ol><li>存储备份(backup)/启动(startup)配置文件</li><li>路由器掉电或重启时内容不会丢失。</li><li>内置电池的方式来保证不断电，这一部分可以整体单独拿出来</li><li>保证快速访问，但是存储空间有限</li></ol><h3 id="flash-相当于台式机硬盘"><a class="markdownIt-Anchor" href="#flash-相当于台式机硬盘"></a> Flash (相当于台式机硬盘)</h3><ol><li>电子可擦可编程只读存储器(EEPROM, Electronically Erasable Programmable Read-Only Memory)</li><li>存储了Cisco IOS(互联网操作系统)</li><li>允许更新软件而无需更换闪存芯片</li><li>可以存储多个版本的IOS</li><li>断电保持</li></ol><h3 id="只读存储器rom-read-only-memory"><a class="markdownIt-Anchor" href="#只读存储器rom-read-only-memory"></a> 只读存储器(ROM, Read-Only Memory)</h3><ol><li>包含POST(开机自检):PC也有，开机的时候，读取一些参数进行对比，如果一样则保证硬件是正常的。</li><li>引导程序(加载Cisco IOS)</li><li>作系统软件<ol><li>IOS的备份，精简(trimmed down)版本</li><li>升级需要安装新的芯片组</li></ol></li></ol><h2 id="接口"><a class="markdownIt-Anchor" href="#接口"></a> 接口</h2><ol><li>数据包通过其进入和离开路由器的网络连接口</li><li>附在主板(motherboard)上或作为单独的模块。</li><li>大部分是网口，主要是用来支持网络的</li><li>0/0第一个，串口接口可能还分多个</li><li><img src="https://s2.loli.net/2022/05/27/RlkC5qFG6wtQ4jp.png" alt="" /></li></ol><h1 id="路由器启动startup步骤"><a class="markdownIt-Anchor" href="#路由器启动startup步骤"></a> 路由器启动(startup)步骤</h1><h2 id="系统启动程序"><a class="markdownIt-Anchor" href="#系统启动程序"></a> 系统启动程序</h2><ol><li>执行开机自检(POST)：在此自检期间，路由器从所有硬件模块上的ROM执行诊断：如果有问题导致操作系统无法重启，那么我们就需要对硬件进行检查</li><li>验证CPU，内存和网络接口端口的基本操作。</li><li>软件初始化。</li></ol><p><img src="https://s2.loli.net/2022/05/27/RlkC5qFG6wtQ4jp.png" alt="" /></p><h2 id="软件启动程序"><a class="markdownIt-Anchor" href="#软件启动程序"></a> 软件启动程序</h2><ol><li><p>步骤1:ROM中的通用引导加载程序(bootstrap)在CPU卡上执行。</p></li><li><p>步骤2:可以在以下几个位置之一找到操作系统(Cisco IOS)。该位置在配置寄存器的引导字段中公开。</p></li><li><p>步骤3:加载操作系统映像。</p><ol><li>先从Flash找，也就只有一个image文件，将image导入内存</li><li>如果image找不到，则到TFTP Server，如果能找到则下载下拉一个image</li><li>如果TFTP也没有配置，则去ROM中导出IOS</li></ol></li><li><p>步骤4:将保存在NVRAM中的</p><p>配置文件</p><p>加载到主存储器中，并一次执行一行。</p><ol><li>先看NVRAM中有没有配置(start.config)</li><li>然后看TFTP Server有没有配置，如果有则下载一个</li><li>如果都没有，用console进行配置</li></ol></li><li><p>步骤5-如果NVRAM中<strong>没有</strong>有效的配置文件，则执行问题驱动(question-driven)的初始配置例程，该例程称为系统配置对话框，也称为<strong>设置模式</strong>。</p></li></ol><h2 id="路由器初始化过程"><a class="markdownIt-Anchor" href="#路由器初始化过程"></a> 路由器初始化过程</h2><ol><li>设置不用作在路由器中输入复杂协议功能的模式。</li><li>对于大多数路由器配置任务，应使用安装程序提出最少的配置，然后使用各种configuration mode命令而非安装程序</li></ol><p><img src="https://s2.loli.net/2022/05/27/RlkC5qFG6wtQ4jp.png" alt="" />]<br /><img src="https://s2.loli.net/2022/05/27/RlkC5qFG6wtQ4jp.png" alt="" />]</p><h2 id="查看和修改基本的路由器配置"><a class="markdownIt-Anchor" href="#查看和修改基本的路由器配置"></a> 查看和修改基本的路由器配置</h2><p><img src="https://s2.loli.net/2022/05/27/RlkC5qFG6wtQ4jp.png" alt="img" /></p><ol><li>其他更加具体命令内容，可以在命令行下使用<code>?</code>来看</li><li><code>config</code>模式是全局配置。</li><li>banner:配置登录提示文字:一般会写路由器是谁用的，干什么用的，谁登录是非法的。</li><li><code>show version</code>命令可以查看到路由器的配置信息。</li></ol><h2 id="执行基本的编址方案"><a class="markdownIt-Anchor" href="#执行基本的编址方案"></a> 执行基本的编址方案</h2><p><img src="https://s2.loli.net/2022/05/27/RlkC5qFG6wtQ4jp.png" alt="" /></p><ol><li>配置接口，每一个接口可以配置一个描述</li><li>no shutdown:启动端口</li><li>可以拷贝配置情况进入startup中</li></ol><h1 id="路由和配置"><a class="markdownIt-Anchor" href="#路由和配置"></a> 路由和配置</h1><h2 id="使用网络寻址进行路由"><a class="markdownIt-Anchor" href="#使用网络寻址进行路由"></a> 使用网络寻址进行路由</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/7.png" alt="" /></p><ol><li>路由器通常使用两个基本功能(路径确定功能和交换功能)将数据包从一条数据链路中继(relay)到另一条数据链路。<ol><li><strong>交换功能</strong>允许路由器在一个接口上<strong>接受数据包</strong>并<strong>通过第二个接口转发。</strong></li><li><strong>路径确定</strong>功能使路由器能够选择<strong>最合适的接口</strong>来<strong>转发数据包</strong>。</li></ol></li><li>路由器使用地址的网络部分进行路径选择，以将数据包传递到下一个路由器</li><li>地址的节点部分由直接连接到目标网络的路由器使用，以将数据包传递到正确的主机。</li></ol><h2 id="静态和动态路由"><a class="markdownIt-Anchor" href="#静态和动态路由"></a> 静态和动态路由</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/10.png" alt="" /></p><h3 id="静态路由"><a class="markdownIt-Anchor" href="#静态路由"></a> 静态路由</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/11.png" alt="" /></p><ol><li>尽管(whereas)动态路由倾向于显示(reveal)有关互联网络的所有已知信息，但是出于安全原因，您可能希望隐藏互联网络的某些部分。</li><li>当只有一条路径可访问网络时，到网络的静态路由就足够了。(默认路由，将B所有不知道位置的全部交给A，由A去进行访问)</li><li>这种分区称为末节网络(Stub Network)</li></ol><h3 id="静态路由配置"><a class="markdownIt-Anchor" href="#静态路由配置"></a> 静态路由配置</h3><p><img src="https://s2.loli.net/2022/05/27/AaR19CIDq6BpLsh.png" alt="" /></p><ol><li>network:包含掩码</li><li>adress:要确定下一跳地址</li><li>Distance:管理距离</li></ol><h3 id="管理距离"><a class="markdownIt-Anchor" href="#管理距离"></a> 管理距离</h3><ol><li>**管理距离(administrative distance)**是路由信息源的可信赖性的等级，表示为从0到255的数值。(管理距离)</li><li>数字越大，可信度(trustworthiness)越低。</li><li>因此静态路由的管理距离通常很短(默认值为1)</li><li>管理距离是0的路由是什么情况?直连网段是最可信的，比静态路由还高</li></ol><h2 id="动态路由"><a class="markdownIt-Anchor" href="#动态路由"></a> 动态路由</h2><ol><li>动态路由协议还可以重定向网络中不同路径之间的流量(或负载分担(loadshare))</li><li>往往网络是冗余的，保证连通性</li><li>静态路由的问题:如果指定的路径中出现故障就会出问题，而静态路由就避免了这个问题。</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/13.png" alt="" /></p><ol><li>动态路由依赖于路由协议在路由器之间共享知识。</li><li>动态路由取决于两个基本路由器功能：<ol><li>维护(maintance)路由表(动态维持的)</li><li>向其他路由器分发(distribution)路由信息</li></ol></li></ol><p><img src="https://s2.loli.net/2022/05/27/wxnAtQXL6GNhOdR.png" alt="" /></p><ol><li>彼此基于协议交换信息</li></ol><h2 id="收敛convergence时间"><a class="markdownIt-Anchor" href="#收敛convergence时间"></a> 收敛(Convergence)时间</h2><p><img src="https://s2.loli.net/2022/05/27/8gBKvSTVtpqfO4I.png" alt="" /></p><ol><li>收敛时间:<ol><li>从刚启动到网络达到稳定的时间</li><li>从发生变化到再次稳定的时间</li></ol></li><li>收敛时间越短，路由协议越强，需要路由器的基本硬件支持。</li></ol><h2 id="动态路由协议分类"><a class="markdownIt-Anchor" href="#动态路由协议分类"></a> 动态路由协议分类</h2><p><img src="https://s2.loli.net/2022/05/27/R4hxIflEna7Y6ZA.png" alt="" /></p><ol><li>大致分为以下三类:<ol><li>距离矢量(DV,Distance Vector)</li><li>链路状态(LS,Link State)</li><li>混合路由(HR,Hybird Routing)</li></ol></li><li>其中Hybrid Routing是在两种之间</li></ol><h3 id="距离矢量协议"><a class="markdownIt-Anchor" href="#距离矢量协议"></a> 距离矢量协议</h3><p><img src="https://s2.loli.net/2022/05/27/XswgfOU4b69YqIa.png" alt="" /></p><ol><li>距离矢量算法不允许路由器知道互联网络的<strong>确切拓扑</strong></li><li>基于距离矢量的路由算法(也称为Bellman-Ford算法)在路由器之间传递路由表的周期性副本。<ol><li>大家交换Routing Table</li><li>只知道可达，但是不知道怎么可达(知道where,但是不知道how)，不知道整个网路的具体拓扑</li></ol></li></ol><h4 id="路由环路问题"><a class="markdownIt-Anchor" href="#路由环路问题"></a> 路由环路问题</h4><p><img src="https://s2.loli.net/2022/05/27/cBdPEWXtKN8SoI9.png" alt="" /></p><blockquote><ol><li><strong>稳定之后</strong>,如果NetWork1不可到达</li><li>B发现不可达，但是告知C的时候比较晚，C已经将信息告诉了D，这样子就可能循环下去，然后不收敛。</li></ol></blockquote><p><img src="https://s2.loli.net/2022/05/27/74kpyj6VcF9BzNP.png" alt="" /></p><ol><li>网络1的无效更新将继续循环，直到其他进程停止循环为止。</li><li>尽管有一个基本事实，即目标网络(网络1)已关闭，但这种称为计数到无穷大的条件却使数据包在网络中连续循环。</li><li>当路由器计数到无穷远时，无效信息将允许存在路由环路。</li></ol><h4 id="3512-路由环路解决方案一定义最大值maximum"><a class="markdownIt-Anchor" href="#3512-路由环路解决方案一定义最大值maximum"></a> 3.5.1.2. 路由环路解决方案一：定义最大值(Maximum)</h4><p><a href="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/20.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/20.png" alt="img" /></a></p><ol><li>设置最大跳数，比如最多转发15跳，16跳以上为不可达</li></ol><h4 id="路由环路解决方案二路由中毒route-poisoning"><a class="markdownIt-Anchor" href="#路由环路解决方案二路由中毒route-poisoning"></a> 路由环路解决方案二：路由中毒(Route Poisoning)</h4><p><img src="https://s2.loli.net/2022/05/27/2D9JNPTdGqF8VEM.png" alt="" /></p><ol><li>当网络5发生故障时，路由器E通过将网络5的表条目设置为<strong>16或不可访问</strong>来启动路由中毒。(而不是删除条目)</li><li>、当路由器C从路由器E接收到路由中毒时，它会将更新(称为毒性逆转，poison reverse)发送回路由器E。这确保网段上的所有路由器都已接收到中毒的路由信息。</li><li>最终所有的路由器都知道不可达</li><li>路由毒害，由信息在路由表中失效的时候，把该表项的的度量值(metric)设为无穷大16，而不是马上从路由表中删掉这条路由信息，再将其信息发布出去，这样相邻的路由器就得知这条路由已无效了</li></ol><h4 id="路由环路解决方案三水平分隔split-horizon"><a class="markdownIt-Anchor" href="#路由环路解决方案三水平分隔split-horizon"></a> 路由环路解决方案三：水平分隔(Split Horizon)</h4><ol><li><img src="https://s2.loli.net/2022/05/27/JqegUYv4NcsGF5Q.png" alt="" />从某个端口收到的报文信息，不能再从端口发送回去</li><li>比如A发送给B和D，之后B和D又把之后的报文还给A，这时候就不接受B和D的。也即使A只接受B的</li><li>如果B和D接收到一个到达目的网段1的更好的路径，A是会接收的</li><li><strong>有名词解释题目</strong></li></ol><h4 id="路由环路解决方案四计时器hold-down-timers"><a class="markdownIt-Anchor" href="#路由环路解决方案四计时器hold-down-timers"></a> 路由环路解决方案四：计时器(Hold-Down Timers)</h4><p><img src="https://s2.loli.net/2022/05/27/MWV61PQI5ALeXs2.png" alt="" /></p><ol><li>我收到网络信息不可以到达的信息的时候，启动计时器，开始计时(这个信息包含请计时信息)</li><li>如果有任何一个计时的设备收到了一个比原来更好的达到路径，则会修改对应记录，但是如果更差不会记录。</li><li>计时器结束后，删除掉对应的条目，避免出现问题</li><li>每一条路由表的记录都有<strong>有效时间</strong></li></ol><h3 id="阻止发送路由更新"><a class="markdownIt-Anchor" href="#阻止发送路由更新"></a> 阻止发送路由更新</h3><ol><li>为了防止接口发出任何路由更新信息，请使用以下命令：<code>Router(config-router)#Passive-interface f0/0</code></li><li>它仅在使用距离矢量路由协议时才有效，因为链接状态路由协议不会直接从其邻居的路由表中获取拓扑信息</li><li><strong>接受路由表的更新，但是不发送报文出去</strong></li></ol><h2 id="链接状态协议lsp-link-state-protocol"><a class="markdownIt-Anchor" href="#链接状态协议lsp-link-state-protocol"></a> 链接状态协议(LSP, Link-state Protocol)</h2><ol><li>基于链接状态的路由算法也称为SPF(最短路径优先)算法，维护复杂的拓扑信息数据库:对树处理路由表，没有环路问题</li><li>链接状态路由使用：<ol><li>链接状态广告(LSAs):告诉你我有这个链路(每一个网段都是相同性质链路，链路上有唯一的NetID、带宽、连接拓扑关系、网段、链路类型等属性，我们优化属性后，进行LSA，告知对方主Key，如果再需要的话，再给具体信息)</li><li>拓扑数据库(有LSA组成，每个结点都持有)</li><li>根据SPF(shortest path first)算法生成的SPF树(Tree会不一样，因为每一个路由都是以自己为根的)</li><li>每个网络的路径和端口的路由表</li></ol></li><li>RFC 1583包含对OSPF链路状态概念和操作的描述。</li></ol><h3 id="链接状态网络发现"><a class="markdownIt-Anchor" href="#链接状态网络发现"></a> 链接状态网络发现</h3><p><img src="https://s2.loli.net/2022/05/27/IKEmedMbRng8qBS.png" alt="" /></p><ol><li>路由器之间<strong>交换LSA</strong>，每个路由器都以直接连接的网络开头</li><li>每个路由器与其他路由器并行<strong>构建一个拓扑数据库</strong>，该拓扑数据库包含来自网络的所有LSA。</li><li><strong>SPF算法计算网络可达性</strong>:路由器将此逻辑拓扑构建为一棵树，以其自身为根，由链路状态协议互联网络中每个网络的所有可能路径组成。然后，对这些路径进行最短路径优先(SPF)排序。</li><li><strong>路由器在路由表中列出其最佳路径以及这些目标网络的端口</strong>。它还维护拓扑元素和状态详细信息的其他数据库。</li></ol><h3 id="链接状态的问题"><a class="markdownIt-Anchor" href="#链接状态的问题"></a> 链接状态的问题</h3><ol><li>处理和存储要求<ul><li>在大多数情况下，运行链路状态路由协议要求路由器比距离矢量路由协议使用更多的内存并执行更多的处理：需要CPU进行计算</li></ul></li><li>带宽要求<ol><li>在初始链路状态数据包泛洪(flooding)期间，所有使用链路状态路由协议的路由器会将LSA数据包发送到所有其他路由器。 随着路由器对带宽的需求增加，此操作将淹没互联网，并暂时减少可用于承载用户数据的路由流量的带宽。</li><li>一开始的时候报文会比较频繁多(所以告知LSA而不是LS，减小压力)</li><li>注：初期消耗大，之后消耗小，稳定之后是根据事务触发更新</li></ol></li></ol><h2 id="问题链接状态更新"><a class="markdownIt-Anchor" href="#问题链接状态更新"></a> 问题：链接状态更新</h2><ol><li>链路状态路由必须确保所有路由器都获得所有必要的LSA数据包。</li><li>具有不同LSA集的路由器根据不同的拓扑数据计算路由。</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/25.png" alt="" /></p><ul><li>如果有一个链路的状态发生变化(恢复或者被破坏)，必须将修改通知给全部路由器消耗代价比较大(SPF算法)。</li></ul><h2 id="比较链接状态和距离矢量"><a class="markdownIt-Anchor" href="#比较链接状态和距离矢量"></a> 比较：链接状态和距离矢量</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/26.png" alt="" /></p><ol><li>DV:距离矢量<ol><li>视野窄，代价小</li><li>基于跳数</li><li>定期交换路由表，收敛慢</li><li>交换路由表</li></ol></li><li>LS:链路状态<ol><li>视野宽，有一定代价</li><li>基于带宽</li><li>初期充分交换，收敛快</li><li>交换Linked State的数据库</li></ol></li></ol><h2 id="混合协议hybrid-protocols"><a class="markdownIt-Anchor" href="#混合协议hybrid-protocols"></a> 混合协议(Hybrid Protocols)</h2><ol><li>混合协议的示例：<ol><li>OSI’s IS-IS (Intermediate System-to-Intermediate System)</li><li>Cisco’s EIGRP(Enhanced Interior Gateway Routing Protocol). 基于负载和带宽评判，定时交换路由表</li></ol></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/27.png" alt="" /></p><ul><li>上面是思科的一个视角</li></ul><h2 id="routing-protocols-主动路由协议"><a class="markdownIt-Anchor" href="#routing-protocols-主动路由协议"></a> Routing Protocols 主动路由协议</h2><ol><li>IP主动路由协议的示例包括：</li></ol><table><thead><tr><th>英文缩写</th><th>英文解释</th><th>中文解释</th><th>备注</th></tr></thead><tbody><tr><td>RIP</td><td>a distance-vector routing protocol</td><td>距离矢量协议</td><td>DV</td></tr><tr><td>IGRP</td><td>Cisco’s distance-vector routing protocol IGRP</td><td>思科的距离矢量路由协议</td><td>DV，基本启用</td></tr><tr><td>OSPF</td><td>Open Shortest Path First</td><td>开放式最短路径优先</td><td>LSP</td></tr><tr><td>EIGRP</td><td>-</td><td>平衡的混合路由协议</td><td>杂合</td></tr></tbody></table><ol><li>工作在第三层</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/28.png" alt="" /></p><h2 id="路由协议的主要目标"><a class="markdownIt-Anchor" href="#路由协议的主要目标"></a> 路由协议的主要目标</h2><ol><li>最佳(Optimal)路线:选择最佳路线</li><li>效率(Efficiency):最少使用带宽和路由器处理器资源</li><li>快速收敛(Rapid Convergence):越快越好。有些比其他人收敛更快。</li><li>灵活性(Flexibility):可以处理各种情况，例如高使用率和失败的路由</li></ol><h3 id="评价协议的标准"><a class="markdownIt-Anchor" href="#评价协议的标准"></a> 评价协议的标准</h3><ol><li>四个方面都好的协议更好一些</li><li>可以同时运行多个进程，之后基于AD度量，AD的值低的被采用</li></ol><h2 id="如何启用动态路由协议"><a class="markdownIt-Anchor" href="#如何启用动态路由协议"></a> 如何启用动态路由协议</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/29.png" alt="" /></p><ul><li>如何启动protocol:<code>router protocol [RIP...]</code></li><li>公告端口<code>network network-number</code>:要求是直连的网口</li></ul><h2 id="定义默认路由"><a class="markdownIt-Anchor" href="#定义默认路由"></a> 定义默认路由</h2><ol><li>默认路由使路由表更短。(很多路由被省略)</li><li>如果路由表中没有目标网络的条目，则将数据包发送到默认网络。</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/30.png" alt="" /></p><blockquote><ol><li>在B上设置，除了左侧五个网段的信息，都默认从192.34.56.0转发</li><li>对于左边的网络可以被认为是一个末节网络(Stub NetWork)</li></ol></blockquote><ol><li>使用动态路由协议定义默认路由:<code>Router(config)# ip default-network [network-number]</code></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/31.png" alt="" /></p><ol><li>将默认路由定义为静态路由：<code>Router(config)# ip route 0.0.0.0 0.0.0.0 [next-hop-ipaddress| exit-interface]</code></li><li>配置默认路由后，使用show ip route将显示：(172.16.1.2是默认的下一跳地址)<ol><li>不得已的网关是到网络0.0.0.0的172.16.1.2</li><li>所有不知道转发给谁的都给172.16.1.2</li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;路由器基础&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#路由器基础&quot;&gt;&lt;/a&gt; 路由器基础&lt;/h1&gt;
&lt;h2 id=&quot;路由器的内部组件&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#路由器的内部组件&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="计算机网络" scheme="http://little-hurui.cloud/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="互联网计算" scheme="http://little-hurui.cloud/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="计算机网络" scheme="http://little-hurui.cloud/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="互联网计算" scheme="http://little-hurui.cloud/tags/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>软件构造</title>
    <link href="http://little-hurui.cloud/2022/05/26/%E8%BD%AF%E4%BB%B6%E6%9E%84%E9%80%A0/"/>
    <id>http://little-hurui.cloud/2022/05/26/%E8%BD%AF%E4%BB%B6%E6%9E%84%E9%80%A0/</id>
    <published>2022-05-26T05:59:10.000Z</published>
    <updated>2022-05-26T11:51:51.936Z</updated>
    
    <content type="html"><![CDATA[<h1 id="软件构造"><a class="markdownIt-Anchor" href="#软件构造"></a> 软件构造</h1><ul><li>概述</li><li>活动</li><li>实践方法</li><li>Construction Idea</li></ul><h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><h2 id="construction-is-not-implementation"><a class="markdownIt-Anchor" href="#construction-is-not-implementation"></a> Construction is not Implementation</h2><ul><li><p>Distinction Between Activities and Phases</p><ul><li><p>Activity != Phase</p></li><li><p>Talking about “Construction” as an activity does not imply a distinct phase</p></li><li><p>Differentiating between kinds of activities is extremely helpful</p></li></ul></li><li><p>将软件构造定义为：通过编码、验证、单元测试、集成测试和调试等⼯作的结合，⽣产可⼯作的、有意义的软件的详细创建过程</p></li></ul><p><img src="https://s2.loli.net/2022/05/26/oMOTJBFYC6ruyxj.png" alt="" /></p><h2 id="软件构造是设计的延续"><a class="markdownIt-Anchor" href="#软件构造是设计的延续"></a> 软件构造是设计的延续</h2><ul><li>设计是规划软件构建⽅案的过程，实现是依据规划的软件构建⽅案建造真正产品的过程；</li><li>源程序是软件构建⽅案的最后⼀个规划，不是产品本身，真正的产品是运⾏于计算机上的由⼆进制代码组成的可执⾏程序；</li><li>源程序的⽣产过程——编程，属于设计活动，编译器完成的编译和链接才是依据规划建造软件产品的实现活动</li></ul><h1 id="活动"><a class="markdownIt-Anchor" href="#活动"></a> 活动</h1><ul><li>详细设计</li><li>编程</li><li>测试</li><li>调试</li><li>代码评审</li><li>集成与构建（Build）</li><li>构造管理</li></ul><h2 id="详细设计"><a class="markdownIt-Anchor" href="#详细设计"></a> 详细设计</h2><ul><li>有些项⽬会将主要的详细设计⼯作分配在软件构造阶段完成</li><li>不论是哪种项⽬，在软件构造阶段都不可避免的会涉及到详细设计的调整⼯作。因为<strong>编程语⾔是软件设计的⼀个重要约束</strong>，随着编程⼯作的进⾏和深⼊，⼈们可能会发现与预想不⼀致的情况和更多的约束，这个时候就需要在软件构造阶段修改详细设计⽅案</li><li>软件构造阶段详细设计使⽤的⽅法与技术与软件设计阶段是⼀样的，只是应⽤在更⼩的规模上</li></ul><h2 id="程序代码的典型质量"><a class="markdownIt-Anchor" href="#程序代码的典型质量"></a> 程序代码的典型质量</h2><p><img src="https://s2.loli.net/2022/05/26/wqb28uRdW6OeYGy.png" alt="" /></p><h2 id="编程的主要技术"><a class="markdownIt-Anchor" href="#编程的主要技术"></a> 编程的主要技术</h2><ul><li>构造可理解的源代码的技术，包括命名和空间布局；</li><li>使⽤类、枚举类型、变量、命名常量和其它类似实体；</li><li>使⽤控制结构；</li><li>处理错误条件——既包括预计的错误，也包括未预期的异常；</li><li>预防代码级的安全泄露（例如，缓冲区超限或数组下标溢出）；</li><li>使⽤资源，⽤互斥机制访问串⾏可复⽤资源（包括线程和数据库锁）；<ul><li>文件，数据库</li></ul></li><li>源代码组织（组织为语句、例程、类、包或其它结构）；</li><li>代码⽂档；</li><li>代码调整</li></ul><h2 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h2><ul><li>Inspection and testing is concerned with establishing the existence of defects in a program</li><li>通常来说，程序员每修改⼀次程序就会进⾏最少⼀次单元测试，在编写程序的过程中前后很可能要进⾏多次单元测试，以证实程序达到了要求，没有程序错误。<strong>集成测试⼀般在单元测试之后</strong>，⽤来测试多个单元之间的接⼝是否编程正确</li></ul><h2 id="调试"><a class="markdownIt-Anchor" href="#调试"></a> 调试</h2><ul><li>Debugging is concerned with locating and repairing these errors</li><li>调试过程分为三部分<ul><li>重现问题</li><li>诊断缺陷</li><li>修复缺陷</li></ul></li></ul><h3 id="重现问题的方法"><a class="markdownIt-Anchor" href="#重现问题的方法"></a> 重现问题的方法</h3><ul><li>控制输入<ul><li>找到相应的数据输⼊，能够重现绝⼤多数的问题。可以通过控制数据输⼊来重现问题意味着缺陷就发⽣在对该数据的处理代码之中</li><li>寻找能够重现问题的数据输⼊可以使⽤问题回溯推理、内存数据监控、记录输⼊数据⽇志等⽅法</li></ul></li><li>控制环境<ul><li>有些问题是编译器、操作系统、数据库管理系统、⽹络管理系统等系统软件环境造成的，通过控制数据输⼊⽆法重现问题。这时就需要通过控制环境来重现问题。⼀定要记住的是，如果你进⾏各种⼿段诊断之后确信你的程序代码没有缺陷，就要警惕可能是软件环境造成了问题。</li><li>控制环境以重现问题经常使⽤替换法，例如替换机器、操作系统、数据库管理系统等</li></ul></li></ul><h3 id="寻找和定位缺陷的方法"><a class="markdownIt-Anchor" href="#寻找和定位缺陷的方法"></a> 寻找和定位缺陷的方法</h3><ul><li>灵活使用编译器提示</li><li>持续缩小嫌疑代码范围</li><li>检查刚刚修改过的部分</li><li>警惕已经出现缺陷和常见缺陷</li><li>利用工具</li></ul><h3 id="常见错误"><a class="markdownIt-Anchor" href="#常见错误"></a> 常见错误</h3><p><img src="https://s2.loli.net/2022/05/26/4uLAxI17ERvOai5.png" alt="" /></p><h3 id="修复缺陷的注意点"><a class="markdownIt-Anchor" href="#修复缺陷的注意点"></a> 修复缺陷的注意点</h3><ul><li><strong>一次只修复一个缺陷</strong><ul><li>缺陷 + 缺陷 --&gt; “正确”</li></ul></li><li>修改前保留旧版本的备份，如果项目使用了配置管理系统，这个工作会由配置管理工具完成，否则就需要由程序员手动完成</li><li>使用测试和评审验证修复的有效性</li><li>检查和修复<strong>类似的缺陷</strong>，这可以在<strong>代码搜索</strong>、程序切片等工具的帮助下进行</li></ul><h2 id="代码评审"><a class="markdownIt-Anchor" href="#代码评审"></a> 代码评审</h2><ul><li>代码评审对代码的<strong>系统检查</strong>，通常是通过同⾏专家评审来完成的。通过评审会议可以发现并修正之前忽略的代码错误，从⽽同时提⾼软件的质量和开发者的技巧</li><li>代码评审⼀般分为正式评审、轻量级评审和结对编程</li></ul><h3 id="实践经验"><a class="markdownIt-Anchor" href="#实践经验"></a> 实践经验</h3><p><img src="https://s2.loli.net/2022/05/26/7ohwSsgHdmurAVa.png" alt="" /></p><h2 id="集成与构建"><a class="markdownIt-Anchor" href="#集成与构建"></a> 集成与构建</h2><ul><li>在以分散的方式完成程序基本单位（例程，类）之后，软件构造含需要将这些分散单位集成和构建为构件，子系统和完整系统</li><li>集成有<strong>大爆炸式集成</strong>和<strong>增量式集成</strong>两种方式，实践中<strong>增量式集成</strong>有更好的效果</li><li>构建将可读的源代码转换成标准的能在计算机上运行的可执行文件，构建过程需要配置管理工具的帮助</li></ul><h3 id="构造管理"><a class="markdownIt-Anchor" href="#构造管理"></a> 构造管理</h3><ul><li>构造计划</li><li>度量</li><li>配置管理</li></ul><h1 id="实践方法"><a class="markdownIt-Anchor" href="#实践方法"></a> 实践方法</h1><ul><li>重构</li><li>测试驱动开发</li><li>结对编程</li></ul><h2 id="重构"><a class="markdownIt-Anchor" href="#重构"></a> 重构</h2><p><img src="https://s2.loli.net/2022/05/26/YrcsumUtbw5RSKd.png" alt="" /></p><h2 id="代码的坏味道"><a class="markdownIt-Anchor" href="#代码的坏味道"></a> 代码的坏味道</h2><p><img src="https://s2.loli.net/2022/05/26/DeQlfJW7sdEzMTY.png" alt="" /></p><p><img src="https://s2.loli.net/2022/05/26/jEGA3SPmzdO76hu.png" alt="坏味道的代码" /></p><p><img src="https://s2.loli.net/2022/05/26/HrOEh2vKoYMxNjL.png" alt="重构后的代码" /></p><h2 id="测试驱动开发"><a class="markdownIt-Anchor" href="#测试驱动开发"></a> 测试驱动开发</h2><ul><li>测试驱动开发⼜被称为测试优先（Test First）的开发，随着极限编程⽅法的普遍应⽤⽽得到普及</li><li>测试驱动开发要求程序员在编写⼀段代码之前，优先完成该段代码的测试代码。测试代码通常由测试⼯具⾃动装载执⾏，也可以由程序员⼿⼯执⾏。完成测试代码之后，程序员再编写程序代码，并在编程中重复执⾏测试代码，以验证程序代码的正确性</li></ul><p><img src="https://s2.loli.net/2022/05/26/N7Q9mXe1ZCAnVjo.png" alt="过程" /></p><p><img src="https://s2.loli.net/2022/05/26/ox58N9bMIEZpjAh.png" alt="示例" /></p><p><img src="https://s2.loli.net/2022/05/26/WOuhw2jv3xfgktT.png" alt="" /></p><h2 id="结对编程-pair-programming"><a class="markdownIt-Anchor" href="#结对编程-pair-programming"></a> 结对编程 Pair Programming</h2><ul><li>Two programmers working side-by-side, collaborating on the same <strong>design</strong>, <strong>algorithm</strong>, <strong>code</strong> or <strong>test</strong></li><li>One programmer, the driver, has control of the keyboard/mouse and actively implements the program</li><li>The other programmer, the <strong>observer</strong>, continuously observes the work of the driver to identify tactical (syntactic, spelling, etc.) defects and also thinks strategically about the direction of the work</li><li>On demand, the two programmers can brainstorm any challenging problem</li><li>The two programmers periodically switch roles, they work together as equals to develop software</li></ul><h3 id="how-does-it-work"><a class="markdownIt-Anchor" href="#how-does-it-work"></a> How does it work</h3><ul><li>Pair-Pressure<ul><li>Keep each other on  task and focused</li></ul></li><li>Pair-Think<ul><li>Bring different prior experiences to the task</li></ul></li><li>Pair-Relaying<ul><li>Each, in turn, contributes to the best of their knowledge and ability Then, sit back and think while their partner fights on</li></ul></li></ul><p><img src="https://s2.loli.net/2022/05/26/bWglicGTsLRaCOU.png" alt="" /></p><p><img src="https://s2.loli.net/2022/05/26/2WmLNsDXfTCrcY6.png" alt="Workplace Layout" /></p><p><img src="https://s2.loli.net/2022/05/26/D3rMCIPTA4NmoVd.png" alt="Partner Selection" /></p><h3 id="pair-rotation"><a class="markdownIt-Anchor" href="#pair-rotation"></a> Pair Rotation</h3><ul><li>Ease staff training and transiton</li><li>Knowledge management/Reduced product risk</li><li>Enhanced team building</li></ul><h1 id="construction-idea"><a class="markdownIt-Anchor" href="#construction-idea"></a> Construction Idea</h1><ul><li>A Decade of Advances in Software Construction</li><li>Ten Realities of Modern Software Construction</li><li>Some of the Worst Construction Ideas of 1990s and 2000s</li></ul><h2 id="construction-ideas"><a class="markdownIt-Anchor" href="#construction-ideas"></a> Construction Ideas</h2><ol><li>Design has Been Raised a Level</li><li>Daily Build and Smoke Test</li><li>Standard Libraries</li><li>Visual Basic</li><li>Open Source Software</li><li>The Web, for Research</li><li><strong>Widespread Use</strong> of Incremental Development</li><li><strong>Test-First</strong> Development</li><li>Refactoring as a Discipline</li><li><strong>Faster</strong> Computers</li></ol><h2 id="ten-realities-of-modern-software-construction-现代软件建设的十个现实"><a class="markdownIt-Anchor" href="#ten-realities-of-modern-software-construction-现代软件建设的十个现实"></a> Ten Realities of Modern Software Construction 现代软件建设的十个现实</h2><h3 id="构造是正当的话题"><a class="markdownIt-Anchor" href="#构造是正当的话题"></a> &quot;构造&quot;是正当的话题</h3><ol><li>软件&quot;构造&quot; –现在看起来像这样</li></ol><h3 id="个人差异很大"><a class="markdownIt-Anchor" href="#个人差异很大"></a> 个人差异很大</h3><ol><li>变化在哪里存在？</li><li>研究人员发现以下方面的变化范围是10倍至28倍：<ol><li>编码速度</li><li>调试速度</li><li>发现缺陷的速度</li><li>发现缺陷的百分比</li><li>发现缺陷的百分比…</li><li>设计品质</li><li>设计生成的代码量</li></ol></li></ol><h3 id="个人纪律事项"><a class="markdownIt-Anchor" href="#个人纪律事项"></a> 个人纪律事项</h3><ol><li>为什么个人纪律很重要<ol><li>在预测未来时要现实</li><li>纪律很重要的领域<ol><li>重构</li><li>原型制作</li><li>优化</li><li>最小复杂度的设计</li><li>一般管理复杂性</li></ol></li><li>端点—纪律和勇气<ol><li>汉弗莱(PSP)</li><li>贝克谈极限编程</li></ol></li></ol></li></ol><h3 id="专注于简单比专注于复杂性更好"><a class="markdownIt-Anchor" href="#专注于简单比专注于复杂性更好"></a> 专注于简单比专注于复杂性更好</h3><ol><li>专注于读取时间的方便，而不是写入时间的方便</li><li>让别人更加任意的理解</li></ol><h3 id="缺陷成本增长依然有效"><a class="markdownIt-Anchor" href="#缺陷成本增长依然有效"></a> 缺陷成本增长依然有效</h3><p><img src="https://s2.loli.net/2022/05/26/IyX8wAqU9KHR2DP.png" alt="" /></p><ol><li>指数增长的修复代价</li></ol><h3 id="设计的重要性"><a class="markdownIt-Anchor" href="#设计的重要性"></a> 设计的重要性</h3><ol><li>“无设计” —&quot;所有设计&quot;连续体上有很多有效的观点</li><li>要点：极端情况通常没有生产力<ol><li>全部预先设计与没有预先设计</li><li>完全计划与完全即兴(迭代/增量)</li><li>纯迭代与直序列</li><li>所有结构与所有创意</li><li>记录一切，什么都不记录</li></ol></li></ol><h3 id="技术浪潮影响施工实践"><a class="markdownIt-Anchor" href="#技术浪潮影响施工实践"></a> 技术浪潮影响施工实践</h3><ol><li>技术浪潮对施工的影响<ol><li>&quot;技术浪潮&quot;的定义<ol><li>初潮特征</li><li>成熟波特征</li><li>后波特性</li></ol></li><li>施工受技术的影响–比我想象的要多(哦！)</li><li>可以根据一般原则解决技术</li></ol></li></ol><h3 id="增量方法效果最佳"><a class="markdownIt-Anchor" href="#增量方法效果最佳"></a> 增量方法效果最佳</h3><ol><li>增量主义观点<ol><li>纯瀑布模型完全不是增量模型或迭代模型，这就是为什么它不能很好地工作的原因</li><li>螺旋发展具有高度的增量性和迭代性，这就是其运作良好的部分原因</li><li>所有项目在某个时候都会经历迭代</li><li>想一想在项目中何时何地获得增量主义—便宜还是昂贵？</li></ol></li></ol><h3 id="工具箱的隐喻继续发亮"><a class="markdownIt-Anchor" href="#工具箱的隐喻继续发亮"></a> 工具箱的隐喻继续发亮</h3><ol><li>工具箱隐喻<ol><li>什么才好 敏捷？ XP？ Scrum？ CMM？</li><li>工具箱说明没有一项适合每一项工作的工具</li><li>不同的行业部门将具有不同的工具，甚至会有不同的工具箱</li><li>软件工程工具箱中有什么？<ol><li>最佳实践</li><li>生命周期模型</li><li>模板，清单，模式，示例</li><li>软件工具</li></ol></li></ol></li></ol><h3 id="软件的基本张力"><a class="markdownIt-Anchor" href="#软件的基本张力"></a> 软件的基本张力</h3><ol><li>多年来，软件的主要矛盾一直没有改变：<ol><li>刚性计划与即兴创作</li><li>规划与算命</li><li>创意与结构</li><li>纪律与灵活性</li><li>定量与定性</li><li>工艺与产品</li><li>优化与满意</li></ol></li><li>平衡摇杆，但基本张力是恒定的</li></ol><h2 id="1990年代和2000年代最糟糕的建筑思想"><a class="markdownIt-Anchor" href="#1990年代和2000年代最糟糕的建筑思想"></a> 1990年代和2000年代最糟糕的建筑思想</h2><p><img src="https://s2.loli.net/2022/05/26/sP5oDgAr9vTF4SY.png" alt="" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;软件构造&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#软件构造&quot;&gt;&lt;/a&gt; 软件构造&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;概述&lt;/li&gt;
&lt;li&gt;活动&lt;/li&gt;
&lt;li&gt;实践方法&lt;/li&gt;
&lt;li&gt;Construction Idea&lt;/li&gt;</summary>
      
    
    
    
    <category term="软件工程" scheme="http://little-hurui.cloud/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="软件工程与计算2" scheme="http://little-hurui.cloud/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%972/"/>
    
    
    <category term="软件工程" scheme="http://little-hurui.cloud/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="软件构造" scheme="http://little-hurui.cloud/tags/%E8%BD%AF%E4%BB%B6%E6%9E%84%E9%80%A0/"/>
    
  </entry>
  
  <entry>
    <title>线段树</title>
    <link href="http://little-hurui.cloud/2022/05/26/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    <id>http://little-hurui.cloud/2022/05/26/%E7%BA%BF%E6%AE%B5%E6%A0%91/</id>
    <published>2022-05-26T03:01:13.000Z</published>
    <updated>2022-05-26T04:42:10.668Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线段树"><a class="markdownIt-Anchor" href="#线段树"></a> 线段树</h1><h2 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h2><p><strong>线段树</strong>（Segment Tree）几乎是算法竞赛最常用的数据结构了，它主要用于维护<strong>区间信息</strong>（要求满足结合律）。与树状数组相比，它可以实现 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(log n )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right:0.03588em;">g</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span> 的<strong>区间修改</strong>，还可以同时支持<strong>多种操作</strong>（加、乘)，更具通用性</p><hr /><p>求解【值域爆炸，查询有限】的区间问题的几种方式</p><hr /><h2 id="example"><a class="markdownIt-Anchor" href="#example"></a> Example</h2><h3 id="729-我的日程安排表-i"><a class="markdownIt-Anchor" href="#729-我的日程安排表-i"></a> <a href="https://leetcode.cn/problems/my-calendar-i/">729. 我的日程安排表 I</a></h3><p>实现一个 MyCalendar 类来存放你的日程安排。如果要添加的日程安排不会造成 重复预订 ，则可以存储这个新的日程安排。</p><p>当两个日程安排有一些时间上的交叉时（例如两个日程安排都在同一时间内），就会产生 重复预订 。</p><p>日程可以用一对整数 start 和 end 表示，这里的时间是半开区间，即 [start, end), 实数 x 的范围为，  start &lt;= x &lt; end 。</p><p>实现 MyCalendar 类：</p><p>MyCalendar() 初始化日历对象。<br />boolean book(int start, int end) 如果可以将日程安排成功添加到日历中而不会导致重复预订，返回 true 。否则，返回 false 并且不要将该日程安排添加到日历中</p><p><strong>提示：</strong></p><blockquote><p><code>0 &lt;= start &lt; end &lt;= 109</code></p><p>每个测试用例，调用 <code>book</code> 方法的次数最多不超过 <code>1000</code> 次。</p></blockquote><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution</h2><p><strong>线段树（动态开点）</strong></p><p>线段树维护的节点信息包括：</p><ol><li><code>ls/rs</code>：分别代表当前节点的左右子节点在线段树数组<code>tr</code>中的下表</li><li><code>add</code>：懒标记</li><li><code>val</code>：为当前区间的所包含的点的数量</li></ol><p>对于常规的线段树实现来说，都是一开始调<code>build</code>操作创建空树，而线段树一般是以<strong>满二叉树</strong>的形式用数组存储，因此需要<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn><mo>∗</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">4*n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.64444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">4</span><span class="mbin">∗</span><span class="mord mathit">n</span></span></span></span>的空间，并且这些空间在起始<code>build</code>空树的时候已经锁死</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;线段树&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#线段树&quot;&gt;&lt;/a&gt; 线段树&lt;/h1&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h2&gt;
&lt;p&gt;&lt;str</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://little-hurui.cloud/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="常用算法" scheme="http://little-hurui.cloud/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/"/>
    
    <category term="板子" scheme="http://little-hurui.cloud/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%9D%BF%E5%AD%90/"/>
    
    
    <category term="Algorithm" scheme="http://little-hurui.cloud/tags/Algorithm/"/>
    
    <category term="线段树" scheme="http://little-hurui.cloud/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>应用层</title>
    <link href="http://little-hurui.cloud/2022/05/25/%E5%BA%94%E7%94%A8%E5%B1%82/"/>
    <id>http://little-hurui.cloud/2022/05/25/%E5%BA%94%E7%94%A8%E5%B1%82/</id>
    <published>2022-05-25T05:03:51.000Z</published>
    <updated>2022-05-27T10:51:49.368Z</updated>
    
    <content type="html"><![CDATA[<h1 id="layer-5-the-session-layer-第五层-会话层"><a class="markdownIt-Anchor" href="#layer-5-the-session-layer-第五层-会话层"></a> Layer 5 - The Session Layer 第五层 会话层</h1><ul><li>TCP 控制传输，如果用户想要完成一定的数据控制，就会对应在会话层完成</li></ul><h2 id="第五层的职责"><a class="markdownIt-Anchor" href="#第五层的职责"></a> 第五层的职责</h2><p><img src="https://s2.loli.net/2022/05/25/8y5P3qJt4oml19L.png" alt="" /></p><ul><li>基于令牌进行交互发言，通过数据同步保证数据完整性（应用逻辑）</li><li>进行数据分段，拼接，保证传输的有效</li><li>同步技术，保证故障恢复</li></ul><h2 id="第五层的服务"><a class="markdownIt-Anchor" href="#第五层的服务"></a> 第五层的服务</h2><p><img src="https://s2.loli.net/2022/05/25/LuARX1FsIPrVHMv.png" alt="" /></p><ol><li>双向同步通讯<ol><li>全双工通信</li><li>半双工通信</li><li>单工通信</li></ol></li><li>双向交替控制<ol><li>会话连接，活动开始，数据校验（同步）</li><li>令牌转换等</li></ol></li><li>是否同步了你的会话的主题</li></ol><p><img src="https://s2.loli.net/2022/05/25/hMLbFKrVgAe2Xi9.png" alt="" /></p><ol><li>同步点（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mi>h</mi><mi>e</mi><mi>c</mi><mi>k</mi><mi>P</mi><mi>o</mi><mi>i</mi><mi>n</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">CheckPoint</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="mord mathit">h</span><span class="mord mathit">e</span><span class="mord mathit">c</span><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mord mathit">o</span><span class="mord mathit">i</span><span class="mord mathit">n</span><span class="mord mathit">t</span></span></span></span>）用于分隔会话的各个部分，以前称为对话（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>a</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>u</mi><mi>e</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">dialogues</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">d</span><span class="mord mathit">i</span><span class="mord mathit">a</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right:0.03588em;">g</span><span class="mord mathit">u</span><span class="mord mathit">e</span><span class="mord mathit">s</span></span></span></span>）<ol><li>同步点： 发送一定数据后设置同步点</li><li>次同步点： 作为同步点的一个子集，进行数据校验</li><li>主同步点： 按照主同步点进行校验确认</li><li>如果错误，恢复到上次都已经同步的主同步点</li></ol></li><li>对话分离（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>e</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">Seperation</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="mord mathit">e</span><span class="mord mathit">p</span><span class="mord mathit">e</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit">a</span><span class="mord mathit">t</span><span class="mord mathit">i</span><span class="mord mathit">o</span><span class="mord mathit">n</span></span></span></span>）是通信的有序启动，终止和管理</li><li>尽量保证了通话的效率和可靠性</li></ol><h2 id="第五层设备"><a class="markdownIt-Anchor" href="#第五层设备"></a> 第五层设备</h2><p><img src="https://s2.loli.net/2022/05/25/7yku9WFPDOzINGU.png" alt="" /></p><ul><li>Client-Server 客户端-服务器模式：通过会话实现</li></ul><h1 id="layer-6-the-presentation-layer-第六层-表示层"><a class="markdownIt-Anchor" href="#layer-6-the-presentation-layer-第六层-表示层"></a> Layer 6 - The Presentation Layer 第六层 表示层</h1><ol><li>表示层负责以接受<strong>设备可以理解</strong>的形式表示数据<ol><li>传送语法协商</li><li>接受语法协商</li></ol></li><li>表示层具有三个主要功能<ol><li>数据格式（format）</li><li>数据压缩（compression）: 早起网络比较慢，倾向于先压缩再发送</li><li>数据加密（encryption）</li></ol></li><li>协商编码方式可以在会话层中实现</li></ol><h2 id="数据格式"><a class="markdownIt-Anchor" href="#数据格式"></a> 数据格式</h2><ol><li>想象两个不同的（dissimilar）的系统<ol><li>一种使用拓展二进制编码的十进制交换码（EBCDIC,Extended Binary Coded Decimal Interchange Code） 格式化文本</li><li>另一种使用**美国信息交换标准码（ASCII）**标准化文本</li><li>选择大家都能识别的编码形式传输，保证大家都能理解</li></ol></li><li>第六层提供了这两种不同类型的代码之间的转换</li></ol><h3 id="图形文件格式"><a class="markdownIt-Anchor" href="#图形文件格式"></a> 图形文件格式</h3><ol><li>互联网通常使用两种二进制文件格式来显示图像<ol><li>图形交换格式（GIF， Graphic Interchange Format)</li><li>联合图像专家组（JPEG, Joint Photographic Experts Group）</li></ol></li><li>任何具有读取器的GIF和JPEG文件格式的计算机都可以读取这些文件类型，而与计算机的类型无关</li></ol><h3 id="多媒体文件格式"><a class="markdownIt-Anchor" href="#多媒体文件格式"></a> 多媒体文件格式</h3><ol><li>多媒体文件格式是另一种二进制文件，它存储声音，音乐和视屏<ol><li>这些文件可以完全下载，然后播放，也可以在播放时下载</li><li>后一种方法称为流音频</li></ol></li></ol><h2 id="数据加密与压缩"><a class="markdownIt-Anchor" href="#数据加密与压缩"></a> 数据加密与压缩</h2><ol><li>第六层负责数据加密：数据加密可在信息传输过程中保护信息</li><li>表示层还负责文件的压缩</li></ol><h1 id="layer-7-the-application-layer-应用层"><a class="markdownIt-Anchor" href="#layer-7-the-application-layer-应用层"></a> Layer 7： The Application Layer 应用层</h1><p><img src="https://s2.loli.net/2022/05/25/wNIodOR1UnsSYr4.png" alt="" /></p><ol><li>上图中各层的一些协议和使用：对端口进行管理</li><li>应用程序层（最接近用户）支持应用程序的通信组件</li></ol><h2 id="应用层职责"><a class="markdownIt-Anchor" href="#应用层职责"></a> 应用层职责</h2><ol><li>确定并确定预期的通用合作伙伴的可用性</li><li>同步合作的应用程序</li><li>同步协议的作用</li><li>建立有关错误恢复程序的协议</li><li>控制数据完整性</li><li>通过网络应用（network applications）为OSI模型的其余部分提供一个直接接口，或是通过独立应用提供非直接接口，如果文字处理，电子表格，演示管理器（presentation managers）,网络重定向器</li><li>不同应用不同情况</li></ol><h2 id="超文本传输协议-http-hypertext-transfer-protocol"><a class="markdownIt-Anchor" href="#超文本传输协议-http-hypertext-transfer-protocol"></a> 超文本传输协议 HTTP , HyperText Transfer Protocol</h2><p><img src="https://s2.loli.net/2022/05/26/FXJROlcQ7Sxt5bg.png" alt="" /></p><ul><li>和电视的播放比较类似，通过浏览器界面切换内容，通过URL切换</li><li>多源点传输，内容规范</li><li>如何实现URL的转发： HTTP</li><li>如何完成界面： html</li><li>如何整合和查询：搜索引擎</li></ul><h3 id="统一资源定位符uniform-resource-locator"><a class="markdownIt-Anchor" href="#统一资源定位符uniform-resource-locator"></a> 统一资源定位符（Uniform Resource Locator）</h3><ol><li>统一资源定位符URL是对可以从因特网上得到的资源的位置和访问方法的一种简介的表示</li><li>URL给资源的位置提供一种抽象的识别方法，并用这种方法给资源定位</li><li>只要能够对资源定位，系统就可以对资源进行各种操作，如存取、更新、替换和查找其属性</li><li>URL相当于一个文件名在网络范围的拓展。因此URL是与因特网相连的机器上的任何可访问对象的一个指针</li><li><code>&lt;URL的访问方式&gt;://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;</code><ul><li>访问方式：协议HTTPS或者HTTP</li><li>主机：域名的方式</li><li>端口对应进程</li><li>路径对应具体文件</li></ul></li></ol><h3 id="http"><a class="markdownIt-Anchor" href="#http"></a> HTTP</h3><ol><li>HTTP是<strong>面向事务</strong>的客户端服务器协议</li><li>HTTP 1.0 协议是<strong>无状态的</strong> （stateless）<ol><li>每一次请求是<strong>独立的</strong>，不记录上一次的请求信息</li><li>Cookie是征求同意的存储（维持登陆状态），可以保证在多个应用之间维持登陆状态</li></ol></li><li>HTTP协议本身也<strong>无连接</strong>的，虽然它使用了面向连接的TCP向上提供的服务</li><li>万维网浏览器就是一个HTTP客户，而在万维网服务器等待HTTP请求的进程常称为HTTP daemon， 缩写为 HTTPD</li><li>HTTPD 在收到HTTP客户端的请求后，把所需的文件返回给HTTP客户</li></ol><h3 id="http的报文结构请求报文"><a class="markdownIt-Anchor" href="#http的报文结构请求报文"></a> HTTP的报文结构（请求报文）</h3><p><img src="https://s2.loli.net/2022/05/26/WaJEdQXLyviD7RA.png" alt="" /></p><ol><li>报文由三个部分组成， 开始行 + 首部行 + 实体主题</li><li>请求报文中，开始行就是请求行</li><li>请求报文和应答报文的应答结构都是一样的</li><li>应答码：<ol><li>2xx：成功</li><li>3xx：重定向</li><li>4xx：错误</li><li>5xx：服务器内部错误</li></ol></li></ol><h3 id="http请求报文的一些方法"><a class="markdownIt-Anchor" href="#http请求报文的一些方法"></a> HTTP请求报文的一些方法</h3><table><thead><tr><th>方法(操作)</th><th>意义</th></tr></thead><tbody><tr><td>OPTION</td><td>请求一些选项的信息</td></tr><tr><td>GET</td><td>请求读取由URL所标志的信息</td></tr><tr><td>HEAD</td><td>请求读取由URL所标志的信息的首部</td></tr><tr><td>POST</td><td>给服务器添加信息(例如，注释)</td></tr><tr><td>PUT</td><td>在指明的URL下存储一个文档</td></tr><tr><td>DELETE</td><td>删除指明的URL所标志的资源</td></tr><tr><td>TRACE</td><td>用来进行环回测试的请求报文</td></tr><tr><td>CONNECT</td><td>用于代理服务器</td></tr></tbody></table><h2 id="htmlhypertext-markup-language"><a class="markdownIt-Anchor" href="#htmlhypertext-markup-language"></a> HTML（HyperText Markup Language）</h2><ul><li>定义了用于排版的命令</li><li>HTML文档是一种可以用任何文本编辑器创建的ASCII码文件</li><li>仅当HTML文档是以.html或.htm为后缀时，浏览器才对此文档的各种标签进行解释。</li><li>当浏览器从服务器读取HTML文档，针对HTML文档中的各种标签，根据浏览器所使用的显示器的尺寸和分辨率大小，重新进行排版并恢复出所读取的页面。</li><li>HTML用一对标签(一个开始标签和一个结束标签)或几对标签来标识一个元素。</li></ul><h2 id="ftpfiletransfer-protocol-and-tftptrivial-file-transfer-protocol"><a class="markdownIt-Anchor" href="#ftpfiletransfer-protocol-and-tftptrivial-file-transfer-protocol"></a> FTP(FileTransfer Protocol) and TFTP（Trivial File Transfer Protocol）</h2><ul><li>FTP是一种<strong>可靠的</strong>，<strong>面向连接</strong>的服务，它使用TCP传输文件<ul><li>FTP首先在客户端和服务器（端口21）之间建立<strong>控制连接</strong></li><li>然后，建立第二个连接，这是计算机之间通过其传输数据的连接（端口20）</li></ul></li><li>TFTP是使用UDP的无连接服务（简化的FTP）<ul><li>体积小，易于实施，更方便</li><li>例如，TFTP在路由器上用于传输配置文件和Cisco IOS映像</li><li>不支持交互，没有目录浏览功能</li></ul></li><li>互联网早期，文件传输量很大</li></ul><h3 id="主进程工作步骤"><a class="markdownIt-Anchor" href="#主进程工作步骤"></a> 主进程工作步骤</h3><ol><li>打开熟知端口(端口号21)，使客户进程能够连接上。（可以修改熟知端口）</li><li>等待客户进程发出连接请求</li><li>启动从属进程来处理客户进程发来的请求。从属进程对客户进程的请求处理完毕后即终止，但从属进程在运行期间根据需要还可能创建其他一些子进程<ol><li>控制连接</li><li>数据连接：数据通信</li><li>需要建立两个连接才能完成传输</li></ol></li><li>回到等待状态，继续接受其他客户进程发来的请求，主进程与从属进程的处理是并发地进行</li></ol><h3 id="ftp的屏幕信息举例"><a class="markdownIt-Anchor" href="#ftp的屏幕信息举例"></a> FTP的屏幕信息举例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">用户要用FTP和远地主机(网络信息中心NIC上的主机)建立连接。域名:nic.ddn.mil</span><br><span class="line">[01] ftp nic.ddn.mil</span><br><span class="line">本地FTP发送的连接成功信息</span><br><span class="line">[02] connected to nic.ddn.mil</span><br><span class="line">从远地服务器返回的信息，220表示&quot;服务就绪&quot;</span><br><span class="line">[03] 220 nic FTP server (Sunos 4.1)ready.</span><br><span class="line">本地FTP提示用户键入名字。用户键入的名字表示&quot;匿名&quot;。用户只需键入anonymous即可(匿名)</span><br><span class="line">[04] Name: anonymous</span><br><span class="line">数字331表示&quot;用户名正确&quot;，需要口令</span><br><span class="line">[05] 331 Guest login ok, send ident as password.</span><br><span class="line">本地FTP提示用户键入口令。用户这时可键入guest作为匿名的口令，也可以键入自己的电子邮件地址，即耶鲁大学数学系名为xyz的主机上的abd(匿名密码是随意输入的)</span><br><span class="line">[06] Password: abc@xyz.math.yale.edu</span><br><span class="line">数字230表示用户已经注册完毕</span><br><span class="line">[07] 230 Guest login ok, access restrictions apply.</span><br><span class="line">&quot;ftp&gt;&quot;是FTP的提示信息。用户键入的是将目录改变为包含RFC文件的目录</span><br><span class="line">[08] ftp&gt; cd rfc</span><br><span class="line">字符&quot;CWD&quot;是FTP的标准命令，表示Change Working Directory</span><br><span class="line">[09] 250 CWD command successful.</span><br><span class="line">用户要求将名为rfc1261.txt的文件复制到本地主机上，并改名为nicinfo(get 获取到本地)</span><br><span class="line">[10] ftp&gt; get rfc1261.txt nicinfo</span><br><span class="line">字符PORT是FTP的标准命令，表示要建立数据连接。200表示&quot;命令正确&quot;</span><br><span class="line">[11] 200 PORT command successful.</span><br><span class="line">数字150表示&quot;文件状态正确，即将建立数据连接&quot;</span><br><span class="line">[12] 150 ASCII data connection for rfc1261.txt (128.36.12.27,1401) (4318 bytes).</span><br><span class="line">数字226是&quot;释放数据连接&quot;，现在一个新的本地文件已经生成。</span><br><span class="line">[13] 226 ASCII Transfer complete. local: nicinfo remote: rfc1261.txt 4488 bytes received in 15 seconds (0.3 Kbytes/s).</span><br><span class="line">用户键入退出命令。</span><br><span class="line">[14] ftp&gt; quit</span><br><span class="line">表示FTP工作结束</span><br><span class="line">[15] 221 Goodbye. </span><br></pre></td></tr></table></figure><h2 id="telnet-协议"><a class="markdownIt-Anchor" href="#telnet-协议"></a> Telnet 协议</h2><ul><li>Telnet客户端软件提供了登录到运行Telnet服务器应用程序的远程Internet主机，然后从命令行执行命令的功能</li></ul><p><img src="https://s2.loli.net/2022/05/26/lEAnybaB495TYVq.png" alt="" /></p><ul><li>输入参数，达成一致，对服务器操作</li><li>不同的操作系统可能有差异</li><li>基于Telnet的标准，virtual Terminal 可视标准</li></ul><h2 id="smtpsimple-mail-transfer-protocoland-poppost-office-protocol"><a class="markdownIt-Anchor" href="#smtpsimple-mail-transfer-protocoland-poppost-office-protocol"></a> SMTP（Simple Mail Transfer Protocol）and POP(Post Office Protocol)</h2><ul><li>电子邮件服务器使用STMP发送和POP接受邮件的相互通信<ul><li>SMTP（简单邮件传输协议）邮件发送，登陆发送的操作</li><li>POP3 邮件接受，邮件到达邮件服务端，由客户端和服务端联系接收邮件</li></ul></li></ul><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec06/9.png" alt="" /></p><p><img src="https://s2.loli.net/2022/05/26/EHaNPB6tcZjm4O1.png" alt="SMTP_POP" /></p><blockquote><p>发送者先登录到服务器，通过服务器根据SMTP传输到对应的服务器</p><p>用户登录，通过POP3协议收邮件到本地</p></blockquote><h3 id="mimemultipurpose-internet-mail-extensions-多用途internet邮件拓展"><a class="markdownIt-Anchor" href="#mimemultipurpose-internet-mail-extensions-多用途internet邮件拓展"></a> MIME(Multipurpose Internet Mail Extensions) 多用途Internet邮件拓展</h3><p>增加五个新的邮件首部</p><ol><li>MIME-Version: 标志 MIME 的版本。现在的版本号是 1.0。若无此行，则为英文文本</li><li>Content-Description: 这是可读字符串，说明此邮件主体是否是图像、音频或视频</li><li>Content-Id: 邮件的惟一标识符</li><li>Content-Transfer-Encoding: 在传送时邮件的主体是如何编码的</li><li>Content-Type:说明邮件主体的数据类型和子类型</li></ol><h3 id="mime-和-smtp-的关系"><a class="markdownIt-Anchor" href="#mime-和-smtp-的关系"></a> MIME 和 SMTP 的关系</h3><p><img src="https://s2.loli.net/2022/05/26/xrv6ctap8qb4hud.png" alt="" /></p><ol><li>MIME标准扩充了SMTP标准</li><li>很多的文件(附件)并不是ASCII码的，我们需要用MIME将对应的文件进行转换(扩充)。过程如上图</li></ol><h2 id="snmpsimple-network-management-protocol简单网络管理协议"><a class="markdownIt-Anchor" href="#snmpsimple-network-management-protocol简单网络管理协议"></a> SNMP（Simple Network Management Protocol）简单网络管理协议</h2><ol><li>简单网络管理协议(SNMP)是一种应用程序层协议，可简化网络设备之间的管理信息交换。</li></ol><p><img src="https://s2.loli.net/2022/05/26/sjqndAWoVUKLPD5.png" alt="" /></p><ol><li>NMS(Network Management System):网管,通过下发请求对上网的所有的主机关于流量等等信息进行管理(监控)</li><li>通过管理数据库(MIB)进行信息交流</li><li>使用UDP通过广播进行实现</li></ol><h2 id="dnsdomain-name-system域名系统"><a class="markdownIt-Anchor" href="#dnsdomain-name-system域名系统"></a> DNS(Domain Name System）域名系统</h2><ol><li><p>域名系统(DNS)是网络上的服务，该服务管理域名并响应客户端将域名转换为关联IP地址的请求</p><p><img src="https://s2.loli.net/2022/05/26/WbQzeNKyF1Ca7Z3.png" alt="" /></p></li><li><p>早期使用IP地址以及Host文件来进行访问</p></li></ol><h3 id="domain-name-域名"><a class="markdownIt-Anchor" href="#domain-name-域名"></a> Domain Name 域名</h3><p><img src="https://s2.loli.net/2022/05/27/3etw8BXbAOGI5Zf.png" alt="" /></p><ol><li>使用<code>.</code> 将字符串分隔</li><li>越靠后域名级别越高</li><li>www就是对应到主机群</li></ol><h3 id="tld-top-level-domain-顶级域"><a class="markdownIt-Anchor" href="#tld-top-level-domain-顶级域"></a> TLD （Top Level Domain） 顶级域</h3><ol><li>国家TLD(nTLD)<ol><li>.cn(CHINA) 中国</li><li>.us (United States) 美国</li><li>.uk (United kingdom), etc. 英国等等</li></ol></li><li>通用TLD(gTLD)，最早的域包括：<ol><li>.com Enterprises and companies 企业和公司</li><li>.net Network services providers 网络服务提供者</li><li>.org Nonprofit organizations 非盈利组织</li><li>.edu Educational facilities 教育机构</li><li>.gov Governments (only for U.S.A) 政府(美国)</li><li>.mil Military facilities (only for U.S.A) 军方(美军)</li><li>.int International organizations 国际组织</li></ol></li><li>Infrastructure domain 基础设施领域<ol><li>Only one: arpa, for resolving domain names reversely 仅一个：arpa，用于反向解析域名</li></ol></li><li>Recently, new TLD domain added:<ol><li>.aero(航空运输企业)</li><li>.biz (公司和企业)</li><li>.cat (加泰隆人的语言和文化团体)</li><li>.coop(合作团体)</li><li>.info(各种资讯)</li><li>.jobs(人力资源管理者)</li><li>.mobi(移动产品与服务的用户和提供者)</li><li>.museum (博物馆)</li><li>.name (个人)</li><li>.pro (经过认证的专业人员)</li><li>.travel (旅游业)</li></ol></li></ol><h3 id="domain-name-sever-域名服务器"><a class="markdownIt-Anchor" href="#domain-name-sever-域名服务器"></a> Domain Name Sever 域名服务器</h3><p><img src="https://s2.loli.net/2022/05/27/QZDUsjkGgbMSW4l.png" alt="" /></p><ul><li>顶级域名地下的域名就是由 顶级域名下面进行管理</li><li>根据域名服务器存储位置，所以子服务器能知道根服务器的地址</li></ul><h3 id="结合域名服务器查找ip地址"><a class="markdownIt-Anchor" href="#结合域名服务器查找ip地址"></a> 结合域名服务器查找IP地址</h3><ul><li>DNS系统以层次（hierarchy）结构设置，该层次结构创建不同级别的DNS服务器</li><li>此级别的DNS服务器判断其自身能否将域名转换为关联的IP地址<ul><li>如果可以，则将结果返回给客户端</li><li>如果没有，它将请求发送到更到级别（向上级请求）</li></ul></li></ul><p><img src="https://s2.loli.net/2022/05/27/LNQRmYaDpcZkBOo.png" alt="" /></p><ul><li>请求分为两种<ul><li>能够应答</li><li>不能应答</li></ul></li><li>递归地进行查找：具体过程在上图</li><li>下面递归，上面迭代</li></ul><h2 id="应用层沟通的方式"><a class="markdownIt-Anchor" href="#应用层沟通的方式"></a> 应用层：沟通的方式</h2><ul><li>通信处理发生的一种方式： （无上下文，请求后自动断开）<ul><li>当浏览器打开时，它将连接到默认页面，并且该页面的文件将传输到客户端</li><li>处理完成，连接断开</li></ul></li><li>第二种：（有上下文）<ul><li>作文Telnet 和FTP，建立与服务器的连接并保持该连接，知道执行所有处理</li><li>当用户确定已经完成时，客户端终止连接</li></ul></li></ul><h2 id="dhcpdynamic-host-configuration-protocol-动态主机配置协议"><a class="markdownIt-Anchor" href="#dhcpdynamic-host-configuration-protocol-动态主机配置协议"></a> DHCP（Dynamic Host Configuration Protocol） 动态主机配置协议</h2><ul><li>DHCP服务器可以是服务器</li></ul><h3 id="dhcp概述"><a class="markdownIt-Anchor" href="#dhcp概述"></a> DHCP概述</h3><ol><li>一个协议软件在使用之前先作为正确协议配置，具体配置内容取决于协议</li><li>接到因特网的计算机的协议软件需要配置的项目包括：<ol><li>IP地址</li><li>子网掩码</li><li>默认路由器的IP地址</li><li>域名服务器的IP地址</li></ol></li><li>DHCP可以高效地分配IP地址<ol><li>局域网地网络协议</li><li>使用UDP实现</li></ol></li><li>目前一般都是自动获取IP地址，不需要手动获取IP地址等信息</li></ol><h3 id="dhcp过程"><a class="markdownIt-Anchor" href="#dhcp过程"></a> DHCP过程</h3><h4 id="dhcp工作过程"><a class="markdownIt-Anchor" href="#dhcp工作过程"></a> DHCP工作过程</h4><p><img src="https://s2.loli.net/2022/05/27/hXF3KY82fxcMksw.png" alt="" /></p><ol><li>A，B为两个Server</li><li>Client 先Discover  去搜索</li><li>Server返回有一个Offer报文</li><li>Client选择优先返回的Offer来优先服务</li><li>Client广播，告知服务了谁</li><li>B返回一个Ack报文</li><li>到了时间之后选择Release  或 续租</li><li>A，B的信息 不对称不同步（局域网的地址B分配完成了，但是A不知道，广播里面会携带分配的地址信息，告知A进行同步）</li></ol><h4 id="发现阶段"><a class="markdownIt-Anchor" href="#发现阶段"></a> 发现阶段</h4><p><img src="https://s2.loli.net/2022/05/27/8K5mRiX3TEnvL9t.png" alt="" /></p><ul><li>DHCP Client开始并不知道DHCP Server 的ip地址，也难辞以广播的方式发出DHCP Discover报文</li><li>广播携带地址是MAC地址</li></ul><h4 id="响应阶段"><a class="markdownIt-Anchor" href="#响应阶段"></a> 响应阶段</h4><p><img src="https://s2.loli.net/2022/05/27/y2SMwRBEG73CFkh.png" alt="" /></p><p>DHCP Server 在IP地址池中查找合法的IP地址通过DHCP Offer报文提供给DHCP Client</p><h4 id="选择阶段"><a class="markdownIt-Anchor" href="#选择阶段"></a> 选择阶段</h4><p><img src="https://s2.loli.net/2022/05/27/CEgPY6hUBObG9X2.png" alt="" /></p><ul><li>DHCP Client选择一个DHCP Offer报文(一般 选择最先收到的DHCP Offer报文)，向网络发送一个DHCP Request广播数据包，所有的Server进行同步</li></ul><h4 id="租约确认阶段"><a class="markdownIt-Anchor" href="#租约确认阶段"></a> 租约确认阶段</h4><p><img src="https://s2.loli.net/2022/05/27/tFW1o36OUmH8knT.png" alt="" /></p><ul><li>DHCP Server接收到DHCP Request消息后，以DHCP ACK消息向DHCP Client广播成功的确认；出错则广播否定确认消息DHCP NAK</li></ul><h4 id="租期续约"><a class="markdownIt-Anchor" href="#租期续约"></a> 租期续约</h4><p><img src="https://s2.loli.net/2022/05/27/2IFg8VEJltfTvqP.png" alt="" /></p><ul><li>在租期中，DHCP Client直接向为其提供IP地址的DHCP Server发送DHCP Request消息，收到回应的DHCP ACK消息后，DHCP Client根据所提供的新的租期以及其它更新的 TCP/IP 参数更新自己的配置，IP租用更新完成</li></ul><h4 id="租期释放"><a class="markdownIt-Anchor" href="#租期释放"></a> 租期释放</h4><p><img src="https://s2.loli.net/2022/05/27/SRdZEIs8wnTa9xL.png" alt="" /></p><ul><li>当DHCP Client不再需要使用分配IP地址时，就会主动向 DHCP Server发送Release报文，告知不再需要分配IP地址，DHCP Server会释放被绑定的租约</li><li>到时间后，Server会主动询问，如果没有应答会自动释放</li></ul><h4 id="dhcp报文结构"><a class="markdownIt-Anchor" href="#dhcp报文结构"></a> DHCP报文结构</h4><p><img src="https://s2.loli.net/2022/05/27/i2n48OAgryhFT7t.png" alt="" /></p><ol><li>op:报文类型，1请求，2应答</li><li>HTYPE:硬件地址类型，1表示10M以太网地址</li><li>HLEN:以太网地址长度，10M为6</li><li>Hops:是否使用代理服务器进行处理</li></ol><h3 id="dhcp报文类型"><a class="markdownIt-Anchor" href="#dhcp报文类型"></a> DHCP报文类型</h3><ol><li>DHCP Discover：发现</li><li>DHCP Offer：提供</li><li>DHCP Request：告知决定</li><li>DHCP ACK：租约确认</li><li>DHCP NAK：租约不确认</li><li>DHCP Release：释放租约</li><li>DHCP Decline:收到Ack后，Client告诉服务器不接受</li><li>DHCP Inform:客户端向服务器端请求详细信息</li></ol><h3 id="dhcp欺骗及防范"><a class="markdownIt-Anchor" href="#dhcp欺骗及防范"></a> DHCP欺骗及防范</h3><h4 id="dhcp欺骗原理"><a class="markdownIt-Anchor" href="#dhcp欺骗原理"></a> DHCP欺骗原理</h4><ol><li>客户端以广播的方式来寻找服务器，并且只接收第一个到达的服务器提供的网络配置参数。</li><li>非授权的DHCP服务器先应答，客户端最后获得的网络参数即是非授权的，客户端即被欺骗。(恶意服务器把自己作为默认网关)</li><li>在实际应用DHCP的网络中，基本上都会采用DHCP中继，因此本网络的非授权DHCP服务器一般都会先于其余网络的授权DHCP服务器的应答(由于网络传输的延迟)，在这样的应用中，DHCP欺骗更容易完成</li></ol><h4 id="dhcp欺骗攻击"><a class="markdownIt-Anchor" href="#dhcp欺骗攻击"></a> DHCP欺骗攻击</h4><p><img src="https://s2.loli.net/2022/05/27/3wYheKZpdLiPuHs.png" alt="" /></p><ol><li>首先PC发出请求</li><li>然后将DHCP请求发送出去</li><li>伪装者收到后，DHCP伪装者给出应答</li></ol><p><img src="https://s2.loli.net/2022/05/27/RFIJKq5CXZ3djls.png" alt="" /></p><ul><li>DHCP Server也会给出应答，但是可能比伪装者慢</li><li>这样子A收到的就是伪装者的报文</li></ul><p><a href="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec06/26.png"><img src="https://s2.loli.net/2022/05/27/xArn73h4NB1gM2Z.png" alt="img" /></a></p><ul><li>A发出去的网关就是B，所以A上网的请求就发送给B，B转发给默认网关上网，然后返回信息给B</li><li>B再把返回的信息给A</li><li>很隐蔽的安全问题</li><li>除了服务器不应该启动DHCP进程</li></ul><h4 id="dhcp欺骗防范"><a class="markdownIt-Anchor" href="#dhcp欺骗防范"></a> DHCP欺骗防范</h4><ol><li>在交换机上启用DHCP Snooping功能 DHCP Snooping技术通过建立和维护DHCP Snooping绑定表过滤不可信任的DHCP信息:比如B的DHCP不能通过认证，交换机拒绝进行转发<ol><li>在交换机的全局配置模式中启用DHCP Snooping:<code>switch (config)# ip dncp snooping</code></li><li>在交换机的全局配置模式中开启需要启用DHCP Snooping 的VLAN&quot;:<code>switch (config)# ip dhcp snooping vlan vlan号</code></li><li>在端口配置子模式中将授权DHCP服务器所连的端口设为信任端口(缺省都是非信任的端口):就是连接到DHCP Server的端口:<code>switch (config-if)# ip dhcp snooping trust</code></li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;layer-5-the-session-layer-第五层-会话层&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#layer-5-the-session-layer-第五层-会话层&quot;&gt;&lt;/a&gt; Layer 5 - The Session</summary>
      
    
    
    
    <category term="计算机网络" scheme="http://little-hurui.cloud/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="互联网计算" scheme="http://little-hurui.cloud/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="计算机网络" scheme="http://little-hurui.cloud/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="互联网计算" scheme="http://little-hurui.cloud/tags/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>前缀和</title>
    <link href="http://little-hurui.cloud/2022/05/23/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    <id>http://little-hurui.cloud/2022/05/23/%E5%89%8D%E7%BC%80%E5%92%8C/</id>
    <published>2022-05-23T00:14:09.000Z</published>
    <updated>2022-05-26T04:37:15.855Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前缀和"><a class="markdownIt-Anchor" href="#前缀和"></a> 前缀和</h1><h2 id="6077-巫师的总力量和"><a class="markdownIt-Anchor" href="#6077-巫师的总力量和"></a> <a href="https://leetcode.cn/problems/sum-of-total-strength-of-wizards/">6077. 巫师的总力量和</a></h2><p>本周周赛第四题被全是1的用例卡了，想来是因为不熟悉 前缀和的使用和单调栈维护</p><h2 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h2><p>作为国王的统治者，你有一支巫师军队听你指挥。</p><p>给你一个下标从 0 开始的整数数组 strength ，其中 strength[i] 表示第 i 位巫师的力量值。对于连续的一组巫师（也就是这些巫师的力量值是 strength 的 子数组），总力量 定义为以下两个值的 乘积 ：</p><p>巫师中 最弱 的能力值。<br />组中所有巫师的个人力量值 之和 。<br />请你返回 所有 巫师组的 总 力量之和。由于答案可能很大，请将答案对 109 + 7 取余 后返回。</p><p>子数组 是一个数组里 非空 连续子序列。</p><p><strong>示例 1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">输入：strength = [1,3,1,2]</span><br><span class="line">输出：44</span><br><span class="line">解释：以下是所有连续巫师组：</span><br><span class="line">- [1,3,1,2] 中 [1] ，总力量值为 min([1]) * sum([1]) = 1 * 1 = 1</span><br><span class="line">- [1,3,1,2] 中 [3] ，总力量值为 min([3]) * sum([3]) = 3 * 3 = 9</span><br><span class="line">- [1,3,1,2] 中 [1] ，总力量值为 min([1]) * sum([1]) = 1 * 1 = 1</span><br><span class="line">- [1,3,1,2] 中 [2] ，总力量值为 min([2]) * sum([2]) = 2 * 2 = 4</span><br><span class="line">- [1,3,1,2] 中 [1,3] ，总力量值为 min([1,3]) * sum([1,3]) = 1 * 4 = 4</span><br><span class="line">- [1,3,1,2] 中 [3,1] ，总力量值为 min([3,1]) * sum([3,1]) = 1 * 4 = 4</span><br><span class="line">- [1,3,1,2] 中 [1,2] ，总力量值为 min([1,2]) * sum([1,2]) = 1 * 3 = 3</span><br><span class="line">- [1,3,1,2] 中 [1,3,1] ，总力量值为 min([1,3,1]) * sum([1,3,1]) = 1 * 5 = 5</span><br><span class="line">- [1,3,1,2] 中 [3,1,2] ，总力量值为 min([3,1,2]) * sum([3,1,2]) = 1 * 6 = 6</span><br><span class="line">- [1,3,1,2] 中 [1,3,1,2] ，总力量值为 min([1,3,1,2]) * sum([1,3,1,2]) = 1 * 7 = 7</span><br><span class="line">所有力量值之和为 1 + 9 + 1 + 4 + 4 + 4 + 3 + 5 + 6 + 7 = 44 。</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><blockquote><p><code>1 &lt;= strength.length &lt;= 105</code></p><p><code>1 &lt;= strength[i] &lt;= 109</code></p></blockquote><h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2><p>那么 很快就发现是一道板子题， 使用单调栈 + 前缀和 即可计算出答案</p><h2 id="前缀和-2"><a class="markdownIt-Anchor" href="#前缀和-2"></a> 前缀和</h2><p><strong>前缀和</strong>是一种很容易理解的算法，甚至不用专门去记忆它的算法模板，因为理解了思想之后，每个人都可以很快的写出算代码实现。</p><p>这个算法简单到看名字就知道是什么意思，简单到你从来没了解过但是面试时候现场想都能轻松的想到做法。</p><p>虽然前缀和很简单，但是它却经常被用于一些比较复杂的问题的中间步骤。</p><p>由于它过于简单，很容易被忽略。</p><p>因此，一些比较复杂的问题可能正是因为我们忽略了前缀和，才导致想不到解决方法</p><p>前缀和的主要用处：求任意区间的区间和。</p><blockquote><p><strong>假设</strong>：有 m 个查询，每个查询给出index：l,r<br /><strong>需求</strong>：计算从数组（数组长度假设为 n ）第 l 个元素到第 r 个元素的和。</p></blockquote><p>【一般思路】：遍历<code>[l,r]</code> 求和，计算时间复杂度是<code>O(n)</code>， 那 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span></span></span></span> 个查询的时间复杂度则是 <code>O(mn)</code>。</p><p>【前缀和】：非常快的时间求出多个区间的和。每个查询的时间复杂度是 <code>O(1)</code></p><p>具体解法如下：</p><p>前缀和计算区间 <code>[l,r]</code> 的区间和的思路：<code>s[r] - s[l-1]</code>。</p><p>即：</p><p>区间和 <strong>=</strong> 前 r 个元素的和 <strong>-</strong> 前 l-1 个元素的和。</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><p>维护一个前缀和数组arr，那么我们 <code>[l,r]</code>的 sum 即为 <code>arr[r+1] - arr[l]</code></p><p>那么<code>[L,R]</code>内所有子数组的元素和可以表示为</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi mathvariant="normal">Σ</mi><mrow><mi>r</mi><mo>=</mo><mi>i</mi><mo>+</mo><mn>1</mn></mrow><mrow><mi>R</mi><mo>+</mo><mn>1</mn></mrow></msubsup><msubsup><mi mathvariant="normal">Σ</mi><mrow><mi>l</mi><mo>=</mo><mi>L</mi></mrow><mrow><mi>i</mi></mrow></msubsup><mo>(</mo><mi>s</mi><mo>[</mo><mi>r</mi><mo>]</mo><mo>−</mo><mi>s</mi><mo>[</mo><mi>l</mi><mo>]</mo><mo>)</mo></mrow><annotation encoding="application/x-tex">\Sigma_{r = i+1}^{R+1}\Sigma_{l=L}^{i}(s[r]-s[l])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.881462em;"></span><span class="strut bottom" style="height:1.216657em;vertical-align:-0.335195em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathrm">Σ</span><span class="vlist"><span style="top:0.276864em;margin-left:0em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mrel">=</span><span class="mord mathit">i</span><span class="mbin">+</span><span class="mord mathrm">1</span></span></span></span><span style="top:-0.403131em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.00773em;">R</span><span class="mbin">+</span><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord"><span class="mord mathrm">Σ</span><span class="vlist"><span style="top:0.2831079999999999em;margin-left:0em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mrel">=</span><span class="mord mathit">L</span></span></span></span><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mopen">(</span><span class="mord mathit">s</span><span class="mopen">[</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mclose">]</span><span class="mbin">−</span><span class="mord mathit">s</span><span class="mopen">[</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span></p><p>$ = \Sigma_{r = i+1}^{R+1}((i-L+1) * s[r] - \Sigma^{i}_{l = L}s[l])$</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mo>(</mo><mi>i</mi><mo>−</mo><mi>L</mi><mo>+</mo><mn>1</mn><mo>)</mo><mo>∗</mo><msubsup><mi mathvariant="normal">Σ</mi><mrow><mi>r</mi><mo>=</mo><mi>i</mi><mo>+</mo><mn>1</mn></mrow><mrow><mi>R</mi><mo>+</mo><mn>1</mn></mrow></msubsup><mi>s</mi><mo>[</mo><mi>r</mi><mo>]</mo><mo>−</mo><mo>(</mo><mi>R</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo>)</mo><mo>∗</mo><msubsup><mi mathvariant="normal">Σ</mi><mrow><mi>l</mi><mo>=</mo><mi>L</mi></mrow><mrow><mi>i</mi></mrow></msubsup><mi>s</mi><mo>[</mo><mi>l</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">=(i-L+1)*\Sigma_{r = i+1}^{R+1}s[r] - (R - i + 1)*\Sigma_{l = L}^{i}s[l]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.881462em;"></span><span class="strut bottom" style="height:1.216657em;vertical-align:-0.335195em;"></span><span class="base textstyle uncramped"><span class="mrel">=</span><span class="mopen">(</span><span class="mord mathit">i</span><span class="mbin">−</span><span class="mord mathit">L</span><span class="mbin">+</span><span class="mord mathrm">1</span><span class="mclose">)</span><span class="mbin">∗</span><span class="mord"><span class="mord mathrm">Σ</span><span class="vlist"><span style="top:0.276864em;margin-left:0em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mrel">=</span><span class="mord mathit">i</span><span class="mbin">+</span><span class="mord mathrm">1</span></span></span></span><span style="top:-0.403131em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.00773em;">R</span><span class="mbin">+</span><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathit">s</span><span class="mopen">[</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mclose">]</span><span class="mbin">−</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.00773em;">R</span><span class="mbin">−</span><span class="mord mathit">i</span><span class="mbin">+</span><span class="mord mathrm">1</span><span class="mclose">)</span><span class="mbin">∗</span><span class="mord"><span class="mord mathrm">Σ</span><span class="vlist"><span style="top:0.2831079999999999em;margin-left:0em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mrel">=</span><span class="mord mathit">L</span></span></span></span><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathit">s</span><span class="mopen">[</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mclose">]</span></span></span></span></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">totalStrength</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; strength)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> n = strength.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">left</span><span class="params">(n,<span class="number">-1</span>)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">right</span><span class="params">(n,n)</span></span>;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(!st.<span class="built_in">empty</span>() &amp;&amp; strength[st.<span class="built_in">top</span>()] &gt;= strength[i])&#123;</span><br><span class="line">                right[st.<span class="built_in">top</span>()] = i;</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!st.<span class="built_in">empty</span>()) left[i] = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> s = <span class="number">0L</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ss</span><span class="params">(n+<span class="number">2</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            s += strength[i<span class="number">-1</span>];</span><br><span class="line">            ss[i+<span class="number">1</span>] = (ss[i] + s)%mod;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="type">long</span> l = left[i] + <span class="number">1</span>;</span><br><span class="line">            <span class="type">long</span> r = right[i]<span class="number">-1</span>;</span><br><span class="line">             <span class="type">long</span> tot = ((i - l + <span class="number">1</span>) * (ss[r + <span class="number">2</span>] - ss[i + <span class="number">1</span>]) - (r - i + <span class="number">1</span>) * (ss[i + <span class="number">1</span>] - ss[l])) % mod;</span><br><span class="line"></span><br><span class="line">            ans = (ans + strength[i] * tot) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//防止ans为负</span></span><br><span class="line">        <span class="keyword">return</span> (ans + mod) % mod;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前缀和&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前缀和&quot;&gt;&lt;/a&gt; 前缀和&lt;/h1&gt;
&lt;h2 id=&quot;6077-巫师的总力量和&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#6077-巫师的总力量和&quot;&gt;</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://little-hurui.cloud/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="常用算法" scheme="http://little-hurui.cloud/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/"/>
    
    <category term="板子" scheme="http://little-hurui.cloud/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%9D%BF%E5%AD%90/"/>
    
    
    <category term="Algorithm" scheme="http://little-hurui.cloud/tags/Algorithm/"/>
    
    <category term="前缀和" scheme="http://little-hurui.cloud/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
  </entry>
  
  <entry>
    <title>博弈论&amp;&amp;DP</title>
    <link href="http://little-hurui.cloud/2022/05/22/%E5%8D%9A%E5%BC%88%E8%AE%BA-DP/"/>
    <id>http://little-hurui.cloud/2022/05/22/%E5%8D%9A%E5%BC%88%E8%AE%BA-DP/</id>
    <published>2022-05-22T03:38:16.000Z</published>
    <updated>2022-05-22T08:46:02.589Z</updated>
    
    <content type="html"><![CDATA[<h1 id="博弈论-dp"><a class="markdownIt-Anchor" href="#博弈论-dp"></a> 博弈论 &amp;&amp; DP</h1><h2 id="464-我能赢吗"><a class="markdownIt-Anchor" href="#464-我能赢吗"></a> <a href="https://leetcode.cn/problems/can-i-win/">464. 我能赢吗</a></h2><p>在 “100 game” 这个游戏中，两名玩家轮流选择从 1 到 10 的任意整数，累计整数和，先使得累计整数和 达到或超过  100 的玩家，即为胜者。</p><p>如果我们将游戏规则改为 “玩家 不能 重复使用整数” 呢？</p><p>例如，两个玩家可以轮流从公共整数池中抽取从 1 到 15 的整数（不放回），直到累计整数和 &gt;= 100。</p><p>给定两个整数 maxChoosableInteger （整数池中可选择的最大数）和 desiredTotal（累计和），若先出手的玩家是否能稳赢则返回 true ，否则返回 false 。假设两位玩家游戏时都表现 最佳 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：maxChoosableInteger = 10, desiredTotal = 11</span><br><span class="line">输出：false</span><br><span class="line">解释：</span><br><span class="line">无论第一个玩家选择哪个整数，他都会失败。</span><br><span class="line">第一个玩家可以选择从 1 到 10 的整数。</span><br><span class="line">如果第一个玩家选择 1，那么第二个玩家只能选择从 2 到 10 的整数。</span><br><span class="line">第二个玩家可以通过选择整数 10（那么累积和为 11 &gt;= desiredTotal），从而取得胜利.</span><br><span class="line">同样地，第一个玩家选择任意其他整数，第二个玩家都会赢</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><blockquote><p>1 &lt;= maxChoosableInteger &lt;= 20<br />0 &lt;= desiredTotal &lt;= 300<br />通过次数22,938提交次数57,487</p></blockquote><h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2><p>这是一条 博弈论DP的题目（注意题目给的数据）</p><p>我们将  maxChoosableInteger  记作 m 那么 state 的范围 [0,1&lt;&lt;m - 1]</p><p>首先朴素二维状态我们想到 定义 <code>f[state][k]</code> 为当前已经被选择的数，在第k轮时先手选手是否能够获胜，但是这样会导致TLE</p><p>进一步发现，若能够优化轮数的维度，可以减一半的计算量，我们调整状态定义， <code>f[state]</code> 为当前状态 <code>state</code>， 当前先手能否获胜</p><p>同时调整递归函数 dfs(int state, int tot)， 通过判断 dfs(0 , 0)的值来得知</p><blockquote><p>这里调整的重点在于：将记录「原始回合的先后手发起 和 原始回合的先后手获胜情况」调整为「当前回合发起 和 当前回合获胜情况」</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> n,t;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; f;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> state,<span class="type">int</span> tot)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(f[state] != <span class="number">0</span>) <span class="keyword">return</span> f[state];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(((state&gt;&gt;i) &amp; <span class="number">1</span>) == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>( tot + <span class="number">1</span> + i &gt;= t) <span class="keyword">return</span> f[state] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">dfs</span>( state | (<span class="number">1</span> &lt;&lt; i), tot + i + <span class="number">1</span>) == <span class="number">-1</span>) <span class="keyword">return</span> f[state] = <span class="number">1</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> f[state] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canIWin</span><span class="params">(<span class="type">int</span> m,<span class="type">int</span> d)</span></span>&#123;</span><br><span class="line">        f = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">1</span>&lt;&lt;<span class="number">20</span>,<span class="number">0</span>);</span><br><span class="line">        n = m;</span><br><span class="line">        t = d;</span><br><span class="line">        <span class="keyword">if</span>(n * (n + <span class="number">1</span>)/<span class="number">2</span> &lt; t) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">0</span>) == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="更多"><a class="markdownIt-Anchor" href="#更多"></a> 更多</h2><p><a href="https://zhuanlan.zhihu.com/p/20611132">10170 Sprague-Grundy定理是怎么想出来的 - 知乎 (zhihu.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;博弈论-dp&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#博弈论-dp&quot;&gt;&lt;/a&gt; 博弈论 &amp;amp;&amp;amp; DP&lt;/h1&gt;
&lt;h2 id=&quot;464-我能赢吗&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://little-hurui.cloud/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Algorithm" scheme="http://little-hurui.cloud/tags/Algorithm/"/>
    
    <category term="动态规划" scheme="http://little-hurui.cloud/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="博弈论" scheme="http://little-hurui.cloud/tags/%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>植物大战僵尸</title>
    <link href="http://little-hurui.cloud/2022/05/21/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8/"/>
    <id>http://little-hurui.cloud/2022/05/21/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8/</id>
    <published>2022-05-21T02:23:05.000Z</published>
    <updated>2022-05-21T04:28:33.434Z</updated>
    
    <content type="html"><![CDATA[<h1 id="植物大战僵尸"><a class="markdownIt-Anchor" href="#植物大战僵尸"></a> 植物大战僵尸</h1><p>实现一个植物大战僵尸模拟器，判断玩家当前部署的植物能不能防止他们的脑子被僵尸吃掉。</p><p>请注意：为了控制难度，本题的一些规定与同名游戏不同，切忌将该游戏的经验代入本题。</p><h2 id="游戏地图"><a class="markdownIt-Anchor" href="#游戏地图"></a> 游戏地图</h2><p><img src="https://s2.loli.net/2022/05/21/DPfqW4i5FwReHz9.png" alt="" /></p><p>按照从左到右的顺序，整个布局由一幢房子、一个 <strong>5 行 9 列的花园</strong>和一个 <strong>5 行 1 列的僵尸初始位置</strong>组成，本题将花园和僵尸初始位置统称为<strong>地图</strong>。其中：</p><ul><li>玩家坐在最左侧的房子中，等待突破植物防线的僵尸吃掉自己的脑子</li><li>植物<strong>只能</strong>种植在花园的 5 × 9 个单元格中，且<strong>每个单元格最多可以种植一个植物</strong></li><li>所有僵尸初始时都位于僵尸初始位置，<strong>每个单元格中可以有多个僵尸</strong></li></ul><p>后文我们使用 <code>(X, Y)</code> 表示位于第 <code>X</code> 行第 <code>Y</code> 列的单元格</p><h2 id="植物说明"><a class="markdownIt-Anchor" href="#植物说明"></a> 植物说明</h2><p>所有植物都有以下特点：</p><ul><li>生命值降为 0 后<strong>立刻</strong>从地图上消失</li><li>不可以移动</li></ul><p>此外，<strong>每种植物还有自己的特性</strong></p><h3 id="普通植物"><a class="markdownIt-Anchor" href="#普通植物"></a> 普通植物</h3><h4 id="豌豆射手-pea"><a class="markdownIt-Anchor" href="#豌豆射手-pea"></a> 豌豆射手 pea</h4><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">类型</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">HP</td><td style="text-align:left"><code>int</code></td><td style="text-align:left">豌豆射手的生命值，大于<code>0</code></td></tr><tr><td style="text-align:left">ATK</td><td style="text-align:left"><code>int</code></td><td style="text-align:left">豌豆射手的攻击力，大于<code>0</code></td></tr></tbody></table><ul><li>豌豆射手会发射豌豆，攻击<strong>与其在同一个单元格</strong>或<strong>与其同行且在其右侧</strong>的僵尸</li><li>豌豆射手发射出的豌豆在进入第一个有僵尸的单元格后会爆炸，对<strong>该单元格内所有僵尸</strong>造成<code>ATK</code>点伤害</li><li>豌豆射手<strong>会阻挡僵尸前进</strong>（即，<strong>僵尸进入豌豆射手所在的单元格后会停止前进）</strong></li><li>在下图所示的情况中，位于 <code>(0, 1)</code> 的豌豆射手只能攻击到位于 <code>(0, 4)</code> 的僵尸，而不能攻击到位于 <code>(0, 6)</code> 的僵尸</li></ul><p><img src="https://s2.loli.net/2022/05/21/QKb351EZvtukfA2.png" alt="" /></p><h4 id="坚果-nut"><a class="markdownIt-Anchor" href="#坚果-nut"></a> 坚果 nut</h4><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">类型</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">HP</td><td style="text-align:left"><code>int</code></td><td style="text-align:left">坚果的生命值，大于<code>0</code></td></tr></tbody></table><ul><li>坚果无法进行攻击</li><li>坚果<strong>会阻挡僵尸前进</strong></li></ul><h3 id="进阶植物"><a class="markdownIt-Anchor" href="#进阶植物"></a> 进阶植物</h3><p><strong>只有20%的测试用例会出现以下植物，请优先考虑普通植物和僵尸的实现！</strong></p><h4 id="毁灭土豆雷-potato"><a class="markdownIt-Anchor" href="#毁灭土豆雷-potato"></a> 毁灭土豆雷 potato</h4><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">类型</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">ATK</td><td style="text-align:left"><code>int</code></td><td style="text-align:left">毁灭土豆雷的攻击力，大于<code>0</code></td></tr></tbody></table><ul><li>毁灭土豆雷的<strong>最大攻击范围</strong>是一个以自身所在单元格为中心的边长为 <code>3</code>的正方形，该范围中的所有僵尸都会被攻击，受到<code>ATK</code>点伤害，<strong>下图展示了2个毁灭土豆雷的攻击范围。</strong></li></ul><p><img src="https://s2.loli.net/2022/05/21/izwPfTLQnaDbHeo.png" alt="" /></p><p>图中显示了2个毁灭土豆雷的攻击范围，坐标分别为(3, 4)和(4, 8)</p><ul><li><p>毁灭土豆雷初始时处于<strong>休眠态</strong>，<strong>休眠态</strong>的毁灭土豆雷<strong>不会在植物攻击阶段（见下方游戏规则）进行攻击</strong></p></li><li><p>僵尸会激活<strong>和自身在同一单元格中</strong>的毁灭土豆雷，<strong>激活后</strong>的毁灭土豆雷<strong>会在下一个回合的植物攻击阶段进行攻击</strong></p></li><li><p>毁灭土豆雷攻击后会<strong>立刻</strong>从地图上消失</p></li><li><p>毁灭土豆雷</p><p>不会阻挡</p><p>僵尸前进，也</p><p>不会被僵尸攻击</p><h2 id="僵尸说明"><a class="markdownIt-Anchor" href="#僵尸说明"></a> 僵尸说明</h2><p>僵尸属性如下</p></li></ul><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">类型</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">HP</td><td style="text-align:left"><code>int</code></td><td style="text-align:left">僵尸的生命值，大于<code>0</code></td></tr><tr><td style="text-align:left">ATK</td><td style="text-align:left"><code>int</code></td><td style="text-align:left">僵尸的攻击力，大于<code>0</code></td></tr><tr><td style="text-align:left">SPEED</td><td style="text-align:left"><code>int</code></td><td style="text-align:left">僵尸的移动速度，大于<code>0</code>（每回合移动多少单元格）</td></tr></tbody></table><ul><li>僵尸每回合会在自己所在的行向左一格一格移动，直到移动了<code>SPEED</code>个单元格，或者被植物阻挡</li><li>僵尸在<strong>进入有豌豆射手或坚果的单元格后会被阻挡</strong>（指停止前进）</li><li>僵尸只能攻击自身所在单元格内的植物</li><li>僵尸生命值降为 0 后会<strong>立刻从地图上消失</strong></li></ul><h2 id="游戏规则"><a class="markdownIt-Anchor" href="#游戏规则"></a> 游戏规则</h2><ul><li><p>所有的植物<strong>在游戏开始前</strong>就按照输入全部布置好，不会在游戏开始后布置新的植物</p></li><li><p>所有的僵尸<strong>在游戏开始前</strong>就按照输入全部布置好，不会在游戏开始后布置新的僵尸</p></li><li><p>游戏按回合进行，每个回合流程如下：</p><ol><li><p>所有</p><p>存活的豌豆射手和被激活的毁灭土豆雷按照从左到右，从上到下的顺序</p><p>各自进行一次攻击</p><ul><li>如上图所示，假设土豆雷是激活状态，攻击顺序为 <code>(0, 0)</code> <code>(0, 3)</code> <code>(1, 2)</code> <code>(2, 3)</code></li></ul></li><li><p>所有<strong>存活的僵尸</strong>向左移动，如果移动中进入<strong>豌豆射手和坚果</strong>所在的单元格，则必须<strong>在当前单元格停下</strong></p></li><li><p>所有<strong>存活的僵尸</strong>对自身所在单元格内的植物进行一次攻击</p></li><li><p>输出指定的内容（见后文输出描述）</p></li><li><p>判断游戏是否结束</p></li></ol></li></ul><p><img src="https://s2.loli.net/2022/05/21/M1kcNZvY6dlX3qV.png" alt="" /></p><p><strong>游戏结束条件：</strong></p><ul><li>有僵尸进入了玩家的房子（指<strong>僵尸从左侧离开花园</strong>），僵尸获胜</li><li>所有僵尸死亡，植物获胜</li></ul><h1 id="输入输出"><a class="markdownIt-Anchor" href="#输入输出"></a> 输入输出</h1><h2 id="输入描述"><a class="markdownIt-Anchor" href="#输入描述"></a> 输入描述</h2><p>第一行为空格隔开的两个数<code>[num_p] [num_z]</code>，分别表示植物数量和僵尸数量，保证这两个数是<code>int</code>类型的非负整数</p><p>接下来的<code>[num_p]</code>行，每行输入一个植物，三种植物的输入方式分别如下：</p><ul><li><input type="checkbox" id="checkbox0" checked="true" /><label for="checkbox0">[Y]</label>，表示在<code>(X, Y)</code>位置布置一个生命值为<code>HP</code>，攻击力为<code>ATK</code>的豌豆射手</li><li><input type="checkbox" id="checkbox1" checked="true" /><label for="checkbox1">[Y]</label>，表示在<code>(X, Y)</code>位置布置一个生命值为<code>HP</code>的坚果</li><li><input type="checkbox" id="checkbox2" checked="true" /><label for="checkbox2">[Y]</label>表示在<code>(X, Y)</code>位置布置一个攻击力为<code>ATK</code>的毁灭土豆雷</li></ul><p><strong>X 类型为 <code>int</code> 取值范围为 <code>[0, 4]</code></strong>，<strong>Y 类型为 <code>int</code> 取值范围为 <code>[0, 8]</code></strong>。植物会按照从左到右，从上到下的顺序（也就是植物攻击的顺序）给出，且保证所有输入的植物坐标不重复</p><p>接下来的<code>[num_z]</code>行，每行输入一只僵尸，僵尸的输入方式如下：</p><ol><li><code>[HP] [ATK] [SPEED] [X]</code>，表示在僵尸初始位置的第<code>X</code>行布置一个生命值为<code>HP</code>，攻击力为<code>ATK</code>，速度为<code>SPEED</code>的僵尸</li></ol><p><strong>一个单元格内可能出现多个僵尸，X 类型为 <code>int</code>取值范围：<code>[0, 4]</code></strong></p><h2 id="输出描述"><a class="markdownIt-Anchor" href="#输出描述"></a> 输出描述</h2><p><strong>在每个回合的“输出指定的内容”阶段输出一行，每行三个数，中间用空格隔开：</strong><br /><code>[当前回合序号，从1开始] [剩余植物数量] [剩余僵尸数量]</code></p><p>**注意：**进入房子的僵尸也需要计入“剩余僵尸数量”中</p><p><strong>游戏结束时额外输出一行</strong><br />如果植物胜利，输出：<br /><code>plants win</code><br />如果僵尸胜利，输出：<br /><code>zombies win</code></p><h1 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h1><h2 id="示例1"><a class="markdownIt-Anchor" href="#示例1"></a> 示例1</h2><p><strong>输入</strong></p><p>复制代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 0</span><br><span class="line">pea 1 1 0 0</span><br></pre></td></tr></table></figure><p><strong>输入说明</strong></p><ul><li><code>1 0</code>：部署1棵植物，0个僵尸</li><li><code>pea 1 1 0 0</code>：一个豌豆射手，生命值1，攻击力1，种在地图上<code>(0, 0)</code>的位置</li></ul><p><strong>输出</strong></p><p>复制代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 1 0</span><br><span class="line">plants win</span><br></pre></td></tr></table></figure><p><strong>流程说明</strong></p><ul><li><p>第一个回合结束之后，没有僵尸存活，游戏结束，植物获胜</p><h2 id="示例2"><a class="markdownIt-Anchor" href="#示例2"></a> 示例2</h2><p>输入</p><p>复制代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2 1</span><br><span class="line">nut 2 0 1</span><br><span class="line">pea 2 1 0 7</span><br><span class="line">20 1 1 0 </span><br></pre></td></tr></table></figure></li></ul><p><strong>输入说明</strong></p><ul><li><code>2 1</code>：部署2棵植物，1个僵尸</li><li><code>nut 2 0 1</code>：一个坚果，生命值2，种在地图上<code>(0, 1)</code>的位置</li><li><code>pea 2 1 0 7</code>：一个豌豆射手，生命值2，攻击力1，种在地图上<code>(0, 7)</code>的位置</li><li><code>20 1 1 0</code>：一个僵尸，生命值20，攻击力1，速度1，部署在<code>(0, 9)</code>的位置</li></ul><p>输出</p><p>复制代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1 2 1</span><br><span class="line">2 2 1</span><br><span class="line">3 1 1</span><br><span class="line">4 1 1</span><br><span class="line">5 1 1</span><br><span class="line">6 1 1</span><br><span class="line">7 1 1</span><br><span class="line">8 1 1</span><br><span class="line">9 1 1</span><br><span class="line">10 0 1</span><br><span class="line">11 0 1</span><br><span class="line">12 0 1</span><br><span class="line">zombies win</span><br></pre></td></tr></table></figure><p><strong>流程说明</strong></p><ul><li>第一个回合，所有的植物按照输入的顺序进行攻击，（0， 7）位置的豌豆攻击（0，9）位置的僵尸，因为豌豆攻击力是1，所以僵尸还剩19生命值，接着僵尸开始移动，由于速度是1，并且所在单元格没有阻挡植物，移动到（0，8），最后僵尸进行攻击，由于所在单元格内没有植物，没有攻击行为</li><li>第二个回合，（0， 7）位置的豌豆攻击（0，8）位置的僵尸，僵尸还剩18生命值，僵尸所在单元格没有阻挡植物，移动到（0，7），此时僵尸所在单元格有豌豆阻挡，僵尸攻击豌豆，由于僵尸攻击力是1，豌豆还剩1生命值</li><li>第三个回合，（0， 7）位置的豌豆攻击（0，7）位置的僵尸，僵尸还剩17生命值，僵尸所在单元格有豌豆阻挡，无法移动，僵尸攻击豌豆，由于僵尸攻击力是1，豌豆还剩0生命值，豌豆消失，此时游戏还剩下一个植物，一个僵尸</li><li>第四个回合，僵尸移动到（0，6）</li><li>第五个回合，僵尸移动到（0，5）</li><li>第六个回合，僵尸移动到（0，4）</li><li>第七个回合，僵尸移动到（0，3）</li><li>第八个回合，僵尸移动到（0，2）</li><li>第九个回合，僵尸移动到（0，1），僵尸攻击坚果，坚果还剩1生命值</li><li>第十个回合，僵尸被坚果阻挡，无法移动，僵尸攻击坚果，坚果还剩0生命值，坚果消失，此时游戏没有植物存活，还有一个僵尸</li><li>第十一个回合，没有植物存活，僵尸移动到（0，0）</li><li>第十二个回合，僵尸移动到房子区域，游戏结束，僵尸获胜</li></ul><h2 id="示例3"><a class="markdownIt-Anchor" href="#示例3"></a> 示例3</h2><p><strong>输入</strong></p><p>复制代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">5 5</span><br><span class="line">pea 2 2 2 0</span><br><span class="line">pea 2 2 2 1</span><br><span class="line">pea 2 2 2 2</span><br><span class="line">pea 2 1 2 3</span><br><span class="line">nut 20 2 6</span><br><span class="line">15 1 2 2</span><br><span class="line">30 1 1 2</span><br><span class="line">15 1 3 2</span><br><span class="line">20 3 1 2</span><br><span class="line">15 1 1 2</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><p>复制代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1 5 5</span><br><span class="line">2 5 5</span><br><span class="line">3 5 4</span><br><span class="line">4 5 3</span><br><span class="line">5 5 1</span><br><span class="line">6 5 1</span><br><span class="line">7 5 0</span><br><span class="line">plants win</span><br></pre></td></tr></table></figure><h2 id="示例4"><a class="markdownIt-Anchor" href="#示例4"></a> 示例4</h2><p><strong>输入</strong></p><p>复制代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">3 2</span><br><span class="line">pea 2 2 0 0</span><br><span class="line">nut 10 0 7</span><br><span class="line">potato 10 2 8</span><br><span class="line">10 2 1 0</span><br><span class="line">10 2 6 2</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><p>复制代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 3 2</span><br><span class="line">2 2 2</span><br><span class="line">zombies win</span><br></pre></td></tr></table></figure><h1 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h1><p>这是Cpp第二次机考的题目，考试的时候由于个人原因，没有能很好的完成（13/20），今天自己重构了一下。</p><p>考试时候能想出用三维数组存数据也是绝了，其实我们只需要实时记录位置就可以了。</p><p>这个故事告诉我们，一定要先想好怎么写，然后才能开始敲代码呜呜呜</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GAME</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> gameindex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Zombies</span>;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Plants</span>;</span><br><span class="line">    vector&lt;Plants*&gt;  All_P;</span><br><span class="line">    vector&lt;Zombies*&gt; All_Z;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Plants</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="type">int</span> HP;</span><br><span class="line">        <span class="type">int</span> ATK;</span><br><span class="line">        pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; location;</span><br><span class="line">        <span class="type">int</span> type;</span><br><span class="line">        <span class="type">int</span> state = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Plants</span>(<span class="type">int</span> hp,<span class="type">int</span> atk,<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> type):<span class="built_in">HP</span>(hp),<span class="built_in">ATK</span>(atk),<span class="built_in">location</span>(&#123;x,y&#125;),<span class="built_in">type</span>(type)&#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Zombies</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="type">int</span> HP;</span><br><span class="line">        <span class="type">int</span> ATK;</span><br><span class="line">        pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; location;</span><br><span class="line">        <span class="type">int</span> SPEED;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Zombies</span>(<span class="type">int</span> hp,<span class="type">int</span> atk,<span class="type">int</span> x,<span class="type">int</span> speed):<span class="built_in">HP</span>(hp),<span class="built_in">ATK</span>(atk),<span class="built_in">location</span>(&#123;x,<span class="number">9</span>&#125;),<span class="built_in">SPEED</span>(speed)&#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Game_init</span><span class="params">(vector&lt;Plants*&gt; P,vector&lt;Zombies*&gt; Z)</span></span>&#123;</span><br><span class="line">        All_P = P;</span><br><span class="line">        All_Z = Z;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Plant_Attack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(All_P.<span class="built_in">begin</span>(),All_P.<span class="built_in">end</span>(),[](Plants* a,Plants* b)-&gt;<span class="type">bool</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(a-&gt;location.first &lt; b-&gt;location.first) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(a-&gt;location.first==b-&gt;location.first) <span class="keyword">return</span> a-&gt;location.second&lt;b-&gt;location.second;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">sort</span>(All_Z.<span class="built_in">begin</span>(),All_Z.<span class="built_in">end</span>(),[](Zombies* a,Zombies* b)-&gt;<span class="type">bool</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(a-&gt;location.first &lt; b-&gt;location.first) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(a-&gt;location.first==b-&gt;location.first) <span class="keyword">return</span> a-&gt;location.second&lt;b-&gt;location.second;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//按照 从左向右 从上到下的顺序</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;All_P.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            Plants* p = All_P[i];</span><br><span class="line">            <span class="comment">//豌豆</span></span><br><span class="line">            <span class="keyword">if</span>(p-&gt;type==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="type">int</span> atk = p-&gt;ATK;</span><br><span class="line">                <span class="type">int</span> attacked = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">                vector&lt;Zombies*&gt; New_Zom;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;All_Z.<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">                    Zombies* z = All_Z[j];</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(attacked==<span class="number">100</span> &amp;&amp; z-&gt;HP &gt; <span class="number">0</span> &amp;&amp; z-&gt;location.first == p-&gt;location.first)&#123;</span><br><span class="line">                        attacked = z-&gt;location.second;</span><br><span class="line">                        <span class="comment">//find which will be attacked</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(z-&gt;location.first == p-&gt;location.first &amp;&amp; z-&gt;location.second == attacked)&#123;</span><br><span class="line">                        z-&gt;HP -= atk;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;All_Z.<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(All_Z[j]-&gt;HP&gt;<span class="number">0</span>) New_Zom.<span class="built_in">push_back</span>(All_Z[j]);</span><br><span class="line">                &#125;</span><br><span class="line">                All_Z = New_Zom;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;type==<span class="number">3</span>)&#123;</span><br><span class="line">                <span class="comment">//土豆类被激活</span></span><br><span class="line">                <span class="keyword">if</span>(p-&gt;state==<span class="number">2</span>)&#123;</span><br><span class="line">                    <span class="type">int</span> l = p-&gt;location.first<span class="number">-1</span>;</span><br><span class="line">                    <span class="type">int</span> r = p-&gt;location.first+<span class="number">1</span>;</span><br><span class="line">                    <span class="type">int</span> u = p-&gt;location.second<span class="number">-1</span>;</span><br><span class="line">                    <span class="type">int</span> d = p-&gt;location.second+<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;All_Z.<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">                        Zombies* z = All_Z[j];</span><br><span class="line">                        <span class="type">int</span> x = z-&gt;location.first;</span><br><span class="line">                        <span class="type">int</span> y = z-&gt;location.second;</span><br><span class="line">                        <span class="keyword">if</span>((x &gt;= l &amp;&amp; x &lt;= r) &amp;&amp; (y &gt;= u &amp;&amp; y &lt;= d))&#123;</span><br><span class="line">                            z-&gt;HP -= p-&gt;ATK;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    p-&gt;HP = <span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Zombie_Move</span><span class="params">()</span></span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">map</span>(<span class="number">5</span>,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">10</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;All_P.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            Plants* p = All_P[i];</span><br><span class="line">            map[p-&gt;location.first][p-&gt;location.second] = p-&gt;type;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;All_Z.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            Zombies* z = All_Z[i];</span><br><span class="line">            <span class="type">int</span> x = z-&gt;location.first;</span><br><span class="line">            <span class="type">int</span> y = z-&gt;location.second;</span><br><span class="line">            <span class="type">int</span> s = z-&gt;SPEED;</span><br><span class="line">            <span class="keyword">while</span>((map[x][y]==<span class="number">0</span>||map[x][y]==<span class="number">3</span>) &amp;&amp; y&gt;z-&gt;location.second-s)&#123;</span><br><span class="line">                <span class="keyword">if</span>(map[x][y]==<span class="number">3</span>)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;All_P.<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">                        Plants* p = All_P[j];</span><br><span class="line">                        <span class="keyword">if</span>(p-&gt;location.first==x &amp;&amp; p-&gt;location.second==y)&#123;</span><br><span class="line">                            p-&gt;state = <span class="number">2</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                y--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(map[x][y]==<span class="number">3</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;All_P.<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">                    Plants* p = All_P[j];</span><br><span class="line">                    <span class="keyword">if</span>(p-&gt;location.first==x &amp;&amp; p-&gt;location.second==y)&#123;</span><br><span class="line">                        p-&gt;state = <span class="number">2</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            z-&gt;location.second = y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Zombie_Attack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">map</span>(<span class="number">5</span>,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">10</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;All_P.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            Plants* p = All_P[i];</span><br><span class="line">            map[p-&gt;location.first][p-&gt;location.second] = p-&gt;type;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;All_Z.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            Zombies* z = All_Z[i];</span><br><span class="line">            <span class="type">int</span> x  = z-&gt;location.first;</span><br><span class="line">            <span class="type">int</span> y  = z-&gt;location.second;</span><br><span class="line">            <span class="type">int</span> atk= z-&gt;ATK;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(map[x][y]!=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;All_P.<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">                    Plants* p = All_P[j];</span><br><span class="line">                    <span class="keyword">if</span>(p-&gt;location.first== x &amp;&amp; p-&gt;location.second == y)&#123;</span><br><span class="line">                        p-&gt;HP -= atk;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            vector&lt;Plants*&gt; New_P;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;All_P.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(All_P[i]-&gt;HP&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    New_P.<span class="built_in">push_back</span>(All_P[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            All_P = New_P;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Output</span><span class="params">()</span></span>&#123;</span><br><span class="line">        gameindex++;</span><br><span class="line">        cout&lt;&lt;gameindex&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;All_P.<span class="built_in">size</span>()&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;All_Z.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">Over</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//僵尸全死了</span></span><br><span class="line">        <span class="keyword">if</span>(All_Z.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Plants win&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;All_Z.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(All_Z[i]-&gt;location.second&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;Zombies win&quot;</span>&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    GAME* game = <span class="keyword">new</span> <span class="built_in">GAME</span>();</span><br><span class="line">    vector&lt;GAME::Plants*&gt;  Ps;</span><br><span class="line">    vector&lt;GAME::Zombies*&gt; Zs;</span><br><span class="line">    <span class="type">int</span> num_p,num_z; cin &gt;&gt; num_p &gt;&gt; num_z;</span><br><span class="line">    <span class="keyword">while</span>(num_p-- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        string type; cin &gt;&gt; type;</span><br><span class="line">        <span class="type">int</span> hp,atk,x,y;</span><br><span class="line">        <span class="keyword">if</span>(type == <span class="string">&quot;pea&quot;</span>)&#123;</span><br><span class="line">            cin &gt;&gt; hp &gt;&gt; atk &gt;&gt; x &gt;&gt; y;</span><br><span class="line">            Ps.<span class="built_in">push_back</span>(<span class="keyword">new</span> GAME::<span class="built_in">Plants</span>(hp,atk,x,y,<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(type==<span class="string">&quot;nut&quot;</span>)&#123;</span><br><span class="line">            cin &gt;&gt; hp &gt;&gt; x &gt;&gt; y;</span><br><span class="line">            Ps.<span class="built_in">push_back</span>(<span class="keyword">new</span> GAME::<span class="built_in">Plants</span>(hp,<span class="number">0</span>,x,y,<span class="number">2</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(type==<span class="string">&quot;potato&quot;</span>)&#123;</span><br><span class="line">            cin &gt;&gt; atk &gt;&gt; x &gt;&gt; y;</span><br><span class="line">            Ps.<span class="built_in">push_back</span>(<span class="keyword">new</span> GAME::<span class="built_in">Plants</span>(<span class="number">1000</span>,atk,x,y,<span class="number">3</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(num_z-- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="type">int</span> hp,atk,speed,x;</span><br><span class="line">        cin &gt;&gt; hp &gt;&gt; atk &gt;&gt; speed &gt;&gt; x;</span><br><span class="line">        Zs.<span class="built_in">push_back</span>(<span class="keyword">new</span> GAME::<span class="built_in">Zombies</span>(hp,atk,x,speed));</span><br><span class="line">    &#125;</span><br><span class="line">    game-&gt;<span class="built_in">Game_init</span>(Ps,Zs);</span><br><span class="line">    <span class="type">bool</span> isOver = game-&gt;<span class="built_in">Over</span>();</span><br><span class="line">    <span class="keyword">while</span>(!isOver)&#123;</span><br><span class="line">        game-&gt;<span class="built_in">Plant_Attack</span>();</span><br><span class="line">        game-&gt;<span class="built_in">Zombie_Move</span>();</span><br><span class="line">        game-&gt;<span class="built_in">Zombie_Attack</span>();</span><br><span class="line">        game-&gt;<span class="built_in">Output</span>();</span><br><span class="line">        isOver = game-&gt;<span class="built_in">Over</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;植物大战僵尸&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#植物大战僵尸&quot;&gt;&lt;/a&gt; 植物大战僵尸&lt;/h1&gt;
&lt;p&gt;实现一个植物大战僵尸模拟器，判断玩家当前部署的植物能不能防止他们的脑子被僵尸吃掉。&lt;/p&gt;
&lt;p&gt;请注意：为了控制难度，</summary>
      
    
    
    
    <category term="C++" scheme="http://little-hurui.cloud/categories/C/"/>
    
    
    <category term="模拟" scheme="http://little-hurui.cloud/tags/%E6%A8%A1%E6%8B%9F/"/>
    
    <category term="C++高级程序设计" scheme="http://little-hurui.cloud/tags/C-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="http://little-hurui.cloud/2022/05/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://little-hurui.cloud/2022/05/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-05-19T06:50:19.000Z</published>
    <updated>2022-05-23T10:53:31.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式"><a class="markdownIt-Anchor" href="#设计模式"></a> 设计模式</h1><h1 id="可修改性及其基本实现机制"><a class="markdownIt-Anchor" href="#可修改性及其基本实现机制"></a> 可修改性及其基本实现机制</h1><ol><li>实现的<strong>可修改性</strong>:涉及到大的场景的修改<ol><li>对已有实现的修改</li><li>例如：修改现有促销策略</li></ol></li><li>实现的<strong>可扩展性</strong>(DIP &amp; OCP)<ol><li>对新的实现的扩展</li><li>例如：增加一条新的促销策略(策略模式)</li></ol></li><li>实现的<strong>灵活性</strong><ol><li>对实现的动态配置</li><li>例如：动态修改更改某商品对应促销策略</li></ol></li></ol><h2 id="如何实现可修改性-重要"><a class="markdownIt-Anchor" href="#如何实现可修改性-重要"></a> 如何实现可修改性？ 重要</h2><ol><li>接口与实现的分离</li></ol><h2 id="如何将接口与实现的分离-java视角"><a class="markdownIt-Anchor" href="#如何将接口与实现的分离-java视角"></a> 如何将接口与实现的分离 – Java视角</h2><ol><li>通过接口与实现该接口的类，将接口与实现相分离</li><li>通过子类继承父类，将父类的接口与子类的实现相分离:通过继承的方式，在一定程度上实现了接口与实现的分离，但是也使得子类继承了父类的接口，使得灵活性略有下降。</li><li>Eg.课本263页</li></ol><h2 id="实现接口interface"><a class="markdownIt-Anchor" href="#实现接口interface"></a> 实现接口(interface)</h2><ol><li>interface:定义了规约</li><li>实现class:实现了规约</li></ol><p><img src="https://s2.loli.net/2022/05/19/kcif2nCbRJxWhI6.png" alt="" /></p><h2 id="类图中的标志物的含义"><a class="markdownIt-Anchor" href="#类图中的标志物的含义"></a> 类图中的标志物的含义</h2><ol><li>虚线箭头:依赖</li><li>实线箭头:关联(两侧写数量)</li><li>空菱形在一侧的实现箭头:聚合</li><li>实菱形在一侧的实现箭头:合成</li><li>空心实线箭头:泛化(extends)</li><li>空心虚线箭头:实现(implements)</li></ol><h2 id="类图与依赖关系"><a class="markdownIt-Anchor" href="#类图与依赖关系"></a> 类图与依赖关系</h2><ol><li>Client、Interface_A、Class_A1之间是什么关系？</li><li>Client和Class_A1是否存在依赖关系？</li></ol><h2 id="继承"><a class="markdownIt-Anchor" href="#继承"></a> 继承</h2><ol><li>父类定义了规约(contract)</li><li>子类实现了规约(contract)</li></ol><p><img src="https://s2.loli.net/2022/05/19/fKbFWwylA5jupIT.png" alt="" /></p><h2 id="类图与依赖关系-2"><a class="markdownIt-Anchor" href="#类图与依赖关系-2"></a> 类图与依赖关系</h2><ol><li>Client、Super_A、Sub_A1之间是什么关系？</li><li>Client和Sub_A1是否存在依赖关系？不</li></ol><h2 id="实现的可修改性"><a class="markdownIt-Anchor" href="#实现的可修改性"></a> 实现的可修改性</h2><ol><li>对于实现的可修改性，无论是Class_A1还是Sub_A1的method_A方法的实现的修改都和Client中的调用代码没有任何耦合性。</li></ol><h3 id="扩展"><a class="markdownIt-Anchor" href="#扩展"></a> 扩展</h3><p><img src="https://s2.loli.net/2022/05/19/cuReXHbKzMN6G3k.png" alt="" /></p><h2 id="实现的可扩展性"><a class="markdownIt-Anchor" href="#实现的可扩展性"></a> 实现的可扩展性</h2><ol><li>对于实现的可扩展性，我们可以通过 Class_A2还是Sub_A2的创建来实现。</li></ol><h2 id="实现的灵活性"><a class="markdownIt-Anchor" href="#实现的灵活性"></a> 实现的灵活性</h2><p><img src="https://s2.loli.net/2022/05/19/4cJ2PmqdaAeoif7.png" alt="" /></p><h2 id="继承的优点"><a class="markdownIt-Anchor" href="#继承的优点"></a> 继承的优点</h2><ol><li>虽然继承也能很好的完成接口与实现的分离，但是继承还有他独有的特征。</li><li>子类不但继承了父类的接口还继承了父类的实现，这可以更好的进行代码的重用。</li></ol><h2 id="继承的缺点"><a class="markdownIt-Anchor" href="#继承的缺点"></a> 继承的缺点</h2><ol><li>继承的父类与所有子类存在共有接口的耦合性。当父类接口发生改变的时候，子类的接口就一定会更改，这样就会影响到 Client代码。</li><li>而且当子类创建对象的时候，就决定了其实现的选择，没法再动态的修改</li></ol><h2 id="组合"><a class="markdownIt-Anchor" href="#组合"></a> 组合</h2><ol><li>而利用接口的组成关系，却能在实现接口和实现的前提下，体现更好的灵活性。前端类和后端类是组合关系。前段类重用了后端类的代码。</li><li>考虑到软件工程中的人的重要性。</li></ol><p><img src="https://s2.loli.net/2022/05/19/IOlXZChuNdq1Tg9.png" alt="" /></p><h3 id="组合的优点"><a class="markdownIt-Anchor" href="#组合的优点"></a> 组合的优点</h3><ol><li>前端和后端在接口上不存在耦合性。当后端接口发送改变的时候，并不会直接影响到Client代码。</li><li>后端类的实现亦可以动态创建、动态配置、动态销毁，非常灵活。</li></ol><h1 id="设计模式-2"><a class="markdownIt-Anchor" href="#设计模式-2"></a> 设计模式</h1><h2 id="why为什么使用设计模式"><a class="markdownIt-Anchor" href="#why为什么使用设计模式"></a> Why？为什么使用设计模式</h2><ol><li>设计OO软件非常困难</li><li>设计可重用的OO软件-难度更大</li><li>经验丰富的OO设计师可以做出出色的设计</li><li>新设计师倾向于使用以前使用的非OO技术</li><li>经验丰富的设计师知道一些东西-这是什么？</li><li>专家设计师知道不能从第一原则中解决所有问题</li><li>复用的解决方案</li><li>这些模式使面向对象的设计更加灵活，优雅并且最终可重用。</li></ol><h2 id="什么是设计模式-what-is-a-design-pattern"><a class="markdownIt-Anchor" href="#什么是设计模式-what-is-a-design-pattern"></a> 什么是设计模式 What is a design pattern</h2><ol><li>设计模式:抽象一个重复的设计结构</li><li>包含类和/或对象<ol><li>依赖</li><li>结构</li><li>互动，或</li><li>约定</li></ol></li><li>提炼设计经验</li></ol><p><img src="https://s2.loli.net/2022/05/19/VNmR6awCrLPiSFl.png" alt="" /></p><h2 id="模式"><a class="markdownIt-Anchor" href="#模式"></a> 模式</h2><ol><li>典型问题</li><li>设计分析</li><li>解决方案</li><li>案例</li></ol><h2 id="解决方案"><a class="markdownIt-Anchor" href="#解决方案"></a> 解决方案</h2><ol><li>组成与协作：描述了设计中涉及的各个类的组成成分，他们之间的相互关系及各自的职责和协作方式。</li><li>应用场景：描述了应该何时使用模式。它解释了设计模式所要解决的问题，以及解决这个问题时所面临的特点的环境、限制条件、场景等。这也是我们在应用某种模式之前，需要仔细去体察的。</li><li>使用注意点：因为模式只是一个模板，他可以应用与多种不同场合，所以解决方案并不描述一个具体的实现，而是提供解决方案的一个抽象模型。</li></ol><h1 id="设计模式-3"><a class="markdownIt-Anchor" href="#设计模式-3"></a> 设计模式</h1><h1 id="策略模式"><a class="markdownIt-Anchor" href="#策略模式"></a> 策略模式</h1><p>定义了算法族，分别封装起来，让他们互相替换，此模式让算法的变化独立于使用算法的客户</p><h1 id="抽象工厂模式"><a class="markdownIt-Anchor" href="#抽象工厂模式"></a> 抽象工厂模式</h1><h3 id="工厂模式"><a class="markdownIt-Anchor" href="#工厂模式"></a> 工厂模式</h3><p><img src="https://s2.loli.net/2022/05/23/fydMlmRbcEizA9o.png" alt="" /></p><p><img src="https://s2.loli.net/2022/05/23/pJiV6GtWh1B5e2Z.png" alt="" /></p><h3 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h3><ul><li><p>如图所示，Client严重依赖着具体类ClassA1和ClassA2。</p></li><li><p>Client代码中到处分布着创建A对象的复杂判断。</p></li><li><p>当我们A的子类发生改变，或者创建对象的复杂逻辑发生改变，都会对Client代码造成很复杂的修改</p></li></ul><h3 id="用工厂来解决"><a class="markdownIt-Anchor" href="#用工厂来解决"></a> 用“工厂”来解决</h3><p><img src="https://s2.loli.net/2022/05/23/d5fqJGMjUA6R2u3.png" alt="" /></p><p><img src="https://s2.loli.net/2022/05/23/3FGt94sSUolNIqH.png" alt="" /></p><h3 id="还有问题"><a class="markdownIt-Anchor" href="#还有问题"></a> 还有问题</h3><ul><li>而在软件系统中，经常面临着“多种对象”的创建工作，由于需求的变化，多种对象的具体实现有时候需要灵活组合。</li><li>比如汽车由引擎、轮胎、车身、车门等各部件组成。而每一部件都有很多种。一个汽车装配车间会依赖不同种的各个部件装配出不同型号的车。如果这时候我们为每一型号的车根据工厂模式创建一个工厂，由于部件的组合关系，我们就会遇到“组合爆炸“问题，对这个装配车间需要创建“无数”个工厂。这就对工厂模式提出更高要求。</li></ul><h3 id="设计分析"><a class="markdownIt-Anchor" href="#设计分析"></a> 设计分析</h3><ul><li>分析具体的需求，我们可以发现，对客户Client来说需要同时实现工厂的灵活性和产品的灵活性。所以，我们提供了两套接口：一是表现出稳定的工厂行为（创建不同的对象）的工厂接口，二是表现出稳定产品行为的产品接口。从而，实现了工厂多态和产品多态。</li><li>工厂接口既使得原本分布于代码各处的多种对象的实例化，现在变为集中到具体的工厂内部，又隔离了“对象实例化的组合”的变化。</li><li>客户Client通过抽象工厂接口的方法得到ProductA和ProductB的实例，再利用产品接口来灵活使用具体的产品</li></ul><h3 id="使用的原则"><a class="markdownIt-Anchor" href="#使用的原则"></a> 使用的原则</h3><p><img src="https://s2.loli.net/2022/05/23/JSbvO8Tzaq9jAg1.png" alt="" /></p><h3 id="抽象工厂模式的类图"><a class="markdownIt-Anchor" href="#抽象工厂模式的类图"></a> 抽象工厂模式的类图</h3><p><img src="../../../../../../AppData/Roaming/Typora/typora-user-images/image-20220523184903751.png" alt="" /></p><h3 id="参与者"><a class="markdownIt-Anchor" href="#参与者"></a> 参与者</h3><ul><li>抽象工厂（AbstractFactory）声明了创建抽象产品的各个接口。</li><li>具体工厂（ConcreteFactory）实现了对具体产品的创建</li><li>抽象产品（AbstractProduct）声明了一种产品的接口。</li><li>具体产品（ConcreteProduct）定义了具体工厂中创建出来的具体产品，实现了抽象产品的接口。</li><li>客户（Client）使用抽象工厂和抽象产品的类。使用抽象工厂的方法来创建产品</li></ul><h3 id="协作"><a class="markdownIt-Anchor" href="#协作"></a> 协作</h3><ul><li>通常情况下，只有一个具体的工厂的实例被创建。这个具体工厂对于创建产品这个事情本身有具体的实现。对于创建不同的产品对象，客户应该用不同的具体工厂。</li><li>抽象工厂转移了产品的创建到其子类具体工厂类中间去。</li></ul><h1 id="单键模式"><a class="markdownIt-Anchor" href="#单键模式"></a> 单键模式</h1><h1 id="迭代器模式"><a class="markdownIt-Anchor" href="#迭代器模式"></a> 迭代器模式</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#设计模式&quot;&gt;&lt;/a&gt; 设计模式&lt;/h1&gt;
&lt;h1 id=&quot;可修改性及其基本实现机制&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#可修改性及其基本实现机</summary>
      
    
    
    
    <category term="软件工程" scheme="http://little-hurui.cloud/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="软件工程与计算2" scheme="http://little-hurui.cloud/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%972/"/>
    
    
    <category term="软件工程" scheme="http://little-hurui.cloud/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="设计模式" scheme="http://little-hurui.cloud/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>详细设计</title>
    <link href="http://little-hurui.cloud/2022/05/16/%E8%AF%A6%E7%BB%86%E8%AE%BE%E8%AE%A1/"/>
    <id>http://little-hurui.cloud/2022/05/16/%E8%AF%A6%E7%BB%86%E8%AE%BE%E8%AE%A1/</id>
    <published>2022-05-16T13:19:34.000Z</published>
    <updated>2022-05-17T15:25:19.179Z</updated>
    
    <content type="html"><![CDATA[<h1 id="详细设计"><a class="markdownIt-Anchor" href="#详细设计"></a> 详细设计</h1><h2 id="预习测试"><a class="markdownIt-Anchor" href="#预习测试"></a> 预习测试</h2><ul><li>⾯向对象⽅法下详细设计的过程是什么？</li><li>现在要写⼀个Sink dot com游戏，其中棋盘，dot com各应该由哪个类来创 建</li></ul><h2 id="主要内容"><a class="markdownIt-Anchor" href="#主要内容"></a> 主要内容</h2><ul><li>详细设计基础</li><li>面向对象详细设计</li><li>为类间协作开发集成测试用例</li><li>结构化详细设计</li><li>详细设计文档描述和评审</li></ul><h1 id="详细设计基础"><a class="markdownIt-Anchor" href="#详细设计基础"></a> 详细设计基础</h1><p><strong>详细设计的出发点</strong>：软件详细设计是在软件体系结构设计之后进行，以需求开发的结果(需求规格说明和需求分析模型)和软件体系结构的结果(软件体系结构设计方案与原型)为出发点</p><h2 id="what-is-detail-design"><a class="markdownIt-Anchor" href="#what-is-detail-design"></a> What is Detail Design?</h2><ul><li>Mid-level design to a specific module</li><li>And low-level design to objects/classes of the specific module</li></ul><p><img src="https://s2.loli.net/2022/05/16/eyCc4Igl9sStBzh.png" alt="" /></p><blockquote><ol><li>高层设计反映的是系统高层抽象的构件层次，描述系统的高层结构、关注点和设计决策。</li><li>中层设计反映的是组成模块的内部结构，例如数据定义、函数定义、类定义、类结构等。</li><li>低层设计则是深入莫夸或者类的内部，关注具体的数据结构、算法、类型、语法和控制逻辑等。</li></ol></blockquote><ol><li>软件架构定义了模块的规范(对外抽象出来的接口)：就是模块之间交互需要知道的信息</li><li>细节设计通过细节设计机制实现模块<ol><li>中级：(子调制)-&gt; OO-&gt;类指定</li><li>低级：DS. + ALG. -&gt;实现类</li></ol></li><li>细节设计要求设计者考虑模块的美观，功能和许多其他方面<ol><li>详细设计中的质量要求：修改，维护，性能……</li></ol></li></ol><h2 id="详细设计的输入"><a class="markdownIt-Anchor" href="#详细设计的输入"></a> 详细设计的输⼊</h2><p><img src="https://s2.loli.net/2022/05/16/xWYXjZ3s17n8bSP.png" alt="" /></p><h3 id="从需求-体系结构设计到详细设计"><a class="markdownIt-Anchor" href="#从需求-体系结构设计到详细设计"></a> 从需求、体系结构设计到详细设计</h3><p><img src="https://s2.loli.net/2022/05/16/EScIpysTPVibFde.png" alt="" /></p><ol><li>具体的模块的设计是详细设计</li><li>是对体系结构设计的更加精确的描述</li></ol><h2 id="where-from-detail-design-starts"><a class="markdownIt-Anchor" href="#where-from-detail-design-starts"></a> Where from Detail Design Starts ?</h2><p>详细设计的目的是实现所有功能性需求和非功能性需求</p><h3 id="详细设计的上下文"><a class="markdownIt-Anchor" href="#详细设计的上下文"></a> 详细设计的上下文</h3><ol><li>模块的规格：导出/导入接口</li><li>职责分配：<ol><li>有些职责来自RE(SRS)：典型的用例，领域模型，序列图，状态图</li><li>其他一些来自实施决策</li></ol></li><li>在详细设计文档中需要明确定义:<ol><li>模块结构及其接口(如果有更细的模块分解)</li><li>类结构、类协作、类接口(面向对象分析方法)</li><li>控制结构与函数接口(结构化分析方法)</li><li>重要的数据结构和算法逻辑(如果必要的话)</li></ol></li></ol><p><img src="https://s2.loli.net/2022/05/16/ncGkKC5fu6h14Fj.png" alt="" /><br /><img src="https://s2.loli.net/2022/05/16/ncGkKC5fu6h14Fj.png" alt="" /></p><h3 id="软件体系结构构件之间的接口"><a class="markdownIt-Anchor" href="#软件体系结构构件之间的接口"></a> 软件体系结构：构件之间的接口</h3><p><img src="https://s2.loli.net/2022/05/16/fG3buqWRjKQ4STd.png" alt="" /></p><h3 id="详细设计的输出"><a class="markdownIt-Anchor" href="#详细设计的输出"></a> 详细设计的输出</h3><p><img src="https://s2.loli.net/2022/05/16/4LNSvEjz7TmsuZx.png" alt="" /></p><h1 id="面向对象详细设计"><a class="markdownIt-Anchor" href="#面向对象详细设计"></a> 面向对象详细设计</h1><h2 id="面向对象设计的思想职责-重要"><a class="markdownIt-Anchor" href="#面向对象设计的思想职责-重要"></a> 面向对象设计的思想：职责 重要</h2><h3 id="职责"><a class="markdownIt-Anchor" href="#职责"></a> 职责</h3><ol><li>职责是执行任务(操作职责)或维护某些数据(数据职责)的义务。<ol><li>行为职责通常由行为来履行。</li><li>数据职责通常由属性来完成。</li><li>可能会涉及到类之间的协作</li></ol></li></ol><h3 id="职责驱动的分解"><a class="markdownIt-Anchor" href="#职责驱动的分解"></a> 职责驱动的分解</h3><ol><li>职责可以在不同的抽象层次上陈述。</li><li>职责可以分解。</li><li>可以将高级职责分配给高级组件。</li><li>职责分解可以作为分解组件的基础：职责既反映了操作义务，也反映了数据义务，因此职责驱动的分解可能与功能分解不同。</li></ol><h3 id="职责启发法"><a class="markdownIt-Anchor" href="#职责启发法"></a> 职责启发法</h3><ol><li>很好地分配职责有助于实现高凝聚力和低耦合。(高内聚)</li><li>确保模块职责不重叠。</li><li><strong>仅当操作和数据有助于完成模块的职责时，才将其放置在模块中。</strong></li></ol><h3 id="委托"><a class="markdownIt-Anchor" href="#委托"></a> 委托</h3><ol><li>委托是一种策略，其中一个模块(委托人)将职责交给另一个模块(委托人)。</li><li>代理帮你完成联系和收集的情况</li></ol><h2 id="面向对象设计的思想协作-重要"><a class="markdownIt-Anchor" href="#面向对象设计的思想协作-重要"></a> 面向对象设计的思想：协作 重要</h2><h3 id="什么是协作"><a class="markdownIt-Anchor" href="#什么是协作"></a> 什么是协作</h3><ol><li>程序中的对象必须<strong>协作</strong>；否则，程序将仅由一个可以执行所有操作的大对象组成。-丽贝卡·维尔夫斯·布洛克等，《设计面向对象的软件》，Prentice Hall，1990年：内聚性好一定意味着比较零散(类比较多)</li><li>同等重要的(作为继承)是相互负责地协作的对象社会的发明。这些社会形成了我所谓的系统机制，并代表了战略性架构决策，因为它们超越了各个类。 -[The C ++ Journal，Vol.2，No.1 1992年，“与Grady Booch的访谈”]：每个对象都是相对自治的个体。</li><li>一个应用程序可以分解为许多不同的行为。</li><li>每个此类行为都是通过应用程序对象之间的独特协作来实现的：对象和对象之间的实践</li><li>每次协作，无论大小，都保证实现应用程序的行为</li><li>将面向对象的应用程序想象成通过关系连接的对象网络。</li><li>协作是通过网络追求特定行为的<strong>消息模式</strong></li><li>协作分布在对象网络中，因此在任何地方都不存在</li></ol><h2 id="协同设计的需求"><a class="markdownIt-Anchor" href="#协同设计的需求"></a> 协同设计的需求</h2><ol><li>毕竟，我们正在尝试实现的是应用程序操作。</li><li>如果实现它们的协作设计不当，则应用程序将不准确或脆弱</li></ol><h1 id="面向对象详细设计的过程"><a class="markdownIt-Anchor" href="#面向对象详细设计的过程"></a> 面向对象详细设计的过程</h1><ol><li>面向对象:对象内部是容易理解的，之间的调用的理解是困难。</li><li>结构化:模块内部是困难的，之间的调用是容易的</li><li>概念类图的类和设计类图的类是不同的:<ol><li>因为设计类图中有的类是辅助类。</li></ol></li><li>设计模型重构<ol><li>根据模块化的思想进行重构，目标是高内聚、低耦合</li><li>根据信息隐藏的思想筹够，目标是隐藏职责与变更</li></ol></li></ol><h2 id="通过职责建立静态设计模型"><a class="markdownIt-Anchor" href="#通过职责建立静态设计模型"></a> 通过职责建立静态设计模型</h2><h3 id="抽象对象的职责"><a class="markdownIt-Anchor" href="#抽象对象的职责"></a> 抽象对象的职责</h3><ol><li>类表达了对对象族的本质特征的抽象，提供了构建一个对象的所需要的蓝图</li><li>职责分类<ol><li>属性职责:对象的状态</li><li>行为职责:对象的行为</li></ol></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/8.png" alt="" /></p><ol><li><code>+</code> 是 public，<code>-</code> 是 private</li></ol><h3 id="抽象类之间的关系"><a class="markdownIt-Anchor" href="#抽象类之间的关系"></a> 抽象类之间的关系</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/9.png" alt="" /></p><ol><li>整体存在则部分存在，部分存在则整体存在</li><li>上图需要好好背诵和记忆:重点掌握类图的画法</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/10.png" alt="" /><br /><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/11.png" alt="" /></p><h3 id="grasp原则"><a class="markdownIt-Anchor" href="#grasp原则"></a> GRASP原则</h3><ol><li>一般职责分配软件模式</li><li>不是&quot;设计模式&quot;，而是对象设计的基本原理</li><li>专注于对象设计的最重要方面之一：为类分配职责</li><li>强调适用性：并不是一个普适的</li><li>常见的一些特点:<ol><li>低耦合：分配一个职责要保证低耦合度</li><li>高耦合：分配一个职责的时候要保持类的高聚合度</li><li>信息专家：将一个职责分配给专家-履行职责所必须的信息的类</li><li>创建者：创建规则在后面</li><li>控制者：控制规则在后面(避免大多数信息由一个类发出、组件相对较小、行为职责和数据绑定、职责单一)</li></ol></li></ol><h4 id="拇指原则"><a class="markdownIt-Anchor" href="#拇指原则"></a> 拇指原则</h4><ol><li>当存在替代设计选择时，请仔细研究替代方案的<strong>凝聚力和耦合含义</strong>，并可能对替代方案的未来发展压力。</li><li>选择具有良好内聚性，耦合性和稳定性的替代方案。</li></ol><h4 id="信息专家"><a class="markdownIt-Anchor" href="#信息专家"></a> 信息专家</h4><ol><li>问题：在面向对象设计中分配职责的最基本原则是什么？</li><li>解决方案：将具有完成任务所必需的信息的班级分配给班级。</li><li>维护信息封装</li><li>促进低耦合</li><li>促进高内聚类</li></ol><h5 id="信息专家的例子"><a class="markdownIt-Anchor" href="#信息专家的例子"></a> 信息专家的例子</h5><ol><li>谁负责了解典型的销售点应用程序中的销售总额？(求总价) Sale</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/12.png" alt="" /></p><ol><li>计算总计需要所有SalesLineItem实例及其小计。而这是只有销售(Sale)知道的</li><li>这就是为什么Sale是信息专家。</li><li>因此(通过全部的情况进行开展的)</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/13.png" alt="" /></p><ol><li>但是每个订单项都需要小计(数量乘以价格)。</li><li>根据专家的说法，SalesLineItem是专家，知道数量并且与知道价格的产品规格相关联。</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/14.png" alt="" /></p><ol><li>因此，职责分配给3个类别。</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/15.png" alt="" /></p><h5 id="egcase-study-智能热水器"><a class="markdownIt-Anchor" href="#egcase-study-智能热水器"></a> Eg.Case Study: 智能热水器</h5><ol><li>智能控制水温<ol><li>周末水温⾼</li><li>夜晚水温低</li><li>⽣病等特殊情况水温高</li><li>度假水温低</li></ol></li><li>概念模型<ol><li>类<ol><li>热水器控制器<ol><li>模式</li><li>低温</li><li>高温</li><li>周末</li></ol></li><li>时钟</li></ol></li><li>接口：</li><li>WaterHeaterController和Clock怎么交互？<ol><li>轮询</li><li>通知</li></ol></li></ol></li><li>怎么知道当前时间是该升温还是降温？<ol><li>Controller 自己保存特殊时间并计算(比较当前时间和特殊时间)：Bad：多个职责。</li><li>由SpecialTime类保存特殊时间；Controller调⽤getSpecialTime()得到特殊时间，再计算<ol><li>Bad：数据职责与行为职责的分离</li><li>SpecialTime是信息专家，对外给接口</li></ol></li><li>由SpecialTime类保存特殊时间，并提供isSpecialTime();Controller调用方法<ol><li>Good：单一职责</li></ol></li><li>谁有信息谁是专家，数据和功能不要分开</li><li>为什么同样是get方法<ol><li>一个是合理的:商品那个，那个是因为商品和单价是分开的，所以是合理的</li><li>一个是不合理的:现在这个，因为只有一个数据就可以完成计算</li><li>一个是简单的get方法，不完全数据和行为</li><li>另一个是只需要这一个数据就可以了，并且行为封装在一起是合理的</li><li>类之间的关系的影响</li></ol></li></ol></li></ol><h3 id="添加辅助类"><a class="markdownIt-Anchor" href="#添加辅助类"></a> 添加辅助类</h3><ol><li>接口类</li><li>记录类(数据类)</li><li>启动类:从各种地方的初始化，进行转发和分派</li><li>控制器类</li><li>实现数据类型的类</li><li>容器类</li></ol><h3 id="添加辅助类后的设计模型"><a class="markdownIt-Anchor" href="#添加辅助类后的设计模型"></a> 添加辅助类后的设计模型</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/16.png" alt="" /></p><h2 id="通过协作创建动态设计模型"><a class="markdownIt-Anchor" href="#通过协作创建动态设计模型"></a> 通过协作创建动态设计模型</h2><h3 id="抽象对象之间协作"><a class="markdownIt-Anchor" href="#抽象对象之间协作"></a> 抽象对象之间协作</h3><ol><li>从小到大,将对象的小职责聚合形成大职责;</li><li>从大到小,将大职责分配给各个小对象。</li><li>这两种方法,⼀般是同时运⽤的,共同来完成对协作的抽象。</li><li>顺序图<ul><li>可以⽤顺序图表示对象之间的协作。顺序图是交互图的⼀种,它表达了对象之间如何通 过消息的传递来完成⽐较⼤的职责。</li><li>包含两部分:对象本身和对象之间的信息流</li></ul></li><li>信息分为:图示见课本206页<ol><li>同步消息</li><li>异步消息</li><li>同步消息返回</li></ol></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/17.png" alt="" /></p><ol start="6"><li>对象结束之后可以在底下画一个X表示结束</li><li>状态图<ol><li>除了顺序图,我们还可以通过状态图来表达软件的动态模型。UML 状态图(State Diagram)</li><li>主要⽤于描述⼀个复杂对象在其⽣存期间的 动态⾏为,表现为⼀个对象所经历的状态序列, 引起状态转移的事件(Event),以及因状态转移⽽伴随的动作(Action)。⼀般可以⽤状态机对⼀个对象的⽣命周期建模,UML状态图 ⽤于显示状态机(State Machine Diagram),重点在于描述 UML 状态图的控制流。⽽协作 是:⽤复杂对象的状态图中的 Event 体现出对象之间消息的传递;⽤ Action 体现消息引发的对象状态的改变(⾏为)。</li></ol></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/18.png" alt="" /></p><h3 id="明确对象的创建"><a class="markdownIt-Anchor" href="#明确对象的创建"></a> 明确对象的创建</h3><h4 id="创建者模式"><a class="markdownIt-Anchor" href="#创建者模式"></a> 创建者模式</h4><ol><li>问题：谁负责创建某个类的新实例？</li><li>解决方案：根据潜在的创建者类与要实例化的类之间的关系，确定哪个类应创建类的实例。</li><li>问题：谁负责创建对象？</li><li>回答：如果有以下情况，则由创建者分配B类创建A类实例的职责：<ol><li>B 聚集了 A 对象</li><li>B 包含了 A 对象</li><li>B 记录了 A 的实例</li><li>B 要经常使用 A 对象</li><li>当 A 的实例被创建，B具有传递给A的初始化数据(也就是 B 是创建 A 的实例这项任务的信息专家)</li><li>在有选择的地方，更喜欢B聚合或包含A对象</li></ol></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/19.png" alt="" /></p><ul><li>第一个(组合关系)</li><li>第二个(单向被关联):比如访问数据库，你要访问的时候，我就给一个访问对象来使用，不用的时候归还就行。</li><li>第三个(持有必要数据):根据业务的情况决定什么时候被创建，有时候B可以创建但是不知道什么时机来创建，如果C知道，那么我们可能让C创建对象，然后B进行初始化</li><li>第四个(聚合关系):关系比较多，要看时机等什么时候合适</li></ul><h4 id="创建例子"><a class="markdownIt-Anchor" href="#创建例子"></a> 创建例子</h4><ol><li>谁负责创建SalesLineItem对象？ <strong>销售</strong>：往往是一旦有sale就会创建</li><li>找到聚合或者包含了SalesLineItem的物体类</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/20.png" alt="" /></p><ol start="3"><li>创建者模式建议是 Sale</li><li>合作图是</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/21.png" alt="" /></p><h4 id="创作者摘要"><a class="markdownIt-Anchor" href="#创作者摘要"></a> 创作者摘要</h4><ol><li>通过创建负责创建需要引用的对象的类的实例来促进低耦合</li><li>通过自己创建对象，它们避免依赖于另一个类为它们创建对象.</li></ol><h4 id="谁创建square-piece-player"><a class="markdownIt-Anchor" href="#谁创建square-piece-player"></a> 谁创建Square / Piece / Player？</h4><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/22.png" alt="" /></p><ol><li>Piece的创建(那个关联性最强，就是用哪一个来创建)<ul><li>Player？√</li><li>Board？</li></ul></li><li>Squares的创建:Board创建</li><li>Player的创建:用Game创建(没有大问题)</li></ol><h3 id="控制器"><a class="markdownIt-Anchor" href="#控制器"></a> 控制器</h3><ol><li>问题：如何分配处理系统事件的职责？</li><li>解决方案：如果程序从其图形界面以外的其他来源接收事件，请添加事件类以将事件源与实际处理事件的对象分离。</li></ol><h4 id="控制方式"><a class="markdownIt-Anchor" href="#控制方式"></a> 控制方式</h4><ol><li>将处理系统事件消息的职责分配给代表以下选项之一的类：<ol><li>整个组织的业务(立面控制器)。</li><li>整个系统(外观控制器)。</li><li>在问题域中真实操作解决问题的人(角色控制器)。</li><li>自动化解决用例的模块(用例控制器)。</li></ol></li></ol><h4 id="控制者"><a class="markdownIt-Anchor" href="#控制者"></a> 控制者</h4><ol><li>购买项目用例中的系统事件<ol><li>输入部分</li><li>结束售卖</li><li>结账</li></ol></li><li>谁负责输入</li><li>控制者有四种处理对象<ol><li>整个系统 Post</li><li>整个业务 商店</li><li>在现实生活中活跃在任务中的</li><li>在系统中机器处理这个部分</li></ol></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/23.png" alt="" /><br /><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/24.png" alt="" /></p><ol><li>按了按钮就会直接进行响应</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/25.png" alt="" /></p><ol><li>用POST方法申请Item</li><li>谁设定1:enterItem接口？和需求有关</li><li>界面变更和逻辑变更的频率时不同的，需要分开，Controller存在的必要性</li></ol><h4 id="控制器总结"><a class="markdownIt-Anchor" href="#控制器总结"></a> 控制器总结</h4><ol><li>Controller本身不是面向对象的，它包含很多复杂的逻辑</li><li>使用控制器对象可使外部事件源和内部事件处理程序彼此独立于他们的类型和行为</li><li>控制器对象可能变得高耦合和职责上低内聚</li></ol><h4 id="什么是棋盘游戏的控制者"><a class="markdownIt-Anchor" href="#什么是棋盘游戏的控制者"></a> 什么是棋盘游戏的控制者？</h4><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/26.png" alt="" /></p><h3 id="选择合适的控制风格重要"><a class="markdownIt-Anchor" href="#选择合适的控制风格重要"></a> 选择合适的控制风格(重要)</h3><ol><li>集中式控制风格</li><li>委托式控制风格</li><li>分散式控制风格</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/27.png" alt="" /></p><ol><li>系统行为的逻辑在对象(组件)网络之间分布的方式。</li><li>分散的:系统行为的逻辑通过对象网络&quot;<strong>广泛传播</strong>&quot;</li><li>集中式:一个额外的控制器记录系统行为的所有逻辑。</li></ol><h4 id="控件控制情况"><a class="markdownIt-Anchor" href="#控件控制情况"></a> . 控件控制情况</h4><ol><li>做出决定并指导他人行动的对象是控制器。</li><li>他们总是与他人合作有两个原因：<ol><li>收集信息以便做出决定</li><li>并呼吁其他人采取行动。</li></ol></li><li>他们的重点通常是决策而不是执行后续操作：他们的最终职责通常会转移给对控制器负责的较大任务有更多特定职责的其他人</li></ol><h4 id="控制器协作情况"><a class="markdownIt-Anchor" href="#控制器协作情况"></a> 控制器协作情况</h4><ol><li>控件样式是一种将所有系统行为分布在对象(组件)网络之间的方式。<ol><li>集中式:几个控制器记录所有系统行为的逻辑</li><li>委托式:通过对象网络分配决策，由几个控制器进行主要决策</li><li>分散式:所有系统行为都通过对象网络广泛传播</li></ol></li></ol><h4 id="集中式控制风格"><a class="markdownIt-Anchor" href="#集中式控制风格"></a> 集中式控制风格</h4><ol><li>容易找到做出决定的地方</li><li>易于查看如何制定决策以及如何更改决策流程</li><li>控制器可能会变得的庞大，复杂且难以理解，维护，测试等。</li><li>控制器可以将其他组件视为数据存储库<ol><li>增加耦合</li><li>破坏信息隐藏</li></ol></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/28.png" alt="" /></p><ul><li>都是他在调用别人</li></ul><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/29.png" alt="" /></p><ul><li>部分去中心化的中心模式(如上)</li></ul><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/30.png" alt="" /></p><ul><li>上图例子:通过一些部分特别的方式读取输入</li></ul><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/31.png" alt="" /></p><ul><li>上图例子:依赖状态来降低指向性</li><li>控制器只负责状态转移，不管具体的状态处理</li></ul><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/32.png" alt="" /></p><ul><li>更加分散的设计:进行分发，只负责协调</li></ul><h4 id="控制的启发1"><a class="markdownIt-Anchor" href="#控制的启发1"></a> 控制的启发1</h4><ol><li>避免大多数消息都来自单个组件的交互设计。</li><li>保持组件较小。</li><li>确保并非仅将全部职责分配给几个组件。</li><li>确保操作职责与数据职责一致。</li></ol><h4 id="委托式控制风格"><a class="markdownIt-Anchor" href="#委托式控制风格"></a> 委托式控制风格</h4><ol><li>作出决策的对象不只有一个，职责的分解决定了控制对象的层次。</li></ol><h4 id="分散式控制风格"><a class="markdownIt-Anchor" href="#分散式控制风格"></a> 分散式控制风格</h4><ol><li>其特点是拥有许多组件，几乎没有数据，职责也很少。</li><li>很难理解控制流。</li><li>组件无法独自完成很多工作，从而增加了耦合。</li><li>隐藏信息是很难的。</li><li>内聚性通常很差。</li><li>很少有模块化原则可以满足。</li><li>完全靠对象自治的方式来实现自己的职责。</li></ol><h4 id="控制启发二"><a class="markdownIt-Anchor" href="#控制启发二"></a> 控制启发二</h4><ol><li>避免要求每个组件发送许多消息的交互。</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/33.png" alt="" /></p><h1 id="为类间协作开发集成测试用例"><a class="markdownIt-Anchor" href="#为类间协作开发集成测试用例"></a> 为类间协作开发集成测试用例</h1><h2 id="详细设计的集成测试"><a class="markdownIt-Anchor" href="#详细设计的集成测试"></a> 详细设计的集成测试</h2><ol><li>类间协作的集成测试<ol><li>重点针对复杂逻辑(交互⽐较多)</li><li>⾃顶向下或者⾃底向上的集成</li></ol></li><li>Mock Object<ol><li>不是stub</li></ol></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/50.png" alt="" /><br /><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/51.png" alt="" /></p><ol><li>测试用例</li></ol><h2 id="类间协作的集成测试"><a class="markdownIt-Anchor" href="#类间协作的集成测试"></a> 类间协作的集成测试</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/34.png" alt="" /><br /><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/35.png" alt="" /><br /><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/36.png" alt="" /></p><h1 id="结构化详细设计"><a class="markdownIt-Anchor" href="#结构化详细设计"></a> 结构化详细设计</h1><h2 id="结构化设计的思想"><a class="markdownIt-Anchor" href="#结构化设计的思想"></a> 结构化设计的思想</h2><ol><li>分解是降低复杂度的一种方法</li><li>按算法的分解:自然的分解想法</li><li>从数据流图向结构图的转换</li></ol><h2 id="降低复杂度的方法"><a class="markdownIt-Anchor" href="#降低复杂度的方法"></a> 降低复杂度的方法</h2><ol><li>分解：同一层次</li><li>抽象：从低层次抽象出高层次</li></ol><h2 id="如何描述一个系统"><a class="markdownIt-Anchor" href="#如何描述一个系统"></a> 如何描述一个系统？</h2><ol><li>一系列相互关联的过程</li><li>将输入转化为输出</li><li>DFD:数据流图<ol><li>数据流(箭头)</li><li>过程(圆圈)</li><li>数据存储(平行线)</li><li>外部实体(矩形)</li></ol></li></ol><h2 id="按算法分解"><a class="markdownIt-Anchor" href="#按算法分解"></a> 按算法分解</h2><ol><li>分而治之</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/37.png" alt="" /></p><h2 id="结构化设计"><a class="markdownIt-Anchor" href="#结构化设计"></a> 结构化设计</h2><ol><li>结构化设计的重心:从数据流图到结构图</li><li>上述转化过程:<ol><li>寻找到输入的最高抽象点和输出的最高抽象点</li><li>根据输入、输出的最高抽象点，对模块进行划分</li><li>然后在一次对每个模块寻找最高抽象点，再进行模块分解，从而逐步求精得到树状的结构图</li></ol></li><li>详细参考课本(201页)</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/38.png" alt="" /><br /><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/39.png" alt="" /><br /><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/41.png" alt="" /><br /><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/42.png" alt="" /><br /><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/43.png" alt="" /><br /><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/44.png" alt="" /><br /><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/45.png" alt="" /><br /><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/46.png" alt="" /><br /><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/47.png" alt="" /></p><h1 id="详细设计文档描述和评审"><a class="markdownIt-Anchor" href="#详细设计文档描述和评审"></a> 详细设计文档描述和评审</h1><p><img src="https://s2.loli.net/2022/05/16/GtPjRspkFrvnAdh.png" alt="" /></p><ol><li>所有模块都应该尽量详细</li></ol><h2 id="详细设计验证"><a class="markdownIt-Anchor" href="#详细设计验证"></a> 详细设计验证</h2><ol><li>评审:应该很好的展开</li><li>度量<ol><li>模块化度量</li></ol></li><li>测试<ol><li>协作测试</li></ol></li></ol><p><img src="https://s2.loli.net/2022/05/16/GtPjRspkFrvnAdh.png" alt="" /></p><ol start="4"><li>设计的信息程度对后继开发人员是否足够?就是给不同人应该差不太多。</li></ol><h1 id="第三阶段"><a class="markdownIt-Anchor" href="#第三阶段"></a> 第三阶段</h1><ol><li>制品合理性</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;详细设计&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#详细设计&quot;&gt;&lt;/a&gt; 详细设计&lt;/h1&gt;
&lt;h2 id=&quot;预习测试&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#预习测试&quot;&gt;&lt;/a&gt; 预习测试&lt;/h2</summary>
      
    
    
    
    <category term="软件工程" scheme="http://little-hurui.cloud/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="软件工程与计算2" scheme="http://little-hurui.cloud/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%972/"/>
    
    
    <category term="软件工程" scheme="http://little-hurui.cloud/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="详细设计" scheme="http://little-hurui.cloud/tags/%E8%AF%A6%E7%BB%86%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>面向对象的模块化</title>
    <link href="http://little-hurui.cloud/2022/05/16/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    <id>http://little-hurui.cloud/2022/05/16/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%A8%A1%E5%9D%97%E5%8C%96/</id>
    <published>2022-05-16T02:15:43.000Z</published>
    <updated>2022-05-17T15:42:38.180Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面向对象的模块化"><a class="markdownIt-Anchor" href="#面向对象的模块化"></a> 面向对象的模块化</h1><p><a href="https://github.com/SpriCoder/SpriCoder-Notes">原文链接-张洪胤</a></p><h1 id="模块化的原则总结"><a class="markdownIt-Anchor" href="#模块化的原则总结"></a> 模块化的原则(总结)</h1><p><img src="https://s2.loli.net/2022/05/17/d8UstqXahRLm34E.png" alt="" /></p><ol><li>核心就是上面的</li><li>题目是，给例子，发现违反的原则并纠正</li></ol><h1 id="面向对象中的模块与耦合"><a class="markdownIt-Anchor" href="#面向对象中的模块与耦合"></a> 面向对象中的模块与耦合</h1><h2 id="类"><a class="markdownIt-Anchor" href="#类"></a> 类</h2><ol><li>模块化是消除软件复杂度的一个重要方法，它有效地将一个复杂系统分解为若干个代码片段，每一个代码片段完成一个功能，并且包含完成这个功能所需要的信息。</li><li>模块化希望代码片段由两部分组成:接口和实现。</li></ol><h2 id="模块"><a class="markdownIt-Anchor" href="#模块"></a> 模块</h2><ol><li>一段代码<ol><li>方法</li><li>类</li><li>模块(包)</li></ol></li><li>耦合:通过段</li><li>聚合:内部段</li></ol><h2 id="耦合中的结构方法与oo方法"><a class="markdownIt-Anchor" href="#耦合中的结构方法与oo方法"></a> 耦合中的结构方法与OO方法</h2><ol><li>耦合:耦合是对从一个模块到另一个模块的连接所建立的关联强度的度量。</li><li>结构化方法:连接是对其他地方定义的某些标签或地址的引用</li><li>面向对象方法<ol><li>访问耦合</li><li>继承耦合</li></ol></li></ol><h2 id="降低耦合的设计原则"><a class="markdownIt-Anchor" href="#降低耦合的设计原则"></a> 降低耦合的设计原则</h2><ol><li>原则一：Global Variables Consider Harmful</li><li>原则二：To be Explicit</li><li>原则三：Do not Repeat</li><li>原则四：Programming to Interface</li></ol><h1 id="访问耦合"><a class="markdownIt-Anchor" href="#访问耦合"></a> 访问耦合</h1><p><img src="https://s2.loli.net/2022/05/16/MvXh8a5oiEPbBRc.png" alt="" /></p><h2 id="隐式耦合cascading-message-级联调用问题"><a class="markdownIt-Anchor" href="#隐式耦合cascading-message-级联调用问题"></a> 隐式耦合:Cascading Message 级联调用问题</h2><p><img src="https://s2.loli.net/2022/05/16/DVQenvKbJZ4tkxT.png" alt="" /></p><h3 id="解决方案-引入局部变量"><a class="markdownIt-Anchor" href="#解决方案-引入局部变量"></a> 解决方案 — 引入局部变量</h3><p><img src="https://s2.loli.net/2022/05/16/OPybNSR8ElnYCwz.png" alt="" /></p><ul><li>避免隐式耦合，变为显式耦合，降低耦合度</li></ul><h3 id="cascading-message问题案例"><a class="markdownIt-Anchor" href="#cascading-message问题案例"></a> Cascading Message问题案例</h3><p><img src="https://s2.loli.net/2022/05/16/UZ6GLCntPp9YelW.png" alt="" /></p><ul><li>使用委托的方式来解决，委托给一个类来完成这个业务</li></ul><h3 id="解决方案-委托"><a class="markdownIt-Anchor" href="#解决方案-委托"></a> 解决方案 — 委托</h3><p><img src="https://s2.loli.net/2022/05/16/78VXOGlK3spuZ4k.png" alt="" /></p><h1 id="组件耦合原理"><a class="markdownIt-Anchor" href="#组件耦合原理"></a> 组件耦合原理</h1><h2 id="原则四面向接口编程"><a class="markdownIt-Anchor" href="#原则四面向接口编程"></a> 原则四：面向接口编程</h2><ol><li>编程到所需的接口，不仅是受支持的接口</li><li>按照约定设计<ol><li>模块/类合同：所需方法/提供的方法</li><li>方法合同：前提条件，后置条件，不变式</li></ol></li><li>在考虑(非继承的)类与类之间的关系时，一方面要求值访问对方的接口，另一方面要避免隐式访问。</li><li>课本231页关于契约的含义的补充:<ol><li>前置条件</li><li>后值条件</li><li>不变式</li></ol></li><li>案例</li></ol><p><img src="https://s2.loli.net/2022/05/16/DoiWYHxa7M3fvzy.png" alt="" /></p><h2 id="原则五迪米特法则"><a class="markdownIt-Anchor" href="#原则五迪米特法则"></a> 原则五:迪米特法则</h2><ol><li>通俗说法<ol><li>你可以自己玩。(this)</li><li>你可以玩自己的玩具，但不能拆开它们(自己的成员变量)</li><li>你可以玩送给你的玩具。(方法)</li><li>你可以玩自己制作的玩具。(自己创建的对象)</li></ol></li><li>更加形式化的说法:<ol><li>每个单元对于其他单元只能拥有优先的知识，只是与当前单元紧密联系的单元</li><li>每个单元只能和它的朋友交谈，不能和陌生单元交谈</li><li>只和自己的直接的朋友交谈</li></ol></li><li>课本232页的例子很生动</li></ol><h3 id="问题案例"><a class="markdownIt-Anchor" href="#问题案例"></a> 问题案例</h3><p><img src="https://s2.loli.net/2022/05/16/M2QlO7fWeGtY4oc.png" alt="" /></p><ul><li>通过联系人获得信息</li><li>如何获得其他的引用？<ol><li>this</li><li>成员变量:√在Contact里面持有PostalArea的一个成员变量。</li><li>方法</li><li>自己创建</li></ol></li><li>这里需要再去确定一下</li></ul><h2 id="原则六接口隔离原则isp也叫接口最小化原则"><a class="markdownIt-Anchor" href="#原则六接口隔离原则isp也叫接口最小化原则"></a> 原则六：接口隔离原则(ISP)/也叫接口最小化原则</h2><ol><li>不应强迫客户端依赖于不使用的接口。 马丁(R. Martin)，1996年</li><li>原则6：接口隔离原则(ISP)：面向简单接口编程</li><li>许多客户端专用接口比一个通用接口要好</li></ol><h2 id="解释接口隔离原则"><a class="markdownIt-Anchor" href="#解释接口隔离原则"></a> 解释接口隔离原则</h2><ol><li>多用途的类<ol><li>方法分成不同组</li><li>没有一个用户使用所有的方法</li></ol></li><li>可能会导致不想要的依赖：使用类的一个方面的客户端也间接依赖于其他方面的依赖性</li><li>ISP有助于解决问题：使用多个客户端特定的接口</li></ol><h3 id="案例一gui界面问题"><a class="markdownIt-Anchor" href="#案例一gui界面问题"></a> 案例一:GUI界面问题</h3><p><img src="https://s2.loli.net/2022/05/16/SI6T5bswK3ofD9a.png" alt="" /></p><ul><li>进一步细化接口，避免出现不必要的依赖。</li></ul><h3 id="案例二application的依赖问题"><a class="markdownIt-Anchor" href="#案例二application的依赖问题"></a> 案例二:Application的依赖问题</h3><p><img src="https://s2.loli.net/2022/05/16/bXsVIQonWNZ7YD9.png" alt="" /></p><ul><li>想法一:将ApplicationForm拆开</li><li>想法二:将Controller合并</li><li>根据具体情况选择想法一和想法二</li></ul><h1 id="继承耦合"><a class="markdownIt-Anchor" href="#继承耦合"></a> 继承耦合</h1><p><img src="https://s2.loli.net/2022/05/16/BV3bRYmXNqWxUQJ.png" alt="" /></p><ol><li>在以上的各种类型的继承关系中，修改规格、修改实现、精化规格是不可以接受的。</li><li>扩展是最好的继承耦合</li></ol><h2 id="修饰继承耦合"><a class="markdownIt-Anchor" href="#修饰继承耦合"></a> 修饰继承耦合</h2><ol><li>没有任何规则和限制的修改</li><li>最差的继承耦合</li><li>如果客户端使用父引用，则需要使用parent和child方法<ol><li>隐含的</li><li>有两个连接，比较复杂</li></ol></li><li>危害多态</li></ol><h3 id="案例"><a class="markdownIt-Anchor" href="#案例"></a> 案例</h3><p><img src="https://s2.loli.net/2022/05/16/bPqyT3deJE9C1zQ.png" alt="" /></p><ul><li>父类能做的子类都能做吗?√</li><li>子类能做的父类都能做吗?×</li></ul><h2 id="完善继承耦合"><a class="markdownIt-Anchor" href="#完善继承耦合"></a> 完善继承耦合</h2><ol><li>定义新信息</li><li>继承的信息仅根据预定规则进行更改</li><li>如果客户使用父母参考，则需要整个父母和子女的修饰<ol><li>1+connections</li></ol></li><li>常见的</li></ol><p><img src="https://s2.loli.net/2022/05/16/RCSpf4hAymNkLeJ.png" alt="" /></p><h2 id="扩展继承耦合"><a class="markdownIt-Anchor" href="#扩展继承耦合"></a> 扩展继承耦合</h2><ol><li>子类仅添加方法和实例变量，而没有修改或修饰任何继承的方法和实例变量</li><li>如果客户端使用父引用，则仅需要父引用：一次引用</li></ol><h1 id="降低继承耦合的方法"><a class="markdownIt-Anchor" href="#降低继承耦合的方法"></a> 降低继承耦合的方法</h1><h2 id="继承耦合原理"><a class="markdownIt-Anchor" href="#继承耦合原理"></a> 继承耦合原理</h2><h2 id="原则七里氏替换原则"><a class="markdownIt-Anchor" href="#原则七里氏替换原则"></a> 原则七：里氏替换原则</h2><ol><li>所有派生类都必须可以替代其基类</li><li>“使用指针或对基类的引用的函数必须能够在不知道的情况下使用派生类的对象。” -R. Martin，1996年</li></ol><h3 id="问题案例一银行问题"><a class="markdownIt-Anchor" href="#问题案例一银行问题"></a> 问题案例一:银行问题</h3><p><img src="https://s2.loli.net/2022/05/16/LvpqrZjWAMI8Q2s.png" alt="" /></p><ul><li>继承关系有问题吗？</li><li>继承后子类能够当做父类看待吗？不能，因为子类要求比父类更强</li><li>解决方案:在父类中增加新的变量完成</li></ul><p><img src="https://s2.loli.net/2022/05/16/JR2AocNT7etSEdi.png" alt="" /></p><h3 id="问题案例二is-a-square-a-rectangle"><a class="markdownIt-Anchor" href="#问题案例二is-a-square-a-rectangle"></a> 问题案例二:Is a Square a Rectangle?</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Rect</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Rect</span>();</span><br><span class="line">setWidth = <span class="number">4</span>;</span><br><span class="line">setHeight = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">assert</span>(<span class="number">20</span> == getArea());</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_">Rect</span>&#123;</span><br><span class="line">   <span class="comment">// Square invariant, height = width</span></span><br><span class="line">   setWidth(x) &#123;</span><br><span class="line">      setHeight()=x;</span><br><span class="line">   &#125;</span><br><span class="line">   setHeight(x) &#123;</span><br><span class="line">      setWidth(x)</span><br><span class="line">   &#125;</span><br><span class="line">&#125; <span class="comment">// violate LSP?</span></span><br></pre></td></tr></table></figure><ol><li>正方形继承长方形:正方形条件比长方形条件更强，多限制条件。</li><li>正方形继承长方形是不合适的。</li><li>长方形继承正方形也是不合适的</li></ol><h3 id="问题案例三penguin-is-a-bird"><a class="markdownIt-Anchor" href="#问题案例三penguin-is-a-bird"></a> 问题案例三:Penguin is a bird?</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bird</span> &#123;</span><br><span class="line">   <span class="comment">// has beak, wings,...</span></span><br><span class="line">   <span class="keyword">public</span>: virtual <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>;</span><br><span class="line">   <span class="comment">// Bird can ﬂy</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parrot</span> : <span class="keyword">public</span> Bird &#123;</span><br><span class="line">   <span class="comment">// Parrot is a bird</span></span><br><span class="line">   <span class="keyword">public</span>: virtual <span class="keyword">void</span> <span class="title function_">mimic</span><span class="params">()</span>;</span><br><span class="line">   <span class="comment">// Can Repeat words...</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Penguin</span> : <span class="keyword">public</span> Bird &#123;</span><br><span class="line">   <span class="keyword">public</span>: <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">      error (<span class="string">&quot;Penguins don’t fly!&quot;</span>);</span><br><span class="line">   &#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>不应该被叫做brid，而应该是flyingBird</li><li>Penguins Fail to Fly!</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">PlayWithBird</span> <span class="params">(Bird abird)</span> &#123;</span><br><span class="line">   abird.fly();</span><br><span class="line">   <span class="comment">// OK if Parrot.</span></span><br><span class="line">   <span class="comment">// if bird happens to be Penguin...OOOPS!!</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><ol><li>不建模：“企鹅不可能”，它建模&quot;企鹅可能很好，但如果他们尝试是错误的&quot;，则尝试运行时错误→不可取</li><li>考虑可替代性-LSP失败</li></ol><h2 id="里氏替换原则总结"><a class="markdownIt-Anchor" href="#里氏替换原则总结"></a> 里氏替换原则总结</h2><ol><li>LSP与语义和替换有关<ol><li>设计前先了解<ol><li>必须清楚地记录每个方法和类的含义和目的</li><li>缺乏用户理解将导致事实上违反LSP</li></ol></li><li>可替换性至关重要<ol><li>每当任何系统中的任何代码引用任何类时，</li><li>该类别的任何将来或现有的子类别都必须100％可替换</li></ol></li></ol></li></ol><blockquote><p>“在派生类中重新定义一种方法时，只能用一个较弱的方法代替其先决条件，而用一个较强的方法代替其后置条件” — B. Meyer，1988年</p></blockquote><ol><li>合同设计<ol><li>对象的广告行为：<ol><li>更弱的前置条件</li><li>更强的后置条件</li></ol></li></ol></li><li>派生类服务应仅需更多且承诺不少于</li><li>LSP用来判断是否可以进行继承</li></ol><h3 id="课堂练习"><a class="markdownIt-Anchor" href="#课堂练习"></a> 课堂练习</h3><p><img src="https://s2.loli.net/2022/05/16/Ro5uKH43fdygis9.png" alt="" /></p><ol><li>两种设计都不好，因为前置条件强了</li></ol><h2 id="设计原则八组合代替继承"><a class="markdownIt-Anchor" href="#设计原则八组合代替继承"></a> 设计原则八:组合代替继承</h2><ol><li>组合优于继承</li><li>使用继承实现多态</li><li>使用委托不继承重用代码！</li></ol><h3 id="coad的继承规则"><a class="markdownIt-Anchor" href="#coad的继承规则"></a> Coad的继承规则</h3><ol><li>仅在满足以下所有条件时才使用继承：<ol><li>子类表示&quot;是一种特殊的&quot;，而不是&quot;是一种角色&quot;</li><li>子类的实例永远不需要成为另一个类的对象</li><li>子类扩展而不是覆盖或取消其父类的职责</li><li>子类不会扩展仅是实用程序类的功能</li></ol></li></ol><h3 id="继承组合-实例一"><a class="markdownIt-Anchor" href="#继承组合-实例一"></a> 继承/组合 实例一</h3><p><img src="https://s2.loli.net/2022/05/16/V3NAtK1dnWPB4oI.png" alt="" /></p><ul><li>如果出现一个用户既是 Passenger 也是 Agent</li><li>Java不允许多继承</li></ul><p><img src="https://s2.loli.net/2022/05/16/uh23qRyvXGBTp1t.png" alt="" /></p><ul><li>直接的想法就是直接组合</li><li>Person里面持有Passenger、Agent，但是这时候对于单一身份的人是很奇怪的</li></ul><h3 id="继承组合-示例二"><a class="markdownIt-Anchor" href="#继承组合-示例二"></a> 继承/组合 示例二</h3><p><img src="https://s2.loli.net/2022/05/16/oAfV18CgXhSIQKR.png" alt="" /></p><ul><li>Person持有Role，Passenger和Agent实现抽象接口PersonRole</li><li>Role可以是一个List</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Object</span> &#123;  </span><br><span class="line"><span class="keyword">public</span>: <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;&#125;; </span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line"> <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">collide</span><span class="params">(Object objects[])</span> </span>&#123;&#125;; </span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Visible</span> : <span class="keyword">public</span> Object &#123; </span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="comment">/* draw model at position of this object */</span> &#125;; </span><br><span class="line">    <span class="keyword">private</span>: Model* model; </span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solid</span> : <span class="keyword">public</span> Object &#123; </span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">collide</span><span class="params">(Object objects[])</span> </span>&#123; </span><br><span class="line"><span class="comment">/* check and react to collisions with objects */</span> &#125;; </span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Movable</span> : <span class="keyword">public</span> Object &#123; </span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="comment">/* update position */</span> &#125;; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>问题:游戏引擎中存在很多的对象,三个类分别实现方法之一</li><li>继承三件事但是只做了一件，Promise No Less不符合</li><li>接口应该拆成3个</li></ul><p><img src="https://s2.loli.net/2022/05/16/RzaCBKIfxNu8qOJ.jpg" alt="" /></p><h1 id="内聚"><a class="markdownIt-Anchor" href="#内聚"></a> 内聚</h1><ol><li>内聚的分类参考课本237页，功能内聚、信息内聚、过程内聚、时间内聚、逻辑内聚、偶然内聚。</li></ol><p><img src="https://s2.loli.net/2022/05/16/Hl2byUrOtQ689Kn.png" alt="" /></p><ul><li>方法和属性保持一致</li></ul><p><img src="https://s2.loli.net/2022/05/16/wcKF2JsmtWylEqR.png" alt="" /></p><ul><li>提高内聚性:将一个类分为三个类</li></ul><p><img src="https://s2.loli.net/2022/05/16/OIgsdHJRoEkPLMa.png" alt="" /></p><ul><li>将时间抽象出来</li></ul><h2 id="方法内聚"><a class="markdownIt-Anchor" href="#方法内聚"></a> 方法内聚</h2><ol><li>一类方法是普通耦合</li><li>所有方法尽一责<ol><li>信息内聚</li><li>相对功能(功能内聚)</li><li>第九个原则:单一职责原理</li></ol></li></ol><h2 id="提高内聚的方法"><a class="markdownIt-Anchor" href="#提高内聚的方法"></a> 提高内聚的方法</h2><h3 id="原则九单一责任原则srp"><a class="markdownIt-Anchor" href="#原则九单一责任原则srp"></a> 原则九：单一责任原则(SRP)</h3><blockquote><p>“一个类只有一个改变的理由”-罗伯特·马丁(Robert Martin)</p></blockquote><ol><li>与内聚性相关并从中导出，即模块中的元素应在功能上紧密相关</li><li>班级履行某种职责的责任也是班级变化的原因</li><li>一个高内聚的类不仅要是信息内聚的，还应该是功能内聚的。</li></ol><h4 id="问题案例-2"><a class="markdownIt-Anchor" href="#问题案例-2"></a> 问题案例</h4><p><img src="https://s2.loli.net/2022/05/16/LATyUvZkdejYSIz.png" alt="" /></p><ul><li>修改的原因:<ul><li>业务逻辑</li><li>XML格式</li></ul></li><li>如何修改如何分开</li></ul><h4 id="结局方案"><a class="markdownIt-Anchor" href="#结局方案"></a> 结局方案</h4><p><img src="https://s2.loli.net/2022/05/16/RBHc38XdaoKl6bV.png" alt="" /></p><ul><li>我们将两部分职责分离开</li></ul><h3 id="单一职责原则"><a class="markdownIt-Anchor" href="#单一职责原则"></a> 单一职责原则</h3><ol><li>班级只有一个改变的理由：职能/职责的凝聚力</li><li>几个职责：表示更改的几个原因→更频繁的更改</li><li>听起来很简单<ol><li>在现实生活中并非如此轻松</li><li>具有复杂性，重复性，不透明性的Tradeo</li></ol></li></ol><h2 id="课堂练习-2"><a class="markdownIt-Anchor" href="#课堂练习-2"></a> 课堂练习</h2><p><img src="https://s2.loli.net/2022/05/16/TDcg9MjbPqAKxQ6.png" alt="" /><br /><img src="https://s2.loli.net/2022/05/16/TDcg9MjbPqAKxQ6.png" alt="" /></p><ul><li>打电话和挂起两个职责分离开</li></ul><p><img src="https://s2.loli.net/2022/05/16/TDcg9MjbPqAKxQ6.png" alt="" /></p><ul><li>几何画板:Draw和Area的计算如何分开</li></ul><p><img src="https://s2.loli.net/2022/05/16/TDcg9MjbPqAKxQ6.png" alt="" /></p><ul><li>解决方案:集合长方形和图形长方形一一对应</li></ul><h1 id="耦合和内聚的度量"><a class="markdownIt-Anchor" href="#耦合和内聚的度量"></a> 耦合和内聚的度量</h1><h2 id="类之间的耦合度量"><a class="markdownIt-Anchor" href="#类之间的耦合度量"></a> 类之间的耦合度量</h2><h3 id="第一种度量cbo方法调用耦合"><a class="markdownIt-Anchor" href="#第一种度量cbo方法调用耦合"></a> 第一种度量:CBO(方法调用耦合)</h3><ol><li>对象类之间的耦合(CBO)</li><li>CBO = 该类访问他类的成员方法的数量 + 其他类的成员访问该类的成员方法的数量</li><li>其他类的计数：<ol><li>哪个访问此类中的方法或变量，或者</li><li>包含此类访问的方法或变量</li><li>不包括继承</li></ol></li><li>越低越好</li></ol><h3 id="第二种度量dac数据抽象耦合"><a class="markdownIt-Anchor" href="#第二种度量dac数据抽象耦合"></a> 第二种度量:DAC(数据抽象耦合)</h3><ol><li>数据抽象耦合(DAC)</li><li>DAC = 统计一类包含的其他类的其他类的实例的数量，不包括继承关系带来的实例引用</li><li>具有ADT类型的属性数量取决于其他类的定义</li><li>越低越好</li></ol><h3 id="第三种度量ca和ce有效和"><a class="markdownIt-Anchor" href="#第三种度量ca和ce有效和"></a> 第三种度量:Ca和Ce(有效和)</h3><ol><li>Ce和Ca(有效和有效偶联)<ol><li>Ca:在此类之外依赖于这类内部的类的数量</li><li>Ce:这个类中依赖于这个类的外部的类的数量</li></ol></li><li>越低越好</li></ol><h3 id="第四种度量dit-继承树的深度"><a class="markdownIt-Anchor" href="#第四种度量dit-继承树的深度"></a> 第四种度量:DIT 继承树的深度</h3><ol><li>继承树的深度</li><li>从节点到树的根的最大长度</li><li>随着DIT的增长，由于高度的继承性，很难预测类的行为</li><li>积极地，较大的DIT值意味着可以重用许多方法</li><li>理论上DIT是越大也好，但是同样也会带来很难实现LSP的问题，DIT&gt;3同样也需要审查继承机制的正确性</li></ol><h3 id="第五种度量-number-of-children-noc-子类的数量"><a class="markdownIt-Anchor" href="#第五种度量-number-of-children-noc-子类的数量"></a> 第五种度量 Number of children (NOC) 子类的数量</h3><ol><li>是一个类的直接子类的数量</li><li>随着NOC的增长，可复用性增加，抽象减弱了</li><li>随着NOC的增长，抽象可能变得稀疏</li><li>NOC的增加意味着测试量将增加</li><li>一般NOC超过三，就需要认真审查继承机制的正确性，检查是否满足LSP</li></ol><h3 id="衡量类凝聚力-lcom"><a class="markdownIt-Anchor" href="#衡量类凝聚力-lcom"></a> 衡量类凝聚力 LCOM</h3><blockquote><p>Lack of cohesion in methods (LCOM)</p></blockquote><p><img src="https://s2.loli.net/2022/05/16/hZmaMBC9XN32rpg.png" alt="" /></p><ul><li>交集为空则在P中，交集不为空则在Q中</li></ul><ol><li>值越低越好</li><li>还定义了许多其他版本的LCOM</li><li>如果LCOM&gt;= 1，则应将类划分</li></ol><p><img src="https://s2.loli.net/2022/05/16/rF1K5dlnJS8IeEV.png" alt="" /></p><ol start="5"><li>课本241、242页</li></ol><h2 id="summary-principles-from-modularization-模块化的原则"><a class="markdownIt-Anchor" href="#summary-principles-from-modularization-模块化的原则"></a> Summary: Principles from Modularization 模块化的原则</h2><ol><li>《Global Variables Consider Harmful》 全局变量被认为是有害的</li><li>《To be Explicit》让代码清晰一点</li><li>《Do not Repeat》避免重复</li><li>《Programming to Interface(Design by Contract)》面向接口编程，按照契约设计</li><li>《The Law of Demeter》迪米特法则</li><li>《Interface Segregation Principle(ISP)》接口分离原则</li><li>《Liskov Substitution Principle (LSP)》里氏替换原则:Request No More, Promise No Less</li><li>《Favor Composition Over Inheritance》 选择组合而不是继承</li><li>《Single Responsibility Principle》单一职责原理</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;面向对象的模块化&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#面向对象的模块化&quot;&gt;&lt;/a&gt; 面向对象的模块化&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/SpriCoder/SpriCoder-Notes&quot;</summary>
      
    
    
    
    <category term="软件工程" scheme="http://little-hurui.cloud/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="软件工程与计算2" scheme="http://little-hurui.cloud/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%972/"/>
    
    
    <category term="软件工程" scheme="http://little-hurui.cloud/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="面向对象的模块化" scheme="http://little-hurui.cloud/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Cpp特性</title>
    <link href="http://little-hurui.cloud/2022/05/16/Cpp%E7%89%B9%E6%80%A7/"/>
    <id>http://little-hurui.cloud/2022/05/16/Cpp%E7%89%B9%E6%80%A7/</id>
    <published>2022-05-16T01:44:04.000Z</published>
    <updated>2022-05-17T15:24:45.043Z</updated>
    
    <content type="html"><![CDATA[<h1 id="stl-all_of-any_of-none_of"><a class="markdownIt-Anchor" href="#stl-all_of-any_of-none_of"></a> (STL) all_of 、 any_of、 none_of</h1><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>l</mi><mi>g</mi><mi>o</mi><mi>r</mi><mi>i</mi><mi>t</mi><mi>h</mi><mi>m</mi></mrow><annotation encoding="application/x-tex">algorithm</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit" style="margin-right:0.03588em;">g</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit">i</span><span class="mord mathit">t</span><span class="mord mathit">h</span><span class="mord mathit">m</span></span></span></span> 头文件中定义了 3 种算法，用来检查在算法应用到序列中的元素上时，什么时候使谓词返回 true。这些算法的前两个参数是定义谓词应用范围的输入迭代器；第三个参数指定了谓词。检查元素是否能让谓词返回 true 似乎很简单，但它却是十分有用的。</p><ul><li>all_of() 算法会返回 true，前提是序列中的所有元素都可以使谓词返回 true。</li><li>any_of() 算法会返回 true，前提是序列中的任意一个元素都可以使谓词返回 true。</li><li>none_of() 算法会返回 true，前提是序列中没有元素可以使谓词返回 true</li></ul><blockquote><p>合理使用会大幅减少代码的整体耗时和空间</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;stl-all_of-any_of-none_of&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#stl-all_of-any_of-none_of&quot;&gt;&lt;/a&gt; (STL) all_of 、 any_of、 none_of&lt;/h1&gt;
&lt;</summary>
      
    
    
    
    <category term="C++" scheme="http://little-hurui.cloud/categories/C/"/>
    
    
    <category term="C++特性" scheme="http://little-hurui.cloud/tags/C-%E7%89%B9%E6%80%A7/"/>
    
    <category term="C++11" scheme="http://little-hurui.cloud/tags/C-11/"/>
    
  </entry>
  
  <entry>
    <title>区间合并</title>
    <link href="http://little-hurui.cloud/2022/05/15/%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/"/>
    <id>http://little-hurui.cloud/2022/05/15/%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/</id>
    <published>2022-05-15T04:59:55.000Z</published>
    <updated>2022-05-17T15:21:11.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="区间合并"><a class="markdownIt-Anchor" href="#区间合并"></a> 区间合并</h1><h2 id="6066-统计区间中的整数数目"><a class="markdownIt-Anchor" href="#6066-统计区间中的整数数目"></a> <a href="https://leetcode.cn/problems/count-integers-in-intervals/">6066. 统计区间中的整数数目</a></h2><p>板子题</p><p>给你区间的 空 集，请你设计并实现满足要求的数据结构：</p><p>新增：添加一个区间到这个区间集合中。<br />统计：计算出现在 至少一个 区间中的整数个数。<br />实现 <code>CountIntervals</code>类：</p><ul><li>CountIntervals () 使用区间的空集初始化对象</li><li>void add(int left, int right) 添加区间 [left, right] 到区间集合之中。</li><li>int count() 返回出现在 至少一个 区间中的整数个数。<br />注意：区间 [left, right] 表示满足 left &lt;= x &lt;= right 的所有整数 x 。</li></ul><p><strong>提示</strong></p><blockquote><p><code>1 &lt;= left &lt;= right &lt;= 109</code></p><p>最多调用 <code>add</code> 和 <code>count</code> 方法 <strong>总计</strong> <code>105</code> 次</p><p>调用 <code>count</code> 方法至少一次</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CountIntervals</span> &#123;</span><br><span class="line">    <span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    set&lt;pii&gt; st;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">CountIntervals</span>() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//注意pii存放的是[right,left]</span></span><br><span class="line">        <span class="type">int</span> L = left, R = right;</span><br><span class="line">        <span class="keyword">auto</span> it = st.<span class="built_in">lower_bound</span>(<span class="built_in">pii</span>(left - <span class="number">1</span>, <span class="number">-2e9</span>));</span><br><span class="line">        <span class="keyword">while</span> (it != st.<span class="built_in">end</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (it-&gt;second &gt; right + <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">            L = <span class="built_in">min</span>(L, it-&gt;second);</span><br><span class="line">            R = <span class="built_in">max</span>(R, it-&gt;first);</span><br><span class="line">            ans -= it-&gt;first - it-&gt;second + <span class="number">1</span>;</span><br><span class="line">            st.<span class="built_in">erase</span>(it++);</span><br><span class="line">        &#125;</span><br><span class="line">        ans += R - L + <span class="number">1</span>;</span><br><span class="line">        st.<span class="built_in">insert</span>(<span class="built_in">pii</span>(R, L));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;区间合并&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#区间合并&quot;&gt;&lt;/a&gt; 区间合并&lt;/h1&gt;
&lt;h2 id=&quot;6066-统计区间中的整数数目&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#6066-统计区</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://little-hurui.cloud/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="常用算法" scheme="http://little-hurui.cloud/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/"/>
    
    <category term="板子" scheme="http://little-hurui.cloud/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%9D%BF%E5%AD%90/"/>
    
    
    <category term="Algorithm" scheme="http://little-hurui.cloud/tags/Algorithm/"/>
    
    <category term="区间合并" scheme="http://little-hurui.cloud/tags/%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/"/>
    
  </entry>
  
  <entry>
    <title>状态压缩DP</title>
    <link href="http://little-hurui.cloud/2022/05/14/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9DP/"/>
    <id>http://little-hurui.cloud/2022/05/14/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9DP/</id>
    <published>2022-05-13T16:27:24.000Z</published>
    <updated>2022-05-17T15:22:06.265Z</updated>
    
    <content type="html"><![CDATA[<h1 id="状态压缩dp"><a class="markdownIt-Anchor" href="#状态压缩dp"></a> 状态压缩DP</h1><h2 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h2><p>状压dp是一类比较难理解的dp</p><p>在这之前，我们应该清楚所有的dp是<strong>解决多阶段决策最优化问题</strong>的一种思想方法；</p><p>动态规划多阶段一个重要的特性就是<strong>无后效性</strong>。无后效性就是值对于某个给定的阶段状态，它以前各阶段的状态无<strong>法直接影响它未来的发展</strong>，而只能通过当前的这个状态。换句话说影响当前阶段状态只可能是前一阶段的状态；</p><p>那么可以看出如何定义状态是至关重要的，因为状态决定了阶段的划分，阶段的划分保证了无后效性。</p><p><strong>有时候为了达到最优子结构和无后效性的效果，我们必须要定义好状态</strong>。但是有时候状态维度特别多，但是每个状态的</p><p>决策又很少，这样我们开多维数组很可能会浪费，并且可能会爆空间。</p><p>这时候我们考虑用状态压缩来做，比如每个状态的决策只有两个，但是状态的维度很多。下面我们用01背包来举例,而且这一个维度能表示所有物品放与不放的情况；这个过程就叫做状态压缩</p><h2 id="二进制表示状态"><a class="markdownIt-Anchor" href="#二进制表示状态"></a> <strong>二进制表示状态</strong></h2><p>二进制的很多应用离不开<strong>集合</strong>这个概念，我们都知道在计算机当中，所有数据都是以二进制的形式存储的。一般一个int整形是4个字节，也就是32位bit，我们通过这32位bit上0和1的组合可以表示多大21亿个不同的数。如果我们把这32位bit看成是一个集合，那么<strong>每一个数都应该对应集合的一种状态</strong>，并且每个数的状态都是不同的.</p><p>也就是说一个整数可以转化成二进制数，它可以代表某个集合的一个状态，这两者一一对应。这一点非常重要，是后面一切推导的基础</p><h2 id="状态转移"><a class="markdownIt-Anchor" href="#状态转移"></a> 状态转移</h2><p>整数的二进制表示可以代表一个二元集合的状态，既然是状态就可以转移。在此基础上，我们可以得出另一个非常重要的结论——<strong>我们可以用整数的加减表示状态之间的转移</strong></p><p>这也就是状态压缩的精髓，所谓的压缩，其实就是将一个集合压缩成了一个整数的意思，因为整数可以作为数组的下标，这样操作会方便我们的编码。</p><h2 id="旅行商问题"><a class="markdownIt-Anchor" href="#旅行商问题"></a> 旅行商问题</h2><p><u>有一个商人想要<strong>旅行各地</strong>并进行贸易。各地之间有若干条<strong>单向的通道</strong>相连，商人从一个地方出发，想要用最短的路程把所有地区环游一遍，请问环游需要的最短路程是多少？在这题当中，我们假设商人从0位置出发，最后依然回到位置0</u></p><p><strong>极端情况下也就是所有点之间都有连线</strong>的时候，对于每一个点来说，它可以选择的下一个位置一共有n-1种。那么一共可以选择的路线总共有n!种，这是一个非常大的值，显然是我们不能接受的。这也是为什么我们说旅行商问题是一个NP-Hard问题</p><h2 id="np问题"><a class="markdownIt-Anchor" href="#np问题"></a> <strong>NP问题</strong></h2><p>P问题可以认为是已经解决的问题，这个解决的定义是可以做<strong>多项式的时间复杂度内</strong>解决。所谓的多项式，也就是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mi>k</mi></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.849108em;"></span><span class="strut bottom" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span>，这里的k是一个常数。与多项式相反的函数有很多，比如指数函数、阶乘等等</p><p>NP问题并不是P问题的反义，这里的N不能理解成No，就好像noSQL不是非SQL的意思一样。NP问题指的是可以<strong>在多项式内验证解的问题</strong></p><p>比如给定一个排序的序列让我们判断它是不是有序的，这很简单，我们只需要遍历一下就好了。再比如大整数的因式分解，我们来做因式分解会很难，但是让我们判断一个因式分解的解法是不是正确则要简单得多，我们直接把它们乘起来和原式比较就可以了</p><p>显然<strong>所有P问题都是NP问题</strong>，既然我们可以多项式内找到解，那么必然我们也可以在多项式内验证解是否正确。但是反过来是否成立呢，是否多项式时间内可以验证解的问题，也可以通过某种算法可以在多项式时间内被解开呢？<strong>究竟是我们暂时还没有想到算法，还是解法一开始就不存在呢？</strong></p><p>上面的这个问题就是著名的NP=P是否成立的问题，这个问题目前仍然是一个谜，有些人相信成立，有些人不相信，这也被认为是二十一世纪的最大难题之一。</p><p>为了证明这个问题，科学家们又想出了一个办法，就是给问题做规约。举个例子，比如解方程，我们解一元一次方程非常简单，而解二元一次方程则要困难一些。如果我们想出了解二元一次方程的办法，那么必然也可以用来解一元一次方程，因为我们只需要令另一个未知数等于0就是一元一次方程了。</p><p>同理，我们也可以把NP问题做转化，将它的难度增大，<strong>增大到极限成为一个终极问题</strong>。由于这个终极问题是所有NP问题转化得到的，只要我们想出算法来解决了终极问题，那么，所有的NP问题全部都迎刃而解。就比如如果我们想出了解N元方程的算法，那么这一类解方程的问题就都搞定了。这种转化之后得到的问题称为<strong>NP完全问题，也叫做NPC问题</strong></p><p>最后，还有一个NP-Hard问题，NP-Hard问题是说所有NP问题可以经过转化得到它，但是<strong>它本身并不是NP问题</strong>，也就是说我们无法在多项式时间内判断它的解是否正确。</p><p>比如刚才提到的旅行商问题就是一个NP-Hard问题，因为即使我们给定了一个解，我们也<strong>没有办法快速判断给定的解是否正确</strong>，必须要遍历完所有的情况才可以。我们验证的复杂度就已经超出了多项式的范畴，所以它不属于NP问题，比NP问题更加困难，所以是一个NP-Hard问题</p><h2 id="状态压缩解法"><a class="markdownIt-Anchor" href="#状态压缩解法"></a> <strong>状态压缩解法</strong></h2><p>既然我们要用动态规划的思路来解决这个问题，就<strong>不能脱离状态和决策</strong>。前文说了我们利用二进制可以用一个整数来表示一个集合的状态，我们很容易会把这个状态当成是动态规划当中的状态，但其实这是不对的。</p><p>单纯集合之间的转移没有限制条件，比如之前的例子当中我们已经拿了1号球和2号球，后面只要是剩下的球都可以拿，但是旅行商问题不一样，假设我们去过了0和1两个地方，我们当前在位置1，我们是无法用2和5两地之间的连线来更新这个状态的，因为我们当前只能从1号位置出发。也就是说我们<strong>能采取的决策是有限制的</strong>。</p><p>所以我们不能只单纯地拿集合的状态来当做状态，为了保证地点之间的移动顺序正确，我们还需要加上一维，也就是当前所处的位置。所以<strong>真正的状态是我们之前遍历过的位置的状态，加上当前所处的地点，这两者的结合</strong></p><h2 id="example"><a class="markdownIt-Anchor" href="#example"></a> Example</h2><h3 id="691-贴纸拼词"><a class="markdownIt-Anchor" href="#691-贴纸拼词"></a> <a href="https://leetcode.cn/problems/stickers-to-spell-word/">691. 贴纸拼词</a></h3><p>我们有 n 种不同的贴纸。每个贴纸上都有一个小写的英文单词。</p><p>您想要拼写出给定的字符串 target ，方法是从收集的贴纸中切割单个字母并重新排列它们。如果你愿意，你可以多次使用每个贴纸，每个贴纸的数量是无限的。</p><p>返回你需要拼出 target 的最小贴纸数量。如果任务不可能，则返回 -1 。</p><p><strong>注意</strong>：在所有的测试用例中，所有的单词都是从 1000 个最常见的美国英语单词中随机选择的，并且 target 被选择为两个随机单词的连接。</p><p>使用一个int 类型的数 <code>state</code>记录当前的target的凑成情况，如果t[i]已经凑成，state的低i位上1</p><p>初始状态 <code>state=0</code>，最终如果凑成，<code>state = (1 &lt;&lt; n) -1</code></p><p>由于每个<code>stickers</code>可以被重复使用，因此对一个特定的<code>state</code>来说，其转换为最终的 state 的最小步数固定，我们可以使用记忆化搜索来减少重复搜索</p><p>单步搜索中，我们枚举每个<code>stickers[i]</code>来更新<code>state</code>，假设使用某个<code>stickers[i]</code>得到的新状态为 <code>new_state</code>，则所有的 <code>dfs(new_state)+1</code>的最小值是<code>f[state]</code></p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minStickers</span><span class="params">(vector&lt;string&gt;&amp; stickers, string target)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(<span class="number">1</span>&lt;&lt;<span class="number">15</span>,INT_MAX)</span></span>;</span><br><span class="line">        <span class="type">int</span> n = stickers.<span class="built_in">size</span>(); <span class="type">int</span> m = target.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">cnt</span>(n,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">26</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">char</span> c : stickers[i])</span><br><span class="line">                cnt[i][c-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line"></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;<span class="comment">//dp[i] 即添加第i个字符后 需要的字帖数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;(<span class="number">1</span>&lt;&lt;m);i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[i] == INT_MAX) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">//无法凑出</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;n;k++)&#123;</span><br><span class="line">                <span class="type">int</span> nstate = i;<span class="comment">//记录状态</span></span><br><span class="line">                vector&lt;<span class="type">int</span>&gt; left = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(cnt[k]);<span class="comment">//拷贝cnt</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(nstate &amp; (<span class="number">1</span> &lt;&lt; j)) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="comment">//如果对应位置的字符已经凑齐</span></span><br><span class="line">                    <span class="keyword">if</span>(left[target[j] - <span class="string">&#x27;a&#x27;</span>] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                        nstate += (<span class="number">1</span>&lt;&lt;j);<span class="comment">//对应位置上1</span></span><br><span class="line">                        left[target[j]-<span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                dp[nstate] = <span class="built_in">min</span>(dp[nstate],dp[i]+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[(<span class="number">1</span>&lt;&lt;m)<span class="number">-1</span>] == INT_MAX ? <span class="number">-1</span>: dp[(<span class="number">1</span>&lt;&lt;m)<span class="number">-1</span>];</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>但是 时间空间消耗不尽如人意</li></ul><h2 id="优化"><a class="markdownIt-Anchor" href="#优化"></a> 优化</h2><p>让我们思考一下问题出在哪里。</p><p>考虑有hello和world，目标状态是helloworld。我们从0000000000开始时，既考虑了使用hello，也考虑了使用world。这样就更新出了1111100000和0000011111两个状态。我们会发现，它们其实是殊途同归的。第一次选hello，第二次就要选world；第一次选world，第二次就要选hello。由于我们只需要计算使用贴纸的数量，先后顺序其实并不重要，这两个状态其实是重复的。</p><p>如何消除这一重复？我们可以增加一重限制。每次从当前状态开始更新时，我们只选择包含了当前状态从左边开始第一个没有包含的字母的那些贴纸。比如说在上面的例子中，在0000000000状态下，我们将只会选择hello，不会选择world（没有包含h）。这样就去除了顺序导致的重复状态。</p><p>为了实现这一优化，我们预处理得到了can数组，记录包含每一个字母的贴纸序号</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minStickers</span><span class="params">(vector&lt;string&gt;&amp; stickers, string target)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//dp[i]记录对应的状态的 minstickers</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(<span class="number">1</span> &lt;&lt; <span class="number">15</span>, INT_MAX)</span></span>;</span><br><span class="line">        <span class="type">int</span> n = stickers.<span class="built_in">size</span>(), m = target.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">cnt</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">26</span>));</span><br><span class="line">        <span class="comment">//can 记录stickers存在的所有字母</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">can</span>(<span class="number">26</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> c : stickers[i]) &#123;</span><br><span class="line">                <span class="type">int</span> d = c - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                cnt[i][d]++;</span><br><span class="line">                <span class="keyword">if</span> (can[d].<span class="built_in">empty</span>() || can[d].<span class="built_in">back</span>() != i)</span><br><span class="line">                    can[d].<span class="built_in">emplace_back</span>(i);                </span><br><span class="line">            &#125;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; m) - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            <span class="comment">//总共 1&lt;&lt;m 种状态</span></span><br><span class="line">            <span class="keyword">if</span> (dp[i] == INT_MAX) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> d;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">                <span class="comment">//搜索target</span></span><br><span class="line">                <span class="keyword">if</span> (!(i &amp; (<span class="number">1</span> &lt;&lt; j))) &#123;</span><br><span class="line">                    d = j;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            d = target[d] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k : can[d]) &#123;</span><br><span class="line">                <span class="type">int</span> nxt = i;</span><br><span class="line">                <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">left</span><span class="params">(cnt[k])</span></span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (nxt &amp; (<span class="number">1</span> &lt;&lt; j))</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span> (left[target[j] - <span class="string">&#x27;a&#x27;</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        nxt += (<span class="number">1</span> &lt;&lt; j);</span><br><span class="line">                        left[target[j] - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                dp[nxt] = <span class="built_in">min</span>(dp[nxt], dp[i] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[(<span class="number">1</span> &lt;&lt; m) - <span class="number">1</span>] == INT_MAX ? <span class="number">-1</span> : dp[(<span class="number">1</span> &lt;&lt; m) - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1><p><a href="https://leetcode.cn/problems/stickers-to-spell-word/solution/zhuang-tai-ya-suo-dpji-you-hua-by-lucifer1004/">状态压缩DP及优化 - 贴纸拼词 - 力扣（LeetCode）</a></p><p><a href="https://zhuanlan.zhihu.com/p/131585177">动态规划——状态压缩DP - 知乎 (zhihu.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;状态压缩dp&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#状态压缩dp&quot;&gt;&lt;/a&gt; 状态压缩DP&lt;/h1&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h2</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://little-hurui.cloud/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="常用算法" scheme="http://little-hurui.cloud/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Algorithm" scheme="http://little-hurui.cloud/tags/Algorithm/"/>
    
    <category term="状态压缩" scheme="http://little-hurui.cloud/tags/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9/"/>
    
  </entry>
  
  <entry>
    <title>数据管理基础 NoSQL</title>
    <link href="http://little-hurui.cloud/2022/05/13/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80-NoSQL/"/>
    <id>http://little-hurui.cloud/2022/05/13/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80-NoSQL/</id>
    <published>2022-05-13T13:57:50.000Z</published>
    <updated>2022-05-27T07:26:13.802Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ch-62-关系型数据库的价值"><a class="markdownIt-Anchor" href="#ch-62-关系型数据库的价值"></a> ch 62 关系型数据库的价值</h1><h2 id="获取持久化数据"><a class="markdownIt-Anchor" href="#获取持久化数据"></a> 获取持久化数据</h2><ul><li>持久<strong>存储大量数据</strong></li><li>在大多数的计算架构中，有两个存储区域:<ul><li>速度快但是数据易丢失的“<strong>主存储器</strong>”(main memory)<ul><li>空间有限</li><li>易挥发</li></ul></li><li>存储量大但速度较慢的“<strong>后备存储器</strong>”(backing store)<ul><li>文件系统，如许多生产力应用程序(productivity application，比如文字处理软件)</li><li>数据库，大多数企业级应用程序</li></ul></li></ul></li></ul><h2 id="并发"><a class="markdownIt-Anchor" href="#并发"></a> 并发</h2><ul><li><strong>多个用户会一起访问</strong>同一份数据体，并且可能要修改这份数据。（大多数情况下，他们都在不同数据区域内各自操作，但是，偶尔也会同时操作一小块数据）</li><li>关系型数据库提供了 <strong>“事务”机制</strong>来控制对其数据的访问，以便处理此问题。</li><li>事务在处理错误时也有用。通过事务更改数据时，如果在处理变更的过程中出错了，那么就可以回滚（roll back）这一事务，以<strong>保证数据不受破坏</strong></li></ul><h2 id="集成"><a class="markdownIt-Anchor" href="#集成"></a> 集成</h2><ul><li>企业级应用程序居于一个丰富的生态系统中，它需要与其他应用程序<strong>协同工作</strong>。不同的应用程序经常要使用同一份数据，而且某个应用程序更新完数据之后，必须让其他应用程序知道这份数据已经改变了。</li><li>常用的办法是使用<strong>共享数据库集成(shared database integration)</strong> ，多个应用程序都将数据保存在同一个数据库中。这样一来，所有应用程序很容易就能使用彼此的数据了。</li><li>与多用户访问单一应用程序时一样，数据库的并发控制机制也可以应对多个应用程序</li></ul><h2 id="近乎标准的模型"><a class="markdownIt-Anchor" href="#近乎标准的模型"></a> 近乎标准的模型</h2><ul><li>关系型数据库以近乎标准的方式提供了数据模型。</li><li>尽管各种关系型数据库之间仍有差异，但其核心机制相同<ul><li>不同厂商的SQL方言相似</li><li>“事务” 的操作方式也几乎一样</li></ul></li></ul><h1 id="ch-63-nosql的由来"><a class="markdownIt-Anchor" href="#ch-63-nosql的由来"></a> ch 63 NoSQL的由来</h1><h2 id="阻抗失谐"><a class="markdownIt-Anchor" href="#阻抗失谐"></a> 阻抗失谐</h2><p><strong>阻抗失谐 1</strong></p><ul><li>基于<strong>关系代数(relational algebra)</strong>，关系模型把数据组织成 “<strong>关系</strong>”(relation)和“<strong>元组</strong>”(tuple)。<ul><li>元组是由“<strong>键值对</strong>”(name-value pair)构成的集合</li><li>而关系则是<strong>元组的集合</strong>。</li><li>SQL操作所使用及返回的数据都是“关系”</li><li>元组不能包含“嵌套记录”(nested record)或“列表”(list) 等任何结构</li></ul></li><li>而内存中的数据结构则无此限制，它可以使用的数据组织形式比“关系”更丰富。</li><li><strong>关系模型和内存中的数据结构之间存在差异</strong>。这种现象通常称为“阻抗失谐”。<ul><li>如果在内存中使用了较为丰富的数据结构，那么要把它保存到磁盘之前，必须先将其转换成“关系形式。于是就发生了“阻抗失谐”：需要在两种不同的表示形式之间转译</li></ul></li></ul><p><strong>阻抗失谐 2</strong></p><p><img src="https://s2.loli.net/2022/05/15/SVwxP5kHXTczQRM.png" alt="" /></p><h2 id="解决方法"><a class="markdownIt-Anchor" href="#解决方法"></a> 解决方法</h2><ul><li>面向对象数据库</li><li>“对象-关系映射框架”( object-relational mapping framework) 通过映射模式( mapping pattern)表达转换</li><li>问题：<ul><li>查询性能问题</li><li>集成问题</li></ul></li></ul><h2 id="集成数据库"><a class="markdownIt-Anchor" href="#集成数据库"></a> 集成数据库</h2><ul><li>SQL充当了应用程序之间的一种<code>集成机制</code>。数据库在这种情况下成了“集成数据库”(integration database)<ul><li>通常由不同团队所开发的多个应用程序，将其数据存储在一个<code>公用的数据库</code>中。</li><li>所有应用程序都在操作内容一致的持久数据，提高了数据通信的效率</li><li>为了能将很多应用程序集成起来，数据库的结构比单个应用程序所要用到的结构复杂得多</li><li>如果某个应用程序想要修改存储的数据，那么它就得和所有使用此数据库的其他应用程序相协调。</li><li>各种应用程序的结构和性能要求不尽相同，数据库通常不能任由应用程序更新其数据。为了保持数据库的完整性，我们需要将这一责任交由数据库自身负责。</li></ul></li></ul><h2 id="应用程序数据库"><a class="markdownIt-Anchor" href="#应用程序数据库"></a> 应用程序数据库</h2><ul><li>将数据库视为“应用程序数据库”(application database)， 其内容只能由一个应用程序的代码库直接访问<ul><li>由于只有开发应用程序的团队才需要知道其结构，模式的维护与更新就更容易了。由于应用程序开发团队同时管理数据库和应用程序代码，因此可以把维护数据库完整性的工作放在应用程序代码中。</li></ul></li><li>交互工作转交由应用程序接口来完成<ul><li>“面向服务架构” 、Web服务。使得应用程序间通过平台中立的方式完成集成。</li><li>在Web服务作为集成机制后，所交换的数据可以拥有更为灵活的结构<ul><li>如XML、 JSON格式，它们均能够使用嵌套记录及列表等更丰富的数据结构</li><li>使用“面向文档”的交互方式，减少通讯次数和开销</li><li>既可以传输文本，也可以传输二进制</li></ul></li></ul></li><li>在使用应用程序数据库后，由于内部数据库与外部通信服务之间已经解耦，所以外界并不关心数据如何存储，这样就可以选用非关系型数据库了<ul><li>关系型数据库的许多特性，诸如安全性等，可以交给使用该数据库的外围应用程序(enclosing application)来做</li></ul></li></ul><h2 id="集群问题"><a class="markdownIt-Anchor" href="#集群问题"></a> 集群问题</h2><ul><li>纵向扩展(scale up)及横向扩展(scale out)<ul><li>采用集群应对横向扩展</li></ul></li><li>关系型数据库的“分片”和“复制”<ul><li>在负载分散的同时，应用程序必须控制所有分片，需要知道数据库中的每份小数据的存储情况</li><li>如何确保跨分片的查询、参照完整性(referential integrity)、 事务、一致性控制(consistency control)等操作</li></ul></li></ul><h2 id="nosql"><a class="markdownIt-Anchor" href="#nosql"></a> NoSQL</h2><ul><li>NoSQL没有规范的定义<ul><li>“开源分布式的非关系型数据库”</li></ul></li><li>各种NoSQL数据库的共同特性是<ul><li><strong>不使用关系模型</strong></li><li>在集群中运行良好<ul><li>关系型数据库使用ACID事务来保持整个数据库的一致性，而这种方式本身与集群环境相冲突</li><li>NoSQL数据库为<strong>处理并发及分布问题</strong>提供了众多选项。</li></ul></li><li>开源</li><li>适用于21世纪的互联网公司</li><li>无模式<ul><li>不用事先修改结构定义，即可自由添加字段了</li><li>这在处理不规则数据和自定义字段时非常有用</li></ul></li></ul></li></ul><h1 id="ch-64-聚合"><a class="markdownIt-Anchor" href="#ch-64-聚合"></a> ch 64 聚合</h1><h2 id="聚合"><a class="markdownIt-Anchor" href="#聚合"></a> 聚合</h2><ul><li>把一组相互关联的对象视为一个整体单元来操作，而这个单元就叫聚合（aggregate）。<ul><li>通过原子操作(atomic operation)更新聚合的值（含一致性管理）</li><li>以聚合为单位与数据存储通信</li><li>在集群中操作数据库时，用聚合为单位来复制和分片</li><li>由于程序员经常通过聚合结构来操作数据，故而采用聚合也能让其工作更为轻松。</li></ul></li><li>面向聚合操作数据时所用的单元，其结构比元组集合复杂得多<ul><li>“键值数据库”、“文档数据库”、“列族数据库”</li></ul></li></ul><h2 id="关系模型"><a class="markdownIt-Anchor" href="#关系模型"></a> 关系模型</h2><p><img src="https://s2.loli.net/2022/05/13/XsivCTwIqMBu1ex.png" alt="" /></p><h2 id="关系实例"><a class="markdownIt-Anchor" href="#关系实例"></a> 关系实例</h2><p><img src="https://s2.loli.net/2022/05/13/ovr8NUq5XhQ7egM.png" alt="" /></p><h2 id="聚合数据模型"><a class="markdownIt-Anchor" href="#聚合数据模型"></a> 聚合数据模型</h2><p><img src="https://s2.loli.net/2022/05/13/S9IMVpGkyNRwuAt.png" alt="" /></p><h2 id="聚合实例两个聚合"><a class="markdownIt-Anchor" href="#聚合实例两个聚合"></a> 聚合实例（两个聚合）</h2><p><img src="https://s2.loli.net/2022/05/13/IoX3fC2thez4uVT.png" alt="" /></p><h2 id="另一种聚合"><a class="markdownIt-Anchor" href="#另一种聚合"></a> 另一种聚合</h2><p><img src="https://s2.loli.net/2022/05/13/WEVQbfhk1KroHNs.png" alt="" /></p><h2 id="聚合实例一个聚合"><a class="markdownIt-Anchor" href="#聚合实例一个聚合"></a> 聚合实例（一个聚合）</h2><p><img src="https://s2.loli.net/2022/05/13/PL6dIeDzri97hvK.png" alt="" /></p><h2 id="聚合无知"><a class="markdownIt-Anchor" href="#聚合无知"></a> 聚合无知</h2><ul><li>关系型数据库的数据模型中，没有“聚合”这一概念，因此我们称之为“聚合无知”(aggregate- ignorant)。<ul><li>“图数据库&quot;也是聚合无知的。</li></ul></li><li>聚合反应数据操作的边界，很难在共享数据的多个场景中“正确” 划分，对某些数据交互有用的聚合结构，可能会阻碍另一些数据交互<ul><li>在客户下单并核查订单，以及零售商处理订单时，将订单视为一个聚合结构就比较合适。</li><li>如零售商要分析过去几个月的产品销售情况，那么把订单做成一个聚合结构反而麻烦了。要取得商品销售记录，就必须深挖数据库中的每一个聚合。</li></ul></li><li>若是采用“聚合无知模型”，那么很容易就能以不同方式来查看数据<ul><li>在操作数据时，如果没有一种占主导地位的结构，那么选用此模型效果会更好。</li></ul></li></ul><h2 id="聚合之间的关系"><a class="markdownIt-Anchor" href="#聚合之间的关系"></a> 聚合之间的关系</h2><ul><li>例如：把订单和客户放在两个聚合中，但是想在它们之间设定某种关系，以便能根据订单查出客户数据。<ul><li>要提供这种关联，最简单的办法就是把客户ID嵌入订单的聚合数据中。在应用层级提供关联。</li><li>在数据库层级提供聚合之间关系的表达机制</li></ul></li><li>操作多个有关联的聚合，由应用保证其正确性<ul><li>面向聚合数据库获取数据时以聚合为单元，只能保证单一聚合内部内容的原子性。</li></ul></li></ul><h2 id="聚合-集群和事务处理"><a class="markdownIt-Anchor" href="#聚合-集群和事务处理"></a> 聚合、集群和事务处理</h2><ul><li>在集群上运行时，需要把采集数据时所需的节点数降至最小<ul><li>如果在数据库中明确包含聚合结构，那么它就可以根据这一重要信息，知道哪些数据需要一起操作了，而且这些数据应该放在同一个节点中</li></ul></li><li>通常情况下，面向聚合的数据库不支持跨越多个聚合的ACID事务。它每次只能在一个聚合结构上执行原子操作。<ul><li>如果想以原子方式操作多个聚合，那么就必须自己组织应用程序的代码</li><li>在实际应用中，大多数原子操作都可以局限于某个聚合结构内部，而且，在将数据划分为聚合时，这也是要考虑的因素之一</li></ul></li></ul><h1 id="ch-65-主要的nosql数据模型"><a class="markdownIt-Anchor" href="#ch-65-主要的nosql数据模型"></a> ch 65 主要的NoSQL数据模型</h1><h2 id="键值数据模型与文档数据模型"><a class="markdownIt-Anchor" href="#键值数据模型与文档数据模型"></a> 键值数据模型与文档数据模型</h2><ul><li>这两类数据库都包含<strong>大量聚合</strong>，每个聚合中都有一个获取数据所用的键或ID。</li><li>两种模型的区别是:<ul><li><strong>键值数据库的聚合不透明</strong>，只包含一些没有太多意义的大块信息<ul><li>聚合中可以存储任意数据。数据库可能会限制聚合的总大小，但除此之外，其他方面都很随意</li><li>在键值数据库中，要访问聚合内容，<strong>只能通过键来查找</strong></li></ul></li><li>在文档数据库的聚合中，可以<strong>看到其结构</strong>。<ul><li>限制其中存放的内容，它定义了其允许的结构与数据类型</li><li>能够<strong>更加灵活</strong>地访问数据。通过用聚合中的字段查询，可以只获取一部分聚合，而不用获取全部内容</li><li>可以<strong>按照聚合内容创建索引</strong></li></ul></li></ul></li></ul><h2 id="列族存储"><a class="markdownIt-Anchor" href="#列族存储"></a> 列族存储</h2><p><strong>列族存储 1</strong></p><ul><li>部分数据库都以行为单元存储数据。然而，有些情况下写入操作执行得很少，但是经常需要一次读取若干行中的很多列。此时，列存储数据库将所有行的某一组列作为基本数据存储单元</li><li>列族数据库将列组织为列族。每一列都必须是某个列族的一部分，而且访问数据的单元也得是列<ul><li>某个列族中的数据经常需要一起访问。</li></ul></li><li>列族模型将其视为两级聚合结构(two-level aggregate structure)。<ul><li>与“键值存储”相同，第一个键通常代表行标识符，可以用它来获取想要的聚合。</li><li>列族结构与“键值存储”的区别在于，其“行聚合”(row aggregate)本身又是一个映射，其中包含一些更为详细的值。这些“二级值&quot; (second-level value)就叫做“列”。与整体访问某行数据一样，我们也可以操作特定的列</li></ul></li></ul><p><strong>列族存储 2</strong></p><p><img src="https://s2.loli.net/2022/05/13/GaELBJm3r2ysgt7.png" alt="" /></p><p><strong>列族存储 3</strong></p><ul><li>两种数据组织方式<ul><li>面向行( row-oriented)：每一行都是一个聚合(例如ID为1234的顾客就是一个聚合)，该聚合内部存有一些包含有用数据块(客户信息、订单记录)的列族</li><li>面向列(column-oriented): 每个列族都定义了一种记录类型(例如客户信息)，其中每行都表示一条记录。数据库中的大“行”理解为列族中每一个短行记录的串接</li></ul></li></ul><h2 id="面向聚合的数据模型"><a class="markdownIt-Anchor" href="#面向聚合的数据模型"></a> 面向聚合的数据模型</h2><ul><li>共同点<ul><li>都使用聚合这一概念，而且聚合中都有一个可以查找其内容的索引键。</li><li>在集群上运行时，聚合是中心环节，因为数据库必须保证将聚合内的数据存放在同一个节点上。</li><li>聚合是“更新”操作的最小数据单位(atomic unit)，对事务控制来说，以聚合为操作单元</li></ul></li><li>差别<ul><li>键值数据模型将聚合看作不透明的整体，只能根据键来查出整个聚合，而不能仅仅查询或获取其中的一部分</li><li>文档模型的聚合对数据库透明，于是就可以只查询并获取其中一部分数据了，不过，由于文档没有模式，因此在想优化存储并获取聚合中的部分内容时，数据库不太好调整文档结构</li><li>列族模型把聚合分为列族，让数据库将其视为行聚合内的一个数据单元。此类聚合的结构有某种限制，但是数据库可利用此种结构的优点来提高其易访问性。</li></ul></li></ul><h2 id="图结构"><a class="markdownIt-Anchor" href="#图结构"></a> 图结构</h2><img src="https://s2.loli.net/2022/05/13/qI17bZjQKCtdALn.png" style="zoom:50%;" /><h2 id="图数据库"><a class="markdownIt-Anchor" href="#图数据库"></a> 图数据库</h2><ul><li>图数据库的基本数据模型：由边(或称“弧”，arc)连接而成的若干节点。</li><li>可以用专门为“图”而设计的查询操作来搜寻图数据库的网络了<ul><li>指定节点，通过边进行查询</li></ul></li><li>关系型数据可以通过“外键”实现，查询中的多次连接，效率较差</li></ul><h2 id="无模式"><a class="markdownIt-Anchor" href="#无模式"></a> 无模式</h2><ul><li>关系型数据库中，首先必须定义“模式”，然后才能存放数据。</li><li>NoSQL数据库，无模式：<ul><li>“键值数据库&quot;可以把任何数据存放在一个“键”的名下。</li><li>“文档数据库” 对所存储的文档结构没有限制</li><li>在列族数据库中，任意列里面都可以随意存放数据</li><li>图数据库中可以新增边，也可以随意向节点和边中添加属性。</li></ul></li></ul><h2 id="格式不一致的数据"><a class="markdownIt-Anchor" href="#格式不一致的数据"></a> 格式不一致的数据</h2><ul><li>每条记录都拥有不同字段集(set of field)</li><li>关系型数据库中，“模式”会将表内每一行的数据类型强行统一，若不同行所存放的数据类型不同，那这么做就很别扭。<ul><li>要么得分别用很多列来存放这些数据，而且把用不到的字段值填成null(这就成了&quot;稀疏表”，sparse table)，</li><li>要么就要使用类似custom column 4这样没有意义的列类型。</li></ul></li><li>无模式表则没有这么麻烦，每条记录只要包含其需要的数据即可，不用再担心上面的问题了</li></ul><h2 id="无模式的问题"><a class="markdownIt-Anchor" href="#无模式的问题"></a> 无模式的问题</h2><ul><li>存在“隐含模式”。在编写数据操作代码时，对数据结构所做的一系列假设<ul><li>应用与数据的耦合问题</li><li>无法在数据库层级优化和验证数据</li></ul></li><li>在集成数据库中，很难解决<ul><li>使用应用程序数据库，并使用Web Services、SOA等完成集成</li><li>在聚合中为不同应用程序明确划分出不同区域<ul><li>在文档数据库中，可以把文档分成不同的区段(section)</li><li>在列族数据库，可以把不同的列族分给不同的应用程序</li></ul></li></ul></li></ul><h1 id="ch-66-分布式模型"><a class="markdownIt-Anchor" href="#ch-66-分布式模型"></a> ch 66 分布式模型</h1><h2 id="数据分布"><a class="markdownIt-Anchor" href="#数据分布"></a> 数据分布</h2><ul><li>数据分布有两条路径:复制(replication) 与分片( sharding)。既可以在两者中选一个来用，也可以同时使用它们。<ul><li>“分片”则是将不同数据存放<strong>在不同节点</strong>中</li><li>“复制”就是将同一份数据<strong>拷贝至多个节点</strong>;<ul><li>“主从式’(master-slave)和“对等式”(peer-to-peer)</li></ul></li></ul></li></ul><h2 id="单一服务器"><a class="markdownIt-Anchor" href="#单一服务器"></a> 单一服务器</h2><ul><li>最简单的分布形式：根本不分布。<ul><li>将数据库放在一台电脑中，让它处理对数据存储的读取与写入操作。</li><li>不用考虑使用其他方案时所需应对的复杂事务，这对数据操作管理者与应用程序开发者来说，都比较简单。</li></ul></li><li>尽管许多NoSQL数据库都是为集群运行环境而设计的，但是只要符合应用程序需求，那就完全可以按照单一服务器的分布模型来使用<ul><li>图数据库配置在一台服务器上</li><li>如果只是为了处理聚合，那么可以考虑在单一服务器上部署“文档数据库”或“键值数据库”</li></ul></li></ul><blockquote><p>NoSQL速度较快，将集群暴露，可以做更多的<strong>定制</strong>（安卓 和 IOS）</p><p>安卓类比NoSQL</p></blockquote><h2 id="分片"><a class="markdownIt-Anchor" href="#分片"></a> 分片</h2><p><strong>分片 1</strong></p><ul><li>一般来说，数据库的繁忙体现在：不同用户需要访问数据集中的不同部分。</li><li>在这种情况下，把数据的各个部分存放于不同的服务器中，以此实现横向扩展。该技术就叫“分片”(sharding)。</li></ul><p><img src="https://s2.loli.net/2022/05/17/xcCGf6adjJtlzLb.png" alt="" /></p><p><strong>分片 2</strong></p><ul><li>在理想情况下，不同的服务器节点会服务于不同的用户。每位用户只需与一台服务器通信，并且很快就能获得服务器的响应。网络负载相当均衡地分布于各台服务器上。</li><li>为达成目标，必须保证需要同时访问的那些数据都存放在同一节点上，而且节点必须排布好这些数据块，使访问速度最优。<ul><li>若使用面向聚合的数据库，可以把聚合作为分布数据的单元。</li><li>在节点的数据排布问题上，有若干个与性能改善相关的因素。<ul><li>地理因素</li><li>负载均衡</li><li>聚合有序放置</li></ul></li></ul></li></ul><p><strong>分片 3</strong></p><ul><li>采用应用程序的逻辑实现分片<ul><li>编程模型复杂化，因为应用程序的代码必须负责把查询操作分布到多个分片上</li><li>若想重新调整分片，那么既要修改程序代码，又要迁移数据</li></ul></li><li>采用NoSQL数据库提供的“自动分片”( auto-sharding)功能<ul><li>让数据库自己负责把数据分布到各分片</li><li>并且将数据访问请求引导至适当的分片上</li></ul></li></ul><p><strong>分片 4</strong></p><ul><li>分片可以同时提升读取与写入效率<ul><li>使用“复制”技术，尤其是带缓存的复制，可以极大地改善读取性能，但对于写操作帮助不大</li></ul></li><li>分片对改善数据库的“故障恢复能力”帮助并不大。尽管数据分布在不同的节点上，但是和“单一服务器”方案一样，只要某节点出错，那么该分片上的数据就无法访问了<ul><li>在发生故障时，只有访问此数据的那些用户才会受影响，而其余用户则能正常访问</li><li>由于多节点问题，从实际效果出发，分片技术可能会降低数据库的错误恢复能力</li></ul></li></ul><h2 id="主从复制"><a class="markdownIt-Anchor" href="#主从复制"></a> 主从复制</h2><p><strong>主从复制 1</strong></p><p><img src="https://s2.loli.net/2022/05/17/vIyVW1Uwjz8l3mS.png" alt="" /></p><p><strong>主从复制 2</strong></p><ul><li>在“主从式分布”( master-slave distribution)中<ul><li>其中有一个节点叫做“主(master) 节点”，或“主要(primary) 节点”。主节点存放权威数据，而且通常负责处理数据更新操作。</li><li>其余节点都叫“从(slave) 节点”，或“次要(secondary) 节点”，和主节点保持同步，负责读取操作 。</li></ul></li><li>在需要频繁读取数据集的情况下，“主从复制”(master- slave replication) 有助于提升数据访问性能<ul><li>以新增更多从节点的方式来进行水平扩展，就可以同时处理更多数据读取请求，并且能保证将所有请求都引导至从节点</li><li>在写入操作特别频繁的场合，数据库仍受制于主节点处理更新，以及向从节点发布更新的能力</li></ul></li><li>“主从复制” 可以增强“读取操作的故障恢复能力”(read resilience)<ul><li>万一主节点出错了，那么从节点依然可以处理读取请求。</li><li>主节点出错之后，除非将其恢复，或另行指派新的主节点，否则数据库就无法处理写入操作。</li><li>在主节点出错之后，由于拥有内容与主节点相同的从节点，很快就能指派一个从节点作为新的主节点，从而具备故障恢复能力。</li></ul></li><li>主节点可以手工指派，也可自动选择。</li><li>“数据的不一致性”</li></ul><h2 id="对等复制"><a class="markdownIt-Anchor" href="#对等复制"></a> 对等复制</h2><p><strong>对等复制 1</strong></p><ul><li>“对等复制” 它没有“主节点”这一概念。所有“副本”(replica) 地位相同，都可以接受写入请求，而且丢失其中一个副本，并不影响整个数据库的访问。</li></ul><p><img src="https://s2.loli.net/2022/05/17/qr9WXZDJAQPukiK.png" alt="" /></p><h2 id="结合主从复制与分片"><a class="markdownIt-Anchor" href="#结合主从复制与分片"></a> 结合“主从复制”与“分片”</h2><ul><li>如果同时使用“主从复制”与“分片” ，那么就意味着整个系统有多个主节点，然而对每项数据来说，负责它的主节点只有一一个</li><li>根据配置需要，同一个节点既可以做某些数据的主节点，也可以充当其他数据的从节点，此外，也可以指派全职的主节点或从节点</li></ul><p><img src="https://s2.loli.net/2022/05/17/QdFiHvD18rogTuA.png" alt="" /></p><h2 id="结合对等复制与分片"><a class="markdownIt-Anchor" href="#结合对等复制与分片"></a> 结合“对等复制”与“分片”</h2><ul><li>使用列族数据库时，经常会将“对等复制”与“分片”结合起来。</li><li>数据可能分布于集群中的数十个或数百个节点上。在采用“对等复制”方案时，一开始可以用“3”作为复制因子(replication factor), 也就是把每个分片数据放在3个节点中。一旦某个节点出错，那么它上面保存的那些分片数据会由其他节点重建</li></ul><p><img src="https://s2.loli.net/2022/05/17/LzkDUwMuReFngri.png" alt="" /></p><h1 id="ch-67-分布式模型中的不一致性"><a class="markdownIt-Anchor" href="#ch-67-分布式模型中的不一致性"></a> ch 67 分布式模型中的不一致性</h1><h2 id="写入冲突和读写冲突"><a class="markdownIt-Anchor" href="#写入冲突和读写冲突"></a> 写入冲突和读写冲突</h2><ul><li>当两个客户端试图同时修改一份数据时，会发生“写入冲突”。而当某客户端在另一个客户端执行写入操作的过程中读取数据时，则会发生“读写冲突”。</li><li>悲观方式以锁定数据记录来避免冲突<ul><li>“写入锁&quot; (write lock)</li></ul></li><li>乐观方式则在事后检测冲突并将其修复<ul><li>“条件更新”( conditional update)，任意客户在执行更新操作之前，都要先测试数据的当前值和其上一次读入的值是否相同</li><li>保存冲突数据， 。用户自行“合并”(merge)或 “自动合并”（面向特定领域）</li></ul></li></ul><h2 id="nosql的不一致性"><a class="markdownIt-Anchor" href="#nosql的不一致性"></a> NoSQL的不一致性</h2><ul><li>“图数据库&quot;常常和关系型数据库-样，也支持ACID事务。</li><li>面向聚合的数据库通常支持“原子更新”( atomic update),但仅限于单一聚合内部<ul><li>“一致性” 可以在某个聚合内部保持，但在各聚合之间则不行</li><li>在执行影响多个聚合的更新操作时，会留下一段时间空档，让客户端有可能在此刻读出逻辑不一致的数据</li><li>存在不一致风险的时间长度就叫“不一致窗口”( inconsistency window)</li></ul></li></ul><h2 id="复制一致性"><a class="markdownIt-Anchor" href="#复制一致性"></a> 复制一致性</h2><p><strong>复制一致性 1</strong></p><p>“复制一致性”(replication consistency)。要求从不同副本中读取同一个数据项时，所得到的值相同</p><p><img src="https://s2.loli.net/2022/05/17/Pcz3RM1EwnBlWxK.png" alt="" /></p><p><strong>复制一致性 2</strong></p><ul><li>在分布式系统中，如果某些节点收到了更新数据，而另外一些节点却尚未收到，那么这种情况就视为“读写冲突”。若写入操作已经传播至所有节点，则此刻的数据库就具备“最终一致性”( eventually consistent)</li><li>复制不一致性带来的“不一致窗口”，在考虑网络环境后，会比单一节点导致的“不一致窗口”长的多<ul><li>不一致性窗口对应用的影响不同</li></ul></li></ul><h2 id="照原样读出所写内容的一致性"><a class="markdownIt-Anchor" href="#照原样读出所写内容的一致性"></a> 照原样读出所写内容的一致性</h2><p><strong>照原样读出所写内容的一致性 1</strong></p><ul><li>“照原样读出所写内容的一致性”(read-your-writes consistency) ，在执行完更新操作之后，要能够立刻看到新值。</li><li>在具备“最终一致性” 的系统中，可以提供“会话一致性”( session consistency) :在用户会话内部保持“照原样读出所写内容的一致性”<ul><li>使用“黏性会话”(sticky session)，即绑定到某个节点的会话(这种性质也叫做“会话亲和力”，session affinity)。<ul><li>“黏性会话”可以保证，只要某节点具备“照原样读出所写内容的一致性”，那么与之绑定的会话就都具备这种特性了。</li><li>“黏性会话”的缺点是，它会降低“负载均衡器”( load balancer)的效能</li></ul></li><li>使用“版本戳”(version stamp,参见第6章)，并确保同数据库的每次交互操作中，都包含会话所见的最新版本戳。服务器节点在响应请求之前必须先保证，它所含有的更新数据包含此版本戳。</li></ul></li></ul><h2 id="分布式系统中的一致性"><a class="markdownIt-Anchor" href="#分布式系统中的一致性"></a> 分布式系统中的一致性</h2><ul><li>使用“黏性会话”和“主从复制”来保证“会话一致性”时，由于读取与写入操作分别发生在不同节点，那么想保证这一点会比较困难。<ul><li>方法一：将写入请求先发给从节点，由它负责将其转发至主节点，并同时保持客户端的“会话一致性”。</li><li>方法二：在执行写入操作时临时切换到主节点，并且在从节点尚未收到更新数据的这–段时间内，把读取操作都交由主节点来处理。</li></ul></li></ul><h1 id="ch-68-放宽一致性和持久性约束"><a class="markdownIt-Anchor" href="#ch-68-放宽一致性和持久性约束"></a> ch 68 放宽‘“一致性”和“持久性”约束</h1><h2 id="使用事务保障一致性"><a class="markdownIt-Anchor" href="#使用事务保障一致性"></a> 使用事务保障“一致性”</h2><ul><li>使用“事务”达成强一致性</li><li>引入放松“隔离级别” ( isolation level)的功能，以允许查询操作读取尚未提交的数据。<ul><li>读未提交，一个事务可以读取另一个未提交事务的数据。脏读</li><li>读已提交，一个事务要等另一个事务提交后才能读取数据。不可重复读</li><li>可重复读，在开始读取数据（事务开启）时，不再允许修改操作。幻读</li><li>可串行化，事务串行化顺序执行。严格一致性，效率是一个问题</li></ul></li></ul><h2 id="事务的问题"><a class="markdownIt-Anchor" href="#事务的问题"></a> 事务的问题</h2><ul><li>在并发不大的前提下，是否需要事务</li><li>在数据较多的情况下，为了让应用性能符合用户要求，它们必须弃用“事务”<br />尤其在需要引入分片机制时，更是如此</li><li>在分布式应用中，如事务的业务范围涉及多个以网络连接的参与者。其规模、复杂度和波动性均导致无法使用事务进行良好描述</li></ul><h2 id="cap定理"><a class="markdownIt-Anchor" href="#cap定理"></a> CAP定理</h2><ul><li>CAP定理:给定“一致性”(Consistency)、“可用性”(Availability)、“分区耐受性”( Partition tolerance) 这三个属性，我们只能同时满足其中两个属性。<ul><li>“一致性”</li><li>“可用性”，如果客户可以同集群中的某个节点通信，那么该节点就必然能够处理读取及写入操作。</li><li>“分区耐受性” ，如果发生通信故障，导致整个集群被分割成多个无法互相通信的分区时(这种情况也叫“ 脑裂”，split brain)，集群仍然可用。</li></ul></li></ul><h2 id="脑裂的例子"><a class="markdownIt-Anchor" href="#脑裂的例子"></a> “脑裂”的例子</h2><p><img src="https://s2.loli.net/2022/05/24/5IVcQsjae18HAyq.png" alt="" /></p><h2 id="ca系统"><a class="markdownIt-Anchor" href="#ca系统"></a> CA系统</h2><ul><li>CA系统，也就是具备“一致性”(Consistency)与“可用性”(Availability)， 但却不具备“分区耐受性”的系统<ul><li>大多数关系型数据库</li></ul></li><li>CA集群<ul><li>无法保证“分区耐受性”，这使得一旦“分区”发生，所有节点必须停止运作</li><li>CAP中的，可用性定义为“系统中某个无故障节点所接收的每一条请求， 无论成功或失败，都必将得到响应。”</li><li>介于此时所有节点均为故障节点，不违反CAP中的“可用性”</li></ul></li></ul><h2 id="cap定理的现实含义"><a class="markdownIt-Anchor" href="#cap定理的现实含义"></a> CAP定理的现实含义</h2><ul><li>尽管“CAP定理”经常表述为“三个属性中只能保有两个”，实际上当系统可能会遭遇“分区”状况时(比如分布式系统)，需要在“一致性”与“可用性”之间进行权衡。<ul><li>这并不是个二选一的决定，通常来说，我们都会略微舍弃“一致性”，以获取某种程度的“可用性”</li><li>这样的系统，既不具备完美的“一致性”，也不具备完美的“可用性”</li><li>但是能够满足需要</li></ul></li></ul><h2 id="缺乏可用性的例子"><a class="markdownIt-Anchor" href="#缺乏可用性的例子"></a> 缺乏“可用性”的例子</h2><ul><li>假设Martin与Pramod都想预订某旅馆的最后一间客房，预订系统使用“对等式分布模型”，它由两个节点组成<ul><li>Martin 使用位于伦敦的节点，而Pramod使用位于孟买的节点。</li><li>若要确保一致性，那么当Martin要通过位于伦敦的节点预订房间时，该节点在确认预订操作之前，必须先告知位于孟买的节点。</li><li>两个节点必须按照相互一致的顺序来处理它们所收到的操作请求</li></ul></li><li>此方案保证了“一致性”，但是假如网络连接发生故障，那么由故障导致的两个“分区”系统，就都无法预订旅馆房间了，于是系统失去了“可用性”</li></ul><h2 id="改善可用性的例子"><a class="markdownIt-Anchor" href="#改善可用性的例子"></a> 改善“可用性”的例子</h2><ul><li>指派其中一个节点作为某家旅馆的“主节点”，确保所有预订操作都由“主节点”来处理。<ul><li>假设位于孟买的节点是“主节点”，那么在两个节点之间的网络连接发生故障之后，它仍然可以处理该旅馆的房间预订工作，这样Pramod将会订到最后一间客房</li><li>位于伦敦的用户看到的房间剩余情况会与孟买不一致，但是他们无法预订客房，于是就出现了“更新不一致”现象。</li><li>Martin可以和位于伦敦的节点通信，但是该节点却无法更新数据。于是出现了“可用性”故障(availability failure)</li></ul></li><li>这种在“一致性”与“可用性”之间所做的权衡，能正确处理上述特殊状况。</li></ul><h2 id="进一步改善可用性的例子"><a class="markdownIt-Anchor" href="#进一步改善可用性的例子"></a> 进一步改善“可用性”的例子</h2><ul><li>让两个“分区”系统都接受客房预订请求，即使在发生网络故障时也如此。<ul><li>这种方案的风险是，Martin和Pramod有可能都订到了最后一间客房。然而，根据这家旅馆的具体运营情况，这也许不会出问题：<ul><li>通常来说，旅行公司都允许一定数量的超额预订，这样的话，如果有某些客人预订了房间而最终没有人住，那么就可以把这部分空余房间分给那些超额预订的人了</li><li>与之相对，某些旅馆总是会在全部订满的名额之外多留出几间客房，这样万一哪间客房出了问题，或者在房间订满之后又来了一位贵宾，那么旅馆可以把客人安排到预留出来的空房中</li><li>还有些旅馆甚至选择在发现预订冲突之后向客户致歉并取消此预订。</li></ul></li></ul></li><li>该方案所付出的代价，要比因为网络故障而彻底无法预订的代价小</li></ul><h2 id="一个写入不一致的例子"><a class="markdownIt-Anchor" href="#一个写入不一致的例子"></a> 一个写入不一致的例子</h2><ul><li>购物车是允许“写入不一致”现象的一个经典示例<ul><li>即使网络有故障，也总是能够修改购物车中的商品。</li><li>这么做有可能导致多个购物车出现</li><li>而结账过程则会将两个购物车合并，具体做法是，将两个购物车中的每件商品都拿出来，放到另外一个购物车中，并按照新的购物车结账。</li><li>这个办法基本上不会出错，万一有问题，客户也有机会在下单之前先检视一下购物车中的东西</li></ul></li></ul><h2 id="base"><a class="markdownIt-Anchor" href="#base"></a> BASE</h2><ul><li>与关系型数据库所支持的ACID事务不同，NoSQL系统具备“BASE属性”<ul><li>基本可用，Basically Available</li><li>柔性状态，Soft state</li><li>最终一致性，Eventual consistency</li></ul></li><li>“ACID”与“BASE&quot;不是非此即彼的关系，两者之间存在着多个逐渐过渡的权衡方案可选。</li></ul><h2 id="一致性与延迟-之间取舍"><a class="markdownIt-Anchor" href="#一致性与延迟-之间取舍"></a> “一致性”与“延迟” 之间取舍</h2><ul><li>在权衡分布式数据库的“一致性”时，与其考虑如何权衡“一致性”与“可用性”，不如思考怎样在“一致性”与“延迟”(latency)之间取舍。<ul><li>参与交互操作的节点越多，“一致性”就越好</li><li>然而，每新增一个节点，都会使交互操作的响应时间变长</li><li>“可用性”可以视为能够忍受的最大延迟时间，一旦延迟过高，我们就放弃操作，并认为数据不可用</li><li>这样一来，就和“CAP定理”对“可用性”所下的定义相当吻合了</li></ul></li></ul><h1 id="ch-70-版本戳"><a class="markdownIt-Anchor" href="#ch-70-版本戳"></a> ch 70 版本戳</h1><h2 id="商业活动"><a class="markdownIt-Anchor" href="#商业活动"></a> <strong>商业活动</strong></h2><ul><li>“商业活动”(Business Activity)。<ul><li>比如说，用户浏览产品目录，选中了一瓶价格很实惠的Talisker威士忌，填入信用卡信息，然后确认订单。</li></ul></li><li>需要确保最终一致性，但是出于时间、交互的考虑，无法使用事务加以实现<ul><li>如使用事务实现，必须锁住数据库中各个元素。而长时间锁定元素是不现实的。</li><li>因此，应用程序通常只在处理完用户交互操作之后才开始“系统事务”，这样的话，锁定时间就比较短了。</li><li>然而当需要计算和决策的时候，数据有可能已经改动了。<ul><li>价格表上Talisker威士忌的售价也许已经变了，或是某人可能会修改客户的地址，从而导致运费改变</li></ul></li></ul></li></ul><h2 id="条件更新和版本戳"><a class="markdownIt-Anchor" href="#条件更新和版本戳"></a> 条件更新和版本戳</h2><ul><li>条件更新（conditional update），客户端执行操作时，将重新读取商业活动所依赖的信息，并检测该信息在首次读取后是否一直没有变动，若一直未变，则将其展示给用户</li><li>通过保证数据库中的记录都有某种形式的版本戳（version stamp）实现“乐观离线锁”（Optimistic Offline Lock）<ul><li>版本戳是一个字段，每当记录中的底层数据改变时，其值也随之改变</li><li>读取数据时可以记下版本戳，这样在写入数据时可以先检查数据版本是否已经变了</li></ul></li><li>使用版本戳避免“更新冲突” ，维护“会话一致性”</li><li>“CAS”操作 ( “compare-and-set”操作）<ul><li>既可以由数据库提供</li><li>也可以由开发者负责检测的执行</li></ul></li></ul><h2 id="构建版本戳的方法"><a class="markdownIt-Anchor" href="#构建版本戳的方法"></a> 构建版本戳的方法</h2><p><strong>构建版本戳的方法1</strong></p><ul><li>使用计数器<ul><li>每当资源更新时，就将他的值+1，根据值判断哪个版本比较新</li><li>需要服务器来生成该值，并且要有一个主节点来保证不同版本的计数器值不会重复</li></ul></li><li>使用GUID（全局唯一标识符），也就是一个值很大且保证唯一的随机数<ul><li>可以将日期，硬件信息，以及其他一些随机出现的资源组合起来构建此值</li><li>好处：任何人都可以生成，不用担心重复</li><li>缺点：数值比较大，不乏通过直接比较来判断版本新旧</li></ul></li></ul><p><strong>构建版本戳的方法2</strong></p><ul><li>根据资源内容生成hash码，只要哈希键足够大，那么“内容哈希码”就可以向GUID那样全局唯一，并且任何人都可以来生成它<ul><li>好处：hash码的内容是确定的，只要资源数据相同，那么任何节点生成的内容哈希码都是一样的</li><li>但是哈希码和GUID一样，都无法直接比较看出版本新旧，而且比较冗长</li></ul></li><li>使用上一次更新时的时间戳（timestamp）<ul><li>与计数器一样，时间戳也相当短小，而且可以直接通过比较其数值判断版本先后</li><li>时间戳不需要主节点来生成，可以由多台时钟同步的计算机生成，如果某个节点的时钟出错了，那么可能会导致各种数据毁损现象（data corruption）</li><li>如果时间戳<strong>精度</strong>过低，则可能重复。</li></ul></li></ul><p><strong>构建版本戳的方法3</strong></p><ul><li>可以把几种时间戳生成方案的优点融合起来，同时使用多种手法创建出一个“复合版本戳”(composite stamp)。</li><li>在CouchDB创建版本戳时，使用了计数器与“内容哈希码”。<ul><li>大部分情况下，只要比较版本戳就可以判定两个版本的新旧</li><li>万一碰到两个节点同时更新数据的情况，因为两个版本戳的计数器相同，而“内容哈希码”却不同，立刻就能发现冲突</li></ul></li></ul><h2 id="主从式复制模型中的版本戳"><a class="markdownIt-Anchor" href="#主从式复制模型中的版本戳"></a> <strong>“主从式复制模型”中的版本戳</strong></h2><ul><li>在“主从式复制模型”中，只有一个权威数据源(authoritative source for data)，使用基本的版本戳生成方案</li><li>由主节点负责生成版本戳，而从节点必须使用主节点的版本戳。<ul><li>以计数器为例，节点每次更新数据时，都将它加1,并把其值放人版本戳中。</li><li>假设某主节点有两个副本，分别是“蓝色”节点和“绿色”节点。</li><li>如果在蓝色节点所给出的应答数据中，版本戳为4，而绿色节点的版本戳是6，那么绿色节点上的数据就比较新</li></ul></li></ul><h2 id="对等式分布模型中的版本戳"><a class="markdownIt-Anchor" href="#对等式分布模型中的版本戳"></a> <strong>“对等式分布模型”中的版本戳</strong></h2><p><strong>对等式分布模型中的版本戳1</strong></p><ul><li>在“对等式分布模型”中，没有统一设置版本戳的节点</li><li>如果向两个节点索要同一份数据，那么有可能获得不同的答案<ul><li>有可能是更新操作已经通知给其中一个节点了，而另外一个节点尚未收到通知<ul><li>可以选用最新的数据</li></ul></li><li>发生了“更新不一致”现象</li></ul></li></ul><p><strong>对等式分布模型中的版本戳2</strong></p><ul><li>在“对等式分布模型”中<ul><li>确保所有节点都有一份“版本戳记录”( version stamp history)。从而判断出蓝色节点给出的应答数据是不是绿色节点所给数据的“祖先” 。<ul><li>要么让客户端保存“版本戳记录”，要么由服务器节点来维护此记录，并且把它放在应答数据中，传给客户端。</li><li>用“版本戳记录”可以检测出数据“不一致”现象<ul><li>如果两份应答数据中的版本戳都无法在对方的“版本戳记录”中找到，那么就可以判定发生了“不一致”问题。</li></ul></li></ul></li><li>使用“时间戳”<ul><li>很难确保所有节点的时间都一致</li><li>无法检测“写人冲突”</li></ul></li></ul></li></ul><h2 id="数组式版本戳"><a class="markdownIt-Anchor" href="#数组式版本戳"></a> 数组式版本戳</h2><p><strong>数组式版本戳1</strong></p><ul><li>“数组式版本戳” (vector stamp) 由一系列计数器组成，每个计数器都代表一个节点。</li><li>假设有三个节点(分别记为“蓝色(blue)、“绿色”(green)、“黑色”(black)),那么一个可能的“数组式版本戳” 就类似<code>[blue: 43，green :54，black: 12]</code> 。</li><li>每当节点执行“内部更新”(internal update)操作时，就将其计数器加1，<ul><li>假设绿色节点执行了一次更新操作，那么现在这个“数组式版本戳”就成了<code>[blue: 43，green: 55， black: 12]</code></li></ul></li><li>只要两个节点通信，它们就同步其“数组式版本戳”。具体的同步方式有很多种。</li><li>使用此方案，就能辨别某个“数组式版本戳”是否比另外一个新，因为版本戳中的计数器总是大于或等于旧版本戳。<ul><li>比如，<code>[blue: 1，green: 2，black: 5]</code>就比<code>[blue: 1, green: 1, black: 5]</code>新</li></ul></li></ul><p><strong>数组式版本戳2</strong></p><ul><li>若两个版本戳中都有一个计数器比对方大，那么就发生了“<strong>写入冲突</strong>”<ul><li>比如，<code>[blue: 1,green:2，black: 5]</code>与<code>[blue: 2，green: 1，black: 5]</code>相冲突</li></ul></li><li>数组中可能缺失某些值，我们将其视为0。<ul><li>比如，<code>[blue: 6, black: 2]</code> 与<code>[blue: 6，green: 0，black: 2]</code>等价。</li><li>需要弃用现有的“数组式版本戳”，就可以向其中轻易新增节点。</li></ul></li><li>“数组式版本戳”是一种能够侦测出“不一致”现象的有用工具，然而它们无法解决此问题。要想解决冲突，就得依赖领域知识。</li><li>在“一致性”与延迟之间权衡时。<ul><li>如果偏向“一致性”，那么系统在出现“网络分区”现象时就无法使用</li><li>反之，若要减少延迟，则必须自己检测并处理“不一致”问题</li></ul></li></ul><h1 id="ch-71-键值数据库"><a class="markdownIt-Anchor" href="#ch-71-键值数据库"></a> ch 71 键值数据库</h1><h2 id="键值数据库"><a class="markdownIt-Anchor" href="#键值数据库"></a> 键值数据库</h2><p><strong>键值数据库1</strong></p><ul><li>键值数据库(key-value store)是一张简单的哈希表(hash table)，主要用在所有数据库访问均通过主键(primary key)来操作的情况下。<ul><li>可把此表想象成传统的“关系” 该关系有两列：ID与NAME</li><li>ID列代表关键字，NAME列存放值。NAME列仅能存放String型的数据。</li><li>应用程序可提供ID及VALUE值，并将这一键值对持久化</li><li>假如ID已存在，就用新值覆盖当前值，否则就新建一条数据</li></ul></li></ul><p><img src="https://s2.loli.net/2022/05/27/5aDcEORvqTMlwtS.png" alt="" /></p><p><strong>键值数据库2</strong></p><ul><li>键值数据库是最简单的NoSQL数据库。</li><li>客户端可以根据键查询值，设置键所对应的值，或从数据库中删除键。<ul><li>“值”只是数据库存储的一块数据而已，它并不关心也无需知道其中的内容</li><li>应用程序负责理解所存数据的含义。</li></ul></li><li>由于键值数据库总是通过主键访问，所以它们一般性能较高，且易于扩展。</li><li>流行的键值数据库有:Riak、Redis（数据结构服务器）、 Memcached DB及其变种、Berkeley DB、HamsterDB (尤其适合嵌入式开发) 、 Amazon DynamoDB (不开源)和Project Voldemort (Amazon DynamoDB的开源实现)</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ch-62-关系型数据库的价值&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#ch-62-关系型数据库的价值&quot;&gt;&lt;/a&gt; ch 62 关系型数据库的价值&lt;/h1&gt;
&lt;h2 id=&quot;获取持久化数据&quot;&gt;&lt;a class=&quot;markdownI</summary>
      
    
    
    
    <category term="数据库" scheme="http://little-hurui.cloud/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="数据管理基础" scheme="http://little-hurui.cloud/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="数据管理基础" scheme="http://little-hurui.cloud/tags/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/"/>
    
    <category term="NoSQL" scheme="http://little-hurui.cloud/tags/NoSQL/"/>
    
  </entry>
  
  <entry>
    <title>DP入门</title>
    <link href="http://little-hurui.cloud/2022/05/12/DP%E5%85%A5%E9%97%A8/"/>
    <id>http://little-hurui.cloud/2022/05/12/DP%E5%85%A5%E9%97%A8/</id>
    <published>2022-05-12T09:57:49.000Z</published>
    <updated>2022-05-17T15:22:14.121Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态规划入门"><a class="markdownIt-Anchor" href="#动态规划入门"></a> 动态规划入门</h1><blockquote><p>动态规划(Dynamic programming, 简称DP), 通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。<br />DP常常适用于有重叠子问题和最优子结构性质的问题,动态规划方法所消耗的时间往往远小于朴素解法。</p></blockquote><h2 id="基本思想与策略"><a class="markdownIt-Anchor" href="#基本思想与策略"></a> 基本思想与策略</h2><p>基本思想与分治法类似，也是将待求解的问题分解为若干个子问题（阶段），按顺序求解子阶段，前一子问题的解，为后一子问题的求解提供了有用的信息。在求解任一子问题时，列出各种可能的局部解，通过决策保留那些有可能达到最优的局部解，丢弃其他局部解。依次解决各子问题，最后一个子问题就是初始问题的解。</p><p>由于动态规划解决的问题<strong>多数有重叠子问题</strong>这个特点，为减少重复计算，对每一个子问题只解一次，将其<strong>不同阶段的不同状态</strong>保存在一个二维数组中。</p><p><em>一言以蔽之</em>：<strong>大事化小，小事化了。</strong></p><h2 id="分治与动态规划"><a class="markdownIt-Anchor" href="#分治与动态规划"></a> 分治与动态规划</h2><p>**共同点：**两者都要求原问题具有最优子结构性质，都是将原问题分而治之，分解成若干个规模较小的子问题，然后将子问题的解合并，最终得到答案。</p><p><strong>不同点：<strong>分治法将分解后的子问题看成</strong>相互独立的</strong>，通常用递归来做。动态规划将分解后的子问题理解为<strong>相互间有联系</strong>，有重叠部分，需要记忆，通常用迭代来做。</p><h2 id="example"><a class="markdownIt-Anchor" href="#example"></a> Example</h2><h3 id="72-编辑距离"><a class="markdownIt-Anchor" href="#72-编辑距离"></a> <a href="https://leetcode.cn/problems/edit-distance/">72. 编辑距离</a></h3><p>给你两个单词 word1 和 word2， 请返回将 word1 转换成 word2 所使用的最少操作数  。</p><p>你可以对一个单词进行如下三种操作：</p><p>插入一个字符<br />删除一个字符<br />替换一个字符</p><p><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：word1 = &quot;intention&quot;, word2 = &quot;execution&quot;</span><br><span class="line">输出：5</span><br><span class="line">解释：</span><br><span class="line">intention -&gt; inention (删除 &#x27;t&#x27;)</span><br><span class="line">inention -&gt; enention (将 &#x27;i&#x27; 替换为 &#x27;e&#x27;)</span><br><span class="line">enention -&gt; exention (将 &#x27;n&#x27; 替换为 &#x27;x&#x27;)</span><br><span class="line">exention -&gt; exection (将 &#x27;n&#x27; 替换为 &#x27;c&#x27;)</span><br><span class="line">exection -&gt; execution (插入 &#x27;u&#x27;)</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><blockquote><p>0 &lt;= word1.length, word2.length &lt;= 500</p><p>word1 和  word2 由小写英文字母组成</p></blockquote><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><p>一眼DP（bushi）</p><ol><li>定义<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>[</mo><mi>j</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">dp[i][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">d</span><span class="mord mathit">p</span><span class="mopen">[</span><span class="mord mathit">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathit" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span><ol><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>[</mo><mi>j</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">dp[i][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">d</span><span class="mord mathit">p</span><span class="mopen">[</span><span class="mord mathit">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathit" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span> 代表 <code>word1</code> 中前 <code>i</code> 个字符， 变换到 <code>word2</code> 中前 <code>j</code> 个字符 最短需要的操作次数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>i</mi><mi>n</mi><mi>D</mi><mi>i</mi><mi>s</mi><mi>t</mi><mi>a</mi><mi>n</mi><mi>c</mi><mi>e</mi><mo>(</mo><mi>w</mi><mi>o</mi><mi>r</mi><mi>d</mi><mn>1</mn><mi mathvariant="normal">.</mi><mi>s</mi><mi>u</mi><mi>b</mi><mi>s</mi><mi>t</mi><mi>r</mi><mo>(</mo><mn>0</mn><mo separator="true">,</mo><mi>i</mi><mo>)</mo><mo separator="true">,</mo><mi>w</mi><mi>o</mi><mi>r</mi><mi>d</mi><mn>2</mn><mi mathvariant="normal">.</mi><mi>s</mi><mi>u</mi><mi>b</mi><mi>s</mi><mi>t</mi><mi>r</mi><mo>(</mo><mn>0</mn><mo separator="true">,</mo><mi>j</mi><mo>)</mo><mo>)</mo></mrow><annotation encoding="application/x-tex">minDistance(word1.substr(0,i), word2.substr(0,j) )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">n</span><span class="mord mathit" style="margin-right:0.02778em;">D</span><span class="mord mathit">i</span><span class="mord mathit">s</span><span class="mord mathit">t</span><span class="mord mathit">a</span><span class="mord mathit">n</span><span class="mord mathit">c</span><span class="mord mathit">e</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit">d</span><span class="mord mathrm">1</span><span class="mord mathrm">.</span><span class="mord mathit">s</span><span class="mord mathit">u</span><span class="mord mathit">b</span><span class="mord mathit">s</span><span class="mord mathit">t</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathrm">0</span><span class="mpunct">,</span><span class="mord mathit">i</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit">d</span><span class="mord mathrm">2</span><span class="mord mathrm">.</span><span class="mord mathit">s</span><span class="mord mathit">u</span><span class="mord mathit">b</span><span class="mord mathit">s</span><span class="mord mathit">t</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathrm">0</span><span class="mpunct">,</span><span class="mord mathit" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></li><li>考虑 <code>word1</code>  or <code>word2</code> 为空的情况，需要保留 dp[0][j] 和 dp[i][0]</li></ol></li><li>状态转移<ol><li>增 <code>dp[i][j] = dp[i][j-1] + 1</code></li><li>删 <code>dp[i][j] = dp[i-1][j] + 1</code></li><li>改 <code>dp[i][j] = d[i-1][j-1] + 1</code></li><li>按顺序计算，当计算 <code>dp[i][j]</code> 时，<code>dp[i - 1][j]</code> ， <code>dp[i][j - 1]</code> ， <code>dp[i - 1][j - 1]</code> 均已经确定了</li><li>配合增删改这三种操作，需要对应的 <code>dp</code> 把操作次数加一，取三种的最小</li><li>如果刚好这两个字母相同 <code>word1[i - 1] = word2[j - 1]</code> ，那么可以直接参考 <code>dp[i - 1][j - 1]</code> ，操作不用加一</li></ol></li></ol><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minDistance</span><span class="params">(string word1, string word2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = word1.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> m = word2.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m+<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][j] = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">                dp[i][j] = <span class="built_in">min</span>(<span class="built_in">min</span>(dp[i][j<span class="number">-1</span>],dp[i<span class="number">-1</span>][j]),dp[i<span class="number">-1</span>][j<span class="number">-1</span>])+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(word1[i<span class="number">-1</span>]==word2[j<span class="number">-1</span>]) dp[i][j] = <span class="built_in">min</span>(dp[i][j],dp[i<span class="number">-1</span>][j<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n][m];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1><p><a href="https://zhuanlan.zhihu.com/p/104520421">动态规划入门 - 知乎 (zhihu.com)</a></p><p><a href="https://leetcode.cn/problems/edit-distance/solution/edit-distance-by-ikaruga/">【编辑距离】入门动态规划，你定义的 dp 里到底存了啥 - 编辑距离 - 力扣（LeetCode）</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;动态规划入门&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#动态规划入门&quot;&gt;&lt;/a&gt; 动态规划入门&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;动态规划(Dynamic programming, 简称DP), 通过把原问题分解为相对简单的</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://little-hurui.cloud/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="常用算法" scheme="http://little-hurui.cloud/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Algorithm" scheme="http://little-hurui.cloud/tags/Algorithm/"/>
    
    <category term="动态规划" scheme="http://little-hurui.cloud/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>双向队列</title>
    <link href="http://little-hurui.cloud/2022/05/11/%E5%8F%8C%E5%90%91%E9%98%9F%E5%88%97/"/>
    <id>http://little-hurui.cloud/2022/05/11/%E5%8F%8C%E5%90%91%E9%98%9F%E5%88%97/</id>
    <published>2022-05-11T15:54:14.000Z</published>
    <updated>2022-05-17T15:21:48.232Z</updated>
    
    <content type="html"><![CDATA[<h1 id="双端单调队列"><a class="markdownIt-Anchor" href="#双端单调队列"></a> 双端单调队列</h1><h2 id="239-滑动窗口最大值"><a class="markdownIt-Anchor" href="#239-滑动窗口最大值"></a> <a href="https://leetcode.cn/problems/sliding-window-maximum/">239. 滑动窗口最大值</a></h2><p>给你一个整数数组 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">nums</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mord mathit">u</span><span class="mord mathit">m</span><span class="mord mathit">s</span></span></span></span>，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。</p><p><em>返回 滑动窗口中的最大值</em> 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,3,-1,-3,5,3,6,7], k = 3</span><br><span class="line">输出：[3,3,5,5,6,7]</span><br><span class="line">解释：</span><br><span class="line">滑动窗口的位置                最大值</span><br><span class="line">---------------               -----</span><br><span class="line">[1  3  -1] -3  5  3  6  7       3</span><br><span class="line"> 1 [3  -1  -3] 5  3  6  7       3</span><br><span class="line"> 1  3 [-1  -3  5] 3  6  7       5</span><br><span class="line"> 1  3  -1 [-3  5  3] 6  7       5</span><br><span class="line"> 1  3  -1  -3 [5  3  6] 7       6</span><br><span class="line"> 1  3  -1  -3  5 [3  6  7]      7</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>提示：</strong></p><p>1 &lt;= nums.length &lt;= 105</p><p>-104 &lt;= nums[i] &lt;= 104</p><p>1 &lt;= k &lt;= nums.length</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">maxSlidingWindow</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        deque&lt;<span class="type">int</span>&gt;q; <span class="comment">//双端队列</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(q.<span class="built_in">size</span>() &amp;&amp;  i - k + <span class="number">1</span> &gt; q.<span class="built_in">front</span>())  q.<span class="built_in">pop_front</span>(); <span class="comment">//判断队头是否在滑动窗口范围内</span></span><br><span class="line">            <span class="keyword">while</span>(q.<span class="built_in">size</span>() &amp;&amp; nums[i] &gt;= nums[q.<span class="built_in">back</span>()]) q.<span class="built_in">pop_back</span>();<span class="comment">//维护单调递减队列</span></span><br><span class="line">            q.<span class="built_in">push_back</span>(i); <span class="comment">//将当前元素插入队尾</span></span><br><span class="line">            <span class="keyword">if</span>(i &gt;= k - <span class="number">1</span>)  res.<span class="built_in">push_back</span>(nums[q.<span class="built_in">front</span>()]); <span class="comment">//滑动窗口的元素达到了k个，才可以将其加入答案数组中</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="其他参考"><a class="markdownIt-Anchor" href="#其他参考"></a> 其他参考</h2><p><a href="https://freeeeeeeeedom.gitee.io/2022/05/09/%E5%8D%95%E8%B0%83%E6%A0%88/">单调栈-Freedom</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;双端单调队列&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#双端单调队列&quot;&gt;&lt;/a&gt; 双端单调队列&lt;/h1&gt;
&lt;h2 id=&quot;239-滑动窗口最大值&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#239-滑动</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://little-hurui.cloud/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="常用算法" scheme="http://little-hurui.cloud/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/"/>
    
    <category term="板子" scheme="http://little-hurui.cloud/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%9D%BF%E5%AD%90/"/>
    
    
    <category term="Algorithm" scheme="http://little-hurui.cloud/tags/Algorithm/"/>
    
    <category term="双向队列" scheme="http://little-hurui.cloud/tags/%E5%8F%8C%E5%90%91%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序开发</title>
    <link href="http://little-hurui.cloud/2022/05/11/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    <id>http://little-hurui.cloud/2022/05/11/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/</id>
    <published>2022-05-11T11:16:14.000Z</published>
    <updated>2022-05-17T15:23:45.712Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微信小程序-计算机书籍简介及推荐"><a class="markdownIt-Anchor" href="#微信小程序-计算机书籍简介及推荐"></a> 微信小程序 计算机书籍简介及推荐</h1><h2 id="项目地址"><a class="markdownIt-Anchor" href="#项目地址"></a> 项目地址</h2><p><a href="https://git.weixin.qq.com/wx_wxdcab629e85115972/wechat.git">https://git.weixin.qq.com/wx_wxdcab629e85115972/wechat.git</a></p><h2 id="基础"><a class="markdownIt-Anchor" href="#基础"></a> 基础</h2><p><a href="https://www.bilibili.com/video/BV1nE41117BQ">https://www.bilibili.com/video/BV1nE41117BQ</a></p><h2 id="tfm"><a class="markdownIt-Anchor" href="#tfm"></a> TFM</h2><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/">https://developers.weixin.qq.com/miniprogram/dev/framework/</a></p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/getting-started.html">https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/getting-started.html</a></p><h2 id="组件库"><a class="markdownIt-Anchor" href="#组件库"></a> 组件库</h2><h3 id="lin-ui"><a class="markdownIt-Anchor" href="#lin-ui"></a> lin-ui</h3><p><a href="https://github.com/TaleLin/lin-ui">https://github.com/TaleLin/lin-ui</a></p><p>使用<strong>最新</strong>的调试基础库</p><p><strong>在 miniprogram 文件夹下</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm init -y</span><br><span class="line">$ npm install lin-ui</span><br></pre></td></tr></table></figure><p>然后在 IDE 中构建 npm</p><h3 id="colorui"><a class="markdownIt-Anchor" href="#colorui"></a> ColorUI</h3><p><a href="http://docs.xzeu.com/#/">http://docs.xzeu.com/#/</a></p><h2 id="用例描述"><a class="markdownIt-Anchor" href="#用例描述"></a> 用例描述</h2><h3 id="主页"><a class="markdownIt-Anchor" href="#主页"></a> 主页</h3><p>首页推送</p><h3 id="分类"><a class="markdownIt-Anchor" href="#分类"></a> 分类</h3><p>分类</p><p>搜索栏</p><h3 id="我的"><a class="markdownIt-Anchor" href="#我的"></a> 我的</h3><p>收藏</p><p>历史记录</p><h3 id="后端"><a class="markdownIt-Anchor" href="#后端"></a> 后端</h3><p>书籍数据</p><p>用户数据</p><p>评论系统</p><h3 id="数据收集"><a class="markdownIt-Anchor" href="#数据收集"></a> 数据收集</h3><p><a href="https://dms.cloud.tencent.com/#/login">https://dms.cloud.tencent.com/#/login</a></p><ul><li>用户名 root</li><li>密码 XpPdc6rG</li></ul><h2 id="后台"><a class="markdownIt-Anchor" href="#后台"></a> 后台</h2><p>使用微信云托管</p><ul><li>控制台</li></ul><p><a href="https://cloud.weixin.qq.com/cloudrun/console">https://cloud.weixin.qq.com/cloudrun/console</a></p><ul><li>代码</li></ul><p><a href="https://github.com/VGalaxies/wxcloudrun-golang">https://github.com/VGalaxies/wxcloudrun-golang</a></p><h3 id="api-约定"><a class="markdownIt-Anchor" href="#api-约定"></a> API 约定</h3><p>参考 <a href="https://github.com/VGalaxies/wxcloudrun-golang#readme">https://github.com/VGalaxies/wxcloudrun-golang#readme</a></p><h2 id="前端调用参考"><a class="markdownIt-Anchor" href="#前端调用参考"></a> 前端调用参考</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getBook</span>(<span class="params"></span>) &#123;</span><br><span class="line">wx.<span class="property">cloud</span></span><br><span class="line">  .<span class="title function_">callContainer</span>(&#123;</span><br><span class="line">    <span class="attr">config</span>: &#123;</span><br><span class="line">      <span class="attr">env</span>: <span class="string">&quot;prod-8gt4mz04386985ef&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/api/book&quot;</span>,</span><br><span class="line">    <span class="attr">header</span>: &#123;</span><br><span class="line">      <span class="string">&quot;X-WX-SERVICE&quot;</span>: <span class="string">&quot;golang-6i3q&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">action</span>: <span class="string">&quot;exact&quot;</span>,</span><br><span class="line">      <span class="attr">hint</span>: <span class="string">&quot;深入理解计算机系统&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">resp</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(resp);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;微信小程序-计算机书籍简介及推荐&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#微信小程序-计算机书籍简介及推荐&quot;&gt;&lt;/a&gt; 微信小程序 计算机书籍简介及推荐&lt;/h1&gt;
&lt;h2 id=&quot;项目地址&quot;&gt;&lt;a class=&quot;markdownI</summary>
      
    
    
    
    <category term="计算机网络" scheme="http://little-hurui.cloud/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="互联网计算" scheme="http://little-hurui.cloud/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="互联网计算" scheme="http://little-hurui.cloud/tags/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97/"/>
    
    <category term="微信小程序" scheme="http://little-hurui.cloud/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>序列化与反序列化</title>
    <link href="http://little-hurui.cloud/2022/05/11/%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://little-hurui.cloud/2022/05/11/%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2022-05-11T01:09:14.000Z</published>
    <updated>2022-05-17T15:21:58.188Z</updated>
    
    <content type="html"><![CDATA[<h1 id="449-序列化和反序列化二叉搜索树"><a class="markdownIt-Anchor" href="#449-序列化和反序列化二叉搜索树"></a> <a href="https://leetcode.cn/problems/serialize-and-deserialize-bst/">449. 序列化和反序列化二叉搜索树</a></h1><p>序列化是将数据结构或对象转换为一系列位的过程，以便它可以存储在文件或内存缓冲区中，或通过网络连接链路传输，以便稍后在同一个或另一个计算机环境中重建。</p><p>设计一个算法来序列化和反序列化 <strong>二叉搜索树</strong> 。 对序列化/反序列化算法的工作方式没有限制。 您只需确保二叉搜索树可以序列化为字符串，并且可以将该字符串反序列化为最初的二叉搜索树。</p><p><strong>编码的字符串应尽可能紧凑</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Codec</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// Encodes a tree to a single string.</span></span><br><span class="line">    <span class="function">string <span class="title">serialize</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        string res;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; arr;</span><br><span class="line">        <span class="built_in">postOrder</span>(root,arr);</span><br><span class="line">        <span class="type">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">            res += <span class="built_in">to_string</span>(arr[i])+<span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res += <span class="built_in">to_string</span>(arr.<span class="built_in">back</span>());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Decodes your encoded data to tree.</span></span><br><span class="line">    <span class="function">TreeNode* <span class="title">deserialize</span><span class="params">(string data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(data.<span class="built_in">size</span>()==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        vector&lt;string&gt; arr = <span class="built_in">split</span>(data,<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; str:arr)&#123;</span><br><span class="line">            st.<span class="built_in">push</span>(<span class="built_in">stoi</span>(str));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">construct</span>(INT_MIN,INT_MAX,st);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">postOrder</span><span class="params">(TreeNode* root,vector&lt;<span class="type">int</span>&gt;&amp; arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">postOrder</span>(root-&gt;left,arr);</span><br><span class="line">        <span class="built_in">postOrder</span>(root-&gt;right,arr);</span><br><span class="line">        arr.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">split</span><span class="params">(<span class="type">const</span> string &amp;str, <span class="type">char</span> dec)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> start = <span class="number">0</span>;</span><br><span class="line">        vector&lt;string&gt; res;</span><br><span class="line">        <span class="keyword">while</span> (pos &lt; str.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (pos &lt; str.<span class="built_in">size</span>() &amp;&amp; str[pos] == dec) &#123;</span><br><span class="line">                pos++;</span><br><span class="line">            &#125;</span><br><span class="line">            start = pos;</span><br><span class="line">            <span class="keyword">while</span> (pos &lt; str.<span class="built_in">size</span>() &amp;&amp; str[pos] != dec) &#123;</span><br><span class="line">                pos++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (start &lt; str.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                res.<span class="built_in">emplace_back</span>(str.<span class="built_in">substr</span>(start, pos - start));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">construct</span><span class="params">(<span class="type">int</span> lower,<span class="type">int</span> upper,stack&lt;<span class="type">int</span>&gt;&amp; st)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(st.<span class="built_in">size</span>()==<span class="number">0</span> || st.<span class="built_in">top</span>() &lt; lower || st.<span class="built_in">top</span>() &gt; upper) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="type">int</span> val = st.<span class="built_in">top</span>();</span><br><span class="line">        st.<span class="built_in">pop</span>();</span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(val);</span><br><span class="line">        root-&gt;right = <span class="built_in">construct</span>(val,upper,st);</span><br><span class="line">        root-&gt;left  = <span class="built_in">construct</span>(lower,val,st);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>文艺复兴了</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;449-序列化和反序列化二叉搜索树&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#449-序列化和反序列化二叉搜索树&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://leetcode.cn/problems/serialize-and-d</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://little-hurui.cloud/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="常用算法" scheme="http://little-hurui.cloud/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/"/>
    
    <category term="板子" scheme="http://little-hurui.cloud/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%9D%BF%E5%AD%90/"/>
    
    
    <category term="Algorithm" scheme="http://little-hurui.cloud/tags/Algorithm/"/>
    
    <category term="二叉搜索树" scheme="http://little-hurui.cloud/tags/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>猫鼠游戏</title>
    <link href="http://little-hurui.cloud/2022/05/10/%E7%8C%AB%E9%BC%A0%E6%B8%B8%E6%88%8F/"/>
    <id>http://little-hurui.cloud/2022/05/10/%E7%8C%AB%E9%BC%A0%E6%B8%B8%E6%88%8F/</id>
    <published>2022-05-10T03:04:06.000Z</published>
    <updated>2022-05-17T15:20:30.699Z</updated>
    
    <content type="html"><![CDATA[<h1 id="913-猫和老鼠"><a class="markdownIt-Anchor" href="#913-猫和老鼠"></a> <a href="https://leetcode.cn/problems/cat-and-mouse/">913. 猫和老鼠</a></h1><blockquote><p>据说当时周赛国内没一个人ac</p></blockquote><p>两位玩家分别扮演猫和老鼠，在一张 无向 图上进行游戏，两人轮流行动。</p><p>图的形式是：graph[a] 是一个列表，由满足 ab 是图中的一条边的所有节点 b 组成。</p><p>老鼠从节点 1 开始，第一个出发；猫从节点 2 开始，第二个出发。在节点 0 处有一个洞。</p><p>在每个玩家的行动中，他们 <strong>必须</strong> 沿着图中与所在当前位置连通的一条边移动。例如，如果老鼠在节点 1 ，那么它必须移动到 graph[1] 中的任一节点。</p><p>此外，猫无法移动到洞中（节点 0）。</p><p>然后，游戏在出现以下三种情形之一时结束：</p><ul><li>如果猫和老鼠出现在同一个节点，猫获胜。</li><li>如果老鼠到达洞中，老鼠获胜。</li><li>如果某一位置重复出现（即，玩家的位置和移动顺序都与上一次行动相同），游戏平局。</li></ul><p>给你一张图 graph ，并假设两位玩家都都以最佳状态参与游戏：</p><ul><li>如果老鼠获胜，则返回 1；</li><li>如果猫获胜，则返回 2；</li><li>如果平局，则返回 0 。</li></ul><p><img src="https://s2.loli.net/2022/05/10/hVL8E3wtSqI4xHM.png" alt="" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：graph = [[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><blockquote><p>3 &lt;= graph.length &lt;= 50<br />1 &lt;= graph[i].length &lt; graph.length<br />0 &lt;= graph[ i ][ j ] &lt; graph.length<br />graph[ i ][ j ] != i</p><p>graph[i] 互不相同<br />猫和老鼠在游戏中总是移动</p></blockquote><h2 id="博弈知识介绍"><a class="markdownIt-Anchor" href="#博弈知识介绍"></a> 博弈知识介绍</h2><p>这道题是博弈问题，猫和老鼠都按照<strong>最优策略</strong>参与游戏。</p><p>在阐述具体解法之前，首先介绍博弈问题中的三个概念：必胜状态、必败状态与必和状态。</p><p>对于特定状态，如果游戏已经结束，则根据结束时的状态决定必胜状态、必败状态与必和状态。</p><p>如果分出胜负，则该特定状态对于获胜方为必胜状态，对于落败方为必败状态。</p><p>如果是平局，则该特定状态对于双方都为必和状态。</p><p>从特定状态开始，如果存在一种操作将状态变成必败状态，则当前玩家可以选择该操作，将必败状态留给对方玩家，因此该特定状态对于当前玩家为必胜状态。</p><p>从特定状态开始，如果所有操作都会将状态变成必胜状态，则无论当前玩家选择哪种操作，都会将必胜状态留给对方玩家，因此该特定状态对于当前玩家为必败状态。</p><p>从特定状态开始，如果任何操作都不能将状态变成必败状态，但是存在一种操作将状态变成必和状态，则当前玩家可以选择该操作，将必和状态留给对方玩家，因此该特定状态对于双方玩家都为必和状态。</p><p>对于每个玩家，最优策略如下：</p><p><strong>争取将必胜状态留给自己，将必败状态留给对方玩家。</strong></p><p><strong>在自己无法到达必胜状态的情况下，争取将必和状态留给自己。</strong></p><h2 id="自顶向下动态规划解法介绍"><a class="markdownIt-Anchor" href="#自顶向下动态规划解法介绍"></a> <strong>自顶向下动态规划解法介绍</strong></h2><p>博弈问题通常可以使用<strong>动态规划</strong>求解。这道题由于数据规模的原因，动态规划方法不适用，因此只是介绍</p><p>。</p><blockquote><p>改日再战</p></blockquote><h1 id="1728-猫和老鼠-ii"><a class="markdownIt-Anchor" href="#1728-猫和老鼠-ii"></a> <a href="https://leetcode.cn/problems/cat-and-mouse-ii/">1728. 猫和老鼠 II</a></h1><p>！shit！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;913-猫和老鼠&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#913-猫和老鼠&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://leetcode.cn/problems/cat-and-mouse/&quot;&gt;913. 猫和老鼠&lt;/a&gt;&lt;/h1</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://little-hurui.cloud/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Algorithm" scheme="http://little-hurui.cloud/tags/Algorithm/"/>
    
    <category term="动态规划" scheme="http://little-hurui.cloud/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="博弈论" scheme="http://little-hurui.cloud/tags/%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>单调栈</title>
    <link href="http://little-hurui.cloud/2022/05/09/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    <id>http://little-hurui.cloud/2022/05/09/%E5%8D%95%E8%B0%83%E6%A0%88/</id>
    <published>2022-05-09T15:41:20.000Z</published>
    <updated>2022-05-17T15:29:04.245Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单调栈"><a class="markdownIt-Anchor" href="#单调栈"></a> 单调栈</h1><p><strong>任意一个元素找左边和右边第一个比自己大/小的位置，用<a href="https://so.csdn.net/so/search?q=%E5%8D%95%E8%B0%83%E6%A0%88&amp;spm=1001.2101.3001.7020">单调栈</a>。</strong></p><ul><li>单调栈主要可以用来解决区间最值问题</li><li>比如求一个一维数组的中某一个数的右边第一个比他大的元素或者元素下标。</li></ul><p><strong><a href="https://leetcode.cn/problems/daily-temperatures/">739. 每日温度</a></strong></p><p>给定一个整数数组 temperatures ，表示每天的温度，返回一个数组 answer ，其中 answer[i] 是指在第 i 天之后，才会有更高的温度。如果气温在这之后都不会升高，请在该位置用 0 来代替</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dailyTemperatures</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; temperatures)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = temperatures.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(n,<span class="number">0</span>)</span></span>;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="type">int</span> t = temperatures[i];</span><br><span class="line">            <span class="keyword">while</span>(!st.<span class="built_in">empty</span>() &amp;&amp; t &gt; temperatures[st.<span class="built_in">top</span>()])&#123;</span><br><span class="line">                ans[st.<span class="built_in">top</span>()] = i - st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            st.<span class="built_in">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>只需遍历一遍数组，极大减少了时间复杂度</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;单调栈&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#单调栈&quot;&gt;&lt;/a&gt; 单调栈&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;任意一个元素找左边和右边第一个比自己大/小的位置，用&lt;a href=&quot;https://so.csdn.net/so/sea</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://little-hurui.cloud/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="常用算法" scheme="http://little-hurui.cloud/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/"/>
    
    <category term="板子" scheme="http://little-hurui.cloud/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%9D%BF%E5%AD%90/"/>
    
    
    <category term="Algorithm" scheme="http://little-hurui.cloud/tags/Algorithm/"/>
    
    <category term="单调栈" scheme="http://little-hurui.cloud/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
  </entry>
  
</feed>
