<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>投降输一半</title>
  
  <subtitle>BLOG</subtitle>
  <link href="http://little-hurui.cloud/atom.xml" rel="self"/>
  
  <link href="http://little-hurui.cloud/"/>
  <updated>2022-07-19T15:23:11.859Z</updated>
  <id>http://little-hurui.cloud/</id>
  
  <author>
    <name>胡小小小小睿</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>线段树-动态开点</title>
    <link href="http://little-hurui.cloud/2022/07/19/%E7%BA%BF%E6%AE%B5%E6%A0%91-%E5%8A%A8%E6%80%81%E5%BC%80%E7%82%B9/"/>
    <id>http://little-hurui.cloud/2022/07/19/%E7%BA%BF%E6%AE%B5%E6%A0%91-%E5%8A%A8%E6%80%81%E5%BC%80%E7%82%B9/</id>
    <published>2022-07-19T15:23:11.000Z</published>
    <updated>2022-07-19T15:23:11.859Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>搜索模拟题</title>
    <link href="http://little-hurui.cloud/2022/07/18/%E6%90%9C%E7%B4%A2%E6%A8%A1%E6%8B%9F%E9%A2%98/"/>
    <id>http://little-hurui.cloud/2022/07/18/%E6%90%9C%E7%B4%A2%E6%A8%A1%E6%8B%9F%E9%A2%98/</id>
    <published>2022-07-18T14:37:19.000Z</published>
    <updated>2022-07-18T14:37:19.859Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>基数排序</title>
    <link href="http://little-hurui.cloud/2022/07/17/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
    <id>http://little-hurui.cloud/2022/07/17/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/</id>
    <published>2022-07-17T06:06:23.000Z</published>
    <updated>2022-07-17T06:06:23.641Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>MIT6.S086-Lab1</title>
    <link href="http://little-hurui.cloud/2022/07/12/MIT6-S086-Lab1/"/>
    <id>http://little-hurui.cloud/2022/07/12/MIT6-S086-Lab1/</id>
    <published>2022-07-12T10:10:24.000Z</published>
    <updated>2022-07-16T10:04:13.765Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lab-1-unix-utilities"><a class="markdownIt-Anchor" href="#lab-1-unix-utilities"></a> Lab 1 Unix Utilities</h1><p><img src="https://s2.loli.net/2022/07/12/LbeItZJorR7FOwE.png" alt=""></p><table><thead><tr><th>系统调用</th><th>描述</th></tr></thead><tbody><tr><td>fork()</td><td>创建进程</td></tr><tr><td>exit()</td><td>结束当前进程</td></tr><tr><td>wait()</td><td>等待子进程结束</td></tr><tr><td>kill(pid)</td><td>结束 pid 所指进程</td></tr><tr><td>getpid()</td><td>获得当前进程 pid</td></tr><tr><td>sleep(n)</td><td>睡眠 n 秒</td></tr><tr><td>exec(filename, *argv)</td><td>加载并执行一个文件</td></tr><tr><td>sbrk(n)</td><td>为进程内存空间增加 n 字节</td></tr><tr><td>open(filename, flags)</td><td>打开文件，flags 指定读/写模式</td></tr><tr><td>read(fd, buf, n)</td><td>从文件中读 n 个字节到 buf</td></tr><tr><td>write(fd, buf, n)</td><td>从 buf 中写 n 个字节到文件</td></tr><tr><td>close(fd)</td><td>关闭打开的 fd</td></tr><tr><td>dup(fd)</td><td>复制 fd</td></tr><tr><td>pipe( p)</td><td>创建管道， 并把读和写的 fd 返回到p</td></tr><tr><td>chdir(dirname)</td><td>改变当前目录</td></tr><tr><td>mkdir(dirname)</td><td>创建新的目录</td></tr><tr><td>mknod(name, major, minor)</td><td>创建设备文件</td></tr><tr><td>fstat(fd)</td><td>返回文件信息</td></tr><tr><td>link(f1, f2)</td><td>给 f1 创建一个新名字(f2)</td></tr><tr><td>unlink(filename)</td><td>删除文件</td></tr></tbody></table><h1 id="sleep"><a class="markdownIt-Anchor" href="#sleep"></a> Sleep</h1><p>实现一个sleep的system call，实现休眠功能</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"kernel/types.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"user/user.h"</span></span></span><br><span class="line">   </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> {</span><br><span class="line"><span class="keyword">if</span> (argc == <span class="number">1</span>) {</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="number">2</span>, <span class="string">"ERROR: sleep time required\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line">sleep(atoi(argv[<span class="number">1</span>])); <span class="comment">// atoi把字符串转化为int</span></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1><p><a href="https://th0ar.gitbooks.io/xv6-chinese/content/index.html">xv6 中文文档 </a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;lab-1-unix-utilities&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#lab-1-unix-utilities&quot;&gt;&lt;/a&gt; Lab 1 Unix Utilities&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://</summary>
      
    
    
    
    <category term="操作系统" scheme="http://little-hurui.cloud/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Mit6.S081" scheme="http://little-hurui.cloud/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Mit6-S081/"/>
    
    <category term="Lab" scheme="http://little-hurui.cloud/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Mit6-S081/Lab/"/>
    
    
    <category term="Mit6.S081" scheme="http://little-hurui.cloud/tags/Mit6-S081/"/>
    
    <category term="操作系统" scheme="http://little-hurui.cloud/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Static Analysis 01 Introduction</title>
    <link href="http://little-hurui.cloud/2022/07/12/Static-Analysis-01-Introduction/"/>
    <id>http://little-hurui.cloud/2022/07/12/Static-Analysis-01-Introduction/</id>
    <published>2022-07-12T09:32:36.000Z</published>
    <updated>2022-07-12T09:32:36.725Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>前缀树/字典树</title>
    <link href="http://little-hurui.cloud/2022/07/11/%E5%89%8D%E7%BC%80%E6%A0%91-%E5%AD%97%E5%85%B8%E6%A0%91/"/>
    <id>http://little-hurui.cloud/2022/07/11/%E5%89%8D%E7%BC%80%E6%A0%91-%E5%AD%97%E5%85%B8%E6%A0%91/</id>
    <published>2022-07-11T08:19:43.000Z</published>
    <updated>2022-07-11T14:34:31.607Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前缀树字典树-trie"><a class="markdownIt-Anchor" href="#前缀树字典树-trie"></a> 前缀树/字典树 Trie</h1><p><strong><a href="https://baike.baidu.com/item/%E5%AD%97%E5%85%B8%E6%A0%91/9825209?fr=aladdin">Trie</a></strong>（发音类似 “try”）或者说 <strong>前缀树</strong> 是一种树形数据结构，用于高效地存储和检索字符串数据集中的键。这一数据结构有相当多的应用情景，例如自动补完和拼写检查。</p><p>请你实现 Trie 类：</p><ul><li><code>Trie()</code> 初始化前缀树对象。</li><li><code>void insert(String word)</code> 向前缀树中插入字符串 <code>word</code> 。</li><li><code>boolean search(String word)</code> 如果字符串 <code>word</code> 在前缀树中，返回 <code>true</code>（即，在检索之前已经插入）；否则，返回 <code>false</code> 。</li><li><code>boolean startsWith(String prefix)</code> 如果之前已经插入的字符串 <code>word</code> 的前缀之一为 <code>prefix</code> ，返回 <code>true</code> ；否则，返回 <code>false</code> 。</li></ul><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">["Trie", "insert", "search", "search", "startsWith", "insert", "search"]</span><br><span class="line">[[], ["apple"], ["apple"], ["app"], ["app"], ["app"], ["app"]]</span><br><span class="line">输出</span><br><span class="line">[null, null, true, false, true, null, true]</span><br><span class="line"></span><br><span class="line">解释</span><br><span class="line">Trie trie = new Trie();</span><br><span class="line">trie.insert("apple");</span><br><span class="line">trie.search("apple");   // 返回 True</span><br><span class="line">trie.search("app");     // 返回 False</span><br><span class="line">trie.startsWith("app"); // 返回 True</span><br><span class="line">trie.insert("app");</span><br><span class="line">trie.search("app");     // 返回 True</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= word.length, prefix.length &lt;= 2000</code></li><li><code>word</code> 和 <code>prefix</code> 仅由小写英文字母组成</li><li><code>insert</code>、<code>search</code> 和 <code>startsWith</code> 调用次数 <strong>总计</strong> 不超过 <code>3 * 104</code> 次</li></ul><h1 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>Trie 树<br>TrieTrie 树（又叫「前缀树」或「字典树」）是一种用于快速查询「某个字符串/字符前缀」是否存在的数据结构。</p><p>其核心是使用「边」来代表有无字符，使用「点」来记录是否为「单词结尾」以及「其后续字符串的字符是什么」。</p><p><img src="https://s2.loli.net/2022/07/11/vZK6cdlOECFgmTR.png" alt=""></p><h2 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span>{</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">TrieNode</span>{</span><br><span class="line">        <span class="type">boolean</span> end;</span><br><span class="line">        TrieNode[] tns = <span class="keyword">new</span> <span class="title class_">TrieNode</span>[<span class="number">26</span>];</span><br><span class="line">    }</span><br><span class="line">    TrieNode root;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Trie</span><span class="params">()</span>{</span><br><span class="line">        root = <span class="keyword">new</span> <span class="title class_">TrieNode</span>();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String s)</span>{</span><br><span class="line">        <span class="type">TrieNode</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; s.length();i++){</span><br><span class="line">            <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> s.charAt(i) - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span>(p.tns[u] == <span class="literal">null</span>) p.tns[u] = <span class="keyword">new</span> <span class="title class_">TrieNode</span>();</span><br><span class="line">            p = p.tns[u];</span><br><span class="line">        }</span><br><span class="line">        p.end = <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(String s)</span>{</span><br><span class="line">        <span class="type">TrieNode</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++){</span><br><span class="line">        <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> s.charAt(i) - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span>(p.tns[u] == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            p = p.tns[u];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> p.end;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">startsWith</span><span class="params">(String s)</span>{</span><br><span class="line">        <span class="type">TrieNode</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++){</span><br><span class="line">        <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> s.charAt(i) - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span>(p.tns[u] == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            p = p.tns[u];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h1 id="关于-trie-的应用面"><a class="markdownIt-Anchor" href="#关于-trie-的应用面"></a> 关于 Trie 的应用面</h1><p>首先，在纯算法领域，前缀树算是一种较为常用的数据结构。</p><p>不过如果在工程中，不考虑前缀匹配的话，基本上使用 hash 就能满足。</p><p>如果考虑前缀匹配的话，工程也不会使用 Trie 。</p><p>一方面是字符集大小不好确定（题目只考虑 26 个字母，字符集大小限制在较小的 26 内）因此可以使用 Trie，但是工程一般兼容各种字符集，一旦字符集大小很大的话，Trie 将会带来很大的空间浪费。</p><p>另外，对于个别的超长字符 Trie 会进一步变深。</p><p>这时候如果 Trie 是存储在硬盘中，Trie 结构过深带来的影响是多次随机 IO，随机 IO 是成本很高的操作。</p><p>同时 Trie 的特殊结构，也会为分布式存储将会带来困难。</p><p>因此在工程领域中 Trie 的应用面不广。</p><p>至于一些诸如「联想输入」、「模糊匹配」、「全文检索」的典型场景在工程主要是通过 ES (ElasticSearch) 解决的。</p><p>而 ES 的实现则主要是依靠「倒排索引」</p><h1 id="设计一个魔法字典"><a class="markdownIt-Anchor" href="#设计一个魔法字典"></a> 设计一个魔法字典</h1><p>设计一个使用单词列表进行初始化的数据结构，单词列表中的单词 <strong>互不相同</strong> 。 如果给出一个单词，请判定能否只将这个单词中<strong>一个</strong>字母换成另一个字母，使得所形成的新单词存在于你构建的字典中。</p><p>实现 <code>MagicDictionary</code> 类：</p><ul><li><code>MagicDictionary()</code> 初始化对象</li><li><code>void buildDict(String[] dictionary)</code> 使用字符串数组 <code>dictionary</code> 设定该数据结构，<code>dictionary</code> 中的字符串互不相同</li><li><code>bool search(String searchWord)</code> 给定一个字符串 <code>searchWord</code> ，判定能否只将字符串中 <strong>一个</strong> 字母换成另一个字母，使得所形成的新字符串能够与字典中的任一字符串匹配。如果可以，返回 <code>true</code> ；否则，返回 <code>false</code> 。</li></ul><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">["MagicDictionary", "buildDict", "search", "search", "search", "search"]</span><br><span class="line">[[], [["hello", "leetcode"]], ["hello"], ["hhllo"], ["hell"], ["leetcoded"]]</span><br><span class="line">输出</span><br><span class="line">[null, null, false, true, false, false]</span><br><span class="line"></span><br><span class="line">解释</span><br><span class="line">MagicDictionary magicDictionary = new MagicDictionary();</span><br><span class="line">magicDictionary.buildDict(["hello", "leetcode"]);</span><br><span class="line">magicDictionary.search("hello"); // 返回 False</span><br><span class="line">magicDictionary.search("hhllo"); // 将第二个 'h' 替换为 'e' 可以匹配 "hello" ，所以返回 True</span><br><span class="line">magicDictionary.search("hell"); // 返回 False</span><br><span class="line">magicDictionary.search("leetcoded"); // 返回 False</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= dictionary.length &lt;= 100</code></li><li><code>1 &lt;= dictionary[i].length &lt;= 100</code></li><li><code>dictionary[i]</code> 仅由小写英文字母组成</li><li><code>dictionary</code> 中的所有字符串 <strong>互不相同</strong></li><li><code>1 &lt;= searchWord.length &lt;= 100</code></li><li><code>searchWord</code> 仅由小写英文字母组成</li><li><code>buildDict</code> 仅在 <code>search</code> 之前调用一次</li><li>最多调用 <code>100</code> 次 <code>search</code></li></ul><h1 id="题解-2"><a class="markdownIt-Anchor" href="#题解-2"></a> 题解</h1><p>Trie + DFS</p><h2 id="代码实现-2"><a class="markdownIt-Anchor" href="#代码实现-2"></a> 代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MagicDictionary</span> {</span><br><span class="line"></span><br><span class="line">    TrieNode root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MagicDictionary</span><span class="params">()</span> {</span><br><span class="line">        root = <span class="keyword">new</span> <span class="title class_">TrieNode</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildDict</span><span class="params">(String[] dictionary)</span> {</span><br><span class="line">        <span class="keyword">for</span> (String s : dictionary) {</span><br><span class="line">            insertNode(root, s);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(String searchWord)</span> {</span><br><span class="line">        <span class="keyword">return</span> search(root, searchWord, <span class="number">0</span>, <span class="literal">false</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">TrieNode</span> {</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> TrieNode[] tns;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> isEnd;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">TrieNode</span><span class="params">()</span> {</span><br><span class="line">            <span class="comment">//初始时每个都是26个小写字母</span></span><br><span class="line">            tns = <span class="keyword">new</span> <span class="title class_">TrieNode</span>[<span class="number">26</span>];</span><br><span class="line">            isEnd = <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertNode</span><span class="params">(TrieNode root, String word)</span> {</span><br><span class="line">        <span class="type">TrieNode</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i&lt;word.length();i++){</span><br><span class="line">            <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> word.charAt(i) - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span>(p.tns[u] == <span class="literal">null</span>) p.tns[u] = <span class="keyword">new</span> <span class="title class_">TrieNode</span>();</span><br><span class="line">            p = p.tns[u];</span><br><span class="line">        }</span><br><span class="line">        p.isEnd = <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(TrieNode node, String word, <span class="type">int</span> index, <span class="type">boolean</span> diff)</span> {</span><br><span class="line">        <span class="comment">//字符全部遍历完</span></span><br><span class="line">        <span class="keyword">if</span> (index == word.length()) {</span><br><span class="line">            <span class="keyword">return</span> diff &amp;&amp; node.isEnd;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> word.charAt(index) - <span class="string">'a'</span>;</span><br><span class="line">        <span class="comment">//字典树是否存在该字符</span></span><br><span class="line">        <span class="keyword">if</span> (node.tns[i] != <span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">if</span> (search(node.tns[i], word, index + <span class="number">1</span>, diff)) {</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (!diff) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">26</span>; j++) {</span><br><span class="line">                <span class="keyword">if</span> (j != i &amp;&amp; node.tns[j] != <span class="literal">null</span>) {</span><br><span class="line">                    <span class="keyword">if</span> (search(node.tns[j], word, index + <span class="number">1</span>, <span class="literal">true</span>)) {</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1><p><a href="https://leetcode.cn/problems/implement-trie-prefix-tree/">208. 实现 Trie (前缀树) - 力扣（LeetCode）</a></p><p><a href="https://leetcode.cn/problems/implement-magic-dictionary/solution/by-ac_oier-a01l/">676. 实现一个魔法字典 题解 - 力扣（LeetCode）</a></p><p><a href="https://leetcode.cn/problems/implement-trie-prefix-tree/solution/gong-shui-san-xie-yi-ti-shuang-jie-er-we-esm9/">【宫水三叶】一题双解 :「二维数组」&amp;「TrieNode」 - 实现 Trie (前缀树) - 力扣（LeetCode）</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前缀树字典树-trie&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前缀树字典树-trie&quot;&gt;&lt;/a&gt; 前缀树/字典树 Trie&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://baike.baidu.com/ite</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://little-hurui.cloud/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="常用算法" scheme="http://little-hurui.cloud/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Algorithm" scheme="http://little-hurui.cloud/tags/Algorithm/"/>
    
    <category term="字典树" scheme="http://little-hurui.cloud/tags/%E5%AD%97%E5%85%B8%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>线性DP-摘樱桃</title>
    <link href="http://little-hurui.cloud/2022/07/10/%E7%BA%BF%E6%80%A7DP-%E6%91%98%E6%A8%B1%E6%A1%83/"/>
    <id>http://little-hurui.cloud/2022/07/10/%E7%BA%BF%E6%80%A7DP-%E6%91%98%E6%A8%B1%E6%A1%83/</id>
    <published>2022-07-10T13:47:28.000Z</published>
    <updated>2022-07-10T15:26:18.811Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘樱桃"><a class="markdownIt-Anchor" href="#摘樱桃"></a> 摘樱桃</h1><p><img src="https://s2.loli.net/2022/07/10/nKbHvlRTpc9e31O.png" alt=""></p><p>一个N x N的网格<code>(grid)</code> 代表了一块樱桃地，每个格子由以下三种数字的一种来表示：</p><ul><li>0 表示这个格子是空的，所以你可以穿过它。</li><li>1 表示这个格子里装着一个樱桃，你可以摘到樱桃然后穿过它。</li><li>-1 表示这个格子里有荆棘，挡着你的路。</li></ul><p>你的任务是在遵守下列规则的情况下，尽可能的摘到最多樱桃：</p><ul><li>从位置 (0, 0) 出发，最后到达 (N-1, N-1) ，只能向下或向右走，并且只能穿越有效的格子（即只可以穿过值为0或者1的格子）；</li><li>当到达 (N-1, N-1) 后，你要继续走，直到返回到 (0, 0) ，只能向上或向左走，并且只能穿越有效的格子；</li><li>当你经过一个格子且这个格子包含一个樱桃时，你将摘到樱桃并且这个格子会变成空的（值变为0）；</li><li>如果在 (0, 0) 和 (N-1, N-1) 之间不存在一条可经过的路径，则没有任何一个樱桃能被摘到。</li></ul><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入: grid =</span><br><span class="line">[[0, 1, -1],</span><br><span class="line"> [1, 0, -1],</span><br><span class="line"> [1, 1,  1]]</span><br><span class="line">输出: 5</span><br><span class="line">解释： </span><br><span class="line">玩家从（0,0）点出发，经过了向下走，向下走，向右走，向右走，到达了点(2, 2)。</span><br><span class="line">在这趟单程中，总共摘到了4颗樱桃，矩阵变成了[[0,1,-1],[0,0,-1],[0,0,0]]。</span><br><span class="line">接着，这名玩家向左走，向上走，向上走，向左走，返回了起始点，又摘到了1颗樱桃。</span><br><span class="line">在旅程中，总共摘到了5颗樱桃，这是可以摘到的最大值了。</span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ul><li><code>grid</code> 是一个 <code>N</code> * <code>N</code> 的二维数组，N的取值范围是<code>1 &lt;= N &lt;= 50</code>。</li><li>每一个 <code>grid[i][j]</code> 都是集合 <code>{-1, 0, 1}</code>其中的一个数。</li><li>可以保证起点 <code>grid[0][0]</code> 和终点 <code>grid[N-1][N-1]</code> 的值都不会是 -1。</li></ul><h1 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>题目定义是按照 只能右/下 走到右下角，然后按照 只能左/上 走到左上</p><p>等价于按照 只能右/下 走两次的最大得分</p><p>等价于两个点同时从左上角开始走，最终走到右下角的最大得分</p><h2 id="状态定义"><a class="markdownIt-Anchor" href="#状态定义"></a> 状态定义</h2><p><code>f[k][i1][i2]</code>为当前走了k步，且第一个点当前在<code>i1</code>行，第二个点在<code>i2</code>行时的最大得分，最终答案为<code>f[2n][n][n]</code></p><p>初始状态<code>f[2][1][1]=g[0][0]</code></p><h2 id="状态转移"><a class="markdownIt-Anchor" href="#状态转移"></a> 状态转移</h2><p>由于两个点时同时走，可计算第一个点所在列<code>j1 = k - i1</code>，第二个点所在列<code>j2 = k - i2</code></p><p>不失一般性考虑<code>f[k][i1][i2]</code>该如何转移，两个点均有可能行走行或列，即有四种前驱状态：<code>f[k-1][i1-1][i2]</code>、<code>f[k-1][i1-1][i2-1]</code>、<code>f[k-1][i1][i2-1]</code>、<code>f[k-1][i1][i2]</code>，在四者中取最大值，如果两个位置不重合，可以同时累加，否则只能累加一次</p><blockquote><p>details: 为了防止从值为-1的格子进行转移影响正确性，我们需要将<code>f[k][i1][i2]</code>初始化为 -INT_MAX</p></blockquote><h2 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>{</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">55</span>, INF = Integer.MIN_VALUE;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[][][] f = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>*N][N][N];</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">cherryPickup</span><span class="params">(<span class="type">int</span>[][] g)</span>{</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> g.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">2</span>*n;k++){</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span><span class="number">0</span>;i1&lt;=n;i1++){</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i2=<span class="number">0</span>;i2&lt;=n;i2++){</span><br><span class="line">                    f[k][i1][i2] = INF;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">       <span class="comment">//初始化</span></span><br><span class="line">        f[<span class="number">2</span>][<span class="number">1</span>][<span class="number">1</span>] = g[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">3</span>;k&lt;=<span class="number">2</span>*n;k++){</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i1=<span class="number">1</span>;i1&lt;=n;i1++){</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i2=<span class="number">1</span>;i2&lt;=n;i2++){</span><br><span class="line">                    <span class="type">int</span> <span class="variable">j1</span> <span class="operator">=</span> k - i1, j2 = k - i2;</span><br><span class="line">                    <span class="comment">//获取纵坐标</span></span><br><span class="line">                    <span class="keyword">if</span>(j1 &lt;= <span class="number">0</span> || j1 &gt; n || j2 &lt;= <span class="number">0</span> || j2 &gt; n) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">A</span> <span class="operator">=</span> g[i1-<span class="number">1</span>][j1-<span class="number">1</span>], B = g[i2-<span class="number">1</span>][j2-<span class="number">1</span>];</span><br><span class="line">                    <span class="comment">//A , B为当前位置</span></span><br><span class="line">                    <span class="keyword">if</span>(A == -<span class="number">1</span> || B == -<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> f[k - <span class="number">1</span>][i1 - <span class="number">1</span>][i2], b = f[k - <span class="number">1</span>][i1 - <span class="number">1</span>][i2 - <span class="number">1</span>], c = f[k - <span class="number">1</span>][i1][i2 - <span class="number">1</span>], d = f[k - <span class="number">1</span>][i1][i2];</span><br><span class="line">                    <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> Math.max(Math.max(a,b),Math.max(c,d));</span><br><span class="line">                    t += A;</span><br><span class="line">                    <span class="comment">//先移动q</span></span><br><span class="line">                    <span class="keyword">if</span>(i1 != i2) t+=B;</span><br><span class="line">                    f[k][i1][i2] = t;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> Math.max(<span class="number">0</span>,f[<span class="number">2</span>*n][n][n]);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;摘樱桃&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#摘樱桃&quot;&gt;&lt;/a&gt; 摘樱桃&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/07/10/nKbHvlRTpc9e31O.png&quot; alt=&quot;&quot;&gt;</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://little-hurui.cloud/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="常用算法" scheme="http://little-hurui.cloud/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Algorithm" scheme="http://little-hurui.cloud/tags/Algorithm/"/>
    
    <category term="动态规划" scheme="http://little-hurui.cloud/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>经典DP-最大斐波那契子列</title>
    <link href="http://little-hurui.cloud/2022/07/10/%E7%BB%8F%E5%85%B8DP-%E6%9C%80%E5%A4%A7%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%AD%90%E5%88%97/"/>
    <id>http://little-hurui.cloud/2022/07/10/%E7%BB%8F%E5%85%B8DP-%E6%9C%80%E5%A4%A7%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%AD%90%E5%88%97/</id>
    <published>2022-07-10T12:47:06.000Z</published>
    <updated>2022-07-10T13:46:36.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最大斐波那契子列"><a class="markdownIt-Anchor" href="#最大斐波那契子列"></a> 最大斐波那契子列</h1><p>如果序列 <code>X_1, X_2, ..., X_n</code> 满足下列条件，就说它是 <em>斐波那契式</em> 的：</p><ul><li><code>n &gt;= 3</code></li><li>对于所有 <code>i + 2 &lt;= n</code>，都有 <code>X_i + X_{i+1} = X_{i+2}</code></li></ul><p>给定一个<strong>严格递增</strong>的正整数数组形成序列 arr ，找到 arr 中最长的斐波那契式的子序列的长度。如果一个不存在，返回 0 。</p><p><em>（回想一下，子序列是从原序列 arr 中派生出来的，它从 arr 中删掉任意数量的元素（也可以不删），而不改变其余元素的顺序。例如， <code>[3, 5, 8]</code> 是 <code>[3, 4, 5, 6, 7, 8]</code> 的一个子序列）</em></p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: arr = [1,2,3,4,5,6,7,8]</span><br><span class="line">输出: 5</span><br><span class="line">解释: 最长的斐波那契式子序列为 [1,2,3,5,8] 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: arr = [1,3,7,11,12,14,18]</span><br><span class="line">输出: 3</span><br><span class="line">解释: 最长的斐波那契式子序列有 [1,11,12]、[3,11,14] 以及 [7,11,18] 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>3 &lt;= arr.length &lt;= 1000</code></li><li><code>1 &lt;= arr[i] &lt; arr[i + 1] &lt;= 10^9</code></li></ul><h1 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h1><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>首先我们不难看出本题应该使用状态规划，状态规划又由<strong>状态定义</strong>和<strong>状态转移方程</strong>决定，因而本题难点在于如何<strong>定义状态</strong></p><h2 id="状态定义"><a class="markdownIt-Anchor" href="#状态定义"></a> 状态定义</h2><p><code>dp[i][j]</code>：表示以<code>A[i]</code>为斐波那契数列最后一位，使用<code>A[j]</code>为倒数第二位时的最长数列长度</p><h2 id="状态转移"><a class="markdownIt-Anchor" href="#状态转移"></a> 状态转移</h2><p>不失一般性考虑<code>dp[i][j]</code>如何计算，根据斐波那契数列定义，计算出<code>A[j]</code>的前一位值为<code>A[i] - A[j]</code>，只需获取<code>A[i] - A[j]</code> 的下标<code>t</code>，由于<code>A</code>严格单调递增，使用 哈希表对其坐标转存，如果<code>t</code>存在，那么此时至少存在长度为3的子列，可以对<code>dp[i][j]</code>进行更新</p><p>状态转移方程为</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>[</mo><mi>j</mi><mo>]</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo>(</mo><mn>3</mn><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo>[</mo><mi>j</mi><mo>]</mo><mo>[</mo><mi>t</mi><mo>]</mo><mo>+</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">dp[i][j] = max(3,dp[j][t] + 1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">d</span><span class="mord mathit">p</span><span class="mopen">[</span><span class="mord mathit">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathit" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mrel">=</span><span class="mord mathit">m</span><span class="mord mathit">a</span><span class="mord mathit">x</span><span class="mopen">(</span><span class="mord mathrm">3</span><span class="mpunct">,</span><span class="mord mathit">d</span><span class="mord mathit">p</span><span class="mopen">[</span><span class="mord mathit" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathit">t</span><span class="mclose">]</span><span class="mbin">+</span><span class="mord mathrm">1</span><span class="mclose">)</span></span></span></span></p><p>同时需要从小到大枚举<code>i</code>,从大到小枚举<code>j</code>,可以作出如下剪枝</p><ul><li>可行性剪枝： 当出现<code>A[i] - A[j] &gt; A[j]</code>说明次数不能存在前继了</li><li>最优性剪枝：假设当前最大长度为<code>ans</code>,只有当<code>j + 2 &gt; ans</code>才需要继续搜</li></ul><h2 id="代码编写"><a class="markdownIt-Anchor" href="#代码编写"></a> 代码编写</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lenLongestFibSubseq</span><span class="params">(<span class="type">int</span>[] A)</span>{</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> A.length, ans = <span class="number">0</span>;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) map.put(A[i],i);</span><br><span class="line">        <span class="comment">//构建索引哈希表</span></span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++){</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i-<span class="number">1</span>;j&gt;=<span class="number">0</span> &amp;&amp; j+<span class="number">2</span> &gt; ans;j--){<span class="comment">//最优性剪枝</span></span><br><span class="line">                <span class="keyword">if</span>(A[i]-A[j] &gt;= A[j]) <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">//可行性剪枝</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">t</span>  <span class="operator">=</span> map.getOrDefault(A[i]-A[j],-<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(t == -<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                dp[i][j] = Math.max(<span class="number">3</span>,dp[j][t] + <span class="number">1</span>);</span><br><span class="line">                <span class="comment">//状态转移方程</span></span><br><span class="line">                ans = Math.max(ans,dp[i][j]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;最大斐波那契子列&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#最大斐波那契子列&quot;&gt;&lt;/a&gt; 最大斐波那契子列&lt;/h1&gt;
&lt;p&gt;如果序列 &lt;code&gt;X_1, X_2, ..., X_n&lt;/code&gt; 满足下列条件，就说它是 &lt;em&gt;斐</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://little-hurui.cloud/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="常用算法" scheme="http://little-hurui.cloud/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Algorithm" scheme="http://little-hurui.cloud/tags/Algorithm/"/>
    
    <category term="动态规划" scheme="http://little-hurui.cloud/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>MIT 6.S081 Lecture 1</title>
    <link href="http://little-hurui.cloud/2022/07/10/MIT-6-S081%20Lecture%201/"/>
    <id>http://little-hurui.cloud/2022/07/10/MIT-6-S081%20Lecture%201/</id>
    <published>2022-07-10T09:30:24.000Z</published>
    <updated>2022-07-16T10:02:44.766Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lecture-1-intoduction-and-examples"><a class="markdownIt-Anchor" href="#lecture-1-intoduction-and-examples"></a> Lecture 1 Intoduction and Examples</h1><h1 id="os-purposes"><a class="markdownIt-Anchor" href="#os-purposes"></a> OS PURPOSES</h1><ul><li>ABSTRACT H/W 抽象硬件</li><li>MULTIPLEX 复用/并行</li><li>ISOLATION 隔离性</li><li>SHARING 共享性</li><li>SECURITY 安全性</li><li>PERFROMANCE 性能</li><li>RANGE OF USERS 多种用途</li></ul><h1 id="os-org"><a class="markdownIt-Anchor" href="#os-org"></a> OS ORG</h1><p>操作系统结构</p><p><img src="https://s2.loli.net/2022/07/12/KERlh8IMLyNG79z.png" alt=""></p><p><strong>用户空间 Userspace</strong></p><p>位于架构最上层，运行各种程序，VI，VV，SHELL</p><p><strong>Kernel</strong></p><p>Kernel是计算机资源的守护者。当你打开计算机时，Kernel总是第一个被启动。Kernel程序只有一个，它维护数据来管理每一个用户空间进程。Kernel同时还维护了大量的数据结构来帮助它管理各种各样的硬件资源，以供用户空间的程序使用</p><ul><li>文件系统</li><li>进程管理系统</li></ul><p><strong>底层架构</strong></p><p>CPU,RAM,Disk,Net</p><p><img src="https://s2.loli.net/2022/07/12/lda8jONk9WmYDJX.png" alt=""></p><p>一台计算机通常有许多进程Process，但是只有一个内核Kernel，Kernel为Process提供服务</p><h1 id="system-calls"><a class="markdownIt-Anchor" href="#system-calls"></a> System calls</h1><ul><li><p><code>fork</code>：形式：<code>int fork()</code>。其作用是让一个进程生成另外一个和这个进程的内存内容相同的子进程。在父进程中，<code>fork</code>的返回值是这个子进程的PID，在子进程中，返回值是0</p></li><li><p><code>exit</code>：形式：<code>int exit(int status)</code>。让调用它的进程停止执行并且将内存等占用的资源全部释放。需要一个整数形式的状态参数，0代表以正常状态退出，1代表以非正常状态退出</p></li><li><p><code>wait</code>：形式：<code>int wait(int *status)</code>。等待子进程退出，返回子进程PID，子进程的退出状态存储到<code>int *status</code>这个地址中。如果调用者没有子进程，<code>wait</code>将返回-1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> pid = fork();</span><br><span class="line"><span class="keyword">if</span> (pid &gt; <span class="number">0</span>) {</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"parent: child=%d\n"</span>, pid);</span><br><span class="line">    pid = wait((<span class="type">int</span> *) <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"child %d is done\n"</span>, pid);</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (pid == <span class="number">0</span>) {</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"child: exiting\n"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"fork error\n"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//前两行输出可能为</span></span><br><span class="line"><span class="comment">//父进程和子进程将同时开始判断PID的值，在父进程中，PID为1234，而在子进程中，PID为0。看哪个进程先判断好PID的值，以上输出顺序才会被决定。</span></span><br><span class="line">parent: child=<span class="number">1234</span></span><br><span class="line">child: exiting</span><br><span class="line">    or</span><br><span class="line">child: exiting</span><br><span class="line">parent: child=<span class="number">1234</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//最后一行输出为</span></span><br><span class="line">parent: child <span class="number">1234</span> is done</span><br><span class="line"><span class="comment">//子进程在判断完pid == 0之后将exit，父进程发现子进程exit之后，wait执行完毕，打印输出</span></span><br><span class="line"><span class="comment">//尽管fork了之后子进程和父进程有相同的内存内容，但是内存地址和寄存器是不一样的，也就是说在一个进程中改变变量并不会影响另一个进程</span></span><br></pre></td></tr></table></figure></li><li><p><code>exec</code>：形式：<code>int exec(char *file, char *argv[])</code>。加载一个文件，获取执行它的参数，执行。如果执行错误返回-1，执行成功则不会返回，而是开始从文件入口位置开始执行命令。文件必须是ELF格式。</p></li></ul><p>首先线编译xv6内核和所有用户进程，运行在QEMU模拟器下</p><p><img src="https://s2.loli.net/2022/07/14/rtdiRbmwqSLZ1n6.png" alt=""></p><p>xv6仿照UNIX上Shell的命令行接口，例如我们运行ls</p><p><img src="https://s2.loli.net/2022/07/14/TILepjgE79inBAZ.png" alt=""></p><h3 id="fork"><a class="markdownIt-Anchor" href="#fork"></a> fork</h3><p>fork会创建一个新的进程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"kernel/types.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"user/user.h"</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">int</span> pid;</span><br><span class="line">    pir = fork();</span><br><span class="line">    <span class="comment">//调用fork，fork会拷贝当前进程的内存，并创建一个新的进程，这里的进程包含了进程的指令和数据，之后我们拥有了两个完全相同的进程，fork系统调用在这两个进程中都会返回，原始的进程中会返回大于0的整数，这是新进程的ID，新进程中会返回0，我们可以通过fork返回值来区分新旧进程</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"fork() returned %d\n"</span>,pid);</span><br><span class="line">    <span class="keyword">if</span>(pid == <span class="number">0</span>){</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"child\n"</span>;)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span>{</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"parent\n"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="exec-wait"><a class="markdownIt-Anchor" href="#exec-wait"></a> exec wait</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"kernel/types.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"user/user.h"</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">char</span> *argv[] = {<span class="string">"echo"</span>,<span class="string">"this"</span>,<span class="string">"is"</span>,<span class="string">"echo"</span>,<span class="number">0</span>};</span><br><span class="line">    exec(<span class="string">"echo"</span>,argv);</span><br><span class="line">    <span class="comment">//执行exec系统调用，这个系统调用会从指定文件读取并加载指令，替代当前调用进程的指令</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"exec failed!\n"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//只能看到”this is echo 的输出，原本的进程已经不复存在了</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"user/user.h"</span></span></span><br><span class="line"><span class="comment">//forkexec.c: fork then exec</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">int</span> pid, status;</span><br><span class="line">    pid = fork();</span><br><span class="line">    <span class="comment">//调用fork，子进程开始执行，调用exec，子进程用echo代替自己，完成后退出，</span></span><br><span class="line">    <span class="comment">//父进程获取控制，会返回大于0的pid，执行else中的语句</span></span><br><span class="line">    <span class="keyword">if</span>(pid == <span class="number">0</span>){</span><br><span class="line">        <span class="type">char</span> *argv[] = {<span class="string">"echo"</span>,<span class="string">"THIS"</span>,<span class="string">"IS"</span>,<span class="string">"EHCO"</span>,<span class="number">0</span>};</span><br><span class="line">        exec(<span class="string">"echo"</span>,argv);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"exec failed!\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"parent waiting\n"</span>);</span><br><span class="line">        wait(&amp;status);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"the child exited with status %d\n"</span>,status);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);             </span><br><span class="line">}</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/14/kztdwNKRV2lpfMx.png" alt=""></p><blockquote><p>这里需要优化，比如可以copy-on-write fork，消除fork的浪费，涉及到虚拟内存的技巧，对内存进行lazy-copy</p></blockquote><h1 id="io-and-file-desciptors"><a class="markdownIt-Anchor" href="#io-and-file-desciptors"></a> I/O and File desciptors</h1><ul><li><p><em>file descriptor</em>：文件描述符，用来表示一个被内核管理的、可以被进程读/写的对象的一个整数，表现形式类似于字节流，通过打开文件、目录、设备等方式获得。一个文件被打开得越早，文件描述符就越小。</p><p>每个进程都拥有自己独立的文件描述符列表，其中0是标准输入，1是标准输出，2是标准错误。shell将保证总是有3个文件描述符是可用的</p></li><li><p><code>read</code>和<code>write</code>：形式<code>int write(int fd, char *buf, int n)</code>和<code>int read(int fd, char *bf, int n)</code>。从/向文件描述符<code>fd</code>读/写n字节<code>bf</code>的内容，返回值是成功读取/写入的字节数。每个文件描述符有一个offset，<code>read</code>会从这个offset开始读取内容，读完n个字节之后将这个offset后移n个字节，下一个<code>read</code>将从新的offset开始读取字节。<code>write</code>也有类似的offset</p></li><li><p><code>close</code>。形式是<code>int close(int fd)</code>，将打开的文件<code>fd</code>释放，使该文件描述符可以被后面的<code>open</code>、<code>pipe</code>等其他system call使用</p></li><li><p><code>dup</code>。形式是<code>int dup(int fd)</code>，复制一个新的<code>fd</code>指向的I/O对象，返回这个新fd值，两个I/O对象(文件)的offset相同</p></li></ul><h3 id="readwriteexit"><a class="markdownIt-Anchor" href="#readwriteexit"></a> read,write,exit</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//copy.c: copy input to output</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"kernel/types.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"user/user.h"</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>){</span><br><span class="line">        <span class="type">int</span> n = read(<span class="number">0</span>,buf,<span class="keyword">sizeof</span>(buf));</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        write(<span class="number">1</span>,buf,n);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>观察read调用</p><ul><li>第一个参数是文件描述符，指向一个之前打开的文件。Shell会确保默认情况下，当一个程序启动时，文件描述符0连接到console的输入，文件描述符1连接到了console的输出。所以我可以通过这个程序看到console打印我的输入。当然，这里的程序会预期文件描述符已经被Shell打开并设置好。这里的0，1文件描述符是非常普遍的Unix风格，许多的Unix系统都会从文件描述符0读取数据，然后向文件描述符1写入数据</li><li>read的第二个参数是指向某段内存的指针，程序可以通过指针对应的地址读取内存中的数据，这里的指针就是代码中的buf参数。在代码第10行，程序在栈里面申请了64字节的内存，并将指针保存在buf中，这样read可以将数据保存在这64字节中</li><li>read的第三个参数是代码想读取的最大长度，sizeof(buf)表示，最多读取64字节的数据，所以这里的read最多只能从连接到文件描述符0的设备，也就是console中，读取64字节的数据</li></ul><h3 id="open"><a class="markdownIt-Anchor" href="#open"></a> open</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//open.c: create a file, write to it</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"kernel/types.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"user/user.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"kernel/fcntl.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">"output.txt"</span>,O_WRONLY | <span class="number">0</span>_CREATE);</span><br><span class="line">    <span class="comment">//此处执行了open的系统调用，将文件名作为参数传入，第二个参数是一些标志位</span></span><br><span class="line">    write(fd,<span class="string">"ooo\n"</span>,<span class="number">4</span>);</span><br><span class="line">    <span class="comment">//第二个参数是数据的指针，第三个参数是要写入的字节数</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>该程序会创建一个叫做<code>output.txt</code>的文件，并写入一些数据</p><h3 id="io-redirect"><a class="markdownIt-Anchor" href="#io-redirect"></a> I/O Redirect</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//redirect.c: run a command with output redirected</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">int</span> pid;</span><br><span class="line">    pid = fork();</span><br><span class="line">    <span class="comment">//这里先fork，再更改子进程的文件描述符，是Unix中的常见的用来重定向指令的输入输出的方法，这种方法同时又不会影响父进程的输入输出</span></span><br><span class="line">    <span class="keyword">if</span>(pid == <span class="number">0</span>){</span><br><span class="line">        close(<span class="number">1</span>);</span><br><span class="line">        open(<span class="string">"output.txt"</span>,<span class="number">0</span>_WRONLY|<span class="number">0</span>_CREATE);</span><br><span class="line">        </span><br><span class="line">        claer *argv[] = {<span class="string">"echo"</span>,<span class="string">"this"</span>,<span class="string">"is"</span>,<span class="string">"redirected"</span>,<span class="string">"echo"</span>,<span class="number">0</span>};</span><br><span class="line">        exec(<span class="string">"echo"</span>,argv);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"exec failed!\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span>{</span><br><span class="line">        wait((<span class="type">int</span> *) <span class="number">0</span> );</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h1 id="pipes"><a class="markdownIt-Anchor" href="#pipes"></a> Pipes</h1><ul><li><em>pipe</em>：管道，暴露给进程的一对文件描述符，一个文件描述符用来读，另一个文件描述符用来写，将数据从管道的一端写入，将使其能够被从管道的另一端读出</li></ul><p><code>pipe</code>是一个system call，形式为<code>int pipe(int p[])</code>，<code>p[0]</code>为读取的文件描述符，<code>p[1]</code>为写入的文件描述符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* run the program wc with stdin connected to the read end of pipe, parent process able to communicate with child process */</span></span><br><span class="line"><span class="type">int</span> p[<span class="number">2</span>];</span><br><span class="line"><span class="type">char</span> *argv[<span class="number">2</span>];</span><br><span class="line">  </span><br><span class="line">argv[<span class="number">0</span>] = <span class="string">"wc"</span>;</span><br><span class="line">argv[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">pipe(p); <span class="comment">// read fd put into p[0], write fd put into p[1]</span></span><br><span class="line"><span class="keyword">if</span> (fork() == <span class="number">0</span>) {</span><br><span class="line">    close(<span class="number">0</span>);</span><br><span class="line">    dup(p[<span class="number">0</span>]); <span class="comment">// make the fd 0 refer to the read end of pipe</span></span><br><span class="line">    close(p[<span class="number">0</span>]); <span class="comment">// original read end of pipe is closed</span></span><br><span class="line">    close(p[<span class="number">1</span>]); <span class="comment">// fd p[1] is closed in child process, but not closed in the parent process. 注意这里关闭p[1]非常重要，因为如果不关闭p[1]，管道的读取端会一直等待读取，wc就永远也无法等到EOF</span></span><br><span class="line">    exec(<span class="string">"/bin/wc"</span>, argv); <span class="comment">// by default wc will take fd 0 as the input, which is the read end of pipe in this case</span></span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    close(p[<span class="number">0</span>]); <span class="comment">// close the read end of pipe in parent process will not affect child process</span></span><br><span class="line">    write(p[<span class="number">1</span>], <span class="string">"hello world\n"</span>, <span class="number">12</span>); </span><br><span class="line">    close(p[<span class="number">1</span>]); <span class="comment">// write end of pipe closed, the pipe shuts down</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>xv6中的实现和上述的类似</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> PIPE:</span><br><span class="line">pcmd = (<span class="keyword">struct</span> pipecmd*)cmd;</span><br><span class="line"><span class="keyword">if</span>(pipe(p) &lt; <span class="number">0</span>)</span><br><span class="line">    panic(<span class="string">"pipe"</span>);</span><br><span class="line"><span class="keyword">if</span>(fork1() == <span class="number">0</span>){</span><br><span class="line">    <span class="comment">// in child process</span></span><br><span class="line">    close(<span class="number">1</span>); <span class="comment">// close stdout</span></span><br><span class="line">    dup(p[<span class="number">1</span>]); <span class="comment">// make the fd 1 as the write end of pipe</span></span><br><span class="line">    close(p[<span class="number">0</span>]);</span><br><span class="line">    close(p[<span class="number">1</span>]);</span><br><span class="line">    runcmd(pcmd-&gt;left); <span class="comment">// run command in the left side of pipe |, output redirected to the write end of pipe</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(fork1() == <span class="number">0</span>){</span><br><span class="line">    <span class="comment">// in child process</span></span><br><span class="line">    close(<span class="number">0</span>); <span class="comment">// close stdin</span></span><br><span class="line">    dup(p[<span class="number">0</span>]); <span class="comment">// make the fd 0 as the read end of pipe</span></span><br><span class="line">    close(p[<span class="number">0</span>]);</span><br><span class="line">    close(p[<span class="number">1</span>]);</span><br><span class="line">    runcmd(pcmd-&gt;right); <span class="comment">//  run command in the right side of pipe |, input redirected to the read end of pipe</span></span><br><span class="line">}</span><br><span class="line">close(p[<span class="number">0</span>]);</span><br><span class="line">close(p[<span class="number">1</span>]);</span><br><span class="line">wait(<span class="number">0</span>); <span class="comment">// wait for child process to finish</span></span><br><span class="line">wait(<span class="number">0</span>); <span class="comment">// wait for child process to finish</span></span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h1 id="file-system"><a class="markdownIt-Anchor" href="#file-system"></a> File system</h1><ul><li><code>mknod</code>：创建设备文件，一个设备文件有一个major device #和一个minor device #用来唯一确定这个设备。当一个进程打开了这个设备文件时，内核会将<code>read</code>和<code>write</code>的system call重新定向到设备上。</li><li>一个文件的名称和文件本身是不一样的，文件本身，也叫<em>inode</em>，可以有多个名字，也叫<em>link</em>，每个link包括了一个文件名和一个对inode的引用。一个inode存储了文件的元数据，包括该文件的类型(file, directory or device)、大小、文件在硬盘中的存储位置以及指向这个inode的link的个数</li><li><code>fstat</code>。一个system call，形式为<code>int fstat(int fd, struct stat *st)</code>，将inode中的相关信息存储到<code>st</code>中。</li><li><code>link</code>。一个system call，将创建一个指向同一个inode的文件名。<code>unlink</code>则是将一个文件名从文件系统中移除，只有当指向这个inode的文件名的数量为0时这个inode以及其存储的文件内容才会被从硬盘上移除</li></ul><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1><p><a href="https://mit-public-courses-cn-translatio.gitbook.io/mit6-s081/">MIT6.S081 课程翻译文档</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;lecture-1-intoduction-and-examples&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#lecture-1-intoduction-and-examples&quot;&gt;&lt;/a&gt; Lecture 1 Intoducti</summary>
      
    
    
    
    <category term="操作系统" scheme="http://little-hurui.cloud/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Mit6.S081" scheme="http://little-hurui.cloud/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Mit6-S081/"/>
    
    <category term="Lecture" scheme="http://little-hurui.cloud/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Mit6-S081/Lecture/"/>
    
    
    <category term="Mit6.S081" scheme="http://little-hurui.cloud/tags/Mit6-S081/"/>
    
    <category term="操作系统" scheme="http://little-hurui.cloud/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>解析class文件</title>
    <link href="http://little-hurui.cloud/2022/07/07/%E8%A7%A3%E6%9E%90class%E6%96%87%E4%BB%B6/"/>
    <id>http://little-hurui.cloud/2022/07/07/%E8%A7%A3%E6%9E%90class%E6%96%87%E4%BB%B6/</id>
    <published>2022-07-06T16:07:47.000Z</published>
    <updated>2022-07-06T22:41:43.022Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解析class文件"><a class="markdownIt-Anchor" href="#解析class文件"></a> 解析class文件</h1><h2 id="class文件"><a class="markdownIt-Anchor" href="#class文件"></a> class文件</h2><p>由前面可知，虚拟机可以实现从文件系统读取和从JAR（或者ZIP）压缩包种读取class文件，除此之外，还可以从网络，从数据库，或者在运行中生成class文件（并非特指.class文件，而是符合Java规范的数据）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;解析class文件&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#解析class文件&quot;&gt;&lt;/a&gt; 解析class文件&lt;/h1&gt;
&lt;h2 id=&quot;class文件&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#c</summary>
      
    
    
    
    <category term="Java" scheme="http://little-hurui.cloud/categories/Java/"/>
    
    <category term="Java虚拟机" scheme="http://little-hurui.cloud/categories/Java/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
    <category term="Java虚拟机" scheme="http://little-hurui.cloud/tags/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>面经</title>
    <link href="http://little-hurui.cloud/2022/07/04/%E9%9D%A2%E7%BB%8F/"/>
    <id>http://little-hurui.cloud/2022/07/04/%E9%9D%A2%E7%BB%8F/</id>
    <published>2022-07-04T14:26:52.000Z</published>
    <updated>2022-07-04T14:29:25.221Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字节测开-一面"><a class="markdownIt-Anchor" href="#字节测开-一面"></a> 字节测开 一面</h1><ol><li>说说OSI七层模型</li><li>说说应用层有哪些协议</li><li>说说<strong>http状态码</strong></li><li>说说<strong>输入url之后的过程</strong></li><li>数据库了解吗，<strong>索引的用处是什么</strong></li><li>写一道<strong>SQL</strong></li><li>tcp的三次握手，<strong>为什么需要第三次</strong></li><li>一道<a href="">算法题</a></li><li>设计微信动态的测试用例</li><li>视屏黑屏可能的问题</li><li><strong>数组和链表的区别</strong></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;字节测开-一面&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#字节测开-一面&quot;&gt;&lt;/a&gt; 字节测开 一面&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;说说OSI七层模型&lt;/li&gt;
&lt;li&gt;说说应用层有哪些协议&lt;/li&gt;
&lt;li&gt;说说&lt;strong&gt;ht</summary>
      
    
    
    
    <category term="实习" scheme="http://little-hurui.cloud/categories/%E5%AE%9E%E4%B9%A0/"/>
    
    
    <category term="面经" scheme="http://little-hurui.cloud/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>搜索class文件</title>
    <link href="http://little-hurui.cloud/2022/07/04/%E6%90%9C%E7%B4%A2class%E6%96%87%E4%BB%B6/"/>
    <id>http://little-hurui.cloud/2022/07/04/%E6%90%9C%E7%B4%A2class%E6%96%87%E4%BB%B6/</id>
    <published>2022-07-04T13:10:24.000Z</published>
    <updated>2022-07-10T14:24:05.515Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搜索class文件"><a class="markdownIt-Anchor" href="#搜索class文件"></a> 搜索class文件</h1><p><strong>Java命令启动Java应用程序的流程：</strong></p><ol><li>启动Java虚拟机</li><li>加载主类</li><li>调用主类的main（）方法</li></ol><p>​但是，即使是一个最简单的 <code>helloworld</code> ，加载之前需要加载他的超类<code>Java.lang.Object</code> ，在调用<code>main()</code>方法之前，虚拟机需要准备好参数数组，所以也需要加载 <code>java.lang.Stirng</code> 和 <code>java.lang.String[]</code>类，将字符串打印还需要<code>java.lang.System</code>类，等等等等，所以我们需要直到 Java虚拟机从哪里寻找这些类。</p><h2 id="类路径"><a class="markdownIt-Anchor" href="#类路径"></a> 类路径</h2><blockquote><p>不同的虚拟机可以采用不同的类搜索方法,Oracle的Java虚拟机根据 class path来搜索类</p></blockquote><p>类路径分为</p><ol><li>启动类路径 bootstrap classpath</li><li>扩展类路径 extension classpath</li><li>用户类路径  user classpath</li></ol><p>值得一提的是，可以给java命令传递<code>-classpath/-cp</code>来指定用户类路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java -cp path\to\classes ...</span><br><span class="line">java -cp path\to\classes;lib\a.jar;lib\b.jar;lib\c.zip...</span><br><span class="line">java -cp classes;lib\*...</span><br></pre></td></tr></table></figure><h2 id="实现类路径"><a class="markdownIt-Anchor" href="#实现类路径"></a> 实现类路径</h2><p>我们采用组合模式来实现类路径（composite pattern)</p><h3 id="entry接口"><a class="markdownIt-Anchor" href="#entry接口"></a> Entry接口</h3><p>四种实现 <code>DirEntry</code>  <code>ZipEntry</code> <code>CompositeEntry</code> <code>WildcardEntry</code></p><h4 id="direntry"><a class="markdownIt-Anchor" href="#direntry"></a> DirEntry</h4><p>表示目录形式的类路径</p><h4 id="zipentry"><a class="markdownIt-Anchor" href="#zipentry"></a> ZipEntry</h4><p>表示ZIP或JAR文件形式的类路径</p><h4 id="compositeentry"><a class="markdownIt-Anchor" href="#compositeentry"></a> CompositeEntry</h4><p>由更小的Entry组成，表示成[]Entry</p><h4 id="wildcardentry"><a class="markdownIt-Anchor" href="#wildcardentry"></a> WildcardEntry</h4><p>实际上也是CompositeEntry，含通配符的类路径</p><h2 id="classpath结构体"><a class="markdownIt-Anchor" href="#classpath结构体"></a> classpath结构体</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Classpath <span class="keyword">struct</span>{</span><br><span class="line">bootClasspath Entry</span><br><span class="line">extClasspath  Entry</span><br><span class="line">userClasspath Entry</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">-Xjre选项解析启动类路径和拓展类路径</span><br><span class="line">-classpath选项解析用户类路径</span><br></pre></td></tr></table></figure><p>成功编译之后，执行.exe文件，就可以输出class文件的字节码了！</p><p><img src="https://s2.loli.net/2022/07/07/MlKsnFuymb2Nw4Z.png" alt="输出结果 "></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;搜索class文件&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#搜索class文件&quot;&gt;&lt;/a&gt; 搜索class文件&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Java命令启动Java应用程序的流程：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="Java" scheme="http://little-hurui.cloud/categories/Java/"/>
    
    <category term="Java虚拟机" scheme="http://little-hurui.cloud/categories/Java/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
    <category term="Java虚拟机" scheme="http://little-hurui.cloud/tags/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>命令行工具</title>
    <link href="http://little-hurui.cloud/2022/07/04/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/"/>
    <id>http://little-hurui.cloud/2022/07/04/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</id>
    <published>2022-07-04T12:40:52.000Z</published>
    <updated>2022-07-04T12:52:26.275Z</updated>
    
    <content type="html"><![CDATA[<h1 id="命令行工具"><a class="markdownIt-Anchor" href="#命令行工具"></a> 命令行工具</h1><h2 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h2><ol><li>安装JDK</li><li>安装Golang</li><li>配置Go环境</li></ol><h2 id="java-命令"><a class="markdownIt-Anchor" href="#java-命令"></a> Java 命令</h2><p>Java 命令有如下四种形式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java [-options] class [args]</span><br><span class="line">java [-options] -jar jarfile [args]</span><br><span class="line">javaw [-options] class [args]</span><br><span class="line">javaw [-options] -jar jarfile [args]</span><br><span class="line">//即   [选项]  [主类名/JAR文件名] [main方法参数]</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td style="text-align:center">-version</td><td style="text-align:center">版本信息</td></tr><tr><td style="text-align:center">-？/-help</td><td style="text-align:center">输出帮助信息</td></tr><tr><td style="text-align:center">-cp/-classpath</td><td style="text-align:center">指定用户类路径</td></tr><tr><td style="text-align:center">-Dproperty=value</td><td style="text-align:center">设置Java系统属性</td></tr><tr><td style="text-align:center">-Xms<size></size></td><td style="text-align:center">设置初始堆大小</td></tr><tr><td style="text-align:center">-Xmx<size></size></td><td style="text-align:center">设置最大堆大小</td></tr><tr><td style="text-align:center">-Xss<size></size></td><td style="text-align:center">设置线程栈空间大小</td></tr></tbody></table><h2 id="编写命令行工具"><a class="markdownIt-Anchor" href="#编写命令行工具"></a> 编写命令行工具</h2><p>在 Go/src/jvmgo/ch01 下创建如下两个go文件</p><blockquote><p>cmd.go</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"flag"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span> </span><br><span class="line"><span class="keyword">import</span> <span class="string">"os"</span></span><br><span class="line"><span class="comment">//包名</span></span><br><span class="line"><span class="comment">//os的Args变量用于存放传递给命令行的全部参数,flag包是帮助处理命令行选项的</span></span><br><span class="line"><span class="keyword">type</span> Cmd <span class="keyword">struct</span> {</span><br><span class="line">helpFlag        <span class="type">bool</span> <span class="comment">// -help</span></span><br><span class="line">versionFlag<span class="type">bool</span> <span class="comment">//版本信息</span></span><br><span class="line">cpOption<span class="type">string</span> <span class="comment">//是否 -cp</span></span><br><span class="line">class<span class="type">string</span> <span class="comment">//是否包含类</span></span><br><span class="line">args[]<span class="type">string</span> </span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">parseCmd</span><span class="params">()</span></span> *Cmd{</span><br><span class="line">cmd := &amp;Cmd{}</span><br><span class="line">flag.Usage = printUsage</span><br><span class="line"><span class="comment">//设置flag.Usage变量 蒋printUsage函数赋值给它，调用flag的各种Var()函数来解析各种选项</span></span><br><span class="line"></span><br><span class="line">flag.BoolVar(&amp;cmd.helpFlag,<span class="string">"help"</span>,<span class="literal">false</span>,<span class="string">"print help message"</span>)</span><br><span class="line">flag.BoolVar(&amp;cmd.helpFlag, <span class="string">"?"</span>,<span class="literal">false</span>,<span class="string">"print help message"</span>)</span><br><span class="line">flag.BoolVar(&amp;cmd.versionFlag,<span class="string">"version"</span>,<span class="literal">false</span>,<span class="string">"print version and exit"</span>)</span><br><span class="line">flag.StringVar(&amp;cmd.cpOption, <span class="string">"classpath"</span>, <span class="string">""</span>, <span class="string">"classpath"</span>)</span><br><span class="line">flag.StringVar(&amp;cmd.cpOption, <span class="string">"cp"</span>, <span class="string">""</span>,<span class="string">"classpath"</span>)</span><br><span class="line">flag.Parse()</span><br><span class="line"></span><br><span class="line">args := flag.Args ()</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(args) &gt; <span class="number">0</span>{</span><br><span class="line">cmd.class = args[<span class="number">0</span>]</span><br><span class="line">cmd.args = args[<span class="number">1</span>:]</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> cmd</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printUsage</span><span class="params">()</span></span> {</span><br><span class="line">fmt.Printf(<span class="string">"Usage:%s [-options] class [args...]\n"</span>,os.Args[<span class="number">0</span>])</span><br><span class="line">}</span><br></pre></td></tr></table></figure><blockquote><p>main.go</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">cmd := parseCmd()</span><br><span class="line"><span class="keyword">if</span> cmd.versionFlag {</span><br><span class="line"><span class="comment">//如果输入了版本</span></span><br><span class="line">fmt.Println(<span class="string">"version 0.0.1"</span>)</span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span> cmd.helpFlag || cmd.class == <span class="string">""</span>{</span><br><span class="line"><span class="comment">//解析错误或者输入了 -help</span></span><br><span class="line">printUsage()</span><br><span class="line">}<span class="keyword">else</span> {</span><br><span class="line"><span class="comment">//正常启动</span></span><br><span class="line">startJVM(cmd)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">startJVM</span><span class="params">(cmd *Cmd)</span></span> {</span><br><span class="line">fmt.Printf(<span class="string">"classpath:%s class:%s args:%v\n"</span>,cmd.cpOption,cmd.class,cmd.args)</span><br><span class="line"><span class="comment">//暂时只是打印信息</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="测试命令行工具"><a class="markdownIt-Anchor" href="#测试命令行工具"></a> 测试命令行工具</h2><p>打开powershell</p><p>输入</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> install jvmgo\ch01</span><br></pre></td></tr></table></figure><p>此时，在bin目录下会出现一个ch01.exe</p><p><img src="https://s2.loli.net/2022/07/04/bceINzBjUpg7W2y.png" alt=""></p><p>至此，我们完成了一个简易的命令行工具</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;命令行工具&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#命令行工具&quot;&gt;&lt;/a&gt; 命令行工具&lt;/h1&gt;
&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#准备工作&quot;&gt;&lt;/a&gt; 准备工作&lt;</summary>
      
    
    
    
    <category term="Java" scheme="http://little-hurui.cloud/categories/Java/"/>
    
    <category term="Java虚拟机" scheme="http://little-hurui.cloud/categories/Java/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
    <category term="Java虚拟机" scheme="http://little-hurui.cloud/tags/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>算法基础</title>
    <link href="http://little-hurui.cloud/2022/06/28/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    <id>http://little-hurui.cloud/2022/06/28/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/</id>
    <published>2022-06-28T11:09:40.000Z</published>
    <updated>2022-07-10T11:46:57.122Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法基础"><a class="markdownIt-Anchor" href="#算法基础"></a> 算法基础</h1><p>插入排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INSERTION-SORT(A)</span><br><span class="line">for j = 2 to A.length</span><br><span class="line">key = A[j]</span><br><span class="line">//Insert A[j] into the sorted sequence A[1,...j-1]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;算法基础&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#算法基础&quot;&gt;&lt;/a&gt; 算法基础&lt;/h1&gt;
&lt;p&gt;插入排序&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=</summary>
      
    
    
    
    <category term="黑皮书" scheme="http://little-hurui.cloud/categories/%E9%BB%91%E7%9A%AE%E4%B9%A6/"/>
    
    <category term="算法导论" scheme="http://little-hurui.cloud/categories/%E9%BB%91%E7%9A%AE%E4%B9%A6/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/"/>
    
    
    <category term="算法导论" scheme="http://little-hurui.cloud/tags/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/"/>
    
    <category term="算法基础" scheme="http://little-hurui.cloud/tags/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>数据管理基础复习</title>
    <link href="http://little-hurui.cloud/2022/06/19/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/"/>
    <id>http://little-hurui.cloud/2022/06/19/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/</id>
    <published>2022-06-19T08:58:31.000Z</published>
    <updated>2022-06-28T11:06:28.120Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章"><a class="markdownIt-Anchor" href="#第一章"></a> 第一章</h1><h2 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h2><ul><li>数据库定义<ul><li>Database，是长期储存在计算机内、有组织的、可共享的大量数据的集合</li></ul></li><li>数据库基本特征<ul><li>数据按一定的数据模型组织、描述和储存</li><li>可为各种用户共享</li><li>冗余度较小</li><li>数据独立性较高</li><li>易拓展</li></ul></li></ul><p><strong>数据库管理系统</strong></p><p>DataBase Management System， 简称DBMS</p><p><strong>数据库系统</strong></p><p>DataBase System，简称DBS</p><p>构成</p><ul><li>数据库</li><li>DBMS</li><li>应用程序</li><li>DBA，数据库管理员</li></ul><p><img src="https://s2.loli.net/2022/06/19/1LdtXwRUpN6ISJQ.png" alt=""></p><p><strong>比较</strong></p><p>采用文件系统和数据库系统实现学籍管理的区别</p><p>文件系统，工作量大，编程复杂，开发速度慢</p><p>数据库系统提供了强大的操作，开发效率大大提高</p><p><strong>与人工管理，文件系统相比，数据库系统的特点</strong></p><ul><li>数据结构化（本质区别)</li><li>数据共享性高，冗余度低且易扩充</li><li>数据独立性高</li></ul><p><strong>实体-联系方法</strong>：E-R图</p><p><strong>数据库模型</strong></p><ul><li>层次，网状，<strong>关系模型</strong>，等</li></ul><h3 id="关系模型的数据结构"><a class="markdownIt-Anchor" href="#关系模型的数据结构"></a> 关系模型的数据结构</h3><ul><li>关系（relation）：一个关系通常是一张表</li><li>元组（tuple）：表中的一行为一个元组</li><li>属性（attribute）：表中的一列为一个属性</li><li>码（key）：表中的某个属性组，可以唯一确定一个元组</li><li>域（domain）：一组具有相同数据类型的值得集合，属性的取值范围来自某个域<ul><li>人的年龄在1-120，大学生年龄的域（15-45）</li></ul></li><li>分量：元组中的一个属性值</li><li>关系模式：对关系的描述<ul><li>例如，学生（学号，姓名，年龄，性别，系名，年级）</li></ul></li></ul><p>关系模型要求关系必须是规范化的，关系的每一个分量必须是一个不可分的数据项</p><h3 id="关系模型的数据操纵和完整性约束"><a class="markdownIt-Anchor" href="#关系模型的数据操纵和完整性约束"></a> 关系模型的数据操纵和完整性约束</h3><ul><li>数据操纵：查询，插入，删除，更新数据<ul><li>这些操作必须满足完整性约束</li></ul></li><li>完整性约束条件<ul><li>实体完整性</li><li>参照完整性</li><li>用户定义的完整性</li></ul></li></ul><h2 id="数据库系统的结构"><a class="markdownIt-Anchor" href="#数据库系统的结构"></a> 数据库系统的结构</h2><p>型：（学号，姓名，性别）</p><p>值：（201251212，小明，男）</p><p>模式：仅涉及型的描述，模式的一个具体值称为模式的一个实例（instance）</p><ul><li>通常采用三级模式结构，并提供两级映像功能</li></ul><h3 id="三层模式结构"><a class="markdownIt-Anchor" href="#三层模式结构"></a> 三层模式结构</h3><p>外模式、模式、内模式</p><p><img src="https://s2.loli.net/2022/06/19/LXr1Hsmo6V472W5.png" alt=""></p><p><strong>外模式</strong></p><p>也称子模式，用户模式</p><ul><li>数据库用户（包括应用程序员和最终用户）使用的局部数据的逻辑结构和特征的描述</li><li>数据库用户的数据视图，是与某一应用有关的数据的逻辑表示</li></ul><p><strong>模式</strong></p><ul><li><p>也称逻辑模式</p><ul><li>数据库中全体数据的逻辑结构和特征的描述</li><li>所有用户的公共数据视图</li></ul></li><li><p>一个数据库只有一个模式</p></li><li><p>模式的地位：是数据库系统模式结构的中间层</p></li></ul><p><strong>内模式</strong></p><p>也称存储模式</p><ul><li>是数据在数据库内部的表示方式<ul><li>记录的存储方式（例如，顺序存储，堆存储，hash存储等）</li><li>索引的组织方式</li><li>数据是否压缩存储</li><li>数据是否加密</li><li>数据存储记录结构的规定</li></ul></li><li>一个数据库只有一个内模式</li></ul><p>二级映像</p><ol><li>外模式/模式  映像 -&gt; 数据逻辑独立性</li><li>模式/内模式  映像 -&gt; 数据物理独立性</li></ol><h2 id="数据库系统的组成"><a class="markdownIt-Anchor" href="#数据库系统的组成"></a> 数据库系统的组成</h2><p><img src="https://s2.loli.net/2022/06/19/vNtLcE65d7I2a1D.png" alt=""></p><h2 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h2><p>本章主要介绍一些概念，包括数据模型，数据库管理系统，数据库系统。</p><p><strong>Q：举出适合用文件系统而不是数据库系统的例子，以及适合数据库系统的例子</strong></p><p><strong>A：</strong></p><p><strong>Q：叙述数据库三层模式结构，说明优点</strong></p><p><strong>A：</strong></p><h1 id="第二章-关系数据库"><a class="markdownIt-Anchor" href="#第二章-关系数据库"></a> 第二章 关系数据库</h1><h3 id="关系"><a class="markdownIt-Anchor" href="#关系"></a> 关系</h3><p>关系模型的数据结构非常简单，只包含单一的数据结构—关系，</p><p><strong>笛卡尔积</strong></p><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="92.576ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 40918.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">给</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">定</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">一</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">组</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">域</text></g><g data-mml-node="msub" transform="translate(5000,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mn" transform="translate(861,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(6264.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(6709.2,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mn" transform="translate(861,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(7973.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(8418.4,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="msub" transform="translate(9757.1,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mi" transform="translate(861,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(11092.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(11537,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">笛</text></g><g data-mml-node="mi" transform="translate(12537,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">卡</text></g><g data-mml-node="mi" transform="translate(13537,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">尔</text></g><g data-mml-node="mi" transform="translate(14537,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">积</text></g><g data-mml-node="mi" transform="translate(15537,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">为</text></g><g data-mml-node="msub" transform="translate(16537,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="TeXAtom" transform="translate(861,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(18023.8,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msub" transform="translate(19024,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mn" transform="translate(861,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(20510.8,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mo" transform="translate(21511,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="msub" transform="translate(22849.7,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mi" transform="translate(861,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(24462.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(25518.5,0)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(389,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mn" transform="translate(553,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1345.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1790.2,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mn" transform="translate(553,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2746.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(3191.4,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="msub" transform="translate(4530.1,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(553,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(5557.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5946.4,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="msub" transform="translate(6224.4,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(553,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(7349.1,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="msub" transform="translate(8293.9,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mi" transform="translate(861,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(9448.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(9893.5,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(10516.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(11572.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(12072.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(12516.7,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(13016.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(13461.4,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mi" transform="translate(14800.1,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></p><p><strong>元组</strong></p><p>笛卡尔积中每一个元素<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><msub><mi>d</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>d</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>d</mi><mi>n</mi></msub><mo>)</mo></mrow><annotation encoding="application/x-tex">(d_1,d_2,...d_n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">(</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mpunct">,</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mpunct">,</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">n</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span>称为n元组</p><p><strong>分量</strong></p><p>每一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">d_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>称为分量</p><p>笛卡尔积可以表示为一张二维表</p><p><strong>关系</strong></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>D</mi><mn>1</mn></msub><mo>×</mo><msub><mi>D</mi><mn>2</mn></msub><mo>×</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>D</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">D_1 \times D_2 \times ... D_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.02778em;">D</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.02778em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">×</span><span class="mord"><span class="mord mathit" style="margin-right:0.02778em;">D</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.02778em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">×</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord"><span class="mord mathit" style="margin-right:0.02778em;">D</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.02778em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">n</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>的子集叫做在域<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>D</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>D</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>D</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">D_1,D_2,...D_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.02778em;">D</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.02778em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mpunct">,</span><span class="mord"><span class="mord mathit" style="margin-right:0.02778em;">D</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.02778em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mpunct">,</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord"><span class="mord mathit" style="margin-right:0.02778em;">D</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.02778em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">n</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>上的关系，表示为</p><p>R（D_1,D_2,...D_n）,称为R关系，度为n</p><p><strong>码</strong></p><ul><li>候选码（Candidate key）<ul><li>关系中的一组属性组 的值能唯一标识某一个元组，则称该属性组为候选码</li><li>最极端的情况—全码</li></ul></li><li>主码<ul><li>多个候选码中选一个作为主码</li></ul></li><li>主属性<ul><li>候选码的属性称为主属性</li></ul></li><li>外码<ul><li>设F为R的一组属性，但不是R的码，如果F与基本关系S的主码<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>K</mi><mi>s</mi></msub></mrow><annotation encoding="application/x-tex">K_s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.07153em;">K</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.07153em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">s</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>对应，则称F是R的外码<ul><li>R称为参照关系</li><li>S称为被参照关系/目标关系</li></ul></li></ul></li></ul><p>一般来说，笛卡尔积是没有意义的，只有他的某个真子集才有意义</p><p><img src="https://s2.loli.net/2022/06/19/j5kSOAb3ve7PaQW.png" alt=""></p><p>关系的类别：基本关系，查询表，视图表</p><p><strong>基本关系</strong></p><ul><li>列是同质的，分量来自同一个域</li><li>不同的列可出自一个域</li><li>顺序无所谓</li><li>行顺序无所谓</li><li>分量必须取原子值</li></ul><p>关系模型要求关系必须规范化，最基本的一条是，每一个分量必须是一个不可分的数据项</p><p>规范化简称为<strong>范式（NF）</strong></p><h3 id="关系模式"><a class="markdownIt-Anchor" href="#关系模式"></a> 关系模式</h3><p>关系模式是型 R（U,D,DOM,F）</p><p>关系是值</p><h2 id="关系操作"><a class="markdownIt-Anchor" href="#关系操作"></a> 关系操作</h2><p>查询，插入，删除，修改等</p><p><strong>关系代数</strong></p><h2 id="关系完整性"><a class="markdownIt-Anchor" href="#关系完整性"></a> 关系完整性</h2><ul><li><p>实体完整性</p><p>主属性不能为空</p></li><li><p>参照完整形</p><p>若属性组F是关系R的外码，他与基本关系S的主码<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>K</mi><mi>s</mi></msub></mrow><annotation encoding="application/x-tex">K_s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.07153em;">K</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.07153em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">s</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>相对应，则对于R中每个元组在F上的值必须为：全空/等于S中某个元组的主码</p></li><li><p>用户定义的完整性</p></li></ul><h1 id="第三章-关系数据库标准语言sql"><a class="markdownIt-Anchor" href="#第三章-关系数据库标准语言sql"></a> 第三章 关系数据库标准语言SQL</h1><p>SQL,Structured Query Language，结构化查询语言</p><p>通用的，功能极强的关系数据库语言</p><ul><li>综合统一</li><li>高度非过程化</li><li>面向集合的操作方式</li><li>以同一种语法结构提供两种使用方法</li><li>语言简洁，易学易用</li></ul><p><img src="https://s2.loli.net/2022/06/19/1fZMrwa9klOJt6g.png" alt=""></p><p>核心功能仅九个动词</p><table><thead><tr><th>SQL</th><th>动词</th></tr></thead><tbody><tr><td>数据查询</td><td>SELECT</td></tr><tr><td>数据定义</td><td>CREATE,DROP,ALTER</td></tr><tr><td>数据操纵</td><td>INSERT,UPDATE,DELETE</td></tr><tr><td>数据控制</td><td>GRANT,REVOKE</td></tr></tbody></table><h2 id="学生数据库"><a class="markdownIt-Anchor" href="#学生数据库"></a> 学生数据库</h2><p><strong>Student</strong></p><table><thead><tr><th>学号Sno</th><th>姓名Sname</th><th>性别Ssex</th><th>年龄Sage</th><th>所在系Sdept</th></tr></thead><tbody><tr><td>201215121</td><td>李勇</td><td>男</td><td>20</td><td>CS</td></tr><tr><td>201215122</td><td>刘晨</td><td>女</td><td>19</td><td>CS</td></tr><tr><td>201215123</td><td>王敏</td><td>女</td><td>18</td><td>MA</td></tr><tr><td>201215125</td><td>张立</td><td>男</td><td>19</td><td>IS</td></tr></tbody></table><p><strong>Course</strong></p><table><thead><tr><th>课程号Cno</th><th>课程名Cname</th><th>先行课Cpno</th><th>学分Credit</th></tr></thead><tbody><tr><td>1</td><td>数据库</td><td>5</td><td>4</td></tr><tr><td>2</td><td>数学</td><td></td><td>2</td></tr><tr><td>3</td><td>信息系统</td><td>1</td><td>4</td></tr><tr><td>4</td><td>操作系统</td><td>6</td><td>3</td></tr><tr><td>5</td><td>数据结构</td><td>7</td><td>4</td></tr><tr><td>6</td><td>数据处理</td><td></td><td>2</td></tr><tr><td>7</td><td>PASCAL语言</td><td>6</td><td>4</td></tr></tbody></table><p><strong>SC</strong></p><table><thead><tr><th>学号Sno</th><th>课程号Cno</th><th>成绩Grade</th></tr></thead><tbody><tr><td>201215121</td><td>1</td><td>92</td></tr><tr><td>201215121</td><td>2</td><td>85</td></tr><tr><td>201215121</td><td>3</td><td>88</td></tr><tr><td>201215122</td><td>2</td><td>90</td></tr><tr><td>201215122</td><td>3</td><td>80</td></tr></tbody></table><h2 id="数据定义"><a class="markdownIt-Anchor" href="#数据定义"></a> 数据定义</h2><ul><li>模式定义</li><li>表定义</li><li>视图和索引定义</li></ul><p><img src="https://s2.loli.net/2022/06/19/JcvLbMCtzSsVpFN.png" alt=""></p><p><strong>模式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>为用户WANG定义一个学生课程模式</span><br><span class="line"><span class="keyword">CREATE</span> SCHEMA "S-T" <span class="keyword">AUTHORIZATION</span> WANG</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>为用户ZHANG定义一个TEST模式，并在其中定义一个表TAB1</span><br><span class="line"><span class="keyword">CREATE</span> SCHEMA TEST <span class="keyword">AUTHORIZATION</span> ZHANG</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TAB1(COL1 <span class="type">SMALLINT</span>,</span><br><span class="line">                  COL2 <span class="type">INT</span>,</span><br><span class="line">                  COL3 <span class="type">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">                  COL4 <span class="type">NUMERIC</span>(<span class="number">10</span>,<span class="number">3</span>),</span><br><span class="line">                  COL5 <span class="type">DECIMAL</span>(<span class="number">5</span>,<span class="number">2</span>));</span><br><span class="line">                  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>删除ZHANG模式，同时删除表TAB1</span><br><span class="line"><span class="keyword">DROP</span> SCHEMA ZHANG CASCADE</span><br></pre></td></tr></table></figure><p><strong>表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>创建学生表Student</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Student</span><br><span class="line">(SnCHAR(<span class="number">9</span>) <span class="keyword">PRIMARY</span> KEY, <span class="operator">/</span><span class="operator">/</span>列级完整性约束，Sno是主码</span><br><span class="line"> Sname <span class="type">CHAR</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span>,<span class="operator">/</span><span class="operator">/</span>Sname取唯一值</span><br><span class="line"> Ssex <span class="type">CHAR</span>(<span class="number">2</span>),</span><br><span class="line"> Sage <span class="type">SMALLINT</span>,</span><br><span class="line"> Sdept <span class="type">CHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>建立课程表Course</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> COURSE</span><br><span class="line">(CnCHAR(<span class="number">4</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> Cname <span class="type">CHAR</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>.<span class="operator">/</span><span class="operator">/</span>列级完整性约束条件，不能为空</span><br><span class="line"> CpnCHAR(<span class="number">4</span>),</span><br><span class="line"> Ccredit <span class="type">SMALLINT</span>,</span><br><span class="line"> <span class="keyword">FOREIGN</span> KEY (Cpno) <span class="keyword">REFERENCES</span> Course(Cno) </span><br><span class="line"> <span class="operator">/</span><span class="operator">/</span>表级完整性约束条件，Cpno是外码，被参照表Course，被参照列Cno</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>数据类型</strong></p><p>CHAR,VARCHAR,CLOB（字符串大对象）,BLOB（二进制大对象）,INT,SMALLINT,BIGINT,NUMERIC等等</p><p><strong>修改基本表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Student <span class="keyword">ADD</span> S_entrance <span class="type">DATE</span> <span class="operator">/</span><span class="operator">/</span>新增一行</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Student <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> Sage <span class="type">INT</span> <span class="operator">/</span><span class="operator">/</span>修改年龄的类型</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Course <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span>(Cname)<span class="operator">/</span><span class="operator">/</span>增加约束条件，必须取唯一值</span><br></pre></td></tr></table></figure><p><strong>删除基本表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> Student CASCADE </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>删除表时没有限制，相关依赖对象例如视图，全都删除</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> Student RESTRICT</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>被删除的表不能被其他表的约束引用，如<span class="keyword">CHECK</span>,<span class="keyword">FOREIGN</span> KEY等约束，不能有视图，不能有触发器，不能有存储过程或函数等</span><br></pre></td></tr></table></figure><p><strong>建立索引</strong></p><p>建立索引是加快查询的有效手段，一个表可以建立多种索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX StusnON Student(Sno)<span class="operator">/</span><span class="operator">/</span>升序建立唯一索引</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX SCnON SC(SnASC,CnDESC)<span class="operator">/</span><span class="operator">/</span>学号升序，课程号降序建立索引</span><br></pre></td></tr></table></figure><p><strong>修改索引</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> INDEX SCnRENAME TSCSno;</span><br></pre></td></tr></table></figure><p><strong>删除索引</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX Stusname;</span><br></pre></td></tr></table></figure><p><strong>数据字典</strong></p><ul><li>数据字典是关系数据库管理系统内部的一组系统表，它记录了数据库中所有定义信息：<ul><li>关系模式定义</li><li>视图定义</li><li>索引定义</li><li>完整性约束定义</li><li>各类用户对数据库的操作权限</li><li>统计信息等</li></ul></li><li>关系数据库管理系统在执行SQL的数据定义语句时，实际上就是在更新数据字典表中的相应信息</li></ul><h2 id="数据查询"><a class="markdownIt-Anchor" href="#数据查询"></a> 数据查询</h2><p>WHERE 指定查询条件</p><p>GROUP BY 对查询结果按指定的列的值分组</p><p>HAVING 只有满足条件的组才输出</p><p>ORDER BY ASC|DESC 对查询结果升序/降序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>查询全列部</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> Sname,<span class="number">2014</span><span class="operator">-</span>Sage</span><br><span class="line"><span class="keyword">FROM</span> Student; </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="keyword">SELECT</span>后可以是表达式</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> Sname,<span class="string">'Year of Birth:'</span>,<span class="number">2022</span><span class="operator">-</span>Sage BIRTHDAY,<span class="built_in">LOWER</span>(Sdept) DEPARTMENT</span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>查询出生年份 ，并改变列标题为BIRTHDAY,DEPARMENT</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Sn</span><br><span class="line"><span class="keyword">FROM</span> SC;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>取消重复行</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/20/aZJWpXNDldzVUgk.png" alt=""></p><p><strong>字符匹配</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LIKE</span> <span class="string">'&lt;匹配串&gt;'</span> [<span class="keyword">ESCAPE</span> <span class="string">'&lt;换码字符&gt;'</span>]</span><br></pre></td></tr></table></figure><ul><li>a%b表示以a开头，以b结尾的任意长度的字符串</li><li>a_b表示以a开头，以b结尾的长度为3的任意字符串</li></ul><p><strong>涉及空值</strong></p><p>IS NULL | IS NOT NULL</p><p>不能用 “=”</p><p><strong>排序</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> GRADE <span class="keyword">DESC</span>；<span class="operator">/</span><span class="operator">/</span>降序</span><br></pre></td></tr></table></figure><h3 id="聚集函数"><a class="markdownIt-Anchor" href="#聚集函数"></a> 聚集函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">COUNT <span class="operator">*</span> </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>统计元组个数</span><br><span class="line"><span class="built_in">COUNT</span>([<span class="keyword">DISTINCT</span><span class="operator">|</span><span class="keyword">ALL</span>] <span class="operator">&lt;</span>列名<span class="operator">&gt;</span>)</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>统计一列中值的个数</span><br><span class="line"><span class="built_in">SUM</span>([<span class="keyword">DISTINCT</span><span class="operator">|</span><span class="keyword">ALL</span>] <span class="operator">&lt;</span>列明<span class="operator">&gt;</span>)</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>计算总和</span><br><span class="line">AVG</span><br><span class="line">MAX</span><br><span class="line">MIN</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(GRADE)</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cn<span class="operator">=</span> <span class="string">'1'</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>查询选修<span class="number">1</span>号课程的学生最高分</span><br></pre></td></tr></table></figure><h3 id="分组"><a class="markdownIt-Anchor" href="#分组"></a> 分组</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">3</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>查询选修了三门以上课程的同学</span><br><span class="line"></span><br><span class="line"><span class="keyword">HAVING</span> VS <span class="keyword">WHERE</span></span><br><span class="line">作用对象不同</span><br><span class="line"><span class="keyword">WHERE</span> 作用域基表或视图，从中选择元组</span><br><span class="line"><span class="keyword">HAVING</span>作用与组，从中选择组</span><br></pre></td></tr></table></figure><p>！WHERE中不能使用聚集函数作为条件表达式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WHERE</span> <span class="built_in">AVG</span>(GRADE)<span class="operator">&gt;=</span><span class="number">90</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno<span class="operator">/</span><span class="operator">/</span> ERROR<span class="operator">!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(GRADE)<span class="operator">&gt;=</span><span class="number">90</span><span class="operator">/</span><span class="operator">/</span>SUCCESS<span class="operator">!</span></span><br></pre></td></tr></table></figure><p><strong>连接查询</strong></p><ul><li>等值连接/自然连接查询</li><li>自身连接（需要起别名）</li><li>外连接（） 左连/右连</li><li>多表连接</li></ul><p><strong>嵌套查询</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname <span class="operator">/</span><span class="operator">/</span>外层查询</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> SnIN</span><br><span class="line">(<span class="keyword">SELECT</span> Sno</span><br><span class="line">         <span class="keyword">FROM</span> SC</span><br><span class="line">         <span class="keyword">WHERE</span> Cn<span class="operator">=</span> <span class="string">'2'</span>); <span class="operator">/</span><span class="operator">/</span>内层查询</span><br></pre></td></tr></table></figure><p>SQL允许多层嵌套</p><p>子查询不能使用ORDER BY 语句</p><p>有些嵌套可以使用连接运算代替</p><p><strong>相关谓词</strong></p><ul><li>IN 将第一步的查询嵌入到第二步中 （有时可用连接查询代替</li><li>比较运算符 &gt; ,&lt; ,= ,&gt;= ,&lt;= , != ,&lt;&gt;</li><li>ANY(SOME) 或 ALL ，必须同时使用比较运算<ul><li>&lt; ANY</li><li>&lt;=ALL</li></ul></li><li>EXISTS<ul><li>带有EXISTS谓词的子查询不返回任何数据，只产生逻辑真值“true”或逻辑假值“false”</li></ul></li></ul><p>逻辑蕴含的实现</p><p>p\rightarrow q \equiv \neg p \or q</p><p>全称量词实现</p><p>(\forall x )P \equiv (\exist x (\neg P))</p><p><strong>集合</strong></p><ul><li>并操作 UNION</li><li>交操作 INTERSECT</li><li>差操作 EXCEPT</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept <span class="operator">=</span> <span class="string">'CS'</span></span><br><span class="line"><span class="keyword">EXCEPT</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage <span class="operator">&lt;=</span> <span class="number">19</span>;</span><br></pre></td></tr></table></figure><p><strong>插入</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span></span><br><span class="line">INTStudent</span><br><span class="line">(Sno,Sname,Ssex,Sdept,Sage)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">'201250026'</span>,<span class="string">'CHE'</span>,<span class="string">'男'</span>,<span class="string">'IS'</span>,<span class="number">18</span>);</span><br></pre></td></tr></table></figure><p>插入子查询</p><p><strong>更改</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> Student</span><br><span class="line"><span class="keyword">SET</span> Sage <span class="operator">=</span> <span class="number">22</span></span><br><span class="line"><span class="keyword">WHERE</span> Sn<span class="operator">=</span> <span class="string">'201215121'</span>;</span><br></pre></td></tr></table></figure><p>注意完整性</p><p><strong>删除</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sn<span class="operator">=</span> <span class="string">'201214128'</span>;</span><br></pre></td></tr></table></figure><p><strong>空值</strong></p><p>判断一个属性的值是否为空值，用IS NULL或IS NOT NULL来表示</p><p>属性定义（或者域定义）中</p><ul><li><p>有NOT NULL约束条件的不能取空值</p></li><li><p>加了UNIQUE限制的属性不能取空值</p></li><li><p>码属性不能取空值</p></li></ul><p>NULL &lt; 0 结果为UNKNOWN，与FALSE,TRUE构成三值逻辑</p><h2 id="视图"><a class="markdownIt-Anchor" href="#视图"></a> 视图</h2><ul><li>虚表，是从一个或几个基本表（或视图）导出的表</li><li>只存放视图的定义，不存放视图对应的数据</li><li>基表中的数据发生变化，从视图中查询出的数据也随之改变</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_Student</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Sage <span class="operator">/</span><span class="operator">/</span>不执行<span class="keyword">SELECT</span>语句，只把视图定义存入数据字典，视察时从基本表将数据查出</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept <span class="operator">=</span> <span class="string">'IS'</span></span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">CHECK</span> OPTION;<span class="operator">/</span><span class="operator">/</span>加上了该句，对该视图操作时RDBMS会自动加上Sdept <span class="operator">=</span> <span class="string">'IS'</span>的条件</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>一个视图是从单个基本表导出的，并且只是去掉了基本表的某些行和某些列，但保留了主码，我们称这类视图为行列子集视图</p></blockquote><p><strong>基于多个基表的视图</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_S1(Sno,Sname,Grade)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Student.Sno,Sname,Grade</span><br><span class="line"><span class="keyword">FROM</span> Student,SC</span><br><span class="line"><span class="keyword">WHERE</span> Sdept <span class="operator">=</span> <span class="string">'IS'</span> <span class="keyword">AND</span></span><br><span class="line">  Student.Sn<span class="operator">=</span> SC.SnAND</span><br><span class="line">  SC.Cn<span class="operator">=</span> <span class="string">'1'</span>;</span><br></pre></td></tr></table></figure><p><strong>基于视图的视图</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_S2(Sno,Sname,Sgrade)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Grade</span><br><span class="line">   <span class="keyword">FROM</span> IS_S1</span><br><span class="line">   <span class="keyword">WHERE</span> GRADE <span class="operator">&gt;=</span> <span class="number">90</span>;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> F_Student(F_Sno,name,sex,age,dept)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Ssex <span class="operator">=</span> <span class="string">'女'</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>缺点：修改Student的结构后，映像关系被破坏，视图不能正常工作</span><br></pre></td></tr></table></figure><p><strong>删除视图</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> BT_S;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> IS_SI<span class="operator">/</span><span class="operator">/</span>拒绝执行！,IS_S1上还导出了IS_S2视图</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> IS_S1 CASCADE<span class="operator">/</span><span class="operator">/</span>级联删除，删除视图，以及它导出的视图</span><br></pre></td></tr></table></figure><p><strong>查询视图</strong></p><p>用户角度：与查询基本表相同</p><p>关系数据库管理系统：视图消解法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,Sage</span><br><span class="line"><span class="keyword">FROM</span> IS_Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage <span class="operator">&lt;</span> <span class="number">20</span>;</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span></span><br><span class="line">SELCT Sno,Saage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept <span class="operator">=</span> <span class="string">'IS'</span> <span class="keyword">AND</span></span><br><span class="line">  Sage <span class="operator">&lt;</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure><p><strong>更新视图</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> S_G</span><br><span class="line"><span class="keyword">SET</span> Gavg <span class="operator">=</span> <span class="number">90</span></span><br><span class="line"><span class="keyword">WHERE</span> Sn<span class="operator">=</span> <span class="string">'201215121'</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>若S_G为不可更新视图(对它的更新无法转化成基本表的更新，如AVG)，则无效</span><br></pre></td></tr></table></figure><h2 id="小结-2"><a class="markdownIt-Anchor" href="#小结-2"></a> 小结</h2><p>SQL分为数据定义，数据查询，数据更新，数据控制四部分</p><p>数据控制中的数据安全性和完整性控制将在5，6章</p><p>嵌入式SQL，过程性SQL与存储过程在8章</p><h1 id="第四章-数据库安全性"><a class="markdownIt-Anchor" href="#第四章-数据库安全性"></a> 第四章 数据库安全性</h1><h2 id="存储控制"><a class="markdownIt-Anchor" href="#存储控制"></a> 存储控制</h2><p><strong>存储控制机制</strong></p><ul><li><p>用户权限定义</p></li><li><p>合法权限检查</p></li><li><p><strong>自动存取控制</strong></p><p>Discretionary Access Control，DAC</p><p>用户对于不同的对象有不同的权限，可以授权</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> SC</span><br><span class="line">TU5</span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;<span class="operator">/</span><span class="operator">/</span>允许转让</span><br><span class="line"></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> SC</span><br><span class="line"><span class="keyword">FROM</span> U5 CASCADE<span class="operator">/</span><span class="operator">/</span>级联收回，这里默认为CASCADE</span><br></pre></td></tr></table></figure><p><strong>创建数据库模式的权限</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="operator">&lt;</span>username<span class="operator">&gt;</span> [<span class="keyword">WITH</span>][DBA<span class="operator">|</span>RESOURCE<span class="operator">|</span><span class="keyword">CONNECT</span>];</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="keyword">CONNECT</span> 不能创建新用户，不能创建模式，不能创建基本表，只能登陆</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>RESOURCE 能创建基本表和视图，不能创建模式和用户</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>DBA 超级用户，可以创建，可以授权</span><br></pre></td></tr></table></figure><p><strong>数据库角色</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> ROLE R1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> Student</span><br><span class="line">TR1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> R1</span><br><span class="line">TWANG,ZHANG,ZHAO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">REVOKE</span> R1</span><br><span class="line"><span class="keyword">FROM</span> WANG;</span><br><span class="line"></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> Student</span><br><span class="line"><span class="keyword">FROM</span> R1;</span><br></pre></td></tr></table></figure><ul><li><strong>强制存储控制</strong></li></ul><p>Mandatory Access Control，MAC</p><p>每一个对象授予一定的密级，每个用户授予许可证</p><p>只有合法许可证才能存取</p><p>敏感度标记：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mi>S</mi><mo>≥</mo><mi>S</mi><mo>≥</mo><mi>C</mi><mo>≥</mo><mi>P</mi></mrow><annotation encoding="application/x-tex">TS\geq S \geq C \geq P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">T</span><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="mrel">≥</span><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="mrel">≥</span><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="mrel">≥</span><span class="mord mathit" style="margin-right:0.13889em;">P</span></span></span></span></p><p>主体的敏感度标记称为许可证级别</p><p>客体的敏感度标记称为密级</p><ul><li>仅当主体许可证级别<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>≥</mo></mrow><annotation encoding="application/x-tex">\geq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.63597em;"></span><span class="strut bottom" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="base textstyle uncramped"><span class="mrel">≥</span></span></span></span>客体，可读</li><li>仅当主体许可证级别<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>≤</mo></mrow><annotation encoding="application/x-tex">\leq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.63597em;"></span><span class="strut bottom" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="base textstyle uncramped"><span class="mrel">≤</span></span></span></span>客体，可读</li></ul><p><img src="https://s2.loli.net/2022/06/20/t8DIMmTW7sCBp1y.png" alt=""></p><ul><li>普通员工可以给老板写建议书、举报信，但不能读老板信箱内容（上写，禁止上读）</li><li>老板可以读取所有文件，绝对不允许把自己客户资源等核心机密写到普通员工都能看到公告板上（下读，禁止下写）</li></ul><h1 id="第五章-数据库完整性"><a class="markdownIt-Anchor" href="#第五章-数据库完整性"></a> 第五章 数据库完整性</h1><p>实体完整性</p><p>参照完整性</p><p>用户定义的完整性</p><p><strong>断言</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> ASSERTION ASSE_SC_DB_NUM</span><br><span class="line"><span class="keyword">CHECK</span> (<span class="number">60</span> <span class="operator">&gt;=</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="comment">/*此断言的谓词涉及聚集操作count的SQL语句*/</span></span><br><span class="line"> <span class="keyword">From</span> Course,SC</span><br><span class="line">    <span class="keyword">Where</span> SC.Cno<span class="operator">=</span>Course.Cnand Course.Cname <span class="operator">=</span><span class="string">'数据库'</span>)</span><br><span class="line">   );</span><br></pre></td></tr></table></figure><h2 id="触发器"><a class="markdownIt-Anchor" href="#触发器"></a> 触发器</h2><p>触发器是用户定义在关系表上的一类由事件驱动的特殊过程</p><p><strong>定义触发器</strong></p><p>表的拥有者才可以在表上创建触发器</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> SC_T <span class="operator">/</span><span class="operator">/</span>触发器名SC_T</span><br><span class="line">AFTER <span class="keyword">UPDATE</span> <span class="keyword">OF</span> Grade <span class="keyword">ON</span> SC <span class="operator">/</span><span class="operator">/</span>[BEFORE<span class="operator">|</span>AFTER] <span class="operator">&lt;</span>触发事件<span class="operator">&gt;</span> <span class="keyword">ON</span> <span class="operator">&lt;</span>表<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">REFERENCING</span></span><br><span class="line"> <span class="keyword">OLD</span> <span class="type">row</span> <span class="keyword">AS</span> OldTuple <span class="operator">/</span><span class="operator">/</span>变量</span><br><span class="line"> <span class="keyword">NEW</span> <span class="type">row</span> <span class="keyword">AS</span> NewTuple</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> <span class="operator">/</span><span class="operator">/</span> <span class="keyword">FOR</span> <span class="keyword">EACH</span> [<span class="type">ROW</span><span class="operator">|</span>STATEMENT] 行级触发<span class="operator">|</span>语句级触发</span><br><span class="line"><span class="keyword">WHEN</span> (NewTuple.Grade <span class="operator">&gt;=</span> <span class="number">1.1</span> <span class="operator">*</span> OldTuple.Grade) <span class="operator">/</span><span class="operator">/</span>触发条件</span><br><span class="line"> <span class="keyword">INSERT</span> INTSC_U(Sno,Cno,OldGrade,NewGrade)</span><br><span class="line"><span class="keyword">VALUES</span>(OldTuple.Sno,OldTuple.Cno,OldTuple.Grade,NewTuple.Grade);<span class="operator">/</span><span class="operator">/</span>触发动作</span><br></pre></td></tr></table></figure><p><strong>删除触发器</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> <span class="operator">&lt;</span>触发器名<span class="operator">&gt;</span> <span class="keyword">ON</span> <span class="operator">&lt;</span>表<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>慎用触发器，因为每次访问都会影响性能</p><h1 id="第六章-关系数据理论"><a class="markdownIt-Anchor" href="#第六章-关系数据理论"></a> 第六章 关系数据理论</h1><h2 id="关系模式及范式"><a class="markdownIt-Anchor" href="#关系模式及范式"></a> 关系模式及范式</h2><p>关系模式是一个五元组</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><mo>(</mo><mi>U</mi><mo separator="true">,</mo><mi>D</mi><mo separator="true">,</mo><mi>D</mi><mi>O</mi><mi>M</mi><mo separator="true">,</mo><mi>F</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">R(U,D,DOM,F)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.00773em;">R</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.10903em;">U</span><span class="mpunct">,</span><span class="mord mathit" style="margin-right:0.02778em;">D</span><span class="mpunct">,</span><span class="mord mathit" style="margin-right:0.02778em;">D</span><span class="mord mathit" style="margin-right:0.02778em;">O</span><span class="mord mathit" style="margin-right:0.10903em;">M</span><span class="mpunct">,</span><span class="mord mathit" style="margin-right:0.13889em;">F</span><span class="mclose">)</span></span></span></span></p><p>U：一组属性</p><p>D：属性组U中的属性的域</p><p>DOM：U到D的映射</p><p>F：U上的一组数据依赖</p><p>我们可以把关系模式看作 R&lt;U,F&gt;</p><p><strong>数据依赖</strong></p><ul><li>函数依赖</li><li>多值依赖</li></ul><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi>N</mi><mi>F</mi><mo>⊃</mo><mn>2</mn><mi>N</mi><mi>F</mi><mo>⊃</mo><mn>3</mn><mi>N</mi><mi>F</mi><mo>⊃</mo><mi>B</mi><mi>C</mi><mi>N</mi><mi>F</mi><mo>⊃</mo><mn>4</mn><mi>N</mi><mi>F</mi><mo>⊃</mo><mn>5</mn><mi>N</mi><mi>F</mi></mrow><annotation encoding="application/x-tex">1NF \supset 2NF \supset 3NF \supset BCNF \supset 4NF \supset 5NF</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">1</span><span class="mord mathit" style="margin-right:0.10903em;">N</span><span class="mord mathit" style="margin-right:0.13889em;">F</span><span class="mrel">⊃</span><span class="mord mathrm">2</span><span class="mord mathit" style="margin-right:0.10903em;">N</span><span class="mord mathit" style="margin-right:0.13889em;">F</span><span class="mrel">⊃</span><span class="mord mathrm">3</span><span class="mord mathit" style="margin-right:0.10903em;">N</span><span class="mord mathit" style="margin-right:0.13889em;">F</span><span class="mrel">⊃</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="mord mathit" style="margin-right:0.10903em;">N</span><span class="mord mathit" style="margin-right:0.13889em;">F</span><span class="mrel">⊃</span><span class="mord mathrm">4</span><span class="mord mathit" style="margin-right:0.10903em;">N</span><span class="mord mathit" style="margin-right:0.13889em;">F</span><span class="mrel">⊃</span><span class="mord mathrm">5</span><span class="mord mathit" style="margin-right:0.10903em;">N</span><span class="mord mathit" style="margin-right:0.13889em;">F</span></span></span></span></p><p>低级范式可以通过模式分解转化为多个高一级范式的集合</p><h3 id="函数依赖"><a class="markdownIt-Anchor" href="#函数依赖"></a> 函数依赖</h3><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="41.193ex" height="3.375ex" role="img" focusable="false" viewBox="0 -1291.8 18207.2 1491.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(1129.8,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(2407.6,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mo" transform="translate(3170.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(3615.2,0)"><path data-c="2200" d="M0 673Q0 684 7 689T20 694Q32 694 38 680T82 567L126 451H430L473 566Q483 593 494 622T512 668T519 685Q524 694 538 694Q556 692 556 674Q556 670 426 329T293 -15Q288 -22 278 -22T263 -15Q260 -11 131 328T0 673ZM414 410Q414 411 278 411T142 410L278 55L414 410Z"></path></g><g data-mml-node="msup" transform="translate(4171.2,0)"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(936.2,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(5629.7,0)"><path data-c="2282" d="M84 250Q84 372 166 450T360 539Q361 539 370 539T395 539T430 540T475 540T524 540H679Q694 532 694 520Q694 511 681 501L522 500H470H441Q366 500 338 496T266 472Q244 461 224 446T179 404T139 337T124 250V245Q124 157 185 89Q244 25 328 7Q348 2 366 2T522 0H681Q694 -10 694 -20Q694 -32 679 -40H526Q510 -40 480 -40T434 -41Q350 -41 289 -25T172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(6685.4,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mstyle" transform="translate(7537.4,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="msup" transform="translate(8537.4,0)"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(936.2,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(9995.9,0)"><path data-c="219B" d="M54 250Q54 258 66 270H277L488 272L542 350Q596 431 602 435Q604 437 609 437Q617 437 622 432T628 417T582 341L537 272L608 270H751L822 272L808 288Q786 313 761 355T733 414Q733 424 737 426T766 428H793L806 397Q829 354 864 314Q896 284 928 263Q942 257 942 250T928 237Q887 208 864 185Q829 147 806 103L793 74L766 72Q742 72 738 73T733 85Q735 102 756 137T797 198L817 225L822 230H511L457 148Q440 124 420 93Q404 68 400 64T389 60Q381 60 375 66T368 81Q368 88 415 159L462 230H264L66 232Q54 239 54 250Z"></path></g><g data-mml-node="mi" transform="translate(11273.6,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mstyle" transform="translate(12036.6,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mi" transform="translate(13036.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">记</text></g><g data-mml-node="mi" transform="translate(14036.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">作</text></g><g data-mml-node="mi" transform="translate(15036.6,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="REL" transform="translate(16166.4,0)"><g data-mml-node="mover"><g data-mml-node="TeXAtom" data-mjx-texclass="OP"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(235.2,711) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g></g></g></g><g data-mml-node="mi" transform="translate(17444.2,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g></g></g></svg></mjx-container></p><ul><li><p>平凡依赖  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mo>→</mo><mi>Y</mi><mo separator="true">,</mo><mi>Y</mi><mo>⊆</mo><mi>X</mi></mrow><annotation encoding="application/x-tex">X\rightarrow Y, Y\subseteq X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.07847em;">X</span><span class="mrel">→</span><span class="mord mathit" style="margin-right:0.22222em;">Y</span><span class="mpunct">,</span><span class="mord mathit" style="margin-right:0.22222em;">Y</span><span class="mrel">⊆</span><span class="mord mathit" style="margin-right:0.07847em;">X</span></span></span></span></p></li><li><p>非平凡依赖   <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.686ex;" xmlns="http://www.w3.org/2000/svg" width="14.85ex" height="2.498ex" role="img" focusable="false" viewBox="0 -801 6563.8 1104"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(1129.8,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(2407.6,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mo" transform="translate(3170.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(3615.2,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mo" transform="translate(4656,0)"><path data-c="2288" d="M146 -283Q146 -282 174 -213T202 -143H115Q102 -127 102 -123T115 -103H220L291 68L278 73Q203 101 153 157T86 288Q83 309 83 344Q83 380 86 399Q107 480 160 539Q222 601 298 621Q328 630 345 631T435 635L526 637L560 715Q587 778 593 789T609 801Q616 801 622 795T629 781Q629 780 625 771T614 742T600 706L571 637Q571 635 626 635H680Q693 620 693 613T689 601L682 597L618 595H553L449 346Q425 288 399 223T359 127T346 95H356Q365 95 381 95T417 94T463 93T515 93H682Q693 82 693 74T680 53H511Q420 55 335 55L329 57L262 -103H680Q682 -105 684 -108T688 -113T691 -118T693 -124Q693 -134 682 -141L464 -143H246L213 -219Q182 -292 178 -299Q172 -303 166 -303T153 -297T146 -283ZM509 590Q509 595 438 595Q354 595 318 586Q246 567 195 516T126 395Q123 378 123 344T126 293Q141 229 184 181T291 110L306 104L406 346L509 590Z"></path></g><g data-mml-node="mi" transform="translate(5711.8,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container></p></li><li><p>完全依赖  <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="41.193ex" height="3.375ex" role="img" focusable="false" viewBox="0 -1291.8 18207.2 1491.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(1129.8,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(2407.6,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mo" transform="translate(3170.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(3615.2,0)"><path data-c="2200" d="M0 673Q0 684 7 689T20 694Q32 694 38 680T82 567L126 451H430L473 566Q483 593 494 622T512 668T519 685Q524 694 538 694Q556 692 556 674Q556 670 426 329T293 -15Q288 -22 278 -22T263 -15Q260 -11 131 328T0 673ZM414 410Q414 411 278 411T142 410L278 55L414 410Z"></path></g><g data-mml-node="msup" transform="translate(4171.2,0)"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(936.2,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(5629.7,0)"><path data-c="2282" d="M84 250Q84 372 166 450T360 539Q361 539 370 539T395 539T430 540T475 540T524 540H679Q694 532 694 520Q694 511 681 501L522 500H470H441Q366 500 338 496T266 472Q244 461 224 446T179 404T139 337T124 250V245Q124 157 185 89Q244 25 328 7Q348 2 366 2T522 0H681Q694 -10 694 -20Q694 -32 679 -40H526Q510 -40 480 -40T434 -41Q350 -41 289 -25T172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(6685.4,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mstyle" transform="translate(7537.4,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="msup" transform="translate(8537.4,0)"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(936.2,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(9995.9,0)"><path data-c="219B" d="M54 250Q54 258 66 270H277L488 272L542 350Q596 431 602 435Q604 437 609 437Q617 437 622 432T628 417T582 341L537 272L608 270H751L822 272L808 288Q786 313 761 355T733 414Q733 424 737 426T766 428H793L806 397Q829 354 864 314Q896 284 928 263Q942 257 942 250T928 237Q887 208 864 185Q829 147 806 103L793 74L766 72Q742 72 738 73T733 85Q735 102 756 137T797 198L817 225L822 230H511L457 148Q440 124 420 93Q404 68 400 64T389 60Q381 60 375 66T368 81Q368 88 415 159L462 230H264L66 232Q54 239 54 250Z"></path></g><g data-mml-node="mi" transform="translate(11273.6,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mstyle" transform="translate(12036.6,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mi" transform="translate(13036.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">记</text></g><g data-mml-node="mi" transform="translate(14036.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">作</text></g><g data-mml-node="mi" transform="translate(15036.6,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="REL" transform="translate(16166.4,0)"><g data-mml-node="mover"><g data-mml-node="TeXAtom" data-mjx-texclass="OP"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(235.2,711) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g></g></g></g><g data-mml-node="mi" transform="translate(17444.2,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g></g></g></svg></mjx-container></p><p>Y对X完全依赖</p></li><li><p>部份依赖  X \rightarrow Y, X \not\stackrel{F}\rightarrow Y \quad 记作X\stackrel{P}\rightarrow Y</p></li><li><p>传递函数依赖 X \rightarrow Y(Y \not\subseteq X),Y \not\rightarrow X,Y \rightarrow Z,Z \not\subseteq Y 记为 X\stackrel{传递}\rightarrow Z</p><p>称Z对X传递函数依赖</p></li></ul><h3 id="1nf"><a class="markdownIt-Anchor" href="#1nf"></a> 1NF</h3><p>关系模式R的所有属性都是不可分的基本数据项</p><h3 id="2nf"><a class="markdownIt-Anchor" href="#2nf"></a> 2NF</h3><p>R\in 1NF, 并且每一个非主属性\stackrel{F}\leftarrow 任何一个候选码</p><p>一个关系不属于2NF，会有以下问题</p><ul><li>数据冗余</li><li>修改复杂，更新异常</li><li>插入异常</li><li>删除异常</li></ul><h3 id="3nf"><a class="markdownIt-Anchor" href="#3nf"></a> 3NF</h3><p>R<u,f> \in 1NF, \not \exist 码X,属性组Y,非主属性Z，使得 X\rightarrow Y，Y \rightarrow Z成立，Y \not\rightarrow X不成立</u,f></p><p>即不存在传递依赖</p><p>解决方法：分解</p><h3 id="bcnf"><a class="markdownIt-Anchor" href="#bcnf"></a> BCNF</h3><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.686ex;" xmlns="http://www.w3.org/2000/svg" width="51.146ex" height="2.498ex" role="img" focusable="false" viewBox="0 -801 22606.6 1104"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(1036.8,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(2092.6,0)"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"></path></g><g data-mml-node="mo" transform="translate(2859.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(3304.2,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mo" transform="translate(4331,0)"><g data-mml-node="text"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="text" transform="translate(778,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g></g><g data-mml-node="mn" transform="translate(6053.8,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(6553.8,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mi" transform="translate(7441.8,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mo" transform="translate(8190.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(8635.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">若</text></g><g data-mml-node="mi" transform="translate(9635.4,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(10765.2,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(12043,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mi" transform="translate(12806,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">且</text></g><g data-mml-node="mi" transform="translate(13806,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mo" transform="translate(14846.8,0)"><path data-c="2288" d="M146 -283Q146 -282 174 -213T202 -143H115Q102 -127 102 -123T115 -103H220L291 68L278 73Q203 101 153 157T86 288Q83 309 83 344Q83 380 86 399Q107 480 160 539Q222 601 298 621Q328 630 345 631T435 635L526 637L560 715Q587 778 593 789T609 801Q616 801 622 795T629 781Q629 780 625 771T614 742T600 706L571 637Q571 635 626 635H680Q693 620 693 613T689 601L682 597L618 595H553L449 346Q425 288 399 223T359 127T346 95H356Q365 95 381 95T417 94T463 93T515 93H682Q693 82 693 74T680 53H511Q420 55 335 55L329 57L262 -103H680Q682 -105 684 -108T688 -113T691 -118T693 -124Q693 -134 682 -141L464 -143H246L213 -219Q182 -292 178 -299Q172 -303 166 -303T153 -297T146 -283ZM509 590Q509 595 438 595Q354 595 318 586Q246 567 195 516T126 395Q123 378 123 344T126 293Q141 229 184 181T291 110L306 104L406 346L509 590Z"></path></g><g data-mml-node="mi" transform="translate(15902.6,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mi" transform="translate(16754.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(17754.6,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mi" transform="translate(18606.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">必</text></g><g data-mml-node="mi" transform="translate(19606.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">含</text></g><g data-mml-node="mi" transform="translate(20606.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">有</text></g><g data-mml-node="mi" transform="translate(21606.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">码</text></g></g></g></svg></mjx-container></p><p>换言之，如果每一个决定属性集都包含候选码，那么为BCNF</p><p>如果一个关系数据库中的所有关系模式都属于BCNF，那么在函数依赖范畴内，它已实现了模式的彻底分解，达到了最高的规范化程度，消除了插入异常和删除异常</p><h1 id="第七章-数据库设计概述"><a class="markdownIt-Anchor" href="#第七章-数据库设计概述"></a> 第七章 数据库设计概述</h1><p><img src="https://s2.loli.net/2022/06/20/JlGIvLhaigS6CmK.png" alt=""></p><p><img src="https://s2.loli.net/2022/06/20/aIFKXytQu3bUwTr.png" alt=""></p><ul><li>需求分析</li><li>概念结构设计</li><li>逻辑结构设计</li><li>物理结构设计</li><li>数据库实施</li><li>数据库运行和维护</li></ul><p><img src="https://s2.loli.net/2022/06/20/QyJ9r8meVhFKqbl.png" alt=""></p><h2 id="需求分析"><a class="markdownIt-Anchor" href="#需求分析"></a> 需求分析</h2><p><img src="https://s2.loli.net/2022/06/20/dDaGrMC82LUXj7O.png" alt=""></p><p>这里的数据字典和数据库管理系统中的数据字典有区别</p><p>数据流描述 \{ 数据流名，说明，数据流来源，去向，组成:\{ 数据结构\},平均流量,高峰期流量\}</p><p>数据存储描述</p><p>\{ 数据存储名,说明,编号,输的数据流 ,输出的数据流, 组成:\{ 数据结构 \},数据量, 存取频度,存取方式 \}</p><h2 id="概念模型和er模型"><a class="markdownIt-Anchor" href="#概念模型和er模型"></a> 概念模型和ER模型</h2><p><img src="https://s2.loli.net/2022/06/20/zPw8q7u5MvmoQD3.png" alt=""></p><p><img src="https://s2.loli.net/2022/06/20/YVSobLadIeWuN24.png" alt=""></p><p><img src="https://s2.loli.net/2022/06/20/KB9arR6IQN74WgS.png" alt=""></p><p><img src="https://s2.loli.net/2022/06/20/2njsM3JZiBAXD1Y.png" alt=""></p><p><strong>ISA联系</strong></p><p><img src="https://s2.loli.net/2022/06/20/L5F8gzl9GdBAtXk.png" alt=""></p><p><strong>基数约束</strong></p><ul><li>强制参与约束</li><li>非强制参与约束</li></ul><p><img src="https://s2.loli.net/2022/06/20/ZYzopx4vCsI3wa5.png" alt=""></p><h2 id="逻辑结构设计"><a class="markdownIt-Anchor" href="#逻辑结构设计"></a> 逻辑结构设计</h2><p><strong>把概念结构设计阶段设计好的基本E-R图转换为与选用数据库管理系统产品所支持的数据模型相符合的逻辑结构</strong></p><p>并不是规范化程度越高的关系就越优</p><h3 id="关系模型的分解"><a class="markdownIt-Anchor" href="#关系模型的分解"></a> 关系模型的分解</h3><ul><li>水平分解</li><li>垂直分解</li></ul><h2 id="物理结构设计"><a class="markdownIt-Anchor" href="#物理结构设计"></a> 物理结构设计</h2><p>为一个给定的逻辑数据模型选取一个最适合应用要求的物理结构的过程，就是数据库的物理设计</p><p><strong>设计步骤</strong></p><ul><li>确定数据库的物理结构</li><li>对物理结构进行评价</li></ul><p><strong>存取方法选择</strong></p><ul><li>B+书索引存取方法</li><li>Hash索引存取方法</li><li>聚簇存取方法</li></ul><p><strong>聚簇存取方法</strong></p><p>为了提高某个属性（或属性组）的查询速度，把这个或这些属性（称为聚簇码）上具有相同值的元组集中存放在连续的物理块中称为聚簇</p><ul><li>聚簇只能提高某些特定应用的性能</li><li>建立与维护聚簇的开销相当大</li></ul><blockquote><p>SQL语句中包含有与聚簇码有关的ORDER BY, GROUP BY, UNION, DISTINCT等子句或短语时，使用聚簇特别有利，可以省去或减化对结果集的排序操作</p></blockquote><h1 id="第八章-不考"><a class="markdownIt-Anchor" href="#第八章-不考"></a> 第八章 不考</h1><h1 id="第九章"><a class="markdownIt-Anchor" href="#第九章"></a> 第九章</h1><h1 id="第十章"><a class="markdownIt-Anchor" href="#第十章"></a> 第十章</h1><h2 id="事务"><a class="markdownIt-Anchor" href="#事务"></a> 事务</h2><p>事务（Transaction）是用户定义的一个数据库操作序列，这些操作不可分割</p><p>事务和程序</p><ul><li>一个事务可以是一条SQL语句，一组SQL，整个程序</li><li>一个程序通常包含多个事务</li></ul><p><strong>事务时恢复和并发控制的基本单位</strong></p><p><strong>事务定义</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> TRANSACTION;</span><br><span class="line"><span class="keyword">COMMIT</span>;<span class="operator">/</span><span class="operator">/</span>提交</span><br><span class="line"><span class="keyword">ROLLBACK</span>;<span class="operator">/</span><span class="operator">/</span>回滚</span><br></pre></td></tr></table></figure><h3 id="acid特性"><a class="markdownIt-Anchor" href="#acid特性"></a> ACID特性</h3><ul><li>原子性<ul><li>事务是数据库的逻辑工作单位</li></ul></li><li>一致性<ul><li>事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态</li></ul></li><li>隔离性<ul><li>不被干扰</li><li>互不干扰</li></ul></li><li>持续性<ul><li>一个事务一旦提交，它对数据库中数据的改变就应该是永久性的</li><li>接下来的其他操作或故障不应该对其执行结果有任何影响</li></ul></li></ul><p><strong>破坏ACID特性的因素</strong></p><ul><li>多个事务并行运行时，不同事物的操作交叉执行</li><li>事务在运行过程中被强行停止</li></ul><h2 id="故障和数据库恢复"><a class="markdownIt-Anchor" href="#故障和数据库恢复"></a> 故障和数据库恢复</h2><h3 id="故障的种类"><a class="markdownIt-Anchor" href="#故障的种类"></a> 故障的种类</h3><ul><li>事物内部的故障</li><li>系统故障 - 软故障<ul><li>CPU，操作系统故障，断电</li></ul></li><li>介质故障 - 硬故障<ul><li>磁盘损坏</li></ul></li><li>病毒</li></ul><h2 id="恢复"><a class="markdownIt-Anchor" href="#恢复"></a> 恢复</h2><p>基本原理：冗余</p><p>恢复的实现技术：复杂</p><p><strong>关键问题</strong></p><ul><li>如何建立冗余数据（数据转储，登记日志文件）</li><li>如何利用这些冗余数据实施数据库恢复</li></ul><h2 id="数据转储和日志文件"><a class="markdownIt-Anchor" href="#数据转储和日志文件"></a> 数据转储和日志文件</h2><p>数据转储是数据库恢复中采用的基本技术，备用的数据称为<strong>后备副本</strong></p><p><img src="https://s2.loli.net/2022/06/20/YZ7L82RaczxiTQ6.png" alt=""></p><h3 id="静态转储"><a class="markdownIt-Anchor" href="#静态转储"></a> 静态转储</h3><ul><li>在系统中无运行事务时进行的转储操作</li><li>转储开始时数据库处于一致性状态</li><li>转储期间不允许对数据库的任何存取、修改活动</li><li>得到的一定是一个数据一致性的副本</li></ul><p>缺点：降低了数据库可用性</p><h3 id="动态转储"><a class="markdownIt-Anchor" href="#动态转储"></a> 动态转储</h3><ul><li>转储操作与用户事务并发进行</li><li>转储期间允许对数据库进行存取或修改</li></ul><p>优点：</p><ul><li>不用等待正在运行的事务结束</li><li>不会影响新事物的进行</li></ul><p>缺点：</p><ul><li>不能保证副本中数据有效正确</li></ul><p><strong>解决方法</strong></p><ul><li>建立日志文件</li></ul><p>后备副本+日志文件就能正确回复数据库状态</p><ul><li>海量转储 每次转储全部，恢复方便</li><li>增量转储 转储更新的数据，事务频繁/数据库大时方便</li></ul><h3 id="日志文件"><a class="markdownIt-Anchor" href="#日志文件"></a> 日志文件</h3><p>log file</p><p><strong>格式</strong></p><ul><li>以记录为单位的日志文件</li><li>以数据块为单位的日志文件</li></ul><p><strong>用途</strong></p><ul><li>事务故障恢复</li><li>系统故障恢复</li><li>协助后备副本进行介质故障恢复</li></ul><h4 id="以记录为单位的日志文件"><a class="markdownIt-Anchor" href="#以记录为单位的日志文件"></a> 以记录为单位的日志文件</h4><ul><li>各个事务的开始标记(BEGIN TRANSACTION)</li><li>各个事务的结束标记(COMMIT或ROLLBACK)</li><li>各个事务的所有更新操作</li></ul><p>每条日志记录包括</p><ul><li>事务标识（标明是哪个事务）</li><li>操作类型（插入、删除或修改）</li><li>操作对象（记录内部标识）</li><li>更新前数据的旧值（对插入操作而言，此项为空值）</li><li>更新后数据的新值（对删除操作而言, 此项为空值）</li></ul><h4 id="以数据块为单位的日志文件"><a class="markdownIt-Anchor" href="#以数据块为单位的日志文件"></a> 以数据块为单位的日志文件</h4><p>每条日志记录的内容</p><ul><li>事务标识</li><li>被更新的数据块</li></ul><p><img src="https://s2.loli.net/2022/06/20/15kGdXnZV28fxKe.png" alt=""></p><h4 id="登记日志文件"><a class="markdownIt-Anchor" href="#登记日志文件"></a> 登记日志文件</h4><p>两条原则</p><ul><li>登记的次序严格按并发事务执行的时间次序</li><li>必须先写日志文件，后写数据库</li></ul><h2 id="恢复策略"><a class="markdownIt-Anchor" href="#恢复策略"></a> 恢复策略</h2><h3 id="事务故障的恢复"><a class="markdownIt-Anchor" href="#事务故障的恢复"></a> 事务故障的恢复</h3><p>由恢复子系统利用日志文件撤销此修改（UNDO）</p><h3 id="恢复步骤"><a class="markdownIt-Anchor" href="#恢复步骤"></a> 恢复步骤</h3><ol><li>反向扫描日志文件，查找事务的更新操作</li><li>对该书五的更新操作你操作</li><li>继续反向扫描日志文件</li><li>直到事务开始的标记，恢复完成</li></ol><h3 id="系统故障的恢复"><a class="markdownIt-Anchor" href="#系统故障的恢复"></a> 系统故障的恢复</h3><ul><li>Und故障发生时未完成的事务</li><li>Red已完成的事务</li></ul><h3 id="恢复步骤-2"><a class="markdownIt-Anchor" href="#恢复步骤-2"></a> 恢复步骤</h3><ol><li>正向扫描日志，找出故障发生前已经提交的事务，将其事务标识记入REDO队列，同时找出UNDO队列<ol><li>REDO队列</li><li>UNDO队列</li></ol></li><li>对UNDO队列UNDO处理</li><li>对REDO队列REDO处理</li></ol><h3 id="介质故障的恢复"><a class="markdownIt-Anchor" href="#介质故障的恢复"></a> 介质故障的恢复</h3><p>重装数据库</p><p>重做已完成的事务</p><h3 id="恢复步骤-3"><a class="markdownIt-Anchor" href="#恢复步骤-3"></a> 恢复步骤</h3><ul><li>装入最新的后备数据库副本(离故障发生时刻最近的转储副本) ，使数据库恢复到最近一次转储时的一致性状态</li><li>装入有关日志文件副本，重做已完成的事务</li></ul><h2 id="具有检查点的恢复技术"><a class="markdownIt-Anchor" href="#具有检查点的恢复技术"></a> 具有检查点的恢复技术</h2><ul><li>恢复的两个问题<ul><li>搜索整个日志将耗费大量的时间</li><li>重做处理：重新执行，浪费了大量时间</li></ul></li><li>具有检查点（checkpoint）的恢复技术<ul><li>在日志文件中增加检查点记录（checkpoint）</li><li>增加重新开始文件</li><li>恢复子系统在登录日志文件期间动态地维护日志</li></ul></li></ul><h3 id="检查点技术"><a class="markdownIt-Anchor" href="#检查点技术"></a> 检查点技术</h3><p>检查点记录的内容</p><ul><li>建立检查点时刻所有正在执行的事务</li><li>这些事务最近的一个日志记录地址</li></ul><p>重新开始文件内容</p><ul><li>记录各个检查点记录在日志文件中的地址</li></ul><p><img src="https://s2.loli.net/2022/06/20/4Fq27UIgNkseAai.png" alt=""></p><h3 id="动态维护日志文件的方法"><a class="markdownIt-Anchor" href="#动态维护日志文件的方法"></a> 动态维护日志文件的方法</h3><ul><li>周期性地执行如下操作：建立检查点，保存数据库状态</li></ul><p>具体步骤</p><ul><li>将当前日志缓冲区中的所有日志记录写入磁盘的日志文件上</li><li>在日志文件中写入一个检查点记录</li><li>将当前数据缓冲区的所有数据记录写入磁盘的数据库中</li><li>把检查点记录在日志文件中的地址写入一个重新开始文件</li></ul><p>恢复子系统可以定期或不定期地建立检查点,保存数据库状态</p><h3 id="利用检查点的恢复策略"><a class="markdownIt-Anchor" href="#利用检查点的恢复策略"></a> 利用检查点的恢复策略</h3><ul><li>当事务T在一个检查点之前提交，T对数据库所做的修改已写入数据库</li><li>写入时间是在这个检查点建立之前或在这个检查点建立之时</li><li>在进行恢复处理时，没有必要对事务T执行重做操作</li></ul><p><img src="https://s2.loli.net/2022/06/20/vQWJHgC8loPnOkh.png" alt=""></p><h3 id="恢复步骤-4"><a class="markdownIt-Anchor" href="#恢复步骤-4"></a> 恢复步骤</h3><ul><li>从重新开始文件中找到最后一个检查点记录在日志文件中的地址，由该地址在日志文件中找到最后一个检查点记录</li><li>由该检查点记录得到检查点建立时刻所有正在执行的事务清单ACTIVE-LIST<ul><li>UNDO-LIST</li><li>REDO-LIST</li></ul></li><li>从检查点开始正向扫描日志文件，直到日志文件结束<ul><li>如有新开始的事务<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">T_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.13889em;">T</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.13889em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> ，把*<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">T_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.13889em;">T</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.13889em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>*暂时放入UNDO-LIST队列</li><li>如有提交的事务<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">T_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.13889em;">T</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.13889em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>，把*<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">T_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.13889em;">T</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.13889em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>*从UNDO-LIST队列移到REDO-LIST队列;直到日志</li></ul></li><li>对UNDO-LIST执行UNDO</li><li>对REDO-LIST执行REDO</li></ul><h1 id="第十一章-并发控制"><a class="markdownIt-Anchor" href="#第十一章-并发控制"></a> 第十一章 并发控制</h1><p>事务可以一个一个地串行执行</p><p>为了充分利用系统资源，应该允许多个事务并行执行地执行</p><p><strong>交叉并发方式</strong></p><p><img src="https://s2.loli.net/2022/06/20/ljgDFWO24QHSsCh.png" alt=""></p><p><strong>同时并发方式</strong></p><p>每个处理机处理一个事务</p><p>受限于硬件环境</p><h3 id="并发控制"><a class="markdownIt-Anchor" href="#并发控制"></a> 并发控制</h3><ul><li>事务是并发控制的基本单位</li><li>并发控制机制的任务<ul><li>对并发操作进行正确调度</li><li>保证事务的隔离性</li><li>保证数据库的一致性</li></ul></li></ul><p>并发操作带来的数据不一致性</p><ul><li>丢失修改</li><li>不可重复读<ul><li>不可重复读是指事务T1读取数据后，事务T2执行更新操作，使T1无法再现前一次读取结果</li></ul></li><li>读脏数据<ul><li>T1撤销，T2读到的数据为脏数据</li></ul></li><li>记号<ul><li>R(X)</li><li>W(X)</li></ul></li></ul><h3 id="并发控制的主要技术"><a class="markdownIt-Anchor" href="#并发控制的主要技术"></a> 并发控制的主要技术</h3><ul><li>封锁</li><li>时间戳</li><li>乐观控制</li><li>多版本并发控制</li></ul><h2 id="封锁"><a class="markdownIt-Anchor" href="#封锁"></a> 封锁</h2><ul><li>排他锁 X锁 也称写锁 不允许其他食物修改和读取</li><li>共享锁 S锁 也称读锁 其他事务可以读</li></ul><p><strong>相容矩阵</strong></p><p><img src="https://s2.loli.net/2022/06/20/VXKaBpl94ejkYLD.png" alt=""></p><h2 id="封锁协议"><a class="markdownIt-Anchor" href="#封锁协议"></a> 封锁协议</h2><h3 id="一级封锁协议"><a class="markdownIt-Anchor" href="#一级封锁协议"></a> 一级封锁协议</h3><ul><li>事务T在修改数据R之前必须先对其加X锁，直到事务结束才释放。<ul><li>正常结束（COMMIT）</li><li>非正常结束（ROLLBACK）</li></ul></li></ul><p>但是如果仅仅是读数据，没有加锁，所以不能保证可重复读和不读脏数据</p><h3 id="二级封锁协议"><a class="markdownIt-Anchor" href="#二级封锁协议"></a> 二级封锁协议</h3><ol><li>一级封锁协议</li><li>事务T读取数据R之前必须加S锁，<strong>读完后</strong>释放</li></ol><p>可以防止丢失修改和读脏数据，不保证可重复读</p><h3 id="三级封锁协议"><a class="markdownIt-Anchor" href="#三级封锁协议"></a> 三级封锁协议</h3><ol><li>一级封锁协议</li><li>事务T在读取数据R之前必须先对其加S锁，直到<strong>事务结束</strong>才释放</li></ol><p><img src="https://s2.loli.net/2022/06/20/Skt1fsTm8NKpyMG.png" alt=""></p><h2 id="活锁"><a class="markdownIt-Anchor" href="#活锁"></a> 活锁</h2><p>T2有可能永远等待，这就是活锁的情形</p><p>避免活锁：采用先来先服务的策略</p><h2 id="死锁"><a class="markdownIt-Anchor" href="#死锁"></a> 死锁</h2><p>T1在等待T2 ，而T2又在等待T1 ， T1和T2两个事务永远不能结束，形成死锁</p><p><strong>死锁的预防</strong></p><ul><li><p>一次锁法</p><p>要求每个事务必须一次将所有要使用的数据全部加锁，否则就不能继续执行</p></li><li><p>顺序锁法</p><p>预先对数据对象规定一个封锁顺序，所有事务都按这个顺序实行封锁</p></li></ul><p><strong>死锁的诊断</strong></p><ul><li>超时法（规定时限）</li><li>等待图法（出现回路-&gt;出现死锁）</li></ul><p><strong>死锁的解除</strong></p><ul><li>选择一个处理死锁代价最小的事务，将其撤消</li><li>释放此事务持有的所有的锁，使其它事务能继续运行下去</li></ul><h2 id="封锁粒度"><a class="markdownIt-Anchor" href="#封锁粒度"></a> 封锁粒度</h2><p>封锁的对象：逻辑单元，物理单元</p><ul><li>逻辑单元: 属性值、属性值的集合、元组、关系、索引项、整个索引、整个数据库等</li><li>物理单元：页（数据页或索引页）、物理记录等</li></ul><h3 id="选择封锁粒度的原则"><a class="markdownIt-Anchor" href="#选择封锁粒度的原则"></a> 选择封锁粒度的原则</h3><ul><li>多粒度封锁</li><li>选择封锁粒度</li></ul><p><strong>多粒度封锁协议</strong></p><p>显示封锁和隐式封锁</p><blockquote><p>例如，事务T要对关系R1加X锁</p><p>系统必须搜索其上级结点数据库、关系R1</p><p>还要搜索R1的下级结点，即R1中的每一个元组</p><p>如果其中某一个数据对象已经加了不相容锁，则T必须等待</p></blockquote><ul><li>所有上级结点<ul><li>检查本事务的显式封锁是否与该数据对象上的隐式封锁冲突：(由上级结点已加的封锁造成的）</li></ul></li><li>所有下级结点<ul><li>看上面的显式封锁是否与本事务的隐式封锁（将加到下级结点的封锁）冲突</li></ul></li></ul><h2 id="意向锁"><a class="markdownIt-Anchor" href="#意向锁"></a> 意向锁</h2><p>提高对某个数据对象加锁时系统的检查效率</p><ul><li>如果对一个结点加意向锁，则说明该结点的下层结点正在被加锁</li><li>对任一结点加基本锁，必须先对它的上层结点加意向锁</li><li>例如，对任一元组加锁时，必须先对它所在的数据库和关系加意向锁</li></ul><p>意向共享锁 IS锁</p><p>意向排他锁 IX锁</p><p>共享意向排他锁</p><ul><li>如果对一个数据对象加SIX锁，表示对它加S锁，再加IX锁，即SIX = S + IX</li><li>例：对某个表加SIX锁，则表示该事务要读整个表（所以要对该表加S锁），同时会更新个别元组（所以要对该表加IX锁）</li></ul><h2 id="锁的强度"><a class="markdownIt-Anchor" href="#锁的强度"></a> 锁的强度</h2><p>锁的强度是指它对其他锁的排斥程度</p><p>强锁代替弱锁：安全</p><p><img src="https://s2.loli.net/2022/06/20/gF4MtGj9epca1DS.png" alt=""></p><h3 id="具有意向锁的多粒度封锁方法"><a class="markdownIt-Anchor" href="#具有意向锁的多粒度封锁方法"></a> <strong>具有意向锁的多粒度封锁方法</strong></h3><ul><li>申请封锁时应该按自上而下的次序进行</li><li>释放封锁时则应该按自下而上的次序进行</li></ul><p><strong>作用</strong></p><ul><li>提高了系统的并发度</li><li>减少了加锁和解锁的开销</li><li>在实际的数据库管理系统产品中得到广泛应用</li></ul><h1 id="nosql"><a class="markdownIt-Anchor" href="#nosql"></a> NoSQL</h1><h2 id="阻抗失谐"><a class="markdownIt-Anchor" href="#阻抗失谐"></a> 阻抗失谐</h2><ul><li><p>关系模型把数据组织成 关系和元组而内存中数据结构无此限制，他们可以使用的数据组织形式更丰富</p></li><li><p>如果在内存中使用了较为丰富的数据结构，那么要把它保存到磁盘之前，必须先将其转换成“关系形式。于是就发生了“阻抗失谐”：需要在两种不同的表示形式之间转译</p></li></ul><h2 id="集群问题"><a class="markdownIt-Anchor" href="#集群问题"></a> 集群问题</h2><p><strong>分片和复制</strong></p><ul><li>在负载分散的同时，应用程序必须控制所有分片，需要知道数据库中的每份小数据的存储情况</li><li>如何确保跨分片的查询、参照完整性(referential integrity)、 事务、一致性控制(consistency control)等操作</li></ul><h2 id="nosql特性"><a class="markdownIt-Anchor" href="#nosql特性"></a> NoSQL特性</h2><ul><li>不适用关系模型</li><li>在集群中运行良好</li><li>开源</li><li>无模式</li><li>适用于21世纪互联网公司</li></ul><h2 id="聚合"><a class="markdownIt-Anchor" href="#聚合"></a> 聚合</h2><ul><li>把一组相互关联的对象视为一个整体单元来操作，而这个单元就叫聚合（aggregate）</li><li>面向聚合操作数据时所用的单元，其结构比元组集合复杂得多</li></ul><p><img src="https://s2.loli.net/2022/06/20/SI8FriKMuJw3RE9.png" alt="两个聚合"></p><h3 id="聚合之间的关系"><a class="markdownIt-Anchor" href="#聚合之间的关系"></a> 聚合之间的关系</h3><ul><li>例如：把订单和客户放在两个聚合中，但是想在它们之间设定某种关系，以便能根据订单查出客户数据<ul><li>要提供这种关联，最简单的办法就是把客户ID嵌入订单的聚合数据中。在应用层级提供关联。</li><li>在数据库层级提供聚合之间关系的表达机制</li></ul></li></ul><h3 id="聚合-集群和事务处理"><a class="markdownIt-Anchor" href="#聚合-集群和事务处理"></a> 聚合、集群和事务处理</h3><ul><li>在集群上运行时，需要把采集数据时所需的节点数降至最小</li><li>通常情况下，面向聚合的数据库不支持跨越多个聚合的ACID事务。它每次只能在一个聚合结构上执行原子操作</li></ul><h2 id="主要的nosql数据模型"><a class="markdownIt-Anchor" href="#主要的nosql数据模型"></a> 主要的NoSQL数据模型</h2><ul><li>键值数据模型</li><li>文档数据模型</li><li>图数据库</li><li>列族数据库</li></ul><h2 id=""><a class="markdownIt-Anchor" href="#"></a> </h2><h4 id="为什么需要nosql"><a class="markdownIt-Anchor" href="#为什么需要nosql"></a> 为什么需要nosql</h4><ul><li>应用所需要的数据结构和关系型数据库里能表达的数据结构不一致，需要繁琐的业务逻辑去转化</li><li>自己来处理集群问题，自己调整完整性、一致性和效益之间的权衡决策</li></ul><h4 id="聚合-2"><a class="markdownIt-Anchor" href="#聚合-2"></a> 聚合</h4><ul><li><p>把一组相互关联的对象视为一个整体单元来操作，这个单元就是聚合</p></li><li><p>关系型数据库没有“聚合”，称之为“聚合无知”</p></li><li><p>“聚合无知”可以很容易以不同方式来查看数据</p></li></ul><h4 id="和关系型数据库的区别"><a class="markdownIt-Anchor" href="#和关系型数据库的区别"></a> 和关系型数据库的区别</h4><ul><li><p>无模式</p></li><li><p>是和关系型数据库的最大差异</p></li><li><p>可以很方便存储格式不一致的数据</p></li><li><p>但取数据时很难以某种统一的格式取出多个数据</p></li><li><p>nosql通常没有对事务的支持</p></li></ul><h4 id="分布式模型"><a class="markdownIt-Anchor" href="#分布式模型"></a> 分布式模型</h4><ul><li><p>分片和对等</p></li><li><p>主从复制和对等复制</p></li><li><p>“一致性”和“持久性”约束</p></li><li><p>CAP定理</p></li><li><p>一致性</p></li><li><p>可用性</p></li><li><p>分区耐受性</p></li></ul><p>因为必须要保证“分区耐受性”，所以必须要再“一致性”和“可用性”做权衡</p><p>因为要完全做到“持久性”代价较大，所以也需要适当牺牲“持久性”来提高“可用性”</p><h4 id="仲裁"><a class="markdownIt-Anchor" href="#仲裁"></a> 仲裁</h4><p>为了确保“强一致性”</p><ul><li><p>N：复制因子，有多少份数据</p></li><li><p>对等式分布模型</p></li><li><p>写入：W&gt;N/2</p></li><li><p>写入的节点必须要过半数</p></li><li><p>读取：W+R&gt;N</p></li><li><p>必然有一个节点又被写又被读</p></li><li><p>常见情况</p></li><li><p>W=R=2,N=3</p></li><li><p>主从式分布模型</p></li><li><p>写入和读取都是只需要从主节点里获取</p></li></ul><h4 id="四种常见的nosql"><a class="markdownIt-Anchor" href="#四种常见的nosql"></a> 四种常见的nosql</h4><ul><li>每一个数据库基本存放的想法</li><li>适合做什么</li><li>不适合做什么</li><li>不要求具体细节</li></ul><h5 id="键值数据库"><a class="markdownIt-Anchor" href="#键值数据库"></a> 键值数据库</h5><p><strong>特点</strong></p><ul><li>要存放的数据都是独立的，一条条的</li></ul><p><strong>存放想法</strong></p><ul><li><p>一张简单的哈希表，通过键来获取值</p></li><li><p>值可以是不同的数据类型，也可以是些通用的数据结构</p></li><li><p>存放在一个（无嵌套）的存储区中</p></li><li><p>同一存储区可能造成关键字冲突</p></li><li><p>可以使用领域存储区来存放跨越多个存储区的数据</p></li></ul><p><strong>适合场景</strong></p><ul><li><p>存放session</p></li><li><p>存放用户配置信息</p></li><li><p>购物车数据</p></li></ul><p><strong>不适用场合</strong></p><ul><li><p>数据间有联系（也就是说每一条数据不满足原子性）</p></li><li><p>含有多项操作的事务</p></li><li><p>模糊查询（不记得键的名字了）</p></li><li><p>操作关键字的集合（操作多个关键字）</p></li></ul><h5 id="文档数据库"><a class="markdownIt-Anchor" href="#文档数据库"></a> 文档数据库</h5><p><strong>特点</strong></p><p>存放的一些很相似，但又不完全相同的数据（文档）</p><p>文档可以嵌套（树形结构）</p><p><strong>存放想法</strong></p><ul><li><p>“文档”是文档数据库中的主要概念</p></li><li><p>格式可以是xml，json等</p></li><li><p>文档具备自述性，呈现出分层的树状结构</p></li><li><p>文档彼此相似，又不完全相同</p></li><li><p>放在同一“集合”里的各文档的“数据格式”不同</p></li><li><p>文档可以嵌套基本数据类型，也可以嵌入“子文档”</p></li><li><p>无空属性</p></li></ul><p><strong>适合场景</strong></p><ul><li>事件记录</li><li>网站分析</li><li>内容管理系统及博客平台</li><li>电商程序</li></ul><p><strong>不适用场合</strong></p><ul><li>包含多项操作的复杂事务</li><li>要查询持续变化的聚合结构（查询语句也需要对应改变）</li></ul><h5 id="列族数据库"><a class="markdownIt-Anchor" href="#列族数据库"></a> 列族数据库</h5><p><strong>特点</strong></p><ul><li>和关系型数据库很像</li><li>查询变更成本高，数据结构变更成本低</li></ul><p><strong>存放想法</strong></p><ul><li>基本存储单元的“列”</li><li>每个键值对都占据一列，且都带有时间戳</li><li>可以只给某一行加上某个列，各行不一定要具备完全相同的列</li><li>超列族</li><li>某列中包含一个由小列组成的映射表</li><li>键空间</li><li>和关系型数据库的“数据库”类似</li><li>必须先创建键空间，才能增加列族</li></ul><p><strong>适合场景</strong></p><ul><li>事件记录</li><li>内容管理系统和博客平台</li><li>计数器</li><li>限期</li></ul><p><strong>不适用场合</strong></p><ul><li>需要事务的操作</li><li>需要使用到分组操作函数（sum、avg等）操作</li><li>无法确定查询模式的变化情况（需要更改列族的设计）</li><li>和关系型数据库相反（数据模式修改成本高，但查询模式修改成本低）</li></ul><h5 id="图数据库"><a class="markdownIt-Anchor" href="#图数据库"></a> 图数据库</h5><p><strong>特点</strong></p><p>图</p><ul><li>新增关系比较容易，但要改变节点和关系就很困难</li><li>可以很好的支持遍历、查询路径等多种图的操作和算法</li></ul><p><strong>存放想法</strong></p><ul><li>存放实体和实体之间的关系</li><li>具有图的数据结构</li><li>节点</li><li>边</li><li>具有属性</li><li>有方向性</li><li>大多数值都源自于关系，关系可以用于图的遍历</li></ul><p><strong>适合场景</strong></p><ul><li>富含连接关系的领域</li><li>互联数据</li><li>交通路线等基于位置的服务</li><li>推荐引擎</li></ul><p><strong>不适用场合</strong></p><ul><li>需要更新某个实体</li><li>数据量太大</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一章&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#第一章&quot;&gt;&lt;/a&gt; 第一章&lt;/h1&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h2&gt;
&lt;ul&gt;
&lt;l</summary>
      
    
    
    
    <category term="数据库" scheme="http://little-hurui.cloud/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="数据管理基础" scheme="http://little-hurui.cloud/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="数据管理基础" scheme="http://little-hurui.cloud/tags/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/"/>
    
    <category term="MySQL" scheme="http://little-hurui.cloud/tags/MySQL/"/>
    
    <category term="NoSQL" scheme="http://little-hurui.cloud/tags/NoSQL/"/>
    
  </entry>
  
  <entry>
    <title>设计模式入门</title>
    <link href="http://little-hurui.cloud/2022/06/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%85%A5%E9%97%A8/"/>
    <id>http://little-hurui.cloud/2022/06/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%85%A5%E9%97%A8/</id>
    <published>2022-06-18T06:26:49.000Z</published>
    <updated>2022-06-18T08:52:09.363Z</updated>
    
    <content type="html"><![CDATA[<h1 id="软件设计模式"><a class="markdownIt-Anchor" href="#软件设计模式"></a> 软件设计模式</h1><h2 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h2><p>“设计模式”这个术语最初并不是出现在软件设计中，而是被用于建筑领域的设计中。</p><p>1977 年，美国著名建筑大师、加利福尼亚大学伯克利分校环境结构中心主任克里斯托夫·亚历山大（Christopher Alexander）在他的著作《建筑模式语言：城镇、建筑、构造（A Pattern Language: Towns Building Construction）中描述了一些常见的建筑设计问题，并提出了 253 种关于对城镇、邻里、住宅、花园和房间等进行设计的基本模式</p><h1 id="umlunified-modeling-language-统一建模语言"><a class="markdownIt-Anchor" href="#umlunified-modeling-language-统一建模语言"></a> UML（Unified Modeling Language 统一建模语言）</h1><h2 id="类图-class-diagrams"><a class="markdownIt-Anchor" href="#类图-class-diagrams"></a> 类图 Class Diagrams</h2><ol><li><p>类</p><ol><li><p>类名</p></li><li><p>属性</p></li><li><p>操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[可见性]名称(参数列表):[返回类型]</span><br><span class="line">+display():void</span><br></pre></td></tr></table></figure></li></ol><p>类图中，需注意以下几点：</p><ul><li>抽象类或抽象方法用斜体表示</li><li>如果是接口，则在类名上方加 &lt;<interface>&gt;</interface></li><li>字段和方法返回值的数据类型非必需</li><li>静态类或静态方法加下划线</li></ul></li><li><p>接口</p><p>接口（Interface）是一种特殊的类，它具有类的结构但不可被实例化，只可以被子类实现。它包含抽象操作，但不包含属性。它描述了类或组件对外可见的动作。在 UML 中，接口使用一个带有名称的小圆圈来进行表示</p></li><li><p>类图</p><p><img src="https://s2.loli.net/2022/06/18/6AhYQmzb5tOf3DJ.gif" alt=""></p></li></ol><h3 id="类之间的关系"><a class="markdownIt-Anchor" href="#类之间的关系"></a> 类之间的关系</h3><ol><li><p>依赖关系（Dependency）</p><p><strong>依赖（Dependency）关系</strong>是一种使用（USE）关系，它是对象之间耦合度最弱的一种关联方式，是临时性的关联。在代码中，某个类的方法通过局部变量、方法的参数或者对静态方法的调用来访问另一个类（被依赖类）中的某些方法来完成一些职责。</p><p>在 UML 类图中，依赖关系使用带箭头的虚线来表示，箭头从使用类指向被依赖的类</p></li><li><p>关联关系（Association）</p><p><strong>关联（Association）关系</strong>是对象之间的一种引用关系，用于表示一类对象与另一类对象之间的联系，如老师和学生、师傅和徒弟、丈夫和妻子等。关联关系是类与类之间最常用的一种关系，分为一般关联关系、聚合关系和组合关系。我们先介绍一般关联。</p><p>关联可以是双向的，也可以是单向的。在 UML 类图中，双向的关联可以用带两个箭头或者没有箭头的实线来表示，单向的关联用带一个箭头的实线来表示，箭头从使用类指向被关联的类。也可以在关联线的两端标注角色名，代表两种不同的角色</p><p><img src="https://s2.loli.net/2022/06/18/BjEOn2dX7UlxLQf.gif" alt=""></p></li><li><p>聚合关系（Aggregation）</p><p>**聚合（Aggregation）**关系是关联关系的一种，是强关联关系，是整体和部分之间的关系，<strong>是 has-a 的关系。</strong></p><p>聚合关系也是通过成员对象来实现的，其中成员对象是整体对象的一部分，但是成员对象可以脱离整体对象而独立存在。例如，学校与老师的关系，学校包含老师，但如果学校停办了，老师依然存在。</p><p>在 UML 类图中，聚合关系可以用带空心菱形的实线来表示，菱形指向整体。如下是大学和教师的关系图。</p><p><img src="https://s2.loli.net/2022/06/18/bzcSdJ1uhRmUsnZ.gif" alt=""></p></li><li><p>组合关系（Composition）</p><p>组合关系是一种更强的聚合关系，是contains-a的关系</p><p>在组合关系中，整体对象控制部分对象的生命周期，一旦整体不存在，部分也不存在</p><p>在UML类图中，组合关系用实心菱形表示，指向整体</p></li><li><p>泛化关系（Generalization）</p><p>**泛化（Generalization）**关系是对象之间耦合度最大的一种关系，表示一般与特殊的关系，是父类与子类之间的关系，<strong>是一种继承关系，是 is-a 的关系</strong>。</p><p>在 UML 类图中，泛化关系用带空心三角箭头的实线来表示，箭头从子类指向父类。在代码实现时，使用面向对象的继承机制来实现泛化关系。例如，Student 类和 Teacher 类都是 Person 类的子类，其类图如下所示。</p><p><img src="https://s2.loli.net/2022/06/18/f1Uc9VX3SklBZ4p.gif" alt="泛化关系的实例"></p></li><li><p>实现关系（Realization）</p><p><strong>实现（Realization）关系</strong>是接口与实现类之间的关系。在这种关系中，类实现了接口，类中的操作实现了接口中所声明的所有的抽象操作。</p><p>在 UML 类图中，实现关系使用带空心三角箭头的虚线来表示，箭头从实现类指向接口。例如，汽车和船实现了交通工具，其类图如下所示。</p><p><img src="https://s2.loli.net/2022/06/18/JIdfmpqbMi8Vns9.gif" alt="实现关系的实例"></p></li></ol><p><img src="https://s2.loli.net/2022/06/18/xRcAMg6BpUvWT2P.jpg" alt="动物衍生关系描述的类图"></p><h2 id="用例图-usecase-diagrams"><a class="markdownIt-Anchor" href="#用例图-usecase-diagrams"></a> 用例图 Usecase Diagrams</h2><h2 id="包图-package-diagrams"><a class="markdownIt-Anchor" href="#包图-package-diagrams"></a> 包图 Package Diagrams</h2><h2 id="顺序图-sequence-diagrams"><a class="markdownIt-Anchor" href="#顺序图-sequence-diagrams"></a> 顺序图 Sequence Diagrams</h2><h1 id="开闭原则open-closed-principle-ocp"><a class="markdownIt-Anchor" href="#开闭原则open-closed-principle-ocp"></a> 开闭原则（Open Closed Principle, OCP)</h1><p>开闭原则的含义是：当应用的需求改变时，在不修改软件实体的源代码或者二进制代码的前提下，可以扩展模块的功能，使其满足新的需求。</p><h2 id="作用"><a class="markdownIt-Anchor" href="#作用"></a> 作用</h2><ol><li>软件测试时只要对拓展的代码进行测试</li><li>提高代码的可用性</li><li>提高软件的可维护性</li></ol><h2 id="实现方法"><a class="markdownIt-Anchor" href="#实现方法"></a> 实现方法</h2><p>”抽象约束，封装变化“</p><p>即通过接口或者抽象类为软件实体定义一个相对稳定的抽象层，而将相同的可变因素封装在相同的具体实现类中</p><h1 id="里氏替换原则liskov-subtitution-principle-lsp"><a class="markdownIt-Anchor" href="#里氏替换原则liskov-subtitution-principle-lsp"></a> 里氏替换原则（Liskov Subtitution Principle， LSP）</h1><p>继承必须确保超类所拥有的性质在子类中仍然成立（Inheritance should ensure that any property proved about supertype objects also holds for subtype objects）</p><h2 id="作用-2"><a class="markdownIt-Anchor" href="#作用-2"></a> 作用</h2><ol><li>是实现开闭原则的重要方式之一</li><li>克服了继承中重写父类造成的可复用性变差的缺点</li><li>是动作正确性的保证，类的拓展不会引入新的错误</li><li>加强程序的健壮性，同时可以做到非常好的兼容性，提高维护性，可拓展性，降低风险</li></ol><h2 id="实现方法-2"><a class="markdownIt-Anchor" href="#实现方法-2"></a> 实现方法</h2><p>里氏替换原则通俗来讲就是：子类可以扩展父类的功能，但不能改变父类原有的功能。也就是说：子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法</p><ul><li>子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法</li><li>子类中可以增加自己特有的方法</li><li>当子类的方法重载父类的方法时，方法的前置条件（即方法的输入参数）要比父类的方法更宽松</li><li>当子类的方法实现父类的方法时（重写/重载或实现抽象方法），方法的后置条件（即方法的的输出/返回值）要比父类的方法更严格或相等</li></ul><h1 id="依赖倒置原则dependence-inversion-principle-dip"><a class="markdownIt-Anchor" href="#依赖倒置原则dependence-inversion-principle-dip"></a> 依赖倒置原则（Dependence Inversion Principle， DIP）</h1><p>依赖倒置原则的原始定义为：</p><ol><li>高层模块不应该依赖低层模块，两者都应该依赖其抽象；</li><li>抽象不应该依赖细节，细节应该依赖抽象</li></ol><p>依赖倒置原则是实现开闭原则的重要途径之一，它降低了客户与实现模块之间的耦合</p><h2 id="作用-3"><a class="markdownIt-Anchor" href="#作用-3"></a> 作用</h2><ul><li>依赖倒置原则可以降低类间的耦合性。</li><li>依赖倒置原则可以提高系统的稳定性。</li><li>依赖倒置原则可以减少并行开发引起的风险。</li><li>依赖倒置原则可以提高代码的可读性和可维护性</li></ul><h2 id="实现方法-3"><a class="markdownIt-Anchor" href="#实现方法-3"></a> 实现方法</h2><ol><li>每个类尽量提供接口或抽象类，或者两者都具备。</li><li>变量的声明类型尽量是接口或者是抽象类。</li><li>任何类都不应该从具体类派生。</li><li>使用继承时尽量遵循里氏替换原则</li></ol><p><img src="https://s2.loli.net/2022/06/18/W6jngHFAODrC4MJ.png" alt=""></p><h1 id="单一职责原则single-responsibility-principlesrp"><a class="markdownIt-Anchor" href="#单一职责原则single-responsibility-principlesrp"></a> 单一职责原则（Single Responsibility Principle，SRP）</h1><p>单一职责原则规定一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分</p><h2 id="作用-4"><a class="markdownIt-Anchor" href="#作用-4"></a> 作用</h2><ol><li>一个职责的变化可能会削弱或者抑制这个类实现其他职责的能力；</li><li>当客户端需要该对象的某一个职责时，不得不将其他不需要的职责全都包含进来，从而造成冗余代码或代码的浪费</li></ol><h1 id="接口隔离原则interface-segregation-principleisp"><a class="markdownIt-Anchor" href="#接口隔离原则interface-segregation-principleisp"></a> 接口隔离原则（Interface Segregation Principle，ISP）</h1><p>要求程序员尽量将臃肿庞大的接口拆分成更小的和更具体的接口，让接口中只包含客户感兴趣的方法</p><ul><li>单一职责原则注重的是职责，而接口隔离原则注重的是对接口依赖的隔离。</li><li>单一职责原则主要是约束类，它针对的是程序中的实现和细节；接口隔离原则主要约束接口，主要针对抽象和程序整体框架的构建</li></ul><h1 id="迪米特法则law-of-demeterlod"><a class="markdownIt-Anchor" href="#迪米特法则law-of-demeterlod"></a> 迪米特法则（Law of Demeter，LoD）</h1><p>又称最小知识原则</p><p>迪米特法则的定义是：只与你的直接朋友交谈，不跟“陌生人”说话（Talk only to your immediate friends and not to strangers）。</p><p>其含义是：如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性</p><h2 id="实现方法-4"><a class="markdownIt-Anchor" href="#实现方法-4"></a> 实现方法</h2><p>从迪米特法则的定义和特点可知，它强调以下两点：</p><ol><li>从依赖者的角度来说，只依赖应该依赖的对象。</li><li>从被依赖者的角度说，只暴露应该暴露的方法</li></ol><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><table><thead><tr><th>设计原则</th><th>一句话归纳</th><th>目的</th></tr></thead><tbody><tr><td>开闭原则</td><td>对扩展开放，对修改关闭</td><td>降低维护带来的新风险</td></tr><tr><td>依赖倒置原则</td><td>高层不应该依赖低层，要面向接口编程</td><td>更利于代码结构的升级扩展</td></tr><tr><td>单一职责原则</td><td>一个类只干一件事，实现类要单一</td><td>便于理解，提高代码的可读性</td></tr><tr><td>接口隔离原则</td><td>一个接口只干一件事，接口要精简单一</td><td>功能解耦，高聚合、低耦合</td></tr><tr><td>迪米特法则</td><td>不该知道的不要知道，一个类应该保持对其它对象最少的了解，降低耦合度</td><td>只和朋友交流，不和陌生人说话，减少代码臃肿</td></tr><tr><td>里氏替换原则</td><td>不要破坏继承体系，子类重写方法功能发生改变，不应该影响父类方法的含义</td><td>防止继承泛滥</td></tr><tr><td>合成复用原则</td><td>尽量使用组合或者聚合关系实现代码复用，少使用继承</td><td>降低代码耦合</td></tr></tbody></table><h1 id="单例模式"><a class="markdownIt-Anchor" href="#单例模式"></a> 单例模式</h1><p>一个类只有一个实例</p><p>单例对象必须由单例类自行创建</p><p>单例类对外提供一个访问该单例的全局访问点</p><h1 id="简单工厂模式"><a class="markdownIt-Anchor" href="#简单工厂模式"></a> 简单工厂模式</h1><h1 id="工厂方法模式"><a class="markdownIt-Anchor" href="#工厂方法模式"></a> 工厂方法模式</h1><h1 id="抽象工厂模式"><a class="markdownIt-Anchor" href="#抽象工厂模式"></a> 抽象工厂模式</h1><p>抽象工厂（AbstractFactory）模式的定义：是一种为访问类提供一个创建一组相关或相互依赖对象的接口，且访问类无须指定所要产品的具体类就能得到同族的不同等级的产品的模式结构</p><h2 id="模式的结构"><a class="markdownIt-Anchor" href="#模式的结构"></a> 模式的结构</h2><p>抽象工厂模式的主要角色如下。</p><ol><li>抽象工厂（Abstract Factory）：提供了创建产品的接口，它包含多个创建产品的方法 newProduct()，可以创建多个不同等级的产品。</li><li>具体工厂（Concrete Factory）：主要是实现抽象工厂中的多个抽象方法，完成具体产品的创建。</li><li>抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能，抽象工厂模式有多个抽象产品。</li><li>具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间是多对一的关系</li></ol><h1 id="策略模式"><a class="markdownIt-Anchor" href="#策略模式"></a> 策略模式</h1><p>策略（Strategy）模式的定义：该模式定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的变化不会影响使用算法的客户。策略模式属于对象行为模式，它通过对算法进行封装，把使用算法的责任和算法的实现分割开来，并委派给不同的对象对这些算法进行管理。</p><h2 id="模式的结构-2"><a class="markdownIt-Anchor" href="#模式的结构-2"></a> 模式的结构</h2><p>策略模式的主要角色如下。</p><ol><li>抽象策略（Strategy）类：定义了一个公共接口，各种不同的算法以不同的方式实现这个接口，环境角色使用这个接口调用不同的算法，一般使用接口或抽象类实现。</li><li>具体策略（Concrete Strategy）类：实现了抽象策略定义的接口，提供具体的算法实现。</li><li>环境（Context）类：持有一个策略类的引用，最终给客户端调用</li></ol><h1 id="总结-2"><a class="markdownIt-Anchor" href="#总结-2"></a> 总结</h1><table><thead><tr><th>分类</th><th>设计模式</th><th>简述</th><th>一句话归纳</th><th>目的</th><th>生活案例</th></tr></thead><tbody><tr><td>创建型设计模式 （简单来说就是用来创建对象的）</td><td>工厂模式（Factory Pattern）</td><td>不同条件下创建不同实例</td><td>产品标准化，生产更高效</td><td>封装创建细节</td><td>实体工厂</td></tr><tr><td>单例模式（Singleton Pattern）</td><td>保证一个类仅有一个实例，并且提供一个全局访问点</td><td>世上只有一个我</td><td>保证独一无二</td><td>CEO</td><td></td></tr><tr><td>原型模式（Prototype Pattern）</td><td>通过拷贝原型创建新的对象</td><td>拔一根猴毛，吹出千万个</td><td>高效创建对象</td><td>克隆</td><td></td></tr><tr><td>建造者模式（Builder Pattern）</td><td>用来创建复杂的复合对象</td><td>高配中配和低配，想选哪配就哪配</td><td>开放个性配置步骤</td><td>选配</td><td></td></tr><tr><td>结构型设计模式 （关注类和对象的组合）</td><td>代理模式（Proxy Pattern）</td><td>为其他对象提供一种代理以控制对这个对象的访问</td><td>没有资源没时间，得找别人来帮忙</td><td>增强职责</td><td>媒婆</td></tr><tr><td>外观模式（Facade Pattern）</td><td>对外提供一个统一的接口用来访问子系统</td><td>打开一扇门，通向全世界</td><td>统一访问入口</td><td>前台</td><td></td></tr><tr><td>装饰器模式（Decorator Pattern）</td><td>为对象添加新功能</td><td>他大舅他二舅都是他舅</td><td>灵活扩展、同宗同源</td><td>煎饼</td><td></td></tr><tr><td>享元模式（Flyweight Pattern）</td><td>使用对象池来减少重复对象的创建</td><td>优化资源配置，减少重复浪费</td><td>共享资源池</td><td>全国社保联网</td><td></td></tr><tr><td>组合模式（Composite Pattern）</td><td>将整体与局部（树形结构）进行递归组合，让客户端能够以一种的方式对其进行处理</td><td>人在一起叫团伙，心在一起叫团队</td><td>统一整体和个体</td><td>组织架构树</td><td></td></tr><tr><td>适配器模式（Adapter Pattern）</td><td>将原来不兼容的两个类融合在一起</td><td>万能充电器</td><td>兼容转换</td><td>电源适配</td><td></td></tr><tr><td>桥接模式（Bridge Pattern）</td><td>将两个能够独立变化的部分分离开来</td><td>约定优于配置</td><td>不允许用继承</td><td>桥</td><td></td></tr><tr><td>行为型设计模式 （关注对象之间的通信）</td><td>模板模式（Template Pattern）</td><td>定义一套流程模板，根据需要实现模板中的操作</td><td>流程全部标准化，需要微调请覆盖</td><td>逻辑复用</td><td>把大象装进冰箱</td></tr><tr><td>策略模式（Strategy Pattern）</td><td>封装不同的算法，算法之间能互相替换</td><td>条条大道通罗马，具体哪条你来定</td><td>把选择权交给用户</td><td>选择支付方式</td><td></td></tr><tr><td>责任链模式（Chain of Responsibility Pattern）</td><td>拦截的类都实现统一接口，每个接收者都包含对下一个接收者的引用。将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。</td><td>各人自扫门前雪，莫管他们瓦上霜</td><td>解耦处理逻辑</td><td>踢皮球</td><td></td></tr><tr><td>迭代器模式（Iterator Pattern）</td><td>提供一种方法顺序访问一个聚合对象中的各个元素</td><td>流水线上坐一天，每个包裹扫一遍</td><td>统一对集合的访问方式</td><td>逐个检票进站</td><td></td></tr><tr><td>命令模式（Command Pattern）</td><td>将请求封装成命令，并记录下来，能够撤销与重做</td><td>运筹帷幄之中，决胜千里之外</td><td>解耦请求和处理</td><td>遥控器</td><td></td></tr><tr><td>状态模式（State Pattern）</td><td>根据不同的状态做出不同的行为</td><td>状态驱动行为，行为决定状态</td><td>绑定状态和行为</td><td>订单状态跟踪</td><td></td></tr><tr><td>备忘录模式（Memento Pattern）</td><td>保存对象的状态，在需要时进行恢复</td><td>失足不成千古恨，想重来时就重来</td><td>备份、后悔机制</td><td>草稿箱</td><td></td></tr><tr><td>中介者模式（Mediator Pattern）</td><td>将对象之间的通信关联关系封装到一个中介类中单独处理，从而使其耦合松散</td><td>联系方式我给你，怎么搞定我不管</td><td>统一管理网状资源</td><td>朋友圈</td><td></td></tr><tr><td>解释器模式（Interpreter Pattern）</td><td>给定一个语言，定义它的语法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子</td><td>我想说”方言“，一切解释权都归我</td><td>实现特定语法解析</td><td>摩斯密码</td><td></td></tr><tr><td>观察者模式（Observer Pattern）</td><td>状态发生改变时通知观察者，一对多的关系</td><td>到点就通知我</td><td>解耦观察者与被观察者</td><td>闹钟</td><td></td></tr><tr><td>访问者模式（Visitor Pattern）</td><td>稳定数据结构，定义新的操作行为</td><td>横看成岭侧成峰，远近高低各不同</td><td>解耦数据结构和数据操作</td><td>KPI考核</td><td></td></tr><tr><td></td><td>委派模式（Delegate Pattern）</td><td>允许对象组合实现与继承相同的代码重用，负责任务的调用和分配</td><td>这个需求很简单，怎么实现我不管</td><td>只对结果负责</td><td>授权委托书</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;软件设计模式&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#软件设计模式&quot;&gt;&lt;/a&gt; 软件设计模式&lt;/h1&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h2</summary>
      
    
    
    
    <category term="软件工程" scheme="http://little-hurui.cloud/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="软件工程与计算2" scheme="http://little-hurui.cloud/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%972/"/>
    
    
    <category term="软件工程" scheme="http://little-hurui.cloud/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="设计模式" scheme="http://little-hurui.cloud/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>中国近代史纲要</title>
    <link href="http://little-hurui.cloud/2022/06/12/%E4%B8%AD%E5%9B%BD%E8%BF%91%E4%BB%A3%E5%8F%B2%E7%BA%B2%E8%A6%81/"/>
    <id>http://little-hurui.cloud/2022/06/12/%E4%B8%AD%E5%9B%BD%E8%BF%91%E4%BB%A3%E5%8F%B2%E7%BA%B2%E8%A6%81/</id>
    <published>2022-06-12T06:02:20.000Z</published>
    <updated>2022-06-13T09:29:48.038Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章"><a class="markdownIt-Anchor" href="#第一章"></a> 第一章</h1><h2 id="第一次鸦片战争"><a class="markdownIt-Anchor" href="#第一次鸦片战争"></a> 第一次鸦片战争 😻</h2><h3 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h3><p>定义：1840年至1842年英国对中国发动的一场战争，也是中国近代史的开端。<br>时间：1840.6-1842.8<br>地点：中国东南沿海</p><h3 id="原因"><a class="markdownIt-Anchor" href="#原因"></a> 原因</h3><ol><li>英国贸易逆差，率先完成工业革命的英国迫切要求打开中国大门（<strong>根本原因</strong>）</li><li>清政府的国力衰弱为战争的发动提供可能</li><li>林则徐虎门销烟运动 （<strong>直接原因</strong>）</li></ol><h3 id="签订条约"><a class="markdownIt-Anchor" href="#签订条约"></a> 签订条约</h3><table><thead><tr><th>Time</th><th>条约</th></tr></thead><tbody><tr><td>1842.8.29</td><td>中英《南京条约》</td></tr><tr><td>1843</td><td>中英《虎门条约》</td></tr><tr><td>1844.7</td><td>中美《望厦条约》</td></tr><tr><td>1844.10</td><td>中法《黄埔条约》</td></tr></tbody></table><h3 id="鸦片走私的影响"><a class="markdownIt-Anchor" href="#鸦片走私的影响"></a> 鸦片走私的影响</h3><ul><li>造成了中国白银的大量外流和财政危机</li><li>导致银鬼钱贱，加重了劳动人民的负担</li><li>直接毒害了中国人的身体和精神</li></ul><h3 id="为什么说鸦片战争时中国近代史的起点"><a class="markdownIt-Anchor" href="#为什么说鸦片战争时中国近代史的起点"></a> 为什么说鸦片战争时中国近代史的起点？</h3><ol><li>战争后中国的社会性质发生了根本性的变化，中国由封建社会变成了半殖民半封建社会</li><li>中国的革命任务发生变化，中国人民逐渐开始了反帝反侵略的资产阶级民主革命</li><li>社会主要矛盾发生了变化</li><li>中国的社会阶级发生了变化</li></ol><h2 id="近代中国"><a class="markdownIt-Anchor" href="#近代中国"></a> 近代中国</h2><h3 id="中国半半社会的基本特征"><a class="markdownIt-Anchor" href="#中国半半社会的基本特征"></a> 中国半半社会的基本特征</h3><ol><li><p>资本-帝国主义侵略势力不但逐步操纵了中国的财政和经济命脉，而且逐步控制了中国的政治，日益成为支配中国的决定性力量。</p></li><li><p>中国的封建势力日益衰败并同外国侵略势力相勾结，成为资本-帝国主义压迫、奴役中国人民的社会基础和统治支柱。</p></li><li><p>中国的自然经济基础虽然遭到破坏，但是封建剥削制度的根基-封建地主的土地所有制依然在广大地区内保持着，成为中国走向近代化</p><p>和民主化的严重障碍。</p></li><li><p>中国新兴的民族资本主义经济虽然已经产生，并在政治、文化生活中起了一定作用，但是在帝国主义封建主义的压迫下，他的发展很缓慢，力量很软弱，而且大部分与外国资本-帝国主义和本国封建主义都有或多或少的联系。</p></li><li><p>由于近代中国处于资本-帝国主义列强的争夺和间接统治之下，近代中国各地区经济、政治和文化的发展是极不平衡的，中国长期处于不统一状态。</p></li><li><p>在资本-帝国主义和封建主义的双重压迫下，中国的广大人民特别是农民日益贫困化以致大批破产，过着饥寒交迫和毫无政治权力的生活。</p></li></ol><h3 id="阶级关系变动"><a class="markdownIt-Anchor" href="#阶级关系变动"></a> 阶级关系变动</h3><ul><li>旧的封建统治阶级：地主阶级 — 继续占有大量土地，掌握政权，对人民实行专制统治</li><li>变化：一部分由乡村转入城市（城居地主） 一部分转化为资本家 大部分仍主要依靠地租剥削生活</li><li>旧的被统治阶级：农民阶级 — 仍是近代中国社会人数最多的被剥削阶级</li><li>新兴被压迫阶级：工人阶级 来源：主要是城乡破产失业的农民、手工业者、城市贫民</li><li>新产生的阶级：资产阶级 构成较为复杂 一部分是官僚买办资本家 另一部分是民族资本家</li></ul><h3 id="近代中国社会的主要矛盾"><a class="markdownIt-Anchor" href="#近代中国社会的主要矛盾"></a> 近代中国社会的主要矛盾</h3><ul><li>帝国主义和中华民族的矛盾（主要矛盾</li><li>封建主义和人民大众的矛盾</li></ul><h3 id="两大历史人物"><a class="markdownIt-Anchor" href="#两大历史人物"></a> 两大历史人物</h3><ul><li>推翻帝国主义，封建主义联合统治的半半社会，争取民族独立和人民解放</li><li>改变中国经济社会落后的面貌，实现国家富强和人民富裕</li></ul><h1 id="第二章"><a class="markdownIt-Anchor" href="#第二章"></a> 第二章</h1><h2 id="太平天国"><a class="markdownIt-Anchor" href="#太平天国"></a> 太平天国😻</h2><h3 id="金田起义和太平天国建立"><a class="markdownIt-Anchor" href="#金田起义和太平天国建立"></a> 金田起义和太平天国建立</h3><p>背景：残酷的压迫和剥削，迫使广大人民尤其是农民群众走上反抗斗争的道路。<br>1842-1850：各族人民的反清起义在百次以上<br>1843：洪秀全创立了拜上帝教</p><p><strong>拜上帝教😻</strong></p><ul><li>1843年由洪秀全撷取基督教教义中反映下层民众要求的平等思想和宗教仪式，从农民斗争的需要出发加以改造，并利用其发动和组织群众的宗教。)</li><li>1851.1：洪秀全率拜上帝教教众在广西省桂平县金田村发动起义，建号太平天国。（随后，太平军从广西经湖南、湖北、江西、安徽，一直打到江苏，席卷6省。）</li><li>1853.3：占领南京，定为首都，改名天京，正式宣告太平天国农民政权的建立。</li></ul><h3 id="天朝田亩制度和资政新篇"><a class="markdownIt-Anchor" href="#天朝田亩制度和资政新篇"></a> 《天朝田亩制度》和《资政新篇》</h3><p>《天》</p><ul><li>最能体现太平天国社会理想和这次农民起义特色的纲领性文件</li><li>平均分配土地（凡天下田，天下人共耕）</li></ul><p>《资》</p><ul><li>太平天国后期颁布的社会发展方案 1859 洪仁玕</li></ul><h3 id="从天京事变-太平天国败亡"><a class="markdownIt-Anchor" href="#从天京事变-太平天国败亡"></a> 从天京事变 —&gt; 太平天国败亡</h3><p>1856.9 天京事变 （自相残杀</p><p>1864.6 洪秀全病故</p><p>1864.7 天京被湘军攻破，太平天国起义失败</p><h3 id="农民斗争的意义和局限"><a class="markdownIt-Anchor" href="#农民斗争的意义和局限"></a> 农民斗争的意义和局限</h3><p><strong>意义</strong></p><ul><li>沉重打击了封建统治阶级，强烈撼动了清政府的统治根基</li><li>是中国旧式农民战争的最高峰</li><li>冲击了孔子和儒家经点的正统权威，一定程度上削弱了封建统治的精神支柱</li><li>有力地地打击了外国侵略势力</li><li>在19世纪中叶的亚洲民族解放运动中，太平天国起义时其中时间最长，规模最大，影响最深的一次，它和其他亚洲国家的民族解放运动合在一起，冲击了西方殖民主义在亚洲的统治</li></ul><h3 id="太平天国农民起义失败的原因和教训"><a class="markdownIt-Anchor" href="#太平天国农民起义失败的原因和教训"></a> 太平天国农民起义失败的原因和教训</h3><ul><li>农民阶级不是新的生产力和生产关系的代表，无法克服小生产者固有的阶级局限性，缺乏科学思想理论的指导，没有先进阶级的领导，无法从根本上提出完整的，正确的政治纲领和社会改革方案</li><li>后期无法制止和克服领导集团自身腐败现象的滋生</li><li>军事战略上出现了重大失误</li><li>以宗教来发动、组织群众的，但是，拜上帝教教义不仅不能正确指导斗争，而且给农民战争带来了危害</li><li>未能正确的对待儒学</li><li>对于西方资本主义侵略者缺乏理性的认识</li><li>太平天国起义及其失败表明，在半半的中国，农民具有伟大的革命潜力，但它自身不慎负担起领导反帝反封建斗争取得胜利的重任，单纯的农民战争不可能完成民族独立和人民解放的历史任务</li></ul><h2 id="洋务运动"><a class="markdownIt-Anchor" href="#洋务运动"></a> 洋务运动 😻</h2><p>洋务运动是19世纪60年代初 ，第二次鸦片战争结束后，在清政府镇压太平天国起义与捻军起义的过程中兴起的，主张引进，仿造西方的武器装备和学习西方的科学技术，创设近代企业，兴办洋务</p><p><strong>洋务派代表</strong>：奕沂、曾国藩、李鸿章、左宗棠、张之洞等</p><p><strong>指导思想</strong>： 中体西用 张之洞</p><p><strong>三个方面</strong></p><ol><li><p>兴办近代企业</p><p>洋务派首先兴办的是军用工业，这些企业都是官办的，最早创办的</p><table><thead><tr><th>年份</th><th>人</th><th>企业</th></tr></thead><tbody><tr><td>1861</td><td></td><td>安庆军械所</td></tr><tr><td>1865</td><td>曾国藩支持，李鸿章筹办</td><td>上海江南制造总局（当时最大的兵工厂）</td></tr><tr><td>1865</td><td>李鸿章</td><td>金陵机器局</td></tr><tr><td>1866</td><td>左宗棠</td><td>福州船政局（最大的造船厂）</td></tr><tr><td>1867</td><td>崇厚</td><td>天津机器局</td></tr><tr><td>1890</td><td>张之洞</td><td>湖北枪炮厂</td></tr></tbody></table></li><li><p>建立新式海路军</p><p>19世纪60年代，京师和天津、上海、广州、福州等地的军队纷纷改用洋枪、洋炮，聘用外国教练李鸿章的淮军，左宗棠的湘军也是用洋枪的军队</p><p>1874年，日本派兵侵犯中国台湾，清政府筹办海防、建设海军之议随之兴起，19世纪 70 -90年代分别建成 <strong>福建水师、广东水师、南洋水师、北洋水师</strong>。其中北洋水师是清政府的海军主力，拥有舰艇20多艘，归李鸿章管辖</p></li><li><p>创办新式学堂，派遣留学生</p><ol><li><strong>翻译学堂</strong>，如京师同文馆，培养翻译人才</li><li><strong>工艺学堂</strong>，培养电报，铁路，矿物，西医等专门人才</li><li><strong>军事学堂</strong>，如船政学堂，培养新式海军人才</li></ol><p>在创办新式学堂的同时，先后派遣赴美幼童和官费赴欧留学生两百多人</p></li></ol><h3 id="洋务运动失败-及其原因"><a class="markdownIt-Anchor" href="#洋务运动失败-及其原因"></a> 洋务运动失败 及其原因</h3><ul><li>洋务运动具有封建性</li><li>洋务运动对列强具有依赖性</li><li>洋务运动的管理具有腐朽性</li></ul><h3 id="总理各国事务衙门"><a class="markdownIt-Anchor" href="#总理各国事务衙门"></a> 总理各国事务衙门</h3><p>总理各国事务衙门是19世纪后期清政府为适应当时内忧外患并作的形势而设立的对外机构，是第二次鸦片战争以后清政府和外国侵略势力进一步相互勾结的产物</p><h2 id="戊戌变法"><a class="markdownIt-Anchor" href="#戊戌变法"></a> 戊戌变法 😻</h2><p>戊戌变法：1898年（戊戌年）以康有为为首的改良主义者 同光绪皇帝 所进行的资产阶级政治改革</p><p><strong>主要内容是</strong>：学习西方，提倡科学文化，改革政治，教育制度，发展农、工、商业等。</p><p>这次运动遭到守旧派的强烈反对，九月慈禧太后等发动政变，光绪被囚，维新派康有为梁启超 分别逃往法国和日本，谭嗣同等6人被杀害，历史103天的变法失败，也称<strong>百日维新</strong></p><h3 id="历史意义"><a class="markdownIt-Anchor" href="#历史意义"></a> 历史意义</h3><ul><li>戊戌维新是一次爱国救亡运动，维新派在民族危亡的关键时刻高举救亡图存的旗帜，要求通过变法、发展资本主义，是中国走向富强之路，维新派的政治实践和思想理论不仅贯穿着强烈的爱国主义精神，而且推动了中华民族的觉醒</li><li>戊戌维新运动是一场资产阶级性质的政治改革运动</li><li>戊戌维新运动更是一场思想启蒙运动</li><li>戊戌维新运动不仅在思想启蒙和文化教育方面开创了新的局面，而且在社会风习方面也提出了许多新的主张</li></ul><h3 id="失败原因"><a class="markdownIt-Anchor" href="#失败原因"></a> 失败原因</h3><p>戊戌维新运动的失败，主要由于维新派自身的局限，和以慈禧太后为首的强大的守旧势力的反对，维新派本身的局限性突出表在：</p><ol><li>不敢否定封建主义，他们在政治上不敢否定封建君主制度，在经济上虽然要求发展资本主义，却未触及封建主义的经济基础–封建土地所有制</li><li>对帝国主义抱有幻想，他们大声疾呼救亡图存，却又幻想西方列强能帮助自己变法维新，结果是处处碰壁</li><li>惧怕人民群众，维新派的活动基本上局限于官僚士大夫和知识分子的小圈子，他们不但脱离人民群众而且惧怕甚至仇视人民群众， 因此，运动未能得到人民群众的支持</li></ol><h3 id="历史教训"><a class="markdownIt-Anchor" href="#历史教训"></a> 历史教训</h3><ul><li>戊戌维新运动的失败不仅暴露了中国民族资产阶级的软弱性，同时，也说明在半殖民地半封建的旧中国，企图通过统治着自上而下的改良道路，是根本行不通的。</li><li>要想争取国家的独立、民主、富强，必须用革命的手段，推翻帝国主义、封建主义联合统治的半殖民地半封建的社会制度。</li></ul><h3 id="康有为"><a class="markdownIt-Anchor" href="#康有为"></a> 康有为</h3><p>《新学伪经考》 《孔子改制考》</p><p>政治主张：将西方资本主义政治学说与中国传统儒家四相结合</p><h3 id="梁启超"><a class="markdownIt-Anchor" href="#梁启超"></a> 梁启超</h3><p>《变法通议》</p><p>参与“公车上书”、呼吁救亡图存，倡导近代文学革命运动理论，领导北京、上海的强学会，创办《时务报》，宣传变法的主张、为维新变法制造舆论</p><h3 id="严复"><a class="markdownIt-Anchor" href="#严复"></a> 严复</h3><p>翻译《天演论》，并与1897年12月出版在《国文汇编》，维新派领袖康有为见此译稿后，发出“严重未见有此人”的惊叹，称严复译《天演论》为中国西学第一人也</p><p>政治主张：用西方进化论思想来阐释维新变法</p><h1 id="第三章"><a class="markdownIt-Anchor" href="#第三章"></a> 第三章</h1><h2 id="辛亥革命"><a class="markdownIt-Anchor" href="#辛亥革命"></a> 辛亥革命 😻</h2><h3 id="保路运动"><a class="markdownIt-Anchor" href="#保路运动"></a> 保路运动</h3><p>1911，清政府宣布“铁路干线收归国有“，并与四国银行团订立粤汉，川汉铁路借款合同，借国有之名，吧铁路权利出卖给帝国主义，同时借此劫夺商股，激起民众的愤慨和反抗而发生在湖北、湖南、广东、四川四省的民众反抗运动，揭露了情真服卖国求荣的本质</p><h3 id="武昌起义"><a class="markdownIt-Anchor" href="#武昌起义"></a> 武昌起义</h3><p>1911年10月10日晚，由湖北新军中的共进会和文学社两个革命团体联合行动攻占湖广总督衙门，占领武昌，成立湖北军政府的革命运动。掀起了辛亥革命的高潮。</p><p><strong>历史意义</strong>：掀起了辛亥革命的高潮，打开了清王朝统治的缺口。由此到处燃起革命的烈火，腐朽的清王朝迅速土崩瓦解，使得在中国延续了两千多年的封建君主专制制度终于走向覆灭。<br><strong>辛亥革命</strong>是资产阶级领导的以反对君主专制制度、建立资产阶级共和国为目的的革命，是一次比较完全意义上的资产民主革命。在近代历史上，辛亥革命是中国人民救亡图存、振兴中华而奋起革命的一个里程碑，它使中国发生了历史性巨变</p><h3 id="历史意义为什么说孙中山领导的辛亥革命引起了近代中国的历史性巨大变化"><a class="markdownIt-Anchor" href="#历史意义为什么说孙中山领导的辛亥革命引起了近代中国的历史性巨大变化"></a> 历史意义（为什么说孙中山领导的辛亥革命引起了近代中国的历史性巨大变化？）</h3><p>辛亥革命是资产阶级领导的以反对君主专制制度、建立资产阶级共和国为目的的革命，是一次比较完全意义上的资产民主革命。在近代历史上，辛亥革命是中国人民救亡图存、振兴中华而奋起革命的一个里程碑，它使中国发生了历史性巨变。</p><ol><li>辛亥革命推翻了封建势力的政治代表、帝国主义在中国的代理人——清王朝的统治，沉重的打击了中外反动势力，使中国反动统治者在政治上乱了阵脚。</li><li>辛亥革命结束了统治中国两千多年的封建君主专制制度，建立了中国历史上第一个资产阶级共和政府。</li><li>辛亥革命给人们带来一次思想上的解放。</li><li>辛亥革命促使社会经济、思想习惯和社会风俗等方面发生了新的积极变化。</li><li>辛亥革命不仅在一定程度上打击了帝国主义的侵略势力，而且推动了亚洲各国民族解放运动的高涨</li></ol><h3 id="失败原因-2"><a class="markdownIt-Anchor" href="#失败原因-2"></a> 失败原因</h3><ul><li>从根本上说，是因为在帝国主义时代，在半半的中国，资本主义的建国方案是行不通的。帝国主义与袁世凯为代表的大地主、大买办以及旧官僚、立宪派一起勾结起来，从外部和内部绞杀了这场革命。</li><li>从主观方面来说，在于它的领导者-资产阶级本身存在着许多弱点和错误，一是没有提出彻底的反帝反封建的革命纲领，二是不能充分发动和依靠人民群众，三是不能建立坚强的革命政党，作为团建一切革命力量的强有力的核心。</li></ul><h1 id="第四章"><a class="markdownIt-Anchor" href="#第四章"></a> 第四章</h1><h2 id="新文化运动"><a class="markdownIt-Anchor" href="#新文化运动"></a> 新文化运动 😻</h2><p><strong>新文化运动是1915年</strong>陈独秀在上海创办《青年杂志》开始，提倡民主与科学（旧称"德先生”与“赛先生”），批判守旧落后的当时的中国文化，并传播马克思主义思想。在中国现代历史上产生了很大影响。</p><h3 id="历史意义-2"><a class="markdownIt-Anchor" href="#历史意义-2"></a> 历史意义</h3><p>在社会上掀起了思想解放潮流，冲决了禁锢人们思想的闸门，为马克思主义在中国的传播奠定了基础</p><h3 id="五四之前新文化运动的局限"><a class="markdownIt-Anchor" href="#五四之前新文化运动的局限"></a> 五四之前新文化运动的局限</h3><ul><li>新文化运动的倡导者批判孔学，是为了给中国发展资本主义扫清障碍。但是，由于资产阶级共和国的方案在中国行不通，所以从根本上说，提倡资产阶级民主主义，并不能为人们提供一种有效的思想武器去认识中国，去对中国社会进行改造。</li><li>新文化运动的倡导者把改造国民性置于优先的地位 。（但是，离开改造产生封建思想的社会环境的革命实践，仅仅依靠少数人的呐喊，依靠有限的宣传手段，要根本改造由这种社会环境所产生的思想、所造成的国民性，是不可能的）</li><li>那时的许多领导人物，还没有马克思主义的批判精神，他们使用的方法，一般还是资产阶级的方法</li></ul><h2 id="五四运动"><a class="markdownIt-Anchor" href="#五四运动"></a> 五四运动😻</h2><p>五四运动是1919年5月4日发生在北京以青年学生为主的一场学生运动，以及广大群众、市民、工商人士等中下阶层广泛参与的一次示威游行、请愿、罢课、罢工、暴力对抗政府等多形式的爱国运动。是中国人民彻底的反对帝国主义、封建主义的爱国运动</p><h3 id="历史意义-3"><a class="markdownIt-Anchor" href="#历史意义-3"></a> 历史意义</h3><ul><li>五四运动是中国旧民主主义革命走向新民主主义革命的转折点，在近代以来中华民族追求民族独立和发展进步的历史进程中具有里程碑意义。它以彻底反帝反封建的革命性、追求救国强国真理的进步性、各族各界群众积极参与的广泛性，推动了中国社会进步，促进了马克思主义在中国的传播，促进了马克思主义同中国工人运动的结合，为中国共产党的成立做了思想上千部上的准备，为新的革命力量、革命文化、革命斗争登上历史舞台创造了条件。</li><li>五四运动孕育了以爱国、进步、民主、科学为主要内容的伟大五四精神，其核心是爱国主义。</li><li>五四运动改变了以往只有觉悟的革命者而缺少觉醒的人民大众的斗争状况，实现了中国人民和中华民族自鸦片战争以来的第一次全面觉醒</li></ul><p>总结：五四运动标志着中国新民主主义革命的开端。</p><h2 id="中国共产党的成立"><a class="markdownIt-Anchor" href="#中国共产党的成立"></a> 中国共产党的成立</h2><h3 id="为什么说中国共产党的成立是开天辟地的大事变"><a class="markdownIt-Anchor" href="#为什么说中国共产党的成立是开天辟地的大事变"></a> 为什么说中国共产党的成立是“开天辟地”的大事变？</h3><ol><li><p>中国共产党的成立是中国革命有了坚强的领导核心，灾难深重的中国人民有了可以依赖的组织者和领导者，中国革命从此不断向前发展，由民主主义革命向社会主义革命推进。陈独秀在上海创办骿杂鄹</p></li><li><p>中国共产党的成立，使中国革命有了科学的指导思想。中国共产党以马克思主义为指导思想，把马克思主义和中国革命的具体实践相结合，制定了正确的革命纲领和斗争策略，为中国人民指明了斗争的目标和走向胜利的道路。</p></li><li><p>中国共产党的成立，使中国革命有了新的革命方法，并沟通了中国革命和世界无产阶级革命之间的联系，为中国革命获得了广泛的国际援助和避免走资本主义提供了客观可能性。</p></li></ol><p><strong>中国共产党成立的历史特点：</strong></p><p>中国共产党是在特定的社会历史条件下成立的。</p><ul><li>一方面，它成立于俄国十月革命取得胜利，第二国际社会民主主义、修正主义破产之后 它所接受的，是具有完整的科学世界观和社会革命论的马克思主义。</li><li>另一方面，它是在半殖民地半封建中国的工人运动基础上产生的 中国工人阶级身受帝国主义、本国资产阶级和封建势力的三重压迫，具有坚强的革命性。</li><li>所以，中国共产党一开始就是一个以马克思列宁主义理论为基础的党，是一个区别于第二国际旧式社会改良党的新型工人阶级革命政党。</li></ul><p><strong>中国共产党成立的历史意义：</strong></p><ul><li>中国共产党的成立，是中华民族发展史上一个开天辟地的大事变，具有伟大而深远的意义。</li></ul><ol><li>近代以后中国人民的反帝反封建斗争之所以屡遭挫折和失败，最重要的原因就是没有先进的坚强的政党作为凝聚力量的领导核心。中国共产党的诞生，从根本上改变了这种局面。</li><li>中国共产党一经成立，就把实现共产主义作为党的最高理想和最终目标，义无反顾肩负起实现中华民族伟大复兴的历史使命 中国人民由此踏上了争取民族独立、自身解放的光明道路，开启了实现国家富强、人民富裕的历史征程</li><li>中国共产党的先驱们创建了中国共产党，形成了坚持真理、坚守理想，践行初心、担当使命，不怕牺牲、英勇斗争，对党忠诚、不负人民的伟大建党精神，这是中国共产党的精神之源 正是对这一精神的坚守与践行、光大与发扬，构建起中国共产党人的精神谱系，激励中国共产党和中国人民创造了人间奇迹</li><li>中国共产党的成立，深刻改变了近代以后中华民族发展的方向和进程，深刻改变了中国人民和中华民族的前途和命运，深刻改变了世界发展的趋势和格局</li></ol><h2 id="国共第一次合作"><a class="markdownIt-Anchor" href="#国共第一次合作"></a> 国共第一次合作 😻</h2><h3 id="形成过程"><a class="markdownIt-Anchor" href="#形成过程"></a> 形成过程</h3><p>二七惨案的发生使得中国工人运动暂时转入低潮，中国共产党看到这时的中国革命力量远不如帝国主义和封建势力强大，决定采取更为积极的步骤，联合孙中山领导的中国国民党。</p><p>而孙中山因依靠军阀打军阀屡遭挫折，受到中共领导的个人运动影响原因合作。</p><p>1923年1月，共产国际执委会作出《关于中国共产党与国民党的关系的问题的决议》，对国共合作起了推进作用。</p><p>6月中共三大在广州召开，决定共产党员以个人身份加入国民党以实现国共合作的原则，国共合作的步伐大大加快。</p><p>1924年1月，国民党一大召开，对三民主义进行了新的解释，即新三民主义，使得国共合作有了政治基础。国民党一大事实上确立了联俄联共、扶助农工的革命政策，标志着第一次国共合作正式形成</p><h1 id="第五章"><a class="markdownIt-Anchor" href="#第五章"></a> 第五章</h1><h2 id="中共革命道路"><a class="markdownIt-Anchor" href="#中共革命道路"></a> 中共革命道路😻</h2><h3 id="探索过程"><a class="markdownIt-Anchor" href="#探索过程"></a> 探索过程</h3><ul><li><strong>开展武装反抗国民党统治的斗争</strong>：1927年8月，中共中央在汉口召开紧急会议（八七会议），彻底清算了大革命后期的陈独秀右倾机会主义错误，确定了土地革命和武装反抗国民党方针。八七会议以后，举行了南昌起义、湘赣边界秋收起义、广州起义。中国革命由此发展到了一个新阶段。</li><li><strong>走农村包围城市的革命道路</strong>：以农村为重点，到农村去发动农民，进行土地革命，开展武装斗争，建设根据地，这是1927年以后中国革命发展的客观规律所要求的。农村包围城市、武装夺取政权这条革命心道路的开辟，依靠了党和人民的集体奋斗，凝聚了党和人民的集体智慧。而毛泽东是其中的杰出代表。</li><li><strong>毛泽东不仅在实践中首先把革命进攻的方向指向了农村，而且从理论上阐明了武装斗争的极端重要性和农村应当成为党的工作中心的思想</strong>：1928年，毛泽东写了《中国的红色政权为社么能够存在？》、《井冈山的斗争》等文章，明确指出以农业为主要经济的中国革命，以军事发展暴动，是一种特征；还科学阐明了共产党领导的土地革命、武装斗争于根据地建设这三者之间的辩证统一关系。1930年，《星星之火可以燎原》一文中，毛泽东指出：红军、游击队和红色区域的建立和发展，是半殖民地中国在无产阶级领导下的农民斗争的最高形式，和半殖民地农民斗争发展的必然结果，并且无疑议的是促进全国革命高潮的最重要因素。</li><li>农村包围城市，武装夺取政权理论，是对1927年革命失败后中国共产党领导的红军和根据地斗争经验的科学概括。它是以毛泽东为代表的中国共产党人同当时党内盛行的把马克思主义教条化、把共产国际和苏联经验神圣化的错误倾向做坚决斗争基础上形成的。农村包围城市、武装夺取政权理论的提出，标志着中国化的马克思主义：毛泽东思想的初步形成。</li><li>随着革命心道路的开辟，中国革命开始走向复兴。中国共产党领导的红军和根据地逐步发展起来。红军游击战争实际上已经成为中国革命的主要形式，农村根据地成为积蓄和锻炼革命力量的主要战略阵地。</li></ul><p><strong>重要转变：农村包围城市、武装夺取政权的道路的确立</strong></p><h2 id="红军长征"><a class="markdownIt-Anchor" href="#红军长征"></a> 红军长征😻</h2><ul><li>开始原因：王明等人的“左”倾教条主义错误使得红军第五次反围剿失败，不得不退出南方根据地实行战略转移——长征。</li><li>转折：1935年1月遵义会议召开，遵义会议开始确⽴以⽑泽东为主要代表的⻢克思主义的正确路线在党中央的领导地位，从⽽在极其危急的情况下挽救了中国共产党、挽救了中国⼯农红军、挽救了中国⾰命，成为中国共产党历史上⼀个⽣死攸关的转折点。这为党和⾰命事业转危为安、不断打开新局⾯提供了最重要的保证。</li></ul><h3 id="意义"><a class="markdownIt-Anchor" href="#意义"></a> 意义</h3><p>中国工农红军长征是一次理想信念的伟大远征，是一次检验真理的伟大远征，是一次唤醒民众的伟大远征，是一次开创新局的伟大远征</p><ol><li>长征的胜利，极大地促进了党在政治上和思想上的成熟。中国共产党进一步认识到，只有把马克思主义基本原理同中国革命具体实际结合起来，独立自主解决中国革命的重大问题，才能把革命事业引向胜利</li><li>长征的胜利，是中国革命转危为安的关键 。毛泽东曾形象地指出：“长征是历史纪录上的第一次，长征是宣言书，长征是宣传队，长征是播种机</li><li>长征宣告了国民党反动派消灭中国共产党和红军的图谋彻底失败，宣告了中国共产党和红军肩负着民族希望胜利实现了北上抗日的战略转移，实现了中国共产党和中国革命事业从挫折走向胜利的伟大转折，开启了中国共产党为实现民族独立、人民解放而斗争的新的伟大进军。</li><li>长征铸就了伟大的长征精神，这就是：把全国人民和中华民族的根本利益看得高千一切，坚定革命的理想和信念，坚信正义事业必然胜利的精神；为了救国救民，不怕任何艰难险阻，不惜付出一切牺牲的精神；坚持独立自主、实事求是，一切从实际出发的精神；顾全大局、严守纪律、紧密团结的精神；紧紧依靠人民群众，同人民群众生死相依、患难与共、艰苦奋斗的精神 长征精神为中国革命不断从胜利走向胜利提供了强大精神动力</li></ol><p>长征一结束，中国革命的新局面就开始了</p><h1 id="第六章"><a class="markdownIt-Anchor" href="#第六章"></a> 第六章</h1><h2 id="抗日统一战线"><a class="markdownIt-Anchor" href="#抗日统一战线"></a> 抗日统一战线😻</h2><h3 id="形成"><a class="markdownIt-Anchor" href="#形成"></a> 形成</h3><p>1931年日本发动侵华战争，使中国大片土地沦失，华北危机、中华民族危机之际，1936年经过双十二事变（西安事变）国共第二次合作，抗日民族统一战线正式形成。1937年“卢沟桥事变”后全国抗日战争终于爆发了，参加统一战线的不仅有农民、工人、城市小资产阶级和民族资产阶级，还包括除了汉奸、大地主、大资产阶级投降派以外的一切政治力量</p><h3 id="三三制"><a class="markdownIt-Anchor" href="#三三制"></a> 三三制😻</h3><p>在抗日民族统一战线中，中国共产党始终坚持独立自主原则，为确保无产阶级在统一战线中的政治领导权；坚持放手发动群众，开展敌后游击战争，扩大抗日人民武装和抗日根据地，而在根据地内建立“三三制”政权，即在政权人员的分配上，共产党员(代表工人阶级和贫农)、左派进步分子(代表小资产阶级)、中间分子及其它分子(代表中产阶级和开明绅士)大体各占三分之一</p><h2 id="抗日战争"><a class="markdownIt-Anchor" href="#抗日战争"></a> 抗日战争</h2><h3 id="抗日战争胜利的国际意义"><a class="markdownIt-Anchor" href="#抗日战争胜利的国际意义"></a> 抗日战争胜利的国际意义</h3><ul><li>中国人民抗日战争从一开始就具有拯救人类文明、保卫世界和平的重大意义，是世界反法西斯战争的重<br>要组成部分，中国战场是世界反法西斯战争的东方主战场。</li><li>中国坚持持久抗战，抗击和牵制着日军陆军主力，为同盟国军队实施战略反攻创造了有利条件。</li><li>中国作为作为亚太地区盟军对日作战的重要后方基地，还为盟军提供了大量战略物资和军事情报。</li><li>中国人民为了自己的解放，为了帮助同盟国，付出了巨大牺牲，作出了巨大贡献</li></ul><h3 id="抗战胜利的原因"><a class="markdownIt-Anchor" href="#抗战胜利的原因"></a> 抗战胜利的原因😻</h3><ul><li>第一，以爱国主义为核心的民族精神是中国人民抗日胜利的决定因素。</li><li>第二，中国共产党的中流砥柱作用是中国人民抗日战争胜利的关键。</li><li>第三，全民族抗战是中国人民抗日战争胜利的重要法宝。</li><li>第四，中国人民抗日战争的胜利，同世界所有爱好和平和正义的国家和人民、国际组织以及各种反法西斯力量的同情和支持是分不开的</li></ul><h3 id="抗战胜利的意义"><a class="markdownIt-Anchor" href="#抗战胜利的意义"></a> 抗战胜利的意义😻</h3><ul><li>中国⼈⺠抗⽇战争是20世纪中国和⼈类历史上的重⼤事件，为中华⺠族由近代以来陷⼊深重危机⾛向伟⼤复兴确⽴了历史转折点。</li><li>第⼀，中国⼈⺠抗⽇战争的胜利，彻底粉碎了⽇本军国主义殖⺠奴役中国的图谋。中国⼈⺠⽤⾃⼰的顽强奋战和巨⼤牺牲，迫使⽇本归还甲午战争以后从中国窃取的神圣领⼟,桿卫了国家主权和领⼟完整，彻底洗刷了近代以来抗击外来侵略屡战 屡败的⺠族耻辱。</li><li>第⼆，中国人民抗日战争的胜利，促进了中华⺠族的⼤团结，形成了伟⼤的抗战精神。 这是中国⼈⺠弥⾜珍贵的精神财富，永远是激励中国⼈⺠克服⼀切艰难险阻、为实现中华⺠族伟⼤复兴⽽奋⽃的强⼤精神动⼒。</li><li>第三，中国人民抗日战争的胜利，对世界各国夺取反法⻄斯战争的胜利、维护世界和平的事业产⽣了巨⼤影响。中国⼈⺠为最终战胜世界法⻄斯势⼒作岀的历史性贡献，在全世界⼈⺠⾯前树⽴了⼀个以弱胜强的范例，中国国际地位显著提高。中国⼈⺠赢得了世界爱好和平⼈⺠的尊敬，赢得了崇⾼的⺠族声誉。</li><li>第四，中国⼈⺠抗⽇战争的胜利，开辟了中华⺠族复兴的光明前景。经历抗⽇战争锤炼的中国⼈⺠进⼀步认识到：只有实现⺠族ᇿ⽴和⼈⺠解放，建⽴⼈⺠当家作主的新中国，才能真正实现⺠族振兴、⼈⺠幸福。中国共产党提出的改造旧中国、建设新中国的主张，代表了中国⼈⺠的根本利益。⼈⺠⾰命⼒量进⼀步发展壮⼤。这就为中国共产党团结带领全国⼈⺠继续奋⽃，赢得新⺠主主义⾰命的胜利、创建中华⼈⺠共和国，奠定了重要的基础。</li></ul><h1 id="第七章"><a class="markdownIt-Anchor" href="#第七章"></a> 第七章</h1><h2 id="重庆谈判"><a class="markdownIt-Anchor" href="#重庆谈判"></a> 重庆谈判😻</h2><p>是抗日战争胜利之际，中国共产党和中国国民党两党就中国未来的发展前途、建设大计在重庆进行的一次历史性会谈。</p><p>从1945年8月29日至10月10日，经过43天谈判，国共双方达成《政府与中共代表会谈纪要》，即“双十协定”。重庆谈判及达成的“双十协定”给中国人民带来了和平、民主、团结的希望和曙光。国民党统治集团违背全国人民迫切要求休养生息、和平建国的意愿，在1946年6月底全面撕毁“双十协定”</p><h2 id="国统区的危机"><a class="markdownIt-Anchor" href="#国统区的危机"></a> 国统区的危机😻</h2><p><strong>危机</strong>：国民政府由于其专制独裁的统治和官员的贪污腐败、大发国难财，在大后方严重丧失人心无限制的发放法币，造成了严重的通货膨胀和货币贬值。官僚资本主义极度膨胀，工农业生产严重萎缩，大批民族工商业濒于倒闭，城市失业人口数增加，广大农村饿殍遍野。国统区陷入严重经济危机。</p><p>例子：各种学生运动，如“一二·一运动”“五二O”运动，还有1947年的“抢米”风潮。</p><h2 id="共同纲领"><a class="markdownIt-Anchor" href="#共同纲领"></a> 共同纲领😻</h2><p>1949年9月21日，中国人民政治协商会议通过了《中国人民政治协商会议共同纲领》简称《共同纲领》，成为各国人民的大宪法，在一个时期内起着新中国临时宪法的作用。</p><p>⼈⺠政协是中国共产党领导的以⼯农联盟为基础的⼈⺠⺠主统⼀战线的组织形式</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一章&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#第一章&quot;&gt;&lt;/a&gt; 第一章&lt;/h1&gt;
&lt;h2 id=&quot;第一次鸦片战争&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#第一次鸦片战争&quot;&gt;&lt;/a&gt; 第一次鸦片</summary>
      
    
    
    
    
    <category term="近代史" scheme="http://little-hurui.cloud/tags/%E8%BF%91%E4%BB%A3%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>软工二复习</title>
    <link href="http://little-hurui.cloud/2022/06/09/%E8%BD%AF%E5%B7%A5%E4%BA%8C%E5%A4%8D%E4%B9%A0/"/>
    <id>http://little-hurui.cloud/2022/06/09/%E8%BD%AF%E5%B7%A5%E4%BA%8C%E5%A4%8D%E4%B9%A0/</id>
    <published>2022-06-09T06:02:44.000Z</published>
    <updated>2022-06-18T06:27:10.860Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一-二章"><a class="markdownIt-Anchor" href="#第一-二章"></a> 第一、二章</h1><h1 id="软件工程"><a class="markdownIt-Anchor" href="#软件工程"></a> 软件工程</h1><ul><li>应用系统的，规范的，可量化的方法来开发、运行和维护软件，即将工程应用到软件</li><li>对（1）中各种方法的研究</li></ul><h2 id="1950s-2020s的特点"><a class="markdownIt-Anchor" href="#1950s-2020s的特点"></a> 1950s-2020s的特点</h2><table><thead><tr><th>时间</th><th>特点</th></tr></thead><tbody><tr><td>1950s</td><td>科学计算；以机器为中心进行编程；像生产硬件一样生产软件</td></tr><tr><td>1960s</td><td>业务应用(批量数据处理和事物计算)；软件不同于硬件；用软件工艺的方式生产软件</td></tr><tr><td>1970s</td><td>结构化方法；瀑布模型；强调规则和纪律。它们奠定了软件工程的基础，是后续年代软件工程发展的支撑</td></tr><tr><td>1980s</td><td>追求生产力最大化；现代结构化方法/面向对象编程广泛应用；重视过程的作用</td></tr><tr><td>1990s</td><td>企业为中心的大规模软件系统开发；追求快速开发、可变更性和用户价值；web应用出现</td></tr><tr><td>2000s</td><td>大规模web应用；大量面向大众的web产品；追求快速开发、可变更性、用户价值和创新</td></tr><tr><td></td><td></td></tr></tbody></table><p><img src="https://s2.loli.net/2022/06/09/EnFkXylgIOJsWNv.png" alt=""></p><h1 id="第四章-项目启动"><a class="markdownIt-Anchor" href="#第四章-项目启动"></a> 第四章 项目启动</h1><h1 id="团队"><a class="markdownIt-Anchor" href="#团队"></a> 团队</h1><h2 id="分类"><a class="markdownIt-Anchor" href="#分类"></a> 分类</h2><ol><li>主程序员团队</li><li>民主团队</li><li>开放团队</li></ol><h2 id="团队建设"><a class="markdownIt-Anchor" href="#团队建设"></a> 团队建设</h2><ul><li>建设团队章程</li><li>持续成功</li><li>和谐沟通</li><li>不断总结</li><li>避免团队杀手<ul><li>防范式管理</li><li>官僚主义</li><li>地理分布：异地办公</li><li>时间分割：保证全天候有人在</li><li>产品质量的降低</li><li>虚假的最后期限</li><li>小圈子管理</li></ul></li></ul><h1 id="质量保障"><a class="markdownIt-Anchor" href="#质量保障"></a> 质量保障</h1><h2 id="措施"><a class="markdownIt-Anchor" href="#措施"></a> 措施</h2><ul><li>需求开发：需求评审和需求度量</li><li>体系结构：体系结构评审，集成测试（持续集成</li><li>详细设计：详细设计评审，设计度量，集成测试（持续集成</li><li>构造阶段：代码评审，代码度量，测试（测试驱动和持续集成</li><li>测试阶段：测试，测试度量</li><li>及时根据保障计划度量验证，质量验证的方法主要有评审，测试和质量度量</li></ul><h1 id="配置管理"><a class="markdownIt-Anchor" href="#配置管理"></a> 配置管理</h1><ol><li>标识配置项:确定应该被保留的部分，并且给予他们确定标识，包含配置项的特征，包括生产者、基线建立时间、使用者等。</li><li>版本管理：极其重要</li><li>变更控制：变更请求表单，教材61页</li><li>配置审计:验证配置项的完整性、正确性、一致性和可追踪性。</li><li>状态报告:反映当前的配置状态。</li><li>软件发布管理:将配置项发布到开发活动之外，例如发布给客户</li></ol><h1 id="第五章"><a class="markdownIt-Anchor" href="#第五章"></a> 第五章</h1><h1 id="需求"><a class="markdownIt-Anchor" href="#需求"></a> 需求</h1><h2 id="什么是需求"><a class="markdownIt-Anchor" href="#什么是需求"></a> 什么是需求</h2><ol><li>用户为了解决问题或达到某些目标所需要的条件或能力；</li><li>系统或系统部件为了满足合同、标准、规范或其它正式文档所规定的要求而需要具备的条件或能力；</li><li>对1或2中的一个条件或一种能力的一种文档化表述</li></ol><h2 id="需求分层"><a class="markdownIt-Anchor" href="#需求分层"></a> 需求分层</h2><p><img src="https://s2.loli.net/2022/06/09/lZkXE9ieWn6vjVR.png" alt=""></p><ol><li>业务需求：<ol><li>业务需求是高层次的解决方案和系统特性、系统开发的战略出发点、高层次的需求，描述为什么要开发系统。</li><li>Eg.在系统使用3个月后，销售额度应该提高20%(期望，没有从软件角度进行描述，业务需求)</li></ol></li><li>用户需求：<ol><li>执行具体任务的用户对系统所能完成任务的期望，描述了系统能帮用户做什么(直接用户、间接用户)</li><li>Eg.在系统要帮助收银员完成销售处理</li></ol></li><li>系统级需求<ol><li>需求分析模型：用户对<strong>系统行为的期望</strong>，每个系统级需求反映了<strong>一次外界与系统的交互行为</strong>，或者<strong>系统的一个实现细节</strong>(和用户需求有着很大的区别)</li><li>Eg.在接到客户经理的请求后，系统应该为客户经理提供所有会员的个⼈信息</li></ol></li></ol><h2 id="需求分类"><a class="markdownIt-Anchor" href="#需求分类"></a> 需求分类</h2><p><img src="https://s2.loli.net/2022/06/09/XEFlWwQOrstNRkq.png" alt=""></p><ol><li>需求<ol><li>项目需求(人的数量、计划成本、时间)<ul><li>R5：项⽬的成本要控制在60万元人民币以下。</li><li>R6：项⽬要在6个月内完成。</li></ul></li><li>过程需求(人的分工、合作、方法、工具)<ul><li>R7：在开发中，开发者要提交软件需求规格说明文档、设计描述文档和测试报告。</li><li>R8：项目要使用持续集成⽅法进行开发。</li></ul></li><li>系统需求<ol><li>软件需求</li><li>硬件需求</li><li>其他需求</li></ol></li><li>其他需求<ul><li>R9：系统要购买专用服务器，其规格不低于….。</li><li>R10：系统投⼊使⽤时，需要对⽤户进⾏1个星期的集中培训。</li></ul></li></ol></li><li>不切实际的需求<ul><li>R11：系统要分析会员的购买记录，预测该会员将来⼀周和⼀个月内、会购买的商品；(技术上不可行)</li><li>R12：系统要能够对每月的出入库以及销售行为进行标准的财务分析；(在有限的资源条件下可行)</li><li>R13：在使用系统时，收银员必须要在2个⼩时内完成一个销售处理的所有操作。(超出了软件所影响的问题域范围)</li></ul></li></ol><h2 id="软件需求分类"><a class="markdownIt-Anchor" href="#软件需求分类"></a> 软件需求分类</h2><ol><li>功能需求：和系统主要共作相关的需求，即在不考虑物理约束的情况下，用户希望系统所能够执行的活动，这些活动可以帮助用户完成任务。<strong>功能需求主要表现为系统和环境之间的行为交互</strong>。<ol><li>Eg.在接到客户经理的请求后，系统应该为客户经理提供所有会员的个人信息。</li></ol></li><li>数据需求(属于功能需求的一种,DR)：<strong>功能需求</strong>的补充：如果在功能需求部分明确定义了<strong>相关的数据结构</strong>，那么就不需要再行定义数据需求。数据需求是需要在数据库、⽂件或者其他介质中存储的数据描述，通常包括下列内容：<ul><li>各个功能使用的<strong>数据信息</strong>；</li><li>使用频率；</li><li>可访问性要求；</li><li><strong>数据实体及其关系</strong>；</li><li>完整性约束；</li><li><strong>数据保持</strong>要求。</li><li>Eg.系统需要存储的数据实体及其关系为图6-14的内容。(数据实体及其关系)</li><li>Eg.系统需要存储1年内的销售记录和退货记录。(数据保持)</li></ul></li><li>性能需求：系统整体或系统组成部分应该拥有的性能特征，例如CPU使用率、内存使用率等。<ol><li>速度：系统完成任务的时间(所有用户查询必须在10s内完成)</li><li>容量：系统能存储的数据量(系统因该能够存储至少100万个销售信息)</li><li>吞吐量：系统在连续的时间内完成的事务数量(解释器每分钟应该能够至少解析5000条没有错误的语句)</li><li>负载：系统可以承载的并发工作量(系统应该允许50个营业服务器同时从集中服务器上进行数据的上传或下载)</li><li>实时性：严格的实时要求(系统监测到异常时，监视器必须在0.5s内发出警报，和故障警报不一样，故障不是系统的正常功能)</li></ol></li><li>质量需求(QA)：系统为了满足<strong>规定的及隐含</strong>的所有要求而需要具备的要素称为质量<ol><li>可靠性：在规格时间间隔内和规定条件下，系统或部件执行所要求能力的能力。(在进⾏数据的下载和上传中，如果网络故障，系统不能出现故障。能不能检测网络中断，并且进行恢复)</li><li>可用性：软件系统在投⼊使用时可操作和可访问的程度或能实现其指定系统功能的概率。(系统的可用性要达到98%)</li><li>安全性：软件组织对其程序和数据进⾏未授权访问的能力，未授权的访问可能是有意，也可能是无意的。(VIP顾客只能查看⾃⼰的个⼈信息和购买记录)</li><li>可维护性：软件系统或部件能修改以排除故障、改进性能或其他属性或适应变更了的环境的容易程度，包括可修改性(Modiﬁability)和可扩展性(Extensibility)。(如果系统要增加新的特价类型，要能够在2个人月内完成。)</li><li>可移植性：系统或部件能从⼀种硬件或软件环境转换⾄另外⼀种环境的特性。(集中服务器要能够在1人月内从Window 7操作系统更换到Solaris 10操作系统。)</li><li>易用性：与⽤户使用软件所花费的努力及其对使用的评价相关的特性。(使⽤系统1个月的收银员进⾏销售处理的效率要达到10件商品/分钟。)</li><li>往往会有形容词和副词</li></ol></li><li>对外接口：系统和环境中其他系统之间需要建立的接口，包括硬件接口、软件接口、数据库接口等等。<ol><li>接口的用途</li><li>接口的输⼊输出</li><li>数据格式</li><li>命令格式</li><li>异常处理要求</li><li>Eg.注册使用Google Maps API</li></ol></li><li>约束：进⾏系统构造时需要遵守的约束，例如<strong>编程语言、硬件设施</strong>等<ol><li>系统开发及运行的环境(包括目标机器、操作系统、网络环境、编程语⾔、数据库管理系统等,Eg.系统使用Java语言进行开发)</li><li>问题域内的相关标准(包括法律法规、行业协定、企业规章等。)</li><li>商业规则:(用户在任务执⾏中的一些潜在规则也会限制开发⼈员设计和构建系统的选择范围)</li><li>Eg. 已过保质期的食品不能销售</li><li>Eg. 顾客可以使用美元付款</li></ol></li><li>注:需求的灵活性</li></ol><h1 id="第六章"><a class="markdownIt-Anchor" href="#第六章"></a> 第六章</h1><h1 id="用例图"><a class="markdownIt-Anchor" href="#用例图"></a> 用例图</h1><ol><li>用例:用例是"在系统(或者子系统或者类)和外部对象的<strong>交互</strong>当中所执行的行为序列的描述,包括<strong>各种不同的序列和错误的序列</strong>,它们能够联合提供⼀种<strong>有价值的服务</strong>"[Rumbaugh2004]。</li><li>图例:<ol><li>⽤例:椭圆</li><li>参与者:小人，是系统或其他系统对要开发的系统所扮演的角色。</li><li>关系:简单的就是一条直线，包括相关、泛化关系、包含关系和继承关系。</li><li>系统边界:是一个框</li></ol></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt6/8.png" alt=""></p><ol start="3"><li>用例图的建立步骤<ol><li>目标分析与解决方向的确定:需要实现什么，属于需求</li><li>寻找参与者:</li><li>寻找用例:</li><li>细化用例:判断标准是用例描述了为应对<strong>一个业务事件</strong>，由<strong>一个用户</strong>发起，并在<strong>一个连续时间段</strong>内完成，可以<strong>增加业务价值</strong>的任务。</li></ol></li><li>注意:<ol><li>不要将用例细化为没有独立业务价值的单个操作:例如,不要将用户管理细化为增加、修改和删除三个更⼩的用例,因为它们要联合起来才能体现出业务价值。</li><li>不要将同⼀个业务目标细化为不同用例:例如<strong>特价策略制定和赠送策略制定</strong>。</li><li>不要将没有业务价值(而是技术实现需要)的内容作为用例:常见的错误有<strong>登录</strong>(应该描述为安全性质量需求)、“数据验证/输入/输出数据检查”(应该描述为数据需求或者业务规则)、“连接数据库”(属性软件内部实现⽽不是需求)、网络传输等。</li><li>不要将单个步骤细化为用例</li><li>不要将片面的一个方面细化为用例</li></ol></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/summary/1.png" alt=""></p><h1 id="分析类概念类图"><a class="markdownIt-Anchor" href="#分析类概念类图"></a> 分析类/概念类图</h1><ol><li>图例:<ol><li>对象<ul><li>标识符:对象自治、对象请求写作</li><li>状态:存储数据，如密码、名称</li><li>行为:利用数据做什么</li></ul></li><li>类:对象集合的抽象</li><li>链接(link)(dependency)<ul><li>对象之间的互相协作的关系</li><li>描述了对象之间的物理或业务联系</li></ul></li><li>关联<ul><li>对象之间链接的抽象</li><li>聚合与组合，聚合集合可以为空</li></ul></li><li>继承:泛化关系</li></ol></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt6/18.png" alt=""><br><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt6/19.png" alt=""></p><ol start="2"><li>建立步骤<ol><li>对每个用例文本描述，尤其是场景描述，建⽴<strong>局部</strong>的概念类图<ul><li>根据用例的⽂本描述，<strong>识别候选类</strong>(名词分析法)</li><li><strong>筛选候选类</strong>，确定概念类(状态和行为)<ul><li>状态和行为:概念类</li><li>状态:其他概念类的行为</li><li>行为:需求是否遗漏</li><li>无状态无行为:完全剔除</li></ul></li><li><strong>识别关联</strong></li><li><strong>识别重要属性</strong></li></ul></li><li>将所有用例产⽣的局部概念类图进⾏合并，建⽴软件系统的整体概念类图</li><li>自己注:先画关联关系，再添加类的属性</li></ol></li><li>候选类识别(行为 + 状态)<ol><li>行为分析</li><li>名词分析</li><li>CRC</li></ol></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/summary/2.png" alt=""></p><h1 id="系统顺序图"><a class="markdownIt-Anchor" href="#系统顺序图"></a> 系统顺序图</h1><ol><li>图例：</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt6/26.png" alt=""><br><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt6/27.png" alt=""></p><ol start="2"><li>系统顺序图图例:<ol><li>alt一定要选(多选一):<strong>注意，每一种可选分支之间要用虚线分割，而且在表示执行态的圆柱上面要写监护条件，放在[]里面。</strong></li><li>opt一定要选(选择0或者1)</li><li>loop:表示循环，在旁边使用[]书写循环条件</li></ol></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt6/28.png" alt=""><br><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt6/29.png" alt=""></p><ol start="3"><li>步骤:<ol><li>确定上下文环境</li><li>根据用例描述找到交互对象</li><li>按照用例描述中的流程顺序逐步添加消息</li></ol></li></ol><h1 id="状态图"><a class="markdownIt-Anchor" href="#状态图"></a> 状态图</h1><h2 id="状态图-2"><a class="markdownIt-Anchor" href="#状态图-2"></a> 状态图</h2><ol><li>图例:<ol><li>状态：一组可观察的情况，描述了一个系统在给定时间的行为</li><li>状态转换：从一个状态到另一个状态的转换</li><li>事件：使系统表现出某种可预测的行为形式的事件</li><li>行为：由于过渡而发生的过程</li></ol></li></ol><p><img src="https://s2.loli.net/2022/06/09/d3pFhezvlxX6TH7.png" alt=""></p><ol start="2"><li>步骤:<ol><li>确定上下文环境，明确状态主体和状态主题对应的上下文环境</li><li>识别状态：状态的主体表现出的一些稳定状态</li><li>建立状态转换：建立状态之间的转换。</li><li>补充详细信息，完善状态图</li></ol></li></ol><h1 id="第七章"><a class="markdownIt-Anchor" href="#第七章"></a> 第七章</h1><h1 id="为什么需要需求规格说明"><a class="markdownIt-Anchor" href="#为什么需要需求规格说明"></a> 为什么需要需求规格说明</h1><ol><li><strong>方便交流</strong>：软件开发过程中，<strong>子任务与人员</strong>之间存在错综复杂的关系，存在大量的沟通和交流，所以要编写软件开发中要编写不同类型的文档，每种文档都是针对项目中需要广泛交流的内容。因为<strong>软件需求</strong>需要进行<strong>广泛交流</strong>，所以要把需求文档化。</li><li><strong>跟踪和度量</strong>：需求规格说明是在<strong>软件产品的角度以系统级需求列表的方式</strong>描述软件系统解决方案，书写需求规格说明，可以建立管理控制的基线，方便任务分配，制定工作计划，进行跟踪和度量。</li><li><strong>过程管理</strong>：在实验中，需求规格的重要性不只体现在结果上，还包括中间过程，在书写需求规格过程中，才真正把问题域的问题和分析模型的成果转化为系统级需求，方便小组成员真正明确需求，个人认为在这个阶段包含一部分的需求在发现和完整化</li></ol><h1 id="对给定的需求示例例判定并修正其错误"><a class="markdownIt-Anchor" href="#对给定的需求示例例判定并修正其错误"></a> 对给定的需求示例例，判定并修正其错误</h1><ol><li>技术文档写作要点(简洁，精确，易读，易修改)；<ol><li>简洁:动词名词+辅助词，不要使用复杂长句、形容词和副词。</li><li>精确:不能产生起义或无法理解。</li><li>易读(查询)：有效使⽤引言、目录、索引等能够增强⽂档易读性的⽅法，使⽤系统化的方式组织内容信息，提供⽂档内容的可读性。</li><li>易修改：使用相同的语句格式组织相关联或相似的信息；使用列表组织独立、并列的信息；使用编号表达繁杂信息之间的关系。引用而不是重复</li></ol></li><li>需求书写要点(使用用户术语，可验证，可行性)；</li><li>需求规格说明文档书写要点(充分利用标准的文档模板，保持所以内容位置得当；保持文档内的需求集具有完备性和一致性；为需求划分优先级)</li></ol><p><img src="https://s2.loli.net/2022/06/09/oMLRDnd6y9H7bAX.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. "After the payment process is complete, the relevant information should be appended to a log ﬁle."模糊的</span><br><span class="line">2. "The system should be constructed so that it will be easy to add new functionality in the future."(b)</span><br><span class="line">模糊的</span><br><span class="line">3. "The price of a gasoline purchase is computed as the price per gallon for the type of gas purchased, multiplied by the number of gallons purchased (use two decimal points for representing fractions of gallons)." 合格的</span><br><span class="line">4. "The system should be available 24 hours a day, 7 days a week. 不现实的</span><br></pre></td></tr></table></figure><h1 id="对给定的需求示例例设计功能测试用用例例"><a class="markdownIt-Anchor" href="#对给定的需求示例例设计功能测试用用例例"></a> 对给定的需求示例例，设计功能测试⽤用例例</h1><ol><li>以需求为线索，开发测试用例套件，确定输入/输出，开发测试用例。</li></ol><p><img src="https://s2.loli.net/2022/06/09/djuEiKZrAl5Vc4m.png" alt=""></p><ol start="2"><li>制定测试用例</li></ol><h1 id="第八章"><a class="markdownIt-Anchor" href="#第八章"></a> 第八章</h1><h1 id="软件设计"><a class="markdownIt-Anchor" href="#软件设计"></a> 软件设计</h1><ol><li>软件设计是指关于软件对象的设计，是一种设计活动。软件设计既指软件对象实现的规格说明，又指这个规格说明产生的过程。</li><li>软件设计活动以需求开发的制品(需求规格说明和分析模型)为基础，构建软件设计方案描述和原型，为后期的构造活动提供规划或蓝图。</li><li>软件设计兼具工程性和艺术性，由于软件系统的可变性，软件设计具有演化性，也因为软件设计的过程实际上就是一系列决策发生的过程，软件设计具有决策性</li></ol><h2 id="软件设计的核心思想"><a class="markdownIt-Anchor" href="#软件设计的核心思想"></a> 软件设计的核心思想</h2><ol><li>分解:横向上将系统分割为几个相对简单的子系统与子系统之间的关系</li><li>抽象:在纵向上聚焦个子系统的接口(这里的接口与实现相对)，可以分离接口和实现，使得人们更好的关注软件系统本质，降低复杂度</li></ol><h2 id="软件设计的核心层次三层"><a class="markdownIt-Anchor" href="#软件设计的核心层次三层"></a> 软件设计的核心层次（三层）</h2><ol><li>高层设计：基于反映软件高层抽象的构件设计，描述系统的高层结构、关注点和设计决策。<ol><li><strong>部件</strong>承载了系统主要的<strong>计算与状态</strong></li><li><strong>连接件</strong>承载部件之间的<strong>交互</strong></li><li>部件与连接件都是抽象的类型定义(就像类定义)，它们的实例(就像类的对象实例)组织构成软件系统的整体结构，<strong>配置</strong>将它们的实例连接起来</li></ol></li><li>中层设计：更加关注组成构件的模块的设计、导入/导出、过程之间调用关系或者类之间的协作，模块划分<strong>隐藏</strong>⼀些程序片段(数据结构+算法)的细节，暴露接口于外界</li><li>低层设计：深入模块和类的内部，关注具体的数据结构、算法、类型、语句和控制结构等</li></ol><h1 id="第九-十章"><a class="markdownIt-Anchor" href="#第九-十章"></a> 第九、十章</h1><h1 id="体系结构的概念"><a class="markdownIt-Anchor" href="#体系结构的概念"></a> 体系结构的概念</h1><ul><li>软件体系结构是由部件，连接件，配置组成的。</li></ul><ol><li><strong>部件</strong>是软件体系结构的基本组成单位之⼀,承载系统的主要功能,包括处理与数据;<ol><li>原始部件</li><li>复合部件</li></ol></li><li><strong>连接件</strong>是软件体系结构的另一个基本组成单位,定义了部件间的交互,是连接的抽象表示;<ol><li>原始连接件</li><li>复合连接件:是由更细粒度的部件和连接件组成。</li></ol></li><li><strong>配置</strong>是对"形式"的发展,定义了"部件"以及"连接件"之间的关联方式,将它们组织成系统的总体结构</li></ol><h1 id="体系结构的风格的优缺点"><a class="markdownIt-Anchor" href="#体系结构的风格的优缺点"></a> 体系结构的风格的优缺点</h1><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt9/12.png" alt=""></p><ol><li>主程序子程序风格<ol><li>优点:<ol><li>流程清晰，易于理解</li><li>强控制性</li></ol></li><li>缺点:<ol><li>程序调用是一种强耦合的连接方式，非常依赖接口</li><li>程序调用的连接方式限制了部件之间的数据交互，可能会导致不必要的公共耦合。</li></ol></li><li>适用：可以将系统功能依层次分解为多个顺序执行步骤的系统</li></ol></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt9/20.png" alt=""></p><ol start="2"><li>面向对象风格<ol><li>优点:<ol><li>内部实现的可修改性(隐藏内部实现)</li><li>易开发、易理解、易复用的结构组织(契合模块化思想)</li></ol></li><li>缺点:<ol><li>接口的耦合性(由于方法调用机制，接口的耦合性无法消除)</li><li>标识的耦合性(一个对象要和其他对象交互，必须知道标识符)</li><li>副作用(难以理解、高耦合性以及数据的不一致视图)</li></ol></li><li>适用：适用于那些能够基于数据信息分解和组织的软件系统。</li></ol></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt9/21.png" alt=""></p><ol start="3"><li>分层风格<ol><li>优点:<ol><li>设计机制清晰，易于理解(抽象层次分离，隔离复杂度)</li><li>支持并行开发(层次之间遵守程序稳定的接口)</li><li>更好的可复用性与内部可修改性(接口的稳定性，不同层次的部件能够互相替代)</li></ol></li><li>缺点：<ol><li>交互协议难以修改(可能需要改变所有的层次，接口具有强耦合性)</li><li>性能损失(禁止跨层调用)</li><li>难以确定层次数量和粒度</li></ol></li><li>应用：适用于主要功能是在不同抽象层次上进行任务分解的复杂处理，能建立稳定的不同抽象层次之间的稳定交互协议，没有很高的实时性能要求的系统</li></ol></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt9/22.png" alt=""></p><ol start="4"><li>MVC风格:<ol><li>优点:<ol><li>易开发性:抽象了业务逻辑，表现和控制机制清晰，易于开发</li><li>视图和控制的可修改性</li><li>适宜于网络系统开发的特征(MVC 不仅允许视图和控制的可修改性,⽽且其对业务逻辑、表现和控制的分离使得⼀个模型可以同时建⽴并保持<strong>多个视图</strong>,这⾮常适⽤于⽹络系统开发)</li></ol></li><li>缺点:<ol><li>复杂性：MVC将用户的任务分解成了表现、控制和模型三个部分，这会增加系统的复杂性，不利于理解任务实现。</li><li>模型修改困难，视图和控制都要依赖于模型</li></ol></li></ol></li></ol><h1 id="体系结构设计的过程"><a class="markdownIt-Anchor" href="#体系结构设计的过程"></a> 体系结构设计的过程</h1><ol><li>分析关键需求和项目约束：分析用例文档和需求规格说明书(包含需求规格和项目约束)。注意既要考虑功能性需求，又要考虑非功能性需求，甚至很大意义上体系结构设计是为了满足<strong>非功能性需求</strong>。</li><li>通过选择体系结构风格：选择分层风格(信息系统、并行开发、非web应用)，进行评审。</li><li>进⾏软件体系结构逻辑(抽象)设计：产生逻辑包图</li><li>依赖逻辑设计进行软件体系结构(实现)设计：产生物理类图</li><li>完善体系结构设计：关键类图，持久化数据格式的定义等</li><li>添加构件接口：包、重要文件的创建，定义接口</li><li>迭代过程3-6分析关键需求和项目约束：分析用例文档和需求规格说明书(包含需求规格和项目约束)。注意既要考虑功能性需求，又要考虑非功能性需求，甚至很大意义上体系结构设计是为了满足<strong>非功能性需求</strong>。通过选择体系结构风格：选择分层风格(信息系统、并行开发、非web应用)，进行评审。进⾏软件体系结构逻辑(抽象)设计：产生逻辑包图依赖逻辑设计进行软件体系结构(实现)设计：产生物理类图完善体系结构设计：关键类图，持久化数据格式的定义等添加构件接口：包、重要文件的创建，定义接口迭代过程3-6</li></ol><h1 id="包的原则"><a class="markdownIt-Anchor" href="#包的原则"></a> 包的原则</h1><ol><li>重用发布等价原则(REP):重用的粒度就是发布的粒度<ol><li>为重用器分组组件(类)</li><li>单个类通常是不可重用的：几个协作类组成一个包</li><li>包中的类应构成可重用和可释放的模块：模块提供一致的功能</li><li>减少重新使用者的工作</li><li>和相关联的类一起发布，而不是单独进行发布</li></ol></li><li>共同封闭原则(CCP):包中所有类对于同一类性质的变化应该是共同封闭的，一个变化若对一个包产生影响，则对该包中的所有类产生影响，而对于其他包不造成任何影响。<ol><li>最小化修改都程序员的影响</li><li>包尽可能大，和CRP互斥</li><li>方法<ol><li>将具有相似闭包的类分组</li><li>面向可以预期的变更封闭包</li><li>将更改限制为几个软件包</li><li>降低包装释放频率</li><li>减少程序员的工作量</li><li>只对可预测的变更有作用，不可预测的变更会为系统带来极大的破坏能力，并且无法进行预测。</li></ol></li></ol></li><li>共同重用原理(CRP):一个包中的所有类应该是能够共同重用的。<ol><li>s根据常见重用对类进行分组：避免给用户不必要的依赖</li><li>遵循CRP通常会导致软件包拆分：获得更多，更小，更专注的包</li><li>减少重新使用者的工作</li><li>包尽可能小，和CCP互斥</li></ol></li><li>无环依赖原则(ADP):在包的依赖关系图中不能存在环。必须是有向无环图。<ol><li>第一种单环，DIP依赖倒置即可解决</li><li>第二种互环，A依赖B，且B依赖A</li></ol></li></ol><p><img src="https://s2.loli.net/2022/06/09/CMAJc4EUbKnPqdy.png" alt=""></p><ol start="5"><li>稳定依赖原则(SDP):朝着稳定(别人的修改不影响我)的方向进行依赖<ol><li>Ca:输入耦合度，包外部依赖本包的类个数</li><li>Ce:输出耦合度，包内部依赖于包外部的类的个数</li><li>不稳定性: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mo>=</mo><mfrac><mrow><mi>C</mi><mi>e</mi></mrow><mrow><mi>C</mi><mi>e</mi><mo>+</mo><mi>C</mi><mi>a</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">I = \frac{Ce}{Ce + Ca}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.872331em;"></span><span class="strut bottom" style="height:1.275662em;vertical-align:-0.403331em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.07847em;">I</span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="mord mathit">e</span><span class="mbin">+</span><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="mord mathit">a</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="mord mathit">e</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span>, I越小越稳定</li></ol></li></ol><p><img src="https://s2.loli.net/2022/06/09/CMAJc4EUbKnPqdy.png" alt=""></p><ol start="6"><li>稳定抽象原则(SAP):包的抽象程度应该和其稳定程度一致<ol><li>稳定的包应该是抽象的包</li><li>不稳定的包应该是具体的包</li><li>Na:包中抽象类个数</li><li>Nc:包中所有类个数</li><li>抽象度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>=</mo><mfrac><mrow><mi>N</mi><mi>a</mi></mrow><mrow><mi>N</mi><mi>c</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">A = \frac{Na}{Nc}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.872331em;"></span><span class="strut bottom" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mord mathit">A</span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.10903em;">N</span><span class="mord mathit">c</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.10903em;">N</span><span class="mord mathit">a</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span></li></ol></li><li>前三条描述的是依赖性，后三条描述的是耦合性</li><li>包设计过程:<ol><li>开发包(构件)设计</li><li>运⾏时的进程</li><li>物理部署</li></ol></li></ol><h1 id="体系结构构件之间接口的定义"><a class="markdownIt-Anchor" href="#体系结构构件之间接口的定义"></a> 体系结构构件之间接口的定义</h1><ol><li>首先确定模块对外接口</li><li>然后确定接口的规范</li></ol><p><img src="https://s2.loli.net/2022/06/17/HD3Q9tAugSy7KZR.png" alt=""><br><img src="https://s2.loli.net/2022/06/17/muogeGBFyNIL6PW.png" alt=""></p><h1 id="体系结构开发集成测试用例"><a class="markdownIt-Anchor" href="#体系结构开发集成测试用例"></a> 体系结构开发集成测试用例</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一-二章&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#第一-二章&quot;&gt;&lt;/a&gt; 第一、二章&lt;/h1&gt;
&lt;h1 id=&quot;软件工程&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#软件工程&quot;&gt;&lt;/a&gt; 软件工程&lt;</summary>
      
    
    
    
    <category term="软件工程" scheme="http://little-hurui.cloud/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="软件工程与计算2" scheme="http://little-hurui.cloud/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%972/"/>
    
    
    <category term="软件工程" scheme="http://little-hurui.cloud/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="复习" scheme="http://little-hurui.cloud/tags/%E5%A4%8D%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序开发</title>
    <link href="http://little-hurui.cloud/2022/06/02/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    <id>http://little-hurui.cloud/2022/06/02/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/</id>
    <published>2022-06-02T11:16:14.000Z</published>
    <updated>2022-06-02T15:02:06.437Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微信小程序-计算机书籍简介及推荐"><a class="markdownIt-Anchor" href="#微信小程序-计算机书籍简介及推荐"></a> 微信小程序 计算机书籍简介及推荐</h1><h2 id="项目地址"><a class="markdownIt-Anchor" href="#项目地址"></a> 项目地址</h2><p><a href="https://git.weixin.qq.com/wx_wxdcab629e85115972/wechat.git">https://git.weixin.qq.com/wx_wxdcab629e85115972/wechat.git</a></p><h2 id="基础"><a class="markdownIt-Anchor" href="#基础"></a> 基础</h2><p><a href="https://www.bilibili.com/video/BV1nE41117BQ">https://www.bilibili.com/video/BV1nE41117BQ</a></p><h2 id="tfm"><a class="markdownIt-Anchor" href="#tfm"></a> TFM</h2><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/">https://developers.weixin.qq.com/miniprogram/dev/framework/</a></p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/getting-started.html">https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/getting-started.html</a></p><h2 id="组件库"><a class="markdownIt-Anchor" href="#组件库"></a> 组件库</h2><h3 id="lin-ui"><a class="markdownIt-Anchor" href="#lin-ui"></a> lin-ui</h3><p><a href="https://github.com/TaleLin/lin-ui">https://github.com/TaleLin/lin-ui</a></p><p>使用<strong>最新</strong>的调试基础库</p><p><strong>在 miniprogram 文件夹下</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm init -y</span><br><span class="line">$ npm install lin-ui</span><br></pre></td></tr></table></figure><p>然后在 IDE 中构建 npm</p><h3 id="colorui"><a class="markdownIt-Anchor" href="#colorui"></a> ColorUI</h3><p><a href="http://docs.xzeu.com/#/">http://docs.xzeu.com/#/</a></p><h2 id="用例描述"><a class="markdownIt-Anchor" href="#用例描述"></a> 用例描述</h2><h3 id="主页"><a class="markdownIt-Anchor" href="#主页"></a> 主页</h3><p>首页推送</p><h3 id="分类"><a class="markdownIt-Anchor" href="#分类"></a> 分类</h3><p>分类</p><p>搜索栏</p><h3 id="我的"><a class="markdownIt-Anchor" href="#我的"></a> 我的</h3><p>收藏</p><p>历史记录</p><h3 id="后端"><a class="markdownIt-Anchor" href="#后端"></a> 后端</h3><p>书籍数据</p><p>用户数据</p><p>评论系统</p><h3 id="数据收集"><a class="markdownIt-Anchor" href="#数据收集"></a> 数据收集</h3><p><a href="https://dms.cloud.tencent.com/#/login">https://dms.cloud.tencent.com/#/login</a></p><ul><li>用户名 root</li><li>密码 XpPdc6rG</li></ul><h2 id="后台"><a class="markdownIt-Anchor" href="#后台"></a> 后台</h2><p>使用微信云托管</p><ul><li>控制台</li></ul><p><a href="https://cloud.weixin.qq.com/cloudrun/console">https://cloud.weixin.qq.com/cloudrun/console</a></p><ul><li>代码</li></ul><p><a href="https://github.com/VGalaxies/wxcloudrun-golang">https://github.com/VGalaxies/wxcloudrun-golang</a></p><h3 id="api-约定"><a class="markdownIt-Anchor" href="#api-约定"></a> API 约定</h3><p>参考 <a href="https://github.com/VGalaxies/wxcloudrun-golang#readme">https://github.com/VGalaxies/wxcloudrun-golang#readme</a></p><h2 id="前端调用参考"><a class="markdownIt-Anchor" href="#前端调用参考"></a> 前端调用参考</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getBook</span>(<span class="params"></span>) {</span><br><span class="line">wx.<span class="property">cloud</span></span><br><span class="line">  .<span class="title function_">callContainer</span>({</span><br><span class="line">    <span class="attr">config</span>: {</span><br><span class="line">      <span class="attr">env</span>: <span class="string">"prod-8gt4mz04386985ef"</span>,</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">path</span>: <span class="string">"/api/book"</span>,</span><br><span class="line">    <span class="attr">header</span>: {</span><br><span class="line">      <span class="string">"X-WX-SERVICE"</span>: <span class="string">"golang-6i3q"</span>,</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">method</span>: <span class="string">"POST"</span>,</span><br><span class="line">    <span class="attr">data</span>: {</span><br><span class="line">      <span class="attr">action</span>: <span class="string">"exact"</span>,</span><br><span class="line">      <span class="attr">hint</span>: <span class="string">"深入理解计算机系统"</span>,</span><br><span class="line">    },</span><br><span class="line">  })</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">resp</span>) =&gt;</span> {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(resp);</span><br><span class="line">  })</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">  });</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;微信小程序-计算机书籍简介及推荐&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#微信小程序-计算机书籍简介及推荐&quot;&gt;&lt;/a&gt; 微信小程序 计算机书籍简介及推荐&lt;/h1&gt;
&lt;h2 id=&quot;项目地址&quot;&gt;&lt;a class=&quot;markdownI</summary>
      
    
    
    
    <category term="计算机网络" scheme="http://little-hurui.cloud/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="互联网计算" scheme="http://little-hurui.cloud/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="微信小程序" scheme="http://little-hurui.cloud/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    <category term="互联网计算" scheme="http://little-hurui.cloud/tags/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>网络安全</title>
    <link href="http://little-hurui.cloud/2022/06/01/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    <id>http://little-hurui.cloud/2022/06/01/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/</id>
    <published>2022-06-01T02:18:54.000Z</published>
    <updated>2022-06-01T06:26:24.447Z</updated>
    
    <content type="html"><![CDATA[<h1 id="network-security"><a class="markdownIt-Anchor" href="#network-security"></a> Network Security</h1><h1 id="网络安全问题概述"><a class="markdownIt-Anchor" href="#网络安全问题概述"></a> 网络安全问题概述</h1><ol><li>计算机网络上的通信面临以下的四种威胁：</li></ol><table><thead><tr><th>威胁</th><th>解释</th><th>攻击类型</th></tr></thead><tbody><tr><td>截获</td><td>从网络上窃听他人的通信内容。</td><td>被动攻击</td></tr><tr><td>中断</td><td>有意中断他人在网络上的通信。</td><td>主动攻击</td></tr><tr><td>篡改</td><td>故意篡改网络上传送的报文。</td><td>主动攻击</td></tr><tr><td>伪造</td><td>伪造信息在网络上传送。</td><td>主动攻击</td></tr></tbody></table><h2 id="被动攻击和主动攻击"><a class="markdownIt-Anchor" href="#被动攻击和主动攻击"></a> 被动攻击和主动攻击</h2><p><img src="https://s2.loli.net/2022/06/01/mYQnaLHAgDb41zG.png" alt=""></p><h3 id="被动攻击"><a class="markdownIt-Anchor" href="#被动攻击"></a> 被动攻击</h3><ol><li>截获信息的攻击称为被动攻击(并不改变通讯的过程)</li><li>在被动攻击中，攻击者只是观察和分析某一个协议数据单元PDU而不干扰信息流。</li></ol><h3 id="主动攻击"><a class="markdownIt-Anchor" href="#主动攻击"></a> 主动攻击</h3><ol><li>更改信息和拒绝用户使用资源的攻击称为主动攻击。(修改了通信的构成)</li><li>主动攻击是指攻击者对某个连接中通过的PDU进行各种处理(理解PDU后)<ol><li>更改报文流</li><li>拒绝报文服务</li><li>伪造连接初始化</li></ol></li></ol><h2 id="计算机网络通信安全的目标"><a class="markdownIt-Anchor" href="#计算机网络通信安全的目标"></a> 计算机网络通信安全的目标</h2><ol><li>防止析出报文内容</li><li>防止通信量分析(通信的习惯)</li><li>检测更改报文流</li><li>检测拒绝报文服务</li><li>检测伪造初始化连接</li></ol><h2 id="报文应该具有的性质"><a class="markdownIt-Anchor" href="#报文应该具有的性质"></a> 报文应该具有的性质</h2><ol><li>保密性</li><li>完整性</li><li>可用性</li><li>鉴别性</li><li>不可否认(抵赖)性:确认是特定的发送方</li></ol><h2 id="恶意程序malicious-program"><a class="markdownIt-Anchor" href="#恶意程序malicious-program"></a> 恶意程序(malicious program)</h2><ol><li>计算机病毒:会"传染"其他程序的程序，“传染” 通过修改其他程序来把自身或其变种复制进去而完成。</li><li>计算机蠕虫:通过网络的通信功能将自身从一个结点发送到另一个结点并启动运行的程序。(特定场景才能使用，出现上商业行为)</li><li>特洛伊木马:一种程序，它执行的功能超出所声称的功能。运作木马获得特殊的权限<ol><li>逻辑程序:逻辑下载程序</li><li>控制器程序:远程控制</li></ol></li><li>逻辑炸弹:一种当运行环境满足某种特定条件时执行其他特殊功能的程序。</li></ol><h2 id="计算机网络安全的内容"><a class="markdownIt-Anchor" href="#计算机网络安全的内容"></a> 计算机网络安全的内容</h2><ol><li>保密性</li><li>安全协议的设计</li><li>访问控制</li></ol><h1 id="一般的数据加密模型"><a class="markdownIt-Anchor" href="#一般的数据加密模型"></a> 一般的数据加密模型</h1><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec11/2.png" alt=""></p><ol><li>不确定有没有人修改:使用密文发送</li><li>最早的是<strong>凯撒密码</strong>:<ol><li>加密：明文按照数字mod的值进行偏移，得到密文</li><li>解密：密文反向偏移数字mod的值进行偏移，得到明文</li></ol></li></ol><h2 id="密码相关的重要概念"><a class="markdownIt-Anchor" href="#密码相关的重要概念"></a> 密码相关的重要概念</h2><ol><li><strong>密码编码学</strong>(cryptography)是密码体制的设计学(设计密码)</li><li><strong>密码分析学</strong>(cryptanalysis)则是在未知密钥的情况下从密文推演出明文或密钥的技术。密码编码学与密码分析学合起来即为密码学(cryptology)。</li><li>如果不论截取者获得了多少密文，但在密文中都没有足够的信息来唯一地确定出对应的明文，则这一密码体制称为<strong>无条件安全</strong>的，或称为<strong>理论上是不可破</strong>的。</li><li>如果密码体制中的密码不能被可使用的计算资源破译，则这一密码体制称为在<strong>计算上安全</strong>的。(目前一般的密码体系能够达到的标注)</li></ol><h1 id="对称密钥和公钥密码体制"><a class="markdownIt-Anchor" href="#对称密钥和公钥密码体制"></a> 对称密钥和公钥密码体制</h1><h2 id="所谓常规密钥密码体制即加密密钥与解密密钥是相同的密码体制"><a class="markdownIt-Anchor" href="#所谓常规密钥密码体制即加密密钥与解密密钥是相同的密码体制"></a> 所谓常规密钥密码体制，即加密密钥与解密密钥是<strong>相同</strong>的密码体制。</h2><ol><li>这种加密系统又称为<strong>对称密钥系统</strong>。</li></ol><h3 id="数据加密标准-des-data-encryption-standard"><a class="markdownIt-Anchor" href="#数据加密标准-des-data-encryption-standard"></a> 数据加密标准 DES Data Encryption Standard</h3><ol><li>数据加密标准DES属于常规密钥密码体制，是一种分组密码(对称加密算法)</li><li>在加密前，先对整个明文进行分组。每一个组长为64位。</li><li>然后对每一个64位二进制数据进行加密处理，产生一组64位密文数据。</li><li>最后将各组密文串接起来，即得出整个的密文。</li><li>使用的密钥为64位(实际密钥长度为56位，有8位用于奇偶校验)。</li><li>对于64位密码有编排的过程，详细自己查找学习</li><li>密钥长度不会太长，算法复杂度比较低</li></ol><h3 id="des-的保密性"><a class="markdownIt-Anchor" href="#des-的保密性"></a> DES 的保密性</h3><ol><li>DES的保密性仅取决于对密钥的保密，而算法是公开的。尽管人们在破译DES方面取得了许多进展，但至今仍未能找到比穷举搜索密钥更有效的方法。</li><li>DES 是世界上第一个公认的实用密码算法标准，它曾对密码学的发展做出了重大贡献。</li><li>目前较为严重的问题是DES的密钥的长度(算力提升)<ol><li>由于算力的提升，破解DES所需的时间进一步降低，不再是计算上安全的了。</li><li>通过增加DES密钥的长度来提高安全性。</li></ol></li><li>现在已经设计出来搜索DES密钥的专用芯片(硬件层面的解决方案)</li></ol><h2 id="公钥密码体制"><a class="markdownIt-Anchor" href="#公钥密码体制"></a> 公钥密码体制</h2><ol><li>公钥密码体制使用<strong>不同的加密密钥与解密密钥</strong>，是一种"由已知加密密钥推导出解密密钥在<strong>计算上是不可行</strong>的"密码体制。(非对称密码体系)<ol><li>经典算法:密钥E和N，明文是一个数字，加密时用明文做E的指数次方之后mod N得到密文C，解密是D和N，密文C做D次方再mod N得到明文</li><li>例子:密钥是7和187，明文88，88的7次方mod187 = 11(密文)，解密密钥23和187，11的23次方mod187得到88(明文)</li></ol></li></ol><p>88(明文)^{7}\ mod\ 187=11(密文)<br>11(密文)^{23}\ mod\ 187=88(明文)</p><ol start="2"><li>公钥密码体制的产生主要是因为两个方面的原因，一是由于常规密钥密码体制的密钥分配问题，另一是由于对数字签名的需求。<ol><li>一个机构可以发送自己的公钥，保留自己的密钥。接收者受到密钥加密的就知道是谁发送的，保证机构可以发送安全认证，接受者使用公钥解密知道是谁发送的，做到密钥的分配</li><li>私钥加密的是机构的签名，大量数据传输使用对称密钥体系传输，公钥发送比较少的数据，因为公钥密码体系算法复杂度比较高，加密的时候是很多位的明文，计算量太大。</li></ol></li><li>现有最著名的公钥密码体制是RSA体制，它基于数论中大数分解问题的体制，由美国三位科学家Rivest，Shamir和Adleman于1976年提出并在1978年正式发表。</li></ol><h3 id="公钥算法的例子"><a class="markdownIt-Anchor" href="#公钥算法的例子"></a> 公钥算法的例子</h3><p><img src="https://s2.loli.net/2022/06/01/KC71ruDN5i2YoxR.png" alt=""></p><ol><li>在公钥密码体制中，加密密钥(即公钥)PK是公开信息，而解密密钥(即私钥或秘钥)SK是需要保密的</li><li>加密算法E和解密算法D也都是公开的</li><li>虽然SK是由PK决定的，但却不能根据PK计算出SK(单向的)</li><li>公钥和私钥是成对生成的</li></ol><h3 id="公钥算法的特点"><a class="markdownIt-Anchor" href="#公钥算法的特点"></a> 公钥算法的特点</h3><ol><li>发送者A用B的公钥<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><msub><mi>K</mi><mrow><mi>B</mi></mrow></msub></mrow><annotation encoding="application/x-tex">PK_{B}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mord"><span class="mord mathit" style="margin-right:0.07153em;">K</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.07153em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.05017em;">B</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>对明文X加密(E运算)后，在接收者B用自己的私钥<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><msub><mi>K</mi><mrow><mi>B</mi></mrow></msub></mrow><annotation encoding="application/x-tex">SK_{B}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="mord"><span class="mord mathit" style="margin-right:0.07153em;">K</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.07153em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.05017em;">B</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>解密(D 运算)，即可恢复出明文：<ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>D</mi><mrow><mi>S</mi><msub><mi>K</mi><mi>B</mi></msub></mrow></msub><mo>(</mo><mi>Y</mi><mo>)</mo><mo>=</mo><msub><mi>D</mi><mrow><mi>S</mi><msub><mi>K</mi><mi>B</mi></msub></mrow></msub><mo>(</mo><msub><mi>E</mi><mrow><mi>P</mi><msub><mi>K</mi><mi>B</mi></msub></mrow></msub><mo>(</mo><mi>X</mi><mo>)</mo><mo>)</mo><mo>=</mo><mi>X</mi></mrow><annotation encoding="application/x-tex">D_{SK_B}(Y) = D_{SK_B}(E_{PK_B}(X)) = X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1.005em;vertical-align:-0.255em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.02778em;">D</span><span class="vlist"><span style="top:0.15000000000000002em;margin-right:0.05em;margin-left:-0.02778em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="mord"><span class="mord mathit" style="margin-right:0.07153em;">K</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:-0.07153em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathit" style="margin-right:0.05017em;">B</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord"><span class="mord mathit" style="margin-right:0.02778em;">D</span><span class="vlist"><span style="top:0.15000000000000002em;margin-right:0.05em;margin-left:-0.02778em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="mord"><span class="mord mathit" style="margin-right:0.07153em;">K</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:-0.07153em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathit" style="margin-right:0.05017em;">B</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.05764em;">E</span><span class="vlist"><span style="top:0.15000000000000002em;margin-right:0.05em;margin-left:-0.05764em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mord"><span class="mord mathit" style="margin-right:0.07153em;">K</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:-0.07153em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathit" style="margin-right:0.05017em;">B</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.07847em;">X</span></span></span></span></li></ul></li><li>解密密钥是接收者专用的秘钥，对其他人都保密。</li><li>加密密钥是公开的，但不能用它来解密，即<ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>D</mi><mrow><mi>P</mi><msub><mi>K</mi><mi>B</mi></msub></mrow></msub><mo>(</mo><msub><mi>E</mi><mrow><mi>P</mi><msub><mi>K</mi><mi>B</mi></msub></mrow></msub><mo>(</mo><mi>X</mi><mo>)</mo><mo>)</mo><mo>≠</mo><mi>X</mi></mrow><annotation encoding="application/x-tex">D_{PK_B}(E_{PK_B}(X))\neq X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1.005em;vertical-align:-0.255em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.02778em;">D</span><span class="vlist"><span style="top:0.15000000000000002em;margin-right:0.05em;margin-left:-0.02778em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mord"><span class="mord mathit" style="margin-right:0.07153em;">K</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:-0.07153em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathit" style="margin-right:0.05017em;">B</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.05764em;">E</span><span class="vlist"><span style="top:0.15000000000000002em;margin-right:0.05em;margin-left:-0.05764em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mord"><span class="mord mathit" style="margin-right:0.07153em;">K</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:-0.07153em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathit" style="margin-right:0.05017em;">B</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mclose">)</span><span class="mrel">≠</span><span class="mord mathit" style="margin-right:0.07847em;">X</span></span></span></span></li></ul></li><li>加密和解密的运算可以对调，即(用私钥进行加密，意义有差别:这样子证明是B发送的，但是别人都知道公钥，相当于明文发送)<ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>E</mi><mrow><mi>P</mi><msub><mi>K</mi><mi>B</mi></msub></mrow></msub><mo>(</mo><msub><mi>D</mi><mrow><mi>S</mi><msub><mi>K</mi><mi>B</mi></msub></mrow></msub><mo>(</mo><mi>X</mi><mo>)</mo><mo>)</mo><mo>=</mo><msub><mi>D</mi><mrow><mi>S</mi><msub><mi>K</mi><mi>B</mi></msub></mrow></msub><mo>(</mo><msub><mi>E</mi><mrow><mi>P</mi><msub><mi>K</mi><mi>B</mi></msub></mrow></msub><mo>(</mo><mi>X</mi><mo>)</mo><mo>)</mo><mo>=</mo><mi>X</mi></mrow><annotation encoding="application/x-tex">E_{PK_B}(D_{SK_B}(X)) = D_{SK_B}(E_{PK_B}(X)) = X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1.005em;vertical-align:-0.255em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.05764em;">E</span><span class="vlist"><span style="top:0.15000000000000002em;margin-right:0.05em;margin-left:-0.05764em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mord"><span class="mord mathit" style="margin-right:0.07153em;">K</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:-0.07153em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathit" style="margin-right:0.05017em;">B</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.02778em;">D</span><span class="vlist"><span style="top:0.15000000000000002em;margin-right:0.05em;margin-left:-0.02778em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="mord"><span class="mord mathit" style="margin-right:0.07153em;">K</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:-0.07153em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathit" style="margin-right:0.05017em;">B</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord"><span class="mord mathit" style="margin-right:0.02778em;">D</span><span class="vlist"><span style="top:0.15000000000000002em;margin-right:0.05em;margin-left:-0.02778em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="mord"><span class="mord mathit" style="margin-right:0.07153em;">K</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:-0.07153em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathit" style="margin-right:0.05017em;">B</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.05764em;">E</span><span class="vlist"><span style="top:0.15000000000000002em;margin-right:0.05em;margin-left:-0.05764em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mord"><span class="mord mathit" style="margin-right:0.07153em;">K</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:-0.07153em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathit" style="margin-right:0.05017em;">B</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.07847em;">X</span></span></span></span></li></ul></li><li>在计算机上可容易地产生成对的PK和SK</li><li>从已知的PK实际上不可能推导出SK，即从PK到SK是"计算上不可能的"</li><li>加密和解密算法都是公开的</li></ol><h3 id="应当注意"><a class="markdownIt-Anchor" href="#应当注意"></a> 应当注意</h3><ol><li>任何加密方法的安全性取决于<strong>密钥的长度</strong>，以及<strong>攻破密文所需的计算量</strong></li><li>在这方面，公钥密码体制并不比传统加密体制更加优越</li><li>由于目前公钥加密算法的开销较大，在可见的将来还不会放弃传统的加密方法</li><li>公钥需要密钥分配协议，具体的分配过程并不比采用传统加密方法时更简单</li></ol><h1 id="数字签名"><a class="markdownIt-Anchor" href="#数字签名"></a> 数字签名</h1><ol><li>数字签名必须保证以下三点：<ol><li>报文鉴别:接收者能够核实发送者对报文的签名</li><li>报文的完整性:发送者事后不能抵赖对报文的签名</li><li>不可否认:接收者不能伪造对报文的签名</li></ol></li><li>现在已有多种实现各种数字签名的方法。但采用<strong>公钥算法</strong>更容易实现</li></ol><h2 id="数字签名的实现"><a class="markdownIt-Anchor" href="#数字签名的实现"></a> 数字签名的实现</h2><p><img src="https://s2.loli.net/2022/06/01/RYdWsqETzViJe3U.png" alt=""></p><ol><li>因为除A外没有别人能具有A的私钥，所以除A外没有别人能产生这个密文。因此B相信报文X是A签名发送的。</li><li>若A要抵赖曾发送报文给B，B可将明文和对应的密文出示给第三者。第三者很容易用A的公钥去证实A确实发送X给B。</li><li>反之，若B将X伪造成X’，则B不能在第三者前出示对应的密文。这样就证明了B伪造了报文。</li></ol><h2 id="具有保密性的数字签名"><a class="markdownIt-Anchor" href="#具有保密性的数字签名"></a> 具有保密性的数字签名</h2><p><img src="https://s2.loli.net/2022/06/01/wu6ZQvfIYxb451K.png" alt=""></p><ol><li>首先用自己的私钥进行签名，然后对密文用B的公钥加密</li><li>收到密文的，如果没有B的私钥，不能进行解密</li><li>然后用B的私钥解密，之后用A的公钥检验是A发送的，一般只用来传送对称密码，比较耗时。</li><li>保障获取公钥的过程</li></ol><h1 id="防火墙"><a class="markdownIt-Anchor" href="#防火墙"></a> 防火墙</h1><ol><li>防火墙是由软件、硬件构成的系统，是一种特殊编程(ACL)的路由器，用来在两个网络之间实施接入控制策略。接入控制策略是由使用防火墙的单位自行制订的，为的是可以最适合本单位的需要。</li><li>防火墙内的网络称为<strong>可信赖的网络</strong>(trusted network)，而将外部的因特网称为<strong>不可信赖的网络</strong>(untrusted network)。</li><li>防火墙可用来解决内联网和外联网的<strong>安全问题</strong>。</li></ol><h2 id="防火墙在互连网络中的位置"><a class="markdownIt-Anchor" href="#防火墙在互连网络中的位置"></a> 防火墙在互连网络中的位置</h2><p><img src="https://s2.loli.net/2022/06/01/S723mD5jZh4dzi8.png" alt=""></p><ol><li>其实只用一个路由器就可以完成防火墙的划分。</li><li>例子中:应用网关，可以内部外部进行访问过滤。</li><li>优点:在防火墙中的外局域网和内局域网都可以放置一些服务器，由左侧过滤的路由器控制访问，而右侧的路由控制内部网络的访问，从而达成一个访问权限控制</li><li>内网络安全也是一个问题</li></ol><h2 id="防火墙的功能"><a class="markdownIt-Anchor" href="#防火墙的功能"></a> 防火墙的功能</h2><ol><li>防火墙的功能有两个：<strong>阻止和允许</strong>。<ol><li><strong>阻止</strong>就是阻止某种类型的通信量通过防火墙(从外部网络到内部网络，或反过来)：比如阻止内部的对迅雷的请求向外发送</li><li><strong>允许</strong>的功能与<strong>阻止</strong>恰好相反。</li></ol></li><li>防火墙必须能够识别通信量的各种类型。不过在<strong>大多数情况下防火墙的主要功能</strong>是<strong>阻止</strong>。</li></ol><h2 id="防火墙技术一般分为两类"><a class="markdownIt-Anchor" href="#防火墙技术一般分为两类"></a> 防火墙技术一般分为两类</h2><ol><li><strong>网络级防火墙</strong>:用来防止整个网络出现外来非法的入侵。属于这类的有<strong>分组过滤和授权服务器</strong><ol><li>前者检查所有流入本网络的信息，然后拒绝不符合事先制订好的一套准则的数据</li><li>后者则检查用户的登录是否合法</li></ol></li><li><strong>应用级防火墙</strong>:从应用程序来进行接入控制。通常使用应用网关或代理服务器来区分各种应用，例如，可以只允许通过访问万维网的应用，而阻止FTP应用通过</li></ol><h2 id="访问控制列表aclaccess-control-lists"><a class="markdownIt-Anchor" href="#访问控制列表aclaccess-control-lists"></a> 访问控制列表ACL(Access Control Lists)</h2><ol><li>ACL是指令列表，它告诉路由器允许或拒绝什么类型的数据包。</li><li>如果要让路由器拒绝某些数据包，则必须配置ACL。否则，只要链路打开，路由器将接受并转发所有数据包</li><li>您可以根据以下情况允许或拒绝数据包：<ol><li>源地址</li><li>目的地址</li><li>上层的协议，比如TCP或UDP端口</li></ol></li></ol><h2 id="使用acl的前提下发送数据包"><a class="markdownIt-Anchor" href="#使用acl的前提下发送数据包"></a> 使用ACL的前提下，发送数据包</h2><ol><li>为了确定是允许还是拒绝数据包，请按顺序对ACL语句进行测试。<ol><li>当一个语句"匹配"时，<strong>不再评估任何语句</strong>。(前面的语句先匹配，处理掉)</li><li>允许或拒绝该数据包。</li></ol></li><li>ACL末尾有一个隐含的"deny any"语句:如果数据包与ACL中的任何语句都不匹配，则将其丢弃。</li></ol><h2 id="exampleacl-例子"><a class="markdownIt-Anchor" href="#exampleacl-例子"></a> Example:ACL 例子</h2><ol><li>如果我们有如下所述的ACL列表：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Permit packets from 192.168.100.1 to pass</span><br><span class="line">Permit packets from 192.168.100.2 to pass</span><br><span class="line">Deny packets from 192.168.100.3</span><br></pre></td></tr></table></figure><ol start="2"><li>然后<ol><li>Packets from 192.168.100.1 will be forwarded</li><li>Packets from 192.168.100.3 will be denied</li><li>But how does the router process the packets from 192.168.100.4? denied(默认被匹配掉)</li></ol></li></ol><h2 id="路由器如何使用出站acl"><a class="markdownIt-Anchor" href="#路由器如何使用出站acl"></a> 路由器如何使用出站ACL</h2><ol><li>检查数据包是否可路由。如果是这样，请在路由表中查找路由</li><li>检查出站接口的ACL<ol><li>如果没有ACL，则将数据包切换出目标接口</li><li>如果是ACL，请按照ACL语句顺序检查数据包-根据匹配的条件拒绝或允许。</li></ol></li><li>如果没有语句匹配，会发生什么？拒绝所有没有匹配的包</li></ol><h2 id="出站标准acl流程"><a class="markdownIt-Anchor" href="#出站标准acl流程"></a> 出站标准ACL流程</h2><p><img src="https://s2.loli.net/2022/06/01/RUYuqCG5xL4gaMO.png" alt=""></p><ol><li>收到packet，确定路由表确认路由表看能够转发</li><li>可以转发的话，进入ACL确认<ol><li>如果当前端口没有ACL配置，则直接进行转发</li><li>如果当前端口有ACL配置，开始匹配source地址(标准的ACL，只能对原地址进行判断)<ol><li>语句满足条件，<ol><li>deny</li><li>premit</li></ol></li><li>语句不满足条件，看下一条，如果没有下一条，则默认deny</li></ol></li></ol></li></ol><h2 id="标准acl的两个基本使用"><a class="markdownIt-Anchor" href="#标准acl的两个基本使用"></a> 标准ACL的两个基本使用</h2><blockquote><p>在全局配置模式下顺序编写ACL语句。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Router(config)#access-list access-list-number{permit/deny} {test-conditions}</span><br><span class="line">Lab-D(config)#access-list 1 deny 192.5.5.10 0.0.0.0 拒绝来自192.5.5.10的报文</span><br></pre></td></tr></table></figure><blockquote><p>在接口配置模式下将ACL分组(Group)到一个或多个接口。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Router(config-if)#{protocol} access-group access-list-number {in/out}</span><br><span class="line">Lab-D(config-if)#ip access-group 1 out/in</span><br></pre></td></tr></table></figure><h3 id="access-list-number参数"><a class="markdownIt-Anchor" href="#access-list-number参数"></a> access-list-number参数</h3><ol><li>ACL有很多类型。访问列表号指定什么类型。</li><li>下表显示了常见的访问列表类型。</li></ol><p><img src="https://s2.loli.net/2022/06/01/ZBKzadHY8bvVuCf.png" alt=""></p><ul><li>注意默认的取值(扩展ACL不仅仅局限于源地址)</li></ul><ol><li><code>Router(config)#access-list access-list-number {permit/deny}{test-conditions}</code></li></ol><h3 id="允许或拒绝的参数"><a class="markdownIt-Anchor" href="#允许或拒绝的参数"></a> 允许或拒绝的参数</h3><ol><li>输入访问列表并选择正确的访问列表号后，根据您要执行的操作，输入允许还是拒绝。</li><li><code>Router(config)#access-list access-list-number {permit/deny}{test-conditions}</code></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec11/9.png" alt=""></p><h3 id="test-condition参数"><a class="markdownIt-Anchor" href="#test-condition参数"></a> test-condition参数</h3><ol><li>在ACL的{test condition}部分中，大多数访问列表的共同点是源地址的IP掩码和通配符掩码。</li><li>源地址可以是子网，地址范围或单个主机。由于通配符掩码使用源地址检查位，因此也称为ip掩码。</li><li>通配符掩码告诉路由器要检查哪些位。</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec11/10.png" alt=""></p><blockquote><ol><li>Ip mask:Ipv4的地址</li><li><strong>Wilcard mask</strong>:和netmask是不同的，指示哪些位置被检查</li><li><code>Router(config)#access-list access-list-number {permit/deny}{test-conditions}</code></li></ol></blockquote><h3 id="通配符掩码-wildcard-mask"><a class="markdownIt-Anchor" href="#通配符掩码-wildcard-mask"></a> 通配符掩码 Wildcard Mask</h3><ol><li>编写通配符掩码以告知路由器地址中要匹配的位以及要忽略的位。<ol><li><strong>0位表示检查该位位置</strong></li><li><strong>1表示忽略该位位置</strong></li></ol></li><li>我们先前的192.5.5.10 0.0.0.0示例可以用二进制重写为：<ol><li>11000000.00000101.00000101.00001010 (Source address)</li><li>00000000.00000000.00000000.00000000 (Wildcard mask)</li></ol></li></ol><h4 id="通配符掩码的例子"><a class="markdownIt-Anchor" href="#通配符掩码的例子"></a> 通配符掩码的例子</h4><ol><li>编写一个IP掩码和通配符掩码以检查网络上的所有主机：192.5.5.0 255.255.255.0(检查这一个网段)</li><li>Answer: 192.5.5.0  0.0.0.255(和net mask是取反的)<ol><li>请注意，此通配符掩码是C类地址的默认子网掩码的镜像。</li><li>警告：仅当查看整个网络或子网时，这才是有用的规则。</li></ol></li><li>编写一个IP掩码和通配符掩码以检查子网中的所有主机：192.5.5.32 255.255.255.224<ol><li>If you answered 192.5.5.32 0.0.0.31</li><li>0.0.0.31 是 255.255.255.224 的镜像地址</li><li>二进制标识<ol><li>11111111.11111111.11111111.11100000 (255.255.255.224)</li><li>00000000.00000000.00000000.00011111 (0.0.0.31)</li></ol></li></ol></li></ol><h3 id="省时任何命令"><a class="markdownIt-Anchor" href="#省时任何命令"></a> 省时：任何命令</h3><ol><li>由于ACL末尾有一个隐含的"deny any"语句，<strong>因此您必须编写语句以允许其他人通过。</strong></li><li>使用我们前面的示例，如果学生被拒绝访问而所有其他学生都被允许访问，则您将编写以下两个语句：<ol><li><code>Lab-A(config)#access-list 1 deny 192.5.5.0 0.0.0.127</code>:拒绝一个</li><li><code>Lab-A(config)#access-list 1 permit 0.0.0.0 255.255.255.255</code></li></ol></li><li>由于最后一条语句通常用于覆盖"拒绝任何"，因此思科为您提供了一个选项-any命令：<ol><li><code>Lab-A(config)#access-list 1 permit any</code> == <code>Lab-A(config)#access-list 1 permit 0.0.0.0 255.255.255.255</code></li></ol></li></ol><h3 id="省时主机名支持"><a class="markdownIt-Anchor" href="#省时主机名支持"></a> 省时：主机名支持</h3><ol><li>很多时候，网络管理员将需要编写ACL来允许特定主机(或拒绝主机)。该语句可以用两种方式编写。<ol><li><code>Lab-A(config)#access-list 1 permit 192.5.5.10 0.0.0.0</code></li><li><code>Lab-A(config)#access-list 1 permit host 192.5.5.10(host 专指 192.5.5.10)</code></li></ol></li></ol><h2 id="标准acl的配置位置"><a class="markdownIt-Anchor" href="#标准acl的配置位置"></a> 标准ACL的配置位置</h2><ol><li>标准ACL没有目标参数。因此，您将标准ACL放置在尽可能靠近目标的位置。</li><li>要了解原因，请问自己，如果在Lab-A的E0上放置" deny 192.5.5.0 0.0.0.255"语句，将会对所有IP流量产生什么影响？</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec11/11.png" alt=""><br><img src="https://s2.loli.net/2022/06/01/NrOAzvLuUHTEt1l.png" alt=""></p><ul><li>如果放到Lab A的E0口则会导致无法访问Lab B/C,应该放到Lab D的E0</li><li>约定:将标准ACL放到与将要生效的主机越近越好，但是其实会对带宽有一定的损耗</li></ul><h2 id="扩展aclextend-access-control-lists"><a class="markdownIt-Anchor" href="#扩展aclextend-access-control-lists"></a> 扩展ACL(Extend Access Control Lists)</h2><ol><li>扩展ACL的编号范围为100-199，并"扩展"了标准ACL的功能。</li><li>扩展功能包括基于过滤流量的功能。<ol><li>目的地址</li><li>ip协议的部分(更加细分):您可以编写语句以仅拒绝"ICMP"等协议或"RIP"和"IGRP"之类的路由协议</li><li>协议套件的上层<ol><li>您可以编写语句以仅拒绝诸如"TFTP"或"HTTP"之类的协议</li><li>您可以使用eq，gt，lt和neq(等于，大于，小于和不等于)之类的操作数来指定如何处理特定协议。</li><li>例如，如果您希望访问列表允许除http访问之外的所有流量，则可以使用" permit ip any neq 80"(允许来自任意源地址和目的地址的不是80端口的信息)</li></ol></li></ol></li></ol><h3 id="扩展acl的两个功能"><a class="markdownIt-Anchor" href="#扩展acl的两个功能"></a> 扩展ACL的两个功能</h3><blockquote><p>在全局配置模式下顺序编写ACL语句。(语法更加丰富)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Router(config)# access-list access-list-number {permit|deny} {protocol|protocol-keyword}{source source-wildcard} {destination destination-wildcard} [protocol-specific options] [log]</span><br><span class="line">Lab-A(config)#access-list 101 deny tcp 192.5.5.0 0.0.0.255 210.93.105.0 0.0.0.255 eq telnet log</span><br></pre></td></tr></table></figure><blockquote><p>在接口配置模式下将ACL分组到一个或多个接口</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Router(config-if)#{protocol} access-group</span><br><span class="line">access-list-number {in/out}</span><br><span class="line">Lab-A(config-if)#ip access-group 101 out </span><br></pre></td></tr></table></figure><h3 id="扩展参数"><a class="markdownIt-Anchor" href="#扩展参数"></a> 扩展参数</h3><ol><li>access-list-number:choose from the range 100 to 199</li><li>{protocol | protocol-number}:For the CCNA, you only need to know ip and tcp–many more are available</li><li>{source source-wildcard}:same as in standard 和标准的相似</li><li>{destination destination-wildcard}:formatted like the standard, but specifies the destination 和标准格式系统</li><li>[protocol-specific options]：这个参数用于确认协议的过滤部分</li></ol><h3 id="端口号"><a class="markdownIt-Anchor" href="#端口号"></a> 端口号</h3><ol><li>查看tcp和udp协议的各种端口号，并了解以下最常见的端口号。</li><li>您还可以在{protocolspecific options}中键入名称(telnet)而不是数字(23)。</li></ol><p><img src="https://s2.loli.net/2022/06/01/WtVgoNi3KULJPjX.png" alt=""></p><h3 id="配置扩展acl的位置"><a class="markdownIt-Anchor" href="#配置扩展acl的位置"></a> 配置扩展ACL的位置</h3><ol><li>在下图中，我们要拒绝网络221.23.123.0访问服务器198.150.13.34</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec11/14.png" alt="">。</p><ol><li>访问列表应应用于什么路由器和接口？<ol><li>将访问列表写在路由器C上，将其应用于E0，并在</li><li>这将使网络不受221.23.123.0发往198.150.13.34的访问，但仍允许221.23.123.0访问Internet</li></ol></li></ol><blockquote><p>按照标准的原则，应该放置到Route A，而用扩展的放置的是Route C的E0上，放置对应的命令</p></blockquote><ul><li>由于扩展的ACL具有目标信息，因此<strong>您希望将其放置在尽可能靠近源的位置。</strong></li></ul><p><img src="https://s2.loli.net/2022/06/01/WivfXIS5aOyLz9h.png" alt=""></p><h3 id="编写并使用acl"><a class="markdownIt-Anchor" href="#编写并使用acl"></a> 编写并使用ACL</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Router-C(config)#access-list 100 deny ip 221.23.123.0 0.0.0.255 198.150.13.34 0.0.0.0</span><br><span class="line">Router-C(config)#access-list 100 permit ip any any</span><br><span class="line">Router-C(config)#int e0</span><br><span class="line">Router-C(config-if)#ip access-group 100 in</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/01/heaMB6oEyiXqv1N.png" alt=""></p><h3 id="acls的命名"><a class="markdownIt-Anchor" href="#acls的命名"></a> ACLS的命名</h3><ol><li>Cisco IOS的一项不错的功能是可以命名ACL。如果在同一路由器上需要99个以上的标准ACL，这将特别有用。</li><li>命名ACL后，提示将更改，您不再需要输入access-list和access-listnumber参数。</li><li>在下面的示例中，ACL命名为over_and，以提示应如何将其放置在接口上</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec11/17.png" alt=""></p><h3 id="acls的校验"><a class="markdownIt-Anchor" href="#acls的校验"></a> ACLS的校验</h3><ol><li><code>show access-lists</code> 查看全部</li><li><code>shows all access-lists configured on the router</code> 显示路由器上配置的所有访问列表</li><li><code>show access-lists {name | number}</code> 查看某一个端口的</li><li><code>shows the identified access list</code> 显示已识别的访问列表</li><li><code>show ip interface</code>:显示了应用于接口的访问列表(入站和出站)。</li><li><code>show running-config</code>:显示所有访问列表以及它们应用于什么接口</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;network-security&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#network-security&quot;&gt;&lt;/a&gt; Network Security&lt;/h1&gt;
&lt;h1 id=&quot;网络安全问题概述&quot;&gt;&lt;a class=&quot;markd</summary>
      
    
    
    
    <category term="计算机网络" scheme="http://little-hurui.cloud/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="互联网计算" scheme="http://little-hurui.cloud/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="计算机网络" scheme="http://little-hurui.cloud/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="互联网计算" scheme="http://little-hurui.cloud/tags/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
</feed>
