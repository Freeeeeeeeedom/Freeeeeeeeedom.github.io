<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Astar算法</title>
      <link href="/2022/09/21/Astar%E7%AE%97%E6%B3%95/"/>
      <url>/2022/09/21/Astar%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="相似度为-k-的字符串"><a href="https://leetcode.cn/problems/k-similar-strings/">854. 相似度为 K的字符串</a></h1><p>对于某些非负整数 <code>k</code> ，如果交换 <code>s1</code>中两个字母的位置恰好 <code>k</code> 次，能够使结果字符串等于<code>s2</code> ，则认为字符串 <code>s1</code> 和 <code>s2</code> 的<strong>相似度为</strong> <code>k</code> <strong>。</strong></p><p>给你两个字母异位词 <code>s1</code> 和 <code>s2</code> ，返回<code>s1</code> 和 <code>s2</code> 的相似度 <code>k</code>的最小值。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s1 = "ab", s2 = "ba"</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s1 = "abc", s2 = "bca"</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s1.length &lt;= 20</code></li><li><code>s2.length == s1.length</code></li><li><code>s1</code> 和 <code>s2</code> 只包含集合<code>{'a', 'b', 'c', 'd', 'e', 'f'}</code> 中的小写字母</li><li><code>s2</code> 是 <code>s1</code> 的一个字母异位词</li></ul><h1 id="题解">题解</h1><p>问题本质为将 <code>s1</code> 转换为 <code>s2</code>的最小操作次数，由于题目确保了 <code>s1</code> 和 <code>s2</code>互为字母异位词（必然有解），因此最好的求解方式是使用 AStar 算法。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 常用算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> BFS </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Concurrency Algotithms and Theories</title>
      <link href="/2022/09/19/Concurrency-Algotithms-and-Theories/"/>
      <url>/2022/09/19/Concurrency-Algotithms-and-Theories/</url>
      
        <content type="html"><![CDATA[<p>Concurrency: 同一时间有多个模块的独立执行</p><p>Parallel</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2 云计算架构</title>
      <link href="/2022/09/19/2-%E4%BA%91%E8%AE%A1%E7%AE%97%E6%9E%B6%E6%9E%84/"/>
      <url>/2022/09/19/2-%E4%BA%91%E8%AE%A1%E7%AE%97%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="云计算架构">云计算架构</h1><h2 id="计算架构及烟花">计算架构及烟花</h2><ul><li>中央集权架构</li><li>客户机/服务器架构</li><li>中间层架构</li><li>浏览器/服务器架构</li><li>C/S和B/S架构</li><li>面向服务架构</li></ul>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并查集枚举</title>
      <link href="/2022/09/18/%E5%B9%B6%E6%9F%A5%E9%9B%86%E6%9E%9A%E4%B8%BE/"/>
      <url>/2022/09/18/%E5%B9%B6%E6%9F%A5%E9%9B%86%E6%9E%9A%E4%B8%BE/</url>
      
        <content type="html"><![CDATA[<h4 id="最大人工岛"><a href="https://leetcode.cn/problems/making-a-large-island/">827.最大人工岛</a></h4><p>给你一个大小为 <code>n x n</code> 二进制矩阵 <code>grid</code>。<strong>最多</strong> 只能将一格 <code>0</code> 变成 <code>1</code>。</p><p>返回执行此操作后，<code>grid</code> 中最大的岛屿面积是多少？</p><p><strong>岛屿</strong> 由一组上、下、左、右四个方向相连的<code>1</code> 形成。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: grid = [[1, 0], [0, 1]]</span><br><span class="line">输出: 3</span><br><span class="line">解释: 将一格0变成1，最终连通两个小岛得到面积为 3 的岛屿。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: grid = [[1, 1], [1, 0]]</span><br><span class="line">输出: 4</span><br><span class="line">解释: 将一格0变成1，岛屿的面积扩大为 4。</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: grid = [[1, 1], [1, 1]]</span><br><span class="line">输出: 4</span><br><span class="line">解释: 没有0可以让我们变成1，面积依然为 4。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n == grid.length</code></li><li><code>n == grid[i].length</code></li><li><code>1 &lt;= n &lt;= 500</code></li><li><code>grid[i][j]</code> 为 <code>0</code> 或 <code>1</code></li></ul><h1 id="题解">题解</h1><p>为了方便，我们令<code>grid</code> 为<code>g</code></p><p>根据题意，我们想到通过并查集来维护所有连通块的大小，然后通过枚举寻找最优翻转点</p><p>具体的，我们先使用并查集维护所有<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.456ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4179.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(477,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(755,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1100,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(1378,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1656,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(2068,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2623.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3679.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></span>的块的连通性，并在维护连通性的过程中，使用<code>sz[idx]</code>记录下每个连通块的大小</p><p>随后，遍历<code>g</code>，根据原始的<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.308ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2346 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(477,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(755,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1100,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(1378,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1656,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(2068,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span>的值来分别处理：</p><ul><li>若是<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.456ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4179.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(477,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(755,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1100,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(1378,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1656,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(2068,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2623.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3679.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></span>，该位置不会作为翻转点，单真是最大面积未必是由翻转导致的，因此我们需要将<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="7.403ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3272 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469,0)"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mo" transform="translate(934,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1212,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1663,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(2148,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(2633,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(2994,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span>参与比较，其中<code>root</code>为<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.479ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1979.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1178.7,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(1590.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>所属的连通块的根节点编号</li><li>若<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.456ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4179.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(477,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(755,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1100,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(1378,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1656,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(2068,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2623.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3679.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></span>，该位置可作为翻转点，我们可以统计其四联通位置对应的连通块大小总和<code>tot</code>(若是四联通方向右相同联通块，只统计一次)，那么<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="6.628ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 2929.4 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(361,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(846,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1429.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(2429.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></span>即是翻转该位置所得到的新连通块大小</li></ul><p>最后取max</p><blockquote><p>一些细节：为了方便，我们令点 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.958ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3959.3 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(734,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1178.7,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(1590.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(1979.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2368.7,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2713.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(3158.3,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(3570.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>的编号从 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.507ex" role="img" focusable="false" viewBox="0 -666 1000 666"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container>开始；同时由于我们本身就要用 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.113ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 934 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469,0)"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g></g></g></svg></mjx-container>数组，因此我们可以随手把并查集的「按秩合并」也加上。体现在 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="5.887ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 2602 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(572,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1172,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1517,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(2002,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>操作时，我们总是将小的连通块合并到大的连通块上，从而确保我们并查集单次操作即使在最坏情况下复杂度仍为<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="15.224ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6729 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g><g data-mml-node="mo" transform="translate(1792,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2181,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2781,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3170,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(3559,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(4322,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4711,0)"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g><g data-mml-node="mo" transform="translate(5351,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5740,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6340,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>)（可看作常数）。需要注意只有同时应用「路径压缩」和「按秩合并」，并查集操作复杂度才为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="14.656ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6478 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(1152,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1541,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2141,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2530,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(2919,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(3682,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4071,0)"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g><g data-mml-node="mo" transform="translate(4711,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5100,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(5700,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(6089,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">static</span>  <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">510</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] p = <span class="keyword">new</span> <span class="title class_">int</span>[N*N],sz = <span class="keyword">new</span> <span class="title class_">int</span>[N*N];</span><br><span class="line">    <span class="comment">//parents and sizes</span></span><br><span class="line">    <span class="type">int</span>[][] dirs = <span class="keyword">new</span> <span class="title class_">int</span>[][]{{<span class="number">1</span>,<span class="number">0</span>},{-<span class="number">1</span>,<span class="number">0</span>},{<span class="number">0</span>,<span class="number">1</span>},{<span class="number">0</span>,-<span class="number">1</span>}};</span><br><span class="line">    <span class="comment">// directions</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> x)</span>{</span><br><span class="line">        <span class="keyword">if</span>(p[x] != x) p[x] = find(p[x]);</span><br><span class="line">        <span class="keyword">return</span> p[x];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>{</span><br><span class="line">        <span class="type">int</span> <span class="variable">ra</span> <span class="operator">=</span> find(a);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rb</span> <span class="operator">=</span> find(b);</span><br><span class="line">        <span class="keyword">if</span>(ra == rb) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(sz[ra] &gt; sz[rb]) union(b,a);</span><br><span class="line">        <span class="keyword">else</span>{</span><br><span class="line">            sz[rb] += sz[ra];</span><br><span class="line">            p[ra] = p[rb];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">largestIsland</span><span class="params">(<span class="type">int</span>[][] grid)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n*n;i++){</span><br><span class="line">            p[i] = i;</span><br><span class="line">            sz[i] = <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//init</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++){</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++){</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span>[] di: dirs){</span><br><span class="line">                    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> i + di[<span class="number">0</span>];</span><br><span class="line">                    <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> j + di[<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span>(x &lt;<span class="number">0</span> || x &gt;=n || y &gt;=n || y &lt;<span class="number">0</span> || grid[x][y] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                    union(i *n + j + <span class="number">1</span>,x*n + y + <span class="number">1</span>);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//将连通块联通，并记入parents 和sizes</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++){</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++){</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="number">1</span>){</span><br><span class="line">                    ans = Math.max(ans,sz[find(i*n + j + <span class="number">1</span>)]);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span>{</span><br><span class="line">                    <span class="type">int</span> <span class="variable">tot</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">                    Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span>[] di: dirs){</span><br><span class="line">                        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> i + di[<span class="number">0</span>];</span><br><span class="line">                        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> j + di[<span class="number">1</span>];</span><br><span class="line">                        <span class="keyword">if</span>(x&lt;<span class="number">0</span> || x&gt;=n || y&lt;<span class="number">0</span> || y&gt;=n || grid[x][y]==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">root</span> <span class="operator">=</span> find(x*n + y + <span class="number">1</span>);</span><br><span class="line">                        <span class="keyword">if</span>(set.contains(root)) <span class="keyword">continue</span>;</span><br><span class="line">                        tot += sz[root];</span><br><span class="line">                        set.add(root);</span><br><span class="line">                    }</span><br><span class="line">                    ans = Math.max(ans,tot);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 常用算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> 并查集 </tag>
            
            <tag> BFS </tag>
            
            <tag> DFS </tag>
            
            <tag> 枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>扫描线</title>
      <link href="/2022/09/16/%E6%89%AB%E6%8F%8F%E7%BA%BF/"/>
      <url>/2022/09/16/%E6%89%AB%E6%8F%8F%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h4 id="矩形面积-ii"><a href="https://leetcode.cn/problems/rectangle-area-ii/">850. 矩形面积II</a></h4><p>我们给出了一个（轴对齐的）二维矩形列表 <code>rectangles</code> 。对于 <code>rectangle[i] = [x1, y1, x2, y2]</code>，其中（x1，y1）是矩形<code>i</code> 左下角的坐标， <code>(xi1, yi1)</code> 是该矩形<strong>左下角</strong> 的坐标， <code>(xi2, yi2)</code> 是该矩形<strong>右上角</strong> 的坐标。</p><p>计算平面中所有 <code>rectangles</code> 所覆盖的<strong>总面积</strong> 。任何被两个或多个矩形覆盖的区域应只计算<strong>一次</strong> 。</p><p>返回 <strong><em>总面积</em></strong> 。因为答案可能太大，返回<code>109 + 7</code> 的 <strong>模</strong> 。</p><p><strong>示例 1：</strong></p><p><img src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/06/rectangle_area_ii_pic.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：rectangles = [[0,0,2,2],[1,0,2,3],[1,0,3,1]]</span><br><span class="line">输出：6</span><br><span class="line">解释：如图所示，三个矩形覆盖了总面积为6的区域。</span><br><span class="line">从(1,1)到(2,2)，绿色矩形和红色矩形重叠。</span><br><span class="line">从(1,0)到(2,3)，三个矩形都重叠。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：rectangles = [[0,0,1000000000,1000000000]]</span><br><span class="line">输出：49</span><br><span class="line">解释：答案是 1018 对 (109 + 7) 取模的结果， 即 49 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= rectangles.length &lt;= 200</code></li><li><code>rectanges[i].length = 4</code></li><li><code>0 &lt;= xi1, yi1, xi2, yi2 &lt;= 109</code></li><li>矩形叠加覆盖后的总面积不会超越 <code>2^63 - 1</code>，这意味着可以用一个 64 位有符号整数来保存面积结果。</li></ul><h1 id="题解">题解</h1><p>这是一道「扫描线」模板题。</p><p>将所有给定的矩形的左右边对应的 <code>x</code>端点提取出来并排序，每个端点可看作是一条竖直的线段（红色），问题转换为求解「由多条竖直线段分割开」的多个矩形的面积总和（黄色）：</p><p><img src="https://pic.leetcode-cn.com/1663294074-shUiEA-image.png"></p><p>相邻线段之间的宽度为单个矩形的「宽度」（通过 <code>x</code>差值直接算得），问题转换为求该区间内高度的并集（即矩形的高度）。</p><p>由于数据范围只有200，我们可以对给定的所有矩形进行遍历，统计所有对该矩形有贡献的<code>y</code> 值线段（即有哪些 <code>rs[i]</code>落在该矩形中），再对线段进行求交集（总长度），即可计算出该矩形的「高度」，从而计算出来该矩形的面积。</p><p><img src="https://pic.leetcode-cn.com/1663293673-WeoWgG-image.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">MOD</span> <span class="operator">=</span> (<span class="type">int</span>)<span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rectangleArea</span><span class="params">(<span class="type">int</span>[][] rs)</span> {</span><br><span class="line">       List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span>[] info : rs){</span><br><span class="line">           list.add(info[<span class="number">0</span>]);</span><br><span class="line">           list.add(info[<span class="number">2</span>]);</span><br><span class="line">           <span class="comment">//添加左边界和右边界</span></span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">        Collections.sort(list);</span><br><span class="line">       <span class="comment">//排序</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;list.size();i++){</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> list.get(i-<span class="number">1</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> list.get(i);</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> b - a;</span><br><span class="line">            <span class="keyword">if</span>(len == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            List&lt;<span class="type">int</span>[]&gt; lines = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span>[] info: rs){</span><br><span class="line">                <span class="keyword">if</span>(info[<span class="number">0</span>] &lt;= a &amp;&amp; info[<span class="number">2</span>] &gt;= b) lines.add(<span class="keyword">new</span> <span class="title class_">int</span>[]{info[<span class="number">1</span>],info[<span class="number">3</span>]});</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//寻找a - b之间的存在的矩形</span></span><br><span class="line"></span><br><span class="line">            Collections.sort(lines,(l1,l2)-&gt;{</span><br><span class="line">                <span class="keyword">return</span> l1[<span class="number">0</span>] != l2[<span class="number">0</span>] ? l1[<span class="number">0</span>] - l2[<span class="number">0</span>] : l1[<span class="number">1</span>] - l2[<span class="number">1</span>];</span><br><span class="line">            });</span><br><span class="line">            <span class="comment">//如果下界相同，比较上界，下界不同，按由小到大排序</span></span><br><span class="line"></span><br><span class="line">            <span class="type">long</span> <span class="variable">tot</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="type">long</span> <span class="variable">r</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span>[] cur : lines){</span><br><span class="line">                <span class="keyword">if</span>(cur[<span class="number">0</span>] &gt; r){</span><br><span class="line">                    tot += r - l;</span><br><span class="line">                    l = cur[<span class="number">0</span>];</span><br><span class="line">                    r = cur[<span class="number">1</span>];</span><br><span class="line">                }<span class="keyword">else</span> <span class="keyword">if</span>(cur[<span class="number">1</span>] &gt; r){</span><br><span class="line">                    r = cur[<span class="number">1</span>];</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            tot += r - l;</span><br><span class="line">            ans += tot * len;</span><br><span class="line">            ans %= MOD;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) ans;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>ps：这里除了可以用数组维护 矩阵的高之外，还可以用线段树（doge）</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 常用算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 扫描线 </tag>
            
            <tag> 有序集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位运算 vs 找规律</title>
      <link href="/2022/09/15/%E4%BD%8D%E8%BF%90%E7%AE%97-vs-%E6%89%BE%E8%A7%84%E5%BE%8B/"/>
      <url>/2022/09/15/%E4%BD%8D%E8%BF%90%E7%AE%97-vs-%E6%89%BE%E8%A7%84%E5%BE%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="灯泡开关-ⅱ"><a href="https://leetcode.cn/problems/bulb-switcher-ii/">672. 灯泡开关Ⅱ</a></h1><p>房间中有 <code>n</code> 只已经打开的灯泡，编号从 <code>1</code> 到<code>n</code> 。墙上挂着 <strong>4 个开关</strong> 。</p><p>这 4 个开关各自都具有不同的功能，其中：</p><ul><li><strong>开关 1：</strong>反转当前所有灯的状态（即开变为关，关变为开）</li><li><strong>开关 2 ：</strong>反转编号为偶数的灯的状态（即<code>2, 4, ...</code>）</li><li><strong>开关 3 ：</strong>反转编号为奇数的灯的状态（即<code>1, 3, ...</code>）</li><li><strong>开关 4 ：</strong>反转编号为 <code>j = 3k + 1</code>的灯的状态，其中 <code>k = 0, 1, 2, ...</code>（即<code>1, 4, 7, 10, ...</code>）</li></ul><p>你必须 <strong>恰好</strong> 按压开关 <code>presses</code>次。每次按压，你都需要从 4 个开关中选出一个来执行按压操作。</p><p>给你两个整数 <code>n</code> 和 <code>presses</code>，执行完所有按压之后，返回 <strong>不同可能状态</strong> 的数量。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 1, presses = 1</span><br><span class="line">输出：2</span><br><span class="line">解释：状态可以是：</span><br><span class="line">- 按压开关 1 ，[关]</span><br><span class="line">- 按压开关 2 ，[开]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 2, presses = 1</span><br><span class="line">输出：3</span><br><span class="line">解释：状态可以是：</span><br><span class="line">- 按压开关 1 ，[关, 关]</span><br><span class="line">- 按压开关 2 ，[开, 关]</span><br><span class="line">- 按压开关 3 ，[关, 开]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 3, presses = 1</span><br><span class="line">输出：4</span><br><span class="line">解释：状态可以是：</span><br><span class="line">- 按压开关 1 ，[关, 关, 关]</span><br><span class="line">- 按压开关 2 ，[关, 开, 关]</span><br><span class="line">- 按压开关 3 ，[开, 开, 开]</span><br><span class="line">- 按压开关 4 ，[关, 开, 开]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 1000</code></li><li><code>0 &lt;= presses &lt;= 1000</code></li></ul><h1 id="题解">题解</h1><h2 id="位运算模拟">位运算模拟</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">flipLights</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> presses)</span> {</span><br><span class="line">    <span class="type">int</span>[] ops = <span class="keyword">new</span> <span class="title class_">int</span>[]{<span class="number">0b111111</span>, <span class="number">0b010101</span>, <span class="number">0b101010</span>, <span class="number">0b100100</span>};</span><br><span class="line">    <span class="comment">//利用位运算模拟四个开关</span></span><br><span class="line">    Set&lt;Integer&gt; vis = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    n = Math.min(n,<span class="number">6</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">mask</span> <span class="operator">=</span> <span class="number">0</span>;mask &lt; <span class="number">1</span> &lt;&lt; <span class="number">4</span>; ++mask){</span><br><span class="line">        <span class="comment">//mask代表四个按钮的情况</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> Integer.bitCount(mask);</span><br><span class="line">        <span class="comment">//统计有几个开关打开</span></span><br><span class="line">        <span class="keyword">if</span>(cnt &lt;= presses &amp;&amp; cnt % <span class="number">2</span> == presses % <span class="number">2</span>){</span><br><span class="line">            <span class="comment">//对于每个开关，如果操作偶数次，相当于没有操作</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++){</span><br><span class="line">                <span class="keyword">if</span>(((mask &gt;&gt; i ) &amp; <span class="number">1</span>) == <span class="number">1</span>) t^=ops[i];</span><br><span class="line">            }</span><br><span class="line">            t &amp;= ((<span class="number">1</span> &lt;&lt; <span class="number">6</span>) - <span class="number">1</span>);</span><br><span class="line">            t &gt;&gt;= (<span class="number">6</span> -n);</span><br><span class="line">            vis.add(t);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> vis.size();</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="找规律">找规律</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">flipLights</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> presses)</span> {</span><br><span class="line">    <span class="keyword">if</span>(presses == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(n       == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(n       == <span class="number">2</span>) <span class="type">return</span> <span class="variable">presses</span> <span class="operator">=</span>= <span class="number">1</span> ? <span class="number">3</span> : <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">if</span>(presses == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">if</span>(presses == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 常用算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> 位运算 </tag>
            
            <tag> 数学 </tag>
            
            <tag> BFS </tag>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cryptography Concepts</title>
      <link href="/2022/09/15/Cryptography%20Concepts/"/>
      <url>/2022/09/15/Cryptography%20Concepts/</url>
      
        <content type="html"><![CDATA[<h1 id="cryptography-concepts">Cryptography Concepts</h1><h2 id="cryptography">Cryptography</h2><blockquote><p>The art of secret writing</p></blockquote><ul><li><strong>Is</strong><ul><li>A tremendous tool for protecting information</li><li>The basis for many security mechanisms</li></ul></li><li><strong>Is not</strong><ul><li>The solution to all security problems</li><li>Reliable unless implemented and used properly</li><li>Something you should try to invent yourself</li></ul></li></ul><h2 id="security-properties">7 Security Properties</h2><ul><li>Authentication (authenticity)</li><li>Confidentiality</li><li>Integrity</li><li>Non-repudiation</li><li>Authorization</li><li>Freshness</li><li>Availability</li></ul><h2 id="basic-cryptography-terminology">Basic CryptographyTerminology</h2><ul><li>Plaintext : the original message</li><li>Ciphertext : the coded message</li><li>Key : info used in cipher known only to sender/reveiver</li><li>Encryption : converting plaintext to ciphertext</li><li>Decryption : converting ciphertext to plaintext</li><li>Cipher : algotithom for performing encryption or decryption</li></ul><h2 id="unconditional-vs.-computational-security">Unconditional vs.Computational Security</h2><ul><li><strong>Unconditional (or “information theoretic”) security</strong>─ No matter how much computer power is available, the cipher cannot bebroken ─ The ciphertext provides insufficient information to uniquelydetermine the corresponding plaintext</li><li><strong>Computational security</strong> ─ The cost of breaking thecipher exceeds the value of the encrypted info ─ The time required tobreak the cipher exceeds the useful lifetime of the info ─ Most modernschemes we will see are considered computationally secure</li></ul><h2 id="types-of-attacks-on-encrypted-messages">Types of Attacks onEncrypted Messages</h2><ul><li>Ciphertext only<ul><li>Attacker knows: only ciphertext.</li></ul></li><li>Known plaintext<ul><li>Attacker knows: (1) ciphertext, (2) one or more plaintext-ciphertextpairs formed with the key.</li></ul></li><li><strong>Chosen plaintext</strong><ul><li>Attacker knows: (1) ciphertext, (2) plaintext messages chosen by theattacker, together with its corresponding ciphertext generated with thekey.</li></ul></li><li>Chosen ciphertext<ul><li>Attacker knows: (1) ciphertext, (2) purported ciphertext chosen byattacker, together with its corresponding plaintext generated with thekey.</li></ul></li><li>Chosen text<ul><li>Attacker knows: (1) ciphertext, (2) plaintext messages chosen by theattacker, together with its corresponding ciphertext generated with thekey, (3) purported ciphertext chosen by attacker, together with itscorresponding plaintext generated with the key.</li></ul></li></ul><h2 id="brute-force-search">Brute Force Search</h2><p><img src="https://s2.loli.net/2022/09/17/iFE8RYfahq9uBKL.png"></p><h2 id="cryptosystems">Cryptosystems</h2><ul><li>Classified along three dimensions:<ul><li>Type of operations used for transforming plaintext into ciphertext<ul><li>Binary arithmetic: shifts, XORs, ANDs, etc</li><li>Integer arithmetic</li></ul></li><li>Number of keys used</li></ul></li><li></li></ul><h1 id="symmetric-key-cryptography">Symmetric Key Cryptography</h1><h1 id="sysmetric-key-encryption-definition">Sysmetric-Key Encryption:Definition</h1><ul><li>Correctness</li><li>Effi</li></ul><h2 id="pros-cons">Pros &amp; Cons</h2><h2 id="block-ciphers">Block Ciphers</h2><p><img src="https://s2.loli.net/2022/09/17/tmrwCWSlDJRHv6z.png"></p><ul><li><strong>Block cipher: </strong> An encryption/decryption algorithmthat encrypts a fixed-sized block of bits</li><li>A block cipher is a substitution cipher</li><li>Each block may be viewed as a gigantic character</li><li>The "alphabet" consists of <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.74ex" height="1.914ex" role="img" focusable="false" viewBox="0 -846 1210.9 846"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g></g></svg></mjx-container></span>gigantic character</li></ul>]]></content>
      
      
      <categories>
          
          <category> Network Security and Intrusion Detection </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network Security </tag>
            
            <tag> Intrusion Detection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>石子游戏IV</title>
      <link href="/2022/09/14/%E7%9F%B3%E5%AD%90%E6%B8%B8%E6%88%8FIV/"/>
      <url>/2022/09/14/%E7%9F%B3%E5%AD%90%E6%B8%B8%E6%88%8FIV/</url>
      
        <content type="html"><![CDATA[<h1 id="石子游戏-iv"><a href="https://leetcode.cn/problems/stone-game-iv/">1510. 石子游戏IV</a></h1><p>Alice 和 Bob 两个人轮流玩一个游戏，Alice 先手。</p><p>一开始，有 <code>n</code>个石子堆在一起。每个人轮流操作，正在操作的玩家可以从石子堆里拿走<strong>任意</strong> 非零 <strong>平方数</strong> 个石子。</p><p>如果石子堆里没有石子了，则无法操作的玩家输掉游戏。</p><p>给你正整数 <code>n</code> ，且已知两个人都采取最优策略。如果 Alice会赢得比赛，那么返回 <code>True</code> ，否则返回 <code>False</code>。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 1</span><br><span class="line">输出：true</span><br><span class="line">解释：Alice 拿走 1 个石子并赢得胜利，因为 Bob 无法进行任何操作。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 2</span><br><span class="line">输出：false</span><br><span class="line">解释：Alice 只能拿走 1 个石子，然后 Bob 拿走最后一个石子并赢得胜利（2 -&gt; 1 -&gt; 0）。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 4</span><br><span class="line">输出：true</span><br><span class="line">解释：n 已经是一个平方数，Alice 可以一次全拿掉 4 个石子并赢得胜利（4 -&gt; 0）。</span><br></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 7</span><br><span class="line">输出：false</span><br><span class="line">解释：当 Bob 采取最优策略时，Alice 无法赢得比赛。</span><br><span class="line">如果 Alice 一开始拿走 4 个石子， Bob 会拿走 1 个石子，然后 Alice 只能拿走 1 个石子，Bob 拿走最后一个石子并赢得胜利（7 -&gt; 3 -&gt; 2 -&gt; 1 -&gt; 0）。</span><br><span class="line">如果 Alice 一开始拿走 1 个石子， Bob 会拿走 4 个石子，然后 Alice 只能拿走 1 个石子，Bob 拿走最后一个石子并赢得胜利（7 -&gt; 6 -&gt; 2 -&gt; 1 -&gt; 0）。</span><br></pre></td></tr></table></figure><p><strong>示例 5：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 17</span><br><span class="line">输出：false</span><br><span class="line">解释：如果 Bob 采取最优策略，Alice 无法赢得胜利。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 10^5</code></li></ul><h1 id="题解">题解</h1><p>我们用 $f[i] <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="102.339ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 45233.9 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">表</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">示</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">先</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">手</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">在</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">面</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">对</text></g><g data-mml-node="mo" transform="translate(7222.2,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mi" transform="translate(7944.4,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(8511.7,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mi" transform="translate(9233.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">颗</text></g><g data-mml-node="mi" transform="translate(10233.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">石</text></g><g data-mml-node="mi" transform="translate(11233.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">子</text></g><g data-mml-node="mi" transform="translate(12233.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(13233.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">是</text></g><g data-mml-node="mi" transform="translate(14233.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">否</text></g><g data-mml-node="mi" transform="translate(15233.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">处</text></g><g data-mml-node="mi" transform="translate(16233.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">于</text></g><g data-mml-node="mi" transform="translate(17233.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">必</text></g><g data-mml-node="mi" transform="translate(18233.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">胜</text></g><g data-mml-node="mi" transform="translate(19233.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">态</text></g><g data-mml-node="mi" transform="translate(20233.9,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">（</text></g><g data-mml-node="mi" transform="translate(21233.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">会</text></g><g data-mml-node="mi" transform="translate(22233.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">赢</text></g><g data-mml-node="mi" transform="translate(23233.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">得</text></g><g data-mml-node="mi" transform="translate(24233.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">比</text></g><g data-mml-node="mi" transform="translate(25233.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">赛</text></g><g data-mml-node="mi" transform="translate(26233.9,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">）</text></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(27233.9,0)"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">。</text></g></g><g data-mml-node="mi" transform="translate(28233.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">由</text></g><g data-mml-node="mi" transform="translate(29233.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">于</text></g><g data-mml-node="mi" transform="translate(30233.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">先</text></g><g data-mml-node="mi" transform="translate(31233.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">手</text></g><g data-mml-node="mi" transform="translate(32233.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">和</text></g><g data-mml-node="mi" transform="translate(33233.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">后</text></g><g data-mml-node="mi" transform="translate(34233.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">手</text></g><g data-mml-node="mi" transform="translate(35233.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">都</text></g><g data-mml-node="mi" transform="translate(36233.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">采</text></g><g data-mml-node="mi" transform="translate(37233.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">取</text></g><g data-mml-node="mi" transform="translate(38233.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">最</text></g><g data-mml-node="mi" transform="translate(39233.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">优</text></g><g data-mml-node="mi" transform="translate(40233.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">策</text></g><g data-mml-node="mi" transform="translate(41233.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">略</text></g><g data-mml-node="mi" transform="translate(42233.9,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(43233.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">那</text></g><g data-mml-node="mi" transform="translate(44233.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">么</text></g></g></g></svg></mjx-container></span>f[i] $为必胜态，</p><p>当且仅当存在某个 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.215ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 3631 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(828,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1395.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(2395.4,0)"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mn" transform="translate(554,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(3353,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container>为必败态。也就是说，当先手在面对 $i <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="24.887ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 11000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">颗</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">石</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">子</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">可</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">以</text></g><g data-mml-node="mi" transform="translate(7000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">选</text></g><g data-mml-node="mi" transform="translate(8000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">择</text></g><g data-mml-node="mi" transform="translate(9000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">取</text></g><g data-mml-node="mi" transform="translate(10000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">走</text></g></g></g></svg></mjx-container></span> k2<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="11.312ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 5000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">颗</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">剩</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">余</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g></g></g></svg></mjx-container>i−k^2 $颗对于后手来说是必败态，因此先手会获胜。</p><p>状态转移方程为</p><p><img src="https://s2.loli.net/2022/09/17/mEDWnPf3taxNlqK.png"></p><p>边界条件为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="11.881ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5251.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(828,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(1328,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(1883.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2939.6,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(3489.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(4018.6,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(4316.6,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(4785.6,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></svg></mjx-container>，即没有石子时，先手会输掉游戏。</p><p>最终的答案即为 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.86ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1706 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(828,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1428,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span>。</p><h2 id="代码">代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">winnerSquareGame</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="type">boolean</span>[] f= <span class="keyword">new</span> <span class="title class_">boolean</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++){</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>; k * k &lt;= i; k++){</span><br><span class="line">                <span class="keyword">if</span>(!f[i-k*k]) {</span><br><span class="line">                    f[i] = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> f[n];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 常用算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 博弈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最大交换</title>
      <link href="/2022/09/13/%E6%9C%80%E5%A4%A7%E4%BA%A4%E6%8D%A2/"/>
      <url>/2022/09/13/%E6%9C%80%E5%A4%A7%E4%BA%A4%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="最大交换"><a href="https://leetcode.cn/problems/maximum-swap/">670. 最大交换</a></h1><p>给定一个非负整数，你<strong>至多</strong>可以交换一次数字中的任意两位。返回你能得到的最大值。</p><p><strong>示例 1 :</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: 2736</span><br><span class="line">输出: 7236</span><br><span class="line">解释: 交换数字2和数字7。</span><br></pre></td></tr></table></figure><p><strong>示例 2 :</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: 9973</span><br><span class="line">输出: 9973</span><br><span class="line">解释: 不需要交换。</span><br></pre></td></tr></table></figure><p><strong>注意:</strong></p><ol type="1"><li>给定数字的范围是 [0, 108]</li></ol><h1 id="题解">题解</h1><h2 id="模拟">模拟</h2><p>根据题意，我们应当将大的数放在高位，所以当数值相同时我们应该选择低位的数字</p><p>我们将num中的每一位放到数组中，同时创建一个等长数组idx来代指num后缀中最大值的对应的下标，即下标为[0,i]位中num[idx[i]] 对应的数值最大</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solutionclass</span> Solution {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumSwap</span><span class="params">(<span class="type">int</span> num)</span> {</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(num != <span class="number">0</span>){</span><br><span class="line">            list.add(num%<span class="number">10</span>);</span><br><span class="line">            num /= <span class="number">10</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//此时num倒序放置与list中</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> list.size(),ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] idx = <span class="keyword">new</span> <span class="title class_">int</span>[n];<span class="comment">//idx[i]代表 0-i位中的最大值的下标</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;n;i++){</span><br><span class="line">            <span class="keyword">if</span>(list.get(i) &gt; list.get(j)) j = i;</span><br><span class="line">            <span class="comment">//j 指向前i位中的最大值</span></span><br><span class="line">            idx[i] = j;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--){</span><br><span class="line">            <span class="keyword">if</span>(list.get(idx[i]) != list.get(i)){</span><br><span class="line">                <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span>list.get(idx[i]);</span><br><span class="line">                list.set(idx[i],list.get(i));</span><br><span class="line">                list.set(i,c);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--) ans = ans * <span class="number">10</span> + list.get(i);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="贪心">贪心</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumSwap</span><span class="params">(<span class="type">int</span> num)</span> {</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(num &lt; <span class="number">10</span>) <span class="keyword">return</span> num;</span><br><span class="line">            <span class="type">char</span>[] cs = String.valueOf(num).toCharArray();</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> cs.length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) {</span><br><span class="line">                <span class="type">int</span> <span class="variable">maxIdx</span> <span class="operator">=</span> i;</span><br><span class="line">                <span class="comment">//从后向前遍历</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> n - <span class="number">1</span>; j &gt; i; j--) {</span><br><span class="line">                    <span class="keyword">if</span> (cs[j] &gt; cs[maxIdx]) maxIdx = j;</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">//发生交换</span></span><br><span class="line">                <span class="keyword">if</span> (maxIdx != i) {</span><br><span class="line">                    <span class="type">char</span> <span class="variable">tmp</span> <span class="operator">=</span> cs[maxIdx];</span><br><span class="line">                    cs[maxIdx] = cs[i];</span><br><span class="line">                    cs[i] = tmp;</span><br><span class="line">                    <span class="keyword">return</span> Integer.parseInt(<span class="keyword">new</span> <span class="title class_">String</span>(cs));</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 常用算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> 数学 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Security Basics</title>
      <link href="/2022/09/08/Security-Basics/"/>
      <url>/2022/09/08/Security-Basics/</url>
      
        <content type="html"><![CDATA[<h1 id="security-basics">Security Basics</h1><h2 id="computer-security-objectives">Computer Security Objectives</h2><h3 id="confidentiality">Confidentiality</h3><ul><li>Confidentiality is a concealment of information 保密性</li></ul><h3 id="integrity">Integrity</h3><ul><li>Integrity is prevention of unauthorized changes</li><li>Data integrity</li><li>System integrity</li></ul><h3 id="availability">Availability</h3><ul><li>Availability is ability to use information or resources</li></ul><h2 id="security-mindset">Security Mindset</h2><h2 id="threat-modeling">Threat Modeling</h2><ul><li>Assets</li><li>Adversaries</li><li>Vulnerabilities</li><li>Threats</li><li>Risk</li><li>Possible Defenses</li></ul><h2 id="security-principles">Security Principles</h2><p><img src="../../../../../../AppData/Roaming/Typora/typora-user-images/image-20220917105350987.png"></p>]]></content>
      
      
      <categories>
          
          <category> Network Security and Intrusion Detection </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network Security </tag>
            
            <tag> Intrusion Detection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Introduction</title>
      <link href="/2022/09/08/Introduction/"/>
      <url>/2022/09/08/Introduction/</url>
      
        <content type="html"><![CDATA[<h1 id="introduction">Introduction</h1><h2 id="how-systems-fail">How Systems Fail</h2><h2 id="what-is-security">What is security</h2><ul><li>integrity</li><li>availability</li><li>confidentiality</li><li>...</li></ul><h2 id="correctness-vs.-security">Correctness vs. Security</h2><p><strong>adversary</strong></p><h2 id="why-is-security-important">Why is security important?</h2><h2 id="what-is-hackable">What is hackable?</h2><p><strong>Everything</strong>!</p><h2 id="why">Why?</h2><h3 id="steal-user-credentials">Steal User Credentials</h3><p><img src="https://s2.loli.net/2022/09/17/9R2mBNJYnFPTe5s.png"></p><h3 id="financial-threats">Financial Threats</h3><h3 id="ransomware">Ransomware</h3><ul><li>WannaCry</li></ul><h3 id="bitcoin-mining">Bitcoin Mining</h3><h3 id="ip-address-bandwidth-stealing">IP address &amp; bandwidthstealing</h3><h2 id="why-does-this-happen">Why does this happen?</h2><h2 id="why-buy-0days">Why buy 0days?</h2><h2 id="course-overview">Course Overview</h2><ul><li>Basic Cryptography</li><li>Authentication</li><li>Key Management</li><li>Usable Security</li><li>Software Security</li><li>Web Security</li><li>Data Security and Privacy</li><li>Security for Emerging Technologies<ul><li>Security of ML, Autonomous Vehicle...</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Network Security and Intrusion Detection </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network Security </tag>
            
            <tag> Intrusion Detection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>乘法原理运用</title>
      <link href="/2022/09/07/%E4%B9%98%E6%B3%95%E5%8E%9F%E7%90%86%E8%BF%90%E7%94%A8/"/>
      <url>/2022/09/07/%E4%B9%98%E6%B3%95%E5%8E%9F%E7%90%86%E8%BF%90%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="统计子串中的唯一字符"><a href="https://leetcode.cn/problems/count-unique-characters-of-all-substrings-of-a-given-string/">828.统计子串中的唯一字符</a></h1><p>我们定义了一个函数 <code>countUniqueChars(s)</code> 来统计字符串<code>s</code> 中的唯一字符，并返回唯一字符的个数。</p><p>例如：<code>s = "LEETCODE"</code> ，则其中 <code>"L"</code>,<code>"T"</code>,<code>"C"</code>,<code>"O"</code>,<code>"D"</code>都是唯一字符，因为它们只出现一次，所以<code>countUniqueChars(s) = 5</code></p><p>本题将会给你一个字符串 <code>s</code> ，我们需要返回<code>countUniqueChars(t)</code> 的总和，其中 <code>t</code> 是<code>s</code> 的子字符串。输入用例保证返回值为 32 位整数。</p><p>注意，某些子字符串可能是重复的，但你统计时也必须算上这些重复的子字符串（也就是说，你必须统计<code>s</code> 的所有子字符串中的唯一字符）</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入: s = "ABC"</span><br><span class="line">输出: 10</span><br><span class="line">解释: 所有可能的子串为："A","B","C","AB","BC" 和 "ABC"。</span><br><span class="line">     其中，每一个子串都由独特字符构成。</span><br><span class="line">     所以其长度总和为：1 + 1 + 1 + 2 + 2 + 3 = 10</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = "ABA"</span><br><span class="line">输出: 8</span><br><span class="line">解释: 除了 countUniqueChars("ABA") = 1 之外，其余与示例 1 相同。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = "LEETCODE"</span><br><span class="line">输出：92</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10^5</code></li><li><code>s</code> 只包含大写英文字符</li></ul><h1 id="题解">题解</h1><p>看到的第一反应的用DP，但是发现状态转移方程很难写</p><p>题目需要求所有子数组的唯一字符的数量之和，可以等价为求每一个<code>s[i]</code>对答案的贡献，即每个<code>s[i]</code>可以作为多少个子数组的唯一元素</p><h2 id="代码">代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">uniqueLetterString</span><span class="params">(String s)</span> {</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="type">char</span>[] cs = s.toCharArray();</span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> s.length();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] left = <span class="keyword">new</span> <span class="title class_">int</span>[l];</span><br><span class="line">    <span class="type">int</span>[] right = <span class="keyword">new</span> <span class="title class_">int</span>[l];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;l;i++){</span><br><span class="line">        <span class="type">int</span> <span class="variable">i_l</span> <span class="operator">=</span> i-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i_r</span> <span class="operator">=</span> i+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i_l&gt;=<span class="number">0</span> &amp;&amp; cs[i_l] != cs[i]) i_l--;</span><br><span class="line">        <span class="keyword">while</span>(i_r&lt;l  &amp;&amp; cs[i_r] != cs[i]) i_r++;</span><br><span class="line"></span><br><span class="line">        left[i] = i_l;</span><br><span class="line">        right[i]= i_r;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;l;i++){</span><br><span class="line"></span><br><span class="line">        ans += (i - left[i]) * (right[i] - i);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>可以看到这样时间复杂度过高</p><p>我们通过预处理来大幅减少计算左右的边界,已知我们可以通过单调栈来处理左右边界，这里我们采取一种新的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>{</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] idx = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">uniqueLetterString</span><span class="params">(String s)</span> {</span><br><span class="line">        <span class="type">char</span>[] cs = s.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span>   <span class="operator">=</span> s.length();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] l   = <span class="keyword">new</span> <span class="title class_">int</span>[len];</span><br><span class="line">        <span class="type">int</span>[] r   = <span class="keyword">new</span> <span class="title class_">int</span>[len];</span><br><span class="line">        <span class="comment">//左右边界</span></span><br><span class="line">        Arrays.fill(idx,-<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//左边界预处理</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++){</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> cs[i] - <span class="string">'A'</span>;</span><br><span class="line">            l[i] = idx[index];</span><br><span class="line">            idx[index] = i;</span><br><span class="line">        }</span><br><span class="line">        Arrays.fill(idx,len);</span><br><span class="line">        <span class="comment">//右边界预处理</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=len-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--){</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> cs[i]-<span class="string">'A'</span>;</span><br><span class="line">            r[i] = idx[index];</span><br><span class="line">            idx[index] = i;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++){</span><br><span class="line">            ans += (i-l[i]) *  (r[i] - i);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 常用算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章-导论</title>
      <link href="/2022/09/06/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%AF%BC%E8%AE%BA/"/>
      <url>/2022/09/06/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%AF%BC%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-导论">第一章 导论</h1><h2 id="什么是软件">什么是软件？</h2><p>代码 + 文档</p><h2 id="问题域-和-解系统">问题域 和 解系统</h2>]]></content>
      
      
      <categories>
          
          <category> 需求与商业模式创新 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 需求与商业模式创新 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Finite Automata</title>
      <link href="/2022/09/06/Finite%20Automata/"/>
      <url>/2022/09/06/Finite%20Automata/</url>
      
        <content type="html"><![CDATA[<h1 id="finite-automata">Finite Automata</h1><h2 id="what-is-a-finite-automata">What is a Finite Automata?</h2><ul><li>A formal system</li><li>Remembers only a finite amount of information</li><li>Information represented by its state</li><li>State changes in response to inputs</li><li>Rules that tell how the state changes in response to inputs arecalled transitions</li></ul><h2 id="tennis">Tennis</h2><p><img src="https://s2.loli.net/2022/09/17/HKNLGXel6xFR5qA.png"></p><h2 id="acceptance-of-inputs">Acceptance of Inputs</h2><ul><li>Given a sequence of inputs, start in the start state and follow thetransition from each symbol in turn</li><li>Input is accepted if you wind up in a final state after all inputshave been read</li></ul><h2 id="language-of-an-automaton">Language of an Automaton</h2><ul><li>The set of strings accepted by an automaton A is the<em>language</em> of A.</li><li>Denoted L(A).</li><li>Different sets of final states -&gt; different languages.</li><li>Example: As designed, L(Tennis) = strings that determine thewinner.</li></ul><h1 id="deterministic-finite-automata">Deterministic FiniteAutomata</h1><ul><li>Alphabets, Strings, and Languages</li><li>Transition Graphs and Tables</li><li>Some Proof Techniques</li></ul><h2 id="alphabets">Alphabets</h2><ul><li>An alphabet is any finite set of symbols</li></ul><h2 id="strings">Strings</h2><ul><li>A string over an alphabet <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="2.389ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1056 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g></g></g></svg></mjx-container></span>is a list, each element of which is a member of <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="2.389ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1056 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g></g></g></svg></mjx-container></span></li><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="3.376ex" height="1.751ex" role="img" focusable="false" viewBox="0 -691.8 1492.3 773.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(33,363) scale(0.707)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g></g><g data-mml-node="mo" transform="translate(714.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g></g></svg></mjx-container> set of all strings over alphabet <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="2.389ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1056 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g></g></g></svg></mjx-container></span></li><li>The length of a string is its number of positions</li><li><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.072ex" role="img" focusable="false" viewBox="0 -452 466 474"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"></path></g></g></g></svg></mjx-container></span> stands for the<em>empty string</em> (string of length 0).</li></ul><h2 id="languages">Languages</h2><ul><li>A language is a subset of <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="0.988ex" height="1.565ex" role="img" focusable="false" viewBox="0 -691.8 436.6 691.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(33,363) scale(0.707)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g></g></g></g></svg></mjx-container> for some alphabet <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="2.389ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1056 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g></g></g></svg></mjx-container></span></li></ul><h2 id="deterministic-finite-automata-1">Deterministic FiniteAutomata</h2><ul><li>A formalism for defining languages, consisting of :<ol type="1"><li>A finite set of states (<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="11.273ex" height="2.057ex" role="img" focusable="false" viewBox="0 -704 4982.7 909"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="mo" transform="translate(791,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1235.7,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(1596.7,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2086.7,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(2589.7,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2934.7,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(3367.7,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(3896.7,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(4194.7,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(4492.7,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>)</li><li>An input alphabet (<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="11.873ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5247.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="mo" transform="translate(1056,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1500.7,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(1861.7,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2351.7,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(2854.7,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3199.7,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(3632.7,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(4161.7,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(4459.7,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(4757.7,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>)</li><li>A transition function (<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="10.488ex" height="2.086ex" role="img" focusable="false" viewBox="0 -717 4635.7 922"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path></g><g data-mml-node="mo" transform="translate(444,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(888.7,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(1249.7,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1739.7,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(2242.7,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2587.7,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(3020.7,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(3549.7,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(3847.7,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(4145.7,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>)</li><li>A start state (<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="16.916ex" height="2.057ex" role="img" focusable="false" viewBox="0 -704 7476.9 909"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mn" transform="translate(479,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(882.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1327.2,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1672.2,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mstyle" transform="translate(2272.2,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mi" transform="translate(2494.2,0)"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="mo" transform="translate(3285.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(3729.9,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(4090.9,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4580.9,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(5083.9,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5428.9,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(5861.9,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(6390.9,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(6688.9,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(6986.9,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>)</li><li>A set of final states (<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="15.985ex" height="2.057ex" role="img" focusable="false" viewBox="0 -704 7065.2 909"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mo" transform="translate(1026.8,0)"><path data-c="2286" d="M84 346Q84 468 166 546T360 635Q361 635 370 635T395 635T430 636T475 636T524 636H679Q694 628 694 616Q694 607 681 597L522 596H470H441Q366 596 338 592T266 568Q244 557 224 542T179 500T139 433T124 346V341Q124 253 185 185Q244 121 328 103Q348 98 366 98T522 96H681Q694 86 694 76Q694 64 679 56H526Q510 56 480 56T434 55Q350 55 289 71T172 141Q84 223 84 346ZM104 -131T104 -118T118 -98H679Q694 -106 694 -118T679 -138H118Q104 -131 104 -118Z"></path></g><g data-mml-node="mi" transform="translate(2082.6,0)"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="mo" transform="translate(2873.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(3318.2,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(3679.2,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4169.2,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(4672.2,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5017.2,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(5450.2,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(5979.2,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(6277.2,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(6575.2,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>)</li></ol></li></ul><h2 id="the-transition-function">The Transition Function</h2><ul><li>Takes two arguments: a state and an input symbol</li><li><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.899ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3933.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path></g><g data-mml-node="mo" transform="translate(444,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(833,0)"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(1293,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1737.7,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(2266.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mstyle" transform="translate(2655.7,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mo" transform="translate(3155.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g></g></svg></mjx-container></span> the state thatthe DFA goes to when it is in state <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="1.041ex" height="1.439ex" role="img" focusable="false" viewBox="0 -442 460 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g></svg></mjx-container></span> and input <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.197ex" height="1.02ex" role="img" focusable="false" viewBox="0 -441 529 451"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g></g></svg></mjx-container></span> ,is received.</li><li>Note: <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.005ex" height="1.645ex" role="img" focusable="false" viewBox="0 -717 444 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path></g></g></g></svg></mjx-container></span> is a totalfunction: always a next state - add a <em>dead state</em> if notransition (Example on next slide).</li></ul><h2 id="graph-representation-of-dfa-s">Graph Representation of DFA's</h2><ul><li>Nodes = states</li><li>Arc represents transition function<ul><li>Arc from state p to state q labeled by all those input symbols thathave transitions from p to q</li></ul></li><li>Arrow labeled “Start” to the start state.</li><li>Final states indicated by double circles.</li></ul><h3 id="example-recognizing-strings-ending-in-ing">Example: RecognizingStrings Ending in "ing"</h3><p><img src="https://s2.loli.net/2022/09/17/Rz1TQiHqahEGVX2.png"></p><h2 id="alternative-representation-transition-table">AlternativeRepresentation: Transition Table</h2><p><img src="https://s2.loli.net/2022/09/17/UyoVIhB1QtmuOgv.png"></p><h2 id="convention-strings-and-symbols">Convention: Strings andSymbols</h2><ul><li>... w,x,y,z are strings.</li><li>a,b,c,... are single input symbols</li></ul><h2 id="extended-transition-function">Extended Transition Function</h2><ul><li>We describe the effect of a string of inputs on a DFA by extending<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.005ex" height="1.645ex" role="img" focusable="false" viewBox="0 -717 444 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path></g></g></g></svg></mjx-container></span> to a state and astring.</li><li>Intuition: Extended <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.005ex" height="1.645ex" role="img" focusable="false" viewBox="0 -717 444 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path></g></g></g></svg></mjx-container></span> iscomputed for state q and inputs <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="9.732ex" height="1.355ex" role="img" focusable="false" viewBox="0 -441 4301.4 598.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="msub" transform="translate(965.6,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(1931.1,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(2375.8,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(2820.4,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="msub" transform="translate(3265.1,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span> by following a path in thetransition graph, starting at q and selecting the arcs with labels <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="12.75ex" height="1.437ex" role="img" focusable="false" viewBox="0 -441 5635.4 635"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(965.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1410.2,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2375.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(2820.4,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(3265.1,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(3709.8,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(4154.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(4599.1,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span> in turn.</li></ul><h2 id="inductive-definition-of-extended-delta">Inductive Definition ofExtended <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.005ex" height="1.645ex" role="img" focusable="false" viewBox="0 -717 444 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path></g></g></g></svg></mjx-container></span></h2><ul><li>Induction on length of string.</li><li>Basis: <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="10.426ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4608.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path></g><g data-mml-node="mo" transform="translate(444,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(833,0)"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(1293,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1737.7,0)"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"></path></g><g data-mml-node="mo" transform="translate(2203.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mstyle" transform="translate(2592.7,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mo" transform="translate(3092.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(4148.2,0)"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g></svg></mjx-container></span></li><li>Induction: <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="22.044ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 9743.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path></g><g data-mml-node="mo" transform="translate(444,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(833,0)"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(1293,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1737.7,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mi" transform="translate(2453.7,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(2982.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3649.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(4705.2,0)"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path></g><g data-mml-node="mo" transform="translate(5149.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5538.2,0)"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path></g><g data-mml-node="mo" transform="translate(5982.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(6371.2,0)"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(6831.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(7275.9,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mo" transform="translate(7991.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(8380.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(8825.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(9354.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span><ul><li>Remember: w is a string; a is an input symbol, by convention.</li></ul></li></ul><h2 id="delta-hat">Delta-hat</h2><ul><li>We don’t distinguish between the given delta and the extended deltaor delta-hat.</li><li>The reason:</li><li><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="28.884ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 12766.8 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path></g><g data-mml-node="mo" transform="translate(444,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(833,0)"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(1293,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1737.7,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(2266.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2933.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3989.2,0)"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path></g><g data-mml-node="mo" transform="translate(4433.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4822.2,0)"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path></g><g data-mml-node="mo" transform="translate(5266.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5655.2,0)"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(6115.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(6559.9,0)"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"></path></g><g data-mml-node="mo" transform="translate(7025.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(7414.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(7859.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(8388.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(9055.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(10111.1,0)"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path></g><g data-mml-node="mo" transform="translate(10555.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(10944.1,0)"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(11404.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(11848.8,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(12377.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></li></ul><h2 id="language-of-a-dfa">Language of a DFA</h2><ul><li>Automata of all kinds define languages.</li><li>If A is an automaton, L(A) is its language.</li><li>For a DFA A, L(A) is the set of strings labeling paths from thestart state to a final state.</li><li>Formally: L(A) = the set of strings w such that <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="7.387ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3265.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path></g><g data-mml-node="mo" transform="translate(444,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(833,0)"><g data-mml-node="mi"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mn" transform="translate(479,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(1715.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2160.2,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mo" transform="translate(2876.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> is in F.</li></ul><h2 id="proofs-of-set-equivalence">Proofs of Set Equivalence</h2><ul><li><p>Often, we need to prove that two descriptions of sets are in factthe same set.</p></li><li><p>Here, one set is “the language of this DFA,” and the other is“the set of strings of 0’ s and 1’ s with no consecutive 1’ s.”</p></li><li><p>In general, to prove S = T, we need to prove two parts: <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="6.069ex" height="1.907ex" role="img" focusable="false" viewBox="0 -705 2682.6 843"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(922.8,0)"><path data-c="2286" d="M84 346Q84 468 166 546T360 635Q361 635 370 635T395 635T430 636T475 636T524 636H679Q694 628 694 616Q694 607 681 597L522 596H470H441Q366 596 338 592T266 568Q244 557 224 542T179 500T139 433T124 346V341Q124 253 185 185Q244 121 328 103Q348 98 366 98T522 96H681Q694 86 694 76Q694 64 679 56H526Q510 56 480 56T434 55Q350 55 289 71T172 141Q84 223 84 346ZM104 -131T104 -118T118 -98H679Q694 -106 694 -118T679 -138H118Q104 -131 104 -118Z"></path></g><g data-mml-node="mi" transform="translate(1978.6,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g></svg></mjx-container></span> and <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="6.069ex" height="1.907ex" role="img" focusable="false" viewBox="0 -705 2682.6 843"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(981.8,0)"><path data-c="2286" d="M84 346Q84 468 166 546T360 635Q361 635 370 635T395 635T430 636T475 636T524 636H679Q694 628 694 616Q694 607 681 597L522 596H470H441Q366 596 338 592T266 568Q244 557 224 542T179 500T139 433T124 346V341Q124 253 185 185Q244 121 328 103Q348 98 366 98T522 96H681Q694 86 694 76Q694 64 679 56H526Q510 56 480 56T434 55Q350 55 289 71T172 141Q84 223 84 346ZM104 -131T104 -118T118 -98H679Q694 -106 694 -118T679 -138H118Q104 -131 104 -118Z"></path></g><g data-mml-node="mi" transform="translate(2037.6,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g></g></g></svg></mjx-container></span>. That is:</p><ol type="1"><li>If w is in S, then w is in T.</li><li>If w is in T, then w is in S.</li></ol></li><li><p>Here, S = the language of our running DFA, and T = “noconsecutive 1’ s.”</p></li></ul><h3 id="part-1-ssubseteq-t">Part 1: <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="6.069ex" height="1.907ex" role="img" focusable="false" viewBox="0 -705 2682.6 843"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(922.8,0)"><path data-c="2286" d="M84 346Q84 468 166 546T360 635Q361 635 370 635T395 635T430 636T475 636T524 636H679Q694 628 694 616Q694 607 681 597L522 596H470H441Q366 596 338 592T266 568Q244 557 224 542T179 500T139 433T124 346V341Q124 253 185 185Q244 121 328 103Q348 98 366 98T522 96H681Q694 86 694 76Q694 64 679 56H526Q510 56 480 56T434 55Q350 55 289 71T172 141Q84 223 84 346ZM104 -131T104 -118T118 -98H679Q694 -106 694 -118T679 -138H118Q104 -131 104 -118Z"></path></g><g data-mml-node="mi" transform="translate(1978.6,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g></svg></mjx-container></span></h3><p><img src="https://s2.loli.net/2022/09/17/dJX4gV7W8IfBsET.png"></p><ul><li>To prove: if w is accepted by then w has no consecutive 1’ s.</li><li>Proof is an induction on length of w.</li><li>Important trick: Expand the inductive hypothesis to be more detailedthan the statement you are trying to prove.</li></ul><h3 id="the-inductive-hypothesis">The Inductive Hypothesis</h3><ul><li>If <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="11.801ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5216.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path></g><g data-mml-node="mo" transform="translate(444,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(833,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(1583,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2027.7,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mo" transform="translate(2743.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3410.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(4466.2,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g></g></svg></mjx-container></span>, then w has noconsecutive 1’ s and does not end in 1.</li><li>If <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="11.822ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5225.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path></g><g data-mml-node="mo" transform="translate(444,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(833,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(1583,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2027.7,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mo" transform="translate(2743.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3410.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(4466.2,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g></g></g></svg></mjx-container></span>, then w has noconsecutive 1’ s and ends in a single 1.</li><li>Basis: |w| = 0; i. e. , w = <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.072ex" role="img" focusable="false" viewBox="0 -452 466 474"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"></path></g></g></g></svg></mjx-container></span>.<ol type="1"><li>holds since ε has no 1’ s at all.</li><li>holds <em>vacuously</em>, since δ(A, ε) is not B.</li></ol></li></ul><h3 id="inductive-step">Inductive Step</h3><ul><li>Assume (1) and (2) are true for strings shorter than w, where |w| isat least 1</li><li>Because w is not empty, we can write w = xa, where a is the lastsymbol of w, and x is the string that precedes</li><li>IH is true for x</li><li>Need to prove (1) and (2) for w = xa</li><li>5</li></ul>]]></content>
      
      
      <categories>
          
          <category> 形式语言与自动机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 形式语言与自动机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Preliminaries</title>
      <link href="/2022/09/06/Preliminaries/"/>
      <url>/2022/09/06/Preliminaries/</url>
      
        <content type="html"><![CDATA[<h1 id="preliminaries">Preliminaries</h1><h2 id="sets">SETS</h2><ul><li>Union</li><li>Intersection</li><li>Difference</li><li>Complement 补</li></ul><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="6.411ex" height="3.002ex" role="img" focusable="false" viewBox="0 -1245 2833.6 1327"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mover"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(0,648)"><svg width="750" height="237" x="0" y="148" viewBox="187.5 148 750 237"><path data-c="2013" d="M0 248V285H499V248H0Z" transform="scale(2.25,1)"></path></svg></g></g><g data-mml-node="mo" transform="translate(0,860)"><svg width="750" height="237" x="0" y="148" viewBox="187.5 148 750 237"><path data-c="2013" d="M0 248V285H499V248H0Z" transform="scale(2.25,1)"></path></svg></g></g><g data-mml-node="mo" transform="translate(1027.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2083.6,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g></g></svg></mjx-container></span></p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="14.874ex" height="2.523ex" role="img" focusable="false" viewBox="0 -1033 6574.4 1115"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mover"><g data-mml-node="mrow"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(972.2,0)"><path data-c="222A" d="M591 598H592Q604 598 611 583V376Q611 345 611 296Q610 162 606 148Q605 146 605 145Q586 68 507 23T333 -22Q268 -22 209 -1T106 66T56 173Q55 180 55 384L56 585Q66 598 75 598Q85 598 95 585V378L96 172L98 162Q112 95 181 57T332 18Q415 18 487 58T570 175Q571 180 571 383V583Q579 598 591 598Z"></path></g><g data-mml-node="mi" transform="translate(1861.4,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g></g><g data-mml-node="mo" transform="translate(0,648)"><svg width="2620.4" height="237" x="0" y="148" viewBox="655.1 148 2620.4 237"><path data-c="2013" d="M0 248V285H499V248H0Z" transform="scale(7.861,1)"></path></svg></g></g><g data-mml-node="mo" transform="translate(2898.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mover" transform="translate(3954,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(0,648)"><svg width="750" height="237" x="0" y="148" viewBox="187.5 148 750 237"><path data-c="2013" d="M0 248V285H499V248H0Z" transform="scale(2.25,1)"></path></svg></g></g><g data-mml-node="mo" transform="translate(4926.2,0)"><path data-c="2229" d="M88 -21T75 -21T55 -7V200Q55 231 55 280Q56 414 60 428Q61 430 61 431Q77 500 152 549T332 598Q443 598 522 544T610 405Q611 399 611 194V-7Q604 -22 591 -22Q582 -22 572 -9L570 405Q563 433 556 449T529 485Q498 519 445 538T334 558Q251 558 179 518T96 401Q95 396 95 193V-7Q88 -21 75 -21Z"></path></g><g data-mml-node="mover" transform="translate(5815.4,0)"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(0,615)"><svg width="759" height="237" x="0" y="148" viewBox="189.8 148 759 237"><path data-c="2013" d="M0 248V285H499V248H0Z" transform="scale(2.277,1)"></path></svg></g></g></g></g></svg></mjx-container></span></p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="14.874ex" height="2.523ex" role="img" focusable="false" viewBox="0 -1033 6574.4 1115"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mover"><g data-mml-node="mrow"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(972.2,0)"><path data-c="2229" d="M88 -21T75 -21T55 -7V200Q55 231 55 280Q56 414 60 428Q61 430 61 431Q77 500 152 549T332 598Q443 598 522 544T610 405Q611 399 611 194V-7Q604 -22 591 -22Q582 -22 572 -9L570 405Q563 433 556 449T529 485Q498 519 445 538T334 558Q251 558 179 518T96 401Q95 396 95 193V-7Q88 -21 75 -21Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1861.4,0)"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g></g></g><g data-mml-node="mo" transform="translate(0,648)"><svg width="2620.4" height="237" x="0" y="148" viewBox="655.1 148 2620.4 237"><path data-c="2013" d="M0 248V285H499V248H0Z" transform="scale(7.861,1)"></path></svg></g></g><g data-mml-node="mo" transform="translate(2898.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mover" transform="translate(3954,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(0,648)"><svg width="750" height="237" x="0" y="148" viewBox="187.5 148 750 237"><path data-c="2013" d="M0 248V285H499V248H0Z" transform="scale(2.25,1)"></path></svg></g></g><g data-mml-node="mo" transform="translate(4926.2,0)"><path data-c="222A" d="M591 598H592Q604 598 611 583V376Q611 345 611 296Q610 162 606 148Q605 146 605 145Q586 68 507 23T333 -22Q268 -22 209 -1T106 66T56 173Q55 180 55 384L56 585Q66 598 75 598Q85 598 95 585V378L96 172L98 162Q112 95 181 57T332 18Q415 18 487 58T570 175Q571 180 571 383V583Q579 598 591 598Z"></path></g><g data-mml-node="mover" transform="translate(5815.4,0)"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(0,615)"><svg width="759" height="237" x="0" y="148" viewBox="189.8 148 759 237"><path data-c="2013" d="M0 248V285H499V248H0Z" transform="scale(2.277,1)"></path></svg></g></g></g></g></svg></mjx-container></span></p><h3 id="empty-null-set">Empty, Null Set</h3><p>空集 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.176ex;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.923ex" role="img" focusable="false" viewBox="0 -772 500 850"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="2205" d="M331 696Q335 708 339 722T345 744T350 759T357 769T367 772Q374 772 381 767T388 754Q388 746 377 712L366 673L378 661Q460 575 460 344Q460 281 456 234T432 126T373 27Q319 -22 250 -22Q214 -22 180 -7Q168 -3 168 -4L159 -33Q148 -71 142 -75Q138 -78 132 -78Q124 -78 118 -72T111 -60Q111 -52 122 -18L133 21L125 29Q39 111 39 344Q39 596 137 675Q187 716 251 716Q265 716 278 714T296 710T315 703T331 696ZM276 676Q264 679 246 679Q196 679 159 631Q134 597 128 536T121 356Q121 234 127 174T151 80L234 366Q253 430 275 506T308 618L318 654Q318 656 294 669L276 676ZM181 42Q207 16 250 16Q291 16 324 47Q354 78 366 136T378 356Q378 470 372 528T349 616L348 613Q348 611 264 326L181 42Z"></path></g></g></g></svg></mjx-container></span></p><h3 id="subset-and-proper-subset">Subset and Proper Subset</h3><h3 id="disjoint-sets">Disjoint Sets</h3><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="10.077ex" height="1.932ex" role="img" focusable="false" viewBox="0 -772 4454 854"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(972.2,0)"><path data-c="2229" d="M88 -21T75 -21T55 -7V200Q55 231 55 280Q56 414 60 428Q61 430 61 431Q77 500 152 549T332 598Q443 598 522 544T610 405Q611 399 611 194V-7Q604 -22 591 -22Q582 -22 572 -9L570 405Q563 433 556 449T529 485Q498 519 445 538T334 558Q251 558 179 518T96 401Q95 396 95 193V-7Q88 -21 75 -21Z"></path></g><g data-mml-node="mi" transform="translate(1861.4,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(2898.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3954,0)"><path data-c="2205" d="M331 696Q335 708 339 722T345 744T350 759T357 769T367 772Q374 772 381 767T388 754Q388 746 377 712L366 673L378 661Q460 575 460 344Q460 281 456 234T432 126T373 27Q319 -22 250 -22Q214 -22 180 -7Q168 -3 168 -4L159 -33Q148 -71 142 -75Q138 -78 132 -78Q124 -78 118 -72T111 -60Q111 -52 122 -18L133 21L125 29Q39 111 39 344Q39 596 137 675Q187 716 251 716Q265 716 278 714T296 710T315 703T331 696ZM276 676Q264 679 246 679Q196 679 159 631Q134 597 128 536T121 356Q121 234 127 174T151 80L234 366Q253 430 275 506T308 618L318 654Q318 656 294 669L276 676ZM181 42Q207 16 250 16Q291 16 324 47Q354 78 366 136T378 356Q378 470 372 528T349 616L348 613Q348 611 264 326L181 42Z"></path></g></g></g></svg></mjx-container></span></p><h3 id="set-cardinality-集合的势">Set Cardinality 集合的势</h3><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.564ex;" xmlns="http://www.w3.org/2000/svg" width="2.955ex" height="2.26ex" role="img" focusable="false" viewBox="0 -749.5 1306 999"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(1028,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g></g></g></svg></mjx-container></span> 表示集合A中的元素个数</p><h3 id="powersets-幂集">Powersets 幂集</h3><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="9.635ex" height="2.034ex" role="img" focusable="false" viewBox="0 -705 4258.9 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(922.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1978.6,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(529,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(973.7,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(1402.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1847.3,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g></g></g></svg></mjx-container></span></p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="61.671ex" height="2.515ex" role="img" focusable="false" viewBox="0 -861.5 27258.8 1111.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(751,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1140,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(1785,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2451.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(3507.6,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g></g><g data-mml-node="mo" transform="translate(4824.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(5880.2,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(6803,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(7858.8,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mi" transform="translate(8358.8,0)"><path data-c="2205" d="M331 696Q335 708 339 722T345 744T350 759T357 769T367 772Q374 772 381 767T388 754Q388 746 377 712L366 673L378 661Q460 575 460 344Q460 281 456 234T432 126T373 27Q319 -22 250 -22Q214 -22 180 -7Q168 -3 168 -4L159 -33Q148 -71 142 -75Q138 -78 132 -78Q124 -78 118 -72T111 -60Q111 -52 122 -18L133 21L125 29Q39 111 39 344Q39 596 137 675Q187 716 251 716Q265 716 278 714T296 710T315 703T331 696ZM276 676Q264 679 246 679Q196 679 159 631Q134 597 128 536T121 356Q121 234 127 174T151 80L234 366Q253 430 275 506T308 618L318 654Q318 656 294 669L276 676ZM181 42Q207 16 250 16Q291 16 324 47Q354 78 366 136T378 356Q378 470 372 528T349 616L348 613Q348 611 264 326L181 42Z"></path></g><g data-mml-node="mo" transform="translate(8858.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(9303.4,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mi" transform="translate(9803.4,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(10332.4,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g><g data-mml-node="mo" transform="translate(10832.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(11277.1,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mi" transform="translate(11777.1,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(12206.1,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g><g data-mml-node="mo" transform="translate(12706.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(13150.8,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mi" transform="translate(13650.8,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mo" transform="translate(14083.8,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g><g data-mml-node="mo" transform="translate(14583.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(15028.4,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mi" transform="translate(15528.4,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(16057.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(16502.1,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(16931.1,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g><g data-mml-node="mo" transform="translate(17431.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(17875.8,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mi" transform="translate(18375.8,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(18904.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(19349.4,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mo" transform="translate(19782.4,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g><g data-mml-node="mo" transform="translate(20282.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(20727.1,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mi" transform="translate(21227.1,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(21656.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(22100.8,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mo" transform="translate(22533.8,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g><g data-mml-node="mo" transform="translate(23033.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(23478.4,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mi" transform="translate(23978.4,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(24507.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(24952.1,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(25381.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(25825.8,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mo" transform="translate(26258.8,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g><g data-mml-node="mo" transform="translate(26758.8,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container></span></p><p><strong>Observation</strong> <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.564ex;" xmlns="http://www.w3.org/2000/svg" width="9.866ex" height="2.585ex" role="img" focusable="false" viewBox="0 -893 4360.9 1142.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="msup" transform="translate(278,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g></g><g data-mml-node="mo" transform="translate(1317.1,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mo" transform="translate(1872.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(2928.6,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(923,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g></g></g></g></g></svg></mjx-container></p><h3 id="笛卡尔乘积">笛卡尔乘积</h3><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.564ex;" xmlns="http://www.w3.org/2000/svg" width="19.15ex" height="2.26ex" role="img" focusable="false" viewBox="0 -749.5 8464.4 999"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(1250.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(2250.4,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(3009.4,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mo" transform="translate(3565.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(4621,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(4899,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(5649,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mo" transform="translate(6149.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mo" transform="translate(7149.4,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(7427.4,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(8186.4,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g></g></g></svg></mjx-container></span></p><h2 id="functions">FUNCTIONS</h2><p><img src="https://s2.loli.net/2022/09/07/MACPp2dO9mE6aui.png"></p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="8.191ex" height="1.805ex" role="img" focusable="false" viewBox="0 -716 3620.6 798"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(750,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(1805.8,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mi" transform="translate(2861.6,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g></g></g></svg></mjx-container></span></p><ul><li><p>If A = domain</p><p>then f is a total function</p><p>otherwise f is a partial function</p></li><li><p>f : A -&gt; B is a bijection 双射</p><ul><li>f is total</li><li>for all a and a' in A, a != a' implies f(a) != f(a')</li><li>for all b in B, there is a in A with f(a) = b</li></ul></li></ul><p><img src="https://s2.loli.net/2022/09/07/Jfp1cEaeBqstmyl.png"></p><h2 id="big-o-notation">Big O Notation</h2><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.751ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2100 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="3A9" d="M55 454Q55 503 75 546T127 617T197 665T272 695T337 704H352Q396 704 404 703Q527 687 596 615T666 454Q666 392 635 330T559 200T499 83V80H543Q589 81 600 83T617 93Q622 102 629 135T636 172L637 177H677V175L660 89Q645 3 644 2V0H552H488Q461 0 456 3T451 20Q451 89 499 235T548 455Q548 512 530 555T483 622T424 656T361 668Q332 668 303 658T243 626T193 560T174 456Q174 380 222 233T270 20Q270 7 263 0H77V2Q76 3 61 89L44 175V177H84L85 172Q85 171 88 155T96 119T104 93Q109 86 120 84T178 80H222V83Q206 132 162 199T87 329T55 454Z"></path></g><g data-mml-node="mo" transform="translate(722,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1111,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1711,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 下界</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.844ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2141 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1752,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 上界</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.179ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1847 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(469,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(858,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1458,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p><p><strong>rate of growth</strong></p><h2 id="relations">RELATIONS</h2><p>Given two sets, A and B, a relation R is any subset of A x B, inorther words, <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="10.914ex" height="1.932ex" role="img" focusable="false" viewBox="0 -716 4824 854"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(1036.8,0)"><path data-c="2286" d="M84 346Q84 468 166 546T360 635Q361 635 370 635T395 635T430 636T475 636T524 636H679Q694 628 694 616Q694 607 681 597L522 596H470H441Q366 596 338 592T266 568Q244 557 224 542T179 500T139 433T124 346V341Q124 253 185 185Q244 121 328 103Q348 98 366 98T522 96H681Q694 86 694 76Q694 64 679 56H526Q510 56 480 56T434 55Q350 55 289 71T172 141Q84 223 84 346ZM104 -131T104 -118T118 -98H679Q694 -106 694 -118T679 -138H118Q104 -131 104 -118Z"></path></g><g data-mml-node="mi" transform="translate(2092.6,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(3064.8,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(4065,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g></g></g></svg></mjx-container></span></p><h3 id="equivalence-classes">Equivalence Classes</h3><ul><li>Reflexive: x R x</li><li>Symmetric: x R y -&gt; y R x</li><li>Transitive: x R y and y R z -&gt; x R z</li></ul><p>等价关系</p><p>等价类</p><ul><li><p><code>partial order</code> 偏序关系</p><p>reflexive， transitive and antisymmetric</p></li><li><p><code>total order</code> 全序关系</p></li><li><p><code>linear order</code> 线性关系</p></li></ul><h2 id="graphs">GRAPHS</h2><p><img src="https://s2.loli.net/2022/09/07/t7jqnR5QIx8epMB.png"></p><ul><li>walk</li><li>path 无重复边</li><li>simple path 无重复节点</li><li>cycle 环</li><li>simple cycle 仅根节点重复</li></ul><p>、</p><ul><li><p>可达性</p><p><img src="https://s2.loli.net/2022/09/07/4uKjfIVvxONnwRD.png"></p></li></ul><h3 id="trees">Trees</h3><p>root，leaf，height</p><h2 id="proof-techniques">PROOF TECHNIQUES</h2><ul><li>数学归纳</li><li>反证法</li><li>鸽巢原理 （Pigeon Hole Principle）</li></ul><h1 id="languages">Languages</h1><ul><li>A language is a set of strings</li><li>String: A sequence of letters/symbols<ul><li>Examples: "cat","dog"...</li><li>Symbols are defined over an alphabet:</li></ul></li></ul><h2 id="alphabets-and-strings">Alphabets and Strings</h2><h3 id="string-operations">String Operations</h3><ul><li>Connection</li><li>Reverse</li></ul><h3 id="string-length">String length</h3><ul><li><p>Length: The length of a string x is the number of symbolscontained in the string x, denoted by |x|</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.564ex;" xmlns="http://www.w3.org/2000/svg" width="27.325ex" height="2.26ex" role="img" focusable="false" viewBox="0 -749.5 12077.6 999"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mo" transform="translate(993.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(2049.6,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="msub" transform="translate(3015.1,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="msub" transform="translate(3980.7,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(4946.2,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(5390.9,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(5835.5,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="msub" transform="translate(6280.2,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(7594.3,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(8872,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(9150,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mo" transform="translate(9866,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mo" transform="translate(10421.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(11477.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span></p></li></ul><h3 id="the-empty-string">The Empty String</h3><ul><li>A string with no letters: <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.027ex;" xmlns="http://www.w3.org/2000/svg" width="1.319ex" height="1.597ex" role="img" focusable="false" viewBox="0 -694 583 706"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g></g></g></svg></mjx-container></span> or <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.072ex" role="img" focusable="false" viewBox="0 -452 466 474"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"></path></g></g></g></svg></mjx-container></span></li><li>Observations: <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.564ex;" xmlns="http://www.w3.org/2000/svg" width="6.725ex" height="2.26ex" role="img" focusable="false" viewBox="0 -749.5 2972.6 999"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g><g data-mml-node="mo" transform="translate(861,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mo" transform="translate(1416.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2472.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></span></li></ul><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="13.532ex" height="1.756ex" role="img" focusable="false" viewBox="0 -694 5981.1 776"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g><g data-mml-node="mi" transform="translate(583,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mo" transform="translate(1576.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2632.6,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mi" transform="translate(3348.6,0)"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g><g data-mml-node="mo" transform="translate(4209.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(5265.1,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g></g></svg></mjx-container></span></p><h3 id="substring">Substring</h3><h3 id="prefix-and-suffix-x-ysz">Prefix and Suffix (x = ysz)</h3><h3 id="another-operation">Another Operation</h3><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="15.282ex" height="1.714ex" role="img" focusable="false" viewBox="0 -675.5 6754.8 757.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mi" transform="translate(749,363) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1501,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2556.8,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mi" transform="translate(3272.8,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mi" transform="translate(3988.8,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mo" transform="translate(4704.8,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(5149.5,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(5594.2,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mi" transform="translate(6038.8,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g></g></svg></mjx-container></span> (n个w)</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="18.634ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 8236.1 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(918,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(1347,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(1776,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="msup" transform="translate(2245,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mn" transform="translate(422,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(3348.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(4404.1,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(4933.1,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(5362.1,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(5791.1,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(6320.1,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(6849.1,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(7278.1,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(7707.1,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g></g></svg></mjx-container></span></p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="6.944ex" height="2.072ex" role="img" focusable="false" viewBox="0 -833.9 3069.1 915.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mn" transform="translate(749,363) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(1430.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2486.1,0)"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g></g></g></svg></mjx-container></span></p><h3 id="solve-equation-011x-x011">Solve equation 011x = x011</h3><ul><li><p>If <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="5.63ex" height="1.756ex" role="img" focusable="false" viewBox="0 -694 2488.6 776"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(849.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(1905.6,0)"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g></g></g></svg></mjx-container></span> ，thenok.</p></li><li><p>If <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.564ex;" xmlns="http://www.w3.org/2000/svg" width="6.7ex" height="2.26ex" role="img" focusable="false" viewBox="0 -749.5 2961.6 999"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(850,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mo" transform="translate(1405.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2461.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></span>,then nosolution.</p></li><li><p>If <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.564ex;" xmlns="http://www.w3.org/2000/svg" width="6.7ex" height="2.26ex" role="img" focusable="false" viewBox="0 -749.5 2961.6 999"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(850,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mo" transform="translate(1405.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2461.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container></span>,then nosolution.</p></li><li><p>If <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.564ex;" xmlns="http://www.w3.org/2000/svg" width="6.7ex" height="2.26ex" role="img" focusable="false" viewBox="0 -749.5 2961.6 999"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(850,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mo" transform="translate(1405.8,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(2461.6,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></svg></mjx-container></span>,then x = 011y .Hence,</p><p>011x = 011y011. So, x = y011.</p><p>Hence, 011y = y011.</p></li><li><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="23.7ex" height="2.497ex" role="img" focusable="false" viewBox="0 -853.7 10475.5 1103.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(849.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(1905.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(2294.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1000,0)"></path></g><g data-mml-node="msup" transform="translate(3794.6,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(422,363) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mstyle" transform="translate(4635,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mi" transform="translate(5635,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(6185,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(6670,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mstyle" transform="translate(7121,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mi" transform="translate(8121,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(8919.7,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(9975.5,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></span></p></li></ul><h3 id="the-operation">The * Operation</h3><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.245ex" height="1.565ex" role="img" focusable="false" viewBox="0 -691.8 992.3 691.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(33,363) scale(0.707)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g></g><g data-mml-node="mo" transform="translate(714.3,0)"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g></g></g></svg></mjx-container> the set of all possible strings from alphabet <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="0.036ex" height="0.036ex" role="img" focusable="false" viewBox="0 0 16 16"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"></g></g></svg></mjx-container></p><p><strong>Example:</strong></p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="10.842ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4792.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="mo" transform="translate(1333.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2389.6,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mi" transform="translate(2889.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(3418.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(3863.2,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(4292.2,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container></span></p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="34.463ex" height="2.389ex" role="img" focusable="false" viewBox="0 -805.9 15232.8 1055.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mover"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="mo" transform="translate(1089,477.1) scale(0.707)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g></g><g data-mml-node="mo" transform="translate(1770.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2826.1,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mi" transform="translate(3326.1,0)"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g><g data-mml-node="mo" transform="translate(3909.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(4353.8,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(4882.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(5327.4,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(5756.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(6201.1,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(6730.1,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(7259.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(7703.8,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(8232.8,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(8661.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(9106.4,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(9535.4,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(10064.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(10509.1,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(10938.1,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(11367.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(11811.8,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(12340.8,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(12869.8,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(13398.8,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(13843.4,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(14288.1,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(14732.8,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container></span></p><h3 id="the-operation-1">The + Operation</h3><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="15.934ex" height="2.578ex" role="img" focusable="false" viewBox="0 -889.3 7042.9 1139.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mover"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="mo" transform="translate(1089,477.1) scale(0.707)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g></g><g data-mml-node="mo" transform="translate(1966.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mover" transform="translate(3022.7,0)"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="mo" transform="translate(1089,477.1) scale(0.707)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g></g><g data-mml-node="mo" transform="translate(4681.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(5459.9,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mi" transform="translate(5959.9,0)"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g><g data-mml-node="mo" transform="translate(6542.9,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container></span></p><h2 id="languages-1">Languages</h2><p>A language is a set of strings, is any subset of <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.377ex" height="2.389ex" role="img" focusable="false" viewBox="0 -805.9 1492.6 1055.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mover"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="mo" transform="translate(1089,477.1) scale(0.707)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g></g></g></g></svg></mjx-container></span></p><blockquote><p>Note that: <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="10.747ex" height="2.312ex" role="img" focusable="false" viewBox="0 -772 4750.1 1022"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="2205" d="M331 696Q335 708 339 722T345 744T350 759T357 769T367 772Q374 772 381 767T388 754Q388 746 377 712L366 673L378 661Q460 575 460 344Q460 281 456 234T432 126T373 27Q319 -22 250 -22Q214 -22 180 -7Q168 -3 168 -4L159 -33Q148 -71 142 -75Q138 -78 132 -78Q124 -78 118 -72T111 -60Q111 -52 122 -18L133 21L125 29Q39 111 39 344Q39 596 137 675Q187 716 251 716Q265 716 278 714T296 710T315 703T331 696ZM276 676Q264 679 246 679Q196 679 159 631Q134 597 128 536T121 356Q121 234 127 174T151 80L234 366Q253 430 275 506T308 618L318 654Q318 656 294 669L276 676ZM181 42Q207 16 250 16Q291 16 324 47Q354 78 366 136T378 356Q378 470 372 528T349 616L348 613Q348 611 264 326L181 42Z"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(1833.6,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mo" transform="translate(2333.6,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g><g data-mml-node="mo" transform="translate(3111.3,0)"><path data-c="2260" d="M166 -215T159 -215T147 -212T141 -204T139 -197Q139 -190 144 -183L306 133H70Q56 140 56 153Q56 168 72 173H327L406 327H72Q56 332 56 347Q56 360 70 367H426Q597 702 602 707Q605 716 618 716Q625 716 630 712T636 703T638 696Q638 692 471 367H707Q722 359 722 347Q722 336 708 328L451 327L371 173H708Q722 163 722 153Q722 140 707 133H351Q175 -210 170 -212Q166 -215 159 -215Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(4167.1,0)"><g data-mml-node="mi"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g></g></g></g></svg></mjx-container></span></p></blockquote><h3 id="operations-on-languages">Operations on Languages</h3><h3 id="reverse">Reverse</h3><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="19.057ex" height="2.48ex" role="img" focusable="false" viewBox="0 -846 8423.1 1096"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mi" transform="translate(714,363) scale(0.707)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g></g><g data-mml-node="mo" transform="translate(1578.5,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2634.2,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="msup" transform="translate(3134.2,0)"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mi" transform="translate(749,363) scale(0.707)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g></g><g data-mml-node="mo" transform="translate(4747.7,0)"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mi" transform="translate(5303.5,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mo" transform="translate(6297.3,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(7242.1,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(7923.1,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container></span></p><h3 id="concatenation">Concatenation</h3><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="28.622ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 12651.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mn" transform="translate(714,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="msub" transform="translate(1117.6,0)"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mn" transform="translate(714,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2512.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(3568.7,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mi" transform="translate(4068.7,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(4640.7,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(5408.4,0)"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mi" transform="translate(5964.2,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(6814,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="msub" transform="translate(7758.8,0)"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mn" transform="translate(714,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(8876.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(9321,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(10088.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="msub" transform="translate(11033.5,0)"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mn" transform="translate(714,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(12151.1,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container></span></p><h3 id="anothor-operation">Anothor Operation</h3><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="13.346ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 5898.8 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mi" transform="translate(714,363) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1466,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2521.8,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mi" transform="translate(3202.8,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(3883.8,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(4328.5,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(4773.2,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mi" transform="translate(5217.8,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g></g></g></svg></mjx-container></span></p><p><strong>Special case：</strong> <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.127ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 4034.1 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mn" transform="translate(714,363) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(1395.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2451.1,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mi" transform="translate(2951.1,0)"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g><g data-mml-node="mo" transform="translate(3534.1,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container></span></p><h3 id="star-closurekleene">Star-Closure(Kleene *)</h3><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="18.837ex" height="2.072ex" role="img" focusable="false" viewBox="0 -833.9 8326 915.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(714,363) scale(0.707)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g></g><g data-mml-node="mo" transform="translate(1395.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(2451.1,0)"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mn" transform="translate(714,363) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="msup" transform="translate(3568.7,0)"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mn" transform="translate(714,363) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="msup" transform="translate(4686.2,0)"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mn" transform="translate(714,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(5803.8,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(6248.4,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(6693.1,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="msup" transform="translate(7137.8,0)"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mi" transform="translate(714,363) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="14.866ex" height="2.32ex" role="img" focusable="false" viewBox="0 -775.2 6570.7 1025.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(714,363) scale(0.707)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g></g><g data-mml-node="mo" transform="translate(1591.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(2647.7,0)"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(714,363) scale(0.707)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g></g><g data-mml-node="mo" transform="translate(3987.5,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(4987.7,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mi" transform="translate(5487.7,0)"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g><g data-mml-node="mo" transform="translate(6070.7,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container></span></p><h1 id="补充">补充</h1><h2 id="证明1">证明1：</h2><blockquote><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="32.126ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 14199.8 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(981.2,0)"><path data-c="222A" d="M591 598H592Q604 598 611 583V376Q611 345 611 296Q610 162 606 148Q605 146 605 145Q586 68 507 23T333 -22Q268 -22 209 -1T106 66T56 173Q55 180 55 384L56 585Q66 598 75 598Q85 598 95 585V378L96 172L98 162Q112 95 181 57T332 18Q415 18 487 58T570 175Q571 180 571 383V583Q579 598 591 598Z"></path></g><g data-mml-node="mo" transform="translate(1870.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2259.4,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(3126.7,0)"><path data-c="2229" d="M88 -21T75 -21T55 -7V200Q55 231 55 280Q56 414 60 428Q61 430 61 431Q77 500 152 549T332 598Q443 598 522 544T610 405Q611 399 611 194V-7Q604 -22 591 -22Q582 -22 572 -9L570 405Q563 433 556 449T529 485Q498 519 445 538T334 558Q251 558 179 518T96 401Q95 396 95 193V-7Q88 -21 75 -21Z"></path></g><g data-mml-node="mi" transform="translate(4015.9,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(4719.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5386.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(6442.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(6831.4,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(7812.7,0)"><path data-c="222A" d="M591 598H592Q604 598 611 583V376Q611 345 611 296Q610 162 606 148Q605 146 605 145Q586 68 507 23T333 -22Q268 -22 209 -1T106 66T56 173Q55 180 55 384L56 585Q66 598 75 598Q85 598 95 585V378L96 172L98 162Q112 95 181 57T332 18Q415 18 487 58T570 175Q571 180 571 383V583Q579 598 591 598Z"></path></g><g data-mml-node="mi" transform="translate(8701.9,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(9346.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(9958.1,0)"><path data-c="2229" d="M88 -21T75 -21T55 -7V200Q55 231 55 280Q56 414 60 428Q61 430 61 431Q77 500 152 549T332 598Q443 598 522 544T610 405Q611 399 611 194V-7Q604 -22 591 -22Q582 -22 572 -9L570 405Q563 433 556 449T529 485Q498 519 445 538T334 558Q251 558 179 518T96 401Q95 396 95 193V-7Q88 -21 75 -21Z"></path></g><g data-mml-node="mo" transform="translate(10847.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(11236.3,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(12217.6,0)"><path data-c="222A" d="M591 598H592Q604 598 611 583V376Q611 345 611 296Q610 162 606 148Q605 146 605 145Q586 68 507 23T333 -22Q268 -22 209 -1T106 66T56 173Q55 180 55 384L56 585Q66 598 75 598Q85 598 95 585V378L96 172L98 162Q112 95 181 57T332 18Q415 18 487 58T570 175Q571 180 571 383V583Q579 598 591 598Z"></path></g><g data-mml-node="mi" transform="translate(13106.8,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(13810.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p></blockquote><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="6.499ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 2872.8 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(429,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(895,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(1372,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1717,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2594.8,0)"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g></g></g></svg></mjx-container></span></p><p>当：</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="42.087ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 18602.3 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(1041.8,0)"><g data-mml-node="text"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="text" transform="translate(278,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g><g data-mml-node="mi" transform="translate(2375.6,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(3356.8,0)"><path data-c="222A" d="M591 598H592Q604 598 611 583V376Q611 345 611 296Q610 162 606 148Q605 146 605 145Q586 68 507 23T333 -22Q268 -22 209 -1T106 66T56 173Q55 180 55 384L56 585Q66 598 75 598Q85 598 95 585V378L96 172L98 162Q112 95 181 57T332 18Q415 18 487 58T570 175Q571 180 571 383V583Q579 598 591 598Z"></path></g><g data-mml-node="mo" transform="translate(4246,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4635,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(5502.2,0)"><path data-c="2229" d="M88 -21T75 -21T55 -7V200Q55 231 55 280Q56 414 60 428Q61 430 61 431Q77 500 152 549T332 598Q443 598 522 544T610 405Q611 399 611 194V-7Q604 -22 591 -22Q582 -22 572 -9L570 405Q563 433 556 449T529 485Q498 519 445 538T334 558Q251 558 179 518T96 401Q95 396 95 193V-7Q88 -21 75 -21Z"></path></g><g data-mml-node="mi" transform="translate(6391.4,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(7095.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mstyle" transform="translate(7484.4,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mi" transform="translate(8484.4,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mo" transform="translate(9511.2,0)"><g data-mml-node="text"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="text" transform="translate(278,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g><g data-mml-node="mo" transform="translate(10845,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(11234,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(12215.2,0)"><path data-c="222A" d="M591 598H592Q604 598 611 583V376Q611 345 611 296Q610 162 606 148Q605 146 605 145Q586 68 507 23T333 -22Q268 -22 209 -1T106 66T56 173Q55 180 55 384L56 585Q66 598 75 598Q85 598 95 585V378L96 172L98 162Q112 95 181 57T332 18Q415 18 487 58T570 175Q571 180 571 383V583Q579 598 591 598Z"></path></g><g data-mml-node="mi" transform="translate(13104.4,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(13749.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(14360.7,0)"><path data-c="2229" d="M88 -21T75 -21T55 -7V200Q55 231 55 280Q56 414 60 428Q61 430 61 431Q77 500 152 549T332 598Q443 598 522 544T610 405Q611 399 611 194V-7Q604 -22 591 -22Q582 -22 572 -9L570 405Q563 433 556 449T529 485Q498 519 445 538T334 558Q251 558 179 518T96 401Q95 396 95 193V-7Q88 -21 75 -21Z"></path></g><g data-mml-node="mo" transform="translate(15249.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(15638.9,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(16620.1,0)"><path data-c="222A" d="M591 598H592Q604 598 611 583V376Q611 345 611 296Q610 162 606 148Q605 146 605 145Q586 68 507 23T333 -22Q268 -22 209 -1T106 66T56 173Q55 180 55 384L56 585Q66 598 75 598Q85 598 95 585V378L96 172L98 162Q112 95 181 57T332 18Q415 18 487 58T570 175Q571 180 571 383V583Q579 598 591 598Z"></path></g><g data-mml-node="mi" transform="translate(17509.3,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(18213.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="15.619ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6903.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(849.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1794.6,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(2775.8,0)"><path data-c="222A" d="M591 598H592Q604 598 611 583V376Q611 345 611 296Q610 162 606 148Q605 146 605 145Q586 68 507 23T333 -22Q268 -22 209 -1T106 66T56 173Q55 180 55 384L56 585Q66 598 75 598Q85 598 95 585V378L96 172L98 162Q112 95 181 57T332 18Q415 18 487 58T570 175Q571 180 571 383V583Q579 598 591 598Z"></path></g><g data-mml-node="mo" transform="translate(3665,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4054,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(4921.2,0)"><path data-c="2229" d="M88 -21T75 -21T55 -7V200Q55 231 55 280Q56 414 60 428Q61 430 61 431Q77 500 152 549T332 598Q443 598 522 544T610 405Q611 399 611 194V-7Q604 -22 591 -22Q582 -22 572 -9L570 405Q563 433 556 449T529 485Q498 519 445 538T334 558Q251 558 179 518T96 401Q95 396 95 193V-7Q88 -21 75 -21Z"></path></g><g data-mml-node="mi" transform="translate(5810.4,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(6514.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="23.807ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 10522.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(849.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1794.6,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mstyle" transform="translate(2553.6,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mi" transform="translate(3553.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(4038.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mstyle" transform="translate(4489.6,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mi" transform="translate(5489.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(6339.3,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mo" transform="translate(7284.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(7673.1,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(8540.3,0)"><path data-c="2229" d="M88 -21T75 -21T55 -7V200Q55 231 55 280Q56 414 60 428Q61 430 61 431Q77 500 152 549T332 598Q443 598 522 544T610 405Q611 399 611 194V-7Q604 -22 591 -22Q582 -22 572 -9L570 405Q563 433 556 449T529 485Q498 519 445 538T334 558Q251 558 179 518T96 401Q95 396 95 193V-7Q88 -21 75 -21Z"></path></g><g data-mml-node="mi" transform="translate(9429.6,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(10133.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="27.891ex" height="1.686ex" role="img" focusable="false" viewBox="0 -705 12328 745"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(849.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1794.6,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(2775.8,0)"><path data-c="222A" d="M591 598H592Q604 598 611 583V376Q611 345 611 296Q610 162 606 148Q605 146 605 145Q586 68 507 23T333 -22Q268 -22 209 -1T106 66T56 173Q55 180 55 384L56 585Q66 598 75 598Q85 598 95 585V378L96 172L98 162Q112 95 181 57T332 18Q415 18 487 58T570 175Q571 180 571 383V583Q579 598 591 598Z"></path></g><g data-mml-node="mi" transform="translate(3665,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mstyle" transform="translate(4310,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mi" transform="translate(5310,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(5839,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(6439,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mstyle" transform="translate(6959,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mi" transform="translate(7959,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(8808.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(9753.6,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(10734.8,0)"><path data-c="222A" d="M591 598H592Q604 598 611 583V376Q611 345 611 296Q610 162 606 148Q605 146 605 145Q586 68 507 23T333 -22Q268 -22 209 -1T106 66T56 173Q55 180 55 384L56 585Q66 598 75 598Q85 598 95 585V378L96 172L98 162Q112 95 181 57T332 18Q415 18 487 58T570 175Q571 180 571 383V583Q579 598 591 598Z"></path></g><g data-mml-node="mi" transform="translate(11624,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g></svg></mjx-container></span></p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="21.611ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 9551.9 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(849.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mo" transform="translate(1794.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2183.6,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(3164.8,0)"><path data-c="222A" d="M591 598H592Q604 598 611 583V376Q611 345 611 296Q610 162 606 148Q605 146 605 145Q586 68 507 23T333 -22Q268 -22 209 -1T106 66T56 173Q55 180 55 384L56 585Q66 598 75 598Q85 598 95 585V378L96 172L98 162Q112 95 181 57T332 18Q415 18 487 58T570 175Q571 180 571 383V583Q579 598 591 598Z"></path></g><g data-mml-node="mi" transform="translate(4054,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(4699,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5310.2,0)"><path data-c="2229" d="M88 -21T75 -21T55 -7V200Q55 231 55 280Q56 414 60 428Q61 430 61 431Q77 500 152 549T332 598Q443 598 522 544T610 405Q611 399 611 194V-7Q604 -22 591 -22Q582 -22 572 -9L570 405Q563 433 556 449T529 485Q498 519 445 538T334 558Q251 558 179 518T96 401Q95 396 95 193V-7Q88 -21 75 -21Z"></path></g><g data-mml-node="mo" transform="translate(6199.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(6588.4,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(7569.7,0)"><path data-c="222A" d="M591 598H592Q604 598 611 583V376Q611 345 611 296Q610 162 606 148Q605 146 605 145Q586 68 507 23T333 -22Q268 -22 209 -1T106 66T56 173Q55 180 55 384L56 585Q66 598 75 598Q85 598 95 585V378L96 172L98 162Q112 95 181 57T332 18Q415 18 487 58T570 175Q571 180 571 383V583Q579 598 591 598Z"></path></g><g data-mml-node="mi" transform="translate(8458.9,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(9162.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p><p>仅当：</p><p>bulabula...</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="3.588ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 1586 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(466,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1066,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g></svg></mjx-container></span></p><h2 id="证明2">证明2：</h2><blockquote><p>不存在整数对a和b,使得 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="21.937ex" height="1.756ex" role="img" focusable="false" viewBox="0 -694 9696.2 776"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mspace" transform="translate(529,0)"></g><g data-mml-node="mi" transform="translate(1362.7,0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(833,0)"></path><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1333,0)"></path></g><g data-mml-node="mstyle" transform="translate(3251.7,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mstyle" transform="translate(3418.7,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mi" transform="translate(3752.3,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(4459.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(5514.9,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mspace" transform="translate(5943.9,0)"></g><g data-mml-node="mi" transform="translate(6777.6,0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(833,0)"></path><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1333,0)"></path></g><g data-mml-node="mstyle" transform="translate(8666.6,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mstyle" transform="translate(8833.6,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mi" transform="translate(9167.2,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g></g></svg></mjx-container></span></p></blockquote><p>当需要处理成双的对象时，利用对称性常常有可能简化对象之间的关系，例如假设a&lt;b(不要忘记了a= b)</p><h2 id="更一般的整数归纳法">更一般的整数归纳法</h2><ol type="1"><li><p>利用多个基础情形，对于某个<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.462ex;" xmlns="http://www.w3.org/2000/svg" width="4.73ex" height="1.957ex" role="img" focusable="false" viewBox="0 -661 2090.6 865"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(689.8,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mi" transform="translate(1745.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>,证明<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="20.073ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 8872.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(645,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1034,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1379,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(1768,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2212.7,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(2857.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(3246.7,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3813.9,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(4814.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(5314.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5703.1,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(6147.8,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(6592.4,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mi" transform="translate(7037.1,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(7682.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(8071.1,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(8483.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p></li><li><p>证明<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.474ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3745.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(645,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1034,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1856.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(2856.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3356.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>时，利用所有命题</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="21.504ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 9504.8 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(645,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1034,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1379,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(1768,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2212.7,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(2857.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(3246.7,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3813.9,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(4814.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(5314.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5703.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(6147.8,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(6592.4,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(7037.1,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mi" transform="translate(7481.8,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(8126.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(8515.8,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(9115.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p><p>而不是只利用<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.577ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2023 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(645,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1034,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1634,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p></li></ol><ul><li>结构归纳法</li><li>互归纳</li></ul><h2 id="证明3-判定一个给定的串是否属于某个具体语言的提问">证明3判定一个给定的串是否属于某个具体语言的提问</h2><blockquote><p>如果<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="2.389ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1056 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g></g></g></svg></mjx-container></span>是字母表，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.541ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 681 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g></g></g></svg></mjx-container></span>是<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="2.389ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1056 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g></g></g></svg></mjx-container></span> 上的语言，问题<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.541ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 681 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g></g></g></svg></mjx-container></span>就是：给定 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.377ex" height="2.389ex" role="img" focusable="false" viewBox="0 -805.9 1492.6 1055.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mover"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="mo" transform="translate(1089,477.1) scale(0.707)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g></g></g></g></svg></mjx-container></span>中的一个串<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.407ex" height="1.027ex" role="img" focusable="false" viewBox="0 -443 622 454"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D714" d="M495 384Q495 406 514 424T555 443Q574 443 589 425T604 364Q604 334 592 278T555 155T483 38T377 -11Q297 -11 267 66Q266 68 260 61Q201 -11 125 -11Q15 -11 15 139Q15 230 56 325T123 434Q135 441 147 436Q160 429 160 418Q160 406 140 379T94 306T62 208Q61 202 61 187Q61 124 85 100T143 76Q201 76 245 129L253 137V156Q258 297 317 297Q348 297 348 261Q348 243 338 213T318 158L308 135Q309 133 310 129T318 115T334 97T358 83T393 76Q456 76 501 148T546 274Q546 305 533 325T508 357T495 384Z"></path></g></g></g></svg></mjx-container></span> ，判定串<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.407ex" height="1.027ex" role="img" focusable="false" viewBox="0 -443 622 454"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D714" d="M495 384Q495 406 514 424T555 443Q574 443 589 425T604 364Q604 334 592 278T555 155T483 38T377 -11Q297 -11 267 66Q266 68 260 61Q201 -11 125 -11Q15 -11 15 139Q15 230 56 325T123 434Q135 441 147 436Q160 429 160 418Q160 406 140 379T94 306T62 208Q61 202 61 187Q61 124 85 100T143 76Q201 76 245 129L253 137V156Q258 297 317 297Q348 297 348 261Q348 243 338 213T318 158L308 135Q309 133 310 129T318 115T334 97T358 83T393 76Q456 76 501 148T546 274Q546 305 533 325T508 357T495 384Z"></path></g></g></g></svg></mjx-container></span>是否属于L</p></blockquote><p>"问题"的定义的一个可能不令人满意的方面是：人们常常不认为问题是判定问题（以下是否为真），而是认为是计算或者变换某个输入的请求（找出完成任务的最佳方法）</p>]]></content>
      
      
      <categories>
          
          <category> 形式语言与自动机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 形式语言与自动机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ClassIntro</title>
      <link href="/2022/09/06/ClassIntro/"/>
      <url>/2022/09/06/ClassIntro/</url>
      
        <content type="html"><![CDATA[<h1 id="intro">Intro</h1><h2 id="what-study-automata">What Study Automata ?</h2><h2 id="how-could-that-be">How Could That Be ?</h2><ul><li><p>Regular expressions are used in many systems.</p><ul><li>E.g., UNIX a.*b.</li><li>E.g., DTD’s describe XML tags with a RE format like person (name,addr, child*).</li></ul></li><li><p>Finite automata model protocols, electronic cicuits.</p><p>有穷自动机</p></li><li><p><strong>Context-free</strong> grammars are used to describe thesyntax of essentially every programming language</p><p>上下文无关文法</p></li><li><p>When developing solutions to real problems, we often confront thelimitations of what software can do</p><ul><li><strong>Undecidable</strong> things - no program whatever can doit</li><li><strong>Intractable</strong> things - there are programs, but nofast programs</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 形式语言与自动机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 形式语言与自动机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动化测试</title>
      <link href="/2022/09/06/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
      <url>/2022/09/06/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="软件失效行为刻画的挑战">软件失效行为刻画的挑战</h2><p>执行路径距离实例</p><ul><li>海明距离</li></ul><blockquote><p>由于软件系统结</p></blockquote><h2 id="人机协同智能-人工标注-半监督">人机协同智能 人工标注 +半监督</h2><p>标注信息</p><ul><li>Must-Link： 相同软件行为 M</li><li>Cannot-Link： 不同软件行为 C</li></ul><h1 id="软件缺陷的出发与传播机理">软件缺陷的出发与传播机理</h1><h2 id="什么叫bug">什么叫Bug</h2><ul><li>Software Fault ：A static defect in the software</li><li>Software Error</li><li>Software Failure</li></ul><h2 id="测试的局限性">测试的局限性</h2><p><img src="https://s2.loli.net/2022/09/07/rxGVufJnRicXHyh.png"></p><h2 id="自动化测试脚本修复">自动化测试脚本修复</h2><h1 id="变异测试">变异测试</h1><h2 id="变异测试背景">变异测试背景</h2><h3 id="变异分析与变异测试">变异分析与变异测试</h3><ul><li>Mutation Analysis</li><li>Mutation Test</li></ul><h3 id="变异体">变异体</h3><ul><li>Mutant<ul><li>基于语法规则，对源程序进行变换</li></ul></li><li>假设<ul><li>源程序不包含缺陷</li><li>变异体表达了某种缺陷</li></ul></li></ul><h3 id="变异杀死的条件">变异杀死的条件</h3><ul><li><p>缺陷传播模型：RIPR 和 PIE</p></li><li><p>杀死条件 Mutant Killing Condition</p><ul><li>受程序行为的定义影响</li><li>程序行为</li></ul></li></ul><h3 id="变异分类">变异分类</h3><ol type="1"><li>Weak mutation (R &amp; E)</li><li>Firm mutation (I)</li><li>Strong mutation (P &amp; PR)</li></ol><h3 id="变异算子">变异算子</h3><ul><li>Mutation Operator</li></ul><h2 id="变异测试过程">变异测试过程</h2><h2 id="变异测试应用">变异测试应用</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1-云计算简介</title>
      <link href="/2022/09/05/1-%E4%BA%91%E8%AE%A1%E7%AE%97%E7%AE%80%E4%BB%8B/"/>
      <url>/2022/09/05/1-%E4%BA%91%E8%AE%A1%E7%AE%97%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>寻找重复子树</title>
      <link href="/2022/09/05/%E5%AF%BB%E6%89%BE%E9%87%8D%E5%A4%8D%E5%AD%90%E6%A0%91/"/>
      <url>/2022/09/05/%E5%AF%BB%E6%89%BE%E9%87%8D%E5%A4%8D%E5%AD%90%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="寻找重复子树">寻找重复子树</h1><p>给定一棵二叉树<code>root</code>，返回所有<strong>重复的子树</strong>。</p><p>对于同一类的重复子树，你只需要返回其中任意<strong>一棵</strong>的根结点即可。</p><p>如果两棵树具有<strong>相同的结构</strong>和<strong>相同的结点值</strong>，则它们是<strong>重复</strong>的。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/08/16/e1.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [1,2,3,4,null,2,4,null,null,4]</span><br><span class="line">输出：[[2,4],[4]]</span><br></pre></td></tr></table></figure><h1 id="题解">题解</h1><p>判断两个子树是否相等，我们通过设计递归函数dfs，对应以<code>root</code>为根节点的标识，以<code>_</code>分割不同的节点值，以<code>" "</code>保留空节点</p><p>使用哈希表记录每个标识出现的次数，当出现次数为2时，将该节点记入答案</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() {}</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) {</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    Map&lt;String,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    List&lt;TreeNode&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title function_">findDuplicateSubtrees</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">      dfs(root);</span><br><span class="line">      <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">dfs</span><span class="params">(TreeNode root)</span>{</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="string">" "</span>;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        sb.append(root.val).append(<span class="string">"_"</span>);</span><br><span class="line">        sb.append(dfs(root.left)).append(dfs(root.right));</span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">        map.put(key,map.getOrDefault(key,<span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(map.get(key) == <span class="number">2</span>) ans.add(root);</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 常用算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> 哈希表 </tag>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计跳表</title>
      <link href="/2022/07/26/%E8%AE%BE%E8%AE%A1%E8%B7%B3%E8%A1%A8/"/>
      <url>/2022/07/26/%E8%AE%BE%E8%AE%A1%E8%B7%B3%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="设计跳表"><a href="https://leetcode.cn/problems/design-skiplist/">1206.设计跳表</a></h1><p>不使用任何库函数，设计一个 <strong>跳表</strong> 。</p><p><strong>跳表</strong> 是在 <code>O(log(n))</code>时间内完成增加、删除、搜索操作的数据结构。跳表相比于树堆与红黑树，其功能与性能相当，并且跳表的代码长度相较下更短，其设计思想与链表相似。</p><p>例如，一个跳表包含 <code>[30, 40, 50, 60, 70, 90]</code> ，然后增加<code>80</code>、<code>45</code> 到跳表中，以下图的方式操作：</p><p><img src="https://s2.loli.net/2022/07/26/nB5esApVJm6tMfj.gif" alt="img"> Artyom Kalinin [CC BY-SA 3.0], via <a href="https://commons.wikimedia.org/wiki/File:Skip_list_add_element-en.gif">WikimediaCommons</a></p><p>跳表中有很多层，每一层是一个短的链表。在第一层的作用下，增加、删除和搜索操作的时间复杂度不超过<code>O(n)</code>。跳表的每一个操作的平均时间复杂度是<code>O(log(n))</code>，空间复杂度是 <code>O(n)</code>。</p><p>在本题中，你的设计应该要包含这些函数：</p><ul><li><code>bool search(int target)</code> :返回target是否存在于跳表中。</li><li><code>void add(int num)</code>: 插入一个元素到跳表。</li><li><code>bool erase(int num)</code>: 在跳表中删除一个值，如果<code>num</code> 不存在，直接返回false. 如果存在多个 <code>num</code>，删除其中任意一个即可。</li></ul><p>注意，跳表中可能存在多个相同的值，你的代码需要处理这种情况。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">["Skiplist", "add", "add", "add", "search", "add", "search", "erase", "erase", "search"]</span><br><span class="line">[[], [1], [2], [3], [0], [4], [1], [0], [1], [1]]</span><br><span class="line">输出</span><br><span class="line">[null, null, null, null, false, null, true, false, true, false]</span><br><span class="line"></span><br><span class="line">解释</span><br><span class="line">Skiplist skiplist = new Skiplist();</span><br><span class="line">skiplist.add(1);</span><br><span class="line">skiplist.add(2);</span><br><span class="line">skiplist.add(3);</span><br><span class="line">skiplist.search(0);   // 返回 false</span><br><span class="line">skiplist.add(4);</span><br><span class="line">skiplist.search(1);   // 返回 true</span><br><span class="line">skiplist.erase(0);    // 返回 false，0 不在跳表中</span><br><span class="line">skiplist.erase(1);    // 返回 true</span><br><span class="line">skiplist.search(1);   // 返回 false，1 已被擦除</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>0 &lt;= num, target &lt;= 2 * 104</code></li><li>调用<code>search</code>, <code>add</code>,<code>erase</code>操作次数不大于 <code>5 * 104</code></li></ul><h1 id="题解">题解</h1><h2 id="分析">分析</h2><p>由于传统链表的查询的效率非常低，我们采用空间换时间的方法来提高效率</p><p>将链表每两个元素抽出来做一个类似索引的链表</p><p><img src="https://s2.loli.net/2022/07/26/dyS3KBFh6VIQsUw.png" alt="查询 6"></p><p>时间复杂度：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="16.476ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 7282.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1752,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2418.8,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(3696.6,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(4459.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4848.6,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="mo" transform="translate(6126.6,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(6293.2,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6893.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p><p>空间复杂度：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.844ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2141 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1752,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p><h2 id="代码实现">代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Skiplist</span>{</span><br><span class="line"> <span class="type">int</span> level = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Node</span>{</span><br><span class="line">      <span class="type">int</span> val;</span><br><span class="line">      Node</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h1 id="参考">参考</h1><p><a href="https://15721.courses.cs.cmu.edu/spring2018/papers/08-oltpindexes1/pugh-skiplists-cacm1990.pdf">WilliamPugh论文</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>线段树-动态开点</title>
      <link href="/2022/07/19/%E7%BA%BF%E6%AE%B5%E6%A0%91-%E5%8A%A8%E6%80%81%E5%BC%80%E7%82%B9/"/>
      <url>/2022/07/19/%E7%BA%BF%E6%AE%B5%E6%A0%91-%E5%8A%A8%E6%80%81%E5%BC%80%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="range-模块"><a href="https://leetcode.cn/problems/range-module/">715. Range模块</a></h1><p>Range模块是跟踪数字范围的模块。设计一个数据结构来跟踪表示为<strong>半开区间</strong> 的范围并查询它们。</p><p><strong>半开区间</strong> <code>[left, right)</code> 表示所有<code>left &lt;= x &lt; right</code> 的实数 <code>x</code> 。</p><p>实现 <code>RangeModule</code> 类:</p><ul><li><code>RangeModule()</code> 初始化数据结构的对象。</li><li><code>void addRange(int left, int right)</code> 添加<strong>半开区间</strong><code>[left, right)</code>，跟踪该区间中的每个实数。添加与当前跟踪的数字部分重叠的区间时，应当添加在区间<code>[left, right)</code> 中尚未跟踪的任何数字到该区间中。</li><li><code>boolean queryRange(int left, int right)</code>只有在当前正在跟踪区间 <code>[left, right)</code>中的每一个实数时，才返回 <code>true</code> ，否则返回 <code>false</code>。</li><li><code>void removeRange(int left, int right)</code> 停止跟踪<strong>半开区间</strong> <code>[left, right)</code>中当前正在跟踪的每个实数。</li></ul><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">["RangeModule", "addRange", "removeRange", "queryRange", "queryRange", "queryRange"]</span><br><span class="line">[[], [10, 20], [14, 16], [10, 14], [13, 15], [16, 17]]</span><br><span class="line">输出</span><br><span class="line">[null, null, null, true, false, true]</span><br><span class="line"></span><br><span class="line">解释</span><br><span class="line">RangeModule rangeModule = new RangeModule();</span><br><span class="line">rangeModule.addRange(10, 20);</span><br><span class="line">rangeModule.removeRange(14, 16);</span><br><span class="line">rangeModule.queryRange(10, 14); 返回 true （区间 [10, 14) 中的每个数都正在被跟踪）</span><br><span class="line">rangeModule.queryRange(13, 15); 返回 false（未跟踪区间 [13, 15) 中像 14, 14.03, 14.17 这样的数字）</span><br><span class="line">rangeModule.queryRange(16, 17); 返回 true （尽管执行了删除操作，区间 [16, 17) 中的数字 16 仍然会被跟踪）</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= left &lt; right &lt;= 109</code></li><li>在单个测试用例中，对 <code>addRange</code> 、<code>queryRange</code> 和 <code>removeRange</code> 的调用总数不超过<code>104</code> 次</li></ul><h1 id="题解">题解</h1><h2 id="线段树引入">线段树引入</h2><p><strong>线段树解决的是「区间和」的问题，且该「区间」会被修改</strong></p><p>for example， 对于数组 <code>nums = [1,2,3,4,5]</code></p><p>如果我们需要多次求某些区间的和，是不是首先想到了利用「前缀和」</p><p>但是如果 <code>nums</code>会被修改呢？前缀和就没有那么高效了，于是我们引入了线段树</p><h2 id="线段树原理和实现">线段树原理和实现</h2><p>所以<strong>线段树</strong>主要实现两个方法：「求区间和」&amp;&amp;「修改区间」，且时间复杂度均为<code>O(logn)</code></p><p>始终记住一句话：<strong>线段树的每个节点代表一个区间</strong></p><p>上述数组对应的线段树如下图</p><p><img src="https://pic.leetcode-cn.com/1654588271-zbOpBr-1.svg"></p><p>我们可以根据题目需要，更改节点含义符合区间加法的例子</p><ul><li>数字之和</li><li>最大公因数（总GCD = gcd（左，右））</li><li>最大值</li></ul><p>不符合的例子</p><ul><li>众数</li><li>01序列的最长连续0</li></ul><h3 id="线段树的建立">线段树的建立</h3><p>数组 or 链表</p><p>如果题目给了具体范围，那我们根据该范围建立线段树</p><p>but，很多时候，没有具体范围，数据的取值范围很大，我们采取<code>动态开点</code></p><h3 id="线段树的更新">线段树的更新</h3><p>如果我们要把区间 [2, 4] 内的元素都「➕1」</p><p><img src="https://pic.leetcode-cn.com/1654588378-Bhkpkc-3.svg"></p><p>我们会发现一个很有意思的现象，我们只把 [2,2] 和 [3,4]这两个区间对应的节点更新了，而区间 [3, 3] 和 [4,4] 并没有更新</p><p>按道理来说，[3, 3] 和 [4,4] 也是需要更新的，不然当我们查询区间 [3, 3]和 [4,4] 的值，就会出现错误！！</p><p>这是因为我们使用了「懒惰标记」的方法，我们只需要更新到满足条件的区间即可，然后再给该区间对应的节点加一个懒惰标记，表示该节点所有对应的孩子节点都应该有此更新</p><p>当我们向孩子节点遍历的时候会把「懒惰标记」下推给孩子节点</p><p>Node 的数据结构为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>{</span><br><span class="line">Node left,right;</span><br><span class="line"><span class="type">int</span> val;</span><br><span class="line"><span class="type">int</span> add;<span class="comment">//懒惰标记</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>懒惰标记函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// leftNum 和 rightNum 表示左右孩子区间的叶子节点数量</span></span><br><span class="line"><span class="comment">// 因为如果是「加减」更新操作的话，需要用懒惰标记的值✖️叶子节点的数量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pushDown</span><span class="params">(Node node, <span class="type">int</span> leftNum, <span class="type">int</span> rightNum)</span> {</span><br><span class="line">    <span class="comment">// 动态开点</span></span><br><span class="line">    <span class="keyword">if</span> (node.left == <span class="literal">null</span>) node.left = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">    <span class="keyword">if</span> (node.right == <span class="literal">null</span>) node.right = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">    <span class="comment">// 如果 add 为 0，表示没有标记</span></span><br><span class="line">    <span class="keyword">if</span> (node.add == <span class="number">0</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="comment">// 注意：当前节点加上标记值✖️该子树所有叶子节点的数量</span></span><br><span class="line">    node.left.val += node.add * leftNum;</span><br><span class="line">    node.right.val += node.add * rightNum;</span><br><span class="line">    <span class="comment">// 把标记下推给孩子节点</span></span><br><span class="line">    <span class="comment">// 对区间进行「加减」的更新操作，下推懒惰标记时需要累加起来，不能直接覆盖</span></span><br><span class="line">    node.left.add += node.add;</span><br><span class="line">    node.right.add += node.add;</span><br><span class="line">    <span class="comment">// 取消当前节点标记</span></span><br><span class="line">    node.add = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>更新函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在区间 [start, end] 中更新区间 [l, r] 的值，将区间 [l, r] ➕ val</span></span><br><span class="line"><span class="comment">// 对于上面的例子，应该这样调用该函数：update(root, 0, 4, 2, 4, 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Node node, <span class="type">int</span> start, <span class="type">int</span> end, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> val)</span> {</span><br><span class="line">    <span class="comment">// 找到满足要求的区间</span></span><br><span class="line">    <span class="keyword">if</span> (l &lt;= start &amp;&amp; end &lt;= r) {</span><br><span class="line">        <span class="comment">// 区间节点加上更新值</span></span><br><span class="line">        <span class="comment">// 注意：需要✖️该子树所有叶子节点</span></span><br><span class="line">        node.val += (end - start + <span class="number">1</span>) * val;</span><br><span class="line">        <span class="comment">// 添加懒惰标记</span></span><br><span class="line">        <span class="comment">// 对区间进行「加减」的更新操作，懒惰标记需要累加，不能直接覆盖</span></span><br><span class="line">        node.add += val;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (start + end) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 下推标记</span></span><br><span class="line">    <span class="comment">// mid - start + 1：表示左孩子区间叶子节点数量</span></span><br><span class="line">    <span class="comment">// end - mid：表示右孩子区间叶子节点数量</span></span><br><span class="line">    pushDown(node, mid - start + <span class="number">1</span>, end - mid);</span><br><span class="line">    <span class="comment">// [start, mid] 和 [l, r] 可能有交集，遍历左孩子区间</span></span><br><span class="line">    <span class="keyword">if</span> (l &lt;= mid) update(node.left, start, mid, l, r, val);</span><br><span class="line">    <span class="comment">// [mid + 1, end] 和 [l, r] 可能有交集，遍历右孩子区间</span></span><br><span class="line">    <span class="keyword">if</span> (r &gt; mid) update(node.right, mid + <span class="number">1</span>, end, l, r, val);</span><br><span class="line">    <span class="comment">// 向上更新</span></span><br><span class="line">    pushUp(node);</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="完整实现">完整实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SegmentTreeDynamic</span> {</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Node</span> {</span><br><span class="line">        Node left, right;</span><br><span class="line">        <span class="type">int</span> val, add;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> (<span class="type">int</span>) <span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Node</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Node node, <span class="type">int</span> start, <span class="type">int</span> end, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> val)</span> {</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= start &amp;&amp; end &lt;= r) {</span><br><span class="line">            node.val += (end - start + <span class="number">1</span>) * val;</span><br><span class="line">            node.add += val;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (start + end) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        pushDown(node, mid - start + <span class="number">1</span>, end - mid);</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid) update(node.left, start, mid, l, r, val);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid) update(node.right, mid + <span class="number">1</span>, end, l, r, val);</span><br><span class="line">        pushUp(node);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">query</span><span class="params">(Node node, <span class="type">int</span> start, <span class="type">int</span> end, <span class="type">int</span> l, <span class="type">int</span> r)</span> {</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= start &amp;&amp; end &lt;= r) <span class="keyword">return</span> node.val;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (start + end) &gt;&gt; <span class="number">1</span>, ans = <span class="number">0</span>;</span><br><span class="line">        pushDown(node, mid - start + <span class="number">1</span>, end - mid);</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid) ans += query(node.left, start, mid, l, r);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid) ans += query(node.right, mid + <span class="number">1</span>, end, l, r);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pushUp</span><span class="params">(Node node)</span> {</span><br><span class="line">        node.val = node.left.val + node.right.val;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pushDown</span><span class="params">(Node node, <span class="type">int</span> leftNum, <span class="type">int</span> rightNum)</span> {</span><br><span class="line">        <span class="keyword">if</span> (node.left == <span class="literal">null</span>) node.left = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">        <span class="keyword">if</span> (node.right == <span class="literal">null</span>) node.right = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">        <span class="keyword">if</span> (node.add == <span class="number">0</span>) <span class="keyword">return</span> ;</span><br><span class="line">        node.left.val += node.add * leftNum;</span><br><span class="line">        node.right.val += node.add * rightNum;</span><br><span class="line">        <span class="comment">// 对区间进行「加减」的更新操作，下推懒惰标记时需要累加起来，不能直接覆盖</span></span><br><span class="line">        node.left.add += node.add;</span><br><span class="line">        node.right.add += node.add;</span><br><span class="line">        node.add = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="代码实现">代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RangeModule</span> {</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Node</span>{</span><br><span class="line">        Node ls, rs;</span><br><span class="line">        <span class="type">int</span> sum;<span class="comment">//记录多少整数被追踪</span></span><br><span class="line">        <span class="type">int</span> add;<span class="comment">//懒惰标记</span></span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> (<span class="type">int</span>)<span class="number">1e9</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Node node,<span class="type">int</span> lc,<span class="type">int</span> rc,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> v)</span>{</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> rc - lc + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l &lt;= lc &amp;&amp; r &gt;= rc){</span><br><span class="line">            node.sum = v == <span class="number">1</span> ? len : <span class="number">0</span>;</span><br><span class="line">            node.add = v;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        }</span><br><span class="line">        pushdown(node,len);<span class="comment">//下推懒惰节点</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> lc + rc &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l &lt;= mid) update(node.ls,lc,mid,l,r,v);</span><br><span class="line">        <span class="keyword">if</span>(r &gt;  mid) update(node.rs,mid+<span class="number">1</span>,rc,l,r,v);</span><br><span class="line">        pushup(node);</span><br><span class="line">        <span class="comment">//上推</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">pushdown</span><span class="params">(Node node,<span class="type">int</span> len)</span>{</span><br><span class="line">        <span class="keyword">if</span>(node.ls == <span class="literal">null</span>) node.ls = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">        <span class="keyword">if</span>(node.rs == <span class="literal">null</span>) node.rs = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">        <span class="keyword">if</span>(node.add == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">add</span> <span class="operator">=</span> node.add;</span><br><span class="line">        <span class="keyword">if</span>(add == -<span class="number">1</span>) node.ls.sum = node.rs.sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> {</span><br><span class="line">            node.ls.sum = len - len/<span class="number">2</span>;</span><br><span class="line">            node.rs.sum = len/<span class="number">2</span>;</span><br><span class="line">        }</span><br><span class="line">        node.ls.add = node.rs.add = add;</span><br><span class="line">        node.add = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">pushup</span><span class="params">(Node node)</span>{</span><br><span class="line">        node.sum = node.ls.sum + node.rs.sum;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">query</span><span class="params">(Node node, <span class="type">int</span> lc,<span class="type">int</span> rc, <span class="type">int</span> l,<span class="type">int</span> r)</span>{</span><br><span class="line">        <span class="keyword">if</span>(l &lt;= lc &amp;&amp; rc &lt;= r) <span class="keyword">return</span> node.sum;</span><br><span class="line">        pushdown(node,rc - lc + <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> lc + rc &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid) ans = query(node.ls, lc, mid, l, r);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid) ans += query(node.rs, mid + <span class="number">1</span>, rc, l, r);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RangeModule</span><span class="params">()</span> {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addRange</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> {</span><br><span class="line">        update(root, <span class="number">1</span>, N - <span class="number">1</span>, left, right - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">queryRange</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> {</span><br><span class="line">        <span class="keyword">return</span> query(root, <span class="number">1</span>, N - <span class="number">1</span>, left, right - <span class="number">1</span>) == right - left;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeRange</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> {</span><br><span class="line">        update(root, <span class="number">1</span>, N - <span class="number">1</span>, left, right - <span class="number">1</span>, -<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="参考">参考</h1><p><a href="https://leetcode.cn/problems/range-module/solution/by-ac_oier-i4sw/">【宫水三叶】线段树（动态开点）的两种方式- Range 模块 - 力扣（LeetCode）</a></p><p><a href="https://leetcode.cn/problems/range-module/solution/by-lfool-eo50/">线段树详解「汇总级别整理🔥🔥🔥」 - Range 模块 - 力扣（LeetCode）</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 常用算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 有序集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基数排序</title>
      <link href="/2022/07/17/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
      <url>/2022/07/17/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="radix-sort-基数排序">Radix Sort 基数排序</h1><h1 id="裁剪数字后查询第-k-小的数字"><a href="https://leetcode.cn/problems/query-kth-smallest-trimmed-number/">2343.裁剪数字后查询第 K 小的数字</a></h1><p>给你一个下标从 <strong>0</strong> 开始的字符串数组 <code>nums</code>，其中每个字符串 <strong>长度相等</strong> 且只包含数字。</p><p>再给你一个下标从 <strong>0</strong> 开始的二维整数数组<code>queries</code> ，其中 <code>queries[i] = [ki, trimi]</code>。对于每个 <code>queries[i]</code> ，你需要：</p><ul><li>将 <code>nums</code> 中每个数字 <strong>裁剪</strong> 到剩下<strong>最右边</strong> <code>trimi</code> 个数位。</li><li>在裁剪过后的数字中，找到 <code>nums</code> 中第 <code>ki</code>小数字对应的 <strong>下标</strong> 。如果两个裁剪后数字一样大，那么下标<strong>更小</strong> 的数字视为更小的数字。</li><li>将 <code>nums</code> 中每个数字恢复到原本字符串。</li></ul><p>请你返回一个长度与 <code>queries</code> 相等的数组<code>answer</code>，其中 <code>answer[i]</code>是第 <code>i</code>次查询的结果。</p><p><strong>提示：</strong></p><ul><li>裁剪到剩下 <code>x</code>个数位的意思是不断删除最左边的数位，直到剩下 <code>x</code>个数位。</li><li><code>nums</code> 中的字符串可能会有前导 0 。</li></ul><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = ["102","473","251","814"], queries = [[1,1],[2,3],[4,2],[1,2]]</span><br><span class="line">输出：[2,2,1,0]</span><br><span class="line">解释：</span><br><span class="line">1. 裁剪到只剩 1 个数位后，nums = ["2","3","1","4"] 。最小的数字是 1 ，下标为 2 。</span><br><span class="line">2. 裁剪到剩 3 个数位后，nums 没有变化。第 2 小的数字是 251 ，下标为 2 。</span><br><span class="line">3. 裁剪到剩 2 个数位后，nums = ["02","73","51","14"] 。第 4 小的数字是 73 ，下标为 1 。</span><br><span class="line">4. 裁剪到剩 2 个数位后，最小数字是 2 ，下标为 0 。</span><br><span class="line">   注意，裁剪后数字 "02" 值为 2 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = ["24","37","96","04"], queries = [[2,1],[2,2]]</span><br><span class="line">输出：[3,0]</span><br><span class="line">解释：</span><br><span class="line">1. 裁剪到剩 1 个数位，nums = ["4","7","6","4"] 。第 2 小的数字是 4 ，下标为 3 。</span><br><span class="line">   有两个 4 ，下标为 0 的 4 视为小于下标为 3 的 4 。</span><br><span class="line">2. 裁剪到剩 2 个数位，nums 不变。第二小的数字是 24 ，下标为 0 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 100</code></li><li><code>1 &lt;= nums[i].length &lt;= 100</code></li><li><code>nums[i]</code> 只包含数字。</li><li>所有 <code>nums[i].length</code> 的长度 <strong>相同</strong>。</li><li><code>1 &lt;= queries.length &lt;= 100</code></li><li><code>queries[i].length == 2</code></li><li><code>1 &lt;= ki &lt;= nums.length</code></li><li><code>1 &lt;= trimi &lt;= nums[0].length</code></li></ul><h1 id="题解">题解</h1><h2 id="思路">思路</h2><p>本质上是查询基数排序第trim轮的第k小的值，复杂度即基数排序的 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.83ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3019 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2030,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2630,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p><h1 id="代码实现">代码实现</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">smallestTrimmedNumbers</span><span class="params">(vector&lt;string&gt;&amp; nums, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; queries)</span> </span>{</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), m = nums[<span class="number">0</span>].<span class="built_in">size</span>(), q = queries.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">vecs</span>(m+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) vecs[<span class="number">0</span>].<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++){</span><br><span class="line">            vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">B</span>(<span class="number">10</span>);</span><br><span class="line">            <span class="comment">//把第i轮的结果，根据nums中右数第i位数依次放入桶中</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> x : vecs[i<span class="number">-1</span>]) B[nums[x][m-i]-<span class="string">'0'</span>].<span class="built_in">push_back</span>(x);</span><br><span class="line">            <span class="comment">//x 为 index</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j &lt; <span class="number">10</span>;j++) <span class="keyword">for</span>(<span class="type">int</span> x:B[j]) vecs[i].<span class="built_in">push_back</span>(x);</span><br><span class="line">            <span class="comment">//将每个桶的结果连起来，形成第i轮的结果</span></span><br><span class="line">        }</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;q : queries) ans.<span class="built_in">push_back</span>(vecs[q[<span class="number">1</span>]][q[<span class="number">0</span>]<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 常用算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> 基数排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIT6.S086-Lab1</title>
      <link href="/2022/07/12/MIT6-S086-Lab1/"/>
      <url>/2022/07/12/MIT6-S086-Lab1/</url>
      
        <content type="html"><![CDATA[<h1 id="lab-1-unix-utilities">Lab 1 Unix Utilities</h1><p><img src="https://s2.loli.net/2022/07/12/LbeItZJorR7FOwE.png"></p><table><thead><tr class="header"><th>系统调用</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>fork()</td><td>创建进程</td></tr><tr class="even"><td>exit()</td><td>结束当前进程</td></tr><tr class="odd"><td>wait()</td><td>等待子进程结束</td></tr><tr class="even"><td>kill(pid)</td><td>结束 pid 所指进程</td></tr><tr class="odd"><td>getpid()</td><td>获得当前进程 pid</td></tr><tr class="even"><td>sleep(n)</td><td>睡眠 n 秒</td></tr><tr class="odd"><td>exec(filename, *argv)</td><td>加载并执行一个文件</td></tr><tr class="even"><td>sbrk(n)</td><td>为进程内存空间增加 n 字节</td></tr><tr class="odd"><td>open(filename, flags)</td><td>打开文件，flags 指定读/写模式</td></tr><tr class="even"><td>read(fd, buf, n)</td><td>从文件中读 n 个字节到 buf</td></tr><tr class="odd"><td>write(fd, buf, n)</td><td>从 buf 中写 n 个字节到文件</td></tr><tr class="even"><td>close(fd)</td><td>关闭打开的 fd</td></tr><tr class="odd"><td>dup(fd)</td><td>复制 fd</td></tr><tr class="even"><td>pipe( p)</td><td>创建管道， 并把读和写的 fd 返回到p</td></tr><tr class="odd"><td>chdir(dirname)</td><td>改变当前目录</td></tr><tr class="even"><td>mkdir(dirname)</td><td>创建新的目录</td></tr><tr class="odd"><td>mknod(name, major, minor)</td><td>创建设备文件</td></tr><tr class="even"><td>fstat(fd)</td><td>返回文件信息</td></tr><tr class="odd"><td>link(f1, f2)</td><td>给 f1 创建一个新名字(f2)</td></tr><tr class="even"><td>unlink(filename)</td><td>删除文件</td></tr></tbody></table><h1 id="sleep">Sleep</h1><p>实现一个sleep的system call，实现休眠功能</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"kernel/types.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"user/user.h"</span></span></span><br><span class="line">   </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> {</span><br><span class="line"><span class="keyword">if</span> (argc == <span class="number">1</span>) {</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="number">2</span>, <span class="string">"ERROR: sleep time required\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line">sleep(atoi(argv[<span class="number">1</span>])); <span class="comment">// atoi把字符串转化为int</span></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h1 id="参考">参考</h1><p><a href="https://th0ar.gitbooks.io/xv6-chinese/content/index.html">xv6中文文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
          <category> Mit6.S081 </category>
          
          <category> Lab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mit6.S081 </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Static Analysis 01 Introduction</title>
      <link href="/2022/07/12/Static-Analysis-01-Introduction/"/>
      <url>/2022/07/12/Static-Analysis-01-Introduction/</url>
      
        <content type="html"><![CDATA[<h1 id="programming-languages">Programming Languages</h1><p><img src="https://s2.loli.net/2022/07/22/m7oMrGAnIgRJwc8.png"></p><ul><li>命令式编程语言（C++，Java）</li><li>函数式编程语言（Js，Pascal，Python）</li><li>逻辑式编程语言/声明式编程语言（）</li></ul><h1 id="why-we-need-static-analysis">Why We Need Static Analysis</h1><ul><li>Program Reliability<ul><li>Null pointer dereference</li><li>memory leak</li><li>etc...</li></ul></li><li>Program Security<ul><li>Private information leak</li><li>injection attack</li><li>etc...</li></ul></li><li>Compiler Optimization<ul><li>Dead code elimination 死代码清楚</li><li>code motion</li><li>etc...</li></ul></li><li>Program Understanding<ul><li>IDE call hierarchy</li><li>type indication</li><li>etc...</li></ul></li></ul><blockquote><p>Unfortunately, by Rice’s Theorem, there is no such approach todetermine whether P satisfies such non-trivial properties, i.e., givingexact answer: Yes or No</p></blockquote><p><img src="https://s2.loli.net/2022/07/22/Dfd2FPbjSMiJrVh.png"></p><ul><li>Compromise soundness (false negatives) 漏报</li><li>Compromise completeness (false positives) 误报</li></ul><p><img src="../../../../../../AppData/Roaming/Typora/typora-user-images/image-20220722224103692.png"></p><h1 id="static-analysis-bird-s-eye-view">Static Analysis — Bird‘ s EyeView</h1><p><img src="D:/tengxun/709034836/FileRecv/E316C0F1C7AAF56C9096CA3026FCD6FA.png"></p><blockquote><p>Static Analysis: ensure (or get close to) soundness, while makinggood trade-offs between analysis precision and analysis speed</p></blockquote><p><strong>Two Words to Conclude Static Analysis</strong></p><ul><li><strong>Abstraction</strong></li><li><strong>Over-approximation</strong><ul><li>Transfer functions</li><li>Control flows</li></ul></li></ul><p>抽象 + 近似</p><h2 id="abstraction">Abstraction</h2><p><img src="https://s2.loli.net/2022/09/15/7giDGP9WUIywsro.png"></p><h2 id="over-approximation">Over-approximation</h2><h3 id="transfer-functions">Transfer Functions</h3><ul><li>In static anaysis , transfer functions define how to evaluatedifferent program statements on abstract values.</li><li>Transfer functions are defined according to "analysis problem" andthe "semantics" of different program statements.</li></ul><h3 id="control-flows">Control flows</h3><p>控制流</p>]]></content>
      
      
      <categories>
          
          <category> 软件分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前缀树/字典树</title>
      <link href="/2022/07/11/%E5%89%8D%E7%BC%80%E6%A0%91-%E5%AD%97%E5%85%B8%E6%A0%91/"/>
      <url>/2022/07/11/%E5%89%8D%E7%BC%80%E6%A0%91-%E5%AD%97%E5%85%B8%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="前缀树字典树-trie">前缀树/字典树 Trie</h1><p><strong><a href="https://baike.baidu.com/item/字典树/9825209?fr=aladdin">Trie</a></strong>（发音类似"try"）或者说 <strong>前缀树</strong>是一种树形数据结构，用于高效地存储和检索字符串数据集中的键。这一数据结构有相当多的应用情景，例如自动补完和拼写检查。</p><p>请你实现 Trie 类：</p><ul><li><code>Trie()</code> 初始化前缀树对象。</li><li><code>void insert(String word)</code> 向前缀树中插入字符串<code>word</code> 。</li><li><code>boolean search(String word)</code> 如果字符串<code>word</code> 在前缀树中，返回<code>true</code>（即，在检索之前已经插入）；否则，返回<code>false</code> 。</li><li><code>boolean startsWith(String prefix)</code>如果之前已经插入的字符串 <code>word</code> 的前缀之一为<code>prefix</code> ，返回 <code>true</code> ；否则，返回<code>false</code> 。</li></ul><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">["Trie", "insert", "search", "search", "startsWith", "insert", "search"]</span><br><span class="line">[[], ["apple"], ["apple"], ["app"], ["app"], ["app"], ["app"]]</span><br><span class="line">输出</span><br><span class="line">[null, null, true, false, true, null, true]</span><br><span class="line"></span><br><span class="line">解释</span><br><span class="line">Trie trie = new Trie();</span><br><span class="line">trie.insert("apple");</span><br><span class="line">trie.search("apple");   // 返回 True</span><br><span class="line">trie.search("app");     // 返回 False</span><br><span class="line">trie.startsWith("app"); // 返回 True</span><br><span class="line">trie.insert("app");</span><br><span class="line">trie.search("app");     // 返回 True</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= word.length, prefix.length &lt;= 2000</code></li><li><code>word</code> 和 <code>prefix</code> 仅由小写英文字母组成</li><li><code>insert</code>、<code>search</code> 和 <code>startsWith</code>调用次数 <strong>总计</strong> 不超过 <code>3 * 104</code> 次</li></ul><h1 id="题解">题解</h1><h2 id="思路">思路</h2><p>Trie 树 TrieTrie树（又叫「前缀树」或「字典树」）是一种用于快速查询「某个字符串/字符前缀」是否存在的数据结构。</p><p>其核心是使用「边」来代表有无字符，使用「点」来记录是否为「单词结尾」以及「其后续字符串的字符是什么」。</p><p><img src="https://s2.loli.net/2022/07/11/vZK6cdlOECFgmTR.png"></p><h2 id="代码实现">代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span>{</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">TrieNode</span>{</span><br><span class="line">        <span class="type">boolean</span> end;</span><br><span class="line">        TrieNode[] tns = <span class="keyword">new</span> <span class="title class_">TrieNode</span>[<span class="number">26</span>];</span><br><span class="line">    }</span><br><span class="line">    TrieNode root;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Trie</span><span class="params">()</span>{</span><br><span class="line">        root = <span class="keyword">new</span> <span class="title class_">TrieNode</span>();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String s)</span>{</span><br><span class="line">        <span class="type">TrieNode</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; s.length();i++){</span><br><span class="line">            <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> s.charAt(i) - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span>(p.tns[u] == <span class="literal">null</span>) p.tns[u] = <span class="keyword">new</span> <span class="title class_">TrieNode</span>();</span><br><span class="line">            p = p.tns[u];</span><br><span class="line">        }</span><br><span class="line">        p.end = <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(String s)</span>{</span><br><span class="line">        <span class="type">TrieNode</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++){</span><br><span class="line">        <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> s.charAt(i) - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span>(p.tns[u] == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            p = p.tns[u];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> p.end;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">startsWith</span><span class="params">(String s)</span>{</span><br><span class="line">        <span class="type">TrieNode</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++){</span><br><span class="line">        <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> s.charAt(i) - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span>(p.tns[u] == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            p = p.tns[u];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h1 id="关于-trie-的应用面">关于 Trie 的应用面</h1><p>首先，在纯算法领域，前缀树算是一种较为常用的数据结构。</p><p>不过如果在工程中，不考虑前缀匹配的话，基本上使用 hash 就能满足。</p><p>如果考虑前缀匹配的话，工程也不会使用 Trie 。</p><p>一方面是字符集大小不好确定（题目只考虑 26个字母，字符集大小限制在较小的 26 内）因此可以使用Trie，但是工程一般兼容各种字符集，一旦字符集大小很大的话，Trie将会带来很大的空间浪费。</p><p>另外，对于个别的超长字符 Trie 会进一步变深。</p><p>这时候如果 Trie 是存储在硬盘中，Trie 结构过深带来的影响是多次随机IO，随机 IO 是成本很高的操作。</p><p>同时 Trie 的特殊结构，也会为分布式存储将会带来困难。</p><p>因此在工程领域中 Trie 的应用面不广。</p><p>至于一些诸如「联想输入」、「模糊匹配」、「全文检索」的典型场景在工程主要是通过ES (ElasticSearch) 解决的。</p><p>而 ES 的实现则主要是依靠「倒排索引」</p><h1 id="设计一个魔法字典">设计一个魔法字典</h1><p>设计一个使用单词列表进行初始化的数据结构，单词列表中的单词<strong>互不相同</strong> 。如果给出一个单词，请判定能否只将这个单词中<strong>一个</strong>字母换成另一个字母，使得所形成的新单词存在于你构建的字典中。</p><p>实现 <code>MagicDictionary</code> 类：</p><ul><li><code>MagicDictionary()</code> 初始化对象</li><li><code>void buildDict(String[] dictionary)</code> 使用字符串数组<code>dictionary</code> 设定该数据结构，<code>dictionary</code>中的字符串互不相同</li><li><code>bool search(String searchWord)</code> 给定一个字符串<code>searchWord</code> ，判定能否只将字符串中 <strong>一个</strong>字母换成另一个字母，使得所形成的新字符串能够与字典中的任一字符串匹配。如果可以，返回<code>true</code> ；否则，返回 <code>false</code> 。</li></ul><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">["MagicDictionary", "buildDict", "search", "search", "search", "search"]</span><br><span class="line">[[], [["hello", "leetcode"]], ["hello"], ["hhllo"], ["hell"], ["leetcoded"]]</span><br><span class="line">输出</span><br><span class="line">[null, null, false, true, false, false]</span><br><span class="line"></span><br><span class="line">解释</span><br><span class="line">MagicDictionary magicDictionary = new MagicDictionary();</span><br><span class="line">magicDictionary.buildDict(["hello", "leetcode"]);</span><br><span class="line">magicDictionary.search("hello"); // 返回 False</span><br><span class="line">magicDictionary.search("hhllo"); // 将第二个 'h' 替换为 'e' 可以匹配 "hello" ，所以返回 True</span><br><span class="line">magicDictionary.search("hell"); // 返回 False</span><br><span class="line">magicDictionary.search("leetcoded"); // 返回 False</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= dictionary.length &lt;= 100</code></li><li><code>1 &lt;= dictionary[i].length &lt;= 100</code></li><li><code>dictionary[i]</code> 仅由小写英文字母组成</li><li><code>dictionary</code> 中的所有字符串<strong>互不相同</strong></li><li><code>1 &lt;= searchWord.length &lt;= 100</code></li><li><code>searchWord</code> 仅由小写英文字母组成</li><li><code>buildDict</code> 仅在 <code>search</code> 之前调用一次</li><li>最多调用 <code>100</code> 次 <code>search</code></li></ul><h1 id="题解-1">题解</h1><p>Trie + DFS</p><h2 id="代码实现-1">代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MagicDictionary</span> {</span><br><span class="line"></span><br><span class="line">    TrieNode root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MagicDictionary</span><span class="params">()</span> {</span><br><span class="line">        root = <span class="keyword">new</span> <span class="title class_">TrieNode</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildDict</span><span class="params">(String[] dictionary)</span> {</span><br><span class="line">        <span class="keyword">for</span> (String s : dictionary) {</span><br><span class="line">            insertNode(root, s);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(String searchWord)</span> {</span><br><span class="line">        <span class="keyword">return</span> search(root, searchWord, <span class="number">0</span>, <span class="literal">false</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">TrieNode</span> {</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> TrieNode[] tns;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> isEnd;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">TrieNode</span><span class="params">()</span> {</span><br><span class="line">            <span class="comment">//初始时每个都是26个小写字母</span></span><br><span class="line">            tns = <span class="keyword">new</span> <span class="title class_">TrieNode</span>[<span class="number">26</span>];</span><br><span class="line">            isEnd = <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertNode</span><span class="params">(TrieNode root, String word)</span> {</span><br><span class="line">        <span class="type">TrieNode</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i&lt;word.length();i++){</span><br><span class="line">            <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> word.charAt(i) - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span>(p.tns[u] == <span class="literal">null</span>) p.tns[u] = <span class="keyword">new</span> <span class="title class_">TrieNode</span>();</span><br><span class="line">            p = p.tns[u];</span><br><span class="line">        }</span><br><span class="line">        p.isEnd = <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(TrieNode node, String word, <span class="type">int</span> index, <span class="type">boolean</span> diff)</span> {</span><br><span class="line">        <span class="comment">//字符全部遍历完</span></span><br><span class="line">        <span class="keyword">if</span> (index == word.length()) {</span><br><span class="line">            <span class="keyword">return</span> diff &amp;&amp; node.isEnd;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> word.charAt(index) - <span class="string">'a'</span>;</span><br><span class="line">        <span class="comment">//字典树是否存在该字符</span></span><br><span class="line">        <span class="keyword">if</span> (node.tns[i] != <span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">if</span> (search(node.tns[i], word, index + <span class="number">1</span>, diff)) {</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (!diff) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">26</span>; j++) {</span><br><span class="line">                <span class="keyword">if</span> (j != i &amp;&amp; node.tns[j] != <span class="literal">null</span>) {</span><br><span class="line">                    <span class="keyword">if</span> (search(node.tns[j], word, index + <span class="number">1</span>, <span class="literal">true</span>)) {</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h1 id="参考">参考</h1><p><a href="https://leetcode.cn/problems/implement-trie-prefix-tree/">208.实现 Trie (前缀树) - 力扣（LeetCode）</a></p><p><a href="https://leetcode.cn/problems/implement-magic-dictionary/solution/by-ac_oier-a01l/">676.实现一个魔法字典 题解 - 力扣（LeetCode）</a></p><p><a href="https://leetcode.cn/problems/implement-trie-prefix-tree/solution/gong-shui-san-xie-yi-ti-shuang-jie-er-we-esm9/">【宫水三叶】一题双解:「二维数组」&amp;「TrieNode」 - 实现 Trie (前缀树) -力扣（LeetCode）</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 常用算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> 字典树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性DP-摘樱桃</title>
      <link href="/2022/07/10/%E7%BA%BF%E6%80%A7DP-%E6%91%98%E6%A8%B1%E6%A1%83/"/>
      <url>/2022/07/10/%E7%BA%BF%E6%80%A7DP-%E6%91%98%E6%A8%B1%E6%A1%83/</url>
      
        <content type="html"><![CDATA[<h1 id="摘樱桃">摘樱桃</h1><p><img src="https://s2.loli.net/2022/07/10/nKbHvlRTpc9e31O.png"></p><p>一个N x N的网格<code>(grid)</code>代表了一块樱桃地，每个格子由以下三种数字的一种来表示：</p><ul><li>0 表示这个格子是空的，所以你可以穿过它。</li><li>1 表示这个格子里装着一个樱桃，你可以摘到樱桃然后穿过它。</li><li>-1 表示这个格子里有荆棘，挡着你的路。</li></ul><p>你的任务是在遵守下列规则的情况下，尽可能的摘到最多樱桃：</p><ul><li>从位置 (0, 0) 出发，最后到达 (N-1, N-1)，只能向下或向右走，并且只能穿越有效的格子（即只可以穿过值为0或者1的格子）；</li><li>当到达 (N-1, N-1) 后，你要继续走，直到返回到 (0, 0)，只能向上或向左走，并且只能穿越有效的格子；</li><li>当你经过一个格子且这个格子包含一个樱桃时，你将摘到樱桃并且这个格子会变成空的（值变为0）；</li><li>如果在 (0, 0) 和 (N-1, N-1)之间不存在一条可经过的路径，则没有任何一个樱桃能被摘到。</li></ul><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入: grid =</span><br><span class="line">[[0, 1, -1],</span><br><span class="line"> [1, 0, -1],</span><br><span class="line"> [1, 1,  1]]</span><br><span class="line">输出: 5</span><br><span class="line">解释： </span><br><span class="line">玩家从（0,0）点出发，经过了向下走，向下走，向右走，向右走，到达了点(2, 2)。</span><br><span class="line">在这趟单程中，总共摘到了4颗樱桃，矩阵变成了[[0,1,-1],[0,0,-1],[0,0,0]]。</span><br><span class="line">接着，这名玩家向左走，向上走，向上走，向左走，返回了起始点，又摘到了1颗樱桃。</span><br><span class="line">在旅程中，总共摘到了5颗樱桃，这是可以摘到的最大值了。</span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ul><li><code>grid</code> 是一个 <code>N</code> * <code>N</code>的二维数组，N的取值范围是<code>1 &lt;= N &lt;= 50</code>。</li><li>每一个 <code>grid[i][j]</code> 都是集合<code>{-1, 0, 1}</code>其中的一个数。</li><li>可以保证起点 <code>grid[0][0]</code> 和终点<code>grid[N-1][N-1]</code> 的值都不会是 -1。</li></ul><h1 id="题解">题解</h1><h2 id="思路">思路</h2><p>题目定义是按照 只能右/下 走到右下角，然后按照 只能左/上 走到左上</p><p>等价于 按照 只能右/下 走两次的最大得分</p><p>等价于 两个点同时从左上角开始走，最终走到右下角的最大得分</p><h2 id="状态定义">状态定义</h2><p><code>f[k][i1][i2]</code>为当前走了k步，且第一个点当前在<code>i1</code>行，第二个点在<code>i2</code>行时的最大得分，最终答案为<code>f[2n][n][n]</code></p><p>初始状态<code>f[2][1][1]=g[0][0]</code></p><h2 id="状态转移">状态转移</h2><p>由于两个点时同时走，可计算第一个点所在列<code>j1 = k - i1</code>，第二个点所在列<code>j2 = k - i2</code></p><p>不失一般性考虑<code>f[k][i1][i2]</code>该如何转移，两个点均有可能行走行或列，即有四种前驱状态：<code>f[k-1][i1-1][i2]</code>、<code>f[k-1][i1-1][i2-1]</code>、<code>f[k-1][i1][i2-1]</code>、<code>f[k-1][i1][i2]</code>，在四者中取最大值，如果两个位置不重合，可以同时累加，否则只能累加一次</p><blockquote><p>details:为了防止从值为-1的格子进行转移影响正确性，我们需要将<code>f[k][i1][i2]</code>初始化为-INT_MAX</p></blockquote><h2 id="代码实现">代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>{</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">55</span>, INF = Integer.MIN_VALUE;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[][][] f = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>*N][N][N];</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">cherryPickup</span><span class="params">(<span class="type">int</span>[][] g)</span>{</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> g.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">2</span>*n;k++){</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span><span class="number">0</span>;i1&lt;=n;i1++){</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i2=<span class="number">0</span>;i2&lt;=n;i2++){</span><br><span class="line">                    f[k][i1][i2] = INF;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">       <span class="comment">//初始化</span></span><br><span class="line">        f[<span class="number">2</span>][<span class="number">1</span>][<span class="number">1</span>] = g[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">3</span>;k&lt;=<span class="number">2</span>*n;k++){</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i1=<span class="number">1</span>;i1&lt;=n;i1++){</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i2=<span class="number">1</span>;i2&lt;=n;i2++){</span><br><span class="line">                    <span class="type">int</span> <span class="variable">j1</span> <span class="operator">=</span> k - i1, j2 = k - i2;</span><br><span class="line">                    <span class="comment">//获取纵坐标</span></span><br><span class="line">                    <span class="keyword">if</span>(j1 &lt;= <span class="number">0</span> || j1 &gt; n || j2 &lt;= <span class="number">0</span> || j2 &gt; n) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">A</span> <span class="operator">=</span> g[i1-<span class="number">1</span>][j1-<span class="number">1</span>], B = g[i2-<span class="number">1</span>][j2-<span class="number">1</span>];</span><br><span class="line">                    <span class="comment">//A , B为当前位置</span></span><br><span class="line">                    <span class="keyword">if</span>(A == -<span class="number">1</span> || B == -<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> f[k - <span class="number">1</span>][i1 - <span class="number">1</span>][i2], b = f[k - <span class="number">1</span>][i1 - <span class="number">1</span>][i2 - <span class="number">1</span>], c = f[k - <span class="number">1</span>][i1][i2 - <span class="number">1</span>], d = f[k - <span class="number">1</span>][i1][i2];</span><br><span class="line">                    <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> Math.max(Math.max(a,b),Math.max(c,d));</span><br><span class="line">                    t += A;</span><br><span class="line">                    <span class="comment">//先移动q</span></span><br><span class="line">                    <span class="keyword">if</span>(i1 != i2) t+=B;</span><br><span class="line">                    f[k][i1][i2] = t;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> Math.max(<span class="number">0</span>,f[<span class="number">2</span>*n][n][n]);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 常用算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经典DP-最大斐波那契子列</title>
      <link href="/2022/07/10/%E7%BB%8F%E5%85%B8DP-%E6%9C%80%E5%A4%A7%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%AD%90%E5%88%97/"/>
      <url>/2022/07/10/%E7%BB%8F%E5%85%B8DP-%E6%9C%80%E5%A4%A7%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%AD%90%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="最大斐波那契子列">最大斐波那契子列</h1><p>如果序列 <code>X_1, X_2, ..., X_n</code> 满足下列条件，就说它是<em>斐波那契式</em> 的：</p><ul><li><code>n &gt;= 3</code></li><li>对于所有 <code>i + 2 &lt;= n</code>，都有<code>X_i + X_{i+1} = X_{i+2}</code></li></ul><p>给定一个<strong>严格递增</strong>的正整数数组形成序列 arr ，找到 arr中最长的斐波那契式的子序列的长度。如果一个不存在，返回 0 。</p><p><em>（回想一下，子序列是从原序列 arr 中派生出来的，它从 arr中删掉任意数量的元素（也可以不删），而不改变其余元素的顺序。例如，<code>[3, 5, 8]</code> 是 <code>[3, 4, 5, 6, 7, 8]</code>的一个子序列）</em></p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: arr = [1,2,3,4,5,6,7,8]</span><br><span class="line">输出: 5</span><br><span class="line">解释: 最长的斐波那契式子序列为 [1,2,3,5,8] 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: arr = [1,3,7,11,12,14,18]</span><br><span class="line">输出: 3</span><br><span class="line">解释: 最长的斐波那契式子序列有 [1,11,12]、[3,11,14] 以及 [7,11,18] 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>3 &lt;= arr.length &lt;= 1000</code></li><li><code>1 &lt;= arr[i] &lt; arr[i + 1] &lt;= 10^9</code></li></ul><h1 id="题解">题解</h1><h2 id="思路">思路</h2><p>首先我们不难看出本题应该使用状态规划，状态规划又由<strong>状态定义</strong>和<strong>状态转移方程</strong>决定，因而本题难点在于如何<strong>定义状态</strong></p><h2 id="状态定义">状态定义</h2><p><code>dp[i][j]</code>：表示以<code>A[i]</code>为斐波那契数列最后一位，使用<code>A[j]</code>为倒数第二位时的最长数列长度</p><h2 id="状态转移">状态转移</h2><p>不失一般性考虑<code>dp[i][j]</code>如何计算，根据斐波那契数列定义，计算出<code>A[j]</code>的前一位值为<code>A[i] - A[j]</code>，只需获取<code>A[i] - A[j]</code>的下标<code>t</code>，由于<code>A</code>严格单调递增，使用哈希表对其坐标转存，如果<code>t</code>存在，那么此时至少存在长度为3的子列，可以对<code>dp[i][j]</code>进行更新</p><p>状态转移方程为</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="28.411ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 12557.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(520,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(1023,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1301,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1646,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(1924,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(2202,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(2614,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(3169.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(4225.6,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5103.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(5632.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(6204.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(6593.6,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(7093.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(7538.2,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(8058.2,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(8561.2,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(8839.2,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(9251.2,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(9529.2,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(9807.2,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(10168.2,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(10668.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(11668.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(12168.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p><p>同时需要从小到大枚举<code>i</code>,从大到小枚举<code>j</code>,可以作出如下剪枝</p><ul><li>可行性剪枝：当出现<code>A[i] - A[j] &gt; A[j]</code>说明次数不能存在前继了</li><li>最优性剪枝：假设当前最大长度为<code>ans</code>,只有当<code>j + 2 &gt; ans</code>才需要继续搜</li></ul><h2 id="代码编写">代码编写</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lenLongestFibSubseq</span><span class="params">(<span class="type">int</span>[] A)</span>{</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> A.length, ans = <span class="number">0</span>;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) map.put(A[i],i);</span><br><span class="line">        <span class="comment">//构建索引哈希表</span></span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++){</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i-<span class="number">1</span>;j&gt;=<span class="number">0</span> &amp;&amp; j+<span class="number">2</span> &gt; ans;j--){<span class="comment">//最优性剪枝</span></span><br><span class="line">                <span class="keyword">if</span>(A[i]-A[j] &gt;= A[j]) <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">//可行性剪枝</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">t</span>  <span class="operator">=</span> map.getOrDefault(A[i]-A[j],-<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(t == -<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                dp[i][j] = Math.max(<span class="number">3</span>,dp[j][t] + <span class="number">1</span>);</span><br><span class="line">                <span class="comment">//状态转移方程</span></span><br><span class="line">                ans = Math.max(ans,dp[i][j]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 常用算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIT 6.S081 Lecture 1</title>
      <link href="/2022/07/10/MIT-6-S081%20Lecture%201/"/>
      <url>/2022/07/10/MIT-6-S081%20Lecture%201/</url>
      
        <content type="html"><![CDATA[<h1 id="lecture-1-intoduction-and-examples">Lecture 1 Intoduction andExamples</h1><h1 id="os-purposes">OS PURPOSES</h1><ul><li>ABSTRACT H/W 抽象硬件</li><li>MULTIPLEX 复用/并行</li><li>ISOLATION 隔离性</li><li>SHARING 共享性</li><li>SECURITY 安全性</li><li>PERFROMANCE 性能</li><li>RANGE OF USERS 多种用途</li></ul><h1 id="os-org">OS ORG</h1><p>操作系统结构</p><p><img src="https://s2.loli.net/2022/07/12/KERlh8IMLyNG79z.png"></p><p><strong>用户空间 Userspace</strong></p><p>位于架构最上层，运行各种程序，VI，VV，SHELL</p><p><strong>Kernel</strong></p><p>Kernel是计算机资源的守护者。当你打开计算机时，Kernel总是第一个被启动。Kernel程序只有一个，它维护数据来管理每一个用户空间进程。Kernel同时还维护了大量的数据结构来帮助它管理各种各样的硬件资源，以供用户空间的程序使用</p><ul><li>文件系统</li><li>进程管理系统</li></ul><p><strong>底层架构</strong></p><p>CPU,RAM,Disk,Net</p><p><img src="https://s2.loli.net/2022/07/12/lda8jONk9WmYDJX.png"></p><p>一台计算机通常有许多进程Process，但是只有一个内核Kernel，Kernel为Process提供服务</p><h1 id="system-calls">System calls</h1><ul><li><p><code>fork</code>：形式：<code>int fork()</code>。其作用是让一个进程生成另外一个和这个进程的内存内容相同的子进程。在父进程中，<code>fork</code>的返回值是这个子进程的PID，在子进程中，返回值是0</p></li><li><p><code>exit</code>：形式：<code>int exit(int status)</code>。让调用它的进程停止执行并且将内存等占用的资源全部释放。需要一个整数形式的状态参数，0代表以正常状态退出，1代表以非正常状态退出</p></li><li><p><code>wait</code>：形式：<code>int wait(int *status)</code>。等待子进程退出，返回子进程PID，子进程的退出状态存储到<code>int *status</code>这个地址中。如果调用者没有子进程，<code>wait</code>将返回-1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> pid = fork();</span><br><span class="line"><span class="keyword">if</span> (pid &gt; <span class="number">0</span>) {</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"parent: child=%d\n"</span>, pid);</span><br><span class="line">    pid = wait((<span class="type">int</span> *) <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"child %d is done\n"</span>, pid);</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (pid == <span class="number">0</span>) {</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"child: exiting\n"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"fork error\n"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//前两行输出可能为</span></span><br><span class="line"><span class="comment">//父进程和子进程将同时开始判断PID的值，在父进程中，PID为1234，而在子进程中，PID为0。看哪个进程先判断好PID的值，以上输出顺序才会被决定。</span></span><br><span class="line">parent: child=<span class="number">1234</span></span><br><span class="line">child: exiting</span><br><span class="line">    or</span><br><span class="line">child: exiting</span><br><span class="line">parent: child=<span class="number">1234</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//最后一行输出为</span></span><br><span class="line">parent: child <span class="number">1234</span> is done</span><br><span class="line"><span class="comment">//子进程在判断完pid == 0之后将exit，父进程发现子进程exit之后，wait执行完毕，打印输出</span></span><br><span class="line"><span class="comment">//尽管fork了之后子进程和父进程有相同的内存内容，但是内存地址和寄存器是不一样的，也就是说在一个进程中改变变量并不会影响另一个进程</span></span><br></pre></td></tr></table></figure></li><li><p><code>exec</code>：形式：<code>int exec(char *file, char *argv[])</code>。加载一个文件，获取执行它的参数，执行。如果执行错误返回-1，执行成功则不会返回，而是开始从文件入口位置开始执行命令。文件必须是ELF格式。</p></li></ul><p>首先线编译xv6内核和所有用户进程，运行在QEMU模拟器下</p><p><img src="https://s2.loli.net/2022/07/14/rtdiRbmwqSLZ1n6.png"></p><p>xv6仿照UNIX上Shell的命令行接口，例如我们运行ls</p><p><img src="https://s2.loli.net/2022/07/14/TILepjgE79inBAZ.png"></p><h3 id="fork">fork</h3><p>fork会创建一个新的进程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"kernel/types.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"user/user.h"</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">int</span> pid;</span><br><span class="line">    pir = fork();</span><br><span class="line">    <span class="comment">//调用fork，fork会拷贝当前进程的内存，并创建一个新的进程，这里的进程包含了进程的指令和数据，之后我们拥有了两个完全相同的进程，fork系统调用在这两个进程中都会返回，原始的进程中会返回大于0的整数，这是新进程的ID，新进程中会返回0，我们可以通过fork返回值来区分新旧进程</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"fork() returned %d\n"</span>,pid);</span><br><span class="line">    <span class="keyword">if</span>(pid == <span class="number">0</span>){</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"child\n"</span>;)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span>{</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"parent\n"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="exec-wait">exec wait</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"kernel/types.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"user/user.h"</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">char</span> *argv[] = {<span class="string">"echo"</span>,<span class="string">"this"</span>,<span class="string">"is"</span>,<span class="string">"echo"</span>,<span class="number">0</span>};</span><br><span class="line">    exec(<span class="string">"echo"</span>,argv);</span><br><span class="line">    <span class="comment">//执行exec系统调用，这个系统调用会从指定文件读取并加载指令，替代当前调用进程的指令</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"exec failed!\n"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//只能看到”this is echo 的输出，原本的进程已经不复存在了</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"user/user.h"</span></span></span><br><span class="line"><span class="comment">//forkexec.c: fork then exec</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">int</span> pid, status;</span><br><span class="line">    pid = fork();</span><br><span class="line">    <span class="comment">//调用fork，子进程开始执行，调用exec，子进程用echo代替自己，完成后退出，</span></span><br><span class="line">    <span class="comment">//父进程获取控制，会返回大于0的pid，执行else中的语句</span></span><br><span class="line">    <span class="keyword">if</span>(pid == <span class="number">0</span>){</span><br><span class="line">        <span class="type">char</span> *argv[] = {<span class="string">"echo"</span>,<span class="string">"THIS"</span>,<span class="string">"IS"</span>,<span class="string">"EHCO"</span>,<span class="number">0</span>};</span><br><span class="line">        exec(<span class="string">"echo"</span>,argv);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"exec failed!\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"parent waiting\n"</span>);</span><br><span class="line">        wait(&amp;status);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"the child exited with status %d\n"</span>,status);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);             </span><br><span class="line">}</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/14/kztdwNKRV2lpfMx.png"></p><blockquote><p>这里需要优化，比如可以copy-on-writefork，消除fork的浪费，涉及到虚拟内存的技巧，对内存进行lazy-copy</p></blockquote><h1 id="io-and-file-desciptors">I/O and File desciptors</h1><ul><li><p><em>filedescriptor</em>：文件描述符，用来表示一个被内核管理的、可以被进程读/写的对象的一个整数，表现形式类似于字节流，通过打开文件、目录、设备等方式获得。一个文件被打开得越早，文件描述符就越小。</p><p>每个进程都拥有自己独立的文件描述符列表，其中0是标准输入，1是标准输出，2是标准错误。shell将保证总是有3个文件描述符是可用的</p></li><li><p><code>read</code>和<code>write</code>：形式<code>int write(int fd, char *buf, int n)</code>和<code>int read(int fd, char *bf, int n)</code>。从/向文件描述符<code>fd</code>读/写n字节<code>bf</code>的内容，返回值是成功读取/写入的字节数。每个文件描述符有一个offset，<code>read</code>会从这个offset开始读取内容，读完n个字节之后将这个offset后移n个字节，下一个<code>read</code>将从新的offset开始读取字节。<code>write</code>也有类似的offset</p></li><li><p><code>close</code>。形式是<code>int close(int fd)</code>，将打开的文件<code>fd</code>释放，使该文件描述符可以被后面的<code>open</code>、<code>pipe</code>等其他systemcall使用</p></li><li><p><code>dup</code>。形式是<code>int dup(int fd)</code>，复制一个新的<code>fd</code>指向的I/O对象，返回这个新fd值，两个I/O对象(文件)的offset相同</p></li></ul><h3 id="readwriteexit">read,write,exit</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//copy.c: copy input to output</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"kernel/types.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"user/user.h"</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>){</span><br><span class="line">        <span class="type">int</span> n = read(<span class="number">0</span>,buf,<span class="keyword">sizeof</span>(buf));</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        write(<span class="number">1</span>,buf,n);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>观察read调用</p><ul><li>第一个参数是文件描述符，指向一个之前打开的文件。Shell会确保默认情况下，当一个程序启动时，文件描述符0连接到console的输入，文件描述符1连接到了console的输出。所以我可以通过这个程序看到console打印我的输入。当然，这里的程序会预期文件描述符已经被Shell打开并设置好。这里的0，1文件描述符是非常普遍的Unix风格，许多的Unix系统都会从文件描述符0读取数据，然后向文件描述符1写入数据</li><li>read的第二个参数是指向某段内存的指针，程序可以通过指针对应的地址读取内存中的数据，这里的指针就是代码中的buf参数。在代码第10行，程序在栈里面申请了64字节的内存，并将指针保存在buf中，这样read可以将数据保存在这64字节中</li><li>read的第三个参数是代码想读取的最大长度，sizeof(buf)表示，最多读取64字节的数据，所以这里的read最多只能从连接到文件描述符0的设备，也就是console中，读取64字节的数据</li></ul><h3 id="open">open</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//open.c: create a file, write to it</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"kernel/types.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"user/user.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"kernel/fcntl.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">"output.txt"</span>,O_WRONLY | <span class="number">0</span>_CREATE);</span><br><span class="line">    <span class="comment">//此处执行了open的系统调用，将文件名作为参数传入，第二个参数是一些标志位</span></span><br><span class="line">    write(fd,<span class="string">"ooo\n"</span>,<span class="number">4</span>);</span><br><span class="line">    <span class="comment">//第二个参数是数据的指针，第三个参数是要写入的字节数</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>该程序会创建一个叫做<code>output.txt</code>的文件，并写入一些数据</p><h3 id="io-redirect">I/O Redirect</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//redirect.c: run a command with output redirected</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">int</span> pid;</span><br><span class="line">    pid = fork();</span><br><span class="line">    <span class="comment">//这里先fork，再更改子进程的文件描述符，是Unix中的常见的用来重定向指令的输入输出的方法，这种方法同时又不会影响父进程的输入输出</span></span><br><span class="line">    <span class="keyword">if</span>(pid == <span class="number">0</span>){</span><br><span class="line">        close(<span class="number">1</span>);</span><br><span class="line">        open(<span class="string">"output.txt"</span>,<span class="number">0</span>_WRONLY|<span class="number">0</span>_CREATE);</span><br><span class="line">        </span><br><span class="line">        claer *argv[] = {<span class="string">"echo"</span>,<span class="string">"this"</span>,<span class="string">"is"</span>,<span class="string">"redirected"</span>,<span class="string">"echo"</span>,<span class="number">0</span>};</span><br><span class="line">        exec(<span class="string">"echo"</span>,argv);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"exec failed!\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span>{</span><br><span class="line">        wait((<span class="type">int</span> *) <span class="number">0</span> );</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h1 id="pipes">Pipes</h1><ul><li><em>pipe</em>：管道，暴露给进程的一对文件描述符，一个文件描述符用来读，另一个文件描述符用来写，将数据从管道的一端写入，将使其能够被从管道的另一端读出</li></ul><p><code>pipe</code>是一个systemcall，形式为<code>int pipe(int p[])</code>，<code>p[0]</code>为读取的文件描述符，<code>p[1]</code>为写入的文件描述符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* run the program wc with stdin connected to the read end of pipe, parent process able to communicate with child process */</span></span><br><span class="line"><span class="type">int</span> p[<span class="number">2</span>];</span><br><span class="line"><span class="type">char</span> *argv[<span class="number">2</span>];</span><br><span class="line">  </span><br><span class="line">argv[<span class="number">0</span>] = <span class="string">"wc"</span>;</span><br><span class="line">argv[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">pipe(p); <span class="comment">// read fd put into p[0], write fd put into p[1]</span></span><br><span class="line"><span class="keyword">if</span> (fork() == <span class="number">0</span>) {</span><br><span class="line">    close(<span class="number">0</span>);</span><br><span class="line">    dup(p[<span class="number">0</span>]); <span class="comment">// make the fd 0 refer to the read end of pipe</span></span><br><span class="line">    close(p[<span class="number">0</span>]); <span class="comment">// original read end of pipe is closed</span></span><br><span class="line">    close(p[<span class="number">1</span>]); <span class="comment">// fd p[1] is closed in child process, but not closed in the parent process. 注意这里关闭p[1]非常重要，因为如果不关闭p[1]，管道的读取端会一直等待读取，wc就永远也无法等到EOF</span></span><br><span class="line">    exec(<span class="string">"/bin/wc"</span>, argv); <span class="comment">// by default wc will take fd 0 as the input, which is the read end of pipe in this case</span></span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    close(p[<span class="number">0</span>]); <span class="comment">// close the read end of pipe in parent process will not affect child process</span></span><br><span class="line">    write(p[<span class="number">1</span>], <span class="string">"hello world\n"</span>, <span class="number">12</span>); </span><br><span class="line">    close(p[<span class="number">1</span>]); <span class="comment">// write end of pipe closed, the pipe shuts down</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>xv6中的实现和上述的类似</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> PIPE:</span><br><span class="line">pcmd = (<span class="keyword">struct</span> pipecmd*)cmd;</span><br><span class="line"><span class="keyword">if</span>(pipe(p) &lt; <span class="number">0</span>)</span><br><span class="line">    panic(<span class="string">"pipe"</span>);</span><br><span class="line"><span class="keyword">if</span>(fork1() == <span class="number">0</span>){</span><br><span class="line">    <span class="comment">// in child process</span></span><br><span class="line">    close(<span class="number">1</span>); <span class="comment">// close stdout</span></span><br><span class="line">    dup(p[<span class="number">1</span>]); <span class="comment">// make the fd 1 as the write end of pipe</span></span><br><span class="line">    close(p[<span class="number">0</span>]);</span><br><span class="line">    close(p[<span class="number">1</span>]);</span><br><span class="line">    runcmd(pcmd-&gt;left); <span class="comment">// run command in the left side of pipe |, output redirected to the write end of pipe</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(fork1() == <span class="number">0</span>){</span><br><span class="line">    <span class="comment">// in child process</span></span><br><span class="line">    close(<span class="number">0</span>); <span class="comment">// close stdin</span></span><br><span class="line">    dup(p[<span class="number">0</span>]); <span class="comment">// make the fd 0 as the read end of pipe</span></span><br><span class="line">    close(p[<span class="number">0</span>]);</span><br><span class="line">    close(p[<span class="number">1</span>]);</span><br><span class="line">    runcmd(pcmd-&gt;right); <span class="comment">//  run command in the right side of pipe |, input redirected to the read end of pipe</span></span><br><span class="line">}</span><br><span class="line">close(p[<span class="number">0</span>]);</span><br><span class="line">close(p[<span class="number">1</span>]);</span><br><span class="line">wait(<span class="number">0</span>); <span class="comment">// wait for child process to finish</span></span><br><span class="line">wait(<span class="number">0</span>); <span class="comment">// wait for child process to finish</span></span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h1 id="file-system">File system</h1><ul><li><code>mknod</code>：创建设备文件，一个设备文件有一个major device#和一个minor device#用来唯一确定这个设备。当一个进程打开了这个设备文件时，内核会将<code>read</code>和<code>write</code>的systemcall重新定向到设备上。</li><li>一个文件的名称和文件本身是不一样的，文件本身，也叫<em>inode</em>，可以有多个名字，也叫<em>link</em>，每个link包括了一个文件名和一个对inode的引用。一个inode存储了文件的元数据，包括该文件的类型(file,directory ordevice)、大小、文件在硬盘中的存储位置以及指向这个inode的link的个数</li><li><code>fstat</code>。一个systemcall，形式为<code>int fstat(int fd, struct stat *st)</code>，将inode中的相关信息存储到<code>st</code>中。</li><li><code>link</code>。一个systemcall，将创建一个指向同一个inode的文件名。<code>unlink</code>则是将一个文件名从文件系统中移除，只有当指向这个inode的文件名的数量为0时这个inode以及其存储的文件内容才会被从硬盘上移除</li></ul><h1 id="参考">参考</h1><p><a href="https://mit-public-courses-cn-translatio.gitbook.io/mit6-s081/">MIT6.S081课程翻译文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
          <category> Mit6.S081 </category>
          
          <category> Lecture </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mit6.S081 </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解析class文件</title>
      <link href="/2022/07/07/%E8%A7%A3%E6%9E%90class%E6%96%87%E4%BB%B6/"/>
      <url>/2022/07/07/%E8%A7%A3%E6%9E%90class%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="解析class文件">解析class文件</h1><h2 id="class文件">class文件</h2><p>由前面可知，虚拟机可以实现从文件系统读取和从JAR（或者ZIP）压缩包种读取class文件，除此之外，还可以从网络，从数据库，或者在运行中生成class文件（并非特指.class文件，而是符合Java规范的数据）</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面经</title>
      <link href="/2022/07/04/%E9%9D%A2%E7%BB%8F/"/>
      <url>/2022/07/04/%E9%9D%A2%E7%BB%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="字节测开-一面">字节测开 一面</h1><ol type="1"><li>说说OSI七层模型</li><li>说说应用层有哪些协议</li><li>说说<strong>http状态码</strong></li><li>说说<strong>输入url之后的过程</strong></li><li>数据库了解吗，<strong>索引的用处是什么</strong></li><li>写一道<strong>SQL</strong></li><li>tcp的三次握手，<strong>为什么需要第三次</strong></li><li>一道<a href="">算法题</a></li><li>设计微信动态的测试用例</li><li>视屏黑屏可能的问题</li><li><strong>数组和链表的区别</strong></li></ol>]]></content>
      
      
      <categories>
          
          <category> 实习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜索class文件</title>
      <link href="/2022/07/04/%E6%90%9C%E7%B4%A2class%E6%96%87%E4%BB%B6/"/>
      <url>/2022/07/04/%E6%90%9C%E7%B4%A2class%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="搜索class文件">搜索class文件</h1><p><strong>Java命令启动Java应用程序的流程：</strong></p><ol type="1"><li>启动Java虚拟机</li><li>加载主类</li><li>调用主类的main（）方法</li></ol><p>​ 但是，即使是一个最简单的 <code>helloworld</code>，加载之前需要加载他的超类<code>Java.lang.Object</code>，在调用<code>main()</code>方法之前，虚拟机需要准备好参数数组，所以也需要加载<code>java.lang.Stirng</code> 和<code>java.lang.String[]</code>类，将字符串打印还需要<code>java.lang.System</code>类，等等等等，所以我们需要直到Java虚拟机从哪里寻找这些类。</p><h2 id="类路径">类路径</h2><blockquote><p>不同的虚拟机可以采用不同的类搜索方法,Oracle的Java虚拟机根据 classpath来搜索类</p></blockquote><p>类路径分为</p><ol type="1"><li>启动类路径 bootstrap classpath</li><li>扩展类路径 extension classpath</li><li>用户类路径 user classpath</li></ol><p>值得一提的是，可以给java命令传递<code>-classpath/-cp</code>来指定用户类路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java -cp path\to\classes ...</span><br><span class="line">java -cp path\to\classes;lib\a.jar;lib\b.jar;lib\c.zip...</span><br><span class="line">java -cp classes;lib\*...</span><br></pre></td></tr></table></figure><h2 id="实现类路径">实现类路径</h2><p>我们采用组合模式来实现类路径（composite pattern)</p><h3 id="entry接口">Entry接口</h3><p>四种实现 <code>DirEntry</code> <code>ZipEntry</code><code>CompositeEntry</code> <code>WildcardEntry</code></p><h4 id="direntry">DirEntry</h4><p>表示目录形式的类路径</p><h4 id="zipentry">ZipEntry</h4><p>表示ZIP或JAR文件形式的类路径</p><h4 id="compositeentry">CompositeEntry</h4><p>由更小的Entry组成，表示成[]Entry</p><h4 id="wildcardentry">WildcardEntry</h4><p>实际上也是CompositeEntry，含通配符的类路径</p><h2 id="classpath结构体">classpath结构体</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Classpath <span class="keyword">struct</span>{</span><br><span class="line">bootClasspath Entry</span><br><span class="line">extClasspath  Entry</span><br><span class="line">userClasspath Entry</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">-Xjre选项解析启动类路径和拓展类路径</span><br><span class="line">-classpath选项解析用户类路径</span><br></pre></td></tr></table></figure><p>成功编译之后，执行.exe文件，就可以输出class文件的字节码了！</p><p><img src="https://s2.loli.net/2022/07/07/MlKsnFuymb2Nw4Z.png" alt="输出结果"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令行工具</title>
      <link href="/2022/07/04/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/"/>
      <url>/2022/07/04/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="命令行工具">命令行工具</h1><h2 id="准备工作">准备工作</h2><ol type="1"><li>安装JDK</li><li>安装Golang</li><li>配置Go环境</li></ol><h2 id="java-命令">Java 命令</h2><p>Java 命令有如下四种形式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java [-options] class [args]</span><br><span class="line">java [-options] -jar jarfile [args]</span><br><span class="line">javaw [-options] class [args]</span><br><span class="line">javaw [-options] -jar jarfile [args]</span><br><span class="line">//即   [选项]  [主类名/JAR文件名] [main方法参数]</span><br></pre></td></tr></table></figure><table><thead><tr class="header"><th style="text-align: center;">选项</th><th style="text-align: center;">用途</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">-version</td><td style="text-align: center;">版本信息</td></tr><tr class="even"><td style="text-align: center;">-？/-help</td><td style="text-align: center;">输出帮助信息</td></tr><tr class="odd"><td style="text-align: center;">-cp/-classpath</td><td style="text-align: center;">指定用户类路径</td></tr><tr class="even"><td style="text-align: center;">-Dproperty=value</td><td style="text-align: center;">设置Java系统属性</td></tr><tr class="odd"><td style="text-align: center;">-Xms<size></size></td><td style="text-align: center;">设置初始堆大小</td></tr><tr class="even"><td style="text-align: center;">-Xmx<size></size></td><td style="text-align: center;">设置最大堆大小</td></tr><tr class="odd"><td style="text-align: center;">-Xss<size></size></td><td style="text-align: center;">设置线程栈空间大小</td></tr></tbody></table><h2 id="编写命令行工具">编写命令行工具</h2><p>在 Go/src/jvmgo/ch01 下创建如下两个go文件</p><blockquote><p>cmd.go</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"flag"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span> </span><br><span class="line"><span class="keyword">import</span> <span class="string">"os"</span></span><br><span class="line"><span class="comment">//包名</span></span><br><span class="line"><span class="comment">//os的Args变量用于存放传递给命令行的全部参数,flag包是帮助处理命令行选项的</span></span><br><span class="line"><span class="keyword">type</span> Cmd <span class="keyword">struct</span> {</span><br><span class="line">helpFlag        <span class="type">bool</span> <span class="comment">// -help</span></span><br><span class="line">versionFlag<span class="type">bool</span> <span class="comment">//版本信息</span></span><br><span class="line">cpOption<span class="type">string</span> <span class="comment">//是否 -cp</span></span><br><span class="line">class<span class="type">string</span> <span class="comment">//是否包含类</span></span><br><span class="line">args[]<span class="type">string</span> </span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">parseCmd</span><span class="params">()</span></span> *Cmd{</span><br><span class="line">cmd := &amp;Cmd{}</span><br><span class="line">flag.Usage = printUsage</span><br><span class="line"><span class="comment">//设置flag.Usage变量 蒋printUsage函数赋值给它，调用flag的各种Var()函数来解析各种选项</span></span><br><span class="line"></span><br><span class="line">flag.BoolVar(&amp;cmd.helpFlag,<span class="string">"help"</span>,<span class="literal">false</span>,<span class="string">"print help message"</span>)</span><br><span class="line">flag.BoolVar(&amp;cmd.helpFlag, <span class="string">"?"</span>,<span class="literal">false</span>,<span class="string">"print help message"</span>)</span><br><span class="line">flag.BoolVar(&amp;cmd.versionFlag,<span class="string">"version"</span>,<span class="literal">false</span>,<span class="string">"print version and exit"</span>)</span><br><span class="line">flag.StringVar(&amp;cmd.cpOption, <span class="string">"classpath"</span>, <span class="string">""</span>, <span class="string">"classpath"</span>)</span><br><span class="line">flag.StringVar(&amp;cmd.cpOption, <span class="string">"cp"</span>, <span class="string">""</span>,<span class="string">"classpath"</span>)</span><br><span class="line">flag.Parse()</span><br><span class="line"></span><br><span class="line">args := flag.Args ()</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(args) &gt; <span class="number">0</span>{</span><br><span class="line">cmd.class = args[<span class="number">0</span>]</span><br><span class="line">cmd.args = args[<span class="number">1</span>:]</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> cmd</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printUsage</span><span class="params">()</span></span> {</span><br><span class="line">fmt.Printf(<span class="string">"Usage:%s [-options] class [args...]\n"</span>,os.Args[<span class="number">0</span>])</span><br><span class="line">}</span><br></pre></td></tr></table></figure><blockquote><p>main.go</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">cmd := parseCmd()</span><br><span class="line"><span class="keyword">if</span> cmd.versionFlag {</span><br><span class="line"><span class="comment">//如果输入了版本</span></span><br><span class="line">fmt.Println(<span class="string">"version 0.0.1"</span>)</span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span> cmd.helpFlag || cmd.class == <span class="string">""</span>{</span><br><span class="line"><span class="comment">//解析错误或者输入了 -help</span></span><br><span class="line">printUsage()</span><br><span class="line">}<span class="keyword">else</span> {</span><br><span class="line"><span class="comment">//正常启动</span></span><br><span class="line">startJVM(cmd)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">startJVM</span><span class="params">(cmd *Cmd)</span></span> {</span><br><span class="line">fmt.Printf(<span class="string">"classpath:%s class:%s args:%v\n"</span>,cmd.cpOption,cmd.class,cmd.args)</span><br><span class="line"><span class="comment">//暂时只是打印信息</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="测试命令行工具">测试命令行工具</h2><p>打开powershell</p><p>输入</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> install jvmgo\ch01</span><br></pre></td></tr></table></figure><p>此时，在bin目录下会出现一个ch01.exe</p><p><img src="https://s2.loli.net/2022/07/04/bceINzBjUpg7W2y.png"></p><p>至此，我们完成了一个简易的命令行工具</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法基础</title>
      <link href="/2022/06/28/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/06/28/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="算法基础">算法基础</h1><p>插入排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INSERTION-SORT(A)</span><br><span class="line">for j = 2 to A.length</span><br><span class="line">key = A[j]</span><br><span class="line">//Insert A[j] into the sorted sequence A[1,...j-1]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 黑皮书 </category>
          
          <category> 算法导论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法导论 </tag>
            
            <tag> 算法基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据管理基础复习</title>
      <link href="/2022/06/19/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/"/>
      <url>/2022/06/19/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章">第一章</h1><h2 id="概述">概述</h2><ul><li>数据库定义<ul><li>Database，是长期储存在计算机内、有组织的、可共享的大量数据的集合</li></ul></li><li>数据库基本特征<ul><li>数据按一定的数据模型组织、描述和储存</li><li>可为各种用户共享</li><li>冗余度较小</li><li>数据独立性较高</li><li>易拓展</li></ul></li></ul><p><strong>数据库管理系统</strong></p><p>DataBase Management System， 简称DBMS</p><p><strong>数据库系统</strong></p><p>DataBase System，简称DBS</p><p>构成</p><ul><li>数据库</li><li>DBMS</li><li>应用程序</li><li>DBA，数据库管理员</li></ul><p><img src="https://s2.loli.net/2022/06/19/1LdtXwRUpN6ISJQ.png"></p><p><strong>比较</strong></p><p>采用文件系统和数据库系统实现学籍管理的区别</p><p>文件系统，工作量大，编程复杂，开发速度慢</p><p>数据库系统提供了强大的操作，开发效率大大提高</p><p><strong>与人工管理，文件系统相比，数据库系统的特点</strong></p><ul><li>数据结构化（本质区别)</li><li>数据共享性高，冗余度低且易扩充</li><li>数据独立性高</li></ul><p><strong>实体-联系方法</strong>：E-R图</p><p><strong>数据库模型</strong></p><ul><li>层次，网状，<strong>关系模型</strong>，等</li></ul><h3 id="关系模型的数据结构">关系模型的数据结构</h3><ul><li>关系（relation）：一个关系通常是一张表</li><li>元组（tuple）：表中的一行为一个元组</li><li>属性（attribute）：表中的一列为一个属性</li><li>码（key）：表中的某个属性组，可以唯一确定一个元组</li><li>域（domain）：一组具有相同数据类型的值得集合，属性的取值范围来自某个域<ul><li>人的年龄在1-120，大学生年龄的域（15-45）</li></ul></li><li>分量：元组中的一个属性值</li><li>关系模式：对关系的描述<ul><li>例如，学生（学号，姓名，年龄，性别，系名，年级）</li></ul></li></ul><p>关系模型要求关系必须是规范化的，关系的每一个分量必须是一个不可分的数据项</p><h3 id="关系模型的数据操纵和完整性约束">关系模型的数据操纵和完整性约束</h3><ul><li>数据操纵：查询，插入，删除，更新数据<ul><li>这些操作必须满足完整性约束</li></ul></li><li>完整性约束条件<ul><li>实体完整性</li><li>参照完整性</li><li>用户定义的完整性</li></ul></li></ul><h2 id="数据库系统的结构">数据库系统的结构</h2><p>型：（学号，姓名，性别）</p><p>值：（201251212，小明，男）</p><p>模式：仅涉及型的描述，模式的一个具体值称为模式的一个实例（instance）</p><ul><li>通常采用三级模式结构，并提供两级映像功能</li></ul><h3 id="三层模式结构">三层模式结构</h3><p>外模式、模式、内模式</p><p><img src="https://s2.loli.net/2022/06/19/LXr1Hsmo6V472W5.png"></p><p><strong>外模式</strong></p><p>也称子模式，用户模式</p><ul><li>数据库用户（包括应用程序员和最终用户）使用的局部数据的逻辑结构和特征的描述</li><li>数据库用户的数据视图，是与某一应用有关的数据的逻辑表示</li></ul><p><strong>模式</strong></p><ul><li><p>也称逻辑模式</p><ul><li>数据库中全体数据的逻辑结构和特征的描述</li><li>所有用户的公共数据视图</li></ul></li><li><p>一个数据库只有一个模式</p></li><li><p>模式的地位：是数据库系统模式结构的中间层</p></li></ul><p><strong>内模式</strong></p><p>也称存储模式</p><ul><li>是数据在数据库内部的表示方式<ul><li>记录的存储方式（例如，顺序存储，堆存储，hash存储等）</li><li>索引的组织方式</li><li>数据是否压缩存储</li><li>数据是否加密</li><li>数据存储记录结构的规定</li></ul></li><li>一个数据库只有一个内模式</li></ul><p>二级映像</p><ol type="1"><li>外模式/模式 映像 -&gt; 数据逻辑独立性</li><li>模式/内模式 映像 -&gt; 数据物理独立性</li></ol><h2 id="数据库系统的组成">数据库系统的组成</h2><p><img src="https://s2.loli.net/2022/06/19/vNtLcE65d7I2a1D.png"></p><h2 id="小结">小结</h2><p>本章主要介绍一些概念，包括数据模型，数据库管理系统，数据库系统。</p><p><strong>Q：举出适合用文件系统而不是数据库系统的例子，以及适合数据库系统的例子</strong></p><p><strong>A：</strong></p><p><strong>Q：叙述数据库三层模式结构，说明优点</strong></p><p><strong>A：</strong></p><h1 id="第二章-关系数据库">第二章 关系数据库</h1><h3 id="关系">关系</h3><p>关系模型的数据结构非常简单，只包含单一的数据结构—关系，</p><p><strong>笛卡尔积</strong></p><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="84.236ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 37232.5 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">给</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">定</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">一</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">组</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">域</text></g><g data-mml-node="msub" transform="translate(5000,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mn" transform="translate(861,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(6264.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(6709.2,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mn" transform="translate(861,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(7973.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(8418.4,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(8863.1,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(9307.8,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="msub" transform="translate(9752.4,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mi" transform="translate(861,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(11087.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(11532.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">笛</text></g><g data-mml-node="mi" transform="translate(12532.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">卡</text></g><g data-mml-node="mi" transform="translate(13532.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">尔</text></g><g data-mml-node="mi" transform="translate(14532.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">积</text></g><g data-mml-node="mi" transform="translate(15532.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">为</text></g><g data-mml-node="msub" transform="translate(16532.4,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="TeXAtom" transform="translate(861,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="msub" transform="translate(17796.9,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mn" transform="translate(861,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(19061.5,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(19506.1,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(19950.8,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="msub" transform="translate(20395.5,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mi" transform="translate(861,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(22008.5,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(23064.3,0)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(389,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mn" transform="translate(553,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1345.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1790.2,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mn" transform="translate(553,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2746.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(3191.4,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(3636.1,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(4080.8,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="msub" transform="translate(4525.4,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(553,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(5552.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5941.7,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="msub" transform="translate(6219.7,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(553,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="msub" transform="translate(7066.7,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mi" transform="translate(861,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(8221.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(8666.3,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(9289.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(10344.8,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(10844.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(11289.5,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(11789.5,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(12234.2,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(12678.8,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(13123.5,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mi" transform="translate(13568.2,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></p><p><strong>元组</strong></p><p>笛卡尔积中每一个元素<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="13.443ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5941.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(389,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mn" transform="translate(553,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1345.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1790.2,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mn" transform="translate(553,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2746.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(3191.4,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(3636.1,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(4080.8,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="msub" transform="translate(4525.4,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(553,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(5552.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>称为n元组</p><p><strong>分量</strong></p><p>每一个<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="1.916ex" height="1.927ex" role="img" focusable="false" viewBox="0 -694 847 851.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(553,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span>称为分量</p><p>笛卡尔积可以表示为一张二维表</p><p><strong>关系</strong></p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="16.287ex" height="1.902ex" role="img" focusable="false" viewBox="0 -683 7198.8 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mn" transform="translate(861,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1486.8,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msub" transform="translate(2487,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mn" transform="translate(861,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(3751.6,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mo" transform="translate(4529.6,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(4974.2,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(5418.9,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="msub" transform="translate(5863.6,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mi" transform="translate(861,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span>的子集叫做在域<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="13.773ex" height="1.984ex" role="img" focusable="false" viewBox="0 -683 6087.7 877"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mn" transform="translate(861,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1264.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1709.2,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mn" transform="translate(861,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2973.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(3418.4,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(3863.1,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(4307.8,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="msub" transform="translate(4752.4,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mi" transform="translate(861,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span>上的关系，表示为</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="20.015ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 8846.7 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mi" transform="translate(759,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">（</text></g><g data-mml-node="msub" transform="translate(1759,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mn" transform="translate(861,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(3023.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(3468.2,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mn" transform="translate(861,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(4732.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(5177.4,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(5622.1,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(6066.8,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="msub" transform="translate(6511.4,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mi" transform="translate(861,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mi" transform="translate(7846.7,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">）</text></g></g></g></svg></mjx-container></span>,称为R关系，度为n</p><p><strong>码</strong></p><ul><li>候选码（Candidate key）<ul><li>关系中的一组属性组的值能唯一标识某一个元组，则称该属性组为候选码</li><li>最极端的情况—全码</li></ul></li><li>主码<ul><li>多个候选码中选一个作为主码</li></ul></li><li>主属性<ul><li>候选码的属性称为主属性</li></ul></li><li>外码<ul><li>设F为R的一组属性，但不是R的码，如果F与基本关系S的主码<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.355ex;" xmlns="http://www.w3.org/2000/svg" width="2.859ex" height="1.901ex" role="img" focusable="false" viewBox="0 -683 1263.6 840.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="mi" transform="translate(882,-150) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g></g></svg></mjx-container></span>对应，则称F是R的外码<ul><li>R称为参照关系</li><li>S称为被参照关系/目标关系</li></ul></li></ul></li></ul><p>一般来说，笛卡尔积是没有意义的，只有他的某个真子集才有意义</p><p><img src="https://s2.loli.net/2022/06/19/j5kSOAb3ve7PaQW.png"></p><p>关系的类别：基本关系，查询表，视图表</p><p><strong>基本关系</strong></p><ul><li>列是同质的，分量来自同一个域</li><li>不同的列可出自一个域</li><li>顺序无所谓</li><li>行顺序无所谓</li><li>分量必须取原子值</li></ul><p>关系模型要求关系必须规范化，最基本的一条是，每一个分量必须是一个不可分的数据项</p><p>规范化简称为<strong>范式（NF）</strong></p><h3 id="关系模式">关系模式</h3><p>关系模式是型 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="20.541ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 9079 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mi" transform="translate(759,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">（</text></g><g data-mml-node="mi" transform="translate(1759,0)"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"></path></g><g data-mml-node="mo" transform="translate(2526,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2970.7,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mo" transform="translate(3798.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(4243.3,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mi" transform="translate(5071.3,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mi" transform="translate(5834.3,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mo" transform="translate(6885.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(7330,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mi" transform="translate(8079,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">）</text></g></g></g></svg></mjx-container></span></p><p>关系是值</p><h2 id="关系操作">关系操作</h2><p>查询，插入，删除，修改等</p><p><strong>关系代数</strong></p><h2 id="关系完整性">关系完整性</h2><ul><li><p>实体完整性</p><p>主属性不能为空</p></li><li><p>参照完整形</p><p>若属性组F是关系R的外码，他与基本关系S的主码<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.355ex;" xmlns="http://www.w3.org/2000/svg" width="2.859ex" height="1.901ex" role="img" focusable="false" viewBox="0 -683 1263.6 840.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="mi" transform="translate(882,-150) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g></g></svg></mjx-container></span>相对应，则对于R中每个元组在F上的值必须为：全空/等于S中某个元组的主码</p></li><li><p>用户定义的完整性</p></li></ul><h1 id="第三章-关系数据库标准语言sql">第三章 关系数据库标准语言SQL</h1><p>SQL,Structured Query Language，结构化查询语言</p><p>通用的，功能极强的关系数据库语言</p><ul><li>综合统一</li><li>高度非过程化</li><li>面向集合的操作方式</li><li>以同一种语法结构提供两种使用方法</li><li>语言简洁，易学易用</li></ul><p><img src="https://s2.loli.net/2022/06/19/1fZMrwa9klOJt6g.png"></p><p>核心功能仅九个动词</p><table><thead><tr class="header"><th>SQL</th><th>动词</th></tr></thead><tbody><tr class="odd"><td>数据查询</td><td>SELECT</td></tr><tr class="even"><td>数据定义</td><td>CREATE,DROP,ALTER</td></tr><tr class="odd"><td>数据操纵</td><td>INSERT,UPDATE,DELETE</td></tr><tr class="even"><td>数据控制</td><td>GRANT,REVOKE</td></tr></tbody></table><h2 id="学生数据库">学生数据库</h2><p><strong>Student</strong></p><table><thead><tr class="header"><th>学号Sno</th><th>姓名Sname</th><th>性别Ssex</th><th>年龄Sage</th><th>所在系Sdept</th></tr></thead><tbody><tr class="odd"><td>201215121</td><td>李勇</td><td>男</td><td>20</td><td>CS</td></tr><tr class="even"><td>201215122</td><td>刘晨</td><td>女</td><td>19</td><td>CS</td></tr><tr class="odd"><td>201215123</td><td>王敏</td><td>女</td><td>18</td><td>MA</td></tr><tr class="even"><td>201215125</td><td>张立</td><td>男</td><td>19</td><td>IS</td></tr></tbody></table><p><strong>Course</strong></p><table><thead><tr class="header"><th>课程号Cno</th><th>课程名Cname</th><th>先行课Cpno</th><th>学分Credit</th></tr></thead><tbody><tr class="odd"><td>1</td><td>数据库</td><td>5</td><td>4</td></tr><tr class="even"><td>2</td><td>数学</td><td></td><td>2</td></tr><tr class="odd"><td>3</td><td>信息系统</td><td>1</td><td>4</td></tr><tr class="even"><td>4</td><td>操作系统</td><td>6</td><td>3</td></tr><tr class="odd"><td>5</td><td>数据结构</td><td>7</td><td>4</td></tr><tr class="even"><td>6</td><td>数据处理</td><td></td><td>2</td></tr><tr class="odd"><td>7</td><td>PASCAL语言</td><td>6</td><td>4</td></tr></tbody></table><p><strong>SC</strong></p><table><thead><tr class="header"><th>学号Sno</th><th>课程号Cno</th><th>成绩Grade</th></tr></thead><tbody><tr class="odd"><td>201215121</td><td>1</td><td>92</td></tr><tr class="even"><td>201215121</td><td>2</td><td>85</td></tr><tr class="odd"><td>201215121</td><td>3</td><td>88</td></tr><tr class="even"><td>201215122</td><td>2</td><td>90</td></tr><tr class="odd"><td>201215122</td><td>3</td><td>80</td></tr></tbody></table><h2 id="数据定义">数据定义</h2><ul><li>模式定义</li><li>表定义</li><li>视图和索引定义</li></ul><p><img src="https://s2.loli.net/2022/06/19/JcvLbMCtzSsVpFN.png"></p><p><strong>模式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>为用户WANG定义一个学生课程模式</span><br><span class="line"><span class="keyword">CREATE</span> SCHEMA "S-T" <span class="keyword">AUTHORIZATION</span> WANG</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>为用户ZHANG定义一个TEST模式，并在其中定义一个表TAB1</span><br><span class="line"><span class="keyword">CREATE</span> SCHEMA TEST <span class="keyword">AUTHORIZATION</span> ZHANG</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TAB1(COL1 <span class="type">SMALLINT</span>,</span><br><span class="line">                  COL2 <span class="type">INT</span>,</span><br><span class="line">                  COL3 <span class="type">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">                  COL4 <span class="type">NUMERIC</span>(<span class="number">10</span>,<span class="number">3</span>),</span><br><span class="line">                  COL5 <span class="type">DECIMAL</span>(<span class="number">5</span>,<span class="number">2</span>));</span><br><span class="line">                  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>删除ZHANG模式，同时删除表TAB1</span><br><span class="line"><span class="keyword">DROP</span> SCHEMA ZHANG CASCADE</span><br></pre></td></tr></table></figure><p><strong>表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>创建学生表Student</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Student</span><br><span class="line">(SnCHAR(<span class="number">9</span>) <span class="keyword">PRIMARY</span> KEY, <span class="operator">/</span><span class="operator">/</span>列级完整性约束，Sno是主码</span><br><span class="line"> Sname <span class="type">CHAR</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span>,<span class="operator">/</span><span class="operator">/</span>Sname取唯一值</span><br><span class="line"> Ssex <span class="type">CHAR</span>(<span class="number">2</span>),</span><br><span class="line"> Sage <span class="type">SMALLINT</span>,</span><br><span class="line"> Sdept <span class="type">CHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>建立课程表Course</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> COURSE</span><br><span class="line">(CnCHAR(<span class="number">4</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> Cname <span class="type">CHAR</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>.<span class="operator">/</span><span class="operator">/</span>列级完整性约束条件，不能为空</span><br><span class="line"> CpnCHAR(<span class="number">4</span>),</span><br><span class="line"> Ccredit <span class="type">SMALLINT</span>,</span><br><span class="line"> <span class="keyword">FOREIGN</span> KEY (Cpno) <span class="keyword">REFERENCES</span> Course(Cno) </span><br><span class="line"> <span class="operator">/</span><span class="operator">/</span>表级完整性约束条件，Cpno是外码，被参照表Course，被参照列Cno</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>数据类型</strong></p><p>CHAR,VARCHAR,CLOB（字符串大对象）,BLOB（二进制大对象）,INT,SMALLINT,BIGINT,NUMERIC等等</p><p><strong>修改基本表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Student <span class="keyword">ADD</span> S_entrance <span class="type">DATE</span> <span class="operator">/</span><span class="operator">/</span>新增一行</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Student <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> Sage <span class="type">INT</span> <span class="operator">/</span><span class="operator">/</span>修改年龄的类型</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Course <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span>(Cname)<span class="operator">/</span><span class="operator">/</span>增加约束条件，必须取唯一值</span><br></pre></td></tr></table></figure><p><strong>删除基本表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> Student CASCADE </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>删除表时没有限制，相关依赖对象例如视图，全都删除</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> Student RESTRICT</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>被删除的表不能被其他表的约束引用，如<span class="keyword">CHECK</span>,<span class="keyword">FOREIGN</span> KEY等约束，不能有视图，不能有触发器，不能有存储过程或函数等</span><br></pre></td></tr></table></figure><p><strong>建立索引</strong></p><p>建立索引是加快查询的有效手段，一个表可以建立多种索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX StusnON Student(Sno)<span class="operator">/</span><span class="operator">/</span>升序建立唯一索引</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX SCnON SC(SnASC,CnDESC)<span class="operator">/</span><span class="operator">/</span>学号升序，课程号降序建立索引</span><br></pre></td></tr></table></figure><p><strong>修改索引</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> INDEX SCnRENAME TSCSno;</span><br></pre></td></tr></table></figure><p><strong>删除索引</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX Stusname;</span><br></pre></td></tr></table></figure><p><strong>数据字典</strong></p><ul><li>数据字典是关系数据库管理系统内部的一组系统表，它记录了数据库中所有定义信息：<ul><li>关系模式定义</li><li>视图定义</li><li>索引定义</li><li>完整性约束定义</li><li>各类用户对数据库的操作权限</li><li>统计信息等</li></ul></li><li>关系数据库管理系统在执行SQL的数据定义语句时，实际上就是在更新数据字典表中的相应信息</li></ul><h2 id="数据查询">数据查询</h2><p>WHERE 指定查询条件</p><p>GROUP BY 对查询结果按指定的列的值分组</p><p>HAVING 只有满足条件的组才输出</p><p>ORDER BY ASC|DESC 对查询结果升序/降序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>查询全列部</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> Sname,<span class="number">2014</span><span class="operator">-</span>Sage</span><br><span class="line"><span class="keyword">FROM</span> Student; </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="keyword">SELECT</span>后可以是表达式</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> Sname,<span class="string">'Year of Birth:'</span>,<span class="number">2022</span><span class="operator">-</span>Sage BIRTHDAY,<span class="built_in">LOWER</span>(Sdept) DEPARTMENT</span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>查询出生年份 ，并改变列标题为BIRTHDAY,DEPARMENT</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Sn</span><br><span class="line"><span class="keyword">FROM</span> SC;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>取消重复行</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/20/aZJWpXNDldzVUgk.png"></p><p><strong>字符匹配</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LIKE</span> <span class="string">'&lt;匹配串&gt;'</span> [<span class="keyword">ESCAPE</span> <span class="string">'&lt;换码字符&gt;'</span>]</span><br></pre></td></tr></table></figure><ul><li>a%b表示以a开头，以b结尾的任意长度的字符串</li><li>a_b表示以a开头，以b结尾的长度为3的任意字符串</li></ul><p><strong>涉及空值</strong></p><p>IS NULL | IS NOT NULL</p><p>不能用 "="</p><p><strong>排序</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> GRADE <span class="keyword">DESC</span>；<span class="operator">/</span><span class="operator">/</span>降序</span><br></pre></td></tr></table></figure><h3 id="聚集函数">聚集函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">COUNT <span class="operator">*</span> </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>统计元组个数</span><br><span class="line"><span class="built_in">COUNT</span>([<span class="keyword">DISTINCT</span><span class="operator">|</span><span class="keyword">ALL</span>] <span class="operator">&lt;</span>列名<span class="operator">&gt;</span>)</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>统计一列中值的个数</span><br><span class="line"><span class="built_in">SUM</span>([<span class="keyword">DISTINCT</span><span class="operator">|</span><span class="keyword">ALL</span>] <span class="operator">&lt;</span>列明<span class="operator">&gt;</span>)</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>计算总和</span><br><span class="line">AVG</span><br><span class="line">MAX</span><br><span class="line">MIN</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(GRADE)</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cn<span class="operator">=</span> <span class="string">'1'</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>查询选修<span class="number">1</span>号课程的学生最高分</span><br></pre></td></tr></table></figure><h3 id="分组">分组</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">3</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>查询选修了三门以上课程的同学</span><br><span class="line"></span><br><span class="line"><span class="keyword">HAVING</span> VS <span class="keyword">WHERE</span></span><br><span class="line">作用对象不同</span><br><span class="line"><span class="keyword">WHERE</span> 作用域基表或视图，从中选择元组</span><br><span class="line"><span class="keyword">HAVING</span>作用与组，从中选择组</span><br></pre></td></tr></table></figure><p>！WHERE中不能使用聚集函数作为条件表达式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WHERE</span> <span class="built_in">AVG</span>(GRADE)<span class="operator">&gt;=</span><span class="number">90</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno<span class="operator">/</span><span class="operator">/</span> ERROR<span class="operator">!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(GRADE)<span class="operator">&gt;=</span><span class="number">90</span><span class="operator">/</span><span class="operator">/</span>SUCCESS<span class="operator">!</span></span><br></pre></td></tr></table></figure><p><strong>连接查询</strong></p><ul><li>等值连接/自然连接查询</li><li>自身连接（需要起别名）</li><li>外连接（） 左连/右连</li><li>多表连接</li></ul><p><strong>嵌套查询</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname <span class="operator">/</span><span class="operator">/</span>外层查询</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> SnIN</span><br><span class="line">(<span class="keyword">SELECT</span> Sno</span><br><span class="line">         <span class="keyword">FROM</span> SC</span><br><span class="line">         <span class="keyword">WHERE</span> Cn<span class="operator">=</span> <span class="string">'2'</span>); <span class="operator">/</span><span class="operator">/</span>内层查询</span><br></pre></td></tr></table></figure><p>SQL允许多层嵌套</p><p>子查询不能使用ORDER BY 语句</p><p>有些嵌套可以使用连接运算代替</p><p><strong>相关谓词</strong></p><ul><li>IN 将第一步的查询嵌入到第二步中 （有时可用连接查询代替</li><li>比较运算符 &gt; ,&lt; ,= ,&gt;= ,&lt;= , != ,&lt;&gt;</li><li>ANY(SOME) 或 ALL ，必须同时使用比较运算<ul><li>&lt; ANY</li><li>&lt;=ALL</li></ul></li><li>EXISTS<ul><li>带有EXISTS谓词的子查询不返回任何数据，只产生逻辑真值“true”或逻辑假值“false”</li></ul></li></ul><p>逻辑蕴含的实现</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="15.552ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6874.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(780.8,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(2058.6,0)"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(2796.3,0)"><path data-c="2261" d="M56 444Q56 457 70 464H707Q722 456 722 444Q722 430 706 424H72Q56 429 56 444ZM56 237T56 250T70 270H707Q722 262 722 250T707 230H70Q56 237 56 250ZM56 56Q56 71 72 76H706Q722 70 722 56Q722 44 707 36H70Q56 43 56 56Z"></path></g><g data-mml-node="mi" transform="translate(3852.1,0)"><path data-c="AC" d="M56 323T56 336T70 356H596Q603 353 611 343V102Q598 89 591 89Q587 89 584 90T579 94T575 98T572 102L571 209V316H70Q56 323 56 336Z"></path></g><g data-mml-node="mi" transform="translate(4519.1,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mtext" fill="red" stroke="red" transform="translate(5022.1,0)"><path data-c="5C" d="M56 731Q56 740 62 745T75 750Q85 750 92 740Q96 733 270 255T444 -231Q444 -239 438 -244T424 -250Q414 -250 407 -240Q404 -236 230 242T56 731Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(500,0)"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(1000,0)"></path></g><g data-mml-node="mi" transform="translate(6414.1,0)"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g></svg></mjx-container></span></p><p>全称量词实现</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="22.782ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 10069.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="2200" d="M0 673Q0 684 7 689T20 694Q32 694 38 680T82 567L126 451H430L473 566Q483 593 494 622T512 668T519 685Q524 694 538 694Q556 692 556 674Q556 670 426 329T293 -15Q288 -22 278 -22T263 -15Q260 -11 131 328T0 673ZM414 410Q414 411 278 411T142 410L278 55L414 410Z"></path></g><g data-mml-node="mi" transform="translate(945,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1517,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(1906,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(2934.8,0)"><path data-c="2261" d="M56 444Q56 457 70 464H707Q722 456 722 444Q722 430 706 424H72Q56 429 56 444ZM56 237T56 250T70 270H707Q722 262 722 250T707 230H70Q56 237 56 250ZM56 56Q56 71 72 76H706Q722 70 722 56Q722 44 707 36H70Q56 43 56 56Z"></path></g><g data-mml-node="mo" transform="translate(3990.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mtext" fill="red" stroke="red" transform="translate(4379.6,0)"><path data-c="5C" d="M56 731Q56 740 62 745T75 750Q85 750 92 740Q96 733 270 255T444 -231Q444 -239 438 -244T424 -250Q414 -250 407 -240Q404 -236 230 242T56 731Z"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(500,0)"></path><path data-c="78" d="M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z" transform="translate(944,0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(1472,0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(1750,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(2144,0)"></path></g><g data-mml-node="mi" transform="translate(6912.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(7484.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(7873.6,0)"><path data-c="AC" d="M56 323T56 336T70 356H596Q603 353 611 343V102Q598 89 591 89Q587 89 584 90T579 94T575 98T572 102L571 209V316H70Q56 323 56 336Z"></path></g><g data-mml-node="mi" transform="translate(8540.6,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(9291.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(9680.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p><p><strong>集合</strong></p><ul><li>并操作 UNION</li><li>交操作 INTERSECT</li><li>差操作 EXCEPT</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept <span class="operator">=</span> <span class="string">'CS'</span></span><br><span class="line"><span class="keyword">EXCEPT</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage <span class="operator">&lt;=</span> <span class="number">19</span>;</span><br></pre></td></tr></table></figure><p><strong>插入</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span></span><br><span class="line">INTStudent</span><br><span class="line">(Sno,Sname,Ssex,Sdept,Sage)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">'201250026'</span>,<span class="string">'CHE'</span>,<span class="string">'男'</span>,<span class="string">'IS'</span>,<span class="number">18</span>);</span><br></pre></td></tr></table></figure><p>插入子查询</p><p><strong>更改</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> Student</span><br><span class="line"><span class="keyword">SET</span> Sage <span class="operator">=</span> <span class="number">22</span></span><br><span class="line"><span class="keyword">WHERE</span> Sn<span class="operator">=</span> <span class="string">'201215121'</span>;</span><br></pre></td></tr></table></figure><p>注意完整性</p><p><strong>删除</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sn<span class="operator">=</span> <span class="string">'201214128'</span>;</span><br></pre></td></tr></table></figure><p><strong>空值</strong></p><p>判断一个属性的值是否为空值，用IS NULL或IS NOT NULL来表示</p><p>属性定义（或者域定义）中</p><ul><li><p>有NOT NULL约束条件的不能取空值</p></li><li><p>加了UNIQUE限制的属性不能取空值</p></li><li><p>码属性不能取空值</p></li></ul><p>NULL &lt; 0 结果为UNKNOWN，与FALSE,TRUE构成三值逻辑</p><h2 id="视图">视图</h2><ul><li>虚表，是从一个或几个基本表（或视图）导出的表</li><li>只存放视图的定义，不存放视图对应的数据</li><li>基表中的数据发生变化，从视图中查询出的数据也随之改变</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_Student</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Sage <span class="operator">/</span><span class="operator">/</span>不执行<span class="keyword">SELECT</span>语句，只把视图定义存入数据字典，视察时从基本表将数据查出</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept <span class="operator">=</span> <span class="string">'IS'</span></span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">CHECK</span> OPTION;<span class="operator">/</span><span class="operator">/</span>加上了该句，对该视图操作时RDBMS会自动加上Sdept <span class="operator">=</span> <span class="string">'IS'</span>的条件</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>一个视图是从单个基本表导出的，并且只是去掉了基本表的某些行和某些列，但保留了主码，我们称这类视图为行列子集视图</p></blockquote><p><strong>基于多个基表的视图</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_S1(Sno,Sname,Grade)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Student.Sno,Sname,Grade</span><br><span class="line"><span class="keyword">FROM</span> Student,SC</span><br><span class="line"><span class="keyword">WHERE</span> Sdept <span class="operator">=</span> <span class="string">'IS'</span> <span class="keyword">AND</span></span><br><span class="line">  Student.Sn<span class="operator">=</span> SC.SnAND</span><br><span class="line">  SC.Cn<span class="operator">=</span> <span class="string">'1'</span>;</span><br></pre></td></tr></table></figure><p><strong>基于视图的视图</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_S2(Sno,Sname,Sgrade)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Grade</span><br><span class="line">   <span class="keyword">FROM</span> IS_S1</span><br><span class="line">   <span class="keyword">WHERE</span> GRADE <span class="operator">&gt;=</span> <span class="number">90</span>;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> F_Student(F_Sno,name,sex,age,dept)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Ssex <span class="operator">=</span> <span class="string">'女'</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>缺点：修改Student的结构后，映像关系被破坏，视图不能正常工作</span><br></pre></td></tr></table></figure><p><strong>删除视图</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> BT_S;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> IS_SI<span class="operator">/</span><span class="operator">/</span>拒绝执行！,IS_S1上还导出了IS_S2视图</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> IS_S1 CASCADE<span class="operator">/</span><span class="operator">/</span>级联删除，删除视图，以及它导出的视图</span><br></pre></td></tr></table></figure><p><strong>查询视图</strong></p><p>用户角度：与查询基本表相同</p><p>关系数据库管理系统：视图消解法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,Sage</span><br><span class="line"><span class="keyword">FROM</span> IS_Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage <span class="operator">&lt;</span> <span class="number">20</span>;</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span></span><br><span class="line">SELCT Sno,Saage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept <span class="operator">=</span> <span class="string">'IS'</span> <span class="keyword">AND</span></span><br><span class="line">  Sage <span class="operator">&lt;</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure><p><strong>更新视图</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> S_G</span><br><span class="line"><span class="keyword">SET</span> Gavg <span class="operator">=</span> <span class="number">90</span></span><br><span class="line"><span class="keyword">WHERE</span> Sn<span class="operator">=</span> <span class="string">'201215121'</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>若S_G为不可更新视图(对它的更新无法转化成基本表的更新，如AVG)，则无效</span><br></pre></td></tr></table></figure><h2 id="小结-1">小结</h2><p>SQL分为数据定义，数据查询，数据更新，数据控制四部分</p><p>数据控制中的数据安全性和完整性控制将在5，6章</p><p>嵌入式SQL，过程性SQL与存储过程在8章</p><h1 id="第四章-数据库安全性">第四章 数据库安全性</h1><h2 id="存储控制">存储控制</h2><p><strong>存储控制机制</strong></p><ul><li><p>用户权限定义</p></li><li><p>合法权限检查</p></li><li><p><strong>自动存取控制</strong></p><p>Discretionary Access Control，DAC</p><p>用户对于不同的对象有不同的权限，可以授权</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> SC</span><br><span class="line">TU5</span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;<span class="operator">/</span><span class="operator">/</span>允许转让</span><br><span class="line"></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> SC</span><br><span class="line"><span class="keyword">FROM</span> U5 CASCADE<span class="operator">/</span><span class="operator">/</span>级联收回，这里默认为CASCADE</span><br></pre></td></tr></table></figure><p><strong>创建数据库模式的权限</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="operator">&lt;</span>username<span class="operator">&gt;</span> [<span class="keyword">WITH</span>][DBA<span class="operator">|</span>RESOURCE<span class="operator">|</span><span class="keyword">CONNECT</span>];</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="keyword">CONNECT</span> 不能创建新用户，不能创建模式，不能创建基本表，只能登陆</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>RESOURCE 能创建基本表和视图，不能创建模式和用户</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>DBA 超级用户，可以创建，可以授权</span><br></pre></td></tr></table></figure><p><strong>数据库角色</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> ROLE R1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> Student</span><br><span class="line">TR1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> R1</span><br><span class="line">TWANG,ZHANG,ZHAO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">REVOKE</span> R1</span><br><span class="line"><span class="keyword">FROM</span> WANG;</span><br><span class="line"></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> Student</span><br><span class="line"><span class="keyword">FROM</span> R1;</span><br></pre></td></tr></table></figure><ul><li><strong>强制存储控制</strong></li></ul><p>Mandatory Access Control，MAC</p><p>每一个对象授予一定的密级，每个用户授予许可证</p><p>只有合法许可证才能存取</p><p>敏感度标记：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="16.981ex" height="1.907ex" role="img" focusable="false" viewBox="0 -705 7505.7 843"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(704,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(1626.8,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(2682.6,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(3605.3,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(4661.1,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(5698.9,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(6754.7,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g></g></g></svg></mjx-container></span></p><p>主体的敏感度标记称为许可证级别</p><p>客体的敏感度标记称为密级</p><ul><li>仅当主体许可证级别<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.751ex" role="img" focusable="false" viewBox="0 -636 778 774"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g></g></g></svg></mjx-container></span>客体，可读</li><li>仅当主体许可证级别<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.751ex" role="img" focusable="false" viewBox="0 -636 778 774"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g></g></g></svg></mjx-container></span>客体，可读</li></ul><p><img src="https://s2.loli.net/2022/06/20/t8DIMmTW7sCBp1y.png"></p><ul><li>普通员工可以给老板写建议书、举报信，但不能读老板信箱内容（上写，禁止上读）</li><li>老板可以读取所有文件，绝对不允许把自己客户资源等核心机密写到普通员工都能看到公告板上（下读，禁止下写）</li></ul><h1 id="第五章-数据库完整性">第五章 数据库完整性</h1><p>实体完整性</p><p>参照完整性</p><p>用户定义的完整性</p><p><strong>断言</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> ASSERTION ASSE_SC_DB_NUM</span><br><span class="line"><span class="keyword">CHECK</span> (<span class="number">60</span> <span class="operator">&gt;=</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="comment">/*此断言的谓词涉及聚集操作count的SQL语句*/</span></span><br><span class="line"> <span class="keyword">From</span> Course,SC</span><br><span class="line">    <span class="keyword">Where</span> SC.Cno<span class="operator">=</span>Course.Cnand Course.Cname <span class="operator">=</span><span class="string">'数据库'</span>)</span><br><span class="line">   );</span><br></pre></td></tr></table></figure><h2 id="触发器">触发器</h2><p>触发器是用户定义在关系表上的一类由事件驱动的特殊过程</p><p><strong>定义触发器</strong></p><p>表的拥有者才可以在表上创建触发器</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> SC_T <span class="operator">/</span><span class="operator">/</span>触发器名SC_T</span><br><span class="line">AFTER <span class="keyword">UPDATE</span> <span class="keyword">OF</span> Grade <span class="keyword">ON</span> SC <span class="operator">/</span><span class="operator">/</span>[BEFORE<span class="operator">|</span>AFTER] <span class="operator">&lt;</span>触发事件<span class="operator">&gt;</span> <span class="keyword">ON</span> <span class="operator">&lt;</span>表<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">REFERENCING</span></span><br><span class="line"> <span class="keyword">OLD</span> <span class="type">row</span> <span class="keyword">AS</span> OldTuple <span class="operator">/</span><span class="operator">/</span>变量</span><br><span class="line"> <span class="keyword">NEW</span> <span class="type">row</span> <span class="keyword">AS</span> NewTuple</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> <span class="operator">/</span><span class="operator">/</span> <span class="keyword">FOR</span> <span class="keyword">EACH</span> [<span class="type">ROW</span><span class="operator">|</span>STATEMENT] 行级触发<span class="operator">|</span>语句级触发</span><br><span class="line"><span class="keyword">WHEN</span> (NewTuple.Grade <span class="operator">&gt;=</span> <span class="number">1.1</span> <span class="operator">*</span> OldTuple.Grade) <span class="operator">/</span><span class="operator">/</span>触发条件</span><br><span class="line"> <span class="keyword">INSERT</span> INTSC_U(Sno,Cno,OldGrade,NewGrade)</span><br><span class="line"><span class="keyword">VALUES</span>(OldTuple.Sno,OldTuple.Cno,OldTuple.Grade,NewTuple.Grade);<span class="operator">/</span><span class="operator">/</span>触发动作</span><br></pre></td></tr></table></figure><p><strong>删除触发器</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> <span class="operator">&lt;</span>触发器名<span class="operator">&gt;</span> <span class="keyword">ON</span> <span class="operator">&lt;</span>表<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>慎用触发器，因为每次访问都会影响性能</p><h1 id="第六章-关系数据理论">第六章 关系数据理论</h1><h2 id="关系模式及范式">关系模式及范式</h2><p>关系模式是一个五元组</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="17.776ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 7857 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(759,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1148,0)"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"></path></g><g data-mml-node="mo" transform="translate(1915,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2359.7,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mo" transform="translate(3187.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(3632.3,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mi" transform="translate(4460.3,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mi" transform="translate(5223.3,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mo" transform="translate(6274.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(6719,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mo" transform="translate(7468,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p><p>U：一组属性</p><p>D：属性组U中的属性的域</p><p>DOM：U到D的映射</p><p>F：U上的一组数据依赖</p><p>我们可以把关系模式看作 R&lt;U,F&gt;</p><p><strong>数据依赖</strong></p><ul><li>函数依赖</li><li>多值依赖</li></ul><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="46.4ex" height="1.686ex" role="img" focusable="false" viewBox="0 -705 20508.8 745"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mi" transform="translate(1388,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mo" transform="translate(2414.8,0)"><path data-c="2283" d="M83 520Q83 532 98 540H251Q267 540 297 540T343 541Q427 541 488 525T605 455Q693 374 693 250Q693 165 650 99T545 0T415 -39Q407 -40 251 -40H98Q83 -32 83 -20Q83 -10 96 0H255H308H337Q412 0 439 4T512 28Q533 39 553 54T599 96T639 163T654 250Q654 341 592 411Q557 449 512 472Q468 491 439 495T335 500H306H255L96 501Q83 511 83 520Z"></path></g><g data-mml-node="mn" transform="translate(3470.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(3970.6,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mi" transform="translate(4858.6,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mo" transform="translate(5885.3,0)"><path data-c="2283" d="M83 520Q83 532 98 540H251Q267 540 297 540T343 541Q427 541 488 525T605 455Q693 374 693 250Q693 165 650 99T545 0T415 -39Q407 -40 251 -40H98Q83 -32 83 -20Q83 -10 96 0H255H308H337Q412 0 439 4T512 28Q533 39 553 54T599 96T639 163T654 250Q654 341 592 411Q557 449 512 472Q468 491 439 495T335 500H306H255L96 501Q83 511 83 520Z"></path></g><g data-mml-node="mn" transform="translate(6941.1,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mi" transform="translate(7441.1,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mi" transform="translate(8329.1,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mo" transform="translate(9355.9,0)"><path data-c="2283" d="M83 520Q83 532 98 540H251Q267 540 297 540T343 541Q427 541 488 525T605 455Q693 374 693 250Q693 165 650 99T545 0T415 -39Q407 -40 251 -40H98Q83 -32 83 -20Q83 -10 96 0H255H308H337Q412 0 439 4T512 28Q533 39 553 54T599 96T639 163T654 250Q654 341 592 411Q557 449 512 472Q468 491 439 495T335 500H306H255L96 501Q83 511 83 520Z"></path></g><g data-mml-node="mi" transform="translate(10411.7,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mi" transform="translate(11170.7,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(11930.7,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mi" transform="translate(12818.7,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mo" transform="translate(13845.4,0)"><path data-c="2283" d="M83 520Q83 532 98 540H251Q267 540 297 540T343 541Q427 541 488 525T605 455Q693 374 693 250Q693 165 650 99T545 0T415 -39Q407 -40 251 -40H98Q83 -32 83 -20Q83 -10 96 0H255H308H337Q412 0 439 4T512 28Q533 39 553 54T599 96T639 163T654 250Q654 341 592 411Q557 449 512 472Q468 491 439 495T335 500H306H255L96 501Q83 511 83 520Z"></path></g><g data-mml-node="mn" transform="translate(14901.2,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mi" transform="translate(15401.2,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mi" transform="translate(16289.2,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mo" transform="translate(17316,0)"><path data-c="2283" d="M83 520Q83 532 98 540H251Q267 540 297 540T343 541Q427 541 488 525T605 455Q693 374 693 250Q693 165 650 99T545 0T415 -39Q407 -40 251 -40H98Q83 -32 83 -20Q83 -10 96 0H255H308H337Q412 0 439 4T512 28Q533 39 553 54T599 96T639 163T654 250Q654 341 592 411Q557 449 512 472Q468 491 439 495T335 500H306H255L96 501Q83 511 83 520Z"></path></g><g data-mml-node="mn" transform="translate(18371.8,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g><g data-mml-node="mi" transform="translate(18871.8,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mi" transform="translate(19759.8,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g></g></g></svg></mjx-container></span></p><p>低级范式可以通过模式分解转化为多个高一级范式的集合</p><h3 id="函数依赖">函数依赖</h3><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="21.835ex" height="2.17ex" role="img" focusable="false" viewBox="0 -759 9651 959"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mi" transform="translate(852,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mo" transform="translate(1615,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msup" transform="translate(2059.7,0)"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(936.2,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mi" transform="translate(3240.3,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="msup" transform="translate(4092.3,0)"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(936.2,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mi" transform="translate(5273,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mi" transform="translate(6036,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">记</text></g><g data-mml-node="mi" transform="translate(7036,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">作</text></g><g data-mml-node="mi" transform="translate(8036,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mi" transform="translate(8888,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g></g></g></svg></mjx-container></p><ul><li><p>平凡依赖 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="14.85ex" height="1.984ex" role="img" focusable="false" viewBox="0 -683 6563.8 877"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(1129.8,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(2407.6,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mo" transform="translate(3170.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(3615.2,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mo" transform="translate(4656,0)"><path data-c="2286" d="M84 346Q84 468 166 546T360 635Q361 635 370 635T395 635T430 636T475 636T524 636H679Q694 628 694 616Q694 607 681 597L522 596H470H441Q366 596 338 592T266 568Q244 557 224 542T179 500T139 433T124 346V341Q124 253 185 185Q244 121 328 103Q348 98 366 98T522 96H681Q694 86 694 76Q694 64 679 56H526Q510 56 480 56T434 55Q350 55 289 71T172 141Q84 223 84 346ZM104 -131T104 -118T118 -98H679Q694 -106 694 -118T679 -138H118Q104 -131 104 -118Z"></path></g><g data-mml-node="mi" transform="translate(5711.8,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container></span></p></li><li><p>非平凡依赖 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="8.314ex" height="1.984ex" role="img" focusable="false" viewBox="0 -683 3674.7 877"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mi" transform="translate(852,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mo" transform="translate(1615,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2059.7,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mi" transform="translate(2822.7,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container></p></li><li><p>完全依赖 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="21.835ex" height="2.17ex" role="img" focusable="false" viewBox="0 -759 9651 959"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mi" transform="translate(852,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mo" transform="translate(1615,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msup" transform="translate(2059.7,0)"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(936.2,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mi" transform="translate(3240.3,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="msup" transform="translate(4092.3,0)"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(936.2,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mi" transform="translate(5273,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mi" transform="translate(6036,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">记</text></g><g data-mml-node="mi" transform="translate(7036,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">作</text></g><g data-mml-node="mi" transform="translate(8036,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mi" transform="translate(8888,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g></g></g></svg></mjx-container></p><p>Y对X完全依赖</p></li><li><p>部份依赖 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.486ex;" xmlns="http://www.w3.org/2000/svg" width="29.313ex" height="3.414ex" role="img" focusable="false" viewBox="0 -1294 12956.3 1509"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(1129.8,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(2407.6,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mo" transform="translate(3170.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(3615.2,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="REL" transform="translate(4745,0)"><g data-mml-node="mpadded"><g data-mml-node="mtext"><path data-c="29F8" d="M166 -215T159 -215T147 -212T141 -204T139 -197Q139 -190 144 -183Q157 -157 378 274T602 707Q605 716 618 716Q625 716 630 712T636 703T638 696Q638 691 406 241T170 -212Q166 -215 159 -215Z"></path></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="REL" transform="translate(4745,0)"><g data-mml-node="mover"><g data-mml-node="TeXAtom" data-mjx-texclass="OP"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(235.2,711) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g></g></g></g><g data-mml-node="mi" transform="translate(6022.8,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mstyle" transform="translate(6785.8,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mi" transform="translate(7785.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">记</text></g><g data-mml-node="mi" transform="translate(8785.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">作</text></g><g data-mml-node="mi" transform="translate(9785.8,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="REL" transform="translate(10915.6,0)"><g data-mml-node="mover"><g data-mml-node="TeXAtom" data-mjx-texclass="OP"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(234.5,711) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g></g></g></g><g data-mml-node="mi" transform="translate(12193.3,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g></g></g></svg></mjx-container></span></p></li><li><p>传递函数依赖 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.686ex;" xmlns="http://www.w3.org/2000/svg" width="51.601ex" height="3.839ex" role="img" focusable="false" viewBox="0 -1393.8 22807.5 1696.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(1129.8,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(2407.6,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mo" transform="translate(3170.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(3559.6,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mo" transform="translate(4600.3,0)"><path data-c="2288" d="M146 -283Q146 -282 174 -213T202 -143H115Q102 -127 102 -123T115 -103H220L291 68L278 73Q203 101 153 157T86 288Q83 309 83 344Q83 380 86 399Q107 480 160 539Q222 601 298 621Q328 630 345 631T435 635L526 637L560 715Q587 778 593 789T609 801Q616 801 622 795T629 781Q629 780 625 771T614 742T600 706L571 637Q571 635 626 635H680Q693 620 693 613T689 601L682 597L618 595H553L449 346Q425 288 399 223T359 127T346 95H356Q365 95 381 95T417 94T463 93T515 93H682Q693 82 693 74T680 53H511Q420 55 335 55L329 57L262 -103H680Q682 -105 684 -108T688 -113T691 -118T693 -124Q693 -134 682 -141L464 -143H246L213 -219Q182 -292 178 -299Q172 -303 166 -303T153 -297T146 -283ZM509 590Q509 595 438 595Q354 595 318 586Q246 567 195 516T126 395Q123 378 123 344T126 293Q141 229 184 181T291 110L306 104L406 346L509 590Z"></path></g><g data-mml-node="mi" transform="translate(5656.1,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(6508.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(6897.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(7341.8,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mo" transform="translate(8382.6,0)"><path data-c="219B" d="M54 250Q54 258 66 270H277L488 272L542 350Q596 431 602 435Q604 437 609 437Q617 437 622 432T628 417T582 341L537 272L608 270H751L822 272L808 288Q786 313 761 355T733 414Q733 424 737 426T766 428H793L806 397Q829 354 864 314Q896 284 928 263Q942 257 942 250T928 237Q887 208 864 185Q829 147 806 103L793 74L766 72Q742 72 738 73T733 85Q735 102 756 137T797 198L817 225L822 230H511L457 148Q440 124 420 93Q404 68 400 64T389 60Q381 60 375 66T368 81Q368 88 415 159L462 230H264L66 232Q54 239 54 250Z"></path></g><g data-mml-node="mi" transform="translate(9660.3,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(10512.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(10957,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mo" transform="translate(11997.8,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(13275.6,0)"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mo" transform="translate(13998.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(14443.2,0)"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mo" transform="translate(15444,0)"><path data-c="2288" d="M146 -283Q146 -282 174 -213T202 -143H115Q102 -127 102 -123T115 -103H220L291 68L278 73Q203 101 153 157T86 288Q83 309 83 344Q83 380 86 399Q107 480 160 539Q222 601 298 621Q328 630 345 631T435 635L526 637L560 715Q587 778 593 789T609 801Q616 801 622 795T629 781Q629 780 625 771T614 742T600 706L571 637Q571 635 626 635H680Q693 620 693 613T689 601L682 597L618 595H553L449 346Q425 288 399 223T359 127T346 95H356Q365 95 381 95T417 94T463 93T515 93H682Q693 82 693 74T680 53H511Q420 55 335 55L329 57L262 -103H680Q682 -105 684 -108T688 -113T691 -118T693 -124Q693 -134 682 -141L464 -143H246L213 -219Q182 -292 178 -299Q172 -303 166 -303T153 -297T146 -283ZM509 590Q509 595 438 595Q354 595 318 586Q246 567 195 516T126 395Q123 378 123 344T126 293Q141 229 184 181T291 110L306 104L406 346L509 590Z"></path></g><g data-mml-node="mi" transform="translate(16499.8,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mi" transform="translate(17262.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">记</text></g><g data-mml-node="mi" transform="translate(18262.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">为</text></g><g data-mml-node="mi" transform="translate(19262.8,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="REL" transform="translate(20392.6,0)"><g data-mml-node="mover"><g data-mml-node="TeXAtom" data-mjx-texclass="OP" transform="translate(207.1,0)"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(0,763.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">传</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">递</text></g></g></g></g><g data-mml-node="mi" transform="translate(22084.5,0)"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g></g></g></svg></mjx-container></span></p><p>称Z对X传递函数依赖</p></li></ul><h3 id="nf">1NF</h3><p>关系模式R的所有属性都是不可分的基本数据项</p><h3 id="nf-1">2NF</h3><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="50.042ex" height="3.375ex" role="img" focusable="false" viewBox="0 -1291.8 22118.8 1491.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(1036.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1981.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(2481.6,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mi" transform="translate(3369.6,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mo" transform="translate(4118.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(4563.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">并</text></g><g data-mml-node="mi" transform="translate(5563.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">且</text></g><g data-mml-node="mi" transform="translate(6563.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">每</text></g><g data-mml-node="mi" transform="translate(7563.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">一</text></g><g data-mml-node="mi" transform="translate(8563.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">个</text></g><g data-mml-node="mi" transform="translate(9563.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">非</text></g><g data-mml-node="mi" transform="translate(10563.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">主</text></g><g data-mml-node="mi" transform="translate(11563.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">属</text></g><g data-mml-node="mi" transform="translate(12563.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">性</text></g><g data-mml-node="TeXAtom" data-mjx-texclass="REL" transform="translate(13841,0)"><g data-mml-node="mover"><g data-mml-node="TeXAtom" data-mjx-texclass="OP"><g data-mml-node="mo"><path data-c="2190" d="M944 261T944 250T929 230H165Q167 228 182 216T211 189T244 152T277 96T303 25Q308 7 308 0Q308 -11 288 -11Q281 -11 278 -11T272 -7T267 2T263 21Q245 94 195 151T73 236Q58 242 55 247Q55 254 59 257T73 264Q121 283 158 314T215 375T247 434T264 480L267 497Q269 503 270 505T275 509T288 511Q308 511 308 500Q308 493 303 475Q293 438 278 406T246 352T215 315T185 287T165 270H929Q944 261 944 250Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(235.2,711) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g></g></g></g><g data-mml-node="mi" transform="translate(15118.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">任</text></g><g data-mml-node="mi" transform="translate(16118.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">何</text></g><g data-mml-node="mi" transform="translate(17118.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">一</text></g><g data-mml-node="mi" transform="translate(18118.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">个</text></g><g data-mml-node="mi" transform="translate(19118.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">候</text></g><g data-mml-node="mi" transform="translate(20118.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">选</text></g><g data-mml-node="mi" transform="translate(21118.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">码</text></g></g></g></svg></mjx-container></span></p><p>一个关系不属于2NF，会有以下问题</p><ul><li>数据冗余</li><li>修改复杂，更新异常</li><li>插入异常</li><li>删除异常</li></ul><h3 id="nf-2">3NF</h3><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="95.15ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 42056.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(1036.8,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(2092.6,0)"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"></path></g><g data-mml-node="mo" transform="translate(2859.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(3304.2,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mo" transform="translate(4331,0)"><g data-mml-node="text"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="text" transform="translate(778,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g></g><g data-mml-node="mn" transform="translate(6053.8,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(6553.8,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mi" transform="translate(7441.8,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mo" transform="translate(8190.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="REL" transform="translate(8635.4,0)"><g data-mml-node="mpadded"><g data-mml-node="mtext"><path data-c="29F8" d="M166 -215T159 -215T147 -212T141 -204T139 -197Q139 -190 144 -183Q157 -157 378 274T602 707Q605 716 618 716Q625 716 630 712T636 703T638 696Q638 691 406 241T170 -212Q166 -215 159 -215Z"></path></g></g></g><g data-mml-node="mtext" fill="red" stroke="red" transform="translate(8913.2,0)"><path data-c="5C" d="M56 731Q56 740 62 745T75 750Q85 750 92 740Q96 733 270 255T444 -231Q444 -239 438 -244T424 -250Q414 -250 407 -240Q404 -236 230 242T56 731Z"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(500,0)"></path><path data-c="78" d="M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z" transform="translate(944,0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(1472,0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(1750,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(2144,0)"></path></g><g data-mml-node="mi" transform="translate(11446.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">码</text></g><g data-mml-node="mi" transform="translate(12446.2,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(13298.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(13742.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">属</text></g><g data-mml-node="mi" transform="translate(14742.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">性</text></g><g data-mml-node="mi" transform="translate(15742.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">组</text></g><g data-mml-node="mi" transform="translate(16742.9,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mo" transform="translate(17505.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(17950.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">非</text></g><g data-mml-node="mi" transform="translate(18950.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">主</text></g><g data-mml-node="mi" transform="translate(19950.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">属</text></g><g data-mml-node="mi" transform="translate(20950.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">性</text></g><g data-mml-node="mi" transform="translate(21950.6,0)"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mi" transform="translate(22673.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(23673.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">使</text></g><g data-mml-node="mi" transform="translate(24673.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">得</text></g><g data-mml-node="mi" transform="translate(25673.6,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(26803.3,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(28081.1,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mi" transform="translate(28844.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(29844.1,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mo" transform="translate(30884.9,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(32162.7,0)"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mi" transform="translate(32885.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">成</text></g><g data-mml-node="mi" transform="translate(33885.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">立</text></g><g data-mml-node="mi" transform="translate(34885.7,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(35885.7,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mo" transform="translate(36926.4,0)"><path data-c="219B" d="M54 250Q54 258 66 270H277L488 272L542 350Q596 431 602 435Q604 437 609 437Q617 437 622 432T628 417T582 341L537 272L608 270H751L822 272L808 288Q786 313 761 355T733 414Q733 424 737 426T766 428H793L806 397Q829 354 864 314Q896 284 928 263Q942 257 942 250T928 237Q887 208 864 185Q829 147 806 103L793 74L766 72Q742 72 738 73T733 85Q735 102 756 137T797 198L817 225L822 230H511L457 148Q440 124 420 93Q404 68 400 64T389 60Q381 60 375 66T368 81Q368 88 415 159L462 230H264L66 232Q54 239 54 250Z"></path></g><g data-mml-node="mi" transform="translate(38204.2,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mi" transform="translate(39056.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">不</text></g><g data-mml-node="mi" transform="translate(40056.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">成</text></g><g data-mml-node="mi" transform="translate(41056.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">立</text></g></g></g></svg></mjx-container></span></p><p>即不存在传递依赖</p><p>解决方法：分解</p><h3 id="bcnf">BCNF</h3><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="43.101ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 19050.4 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(1036.8,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(2092.6,0)"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"></path></g><g data-mml-node="mo" transform="translate(2859.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(3304.2,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mo" transform="translate(4331,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mn" transform="translate(5386.8,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(5886.8,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mi" transform="translate(6774.8,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mo" transform="translate(7523.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(7968.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">若</text></g><g data-mml-node="mi" transform="translate(8968.4,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mi" transform="translate(9820.4,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mi" transform="translate(10583.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">且</text></g><g data-mml-node="mi" transform="translate(11583.4,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mi" transform="translate(12346.4,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mi" transform="translate(13198.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(14198.4,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mi" transform="translate(15050.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">必</text></g><g data-mml-node="mi" transform="translate(16050.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">含</text></g><g data-mml-node="mi" transform="translate(17050.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">有</text></g><g data-mml-node="mi" transform="translate(18050.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">码</text></g></g></g></svg></mjx-container></p><p>换言之，如果每一个决定属性集都包含候选码，那么为BCNF</p><p>如果一个关系数据库中的所有关系模式都属于BCNF，那么在函数依赖范畴内，它已实现了模式的彻底分解，达到了最高的规范化程度，消除了插入异常和删除异常</p><h1 id="第七章-数据库设计概述">第七章 数据库设计概述</h1><p><img src="https://s2.loli.net/2022/06/20/JlGIvLhaigS6CmK.png"></p><p><img src="https://s2.loli.net/2022/06/20/aIFKXytQu3bUwTr.png"></p><ul><li>需求分析</li><li>概念结构设计</li><li>逻辑结构设计</li><li>物理结构设计</li><li>数据库实施</li><li>数据库运行和维护</li></ul><p><img src="https://s2.loli.net/2022/06/20/QyJ9r8meVhFKqbl.png"></p><h2 id="需求分析">需求分析</h2><p><img src="https://s2.loli.net/2022/06/20/dDaGrMC82LUXj7O.png"></p><p>这里的数据字典和数据库管理系统中的数据字典有区别</p><p>数据流描述 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="80.821ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 35722.9 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mi" transform="translate(1500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">据</text></g><g data-mml-node="mi" transform="translate(2500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">流</text></g><g data-mml-node="mi" transform="translate(3500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">名</text></g><g data-mml-node="mi" transform="translate(4500,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(5500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">说</text></g><g data-mml-node="mi" transform="translate(6500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">明</text></g><g data-mml-node="mi" transform="translate(7500,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(8500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mi" transform="translate(9500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">据</text></g><g data-mml-node="mi" transform="translate(10500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">流</text></g><g data-mml-node="mi" transform="translate(11500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">来</text></g><g data-mml-node="mi" transform="translate(12500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">源</text></g><g data-mml-node="mi" transform="translate(13500,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(14500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">去</text></g><g data-mml-node="mi" transform="translate(15500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">向</text></g><g data-mml-node="mi" transform="translate(16500,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(17500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">组</text></g><g data-mml-node="mi" transform="translate(18500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">成</text></g><g data-mml-node="mo" transform="translate(19777.8,0)"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(20333.6,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mi" transform="translate(20833.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mi" transform="translate(21833.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">据</text></g><g data-mml-node="mi" transform="translate(22833.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">结</text></g><g data-mml-node="mi" transform="translate(23833.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">构</text></g><g data-mml-node="mo" transform="translate(24833.6,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g><g data-mml-node="mo" transform="translate(25333.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(25778.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">平</text></g><g data-mml-node="mi" transform="translate(26778.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">均</text></g><g data-mml-node="mi" transform="translate(27778.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">流</text></g><g data-mml-node="mi" transform="translate(28778.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">量</text></g><g data-mml-node="mo" transform="translate(29778.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(30222.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">高</text></g><g data-mml-node="mi" transform="translate(31222.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">峰</text></g><g data-mml-node="mi" transform="translate(32222.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">期</text></g><g data-mml-node="mi" transform="translate(33222.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">流</text></g><g data-mml-node="mi" transform="translate(34222.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">量</text></g><g data-mml-node="mo" transform="translate(35222.9,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container></span></p><p>数据存储描述</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="98.169ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 43390.9 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mi" transform="translate(1500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">据</text></g><g data-mml-node="mi" transform="translate(2500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">存</text></g><g data-mml-node="mi" transform="translate(3500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">储</text></g><g data-mml-node="mi" transform="translate(4500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">名</text></g><g data-mml-node="mo" transform="translate(5500,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(5944.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">说</text></g><g data-mml-node="mi" transform="translate(6944.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">明</text></g><g data-mml-node="mo" transform="translate(7944.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(8389.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">编</text></g><g data-mml-node="mi" transform="translate(9389.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">号</text></g><g data-mml-node="mo" transform="translate(10389.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(10834,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">输</text></g><g data-mml-node="mi" transform="translate(11834,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(12834,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mi" transform="translate(13834,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">据</text></g><g data-mml-node="mi" transform="translate(14834,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">流</text></g><g data-mml-node="mo" transform="translate(15834,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(16278.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">输</text></g><g data-mml-node="mi" transform="translate(17278.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">出</text></g><g data-mml-node="mi" transform="translate(18278.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(19278.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mi" transform="translate(20278.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">据</text></g><g data-mml-node="mi" transform="translate(21278.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">流</text></g><g data-mml-node="mo" transform="translate(22278.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(22723.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">组</text></g><g data-mml-node="mi" transform="translate(23723.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">成</text></g><g data-mml-node="mo" transform="translate(25001.1,0)"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(25556.9,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mi" transform="translate(26056.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mi" transform="translate(27056.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">据</text></g><g data-mml-node="mi" transform="translate(28056.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">结</text></g><g data-mml-node="mi" transform="translate(29056.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">构</text></g><g data-mml-node="mo" transform="translate(30056.9,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g><g data-mml-node="mo" transform="translate(30556.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(31001.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mi" transform="translate(32001.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">据</text></g><g data-mml-node="mi" transform="translate(33001.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">量</text></g><g data-mml-node="mo" transform="translate(34001.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(34446.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">存</text></g><g data-mml-node="mi" transform="translate(35446.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">取</text></g><g data-mml-node="mi" transform="translate(36446.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">频</text></g><g data-mml-node="mi" transform="translate(37446.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">度</text></g><g data-mml-node="mo" transform="translate(38446.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(38890.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">存</text></g><g data-mml-node="mi" transform="translate(39890.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">取</text></g><g data-mml-node="mi" transform="translate(40890.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">方</text></g><g data-mml-node="mi" transform="translate(41890.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">式</text></g><g data-mml-node="mo" transform="translate(42890.9,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container></span></p><h2 id="概念模型和er模型">概念模型和ER模型</h2><p><img src="https://s2.loli.net/2022/06/20/zPw8q7u5MvmoQD3.png"></p><p><img src="https://s2.loli.net/2022/06/20/YVSobLadIeWuN24.png"></p><p><img src="https://s2.loli.net/2022/06/20/KB9arR6IQN74WgS.png"></p><p><img src="https://s2.loli.net/2022/06/20/2njsM3JZiBAXD1Y.png"></p><p><strong>ISA联系</strong></p><p><img src="https://s2.loli.net/2022/06/20/L5F8gzl9GdBAtXk.png"></p><p><strong>基数约束</strong></p><ul><li>强制参与约束</li><li>非强制参与约束</li></ul><p><img src="https://s2.loli.net/2022/06/20/ZYzopx4vCsI3wa5.png"></p><h2 id="逻辑结构设计">逻辑结构设计</h2><p><strong>把概念结构设计阶段设计好的基本E-R图转换为与选用数据库管理系统产品所支持的数据模型相符合的逻辑结构</strong></p><p>并不是规范化程度越高的关系就越优</p><h3 id="关系模型的分解">关系模型的分解</h3><ul><li>水平分解</li><li>垂直分解</li></ul><h2 id="物理结构设计">物理结构设计</h2><p>为一个给定的逻辑数据模型选取一个最适合应用要求的物理结构的过程，就是数据库的物理设计</p><p><strong>设计步骤</strong></p><ul><li>确定数据库的物理结构</li><li>对物理结构进行评价</li></ul><p><strong>存取方法选择</strong></p><ul><li>B+书索引存取方法</li><li>Hash索引存取方法</li><li>聚簇存取方法</li></ul><p><strong>聚簇存取方法</strong></p><p>为了提高某个属性（或属性组）的查询速度，把这个或这些属性（称为聚簇码）上具有相同值的元组集中存放在连续的物理块中称为聚簇</p><ul><li>聚簇只能提高某些特定应用的性能</li><li>建立与维护聚簇的开销相当大</li></ul><blockquote><p>SQL语句中包含有与聚簇码有关的ORDER BY, GROUP BY, UNION,DISTINCT等子句或短语时，使用聚簇特别有利，可以省去或减化对结果集的排序操作</p></blockquote><h1 id="第八章-不考">第八章 不考</h1><h1 id="第九章">第九章</h1><h1 id="第十章">第十章</h1><h2 id="事务">事务</h2><p>事务（Transaction）是用户定义的一个数据库操作序列，这些操作不可分割</p><p>事务和程序</p><ul><li>一个事务可以是一条SQL语句，一组SQL，整个程序</li><li>一个程序通常包含多个事务</li></ul><p><strong>事务时恢复和并发控制的基本单位</strong></p><p><strong>事务定义</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> TRANSACTION;</span><br><span class="line"><span class="keyword">COMMIT</span>;<span class="operator">/</span><span class="operator">/</span>提交</span><br><span class="line"><span class="keyword">ROLLBACK</span>;<span class="operator">/</span><span class="operator">/</span>回滚</span><br></pre></td></tr></table></figure><h3 id="acid特性">ACID特性</h3><ul><li>原子性<ul><li>事务是数据库的逻辑工作单位</li></ul></li><li>一致性<ul><li>事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态</li></ul></li><li>隔离性<ul><li>不被干扰</li><li>互不干扰</li></ul></li><li>持续性<ul><li>一个事务一旦提交，它对数据库中数据的改变就应该是永久性的</li><li>接下来的其他操作或故障不应该对其执行结果有任何影响</li></ul></li></ul><p><strong>破坏ACID特性的因素</strong></p><ul><li>多个事务并行运行时，不同事物的操作交叉执行</li><li>事务在运行过程中被强行停止</li></ul><h2 id="故障和数据库恢复">故障和数据库恢复</h2><h3 id="故障的种类">故障的种类</h3><ul><li>事物内部的故障</li><li>系统故障 - 软故障<ul><li>CPU，操作系统故障，断电</li></ul></li><li>介质故障 - 硬故障<ul><li>磁盘损坏</li></ul></li><li>病毒</li></ul><h2 id="恢复">恢复</h2><p>基本原理：冗余</p><p>恢复的实现技术：复杂</p><p><strong>关键问题</strong></p><ul><li>如何建立冗余数据（数据转储，登记日志文件）</li><li>如何利用这些冗余数据实施数据库恢复</li></ul><h2 id="数据转储和日志文件">数据转储和日志文件</h2><p>数据转储是数据库恢复中采用的基本技术，备用的数据称为<strong>后备副本</strong></p><p><img src="https://s2.loli.net/2022/06/20/YZ7L82RaczxiTQ6.png"></p><h3 id="静态转储">静态转储</h3><ul><li>在系统中无运行事务时进行的转储操作</li><li>转储开始时数据库处于一致性状态</li><li>转储期间不允许对数据库的任何存取、修改活动</li><li>得到的一定是一个数据一致性的副本</li></ul><p>缺点：降低了数据库可用性</p><h3 id="动态转储">动态转储</h3><ul><li>转储操作与用户事务并发进行</li><li>转储期间允许对数据库进行存取或修改</li></ul><p>优点：</p><ul><li>不用等待正在运行的事务结束</li><li>不会影响新事物的进行</li></ul><p>缺点：</p><ul><li>不能保证副本中数据有效正确</li></ul><p><strong>解决方法</strong></p><ul><li>建立日志文件</li></ul><p>后备副本+日志文件就能正确回复数据库状态</p><ul><li>海量转储 每次转储全部，恢复方便</li><li>增量转储 转储更新的数据，事务频繁/数据库大时方便</li></ul><h3 id="日志文件">日志文件</h3><p>log file</p><p><strong>格式</strong></p><ul><li>以记录为单位的日志文件</li><li>以数据块为单位的日志文件</li></ul><p><strong>用途</strong></p><ul><li>事务故障恢复</li><li>系统故障恢复</li><li>协助后备副本进行介质故障恢复</li></ul><h4 id="以记录为单位的日志文件">以记录为单位的日志文件</h4><ul><li>各个事务的开始标记(BEGIN TRANSACTION)</li><li>各个事务的结束标记(COMMIT或ROLLBACK)</li><li>各个事务的所有更新操作</li></ul><p>每条日志记录包括</p><ul><li>事务标识（标明是哪个事务）</li><li>操作类型（插入、删除或修改）</li><li>操作对象（记录内部标识）</li><li>更新前数据的旧值（对插入操作而言，此项为空值）</li><li>更新后数据的新值（对删除操作而言, 此项为空值）</li></ul><h4 id="以数据块为单位的日志文件">以数据块为单位的日志文件</h4><p>每条日志记录的内容</p><ul><li>事务标识</li><li>被更新的数据块</li></ul><p><img src="https://s2.loli.net/2022/06/20/15kGdXnZV28fxKe.png"></p><h4 id="登记日志文件">登记日志文件</h4><p>两条原则</p><ul><li>登记的次序严格按并发事务执行的时间次序</li><li>必须先写日志文件，后写数据库</li></ul><h2 id="恢复策略">恢复策略</h2><h3 id="事务故障的恢复">事务故障的恢复</h3><p>由恢复子系统利用日志文件撤销此修改（UNDO）</p><h3 id="恢复步骤">恢复步骤</h3><ol type="1"><li>反向扫描日志文件，查找事务的更新操作</li><li>对该书五的更新操作你操作</li><li>继续反向扫描日志文件</li><li>直到事务开始的标记，恢复完成</li></ol><h3 id="系统故障的恢复">系统故障的恢复</h3><ul><li>Und故障发生时未完成的事务</li><li>Red已完成的事务</li></ul><h3 id="恢复步骤-1">恢复步骤</h3><ol type="1"><li>正向扫描日志，找出故障发生前已经提交的事务，将其事务标识记入REDO队列，同时找出UNDO队列<ol type="1"><li>REDO队列</li><li>UNDO队列</li></ol></li><li>对UNDO队列UNDO处理</li><li>对REDO队列REDO处理</li></ol><h3 id="介质故障的恢复">介质故障的恢复</h3><p>重装数据库</p><p>重做已完成的事务</p><h3 id="恢复步骤-2">恢复步骤</h3><ul><li>装入最新的后备数据库副本(离故障发生时刻最近的转储副本)，使数据库恢复到最近一次转储时的一致性状态</li><li>装入有关日志文件副本，重做已完成的事务</li></ul><h2 id="具有检查点的恢复技术">具有检查点的恢复技术</h2><ul><li>恢复的两个问题<ul><li>搜索整个日志将耗费大量的时间</li><li>重做处理：重新执行，浪费了大量时间</li></ul></li><li>具有检查点（checkpoint）的恢复技术<ul><li>在日志文件中增加检查点记录（checkpoint）</li><li>增加重新开始文件</li><li>恢复子系统在登录日志文件期间动态地维护日志</li></ul></li></ul><h3 id="检查点技术">检查点技术</h3><p>检查点记录的内容</p><ul><li>建立检查点时刻所有正在执行的事务</li><li>这些事务最近的一个日志记录地址</li></ul><p>重新开始文件内容</p><ul><li>记录各个检查点记录在日志文件中的地址</li></ul><p><img src="https://s2.loli.net/2022/06/20/4Fq27UIgNkseAai.png"></p><h3 id="动态维护日志文件的方法">动态维护日志文件的方法</h3><ul><li>周期性地执行如下操作：建立检查点，保存数据库状态</li></ul><p>具体步骤</p><ul><li>将当前日志缓冲区中的所有日志记录写入磁盘的日志文件上</li><li>在日志文件中写入一个检查点记录</li><li>将当前数据缓冲区的所有数据记录写入磁盘的数据库中</li><li>把检查点记录在日志文件中的地址写入一个重新开始文件</li></ul><p>恢复子系统可以定期或不定期地建立检查点,保存数据库状态</p><h3 id="利用检查点的恢复策略">利用检查点的恢复策略</h3><ul><li>当事务T在一个检查点之前提交，T对数据库所做的修改已写入数据库</li><li>写入时间是在这个检查点建立之前或在这个检查点建立之时</li><li>在进行恢复处理时，没有必要对事务T执行重做操作</li></ul><p><img src="https://s2.loli.net/2022/06/20/vQWJHgC8loPnOkh.png"></p><h3 id="恢复步骤-3">恢复步骤</h3><ul><li>从重新开始文件中找到最后一个检查点记录在日志文件中的地址，由该地址在日志文件中找到最后一个检查点记录</li><li>由该检查点记录得到检查点建立时刻所有正在执行的事务清单ACTIVE-LIST<ul><li>UNDO-LIST</li><li>REDO-LIST</li></ul></li><li>从检查点开始正向扫描日志文件，直到日志文件结束<ul><li>如有新开始的事务<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.061ex" height="1.889ex" role="img" focusable="false" viewBox="0 -677 911 834.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(617,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span>，把<em><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.061ex" height="1.889ex" role="img" focusable="false" viewBox="0 -677 911 834.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(617,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span></em>暂时放入UNDO-LIST队列</li><li>如有提交的事务<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.061ex" height="1.889ex" role="img" focusable="false" viewBox="0 -677 911 834.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(617,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span>，把<em><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.061ex" height="1.889ex" role="img" focusable="false" viewBox="0 -677 911 834.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(617,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span></em>从UNDO-LIST队列移到REDO-LIST队列;直到日志</li></ul></li><li>对UNDO-LIST执行UNDO</li><li>对REDO-LIST执行REDO</li></ul><h1 id="第十一章-并发控制">第十一章 并发控制</h1><p>事务可以一个一个地串行执行</p><p>为了充分利用系统资源，应该允许多个事务并行执行地执行</p><p><strong>交叉并发方式</strong></p><p><img src="https://s2.loli.net/2022/06/20/ljgDFWO24QHSsCh.png"></p><p><strong>同时并发方式</strong></p><p>每个处理机处理一个事务</p><p>受限于硬件环境</p><h3 id="并发控制">并发控制</h3><ul><li>事务是并发控制的基本单位</li><li>并发控制机制的任务<ul><li>对并发操作进行正确调度</li><li>保证事务的隔离性</li><li>保证数据库的一致性</li></ul></li></ul><p>并发操作带来的数据不一致性</p><ul><li>丢失修改</li><li>不可重复读<ul><li>不可重复读是指事务T1读取数据后，事务T2执行更新操作，使T1无法再现前一次读取结果</li></ul></li><li>读脏数据<ul><li>T1撤销，T2读到的数据为脏数据</li></ul></li><li>记号<ul><li>R(X)</li><li>W(X)</li></ul></li></ul><h3 id="并发控制的主要技术">并发控制的主要技术</h3><ul><li>封锁</li><li>时间戳</li><li>乐观控制</li><li>多版本并发控制</li></ul><h2 id="封锁">封锁</h2><ul><li>排他锁 X锁 也称写锁 不允许其他食物修改和读取</li><li>共享锁 S锁 也称读锁 其他事务可以读</li></ul><p><strong>相容矩阵</strong></p><p><img src="https://s2.loli.net/2022/06/20/VXKaBpl94ejkYLD.png"></p><h2 id="封锁协议">封锁协议</h2><h3 id="一级封锁协议">一级封锁协议</h3><ul><li>事务T在修改数据R之前必须先对其加X锁，直到事务结束才释放。<ul><li>正常结束（COMMIT）</li><li>非正常结束（ROLLBACK）</li></ul></li></ul><p>但是如果仅仅是读数据，没有加锁，所以不能保证可重复读和不读脏数据</p><h3 id="二级封锁协议">二级封锁协议</h3><ol type="1"><li>一级封锁协议</li><li>事务T读取数据R之前必须加S锁，<strong>读完后</strong>释放</li></ol><p>可以防止丢失修改和读脏数据，不保证可重复读</p><h3 id="三级封锁协议">三级封锁协议</h3><ol type="1"><li>一级封锁协议</li><li>事务T在读取数据R之前必须先对其加S锁，直到<strong>事务结束</strong>才释放</li></ol><p><img src="https://s2.loli.net/2022/06/20/Skt1fsTm8NKpyMG.png"></p><h2 id="活锁">活锁</h2><p>T2有可能永远等待，这就是活锁的情形</p><p>避免活锁：采用先来先服务的策略</p><h2 id="死锁">死锁</h2><p>T1在等待T2 ，而T2又在等待T1 ，T1和T2两个事务永远不能结束，形成死锁</p><p><strong>死锁的预防</strong></p><ul><li><p>一次锁法</p><p>要求每个事务必须一次将所有要使用的数据全部加锁，否则就不能继续执行</p></li><li><p>顺序锁法</p><p>预先对数据对象规定一个封锁顺序，所有事务都按这个顺序实行封锁</p></li></ul><p><strong>死锁的诊断</strong></p><ul><li>超时法（规定时限）</li><li>等待图法（出现回路-&gt;出现死锁）</li></ul><p><strong>死锁的解除</strong></p><ul><li>选择一个处理死锁代价最小的事务，将其撤消</li><li>释放此事务持有的所有的锁，使其它事务能继续运行下去</li></ul><h2 id="封锁粒度">封锁粒度</h2><p>封锁的对象：逻辑单元，物理单元</p><ul><li>逻辑单元:属性值、属性值的集合、元组、关系、索引项、整个索引、整个数据库等</li><li>物理单元：页（数据页或索引页）、物理记录等</li></ul><h3 id="选择封锁粒度的原则">选择封锁粒度的原则</h3><ul><li>多粒度封锁</li><li>选择封锁粒度</li></ul><p><strong>多粒度封锁协议</strong></p><p>显示封锁和隐式封锁</p><blockquote><p>例如，事务T要对关系R1加X锁</p><p>系统必须搜索其上级结点数据库、关系R1</p><p>还要搜索R1的下级结点，即R1中的每一个元组</p><p>如果其中某一个数据对象已经加了不相容锁，则T必须等待</p></blockquote><ul><li>所有上级结点<ul><li>检查本事务的显式封锁是否与该数据对象上的隐式封锁冲突：(由上级结点已加的封锁造成的）</li></ul></li><li>所有下级结点<ul><li>看上面的显式封锁是否与本事务的隐式封锁（将加到下级结点的封锁）冲突</li></ul></li></ul><h2 id="意向锁">意向锁</h2><p>提高对某个数据对象加锁时系统的检查效率</p><ul><li>如果对一个结点加意向锁，则说明该结点的下层结点正在被加锁</li><li>对任一结点加基本锁，必须先对它的上层结点加意向锁</li><li>例如，对任一元组加锁时，必须先对它所在的数据库和关系加意向锁</li></ul><p>意向共享锁 IS锁</p><p>意向排他锁 IX锁</p><p>共享意向排他锁</p><ul><li>如果对一个数据对象加SIX锁，表示对它加S锁，再加IX锁，即SIX = S +IX</li><li>例：对某个表加SIX锁，则表示该事务要读整个表（所以要对该表加S锁），同时会更新个别元组（所以要对该表加IX锁）</li></ul><h2 id="锁的强度">锁的强度</h2><p>锁的强度是指它对其他锁的排斥程度</p><p>强锁代替弱锁：安全</p><p><img src="https://s2.loli.net/2022/06/20/gF4MtGj9epca1DS.png"></p><h3 id="具有意向锁的多粒度封锁方法"><strong>具有意向锁的多粒度封锁方法</strong></h3><ul><li>申请封锁时应该按自上而下的次序进行</li><li>释放封锁时则应该按自下而上的次序进行</li></ul><p><strong>作用</strong></p><ul><li>提高了系统的并发度</li><li>减少了加锁和解锁的开销</li><li>在实际的数据库管理系统产品中得到广泛应用</li></ul><h1 id="nosql">NoSQL</h1><h2 id="阻抗失谐">阻抗失谐</h2><ul><li><p>关系模型把数据组织成关系和元组而内存中数据结构无此限制，他们可以使用的数据组织形式更丰富</p></li><li><p>如果在内存中使用了较为丰富的数据结构，那么要把它保存到磁盘之前，必须先将其转换成“关系形式。于是就发生了“阻抗失谐”：需要在两种不同的表示形式之间转译</p></li></ul><h2 id="集群问题">集群问题</h2><p><strong>分片和复制</strong></p><ul><li>在负载分散的同时，应用程序必须控制所有分片，需要知道数据库中的每份小数据的存储情况</li><li>如何确保跨分片的查询、参照完整性(referential integrity)、事务、一致性控制(consistency control)等操作</li></ul><h2 id="nosql特性">NoSQL特性</h2><ul><li>不适用关系模型</li><li>在集群中运行良好</li><li>开源</li><li>无模式</li><li>适用于21世纪互联网公司</li></ul><h2 id="聚合">聚合</h2><ul><li>把一组相互关联的对象视为一个整体单元来操作，而这个单元就叫聚合（aggregate）</li><li>面向聚合操作数据时所用的单元，其结构比元组集合复杂得多</li></ul><p><img src="https://s2.loli.net/2022/06/20/SI8FriKMuJw3RE9.png" alt="两个聚合"></p><h3 id="聚合之间的关系">聚合之间的关系</h3><ul><li>例如：把订单和客户放在两个聚合中，但是想在它们之间设定某种关系，以便能根据订单查出客户数据<ul><li>要提供这种关联，最简单的办法就是把客户ID嵌入订单的聚合数据中。在应用层级提供关联。</li><li>在数据库层级提供聚合之间关系的表达机制</li></ul></li></ul><h3 id="聚合集群和事务处理">聚合、集群和事务处理</h3><ul><li>在集群上运行时，需要把采集数据时所需的节点数降至最小</li><li>通常情况下，面向聚合的数据库不支持跨越多个聚合的ACID事务。它每次只能在一个聚合结构上执行原子操作</li></ul><h2 id="主要的nosql数据模型">主要的NoSQL数据模型</h2><ul><li>键值数据模型</li><li>文档数据模型</li><li>图数据库</li><li>列族数据库</li></ul><h2 id="section"></h2><h4 id="为什么需要nosql">为什么需要nosql</h4><ul><li>应用所需要的数据结构和关系型数据库里能表达的数据结构不一致，需要繁琐的业务逻辑去转化</li><li>自己来处理集群问题，自己调整完整性、一致性和效益之间的权衡决策</li></ul><h4 id="聚合-1">聚合</h4><ul><li><p>把一组相互关联的对象视为一个整体单元来操作，这个单元就是聚合</p></li><li><p>关系型数据库没有“聚合”，称之为“聚合无知”</p></li><li><p>“聚合无知”可以很容易以不同方式来查看数据</p></li></ul><h4 id="和关系型数据库的区别">和关系型数据库的区别</h4><ul><li><p>无模式</p></li><li><p>是和关系型数据库的最大差异</p></li><li><p>可以很方便存储格式不一致的数据</p></li><li><p>但取数据时很难以某种统一的格式取出多个数据</p></li><li><p>nosql通常没有对事务的支持</p></li></ul><h4 id="分布式模型">分布式模型</h4><ul><li><p>分片和对等</p></li><li><p>主从复制和对等复制</p></li><li><p>“一致性”和“持久性”约束</p></li><li><p>CAP定理</p></li><li><p>一致性</p></li><li><p>可用性</p></li><li><p>分区耐受性</p></li></ul><p>因为必须要保证“分区耐受性”，所以必须要再“一致性”和“可用性”做权衡</p><p>因为要完全做到“持久性”代价较大，所以也需要适当牺牲“持久性”来提高“可用性”</p><h4 id="仲裁">仲裁</h4><p>为了确保“强一致性”</p><ul><li><p>N：复制因子，有多少份数据</p></li><li><p>对等式分布模型</p></li><li><p>写入：W&gt;N/2</p></li><li><p>写入的节点必须要过半数</p></li><li><p>读取：W+R&gt;N</p></li><li><p>必然有一个节点又被写又被读</p></li><li><p>常见情况</p></li><li><p>W=R=2,N=3</p></li><li><p>主从式分布模型</p></li><li><p>写入和读取都是只需要从主节点里获取</p></li></ul><h4 id="四种常见的nosql">四种常见的nosql</h4><ul><li>每一个数据库基本存放的想法</li><li>适合做什么</li><li>不适合做什么</li><li>不要求具体细节</li></ul><h5 id="键值数据库">键值数据库</h5><p><strong>特点</strong></p><ul><li>要存放的数据都是独立的，一条条的</li></ul><p><strong>存放想法</strong></p><ul><li><p>一张简单的哈希表，通过键来获取值</p></li><li><p>值可以是不同的数据类型，也可以是些通用的数据结构</p></li><li><p>存放在一个（无嵌套）的存储区中</p></li><li><p>同一存储区可能造成关键字冲突</p></li><li><p>可以使用领域存储区来存放跨越多个存储区的数据</p></li></ul><p><strong>适合场景</strong></p><ul><li><p>存放session</p></li><li><p>存放用户配置信息</p></li><li><p>购物车数据</p></li></ul><p><strong>不适用场合</strong></p><ul><li><p>数据间有联系（也就是说每一条数据不满足原子性）</p></li><li><p>含有多项操作的事务</p></li><li><p>模糊查询（不记得键的名字了）</p></li><li><p>操作关键字的集合（操作多个关键字）</p></li></ul><h5 id="文档数据库">文档数据库</h5><p><strong>特点</strong></p><p>存放的一些很相似，但又不完全相同的数据（文档）</p><p>文档可以嵌套（树形结构）</p><p><strong>存放想法</strong></p><ul><li><p>“文档”是文档数据库中的主要概念</p></li><li><p>格式可以是xml，json等</p></li><li><p>文档具备自述性，呈现出分层的树状结构</p></li><li><p>文档彼此相似，又不完全相同</p></li><li><p>放在同一“集合”里的各文档的“数据格式”不同</p></li><li><p>文档可以嵌套基本数据类型，也可以嵌入“子文档”</p></li><li><p>无空属性</p></li></ul><p><strong>适合场景</strong></p><ul><li>事件记录</li><li>网站分析</li><li>内容管理系统及博客平台</li><li>电商程序</li></ul><p><strong>不适用场合</strong></p><ul><li>包含多项操作的复杂事务</li><li>要查询持续变化的聚合结构（查询语句也需要对应改变）</li></ul><h5 id="列族数据库">列族数据库</h5><p><strong>特点</strong></p><ul><li>和关系型数据库很像</li><li>查询变更成本高，数据结构变更成本低</li></ul><p><strong>存放想法</strong></p><ul><li>基本存储单元的“列”</li><li>每个键值对都占据一列，且都带有时间戳</li><li>可以只给某一行加上某个列，各行不一定要具备完全相同的列</li><li>超列族</li><li>某列中包含一个由小列组成的映射表</li><li>键空间</li><li>和关系型数据库的“数据库”类似</li><li>必须先创建键空间，才能增加列族</li></ul><p><strong>适合场景</strong></p><ul><li>事件记录</li><li>内容管理系统和博客平台</li><li>计数器</li><li>限期</li></ul><p><strong>不适用场合</strong></p><ul><li>需要事务的操作</li><li>需要使用到分组操作函数（sum、avg等）操作</li><li>无法确定查询模式的变化情况（需要更改列族的设计）</li><li>和关系型数据库相反（数据模式修改成本高，但查询模式修改成本低）</li></ul><h5 id="图数据库">图数据库</h5><p><strong>特点</strong></p><p>图</p><ul><li>新增关系比较容易，但要改变节点和关系就很困难</li><li>可以很好的支持遍历、查询路径等多种图的操作和算法</li></ul><p><strong>存放想法</strong></p><ul><li>存放实体和实体之间的关系</li><li>具有图的数据结构</li><li>节点</li><li>边</li><li>具有属性</li><li>有方向性</li><li>大多数值都源自于关系，关系可以用于图的遍历</li></ul><p><strong>适合场景</strong></p><ul><li>富含连接关系的领域</li><li>互联数据</li><li>交通路线等基于位置的服务</li><li>推荐引擎</li></ul><p><strong>不适用场合</strong></p><ul><li>需要更新某个实体</li><li>数据量太大</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> 数据管理基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据管理基础 </tag>
            
            <tag> MySQL </tag>
            
            <tag> NoSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式入门</title>
      <link href="/2022/06/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%85%A5%E9%97%A8/"/>
      <url>/2022/06/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="软件设计模式">软件设计模式</h1><h2 id="概述">概述</h2><p>“设计模式”这个术语最初并不是出现在软件设计中，而是被用于建筑领域的设计中。</p><p>1977年，美国著名建筑大师、加利福尼亚大学伯克利分校环境结构中心主任克里斯托夫·亚历山大（ChristopherAlexander）在他的著作《建筑模式语言：城镇、建筑、构造（A PatternLanguage: Towns BuildingConstruction）中描述了一些常见的建筑设计问题，并提出了 253种关于对城镇、邻里、住宅、花园和房间等进行设计的基本模式</p><h1 id="umlunified-modeling-language-统一建模语言">UML（Unified ModelingLanguage 统一建模语言）</h1><h2 id="类图-class-diagrams">类图 Class Diagrams</h2><ol type="1"><li><p>类</p><ol type="1"><li><p>类名</p></li><li><p>属性</p></li><li><p>操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[可见性]名称(参数列表):[返回类型]</span><br><span class="line">+display():void</span><br></pre></td></tr></table></figure></li></ol><p>类图中，需注意以下几点：</p><ul><li>抽象类或抽象方法用斜体表示</li><li>如果是接口，则在类名上方加 &lt;<interface>&gt;</interface></li><li>字段和方法返回值的数据类型非必需</li><li>静态类或静态方法加下划线</li></ul></li><li><p>接口</p><p>接口（Interface）是一种特殊的类，它具有类的结构但不可被实例化，只可以被子类实现。它包含抽象操作，但不包含属性。它描述了类或组件对外可见的动作。在UML 中，接口使用一个带有名称的小圆圈来进行表示</p></li><li><p>类图</p><p><img src="https://s2.loli.net/2022/06/18/6AhYQmzb5tOf3DJ.gif"></p></li></ol><h3 id="类之间的关系">类之间的关系</h3><ol type="1"><li><p>依赖关系（Dependency）</p><p><strong>依赖（Dependency）关系</strong>是一种使用（USE）关系，它是对象之间耦合度最弱的一种关联方式，是临时性的关联。在代码中，某个类的方法通过局部变量、方法的参数或者对静态方法的调用来访问另一个类（被依赖类）中的某些方法来完成一些职责。</p><p>在 UML类图中，依赖关系使用带箭头的虚线来表示，箭头从使用类指向被依赖的类</p></li><li><p>关联关系（Association）</p><p><strong>关联（Association）关系</strong>是对象之间的一种引用关系，用于表示一类对象与另一类对象之间的联系，如老师和学生、师傅和徒弟、丈夫和妻子等。关联关系是类与类之间最常用的一种关系，分为一般关联关系、聚合关系和组合关系。我们先介绍一般关联。</p><p>关联可以是双向的，也可以是单向的。在 UML类图中，双向的关联可以用带两个箭头或者没有箭头的实线来表示，单向的关联用带一个箭头的实线来表示，箭头从使用类指向被关联的类。也可以在关联线的两端标注角色名，代表两种不同的角色</p><p><img src="https://s2.loli.net/2022/06/18/BjEOn2dX7UlxLQf.gif"></p></li><li><p>聚合关系（Aggregation）</p><p><strong>聚合（Aggregation）</strong>关系是关联关系的一种，是强关联关系，是整体和部分之间的关系，<strong>是has-a 的关系。</strong></p><p>聚合关系也是通过成员对象来实现的，其中成员对象是整体对象的一部分，但是成员对象可以脱离整体对象而独立存在。例如，学校与老师的关系，学校包含老师，但如果学校停办了，老师依然存在。</p><p>在 UML类图中，聚合关系可以用带空心菱形的实线来表示，菱形指向整体。如下是大学和教师的关系图。</p><p><img src="https://s2.loli.net/2022/06/18/bzcSdJ1uhRmUsnZ.gif"></p></li><li><p>组合关系（Composition）</p><p>组合关系是一种更强的聚合关系，是contains-a的关系</p><p>在组合关系中，整体对象控制部分对象的生命周期，一旦整体不存在，部分也不存在</p><p>在UML类图中，组合关系用实心菱形表示，指向整体</p></li><li><p>泛化关系（Generalization）</p><p><strong>泛化（Generalization）</strong>关系是对象之间耦合度最大的一种关系，表示一般与特殊的关系，是父类与子类之间的关系，<strong>是一种继承关系，是is-a 的关系</strong>。</p><p>在 UML类图中，泛化关系用带空心三角箭头的实线来表示，箭头从子类指向父类。在代码实现时，使用面向对象的继承机制来实现泛化关系。例如，Student类和 Teacher 类都是 Person 类的子类，其类图如下所示。</p><p><img src="https://s2.loli.net/2022/06/18/f1Uc9VX3SklBZ4p.gif" alt="泛化关系的实例"></p></li><li><p>实现关系（Realization）</p><p><strong>实现（Realization）关系</strong>是接口与实现类之间的关系。在这种关系中，类实现了接口，类中的操作实现了接口中所声明的所有的抽象操作。</p><p>在 UML类图中，实现关系使用带空心三角箭头的虚线来表示，箭头从实现类指向接口。例如，汽车和船实现了交通工具，其类图如下所示。</p><p><img src="https://s2.loli.net/2022/06/18/JIdfmpqbMi8Vns9.gif" alt="实现关系的实例"></p></li></ol><p><img src="https://s2.loli.net/2022/06/18/xRcAMg6BpUvWT2P.jpg" alt="动物衍生关系描述的类图"></p><h2 id="用例图-usecase-diagrams">用例图 Usecase Diagrams</h2><h2 id="包图-package-diagrams">包图 Package Diagrams</h2><h2 id="顺序图-sequence-diagrams">顺序图 Sequence Diagrams</h2><h1 id="开闭原则open-closed-principle-ocp">开闭原则（Open ClosedPrinciple, OCP)</h1><p>开闭原则的含义是：当应用的需求改变时，在不修改软件实体的源代码或者二进制代码的前提下，可以扩展模块的功能，使其满足新的需求。</p><h2 id="作用">作用</h2><ol type="1"><li>软件测试时只要对拓展的代码进行测试</li><li>提高代码的可用性</li><li>提高软件的可维护性</li></ol><h2 id="实现方法">实现方法</h2><p>”抽象约束，封装变化“</p><p>即通过接口或者抽象类为软件实体定义一个相对稳定的抽象层，而将相同的可变因素封装在相同的具体实现类中</p><h1 id="里氏替换原则liskov-subtitution-principle-lsp">里氏替换原则（LiskovSubtitution Principle， LSP）</h1><p>继承必须确保超类所拥有的性质在子类中仍然成立（Inheritance shouldensure that any property proved about supertype objects also holds forsubtype objects）</p><h2 id="作用-1">作用</h2><ol type="1"><li>是实现开闭原则的重要方式之一</li><li>克服了继承中重写父类造成的可复用性变差的缺点</li><li>是动作正确性的保证，类的拓展不会引入新的错误</li><li>加强程序的健壮性，同时可以做到非常好的兼容性，提高维护性，可拓展性，降低风险</li></ol><h2 id="实现方法-1">实现方法</h2><p>里氏替换原则通俗来讲就是：子类可以扩展父类的功能，但不能改变父类原有的功能。也就是说：子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法</p><ul><li>子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法</li><li>子类中可以增加自己特有的方法</li><li>当子类的方法重载父类的方法时，方法的前置条件（即方法的输入参数）要比父类的方法更宽松</li><li>当子类的方法实现父类的方法时（重写/重载或实现抽象方法），方法的后置条件（即方法的的输出/返回值）要比父类的方法更严格或相等</li></ul><h1 id="依赖倒置原则dependence-inversion-principle-dip">依赖倒置原则（DependenceInversion Principle， DIP）</h1><p>依赖倒置原则的原始定义为：</p><ol type="1"><li>高层模块不应该依赖低层模块，两者都应该依赖其抽象；</li><li>抽象不应该依赖细节，细节应该依赖抽象</li></ol><p>依赖倒置原则是实现开闭原则的重要途径之一，它降低了客户与实现模块之间的耦合</p><h2 id="作用-2">作用</h2><ul><li>依赖倒置原则可以降低类间的耦合性。</li><li>依赖倒置原则可以提高系统的稳定性。</li><li>依赖倒置原则可以减少并行开发引起的风险。</li><li>依赖倒置原则可以提高代码的可读性和可维护性</li></ul><h2 id="实现方法-2">实现方法</h2><ol type="1"><li>每个类尽量提供接口或抽象类，或者两者都具备。</li><li>变量的声明类型尽量是接口或者是抽象类。</li><li>任何类都不应该从具体类派生。</li><li>使用继承时尽量遵循里氏替换原则</li></ol><p><img src="https://s2.loli.net/2022/06/18/W6jngHFAODrC4MJ.png"></p><h1 id="单一职责原则single-responsibility-principlesrp">单一职责原则（SingleResponsibility Principle，SRP）</h1><p>单一职责原则规定一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分</p><h2 id="作用-3">作用</h2><ol type="1"><li>一个职责的变化可能会削弱或者抑制这个类实现其他职责的能力；</li><li>当客户端需要该对象的某一个职责时，不得不将其他不需要的职责全都包含进来，从而造成冗余代码或代码的浪费</li></ol><h1 id="接口隔离原则interface-segregation-principleisp">接口隔离原则（InterfaceSegregation Principle，ISP）</h1><p>要求程序员尽量将臃肿庞大的接口拆分成更小的和更具体的接口，让接口中只包含客户感兴趣的方法</p><ul><li>单一职责原则注重的是职责，而接口隔离原则注重的是对接口依赖的隔离。</li><li>单一职责原则主要是约束类，它针对的是程序中的实现和细节；接口隔离原则主要约束接口，主要针对抽象和程序整体框架的构建</li></ul><h1 id="迪米特法则law-of-demeterlod">迪米特法则（Law ofDemeter，LoD）</h1><p>又称最小知识原则</p><p>迪米特法则的定义是：只与你的直接朋友交谈，不跟“陌生人”说话（Talk onlyto your immediate friends and not to strangers）。</p><p>其含义是：如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性</p><h2 id="实现方法-3">实现方法</h2><p>从迪米特法则的定义和特点可知，它强调以下两点：</p><ol type="1"><li>从依赖者的角度来说，只依赖应该依赖的对象。</li><li>从被依赖者的角度说，只暴露应该暴露的方法</li></ol><h1 id="总结">总结</h1><table><colgroup><col style="width: 10%"><col style="width: 52%"><col style="width: 36%"></colgroup><thead><tr class="header"><th>设计原则</th><th>一句话归纳</th><th>目的</th></tr></thead><tbody><tr class="odd"><td>开闭原则</td><td>对扩展开放，对修改关闭</td><td>降低维护带来的新风险</td></tr><tr class="even"><td>依赖倒置原则</td><td>高层不应该依赖低层，要面向接口编程</td><td>更利于代码结构的升级扩展</td></tr><tr class="odd"><td>单一职责原则</td><td>一个类只干一件事，实现类要单一</td><td>便于理解，提高代码的可读性</td></tr><tr class="even"><td>接口隔离原则</td><td>一个接口只干一件事，接口要精简单一</td><td>功能解耦，高聚合、低耦合</td></tr><tr class="odd"><td>迪米特法则</td><td>不该知道的不要知道，一个类应该保持对其它对象最少的了解，降低耦合度</td><td>只和朋友交流，不和陌生人说话，减少代码臃肿</td></tr><tr class="even"><td>里氏替换原则</td><td>不要破坏继承体系，子类重写方法功能发生改变，不应该影响父类方法的含义</td><td>防止继承泛滥</td></tr><tr class="odd"><td>合成复用原则</td><td>尽量使用组合或者聚合关系实现代码复用，少使用继承</td><td>降低代码耦合</td></tr></tbody></table><h1 id="单例模式">单例模式</h1><p>一个类只有一个实例</p><p>单例对象必须由单例类自行创建</p><p>单例类对外提供一个访问该单例的全局访问点</p><h1 id="简单工厂模式">简单工厂模式</h1><h1 id="工厂方法模式">工厂方法模式</h1><h1 id="抽象工厂模式">抽象工厂模式</h1><p>抽象工厂（AbstractFactory）模式的定义：是一种为访问类提供一个创建一组相关或相互依赖对象的接口，且访问类无须指定所要产品的具体类就能得到同族的不同等级的产品的模式结构</p><h2 id="模式的结构">模式的结构</h2><p>抽象工厂模式的主要角色如下。</p><ol type="1"><li>抽象工厂（AbstractFactory）：提供了创建产品的接口，它包含多个创建产品的方法newProduct()，可以创建多个不同等级的产品。</li><li>具体工厂（ConcreteFactory）：主要是实现抽象工厂中的多个抽象方法，完成具体产品的创建。</li><li>抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能，抽象工厂模式有多个抽象产品。</li><li>具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间是多对一的关系</li></ol><h1 id="策略模式">策略模式</h1><p>策略（Strategy）模式的定义：该模式定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的变化不会影响使用算法的客户。策略模式属于对象行为模式，它通过对算法进行封装，把使用算法的责任和算法的实现分割开来，并委派给不同的对象对这些算法进行管理。</p><h2 id="模式的结构-1">模式的结构</h2><p>策略模式的主要角色如下。</p><ol type="1"><li>抽象策略（Strategy）类：定义了一个公共接口，各种不同的算法以不同的方式实现这个接口，环境角色使用这个接口调用不同的算法，一般使用接口或抽象类实现。</li><li>具体策略（ConcreteStrategy）类：实现了抽象策略定义的接口，提供具体的算法实现。</li><li>环境（Context）类：持有一个策略类的引用，最终给客户端调用</li></ol><h1 id="总结-1">总结</h1><table><colgroup><col style="width: 20%"><col style="width: 27%"><col style="width: 26%"><col style="width: 13%"><col style="width: 5%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>分类</th><th>设计模式</th><th>简述</th><th>一句话归纳</th><th>目的</th><th>生活案例</th></tr></thead><tbody><tr class="odd"><td>创建型设计模式 （简单来说就是用来创建对象的）</td><td>工厂模式（Factory Pattern）</td><td>不同条件下创建不同实例</td><td>产品标准化，生产更高效</td><td>封装创建细节</td><td>实体工厂</td></tr><tr class="even"><td>单例模式（Singleton Pattern）</td><td>保证一个类仅有一个实例，并且提供一个全局访问点</td><td>世上只有一个我</td><td>保证独一无二</td><td>CEO</td><td></td></tr><tr class="odd"><td>原型模式（Prototype Pattern）</td><td>通过拷贝原型创建新的对象</td><td>拔一根猴毛，吹出千万个</td><td>高效创建对象</td><td>克隆</td><td></td></tr><tr class="even"><td>建造者模式（Builder Pattern）</td><td>用来创建复杂的复合对象</td><td>高配中配和低配，想选哪配就哪配</td><td>开放个性配置步骤</td><td>选配</td><td></td></tr><tr class="odd"><td>结构型设计模式 （关注类和对象的组合）</td><td>代理模式（Proxy Pattern）</td><td>为其他对象提供一种代理以控制对这个对象的访问</td><td>没有资源没时间，得找别人来帮忙</td><td>增强职责</td><td>媒婆</td></tr><tr class="even"><td>外观模式（Facade Pattern）</td><td>对外提供一个统一的接口用来访问子系统</td><td>打开一扇门，通向全世界</td><td>统一访问入口</td><td>前台</td><td></td></tr><tr class="odd"><td>装饰器模式（Decorator Pattern）</td><td>为对象添加新功能</td><td>他大舅他二舅都是他舅</td><td>灵活扩展、同宗同源</td><td>煎饼</td><td></td></tr><tr class="even"><td>享元模式（Flyweight Pattern）</td><td>使用对象池来减少重复对象的创建</td><td>优化资源配置，减少重复浪费</td><td>共享资源池</td><td>全国社保联网</td><td></td></tr><tr class="odd"><td>组合模式（Composite Pattern）</td><td>将整体与局部（树形结构）进行递归组合，让客户端能够以一种的方式对其进行处理</td><td>人在一起叫团伙，心在一起叫团队</td><td>统一整体和个体</td><td>组织架构树</td><td></td></tr><tr class="even"><td>适配器模式（Adapter Pattern）</td><td>将原来不兼容的两个类融合在一起</td><td>万能充电器</td><td>兼容转换</td><td>电源适配</td><td></td></tr><tr class="odd"><td>桥接模式（Bridge Pattern）</td><td>将两个能够独立变化的部分分离开来</td><td>约定优于配置</td><td>不允许用继承</td><td>桥</td><td></td></tr><tr class="even"><td>行为型设计模式 （关注对象之间的通信）</td><td>模板模式（Template Pattern）</td><td>定义一套流程模板，根据需要实现模板中的操作</td><td>流程全部标准化，需要微调请覆盖</td><td>逻辑复用</td><td>把大象装进冰箱</td></tr><tr class="odd"><td>策略模式（Strategy Pattern）</td><td>封装不同的算法，算法之间能互相替换</td><td>条条大道通罗马，具体哪条你来定</td><td>把选择权交给用户</td><td>选择支付方式</td><td></td></tr><tr class="even"><td>责任链模式（Chain of Responsibility Pattern）</td><td>拦截的类都实现统一接口，每个接收者都包含对下一个接收者的引用。将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。</td><td>各人自扫门前雪，莫管他们瓦上霜</td><td>解耦处理逻辑</td><td>踢皮球</td><td></td></tr><tr class="odd"><td>迭代器模式（Iterator Pattern）</td><td>提供一种方法顺序访问一个聚合对象中的各个元素</td><td>流水线上坐一天，每个包裹扫一遍</td><td>统一对集合的访问方式</td><td>逐个检票进站</td><td></td></tr><tr class="even"><td>命令模式（Command Pattern）</td><td>将请求封装成命令，并记录下来，能够撤销与重做</td><td>运筹帷幄之中，决胜千里之外</td><td>解耦请求和处理</td><td>遥控器</td><td></td></tr><tr class="odd"><td>状态模式（State Pattern）</td><td>根据不同的状态做出不同的行为</td><td>状态驱动行为，行为决定状态</td><td>绑定状态和行为</td><td>订单状态跟踪</td><td></td></tr><tr class="even"><td>备忘录模式（Memento Pattern）</td><td>保存对象的状态，在需要时进行恢复</td><td>失足不成千古恨，想重来时就重来</td><td>备份、后悔机制</td><td>草稿箱</td><td></td></tr><tr class="odd"><td>中介者模式（Mediator Pattern）</td><td>将对象之间的通信关联关系封装到一个中介类中单独处理，从而使其耦合松散</td><td>联系方式我给你，怎么搞定我不管</td><td>统一管理网状资源</td><td>朋友圈</td><td></td></tr><tr class="even"><td>解释器模式（Interpreter Pattern）</td><td>给定一个语言，定义它的语法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子</td><td>我想说”方言“，一切解释权都归我</td><td>实现特定语法解析</td><td>摩斯密码</td><td></td></tr><tr class="odd"><td>观察者模式（Observer Pattern）</td><td>状态发生改变时通知观察者，一对多的关系</td><td>到点就通知我</td><td>解耦观察者与被观察者</td><td>闹钟</td><td></td></tr><tr class="even"><td>访问者模式（Visitor Pattern）</td><td>稳定数据结构，定义新的操作行为</td><td>横看成岭侧成峰，远近高低各不同</td><td>解耦数据结构和数据操作</td><td>KPI考核</td><td></td></tr><tr class="odd"><td></td><td>委派模式（Delegate Pattern）</td><td>允许对象组合实现与继承相同的代码重用，负责任务的调用和分配</td><td>这个需求很简单，怎么实现我不管</td><td>只对结果负责</td><td>授权委托书</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
          <category> 软件工程与计算2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中国近代史纲要</title>
      <link href="/2022/06/12/%E4%B8%AD%E5%9B%BD%E8%BF%91%E4%BB%A3%E5%8F%B2%E7%BA%B2%E8%A6%81/"/>
      <url>/2022/06/12/%E4%B8%AD%E5%9B%BD%E8%BF%91%E4%BB%A3%E5%8F%B2%E7%BA%B2%E8%A6%81/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章">第一章</h1><h2 id="第一次鸦片战争">第一次鸦片战争 😻</h2><h3 id="概念">概念</h3><p>定义：1840年至1842年英国对中国发动的一场战争，也是中国近代史的开端。时间：1840.6-1842.8 地点：中国东南沿海</p><h3 id="原因">原因</h3><ol type="1"><li>英国贸易逆差，率先完成工业革命的英国迫切要求打开中国大门（<strong>根本原因</strong>）</li><li>清政府的国力衰弱为战争的发动提供可能</li><li>林则徐虎门销烟运动 （<strong>直接原因</strong>）</li></ol><h3 id="签订条约">签订条约</h3><table><thead><tr class="header"><th>Time</th><th>条约</th></tr></thead><tbody><tr class="odd"><td>1842.8.29</td><td>中英《南京条约》</td></tr><tr class="even"><td>1843</td><td>中英《虎门条约》</td></tr><tr class="odd"><td>1844.7</td><td>中美《望厦条约》</td></tr><tr class="even"><td>1844.10</td><td>中法《黄埔条约》</td></tr></tbody></table><h3 id="鸦片走私的影响">鸦片走私的影响</h3><ul><li>造成了中国白银的大量外流和财政危机</li><li>导致银鬼钱贱，加重了劳动人民的负担</li><li>直接毒害了中国人的身体和精神</li></ul><h3 id="为什么说鸦片战争时中国近代史的起点">为什么说鸦片战争时中国近代史的起点？</h3><ol type="1"><li>战争后中国的社会性质发生了根本性的变化，中国由封建社会变成了半殖民半封建社会</li><li>中国的革命任务发生变化，中国人民逐渐开始了反帝反侵略的资产阶级民主革命</li><li>社会主要矛盾发生了变化</li><li>中国的社会阶级发生了变化</li></ol><h2 id="近代中国">近代中国</h2><h3 id="中国半半社会的基本特征">中国半半社会的基本特征</h3><ol type="1"><li><p>资本-帝国主义侵略势力不但逐步操纵了中国的财政和经济命脉，而且逐步控制了中国的政治，日益成为支配中国的决定性力量。</p></li><li><p>中国的封建势力日益衰败并同外国侵略势力相勾结，成为资本-帝国主义压迫、奴役中国人民的社会基础和统治支柱。</p></li><li><p>中国的自然经济基础虽然遭到破坏，但是封建剥削制度的根基-封建地主的土地所有制依然在广大地区内保持着，成为中国走向近代化</p><p>和民主化的严重障碍。</p></li><li><p>中国新兴的民族资本主义经济虽然已经产生，并在政治、文化生活中起了一定作用，但是在帝国主义封建主义的压迫下，他的发展很缓慢，力量很软弱，而且大部分与外国资本-帝国主义和本国封建主义都有或多或少的联系。</p></li><li><p>由于近代中国处于资本-帝国主义列强的争夺和间接统治之下，近代中国各地区经济、政治和文化的发展是极不平衡的，中国长期处于不统一状态。</p></li><li><p>在资本-帝国主义和封建主义的双重压迫下，中国的广大人民特别是农民日益贫困化以致大批破产，过着饥寒交迫和毫无政治权力的生活。</p></li></ol><h3 id="阶级关系变动">阶级关系变动</h3><ul><li>旧的封建统治阶级：地主阶级 —继续占有大量土地，掌握政权，对人民实行专制统治</li><li>变化：一部分由乡村转入城市（城居地主） 一部分转化为资本家大部分仍主要依靠地租剥削生活</li><li>旧的被统治阶级：农民阶级 — 仍是近代中国社会人数最多的被剥削阶级</li><li>新兴被压迫阶级：工人阶级来源：主要是城乡破产失业的农民、手工业者、城市贫民</li><li>新产生的阶级：资产阶级 构成较为复杂 一部分是官僚买办资本家另一部分是民族资本家</li></ul><h3 id="近代中国社会的主要矛盾">近代中国社会的主要矛盾</h3><ul><li>帝国主义和中华民族的矛盾（主要矛盾</li><li>封建主义和人民大众的矛盾</li></ul><h3 id="两大历史人物">两大历史人物</h3><ul><li>推翻帝国主义，封建主义联合统治的半半社会，争取民族独立和人民解放</li><li>改变中国经济社会落后的面貌，实现国家富强和人民富裕</li></ul><h1 id="第二章">第二章</h1><h2 id="太平天国">太平天国😻</h2><h3 id="金田起义和太平天国建立">金田起义和太平天国建立</h3><p>背景：残酷的压迫和剥削，迫使广大人民尤其是农民群众走上反抗斗争的道路。1842-1850：各族人民的反清起义在百次以上 1843：洪秀全创立了拜上帝教</p><p><strong>拜上帝教😻</strong></p><ul><li>1843年由洪秀全撷取基督教教义中反映下层民众要求的平等思想和宗教仪式，从农民斗争的需要出发加以改造，并利用其发动和组织群众的宗教。)</li><li>1851.1：洪秀全率拜上帝教教众在广西省桂平县金田村发动起义，建号太平天国。（随后，太平军从广西经湖南、湖北、江西、安徽，一直打到江苏，席卷6省。）</li><li>1853.3：占领南京，定为首都，改名天京，正式宣告太平天国农民政权的建立。</li></ul><h3 id="天朝田亩制度和资政新篇">《天朝田亩制度》和《资政新篇》</h3><p>《天》</p><ul><li>最能体现太平天国社会理想和这次农民起义特色的纲领性文件</li><li>平均分配土地（凡天下田，天下人共耕）</li></ul><p>《资》</p><ul><li>太平天国后期颁布的社会发展方案 1859 洪仁玕</li></ul><h3 id="从天京事变-太平天国败亡">从天京事变 —&gt; 太平天国败亡</h3><p>1856.9 天京事变 （自相残杀</p><p>1864.6 洪秀全病故</p><p>1864.7 天京被湘军攻破，太平天国起义失败</p><h3 id="农民斗争的意义和局限">农民斗争的意义和局限</h3><p><strong>意义</strong></p><ul><li>沉重打击了封建统治阶级，强烈撼动了清政府的统治根基</li><li>是中国旧式农民战争的最高峰</li><li>冲击了孔子和儒家经点的正统权威，一定程度上削弱了封建统治的精神支柱</li><li>有力地地打击了外国侵略势力</li><li>在19世纪中叶的亚洲民族解放运动中，太平天国起义时其中时间最长，规模最大，影响最深的一次，它和其他亚洲国家的民族解放运动合在一起，冲击了西方殖民主义在亚洲的统治</li></ul><h3 id="太平天国农民起义失败的原因和教训">太平天国农民起义失败的原因和教训</h3><ul><li>农民阶级不是新的生产力和生产关系的代表，无法克服小生产者固有的阶级局限性，缺乏科学思想理论的指导，没有先进阶级的领导，无法从根本上提出完整的，正确的政治纲领和社会改革方案</li><li>后期无法制止和克服领导集团自身腐败现象的滋生</li><li>军事战略上出现了重大失误</li><li>以宗教来发动、组织群众的，但是，拜上帝教教义不仅不能正确指导斗争，而且给农民战争带来了危害</li><li>未能正确的对待儒学</li><li>对于西方资本主义侵略者缺乏理性的认识</li><li>太平天国起义及其失败表明，在半半的中国，农民具有伟大的革命潜力，但它自身不慎负担起领导反帝反封建斗争取得胜利的重任，单纯的农民战争不可能完成民族独立和人民解放的历史任务</li></ul><h2 id="洋务运动">洋务运动 😻</h2><p>洋务运动是19世纪60年代初，第二次鸦片战争结束后，在清政府镇压太平天国起义与捻军起义的过程中兴起的，主张引进，仿造西方的武器装备和学习西方的科学技术，创设近代企业，兴办洋务</p><p><strong>洋务派代表</strong>：奕沂、曾国藩、李鸿章、左宗棠、张之洞等</p><p><strong>指导思想</strong>： 中体西用 张之洞</p><p><strong>三个方面</strong></p><ol type="1"><li><p>兴办近代企业</p><p>洋务派首先兴办的是军用工业，这些企业都是官办的，最早创办的</p><table><thead><tr class="header"><th>年份</th><th>人</th><th>企业</th></tr></thead><tbody><tr class="odd"><td>1861</td><td></td><td>安庆军械所</td></tr><tr class="even"><td>1865</td><td>曾国藩支持，李鸿章筹办</td><td>上海江南制造总局（当时最大的兵工厂）</td></tr><tr class="odd"><td>1865</td><td>李鸿章</td><td>金陵机器局</td></tr><tr class="even"><td>1866</td><td>左宗棠</td><td>福州船政局（最大的造船厂）</td></tr><tr class="odd"><td>1867</td><td>崇厚</td><td>天津机器局</td></tr><tr class="even"><td>1890</td><td>张之洞</td><td>湖北枪炮厂</td></tr></tbody></table></li><li><p>建立新式海路军</p><p>19世纪60年代，京师和天津、上海、广州、福州等地的军队纷纷改用洋枪、洋炮，聘用外国教练李鸿章的淮军，左宗棠的湘军也是用洋枪的军队</p><p>1874年，日本派兵侵犯中国台湾，清政府筹办海防、建设海军之议随之兴起，19世纪70 -90年代分别建成<strong>福建水师、广东水师、南洋水师、北洋水师</strong>。其中北洋水师是清政府的海军主力，拥有舰艇20多艘，归李鸿章管辖</p></li><li><p>创办新式学堂，派遣留学生</p><ol type="1"><li><strong>翻译学堂</strong>，如京师同文馆，培养翻译人才</li><li><strong>工艺学堂</strong>，培养电报，铁路，矿物，西医等专门人才</li><li><strong>军事学堂</strong>，如船政学堂，培养新式海军人才</li></ol><p>在创办新式学堂的同时，先后派遣赴美幼童和官费赴欧留学生两百多人</p></li></ol><h3 id="洋务运动失败-及其原因">洋务运动失败 及其原因</h3><ul><li>洋务运动具有封建性</li><li>洋务运动对列强具有依赖性</li><li>洋务运动的管理具有腐朽性</li></ul><h3 id="总理各国事务衙门">总理各国事务衙门</h3><p>总理各国事务衙门是19世纪后期清政府为适应当时内忧外患并作的形势而设立的对外机构，是第二次鸦片战争以后清政府和外国侵略势力进一步相互勾结的产物</p><h2 id="戊戌变法">戊戌变法 😻</h2><p>戊戌变法：1898年（戊戌年）以康有为为首的改良主义者 同光绪皇帝所进行的资产阶级政治改革</p><p><strong>主要内容是</strong>：学习西方，提倡科学文化，改革政治，教育制度，发展农、工、商业等。</p><p>这次运动遭到守旧派的强烈反对，九月慈禧太后等发动政变，光绪被囚，维新派康有为梁启超分别逃往法国和日本，谭嗣同等6人被杀害，历史103天的变法失败，也称<strong>百日维新</strong></p><h3 id="历史意义">历史意义</h3><ul><li>戊戌维新是一次爱国救亡运动，维新派在民族危亡的关键时刻高举救亡图存的旗帜，要求通过变法、发展资本主义，是中国走向富强之路，维新派的政治实践和思想理论不仅贯穿着强烈的爱国主义精神，而且推动了中华民族的觉醒</li><li>戊戌维新运动是一场资产阶级性质的政治改革运动</li><li>戊戌维新运动更是一场思想启蒙运动</li><li>戊戌维新运动不仅在思想启蒙和文化教育方面开创了新的局面，而且在社会风习方面也提出了许多新的主张</li></ul><h3 id="失败原因">失败原因</h3><p>戊戌维新运动的失败，主要由于维新派自身的局限，和以慈禧太后为首的强大的守旧势力的反对，维新派本身的局限性突出表在：</p><ol type="1"><li>不敢否定封建主义，他们在政治上不敢否定封建君主制度，在经济上虽然要求发展资本主义，却未触及封建主义的经济基础--封建土地所有制</li><li>对帝国主义抱有幻想，他们大声疾呼救亡图存，却又幻想西方列强能帮助自己变法维新，结果是处处碰壁</li><li>惧怕人民群众，维新派的活动基本上局限于官僚士大夫和知识分子的小圈子，他们不但脱离人民群众而且惧怕甚至仇视人民群众，因此，运动未能得到人民群众的支持</li></ol><h3 id="历史教训">历史教训</h3><ul><li>戊戌维新运动的失败不仅暴露了中国民族资产阶级的软弱性，同时，也说明在半殖民地半封建的旧中国，企图通过统治着自上而下的改良道路，是根本行不通的。</li><li>要想争取国家的独立、民主、富强，必须用革命的手段，推翻帝国主义、封建主义联合统治的半殖民地半封建的社会制度。</li></ul><h3 id="康有为">康有为</h3><p>《新学伪经考》 《孔子改制考》</p><p>政治主张：将西方资本主义政治学说与中国传统儒家四相结合</p><h3 id="梁启超">梁启超</h3><p>《变法通议》</p><p>参与“公车上书”、呼吁救亡图存，倡导近代文学革命运动理论，领导北京、上海的强学会，创办《时务报》，宣传变法的主张、为维新变法制造舆论</p><h3 id="严复">严复</h3><p>翻译《天演论》，并与1897年12月出版在《国文汇编》，维新派领袖康有为见此译稿后，发出“严重未见有此人”的惊叹，称严复译《天演论》为中国西学第一人也</p><p>政治主张：用西方进化论思想来阐释维新变法</p><h1 id="第三章">第三章</h1><h2 id="辛亥革命">辛亥革命 😻</h2><h3 id="保路运动">保路运动</h3><p>1911，清政府宣布“铁路干线收归国有“，并与四国银行团订立粤汉，川汉铁路借款合同，借国有之名，吧铁路权利出卖给帝国主义，同时借此劫夺商股，激起民众的愤慨和反抗而发生在湖北、湖南、广东、四川四省的民众反抗运动，揭露了情真服卖国求荣的本质</p><h3 id="武昌起义">武昌起义</h3><p>1911年10月10日晚，由湖北新军中的共进会和文学社两个革命团体联合行动攻占湖广总督衙门，占领武昌，成立湖北军政府的革命运动。掀起了辛亥革命的高潮。</p><p><strong>历史意义</strong>：掀起了辛亥革命的高潮，打开了清王朝统治的缺口。由此到处燃起革命的烈火，腐朽的清王朝迅速土崩瓦解，使得在中国延续了两千多年的封建君主专制制度终于走向覆灭。<strong>辛亥革命</strong>是资产阶级领导的以反对君主专制制度、建立资产阶级共和国为目的的革命，是一次比较完全意义上的资产民主革命。在近代历史上，辛亥革命是中国人民救亡图存、振兴中华而奋起革命的一个里程碑，它使中国发生了历史性巨变</p><h3 id="历史意义为什么说孙中山领导的辛亥革命引起了近代中国的历史性巨大变化">历史意义（为什么说孙中山领导的辛亥革命引起了近代中国的历史性巨大变化？）</h3><p>辛亥革命是资产阶级领导的以反对君主专制制度、建立资产阶级共和国为目的的革命，是一次比较完全意义上的资产民主革命。在近代历史上，辛亥革命是中国人民救亡图存、振兴中华而奋起革命的一个里程碑，它使中国发生了历史性巨变。</p><ol type="1"><li>辛亥革命推翻了封建势力的政治代表、帝国主义在中国的代理人——清王朝的统治，沉重的打击了中外反动势力，使中国反动统治者在政治上乱了阵脚。</li><li>辛亥革命结束了统治中国两千多年的封建君主专制制度，建立了中国历史上第一个资产阶级共和政府。</li><li>辛亥革命给人们带来一次思想上的解放。</li><li>辛亥革命促使社会经济、思想习惯和社会风俗等方面发生了新的积极变化。</li><li>辛亥革命不仅在一定程度上打击了帝国主义的侵略势力，而且推动了亚洲各国民族解放运动的高涨</li></ol><h3 id="失败原因-1">失败原因</h3><ul><li>从根本上说，是因为在帝国主义时代，在半半的中国，资本主义的建国方案是行不通的。帝国主义与袁世凯为代表的大地主、大买办以及旧官僚、立宪派一起勾结起来，从外部和内部绞杀了这场革命。</li><li>从主观方面来说，在于它的领导者-资产阶级本身存在着许多弱点和错误，一是没有提出彻底的反帝反封建的革命纲领，二是不能充分发动和依靠人民群众，三是不能建立坚强的革命政党，作为团建一切革命力量的强有力的核心。</li></ul><h1 id="第四章">第四章</h1><h2 id="新文化运动">新文化运动 😻</h2><p><strong>新文化运动是1915年</strong>陈独秀在上海创办《青年杂志》开始，提倡民主与科学（旧称"德先生”与“赛先生”），批判守旧落后的当时的中国文化，并传播马克思主义思想。在中国现代历史上产生了很大影响。</p><h3 id="历史意义-1">历史意义</h3><p>在社会上掀起了思想解放潮流，冲决了禁锢人们思想的闸门，为马克思主义在中国的传播奠定了基础</p><h3 id="五四之前新文化运动的局限">五四之前新文化运动的局限</h3><ul><li>新文化运动的倡导者批判孔学，是为了给中国发展资本主义扫清障碍。但是，由于资产阶级共和国的方案在中国行不通，所以从根本上说，提倡资产阶级民主主义，并不能为人们提供一种有效的思想武器去认识中国，去对中国社会进行改造。</li><li>新文化运动的倡导者把改造国民性置于优先的地位。（但是，离开改造产生封建思想的社会环境的革命实践，仅仅依靠少数人的呐喊，依靠有限的宣传手段，要根本改造由这种社会环境所产生的思想、所造成的国民性，是不可能的）</li><li>那时的许多领导人物，还没有马克思主义的批判精神，他们使用的方法，一般还是资产阶级的方法</li></ul><h2 id="五四运动">五四运动😻</h2><p>五四运动是1919年5月4日发生在北京以青年学生为主的一场学生运动，以及广大群众、市民、工商人士等中下阶层广泛参与的一次示威游行、请愿、罢课、罢工、暴力对抗政府等多形式的爱国运动。是中国人民彻底的反对帝国主义、封建主义的爱国运动</p><h3 id="历史意义-2">历史意义</h3><ul><li>五四运动是中国旧民主主义革命走向新民主主义革命的转折点，在近代以来中华民族追求民族独立和发展进步的历史进程中具有里程碑意义。它以彻底反帝反封建的革命性、追求救国强国真理的进步性、各族各界群众积极参与的广泛性，推动了中国社会进步，促进了马克思主义在中国的传播，促进了马克思主义同中国工人运动的结合，为中国共产党的成立做了思想上千部上的准备，为新的革命力量、革命文化、革命斗争登上历史舞台创造了条件。</li><li>五四运动孕育了以爱国、进步、民主、科学为主要内容的伟大五四精神，其核心是爱国主义。</li><li>五四运动改变了以往只有觉悟的革命者而缺少觉醒的人民大众的斗争状况，实现了中国人民和中华民族自鸦片战争以来的第一次全面觉醒</li></ul><p>总结：五四运动标志着中国新民主主义革命的开端。</p><h2 id="中国共产党的成立">中国共产党的成立</h2><h3 id="为什么说中国共产党的成立是开天辟地的大事变">为什么说中国共产党的成立是“开天辟地”的大事变？</h3><ol type="1"><li><p>中国共产党的成立是中国革命有了坚强的领导核心，灾难深重的中国人民有了可以依赖的组织者和领导者，中国革命从此不断向前发展，由民主主义革命向社会主义革命推进。陈独秀在上海创办骿杂鄹</p></li><li><p>中国共产党的成立，使中国革命有了科学的指导思想。中国共产党以马克思主义为指导思想，把马克思主义和中国革命的具体实践相结合，制定了正确的革命纲领和斗争策略，为中国人民指明了斗争的目标和走向胜利的道路。</p></li><li><p>中国共产党的成立，使中国革命有了新的革命方法，并沟通了中国革命和世界无产阶级革命之间的联系，为中国革命获得了广泛的国际援助和避免走资本主义提供了客观可能性。</p></li></ol><p><strong>中国共产党成立的历史特点：</strong></p><p>中国共产党是在特定的社会历史条件下成立的。</p><ul><li>一方面，它成立于俄国十月革命取得胜利，第二国际社会民主主义、修正主义破产之后它所接受的，是具有完整的科学世界观和社会革命论的马克思主义。</li><li>另一方面，它是在半殖民地半封建中国的工人运动基础上产生的中国工人阶级身受帝国主义、本国资产阶级和封建势力的三重压迫，具有坚强的革命性。</li><li>所以，中国共产党一开始就是一个以马克思列宁主义理论为基础的党，是一个区别于第二国际旧式社会改良党的新型工人阶级革命政党。</li></ul><p><strong>中国共产党成立的历史意义：</strong></p><ul><li>中国共产党的成立，是中华民族发展史上一个开天辟地的大事变，具有伟大而深远的意义。</li></ul><ol type="1"><li>近代以后中国人民的反帝反封建斗争之所以屡遭挫折和失败，最重要的原因就是没有先进的坚强的政党作为凝聚力量的领导核心。中国共产党的诞生，从根本上改变了这种局面。</li><li>中国共产党一经成立，就把实现共产主义作为党的最高理想和最终目标，义无反顾肩负起实现中华民族伟大复兴的历史使命中国人民由此踏上了争取民族独立、自身解放的光明道路，开启了实现国家富强、人民富裕的历史征程</li><li>中国共产党的先驱们创建了中国共产党，形成了坚持真理、坚守理想，践行初心、担当使命，不怕牺牲、英勇斗争，对党忠诚、不负人民的伟大建党精神，这是中国共产党的精神之源正是对这一精神的坚守与践行、光大与发扬，构建起中国共产党人的精神谱系，激励中国共产党和中国人民创造了人间奇迹</li><li>中国共产党的成立，深刻改变了近代以后中华民族发展的方向和进程，深刻改变了中国人民和中华民族的前途和命运，深刻改变了世界发展的趋势和格局</li></ol><h2 id="国共第一次合作">国共第一次合作 😻</h2><h3 id="形成过程">形成过程</h3><p>二七惨案的发生使得中国工人运动暂时转入低潮，中国共产党看到这时的中国革命力量远不如帝国主义和封建势力强大，决定采取更为积极的步骤，联合孙中山领导的中国国民党。</p><p>而孙中山因依靠军阀打军阀屡遭挫折，受到中共领导的个人运动影响原因合作。</p><p>1923年1月，共产国际执委会作出《关于中国共产党与国民党的关系的问题的决议》，对国共合作起了推进作用。</p><p>6月中共三大在广州召开，决定共产党员以个人身份加入国民党以实现国共合作的原则，国共合作的步伐大大加快。</p><p>1924年1月，国民党一大召开，对三民主义进行了新的解释，即新三民主义，使得国共合作有了政治基础。国民党一大事实上确立了联俄联共、扶助农工的革命政策，标志着第一次国共合作正式形成</p><h1 id="第五章">第五章</h1><h2 id="中共革命道路">中共革命道路😻</h2><h3 id="探索过程">探索过程</h3><ul><li><strong>开展武装反抗国民党统治的斗争</strong>：1927年8月，中共中央在汉口召开紧急会议（八七会议），彻底清算了大革命后期的陈独秀右倾机会主义错误，确定了土地革命和武装反抗国民党方针。八七会议以后，举行了南昌起义、湘赣边界秋收起义、广州起义。中国革命由此发展到了一个新阶段。</li><li><strong>走农村包围城市的革命道路</strong>：以农村为重点，到农村去发动农民，进行土地革命，开展武装斗争，建设根据地，这是1927年以后中国革命发展的客观规律所要求的。农村包围城市、武装夺取政权这条革命心道路的开辟，依靠了党和人民的集体奋斗，凝聚了党和人民的集体智慧。而毛泽东是其中的杰出代表。</li><li><strong>毛泽东不仅在实践中首先把革命进攻的方向指向了农村，而且从理论上阐明了武装斗争的极端重要性和农村应当成为党的工作中心的思想</strong>：1928年，毛泽东写了《中国的红色政权为社么能够存在？》、《井冈山的斗争》等文章，明确指出以农业为主要经济的中国革命，以军事发展暴动，是一种特征；还科学阐明了共产党领导的土地革命、武装斗争于根据地建设这三者之间的辩证统一关系。1930年，《星星之火可以燎原》一文中，毛泽东指出：红军、游击队和红色区域的建立和发展，是半殖民地中国在无产阶级领导下的农民斗争的最高形式，和半殖民地农民斗争发展的必然结果，并且无疑议的是促进全国革命高潮的最重要因素。</li><li>农村包围城市，武装夺取政权理论，是对1927年革命失败后中国共产党领导的红军和根据地斗争经验的科学概括。它是以毛泽东为代表的中国共产党人同当时党内盛行的把马克思主义教条化、把共产国际和苏联经验神圣化的错误倾向做坚决斗争基础上形成的。农村包围城市、武装夺取政权理论的提出，标志着中国化的马克思主义：毛泽东思想的初步形成。</li><li>随着革命心道路的开辟，中国革命开始走向复兴。中国共产党领导的红军和根据地逐步发展起来。红军游击战争实际上已经成为中国革命的主要形式，农村根据地成为积蓄和锻炼革命力量的主要战略阵地。</li></ul><p><strong>重要转变：农村包围城市、武装夺取政权的道路的确立</strong></p><h2 id="红军长征">红军长征😻</h2><ul><li>开始原因：王明等人的“左”倾教条主义错误使得红军第五次反围剿失败，不得不退出南方根据地实行战略转移——长征。</li><li>转折：1935年1月遵义会议召开，遵义会议开始确⽴以⽑泽东为主要代表的⻢克思主义的正确路线在党中央的领导地位，从⽽在极其危急的情况下挽救了中国共产党、挽救了中国⼯农红军、挽救了中国⾰命，成为中国共产党历史上⼀个⽣死攸关的转折点。这为党和⾰命事业转危为安、不断打开新局⾯提供了最重要的保证。</li></ul><h3 id="意义">意义</h3><p>中国工农红军长征是一次理想信念的伟大远征，是一次检验真理的伟大远征，是一次唤醒民众的伟大远征，是一次开创新局的伟大远征</p><ol type="1"><li>长征的胜利，极大地促进了党在政治上和思想上的成熟。中国共产党进一步认识到，只有把马克思主义基本原理同中国革命具体实际结合起来，独立自主解决中国革命的重大问题，才能把革命事业引向胜利</li><li>长征的胜利，是中国革命转危为安的关键。毛泽东曾形象地指出：“长征是历史纪录上的第一次，长征是宣言书，长征是宣传队，长征是播种机</li><li>长征宣告了国民党反动派消灭中国共产党和红军的图谋彻底失败，宣告了中国共产党和红军肩负着民族希望胜利实现了北上抗日的战略转移，实现了中国共产党和中国革命事业从挫折走向胜利的伟大转折，开启了中国共产党为实现民族独立、人民解放而斗争的新的伟大进军。</li><li>长征铸就了伟大的长征精神，这就是：把全国人民和中华民族的根本利益看得高千一切，坚定革命的理想和信念，坚信正义事业必然胜利的精神；为了救国救民，不怕任何艰难险阻，不惜付出一切牺牲的精神；坚持独立自主、实事求是，一切从实际出发的精神；顾全大局、严守纪律、紧密团结的精神；紧紧依靠人民群众，同人民群众生死相依、患难与共、艰苦奋斗的精神长征精神为中国革命不断从胜利走向胜利提供了强大精神动力</li></ol><p>长征一结束，中国革命的新局面就开始了</p><h1 id="第六章">第六章</h1><h2 id="抗日统一战线">抗日统一战线😻</h2><h3 id="形成">形成</h3><p>1931年日本发动侵华战争，使中国大片土地沦失，华北危机、中华民族危机之际，1936年经过双十二事变（西安事变）国共第二次合作，抗日民族统一战线正式形成。1937年“卢沟桥事变”后全国抗日战争终于爆发了，参加统一战线的不仅有农民、工人、城市小资产阶级和民族资产阶级，还包括除了汉奸、大地主、大资产阶级投降派以外的一切政治力量</p><h3 id="三三制">三三制😻</h3><p>在抗日民族统一战线中，中国共产党始终坚持独立自主原则，为确保无产阶级在统一战线中的政治领导权；坚持放手发动群众，开展敌后游击战争，扩大抗日人民武装和抗日根据地，而在根据地内建立“三三制”政权，即在政权人员的分配上，共产党员(代表工人阶级和贫农)、左派进步分子(代表小资产阶级)、中间分子及其它分子(代表中产阶级和开明绅士)大体各占三分之一</p><h2 id="抗日战争">抗日战争</h2><h3 id="抗日战争胜利的国际意义">抗日战争胜利的国际意义</h3><ul><li>中国人民抗日战争从一开始就具有拯救人类文明、保卫世界和平的重大意义，是世界反法西斯战争的重要组成部分，中国战场是世界反法西斯战争的东方主战场。</li><li>中国坚持持久抗战，抗击和牵制着日军陆军主力，为同盟国军队实施战略反攻创造了有利条件。</li><li>中国作为作为亚太地区盟军对日作战的重要后方基地，还为盟军提供了大量战略物资和军事情报。</li><li>中国人民为了自己的解放，为了帮助同盟国，付出了巨大牺牲，作出了巨大贡献</li></ul><h3 id="抗战胜利的原因">抗战胜利的原因😻</h3><ul><li>第一，以爱国主义为核心的民族精神是中国人民抗日胜利的决定因素。</li><li>第二，中国共产党的中流砥柱作用是中国人民抗日战争胜利的关键。</li><li>第三，全民族抗战是中国人民抗日战争胜利的重要法宝。</li><li>第四，中国人民抗日战争的胜利，同世界所有爱好和平和正义的国家和人民、国际组织以及各种反法西斯力量的同情和支持是分不开的</li></ul><h3 id="抗战胜利的意义">抗战胜利的意义😻</h3><ul><li>中国⼈⺠抗⽇战争是20世纪中国和⼈类历史上的重⼤事件，为中华⺠族由近代以来陷⼊深重危机⾛向伟⼤复兴确⽴了历史转折点。</li><li>第⼀，中国⼈⺠抗⽇战争的胜利，彻底粉碎了⽇本军国主义殖⺠奴役中国的图谋。中国⼈⺠⽤⾃⼰的顽强奋战和巨⼤牺牲，迫使⽇本归还甲午战争以后从中国窃取的神圣领⼟,桿卫了国家主权和领⼟完整，彻底洗刷了近代以来抗击外来侵略屡战屡败的⺠族耻辱。</li><li>第⼆，中国人民抗日战争的胜利，促进了中华⺠族的⼤团结，形成了伟⼤的抗战精神。这是中国⼈⺠弥⾜珍贵的精神财富，永远是激励中国⼈⺠克服⼀切艰难险阻、为实现中华⺠族伟⼤复兴⽽奋⽃的强⼤精神动⼒。</li><li>第三，中国人民抗日战争的胜利，对世界各国夺取反法⻄斯战争的胜利、维护世界和平的事业产⽣了巨⼤影响。中国⼈⺠为最终战胜世界法⻄斯势⼒作岀的历史性贡献，在全世界⼈⺠⾯前树⽴了⼀个以弱胜强的范例，中国国际地位显著提高。中国⼈⺠赢得了世界爱好和平⼈⺠的尊敬，赢得了崇⾼的⺠族声誉。</li><li>第四，中国⼈⺠抗⽇战争的胜利，开辟了中华⺠族复兴的光明前景。经历抗⽇战争锤炼的中国⼈⺠进⼀步认识到：只有实现⺠族ᇿ⽴和⼈⺠解放，建⽴⼈⺠当家作主的新中国，才能真正实现⺠族振兴、⼈⺠幸福。中国共产党提出的改造旧中国、建设新中国的主张，代表了中国⼈⺠的根本利益。⼈⺠⾰命⼒量进⼀步发展壮⼤。这就为中国共产党团结带领全国⼈⺠继续奋⽃，赢得新⺠主主义⾰命的胜利、创建中华⼈⺠共和国，奠定了重要的基础。</li></ul><h1 id="第七章">第七章</h1><h2 id="重庆谈判">重庆谈判😻</h2><p>是抗日战争胜利之际，中国共产党和中国国民党两党就中国未来的发展前途、建设大计在重庆进行的一次历史性会谈。</p><p>从1945年8月29日至10月10日，经过43天谈判，国共双方达成《政府与中共代表会谈纪要》，即“双十协定”。重庆谈判及达成的“双十协定”给中国人民带来了和平、民主、团结的希望和曙光。国民党统治集团违背全国人民迫切要求休养生息、和平建国的意愿，在1946年6月底全面撕毁“双十协定”</p><h2 id="国统区的危机">国统区的危机😻</h2><p><strong>危机</strong>：国民政府由于其专制独裁的统治和官员的贪污腐败、大发国难财，在大后方严重丧失人心无限制的发放法币，造成了严重的通货膨胀和货币贬值。官僚资本主义极度膨胀，工农业生产严重萎缩，大批民族工商业濒于倒闭，城市失业人口数增加，广大农村饿殍遍野。国统区陷入严重经济危机。</p><p>例子：各种学生运动，如“一二·一运动”“五二O”运动，还有1947年的“抢米”风潮。</p><h2 id="共同纲领">共同纲领😻</h2><p>1949年9月21日，中国人民政治协商会议通过了《中国人民政治协商会议共同纲领》简称《共同纲领》，成为各国人民的大宪法，在一个时期内起着新中国临时宪法的作用。</p><p>⼈⺠政协是中国共产党领导的以⼯农联盟为基础的⼈⺠⺠主统⼀战线的组织形式</p>]]></content>
      
      
      
        <tags>
            
            <tag> 近代史 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软工二复习</title>
      <link href="/2022/06/09/%E8%BD%AF%E5%B7%A5%E4%BA%8C%E5%A4%8D%E4%B9%A0/"/>
      <url>/2022/06/09/%E8%BD%AF%E5%B7%A5%E4%BA%8C%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="第一二章">第一、二章</h1><h1 id="软件工程">软件工程</h1><ul><li>应用系统的，规范的，可量化的方法来开发、运行和维护软件，即将工程应用到软件</li><li>对（1）中各种方法的研究</li></ul><h2 id="s-2020s的特点">1950s-2020s的特点</h2><table><colgroup><col style="width: 7%"><col style="width: 92%"></colgroup><thead><tr class="header"><th>时间</th><th>特点</th></tr></thead><tbody><tr class="odd"><td>1950s</td><td>科学计算；以机器为中心进行编程；像生产硬件一样生产软件</td></tr><tr class="even"><td>1960s</td><td>业务应用(批量数据处理和事物计算)；软件不同于硬件；用软件工艺的方式生产软件</td></tr><tr class="odd"><td>1970s</td><td>结构化方法；瀑布模型；强调规则和纪律。它们奠定了软件工程的基础，是后续年代软件工程发展的支撑</td></tr><tr class="even"><td>1980s</td><td>追求生产力最大化；现代结构化方法/面向对象编程广泛应用；重视过程的作用</td></tr><tr class="odd"><td>1990s</td><td>企业为中心的大规模软件系统开发；追求快速开发、可变更性和用户价值；web应用出现</td></tr><tr class="even"><td>2000s</td><td>大规模web应用；大量面向大众的web产品；追求快速开发、可变更性、用户价值和创新</td></tr><tr class="odd"><td></td><td></td></tr></tbody></table><p><img src="https://s2.loli.net/2022/06/09/EnFkXylgIOJsWNv.png"></p><h1 id="第四章-项目启动">第四章 项目启动</h1><h1 id="团队">团队</h1><h2 id="分类">分类</h2><ol type="1"><li>主程序员团队</li><li>民主团队</li><li>开放团队</li></ol><h2 id="团队建设">团队建设</h2><ul><li>建设团队章程</li><li>持续成功</li><li>和谐沟通</li><li>不断总结</li><li>避免团队杀手<ul><li>防范式管理</li><li>官僚主义</li><li>地理分布：异地办公</li><li>时间分割：保证全天候有人在</li><li>产品质量的降低</li><li>虚假的最后期限</li><li>小圈子管理</li></ul></li></ul><h1 id="质量保障">质量保障</h1><h2 id="措施">措施</h2><ul><li>需求开发：需求评审和需求度量</li><li>体系结构：体系结构评审，集成测试（持续集成</li><li>详细设计：详细设计评审，设计度量，集成测试（持续集成</li><li>构造阶段：代码评审，代码度量，测试（测试驱动和持续集成</li><li>测试阶段：测试，测试度量</li><li>及时根据保障计划度量验证，质量验证的方法主要有评审，测试和质量度量</li></ul><h1 id="配置管理">配置管理</h1><ol type="1"><li>标识配置项:确定应该被保留的部分，并且给予他们确定标识，包含配置项的特征，包括生产者、基线建立时间、使用者等。</li><li>版本管理：极其重要</li><li>变更控制：变更请求表单，教材61页</li><li>配置审计:验证配置项的完整性、正确性、一致性和可追踪性。</li><li>状态报告:反映当前的配置状态。</li><li>软件发布管理:将配置项发布到开发活动之外，例如发布给客户</li></ol><h1 id="第五章">第五章</h1><h1 id="需求">需求</h1><h2 id="什么是需求">什么是需求</h2><ol type="1"><li>用户为了解决问题或达到某些目标所需要的条件或能力；</li><li>系统或系统部件为了满足合同、标准、规范或其它正式文档所规定的要求而需要具备的条件或能力；</li><li>对1或2中的一个条件或一种能力的一种文档化表述</li></ol><h2 id="需求分层">需求分层</h2><p><img src="https://s2.loli.net/2022/06/09/lZkXE9ieWn6vjVR.png"></p><ol type="1"><li>业务需求：<ol type="1"><li>业务需求是高层次的解决方案和系统特性、系统开发的战略出发点、高层次的需求，描述为什么要开发系统。</li><li>Eg.在系统使用3个月后，销售额度应该提高20%(期望，没有从软件角度进行描述，业务需求)</li></ol></li><li>用户需求：<ol type="1"><li>执行具体任务的用户对系统所能完成任务的期望，描述了系统能帮用户做什么(直接用户、间接用户)</li><li>Eg.在系统要帮助收银员完成销售处理</li></ol></li><li>系统级需求<ol type="1"><li>需求分析模型：用户对<strong>系统行为的期望</strong>，每个系统级需求反映了<strong>一次外界与系统的交互行为</strong>，或者<strong>系统的一个实现细节</strong>(和用户需求有着很大的区别)</li><li>Eg.在接到客户经理的请求后，系统应该为客户经理提供所有会员的个⼈信息</li></ol></li></ol><h2 id="需求分类">需求分类</h2><p><img src="https://s2.loli.net/2022/06/09/XEFlWwQOrstNRkq.png"></p><ol type="1"><li>需求<ol type="1"><li>项目需求(人的数量、计划成本、时间)<ul><li>R5：项⽬的成本要控制在60万元人民币以下。</li><li>R6：项⽬要在6个月内完成。</li></ul></li><li>过程需求(人的分工、合作、方法、工具)<ul><li>R7：在开发中，开发者要提交软件需求规格说明文档、设计描述文档和测试报告。</li><li>R8：项目要使用持续集成⽅法进行开发。</li></ul></li><li>系统需求<ol type="1"><li>软件需求</li><li>硬件需求</li><li>其他需求</li></ol></li><li>其他需求<ul><li>R9：系统要购买专用服务器，其规格不低于….。</li><li>R10：系统投⼊使⽤时，需要对⽤户进⾏1个星期的集中培训。</li></ul></li></ol></li><li>不切实际的需求<ul><li>R11：系统要分析会员的购买记录，预测该会员将来⼀周和⼀个月内、会购买的商品；(技术上不可行)</li><li>R12：系统要能够对每月的出入库以及销售行为进行标准的财务分析；(在有限的资源条件下可行)</li><li>R13：在使用系统时，收银员必须要在2个⼩时内完成一个销售处理的所有操作。(超出了软件所影响的问题域范围)</li></ul></li></ol><h2 id="软件需求分类">软件需求分类</h2><ol type="1"><li>功能需求：和系统主要共作相关的需求，即在不考虑物理约束的情况下，用户希望系统所能够执行的活动，这些活动可以帮助用户完成任务。<strong>功能需求主要表现为系统和环境之间的行为交互</strong>。<ol type="1"><li>Eg.在接到客户经理的请求后，系统应该为客户经理提供所有会员的个人信息。</li></ol></li><li>数据需求(属于功能需求的一种,DR)：<strong>功能需求</strong>的补充：如果在功能需求部分明确定义了<strong>相关的数据结构</strong>，那么就不需要再行定义数据需求。数据需求是需要在数据库、⽂件或者其他介质中存储的数据描述，通常包括下列内容：<ul><li>各个功能使用的<strong>数据信息</strong>；</li><li>使用频率；</li><li>可访问性要求；</li><li><strong>数据实体及其关系</strong>；</li><li>完整性约束；</li><li><strong>数据保持</strong>要求。</li><li>Eg.系统需要存储的数据实体及其关系为图6-14的内容。(数据实体及其关系)</li><li>Eg.系统需要存储1年内的销售记录和退货记录。(数据保持)</li></ul></li><li>性能需求：系统整体或系统组成部分应该拥有的性能特征，例如CPU使用率、内存使用率等。<ol type="1"><li>速度：系统完成任务的时间(所有用户查询必须在10s内完成)</li><li>容量：系统能存储的数据量(系统因该能够存储至少100万个销售信息)</li><li>吞吐量：系统在连续的时间内完成的事务数量(解释器每分钟应该能够至少解析5000条没有错误的语句)</li><li>负载：系统可以承载的并发工作量(系统应该允许50个营业服务器同时从集中服务器上进行数据的上传或下载)</li><li>实时性：严格的实时要求(系统监测到异常时，监视器必须在0.5s内发出警报，和故障警报不一样，故障不是系统的正常功能)</li></ol></li><li>质量需求(QA)：系统为了满足<strong>规定的及隐含</strong>的所有要求而需要具备的要素称为质量<ol type="1"><li>可靠性：在规格时间间隔内和规定条件下，系统或部件执行所要求能力的能力。(在进⾏数据的下载和上传中，如果网络故障，系统不能出现故障。能不能检测网络中断，并且进行恢复)</li><li>可用性：软件系统在投⼊使用时可操作和可访问的程度或能实现其指定系统功能的概率。(系统的可用性要达到98%)</li><li>安全性：软件组织对其程序和数据进⾏未授权访问的能力，未授权的访问可能是有意，也可能是无意的。(VIP顾客只能查看⾃⼰的个⼈信息和购买记录)</li><li>可维护性：软件系统或部件能修改以排除故障、改进性能或其他属性或适应变更了的环境的容易程度，包括可修改性(Modiﬁability)和可扩展性(Extensibility)。(如果系统要增加新的特价类型，要能够在2个人月内完成。)</li><li>可移植性：系统或部件能从⼀种硬件或软件环境转换⾄另外⼀种环境的特性。(集中服务器要能够在1人月内从Window7操作系统更换到Solaris 10操作系统。)</li><li>易用性：与⽤户使用软件所花费的努力及其对使用的评价相关的特性。(使⽤系统1个月的收银员进⾏销售处理的效率要达到10件商品/分钟。)</li><li>往往会有形容词和副词</li></ol></li><li>对外接口：系统和环境中其他系统之间需要建立的接口，包括硬件接口、软件接口、数据库接口等等。<ol type="1"><li>接口的用途</li><li>接口的输⼊输出</li><li>数据格式</li><li>命令格式</li><li>异常处理要求</li><li>Eg.注册使用Google Maps API</li></ol></li><li>约束：进⾏系统构造时需要遵守的约束，例如<strong>编程语言、硬件设施</strong>等<ol type="1"><li>系统开发及运行的环境(包括目标机器、操作系统、网络环境、编程语⾔、数据库管理系统等,Eg.系统使用Java语言进行开发)</li><li>问题域内的相关标准(包括法律法规、行业协定、企业规章等。)</li><li>商业规则:(用户在任务执⾏中的一些潜在规则也会限制开发⼈员设计和构建系统的选择范围)</li><li>Eg. 已过保质期的食品不能销售</li><li>Eg. 顾客可以使用美元付款</li></ol></li><li>注:需求的灵活性</li></ol><h1 id="第六章">第六章</h1><h1 id="用例图">用例图</h1><ol type="1"><li>用例:用例是"在系统(或者子系统或者类)和外部对象的<strong>交互</strong>当中所执行的行为序列的描述,包括<strong>各种不同的序列和错误的序列</strong>,它们能够联合提供⼀种<strong>有价值的服务</strong>"[Rumbaugh2004]。</li><li>图例:<ol type="1"><li>⽤例:椭圆</li><li>参与者:小人，是系统或其他系统对要开发的系统所扮演的角色。</li><li>关系:简单的就是一条直线，包括相关、泛化关系、包含关系和继承关系。</li><li>系统边界:是一个框</li></ol></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt6/8.png"></p><ol start="3" type="1"><li>用例图的建立步骤<ol type="1"><li>目标分析与解决方向的确定:需要实现什么，属于需求</li><li>寻找参与者:</li><li>寻找用例:</li><li>细化用例:判断标准是用例描述了为应对<strong>一个业务事件</strong>，由<strong>一个用户</strong>发起，并在<strong>一个连续时间段</strong>内完成，可以<strong>增加业务价值</strong>的任务。</li></ol></li><li>注意:<ol type="1"><li>不要将用例细化为没有独立业务价值的单个操作:例如,不要将用户管理细化为增加、修改和删除三个更⼩的用例,因为它们要联合起来才能体现出业务价值。</li><li>不要将同⼀个业务目标细化为不同用例:例如<strong>特价策略制定和赠送策略制定</strong>。</li><li>不要将没有业务价值(而是技术实现需要)的内容作为用例:常见的错误有<strong>登录</strong>(应该描述为安全性质量需求)、"数据验证/输入/输出数据检查"(应该描述为数据需求或者业务规则)、"连接数据库"(属性软件内部实现⽽不是需求)、网络传输等。</li><li>不要将单个步骤细化为用例</li><li>不要将片面的一个方面细化为用例</li></ol></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/summary/1.png"></p><h1 id="分析类概念类图">分析类/概念类图</h1><ol type="1"><li>图例:<ol type="1"><li>对象<ul><li>标识符:对象自治、对象请求写作</li><li>状态:存储数据，如密码、名称</li><li>行为:利用数据做什么</li></ul></li><li>类:对象集合的抽象</li><li>链接(link)(dependency)<ul><li>对象之间的互相协作的关系</li><li>描述了对象之间的物理或业务联系</li></ul></li><li>关联<ul><li>对象之间链接的抽象</li><li>聚合与组合，聚合集合可以为空</li></ul></li><li>继承:泛化关系</li></ol></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt6/18.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt6/19.png"></p><ol start="2" type="1"><li>建立步骤<ol type="1"><li>对每个用例文本描述，尤其是场景描述，建⽴<strong>局部</strong>的概念类图<ul><li>根据用例的⽂本描述，<strong>识别候选类</strong>(名词分析法)</li><li><strong>筛选候选类</strong>，确定概念类(状态和行为)<ul><li>状态和行为:概念类</li><li>状态:其他概念类的行为</li><li>行为:需求是否遗漏</li><li>无状态无行为:完全剔除</li></ul></li><li><strong>识别关联</strong></li><li><strong>识别重要属性</strong></li></ul></li><li>将所有用例产⽣的局部概念类图进⾏合并，建⽴软件系统的整体概念类图</li><li>自己注:先画关联关系，再添加类的属性</li></ol></li><li>候选类识别(行为 + 状态)<ol type="1"><li>行为分析</li><li>名词分析</li><li>CRC</li></ol></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/summary/2.png"></p><h1 id="系统顺序图">系统顺序图</h1><ol type="1"><li>图例：</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt6/26.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt6/27.png"></p><ol start="2" type="1"><li>系统顺序图图例:<ol type="1"><li>alt一定要选(多选一):<strong>注意，每一种可选分支之间要用虚线分割，而且在表示执行态的圆柱上面要写监护条件，放在[]里面。</strong></li><li>opt一定要选(选择0或者1)</li><li>loop:表示循环，在旁边使用[]书写循环条件</li></ol></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt6/28.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt6/29.png"></p><ol start="3" type="1"><li>步骤:<ol type="1"><li>确定上下文环境</li><li>根据用例描述找到交互对象</li><li>按照用例描述中的流程顺序逐步添加消息</li></ol></li></ol><h1 id="状态图">状态图</h1><h2 id="状态图-1">状态图</h2><ol type="1"><li>图例:<ol type="1"><li>状态：一组可观察的情况，描述了一个系统在给定时间的行为</li><li>状态转换：从一个状态到另一个状态的转换</li><li>事件：使系统表现出某种可预测的行为形式的事件</li><li>行为：由于过渡而发生的过程</li></ol></li></ol><p><img src="https://s2.loli.net/2022/06/09/d3pFhezvlxX6TH7.png"></p><ol start="2" type="1"><li>步骤:<ol type="1"><li>确定上下文环境，明确状态主体和状态主题对应的上下文环境</li><li>识别状态：状态的主体表现出的一些稳定状态</li><li>建立状态转换：建立状态之间的转换。</li><li>补充详细信息，完善状态图</li></ol></li></ol><h1 id="第七章">第七章</h1><h1 id="为什么需要需求规格说明">为什么需要需求规格说明</h1><ol type="1"><li><strong>方便交流</strong>：软件开发过程中，<strong>子任务与人员</strong>之间存在错综复杂的关系，存在大量的沟通和交流，所以要编写软件开发中要编写不同类型的文档，每种文档都是针对项目中需要广泛交流的内容。因为<strong>软件需求</strong>需要进行<strong>广泛交流</strong>，所以要把需求文档化。</li><li><strong>跟踪和度量</strong>：需求规格说明是在<strong>软件产品的角度以系统级需求列表的方式</strong>描述软件系统解决方案，书写需求规格说明，可以建立管理控制的基线，方便任务分配，制定工作计划，进行跟踪和度量。</li><li><strong>过程管理</strong>：在实验中，需求规格的重要性不只体现在结果上，还包括中间过程，在书写需求规格过程中，才真正把问题域的问题和分析模型的成果转化为系统级需求，方便小组成员真正明确需求，个人认为在这个阶段包含一部分的需求在发现和完整化</li></ol><h1 id="对给定的需求示例例判定并修正其错误">对给定的需求示例例，判定并修正其错误</h1><ol type="1"><li>技术文档写作要点(简洁，精确，易读，易修改)；<ol type="1"><li>简洁:动词名词+辅助词，不要使用复杂长句、形容词和副词。</li><li>精确:不能产生起义或无法理解。</li><li>易读(查询)：有效使⽤引言、目录、索引等能够增强⽂档易读性的⽅法，使⽤系统化的方式组织内容信息，提供⽂档内容的可读性。</li><li>易修改：使用相同的语句格式组织相关联或相似的信息；使用列表组织独立、并列的信息；使用编号表达繁杂信息之间的关系。引用而不是重复</li></ol></li><li>需求书写要点(使用用户术语，可验证，可行性)；</li><li>需求规格说明文档书写要点(充分利用标准的文档模板，保持所以内容位置得当；保持文档内的需求集具有完备性和一致性；为需求划分优先级)</li></ol><p><img src="https://s2.loli.net/2022/06/09/oMLRDnd6y9H7bAX.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. "After the payment process is complete, the relevant information should be appended to a log ﬁle."模糊的</span><br><span class="line">2. "The system should be constructed so that it will be easy to add new functionality in the future."(b)</span><br><span class="line">模糊的</span><br><span class="line">3. "The price of a gasoline purchase is computed as the price per gallon for the type of gas purchased, multiplied by the number of gallons purchased (use two decimal points for representing fractions of gallons)." 合格的</span><br><span class="line">4. "The system should be available 24 hours a day, 7 days a week. 不现实的</span><br></pre></td></tr></table></figure><h1 id="对给定的需求示例例设计功能测试用例例">对给定的需求示例例，设计功能测试⽤用例例</h1><ol type="1"><li>以需求为线索，开发测试用例套件，确定输入/输出，开发测试用例。</li></ol><p><img src="https://s2.loli.net/2022/06/09/djuEiKZrAl5Vc4m.png"></p><ol start="2" type="1"><li>制定测试用例</li></ol><h1 id="第八章">第八章</h1><h1 id="软件设计">软件设计</h1><ol type="1"><li>软件设计是指关于软件对象的设计，是一种设计活动。软件设计既指软件对象实现的规格说明，又指这个规格说明产生的过程。</li><li>软件设计活动以需求开发的制品(需求规格说明和分析模型)为基础，构建软件设计方案描述和原型，为后期的构造活动提供规划或蓝图。</li><li>软件设计兼具工程性和艺术性，由于软件系统的可变性，软件设计具有演化性，也因为软件设计的过程实际上就是一系列决策发生的过程，软件设计具有决策性</li></ol><h2 id="软件设计的核心思想">软件设计的核心思想</h2><ol type="1"><li>分解:横向上将系统分割为几个相对简单的子系统与子系统之间的关系</li><li>抽象:在纵向上聚焦个子系统的接口(这里的接口与实现相对)，可以分离接口和实现，使得人们更好的关注软件系统本质，降低复杂度</li></ol><h2 id="软件设计的核心层次三层">软件设计的核心层次（三层）</h2><ol type="1"><li>高层设计：基于反映软件高层抽象的构件设计，描述系统的高层结构、关注点和设计决策。<ol type="1"><li><strong>部件</strong>承载了系统主要的<strong>计算与状态</strong></li><li><strong>连接件</strong>承载部件之间的<strong>交互</strong></li><li>部件与连接件都是抽象的类型定义(就像类定义)，它们的实例(就像类的对象实例)组织构成软件系统的整体结构，<strong>配置</strong>将它们的实例连接起来</li></ol></li><li>中层设计：更加关注组成构件的模块的设计、导入/导出、过程之间调用关系或者类之间的协作，模块划分<strong>隐藏</strong>⼀些程序片段(数据结构+算法)的细节，暴露接口于外界</li><li>低层设计：深入模块和类的内部，关注具体的数据结构、算法、类型、语句和控制结构等</li></ol><h1 id="第九十章">第九、十章</h1><h1 id="体系结构的概念">体系结构的概念</h1><ul><li>软件体系结构是由部件，连接件，配置组成的。</li></ul><ol type="1"><li><strong>部件</strong>是软件体系结构的基本组成单位之⼀,承载系统的主要功能,包括处理与数据;<ol type="1"><li>原始部件</li><li>复合部件</li></ol></li><li><strong>连接件</strong>是软件体系结构的另一个基本组成单位,定义了部件间的交互,是连接的抽象表示;<ol type="1"><li>原始连接件</li><li>复合连接件:是由更细粒度的部件和连接件组成。</li></ol></li><li><strong>配置</strong>是对"形式"的发展,定义了"部件"以及"连接件"之间的关联方式,将它们组织成系统的总体结构</li></ol><h1 id="体系结构的风格的优缺点">体系结构的风格的优缺点</h1><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt9/12.png"></p><ol type="1"><li>主程序子程序风格<ol type="1"><li>优点:<ol type="1"><li>流程清晰，易于理解</li><li>强控制性</li></ol></li><li>缺点:<ol type="1"><li>程序调用是一种强耦合的连接方式，非常依赖接口</li><li>程序调用的连接方式限制了部件之间的数据交互，可能会导致不必要的公共耦合。</li></ol></li><li>适用：可以将系统功能依层次分解为多个顺序执行步骤的系统</li></ol></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt9/20.png"></p><ol start="2" type="1"><li>面向对象风格<ol type="1"><li>优点:<ol type="1"><li>内部实现的可修改性(隐藏内部实现)</li><li>易开发、易理解、易复用的结构组织(契合模块化思想)</li></ol></li><li>缺点:<ol type="1"><li>接口的耦合性(由于方法调用机制，接口的耦合性无法消除)</li><li>标识的耦合性(一个对象要和其他对象交互，必须知道标识符)</li><li>副作用(难以理解、高耦合性以及数据的不一致视图)</li></ol></li><li>适用：适用于那些能够基于数据信息分解和组织的软件系统。</li></ol></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt9/21.png"></p><ol start="3" type="1"><li>分层风格<ol type="1"><li>优点:<ol type="1"><li>设计机制清晰，易于理解(抽象层次分离，隔离复杂度)</li><li>支持并行开发(层次之间遵守程序稳定的接口)</li><li>更好的可复用性与内部可修改性(接口的稳定性，不同层次的部件能够互相替代)</li></ol></li><li>缺点：<ol type="1"><li>交互协议难以修改(可能需要改变所有的层次，接口具有强耦合性)</li><li>性能损失(禁止跨层调用)</li><li>难以确定层次数量和粒度</li></ol></li><li>应用：适用于主要功能是在不同抽象层次上进行任务分解的复杂处理，能建立稳定的不同抽象层次之间的稳定交互协议，没有很高的实时性能要求的系统</li></ol></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt9/22.png"></p><ol start="4" type="1"><li>MVC风格:<ol type="1"><li>优点:<ol type="1"><li>易开发性:抽象了业务逻辑，表现和控制机制清晰，易于开发</li><li>视图和控制的可修改性</li><li>适宜于网络系统开发的特征(MVC不仅允许视图和控制的可修改性,⽽且其对业务逻辑、表现和控制的分离使得⼀个模型可以同时建⽴并保持<strong>多个视图</strong>,这⾮常适⽤于⽹络系统开发)</li></ol></li><li>缺点:<ol type="1"><li>复杂性：MVC将用户的任务分解成了表现、控制和模型三个部分，这会增加系统的复杂性，不利于理解任务实现。</li><li>模型修改困难，视图和控制都要依赖于模型</li></ol></li></ol></li></ol><h1 id="体系结构设计的过程">体系结构设计的过程</h1><ol type="1"><li>分析关键需求和项目约束：分析用例文档和需求规格说明书(包含需求规格和项目约束)。注意既要考虑功能性需求，又要考虑非功能性需求，甚至很大意义上体系结构设计是为了满足<strong>非功能性需求</strong>。</li><li>通过选择体系结构风格：选择分层风格(信息系统、并行开发、非web应用)，进行评审。</li><li>进⾏软件体系结构逻辑(抽象)设计：产生逻辑包图</li><li>依赖逻辑设计进行软件体系结构(实现)设计：产生物理类图</li><li>完善体系结构设计：关键类图，持久化数据格式的定义等</li><li>添加构件接口：包、重要文件的创建，定义接口</li><li>迭代过程3-6分析关键需求和项目约束：分析用例文档和需求规格说明书(包含需求规格和项目约束)。注意既要考虑功能性需求，又要考虑非功能性需求，甚至很大意义上体系结构设计是为了满足<strong>非功能性需求</strong>。通过选择体系结构风格：选择分层风格(信息系统、并行开发、非web应用)，进行评审。进⾏软件体系结构逻辑(抽象)设计：产生逻辑包图依赖逻辑设计进行软件体系结构(实现)设计：产生物理类图完善体系结构设计：关键类图，持久化数据格式的定义等添加构件接口：包、重要文件的创建，定义接口迭代过程3-6</li></ol><h1 id="包的原则">包的原则</h1><ol type="1"><li>重用发布等价原则(REP):重用的粒度就是发布的粒度<ol type="1"><li>为重用器分组组件(类)</li><li>单个类通常是不可重用的：几个协作类组成一个包</li><li>包中的类应构成可重用和可释放的模块：模块提供一致的功能</li><li>减少重新使用者的工作</li><li>和相关联的类一起发布，而不是单独进行发布</li></ol></li><li>共同封闭原则(CCP):包中所有类对于同一类性质的变化应该是共同封闭的，一个变化若对一个包产生影响，则对该包中的所有类产生影响，而对于其他包不造成任何影响。<ol type="1"><li>最小化修改都程序员的影响</li><li>包尽可能大，和CRP互斥</li><li>方法<ol type="1"><li>将具有相似闭包的类分组</li><li>面向可以预期的变更封闭包</li><li>将更改限制为几个软件包</li><li>降低包装释放频率</li><li>减少程序员的工作量</li><li>只对可预测的变更有作用，不可预测的变更会为系统带来极大的破坏能力，并且无法进行预测。</li></ol></li></ol></li><li>共同重用原理(CRP):一个包中的所有类应该是能够共同重用的。<ol type="1"><li>s根据常见重用对类进行分组：避免给用户不必要的依赖</li><li>遵循CRP通常会导致软件包拆分：获得更多，更小，更专注的包</li><li>减少重新使用者的工作</li><li>包尽可能小，和CCP互斥</li></ol></li><li>无环依赖原则(ADP):在包的依赖关系图中不能存在环。必须是有向无环图。<ol type="1"><li>第一种单环，DIP依赖倒置即可解决</li><li>第二种互环，A依赖B，且B依赖A</li></ol></li></ol><p><img src="https://s2.loli.net/2022/06/09/CMAJc4EUbKnPqdy.png"></p><ol start="5" type="1"><li>稳定依赖原则(SDP):朝着稳定(别人的修改不影响我)的方向进行依赖<ol type="1"><li>Ca:输入耦合度，包外部依赖本包的类个数</li><li>Ce:输出耦合度，包内部依赖于包外部的类的个数</li><li>不稳定性: <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.912ex;" xmlns="http://www.w3.org/2000/svg" width="10.421ex" height="2.931ex" role="img" focusable="false" viewBox="0 -892.5 4606.1 1295.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mo" transform="translate(781.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(1837.6,0)"><g data-mml-node="mrow" transform="translate(950.8,394) scale(0.707)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(760,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(760,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(1226,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(2004,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(2764,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g><rect width="2528.5" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>, I越小越稳定</li></ol></li></ol><p><img src="https://s2.loli.net/2022/06/09/CMAJc4EUbKnPqdy.png"></p><ol start="6" type="1"><li>稳定抽象原则(SAP):包的抽象程度应该和其稳定程度一致<ol type="1"><li>稳定的包应该是抽象的包</li><li>不稳定的包应该是具体的包</li><li>Na:包中抽象类个数</li><li>Nc:包中所有类个数</li><li>抽象度<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.798ex;" xmlns="http://www.w3.org/2000/svg" width="7.976ex" height="2.782ex" role="img" focusable="false" viewBox="0 -877 3525.5 1229.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(1027.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(2083.6,0)"><g data-mml-node="mrow" transform="translate(220,394) scale(0.707)"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mi" transform="translate(888,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g><g data-mml-node="mrow" transform="translate(253.9,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mi" transform="translate(888,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g><rect width="1202" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span></li></ol></li><li>前三条描述的是依赖性，后三条描述的是耦合性</li><li>包设计过程:<ol type="1"><li>开发包(构件)设计</li><li>运⾏时的进程</li><li>物理部署</li></ol></li></ol><h1 id="体系结构构件之间接口的定义">体系结构构件之间接口的定义</h1><ol type="1"><li>首先确定模块对外接口</li><li>然后确定接口的规范</li></ol><p><img src="https://s2.loli.net/2022/06/17/HD3Q9tAugSy7KZR.png"> <img src="https://s2.loli.net/2022/06/17/muogeGBFyNIL6PW.png"></p><h1 id="体系结构开发集成测试用例">体系结构开发集成测试用例</h1>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
          <category> 软件工程与计算2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
            <tag> 复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序开发</title>
      <link href="/2022/06/02/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
      <url>/2022/06/02/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="微信小程序-计算机书籍简介及推荐">微信小程序计算机书籍简介及推荐</h1><h2 id="项目地址">项目地址</h2><p>https://git.weixin.qq.com/wx_wxdcab629e85115972/wechat.git</p><h2 id="基础">基础</h2><p>https://www.bilibili.com/video/BV1nE41117BQ</p><h2 id="tfm">TFM</h2><p>https://developers.weixin.qq.com/miniprogram/dev/framework/</p><p>https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/getting-started.html</p><h2 id="组件库">组件库</h2><h3 id="lin-ui">lin-ui</h3><p>https://github.com/TaleLin/lin-ui</p><p>使用<strong>最新</strong>的调试基础库</p><p><strong>在 miniprogram 文件夹下</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm init -y</span><br><span class="line">$ npm install lin-ui</span><br></pre></td></tr></table></figure><p>然后在 IDE 中构建 npm</p><h3 id="colorui">ColorUI</h3><p>http://docs.xzeu.com/#/</p><h2 id="用例描述">用例描述</h2><h3 id="主页">主页</h3><p>首页推送</p><h3 id="分类">分类</h3><p>分类</p><p>搜索栏</p><h3 id="我的">我的</h3><p>收藏</p><p>历史记录</p><h3 id="后端">后端</h3><p>书籍数据</p><p>用户数据</p><p>评论系统</p><h3 id="数据收集">数据收集</h3><p>https://dms.cloud.tencent.com/#/login</p><ul><li>用户名 root</li><li>密码 XpPdc6rG</li></ul><h2 id="后台">后台</h2><p>使用微信云托管</p><ul><li>控制台</li></ul><p>https://cloud.weixin.qq.com/cloudrun/console</p><ul><li>代码</li></ul><p>https://github.com/VGalaxies/wxcloudrun-golang</p><h3 id="api-约定">API 约定</h3><p>参考 https://github.com/VGalaxies/wxcloudrun-golang#readme</p><h2 id="前端调用参考">前端调用参考</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getBook</span>(<span class="params"></span>) {</span><br><span class="line">wx.<span class="property">cloud</span></span><br><span class="line">  .<span class="title function_">callContainer</span>({</span><br><span class="line">    <span class="attr">config</span>: {</span><br><span class="line">      <span class="attr">env</span>: <span class="string">"prod-8gt4mz04386985ef"</span>,</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">path</span>: <span class="string">"/api/book"</span>,</span><br><span class="line">    <span class="attr">header</span>: {</span><br><span class="line">      <span class="string">"X-WX-SERVICE"</span>: <span class="string">"golang-6i3q"</span>,</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">method</span>: <span class="string">"POST"</span>,</span><br><span class="line">    <span class="attr">data</span>: {</span><br><span class="line">      <span class="attr">action</span>: <span class="string">"exact"</span>,</span><br><span class="line">      <span class="attr">hint</span>: <span class="string">"深入理解计算机系统"</span>,</span><br><span class="line">    },</span><br><span class="line">  })</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">resp</span>) =&gt;</span> {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(resp);</span><br><span class="line">  })</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">  });</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> 互联网计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 互联网计算 </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络安全</title>
      <link href="/2022/06/01/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
      <url>/2022/06/01/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="network-security">Network Security</h1><h1 id="网络安全问题概述">网络安全问题概述</h1><ol type="1"><li>计算机网络上的通信面临以下的四种威胁：</li></ol><table><thead><tr class="header"><th>威胁</th><th>解释</th><th>攻击类型</th></tr></thead><tbody><tr class="odd"><td>截获</td><td>从网络上窃听他人的通信内容。</td><td>被动攻击</td></tr><tr class="even"><td>中断</td><td>有意中断他人在网络上的通信。</td><td>主动攻击</td></tr><tr class="odd"><td>篡改</td><td>故意篡改网络上传送的报文。</td><td>主动攻击</td></tr><tr class="even"><td>伪造</td><td>伪造信息在网络上传送。</td><td>主动攻击</td></tr></tbody></table><h2 id="被动攻击和主动攻击">被动攻击和主动攻击</h2><p><img src="https://s2.loli.net/2022/06/01/mYQnaLHAgDb41zG.png"></p><h3 id="被动攻击">被动攻击</h3><ol type="1"><li>截获信息的攻击称为被动攻击(并不改变通讯的过程)</li><li>在被动攻击中，攻击者只是观察和分析某一个协议数据单元PDU而不干扰信息流。</li></ol><h3 id="主动攻击">主动攻击</h3><ol type="1"><li>更改信息和拒绝用户使用资源的攻击称为主动攻击。(修改了通信的构成)</li><li>主动攻击是指攻击者对某个连接中通过的PDU进行各种处理(理解PDU后)<ol type="1"><li>更改报文流</li><li>拒绝报文服务</li><li>伪造连接初始化</li></ol></li></ol><h2 id="计算机网络通信安全的目标">计算机网络通信安全的目标</h2><ol type="1"><li>防止析出报文内容</li><li>防止通信量分析(通信的习惯)</li><li>检测更改报文流</li><li>检测拒绝报文服务</li><li>检测伪造初始化连接</li></ol><h2 id="报文应该具有的性质">报文应该具有的性质</h2><ol type="1"><li>保密性</li><li>完整性</li><li>可用性</li><li>鉴别性</li><li>不可否认(抵赖)性:确认是特定的发送方</li></ol><h2 id="恶意程序malicious-program">恶意程序(malicious program)</h2><ol type="1"><li>计算机病毒:会"传染"其他程序的程序，"传染"通过修改其他程序来把自身或其变种复制进去而完成。</li><li>计算机蠕虫:通过网络的通信功能将自身从一个结点发送到另一个结点并启动运行的程序。(特定场景才能使用，出现上商业行为)</li><li>特洛伊木马:一种程序，它执行的功能超出所声称的功能。运作木马获得特殊的权限<ol type="1"><li>逻辑程序:逻辑下载程序</li><li>控制器程序:远程控制</li></ol></li><li>逻辑炸弹:一种当运行环境满足某种特定条件时执行其他特殊功能的程序。</li></ol><h2 id="计算机网络安全的内容">计算机网络安全的内容</h2><ol type="1"><li>保密性</li><li>安全协议的设计</li><li>访问控制</li></ol><h1 id="一般的数据加密模型">一般的数据加密模型</h1><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec11/2.png"></p><ol type="1"><li>不确定有没有人修改:使用密文发送</li><li>最早的是<strong>凯撒密码</strong>:<ol type="1"><li>加密：明文按照数字mod的值进行偏移，得到密文</li><li>解密：密文反向偏移数字mod的值进行偏移，得到明文</li></ol></li></ol><h2 id="密码相关的重要概念">密码相关的重要概念</h2><ol type="1"><li><strong>密码编码学</strong>(cryptography)是密码体制的设计学(设计密码)</li><li><strong>密码分析学</strong>(cryptanalysis)则是在未知密钥的情况下从密文推演出明文或密钥的技术。密码编码学与密码分析学合起来即为密码学(cryptology)。</li><li>如果不论截取者获得了多少密文，但在密文中都没有足够的信息来唯一地确定出对应的明文，则这一密码体制称为<strong>无条件安全</strong>的，或称为<strong>理论上是不可破</strong>的。</li><li>如果密码体制中的密码不能被可使用的计算资源破译，则这一密码体制称为在<strong>计算上安全</strong>的。(目前一般的密码体系能够达到的标注)</li></ol><h1 id="对称密钥和公钥密码体制">对称密钥和公钥密码体制</h1><h2 id="所谓常规密钥密码体制即加密密钥与解密密钥是相同的密码体制">所谓常规密钥密码体制，即加密密钥与解密密钥是<strong>相同</strong>的密码体制。</h2><ol type="1"><li>这种加密系统又称为<strong>对称密钥系统</strong>。</li></ol><h3 id="数据加密标准-des-data-encryption-standard">数据加密标准 DES DataEncryption Standard</h3><ol type="1"><li>数据加密标准DES属于常规密钥密码体制，是一种分组密码(对称加密算法)</li><li>在加密前，先对整个明文进行分组。每一个组长为64位。</li><li>然后对每一个64位二进制数据进行加密处理，产生一组64位密文数据。</li><li>最后将各组密文串接起来，即得出整个的密文。</li><li>使用的密钥为64位(实际密钥长度为56位，有8位用于奇偶校验)。</li><li>对于64位密码有编排的过程，详细自己查找学习</li><li>密钥长度不会太长，算法复杂度比较低</li></ol><h3 id="des-的保密性">DES 的保密性</h3><ol type="1"><li>DES的保密性仅取决于对密钥的保密，而算法是公开的。尽管人们在破译DES方面取得了许多进展，但至今仍未能找到比穷举搜索密钥更有效的方法。</li><li>DES是世界上第一个公认的实用密码算法标准，它曾对密码学的发展做出了重大贡献。</li><li>目前较为严重的问题是DES的密钥的长度(算力提升)<ol type="1"><li>由于算力的提升，破解DES所需的时间进一步降低，不再是计算上安全的了。</li><li>通过增加DES密钥的长度来提高安全性。</li></ol></li><li>现在已经设计出来搜索DES密钥的专用芯片(硬件层面的解决方案)</li></ol><h2 id="公钥密码体制">公钥密码体制</h2><ol type="1"><li>公钥密码体制使用<strong>不同的加密密钥与解密密钥</strong>，是一种"由已知加密密钥推导出解密密钥在<strong>计算上是不可行</strong>的"密码体制。(非对称密码体系)<ol type="1"><li>经典算法:密钥E和N，明文是一个数字，加密时用明文做E的指数次方之后modN得到密文C，解密是D和N，密文C做D次方再mod N得到明文</li><li>例子:密钥是7和187，明文88，88的7次方mod187 =11(密文)，解密密钥23和187，11的23次方mod187得到88(明文)</li></ol></li></ol><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="29.885ex" height="2.468ex" role="img" focusable="false" viewBox="0 -841 13209.1 1091"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(1000,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1389,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">明</text></g><g data-mml-node="mi" transform="translate(2389,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">文</text></g><g data-mml-node="msup" transform="translate(3389,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(422,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path></g></g></g><g data-mml-node="mtext" transform="translate(4214.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(4464.6,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5342.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(5827.6,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mtext" transform="translate(6347.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mn" transform="translate(6597.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(500,0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(1000,0)"></path></g><g data-mml-node="mo" transform="translate(8375.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(9431.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(10431.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(10820.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">密</text></g><g data-mml-node="mi" transform="translate(11820.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">文</text></g><g data-mml-node="mo" transform="translate(12820.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="30.685ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 13562.7 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(1000,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1389,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">密</text></g><g data-mml-node="mi" transform="translate(2389,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">文</text></g><g data-mml-node="msup" transform="translate(3389,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(422,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"></path></g></g></g><g data-mml-node="mtext" transform="translate(4568.1,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(4818.1,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5696.1,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(6181.1,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mtext" transform="translate(6701.1,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mn" transform="translate(6951.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(500,0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(1000,0)"></path></g><g data-mml-node="mo" transform="translate(8728.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(9784.7,0)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(10784.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(11173.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">明</text></g><g data-mml-node="mi" transform="translate(12173.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">文</text></g><g data-mml-node="mo" transform="translate(13173.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p><ol start="2" type="1"><li>公钥密码体制的产生主要是因为两个方面的原因，一是由于常规密钥密码体制的密钥分配问题，另一是由于对数字签名的需求。<ol type="1"><li>一个机构可以发送自己的公钥，保留自己的密钥。接收者受到密钥加密的就知道是谁发送的，保证机构可以发送安全认证，接受者使用公钥解密知道是谁发送的，做到密钥的分配</li><li>私钥加密的是机构的签名，大量数据传输使用对称密钥体系传输，公钥发送比较少的数据，因为公钥密码体系算法复杂度比较高，加密的时候是很多位的明文，计算量太大。</li></ol></li><li>现有最著名的公钥密码体制是RSA体制，它基于数论中大数分解问题的体制，由美国三位科学家Rivest，Shamir和Adleman于1976年提出并在1978年正式发表。</li></ol><h3 id="公钥算法的例子">公钥算法的例子</h3><p><img src="https://s2.loli.net/2022/06/01/KC71ruDN5i2YoxR.png"></p><ol type="1"><li>在公钥密码体制中，加密密钥(即公钥)PK是公开信息，而解密密钥(即私钥或秘钥)SK是需要保密的</li><li>加密算法E和解密算法D也都是公开的</li><li>虽然SK是由PK决定的，但却不能根据PK计算出SK(单向的)</li><li>公钥和私钥是成对生成的</li></ol><h3 id="公钥算法的特点">公钥算法的特点</h3><ol type="1"><li>发送者A用B的公钥<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="5.022ex" height="1.885ex" role="img" focusable="false" viewBox="0 -683 2219.7 833"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="msub" transform="translate(751,0)"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="TeXAtom" transform="translate(882,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g></g></g></g></g></svg></mjx-container></span>对明文X加密(E运算)后，在接收者B用自己的私钥<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="4.782ex" height="1.934ex" role="img" focusable="false" viewBox="0 -705 2113.7 855"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="msub" transform="translate(645,0)"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="TeXAtom" transform="translate(882,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g></g></g></g></g></svg></mjx-container></span>解密(D 运算)，即可恢复出明文：<ul><li><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.579ex;" xmlns="http://www.w3.org/2000/svg" width="33.19ex" height="2.276ex" role="img" focusable="false" viewBox="0 -750 14669.9 1006.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="TeXAtom" transform="translate(861,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="msub" transform="translate(645,0)"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="mi" transform="translate(882,-150) scale(0.707)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(2405.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2794.6,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mo" transform="translate(3557.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(4224.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(5280.2,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="TeXAtom" transform="translate(861,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="msub" transform="translate(645,0)"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="mi" transform="translate(882,-150) scale(0.707)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(7685.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(8074.8,0)"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="TeXAtom" transform="translate(771,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="msub" transform="translate(751,0)"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="mi" transform="translate(882,-150) scale(0.707)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(10465.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(10854.3,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(11706.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(12095.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(12762.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(13817.9,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container></span></li></ul></li><li>解密密钥是接收者专用的秘钥，对其他人都保密。</li><li>加密密钥是公开的，但不能用它来解密，即<ul><li><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.579ex;" xmlns="http://www.w3.org/2000/svg" width="21.413ex" height="2.276ex" role="img" focusable="false" viewBox="0 -750 9464.7 1006.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="TeXAtom" transform="translate(861,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="msub" transform="translate(751,0)"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="mi" transform="translate(882,-150) scale(0.707)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(2480.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(2869.6,0)"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="TeXAtom" transform="translate(771,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="msub" transform="translate(751,0)"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="mi" transform="translate(882,-150) scale(0.707)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(5260.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5649.1,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(6501.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(6890.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(7556.9,0)"><path data-c="2260" d="M166 -215T159 -215T147 -212T141 -204T139 -197Q139 -190 144 -183L306 133H70Q56 140 56 153Q56 168 72 173H327L406 327H72Q56 332 56 347Q56 360 70 367H426Q597 702 602 707Q605 716 618 716Q625 716 630 712T636 703T638 696Q638 692 471 367H707Q722 359 722 347Q722 336 708 328L451 327L371 173H708Q722 163 722 153Q722 140 707 133H351Q175 -210 170 -212Q166 -215 159 -215Z"></path></g><g data-mml-node="mi" transform="translate(8612.7,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container></span></li></ul></li><li>加密和解密的运算可以对调，即(用私钥进行加密，意义有差别:这样子证明是B发送的，但是别人都知道公钥，相当于明文发送)<ul><li><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.579ex;" xmlns="http://www.w3.org/2000/svg" width="40.56ex" height="2.276ex" role="img" focusable="false" viewBox="0 -750 17927.4 1006.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="TeXAtom" transform="translate(771,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="msub" transform="translate(751,0)"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="mi" transform="translate(882,-150) scale(0.707)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(2390.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(2779.6,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="TeXAtom" transform="translate(861,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="msub" transform="translate(645,0)"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="mi" transform="translate(882,-150) scale(0.707)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(5185.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5574.2,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(6426.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(6815.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(7481.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(8537.7,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="TeXAtom" transform="translate(861,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="msub" transform="translate(645,0)"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="mi" transform="translate(882,-150) scale(0.707)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(10943.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(11332.3,0)"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="TeXAtom" transform="translate(771,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="msub" transform="translate(751,0)"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="mi" transform="translate(882,-150) scale(0.707)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(13722.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(14111.9,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(14963.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(15352.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(16019.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(17075.4,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container></span></li></ul></li><li>在计算机上可容易地产生成对的PK和SK</li><li>从已知的PK实际上不可能推导出SK，即从PK到SK是"计算上不可能的"</li><li>加密和解密算法都是公开的</li></ol><h3 id="应当注意">应当注意</h3><ol type="1"><li>任何加密方法的安全性取决于<strong>密钥的长度</strong>，以及<strong>攻破密文所需的计算量</strong></li><li>在这方面，公钥密码体制并不比传统加密体制更加优越</li><li>由于目前公钥加密算法的开销较大，在可见的将来还不会放弃传统的加密方法</li><li>公钥需要密钥分配协议，具体的分配过程并不比采用传统加密方法时更简单</li></ol><h1 id="数字签名">数字签名</h1><ol type="1"><li>数字签名必须保证以下三点：<ol type="1"><li>报文鉴别:接收者能够核实发送者对报文的签名</li><li>报文的完整性:发送者事后不能抵赖对报文的签名</li><li>不可否认:接收者不能伪造对报文的签名</li></ol></li><li>现在已有多种实现各种数字签名的方法。但采用<strong>公钥算法</strong>更容易实现</li></ol><h2 id="数字签名的实现">数字签名的实现</h2><p><img src="https://s2.loli.net/2022/06/01/RYdWsqETzViJe3U.png"></p><ol type="1"><li>因为除A外没有别人能具有A的私钥，所以除A外没有别人能产生这个密文。因此B相信报文X是A签名发送的。</li><li>若A要抵赖曾发送报文给B，B可将明文和对应的密文出示给第三者。第三者很容易用A的公钥去证实A确实发送X给B。</li><li>反之，若B将X伪造成X'，则B不能在第三者前出示对应的密文。这样就证明了B伪造了报文。</li></ol><h2 id="具有保密性的数字签名">具有保密性的数字签名</h2><p><img src="https://s2.loli.net/2022/06/01/wu6ZQvfIYxb451K.png"></p><ol type="1"><li>首先用自己的私钥进行签名，然后对密文用B的公钥加密</li><li>收到密文的，如果没有B的私钥，不能进行解密</li><li>然后用B的私钥解密，之后用A的公钥检验是A发送的，一般只用来传送对称密码，比较耗时。</li><li>保障获取公钥的过程</li></ol><h1 id="防火墙">防火墙</h1><ol type="1"><li>防火墙是由软件、硬件构成的系统，是一种特殊编程(ACL)的路由器，用来在两个网络之间实施接入控制策略。接入控制策略是由使用防火墙的单位自行制订的，为的是可以最适合本单位的需要。</li><li>防火墙内的网络称为<strong>可信赖的网络</strong>(trustednetwork)，而将外部的因特网称为<strong>不可信赖的网络</strong>(untrustednetwork)。</li><li>防火墙可用来解决内联网和外联网的<strong>安全问题</strong>。</li></ol><h2 id="防火墙在互连网络中的位置">防火墙在互连网络中的位置</h2><p><img src="https://s2.loli.net/2022/06/01/S723mD5jZh4dzi8.png"></p><ol type="1"><li>其实只用一个路由器就可以完成防火墙的划分。</li><li>例子中:应用网关，可以内部外部进行访问过滤。</li><li>优点:在防火墙中的外局域网和内局域网都可以放置一些服务器，由左侧过滤的路由器控制访问，而右侧的路由控制内部网络的访问，从而达成一个访问权限控制</li><li>内网络安全也是一个问题</li></ol><h2 id="防火墙的功能">防火墙的功能</h2><ol type="1"><li>防火墙的功能有两个：<strong>阻止和允许</strong>。<ol type="1"><li><strong>阻止</strong>就是阻止某种类型的通信量通过防火墙(从外部网络到内部网络，或反过来)：比如阻止内部的对迅雷的请求向外发送</li><li><strong>允许</strong>的功能与<strong>阻止</strong>恰好相反。</li></ol></li><li>防火墙必须能够识别通信量的各种类型。不过在<strong>大多数情况下防火墙的主要功能</strong>是<strong>阻止</strong>。</li></ol><h2 id="防火墙技术一般分为两类">防火墙技术一般分为两类</h2><ol type="1"><li><strong>网络级防火墙</strong>:用来防止整个网络出现外来非法的入侵。属于这类的有<strong>分组过滤和授权服务器</strong><ol type="1"><li>前者检查所有流入本网络的信息，然后拒绝不符合事先制订好的一套准则的数据</li><li>后者则检查用户的登录是否合法</li></ol></li><li><strong>应用级防火墙</strong>:从应用程序来进行接入控制。通常使用应用网关或代理服务器来区分各种应用，例如，可以只允许通过访问万维网的应用，而阻止FTP应用通过</li></ol><h2 id="访问控制列表aclaccess-control-lists">访问控制列表ACL(AccessControl Lists)</h2><ol type="1"><li>ACL是指令列表，它告诉路由器允许或拒绝什么类型的数据包。</li><li>如果要让路由器拒绝某些数据包，则必须配置ACL。否则，只要链路打开，路由器将接受并转发所有数据包</li><li>您可以根据以下情况允许或拒绝数据包：<ol type="1"><li>源地址</li><li>目的地址</li><li>上层的协议，比如TCP或UDP端口</li></ol></li></ol><h2 id="使用acl的前提下发送数据包">使用ACL的前提下，发送数据包</h2><ol type="1"><li>为了确定是允许还是拒绝数据包，请按顺序对ACL语句进行测试。<ol type="1"><li>当一个语句"匹配"时，<strong>不再评估任何语句</strong>。(前面的语句先匹配，处理掉)</li><li>允许或拒绝该数据包。</li></ol></li><li>ACL末尾有一个隐含的"denyany"语句:如果数据包与ACL中的任何语句都不匹配，则将其丢弃。</li></ol><h2 id="exampleacl-例子">Example:ACL 例子</h2><ol type="1"><li>如果我们有如下所述的ACL列表：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Permit packets from 192.168.100.1 to pass</span><br><span class="line">Permit packets from 192.168.100.2 to pass</span><br><span class="line">Deny packets from 192.168.100.3</span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>然后<ol type="1"><li>Packets from 192.168.100.1 will be forwarded</li><li>Packets from 192.168.100.3 will be denied</li><li>But how does the router process the packets from 192.168.100.4?denied(默认被匹配掉)</li></ol></li></ol><h2 id="路由器如何使用出站acl">路由器如何使用出站ACL</h2><ol type="1"><li>检查数据包是否可路由。如果是这样，请在路由表中查找路由</li><li>检查出站接口的ACL<ol type="1"><li>如果没有ACL，则将数据包切换出目标接口</li><li>如果是ACL，请按照ACL语句顺序检查数据包-根据匹配的条件拒绝或允许。</li></ol></li><li>如果没有语句匹配，会发生什么？拒绝所有没有匹配的包</li></ol><h2 id="出站标准acl流程">出站标准ACL流程</h2><p><img src="https://s2.loli.net/2022/06/01/RUYuqCG5xL4gaMO.png"></p><ol type="1"><li>收到packet，确定路由表确认路由表看能够转发</li><li>可以转发的话，进入ACL确认<ol type="1"><li>如果当前端口没有ACL配置，则直接进行转发</li><li>如果当前端口有ACL配置，开始匹配source地址(标准的ACL，只能对原地址进行判断)<ol type="1"><li>语句满足条件，<ol type="1"><li>deny</li><li>premit</li></ol></li><li>语句不满足条件，看下一条，如果没有下一条，则默认deny</li></ol></li></ol></li></ol><h2 id="标准acl的两个基本使用">标准ACL的两个基本使用</h2><blockquote><p>在全局配置模式下顺序编写ACL语句。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Router(config)#access-list access-list-number{permit/deny} {test-conditions}</span><br><span class="line">Lab-D(config)#access-list 1 deny 192.5.5.10 0.0.0.0 拒绝来自192.5.5.10的报文</span><br></pre></td></tr></table></figure><blockquote><p>在接口配置模式下将ACL分组(Group)到一个或多个接口。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Router(config-if)#{protocol} access-group access-list-number {in/out}</span><br><span class="line">Lab-D(config-if)#ip access-group 1 out/in</span><br></pre></td></tr></table></figure><h3 id="access-list-number参数">access-list-number参数</h3><ol type="1"><li>ACL有很多类型。访问列表号指定什么类型。</li><li>下表显示了常见的访问列表类型。</li></ol><p><img src="https://s2.loli.net/2022/06/01/ZBKzadHY8bvVuCf.png"></p><ul><li>注意默认的取值(扩展ACL不仅仅局限于源地址)</li></ul><ol type="1"><li><code>Router(config)#access-list access-list-number {permit/deny}{test-conditions}</code></li></ol><h3 id="允许或拒绝的参数">允许或拒绝的参数</h3><ol type="1"><li>输入访问列表并选择正确的访问列表号后，根据您要执行的操作，输入允许还是拒绝。</li><li><code>Router(config)#access-list access-list-number {permit/deny}{test-conditions}</code></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec11/9.png"></p><h3 id="test-condition参数">test-condition参数</h3><ol type="1"><li>在ACL的{testcondition}部分中，大多数访问列表的共同点是源地址的IP掩码和通配符掩码。</li><li>源地址可以是子网，地址范围或单个主机。由于通配符掩码使用源地址检查位，因此也称为ip掩码。</li><li>通配符掩码告诉路由器要检查哪些位。</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec11/10.png"></p><blockquote><ol type="1"><li>Ip mask:Ipv4的地址</li><li><strong>Wilcardmask</strong>:和netmask是不同的，指示哪些位置被检查</li><li><code>Router(config)#access-list access-list-number {permit/deny}{test-conditions}</code></li></ol></blockquote><h3 id="通配符掩码-wildcard-mask">通配符掩码 Wildcard Mask</h3><ol type="1"><li>编写通配符掩码以告知路由器地址中要匹配的位以及要忽略的位。<ol type="1"><li><strong>0位表示检查该位位置</strong></li><li><strong>1表示忽略该位位置</strong></li></ol></li><li>我们先前的192.5.5.10 0.0.0.0示例可以用二进制重写为：<ol type="1"><li>11000000.00000101.00000101.00001010 (Source address)</li><li>00000000.00000000.00000000.00000000 (Wildcard mask)</li></ol></li></ol><h4 id="通配符掩码的例子">通配符掩码的例子</h4><ol type="1"><li>编写一个IP掩码和通配符掩码以检查网络上的所有主机：192.5.5.0255.255.255.0(检查这一个网段)</li><li>Answer: 192.5.5.0 0.0.0.255(和net mask是取反的)<ol type="1"><li>请注意，此通配符掩码是C类地址的默认子网掩码的镜像。</li><li>警告：仅当查看整个网络或子网时，这才是有用的规则。</li></ol></li><li>编写一个IP掩码和通配符掩码以检查子网中的所有主机：192.5.5.32255.255.255.224<ol type="1"><li>If you answered 192.5.5.32 0.0.0.31</li><li>0.0.0.31 是 255.255.255.224 的镜像地址</li><li>二进制标识<ol type="1"><li>11111111.11111111.11111111.11100000 (255.255.255.224)</li><li>00000000.00000000.00000000.00011111 (0.0.0.31)</li></ol></li></ol></li></ol><h3 id="省时任何命令">省时：任何命令</h3><ol type="1"><li>由于ACL末尾有一个隐含的"denyany"语句，<strong>因此您必须编写语句以允许其他人通过。</strong></li><li>使用我们前面的示例，如果学生被拒绝访问而所有其他学生都被允许访问，则您将编写以下两个语句：<ol type="1"><li><code>Lab-A(config)#access-list 1 deny 192.5.5.0 0.0.0.127</code>:拒绝一个</li><li><code>Lab-A(config)#access-list 1 permit 0.0.0.0 255.255.255.255</code></li></ol></li><li>由于最后一条语句通常用于覆盖"拒绝任何"，因此思科为您提供了一个选项-any命令：<ol type="1"><li><code>Lab-A(config)#access-list 1 permit any</code> ==<code>Lab-A(config)#access-list 1 permit 0.0.0.0 255.255.255.255</code></li></ol></li></ol><h3 id="省时主机名支持">省时：主机名支持</h3><ol type="1"><li>很多时候，网络管理员将需要编写ACL来允许特定主机(或拒绝主机)。该语句可以用两种方式编写。<ol type="1"><li><code>Lab-A(config)#access-list 1 permit 192.5.5.10 0.0.0.0</code></li><li><code>Lab-A(config)#access-list 1 permit host 192.5.5.10(host 专指 192.5.5.10)</code></li></ol></li></ol><h2 id="标准acl的配置位置">标准ACL的配置位置</h2><ol type="1"><li>标准ACL没有目标参数。因此，您将标准ACL放置在尽可能靠近目标的位置。</li><li>要了解原因，请问自己，如果在Lab-A的E0上放置" deny 192.5.5.00.0.0.255"语句，将会对所有IP流量产生什么影响？</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec11/11.png"><img src="https://s2.loli.net/2022/06/01/NrOAzvLuUHTEt1l.png"></p><ul><li>如果放到Lab A的E0口则会导致无法访问Lab B/C,应该放到Lab D的E0</li><li>约定:将标准ACL放到与将要生效的主机越近越好，但是其实会对带宽有一定的损耗</li></ul><h2 id="扩展aclextend-access-control-lists">扩展ACL(Extend AccessControl Lists)</h2><ol type="1"><li>扩展ACL的编号范围为100-199，并"扩展"了标准ACL的功能。</li><li>扩展功能包括基于过滤流量的功能。<ol type="1"><li>目的地址</li><li>ip协议的部分(更加细分):您可以编写语句以仅拒绝"ICMP"等协议或"RIP"和"IGRP"之类的路由协议</li><li>协议套件的上层<ol type="1"><li>您可以编写语句以仅拒绝诸如"TFTP"或"HTTP"之类的协议</li><li>您可以使用eq，gt，lt和neq(等于，大于，小于和不等于)之类的操作数来指定如何处理特定协议。</li><li>例如，如果您希望访问列表允许除http访问之外的所有流量，则可以使用"permit ip any neq80"(允许来自任意源地址和目的地址的不是80端口的信息)</li></ol></li></ol></li></ol><h3 id="扩展acl的两个功能">扩展ACL的两个功能</h3><blockquote><p>在全局配置模式下顺序编写ACL语句。(语法更加丰富)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Router(config)# access-list access-list-number {permit|deny} {protocol|protocol-keyword}{source source-wildcard} {destination destination-wildcard} [protocol-specific options] [log]</span><br><span class="line">Lab-A(config)#access-list 101 deny tcp 192.5.5.0 0.0.0.255 210.93.105.0 0.0.0.255 eq telnet log</span><br></pre></td></tr></table></figure><blockquote><p>在接口配置模式下将ACL分组到一个或多个接口</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Router(config-if)#{protocol} access-group</span><br><span class="line">access-list-number {in/out}</span><br><span class="line">Lab-A(config-if)#ip access-group 101 out </span><br></pre></td></tr></table></figure><h3 id="扩展参数">扩展参数</h3><ol type="1"><li>access-list-number:choose from the range 100 to 199</li><li>{protocol | protocol-number}:For the CCNA, you only need to know ipand tcp--many more are available</li><li>{source source-wildcard}:same as in standard 和标准的相似</li><li>{destination destination-wildcard}:formatted like the standard, butspecifies the destination 和标准格式系统</li><li>[protocol-specific options]：这个参数用于确认协议的过滤部分</li></ol><h3 id="端口号">端口号</h3><ol type="1"><li>查看tcp和udp协议的各种端口号，并了解以下最常见的端口号。</li><li>您还可以在{protocolspecificoptions}中键入名称(telnet)而不是数字(23)。</li></ol><p><img src="https://s2.loli.net/2022/06/01/WtVgoNi3KULJPjX.png"></p><h3 id="配置扩展acl的位置">配置扩展ACL的位置</h3><ol type="1"><li>在下图中，我们要拒绝网络221.23.123.0访问服务器198.150.13.34</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec11/14.png">。</p><ol type="1"><li>访问列表应应用于什么路由器和接口？<ol type="1"><li>将访问列表写在路由器C上，将其应用于E0，并在</li><li>这将使网络不受221.23.123.0发往198.150.13.34的访问，但仍允许221.23.123.0访问Internet</li></ol></li></ol><blockquote><p>按照标准的原则，应该放置到Route A，而用扩展的放置的是RouteC的E0上，放置对应的命令</p></blockquote><ul><li>由于扩展的ACL具有目标信息，因此<strong>您希望将其放置在尽可能靠近源的位置。</strong></li></ul><p><img src="https://s2.loli.net/2022/06/01/WivfXIS5aOyLz9h.png"></p><h3 id="编写并使用acl">编写并使用ACL</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Router-C(config)#access-list 100 deny ip 221.23.123.0 0.0.0.255 198.150.13.34 0.0.0.0</span><br><span class="line">Router-C(config)#access-list 100 permit ip any any</span><br><span class="line">Router-C(config)#int e0</span><br><span class="line">Router-C(config-if)#ip access-group 100 in</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/01/heaMB6oEyiXqv1N.png"></p><h3 id="acls的命名">ACLS的命名</h3><ol type="1"><li>CiscoIOS的一项不错的功能是可以命名ACL。如果在同一路由器上需要99个以上的标准ACL，这将特别有用。</li><li>命名ACL后，提示将更改，您不再需要输入access-list和access-listnumber参数。</li><li>在下面的示例中，ACL命名为over_and，以提示应如何将其放置在接口上</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec11/17.png"></p><h3 id="acls的校验">ACLS的校验</h3><ol type="1"><li><code>show access-lists</code> 查看全部</li><li><code>shows all access-lists configured on the router</code>显示路由器上配置的所有访问列表</li><li><code>show access-lists {name | number}</code> 查看某一个端口的</li><li><code>shows the identified access list</code>显示已识别的访问列表</li><li><code>show ip interface</code>:显示了应用于接口的访问列表(入站和出站)。</li><li><code>show running-config</code>:显示所有访问列表以及它们应用于什么接口</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> 互联网计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 互联网计算 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WANS</title>
      <link href="/2022/06/01/WANS/"/>
      <url>/2022/06/01/WANS/</url>
      
        <content type="html"><![CDATA[<h1 id="广域网技术和设备">广域网技术和设备</h1><h2 id="广域网服务-wan-services">广域网服务 WAN Services</h2><p>WAN是通过WAN服务提供商连接LAN的通信网络</p><ul><li>一般不是一个单位来做，而是由运营商完成，而在运营商之间沟通好相互的接入问题。</li><li>WAN在OSI的前三层运行，但<strong>主要集中在物理和数据链路层</strong>。</li><li>广域网和局域网相比相对低效</li><li>广域网位于物理层和数据链路层</li></ul><h2 id="公司的发展">公司的发展</h2><p><img src="https://s2.loli.net/2022/06/01/z6VekiY5wyM98XI.jpg"></p><ul><li>广域网的最小单位是公司</li><li>随着公司逐渐的发展才发展(公司的发展是需求)</li><li>最上角:公司刚成立的时候，小的局域网就可以搞定了(几台主机)，对外提供服务少，局域网协同办公。</li><li>右上角:随着公司的发展，一家发展到几十家，需要将不同的项目分开，每一个项目都有对应的项目经理和开发人员，多个局域网组成一个AS(自治系统)。还是一个出口，ASP要求高，VLAN隔离和防火墙</li><li>左下角:再次发展，有多个分支机构，区域办事处等，物理上隔离的很远，这时候建立一个数据中心(存放全部业务数据)，保证团队可以在任何位置访问，公司向ISP请求租用一个广域网链路。</li><li>右下角:最后进一步发展，覆盖全球:公司规模足够大，考虑成本，需要部署站点到站点之间的VPN，保证效率更高</li></ul><h2 id="广域网物理结构">广域网物理结构</h2><p><img src="https://s2.loli.net/2022/06/01/pNqLWFKulHzCSQa.png" alt="WAN_structure"></p><ul><li>涉及到具体一个公司的接入</li><li>通过NetWork远程接入，通过WSP提供的CO Swtich来连接到中心局</li><li>CPE:位于公司本地的设备(主要是接入设备)，可以向ISP购买或者租用，购买上网服务(猫)</li><li>CPE和远端通过Local loop连接(最后一公里)，ISP做解决方案。</li><li>Demarcation(分界点)：分界点一侧是ISP做解决方案，而另一侧是本地进行管理</li></ul><h2 id="广域网虚拟电路">广域网虚拟电路</h2><ol type="1"><li>交换虚拟电路(SVC，Switched VirtualCircuits)是到目的地的WAN路径，可根据需要建立(established)和终止(terminated)</li></ol><h3 id="广域网虚拟电路的三个阶段phases">广域网虚拟电路的三个阶段(phases)</h3><ol type="1"><li>电路建立–创建虚拟电路(逻辑确定)</li><li>数据传输–发送和接收用户数据(含有虚电路号等)</li><li>电路中断–拆除虚拟电路</li></ol><h3 id="广域网虚拟电路的用途和特点">广域网虚拟电路的用途和特点</h3><ol type="1"><li>电话服务和ATM使用SVC</li><li>增加带宽使用但降低成本(多人同时使用)</li></ol><h3 id="广域网永久虚拟电路">广域网永久虚拟电路</h3><blockquote><p>永久(Permanent)虚拟电路(PVC)是采用以下一种模式的永久建立的电路：数据传输</p></blockquote><ol type="1"><li>X.25和帧中继使用PVC</li><li>减少带宽使用，但增加成本</li><li>用户和运营商进行硬件(专用线路)</li><li>对应于数据传输量持久且大</li></ol><p><img src="https://s2.loli.net/2022/06/01/64jy2IstnHpVGMY.png"></p><ul><li>分组交换是稳定性和使用时间不确定</li><li>VPN:加密信息，避免被截获</li></ul><p><img src="https://s2.loli.net/2022/06/01/8Tp5K1x2mWoeyuB.png"></p><h2 id="链接类型和带宽">链接类型和带宽</h2><p><img src="https://s2.loli.net/2022/06/01/liTyKXMubC5f9Wj.png"></p><ol type="1"><li>T：美国标准</li><li>E：欧洲标准</li></ol><p><img src="https://s2.loli.net/2022/06/01/VeNc9sz1BDW7rbQ.jpg"></p><h2 id="交换电路连接">交换电路连接</h2><p><img src="https://s2.loli.net/2022/06/01/cXYmLWv84brNxwj.png"></p><blockquote><p>PSTN：需要调节器，慢</p></blockquote><p><img src="https://s2.loli.net/2022/06/01/MGeP4gq1Ux8VrKy.jpg"></p><blockquote><p>ISDN:多个B信道和P信道组合</p></blockquote><ul><li>BRI:2个B和一个D</li><li>PRI:T1:23B + D 和 E1:30B + D</li></ul><h2 id="网络连接">网络连接</h2><p><img src="https://s2.loli.net/2022/06/01/lj7bMVaWmJzEusn.png"></p><blockquote><p>直到连接到运营商，DSL接入（以太网转换成DSL信号）</p></blockquote><p><img src="https://s2.loli.net/2022/06/01/BAWQVrqMgZcFNIX.png"></p><blockquote><p>永久在线连接，用于有线电视传输等，共享电缆开关等</p></blockquote><p><img src="https://s2.loli.net/2022/06/01/ruAliqD5GmxQnto.png"></p><ul><li>无线<ul><li>地面无线信道</li><li>无线信道</li></ul></li></ul><h2 id="广域网设备">广域网设备</h2><ul><li>为了连接到 专线（leased line） 客户必须具备以下条件<ul><li>访问服务商的电路</li><li>可用的适当路由器端口</li><li>CSU/DSU，调制解调器，ISDN终端适配器 （ISDN Terminal Adapter）等</li></ul></li></ul><h3 id="modems-调制解调器">Modems 调制解调器</h3><ul><li>也称作通道服务单元/数字服务单元 CSU / DSU （Channel Service Units /Digital Service Units）</li><li>与 语音级连接 接口，以便将模拟信号转为数字信号 （analog signal -&gt;digitl signal）</li></ul><p><img src="https://s2.loli.net/2022/06/01/WwMh18jQYJycf3E.png"></p><ol type="1"><li>CPE(左边的用户网关路由器，作为终端数据单元(DTE)):往往是路由器</li><li>DCE:将信号转换成运营商可以接受的信号发送给远端</li></ol><h1 id="广域网-和-osi模型">广域网 和 OSI模型</h1><h2 id="广域网标准">广域网标准</h2><ul><li>广域网标准主要描述OSI模型的哪一层？</li><li>数据链路层 和 物理层<ul><li>物理层提供电器标准，数据链路层封装到远程的部分:帧标准</li></ul></li></ul><p><img src="https://s2.loli.net/2022/06/01/MO4eC1YcJnfEK5m.png"></p><ol type="1"><li>连接通信服务提供商提供的服务所需的电气、机械、操作和功能特性。</li><li>描述DTE和DCE之间的接口</li></ol><h2 id="wan-物理层">WAN 物理层</h2><ul><li><p>描述如何为<strong>广域网服务</strong>提供电气、机械、操作和功能连接的协议</p></li><li><p>这些服务通常是从WAN服务供应商，备用运营商，电话后 和电报（PTT）机构 处获取的</p></li><li><p>描述 <strong>数据终端设备</strong>（Data terminal equipment） 和<strong>数据电路终端设备</strong>（Data circuit-terminatingequipment）之间的接口</p></li><li><p>通常，DCE 是服务提供商 ，DTE 是连接的设备</p></li><li><p>在此模型中，通过调制解调器或 CSU / DSU 提供给 DTE 的服务</p><p><img src="https://s2.loli.net/2022/06/01/QTElwtFbnZCJ7Oe.png" alt="一般以用户路由器作为DTE,运营商提供的Modem做信号转换,作为DCE"></p></li></ul><ol type="1"><li>指定DTE和DCE之间此接口的几种物理层标准是…<ol type="1"><li>EIA/TIA-232 (RS-232):计算机常用</li><li>EIA/TIA-449</li><li>V.24</li><li>V.35</li><li>X.21</li><li>G.703</li><li>EIA-530</li></ol></li><li>一般都是串线接口</li></ol><p><img src="https://s2.loli.net/2022/06/01/6uLOSaMpUNoDr1I.png"></p><h2 id="wan-数据链路层">WAN 数据链路层</h2><ul><li>WAN数据链路协议描述了如何在<strong>单个数据链路</strong>上的系统之间承载帧</li><li>他们包括旨在 在专用点对点，多点 和 多址交换服务 上运行的协议</li><li>WAN 标准由许多机构定义和管理： ITU-T， ISO，IETF，&amp;EIA</li><li>不是那么可靠，帧结构和以太网帧不同，协议是点对点，点对多点，多链路交换机切换</li><li>为了确保正确:需要为每一个串口指定一个方式组成帧</li></ul><h2 id="数据链路的-帧封装">数据链路的 帧封装</h2><p>WAN数据链路层定义了如何<strong>封装数据</strong>以传输到<strong>远程站点</strong></p><ol type="1"><li><strong>点对点协议(PPP,Point-to-PointProtocol)</strong>:由IETF开发，PPP包含用于<strong>识别网络层协议</strong>的协议字段(包含一个协议单元，指定网络协议)</li><li><strong>高级数据链路控制(HDLC, High-Level Data LinkControl)</strong>:ISO标准，不同供应商之间不兼容的HDLC，因为每个供应商都选择了实现方式。HDLC支持点对点/多点配置(抽象规范和约束，各个厂商不同)</li><li><strong>帧中继(FrameRelay)</strong>：使用简化的封装，对高质量的数字设备不进行纠错。(比较高速)</li><li><strong>ISDN</strong>：通过现有电话线传输语音和数据的一组数字服务。</li><li><strong>平衡的链路访问程序(LAPB, Link Access Procedure,Balanced)</strong>：用于在X.25堆栈的第2层封装数据包的数据包交换网络。提供点对点的可靠性和流量控制</li></ol><p><img src="https://s2.loli.net/2022/06/01/Ln4x59foIGDUyPa.png"></p><h1 id="wan-访问方法">WAN 访问方法</h1><h2 id="ppp-hdlc">PPP / HDLC</h2><ol type="1"><li>点对点的标准</li><li>以思科厂商为标准</li><li>工作在串行链路上的</li><li>如果都是同一个厂商的可以用HDLC，不然使用PPP</li></ol><h3 id="串行线框字段">串行线框字段</h3><ul><li><p>两种最常见的 点对点 WAN封装 是 HDLC 和 PPP （High-level Data LinkControl and Point to Point Protocol）</p></li><li><p>所有的串行线封装 都共享一个通用的帧格式，具有以下的格式</p></li></ul><p><img src="https://s2.loli.net/2022/06/01/l7pcVXoq9IrJ4bH.png"></p><ul><li>封装协议的选择取决于WAN技术和 通信设备</li></ul><h3 id="ppp-and-hdlc">PPP and HDLC</h3><ol type="1"><li><p>PPP是一种标准的</p><p>串行线路</p><p>封装方法</p><ol type="1"><li>由IETF(The Internet Engineering Task)开发;取代SLIP(Serial LineInternet Protocol)</li><li>包含标识网络层协议的字段</li><li>PPP可以在建立连接期间检查链接质量</li><li>通过密码认证协议(PAP)和质询握手认证协议(CHAP)提供认证。</li></ol></li><li><p>HDLC是Cisco串行线的默认封装</p><ol type="1"><li>没有窗口或流量控制</li><li>框架中插入了专有类型(所有权)代码，这意味着HDLC帧不能与其他供应商的设备互操作。</li><li>当专用线路连接的两端是运行Cisco IOS的路由器时使用</li><li>不做出窗口控制和流控制</li></ol></li></ol><h2 id="ppp-点对点协议">PPP 点对点协议</h2><ol type="1"><li>串行链路上使用最广泛的第2层协议</li><li>从SLIP开发，<ol type="1"><li>仅支持IP协议</li><li>不支持动态IP分配</li><li>不支持身份验证</li><li>不支持压缩</li><li>不支持错误检测</li></ol></li><li>PPP提供以下功能<ol type="1"><li>网络协议多路复用</li><li>动态分配IP地址</li><li>验证：PAP，CHAP</li><li>压缩</li><li>错误检测</li></ol></li></ol><h3 id="ppp-组件">PPP 组件</h3><ol type="1"><li>使用HDLC(ISO HDLC，而非Cisco HDLC)作为封装第3层数据报的基础</li><li>实现LCP(链接控制协议)以：<ol type="1"><li>建立连接</li><li>连接配置选项</li><li>链接质量测试</li></ol></li><li>实施NCP(网络控制协议，Network ControlProtocol)以选择和配置第3层协议</li></ol><h3 id="ppp帧格式">PPP帧格式</h3><p><img src="https://s2.loli.net/2022/06/02/J36YTIBzj1HXqk5.jpg"></p><blockquote><p>数字的单位是字节</p></blockquote><ol type="1"><li>Flag: 01111110标记：帧的开头或结尾，01111110，一位可能会连续接受到多个帧</li><li>Address：11111111，广播地址</li><li>Control：00000011，用户数据作为无序帧传输</li><li>Protocol: 数据字段中的协议类型</li><li>Data: 数据报，最大默认值为1500字节</li><li>FCS: 2或者4字节</li></ol><h3 id="ppp会话建立终止">PPP会话建立/终止</h3><ol type="1"><li>为了通过点对点链路建立通信，PPP经历四个不同的阶段：<ol type="1"><li>步骤一:链接建立和配置协商(negotiation)(LCP)。</li><li>步骤二:链接质量测试。</li><li>步骤三:网络层协议配置(NCP)。</li><li>步骤四:链接终止。</li></ol></li><li>图示如下</li></ol><p><img src="https://s2.loli.net/2022/06/02/4N5LGCEID8dsmgu.jpg"></p><h4 id="阶段1链接建立">阶段1：链接建立</h4><ol type="1"><li>建立链接是交换任何网络层数据报之前的第一阶段<ol type="1"><li>每个PPP设备发送LCP来打开连接</li><li>LCP数据包包含一个配置选项字段，该字段允许设备协商选项的使用，例如<strong>压缩和身份验证协议</strong>等。</li><li>如果LCP数据包中未包含配置选项，则采用该配置选项的<strong>默认值</strong>。</li><li>当已发送和接收配置<strong>确认</strong>帧时，此阶段完成。</li></ol></li><li>在完成这个步骤前不会传输具体数据帧的</li></ol><h4 id="阶段2链路质量确定">阶段2：链路质量确定</h4><ol type="1"><li>发送和接收LCP数据包以测量链路上的错误率(如果已配置)</li><li>身份验证(如果使用)在网络层协议配置阶段开始之前进行。(可选)</li><li>LCP可以延迟网络层协议信息的传输，直到完成此阶段。</li><li>在这之前不能传输网络帧</li></ol><h4 id="阶段3网络层协议配置">阶段3：网络层协议配置</h4><ol type="1"><li>在此阶段，PPP设备发送NCP数据包以选择和配置一个或多个网络层协议(例如IP)。</li><li>配置了每个选定的网络层协议后，可以通过链接发送来自每个网络层协议的数据报</li></ol><h4 id="阶段4链接终止">阶段4：链接终止</h4><ol type="1"><li>LCP可以随时终止链接：<ol type="1"><li>应用户要求；(一方请求终止)</li><li>链接质量</li><li>超时</li></ol></li><li>当LCP关闭链接时，它将通知网络层协议，以便它们可以采取适当的措施</li></ol><h3 id="pap-安全认证协议ppp中一个可选择方法">PAP安全认证协议:PPP中一个可选择方法</h3><p><img src="https://s2.loli.net/2022/06/02/z1hsNHXiJS7Al5q.jpg"></p><blockquote><p>PAP由一方向另一方发起请求，另一方选择是否接受，双方具有相同的用户名和密码,发起方可以多次尝试</p></blockquote><ol type="1"><li>链接的发起方(CallingSide)输入身份验证信息，以帮助确保用户具有网络管理员的许可来进行连接。</li><li>远程节点使用双向握手PAP建立其身份。</li><li>远程节点<strong>重复</strong>发送用户名/密码对，直到确认身份验证或连接终止</li><li>密码以明文形式通过链接发送。</li><li>在建立连接阶段之后，仅对远程节点进行一次身份验证</li></ol><h4 id="服务提供商路由器的配置server">服务提供商路由器的配置(Server)</h4><ol type="1"><li>认证和RouteA相同的用户名密码</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1 Router(config)#hostname RTB</span><br><span class="line">2 RTB(config)#username RTA password CiscoA</span><br><span class="line">3 RTB(config)#int s0</span><br><span class="line">4 RTB(config)#ip address 192.168.2.2 255.255.255.0</span><br><span class="line">5 RTB(config)#clock rate 56000</span><br><span class="line">6 RTB(config)#encapsulation ppp</span><br><span class="line">7 RTB(config)#ppp authentication pap</span><br><span class="line">8 RTB(config)#no shut </span><br></pre></td></tr></table></figure><h3 id="chapchallenge-handshake-authentication-protocol">CHAP(ChallengeHandshake Authentication Protocol)</h3><p><img src="https://s2.loli.net/2022/06/02/DeIxKqVtmQvdaEF.jpg"></p><blockquote><p>避免明文发送,三阶段握手,发起方是HQ，找一个时间来Challenge，然后由用户进行response，之后决定是否接受。密码密文发送比较安全，而且更加合理的设计。</p></blockquote><ol type="1"><li>被叫方使用三向握手CHAP协议定期验证主叫方。</li><li>CHAP不允许呼叫者在没有Challenge(随机数)的情况下尝试进行身份验证。(Challenge-&gt;随机数)</li><li>主机(称为参与者)将质询消息发送到远程节点。</li><li>远程节点以一个值(加密的值，包括：接收到的质询，其用户名和密码)进行响应:value是challenge和密钥生成的</li><li>主机根据自己的价值检查响应<ol type="1"><li>如果值匹配，则确认身份验证</li><li>否则，连接终止</li></ol></li></ol><h4 id="chap-challenging-挑战">CHAP: Challenging 挑战</h4><p><img src="https://s2.loli.net/2022/06/02/m9lvuykReDoJ1GN.jpg" alt="img"></p><ul><li>RTB请求连接RTA</li><li>他们都存储一个用户名密码，但是用户名不同，密码相同</li><li>RTB发送一个连接请求</li><li>RTA找一个时间来发起挑战</li><li>挑战中内容:<ul><li>编号</li><li>id是第几次挑战</li><li>random:生成的随机数</li><li>RTA:谁发起的挑战</li></ul></li></ul><h4 id="chap-acknowledgement-告知">CHAP: Acknowledgement 告知</h4><p><img src="https://s2.loli.net/2022/06/02/WslkEHmYMPrGDJf.jpg"></p><ul><li>RTB进行应答，</li><li>RTB操作:pass + random 使用 MD5 算法 -&gt; 哈希值</li></ul><h4 id="chap-verifying-acknowledgement-验证确认">CHAP: VerifyingAcknowledgement 验证确认</h4><p><img src="https://s2.loli.net/2022/06/02/N8GhAZWk9oJt7qX.jpg"></p><ul><li>RTA收到RTB的回复，然后比较是否相同</li></ul><h3 id="chap的实现">CHAP的实现</h3><ol type="1"><li>远端路由器的配置</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 Router(config)#hostname RTA</span><br><span class="line">2 RTA(config)#username RTB password CiscoA</span><br><span class="line">3 RTA(config)#int s0</span><br><span class="line">4 RTA(config)#ip address 192.168.2.1 255.255.255.0</span><br><span class="line">5 RTA(config)#encapsulation ppp</span><br><span class="line">6 RTA(config)#no shut </span><br></pre></td></tr></table></figure><ol type="1"><li>服务提供者服务器的配置</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1 Configuration of service provider router</span><br><span class="line">2 Router(config)#hostname RTB</span><br><span class="line">3 RTB(config)#username RTA password CiscoA</span><br><span class="line">4 RTB(config)#int s0</span><br><span class="line">5 RTB(config)#ip address 192.168.2.2 255.255.255.0</span><br><span class="line">6 RTB(config)#clock rate 56000</span><br><span class="line">7 RTB(config)#encapsulation ppp</span><br><span class="line">8 RTB(config)#ppp authentication chap</span><br><span class="line">9 RTB(config)#no shut </span><br></pre></td></tr></table></figure><h2 id="综合数字服务网络isdn-integrated-services-digital-networks">综合数字服务网络(ISDN,Integrated Services Digital Networks)</h2><ol type="1"><li>集成服务数字网络允许通过现有电话线传输数字信号:提供远程站点的连接</li><li>ISDN具有以下优点：<ol type="1"><li>可以携带语音，视频和数据</li><li>使用带外D(或Delta)信道比调制解调器(有时&lt;1s)更快的呼叫建立</li><li>使用B(或屏障)通道以64kps提供更快的数据传输</li></ol></li></ol><h3 id="bribasic-rate-interface-and-priprimary-rate-interface">BRI(BasicRate Interface) and PRI(Primary Rate Interface)</h3><ol type="1"><li>ISDN服务有两种：<ol type="1"><li>BRI(基本速率接口, Basic RateInterface),用户虚拟电路数据传，HDLC,PPP</li><li>PRI(主速率接口,Primary Rate Interface)，发送控制信息，LAPD</li></ol></li><li>ISDN BRI服务提供两个B通道和一个D通道。</li><li>ISDN BRI将144kbps(2B + D =144kps)线路的总带宽传送到三个单独的通道中。</li><li>BRI B信道服务以64 kbps的速率运行，旨在承载用户数据和语音流量。</li><li>第三个通道，D通道，是一个16kbps信令通道，用于承载指令，这些指令告诉电话网络如何处理每个B通道。</li><li>BRI和DRI都是基于电话信道的</li></ol><p><img src="https://s2.loli.net/2022/06/02/xJWdRlkg4by1L7t.jpg"></p><ul><li>B信道传递HDLC和PPP数据帧</li><li>D信道传递LAPD数据帧</li></ul><h3 id="标准">标准</h3><ol type="1"><li>ISDN利用一套(suit)ITU-T标准套件，涵盖OSI参考模型的物理，数据链路和网络层。</li><li>有几种封装选择。两种最常见的封装是PPP和HDLC。</li><li>ISDN默认为HDLC。但是，PPP更为健壮，因为它为兼容链接和协议配置的身份验证和协商提供了出色的机制。</li><li>ISDN接口仅允许使用一种封装类型,不允许混合使用封装</li></ol><h2 id="非对称数字用户线路adslasymmetric-digital-subscriber-line">非对称数字用户线路(ADSL,AsymmetricDigital Subscriber Line)</h2><ol type="1"><li>DSL:Digital Subscribe Line</li></ol><h3 id="xdsl技术">xDSL技术</h3><ol type="1"><li>xDSL技术就是用数字技术对现有的模拟电话用户线进行改造，使它能够承载宽带业务</li><li>虽然标准模拟电话信号的频带限制在 300~3400kHz范围内，但用户线本身实际可通过的信号频率仍超过 1 MHz</li><li>xDSL 技术把 0~4 kHz低端频谱留给传统电话使用，而把原来没有被利用的高端频谱留给用户上网使用</li><li>DSL:数字用户线(Digital Subscriber Line)</li><li>DSL的前缀 x 表示在数字用户线上实现的不同宽带方案</li></ol><h3 id="xdsl-的几种类型">xDSL 的几种类型</h3><ol type="1"><li>ADSL (Asymmetric Digital Subscriber Line)：非对称数字用户线</li><li>HDSL (High speed DSL)：高速数字用户线</li><li>SDSL (Single-line DSL)：1 对线的数字用户线</li><li>VDSL (Very high speed DSL)：甚高速数字用户线</li><li>IDSL:ISDN 用户线</li><li>RADSL (Rate-Adaptive DSL)：速率自适应 DSL，是 ADSL的一个子集，可自动调节线路速率</li></ol><h3 id="adsl-的极限传输距离">ADSL 的极限传输距离</h3><ol type="1"><li>ADSL的极限传输距离与<strong>数据率</strong>以及<strong>用户线的线径</strong>都有很大的关系(用户线越细，信号传输时的衰减就越大)，而所能得到的最高数据传输速率与实际的用户线上的信噪比密切相关。</li><li>例如，0.5 毫米线径的用户线，传输速率为 1.5 ~ 2.0 Mb/s 时可传送 5.5公里，但当传输速率提高到 6.1 Mb/s 时，传输距离就缩短为 3.7 公里。</li><li>如果把用户线的线径减小到0.4毫米，那么在6.1Mb/s的传输速率下就只能传送2.7公里</li><li><strong>线越细，衰减速度越快。</strong></li></ol><h3 id="adsl-的特点">ADSL 的特点</h3><ol type="1"><li>上行和下行带宽不对称:上行指从用户到 ISP，而下行指从 ISP 到用户</li><li>ADSL 在用户线(铜线)的两端各安装一个 ADSL 调制解调器。</li><li>我国目前采用的方案是离散多音调 DMT (DiscreteMulti-Tone)调制技术。这里的"多音调"就是"多载波"或"多子信道"的意思。</li></ol><h4 id="dmt-技术">DMT 技术</h4><ol type="1"><li>DMT 调制技术采用频分复用的方法，把 40 kHz 以上一直到 1.1 MHz的高端频谱划分为许多的子信道，其中 25 个子信道用于上行信道，而 249个子信道用于下行信道。</li><li>每个子信道占据 4 kHz 带宽(严格讲是 4.3125kHz)，并使用不同的载波(即不同的音调)进行数字调制。这种做法相当于在一对用户线上使用许多小的调制解调器并行地传送数据。</li><li>用户需求大量的操作是下载，从4KHz开始是为了避免人声部分</li></ol><h3 id="dmt-技术的频谱分布">DMT 技术的频谱分布</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec10/18.jpg"></p><blockquote><p>示意图，每一个信道之间是有隔离的，也是每一个信道之间并不是紧挨的</p></blockquote><h3 id="adsl的数据率">ADSL的数据率</h3><ol type="1"><li>由于用户线的具体条件往往相差很大(距离、线径、受到相邻用户线的干扰程度等都不同)，因此ADSL采用自适应调制技术使用户线能够传送尽可能高的数据率。</li><li>当ADSL启动时，用户线两端的ADSL调制解调器就测试可用的频率、各子信道受到的干扰情况，以及在每一个频率上测试信号的传输质量。</li><li>ADSL不能保证固定的数据率。对于质量很差的用户线甚至无法开通ADSL。</li><li>通常下行数据率在 32 kb/s 到 6.4 Mb/s 之间，而上行数据率在 32 kb/s 到640 kb/s 之间</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec10/18.jpg"></p><blockquote><p>意图:PS接入是电话分离器，一部分给电话，一部分给数据。</p></blockquote><ol type="1"><li>数字用户线接入复用器 DSLAM (DSL Access Multiplexer)</li><li>接入端接单元ATU (Access Termination Unit)</li><li>ATU-C(C 代表端局 Central Office</li><li>ATU-R(R 代表远端 Remote)</li><li>电话分离器 PS (POTS Splitter)</li></ol><h3 id="第二代-adsl">第二代 ADSL</h3><ol type="1"><li>ADSL2(G.992.3 和 G.992.4) ADSL2+(G.992.5)</li><li><strong>通过提高调制效率得到了更高的数据率</strong>。例如，ADSL2要求至少应支持下行 8 Mb/s、上行 800 kb/s的速率。而 ADSL2+ 则将频谱范围从1.1 MHz 扩展至2.2 MHz，下行速率可达 16 Mb/s(最大传输速率可达25Mb/s)，而上行速率可达 800 kb/s。</li><li>采用了<strong>无缝速率自适应技术 SRA</strong> (Seamless RateAdaptation)，可在运营中不中断通信和不产生误码的情况下，自适应地调整数据率。</li><li>改善了线路质量评测和故障定位功能，这对提高网络的运行维护水平具有非常重要的意义</li></ol><h2 id="sonet">SONET</h2><h3 id="同步光纤网sonet和同步数字系列sdh">同步光纤网SONET和同步数字系列SDH</h3><ol type="1"><li>旧的数字传输系统存在着许多缺点。其中最主要的是以下两个方面：</li><li>速率标准不统一：<strong>如果不对高次群的数字传输速率进行标准化，国际范围的高速数据传输就很难实现。</strong></li><li>不是同步传输：<strong>在过去相当长的时间，为了节约经费，各国的数字网主要是采用准同步方式。</strong></li></ol><h3 id="同步光纤网-sonet">同步光纤网 SONET</h3><ol type="1"><li>同步光纤网 SONET (Synchronous Optical Network)的各级时钟都来自一个非常精确的主时钟(铯原子钟，精度优于10-11秒)</li><li>第 1 级同步传送信号 STS-1 (Synchronous Transport Signal)的传输速率是51.84 Mb/s。</li><li>光信号则称为第 1 级光载波 OC-1，OC 表示 Optical Carrier。</li></ol><h3 id="同步数字系列-sdh">同步数字系列 SDH</h3><ol type="1"><li>ITU-T 以美国标准 SONET 为基础，制订出国际标准同步数字系列 SDH(Synchronous Digital Hierarchy)。</li><li>一般可认为 SDH 与 SONET 是同义词。</li><li>SDH 的基本速率为 155.52 Mb/s，称为第 1 级同步传递模块 (SynchronousTransfer Module)，即 STM-1，相当于 SONET 体系中的 OC-3 速率。</li></ol><h3 id="sonet-的-oc-级sts-级与-sdh-的-stm-级的对应关系">SONET 的 OC级/STS 级与 SDH 的 STM 级的对应关系</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec10/20.jpg"></p><h3 id="sonet-的体系结构">SONET 的体系结构</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec10/21.jpg"></p><ul><li>SDH也是光传输</li><li>路径很长，分为一段一段的线路。</li><li>线路中复用器和复用器之间分成段，使用转发器</li></ul><h3 id="同步光纤网-sonet-1">同步光纤网 SONET</h3><ol type="1"><li>SONET 第 1 级同步传送信号 STS-1 ( Synchronous Transport Signal)的传输速率为 51.84 Mb/s，第 3 级同步传送信号 STS-3 传输速率是 STS-1的3倍，为155.52 Mb/s， …，等等，依此类推。</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec10/22.jpg"></p><ol type="1"><li>STS帧为时分复用幀，8000帧/秒，每帧125 μS</li><li>其对应的光信号则称为第 1 级光载波 OC-1 (OC表示 Optical Carrier)，第3 级光载波 OC-3， …，等</li></ol><h3 id="sonet-标准的四个光接口层">SONET 标准的四个光接口层</h3><ol type="1"><li>光子层(Photonic Layer)：处理跨越光缆的比特传送。</li><li>段层(Section Layer)：在光缆上传送 STS-N 帧。</li><li>线路层(Line Layer)：负责路径层的同步和复用</li><li>路径层(Path Layer)：处理路径端接设备 PTE (Path TerminatingElement)之间的业务的传输</li></ol><h2 id="hfchybrid-fiber-coax">HFC(Hybrid Fiber Coax)</h2><ol type="1"><li>主要链路用光纤，到户用同轴电缆</li></ol><h3 id="光纤同轴混合网-hfc-hybrid-fiber-coax">光纤同轴混合网 HFC (HybridFiber Coax)</h3><ol type="1"><li>HFC 网是在目前覆盖面很广的有线电视网 CATV的基础上开发的一种居民宽带接入网。</li><li>HFC 网除可传送 CATV 外，还提供电话、数据和 其他宽带交互型业务。</li><li>现有的 CATV 网是树形拓扑结构的同轴电缆网络，它采用模拟技术的频分复用对电视节目进行单向传 输。而 HFC 网则需要对 CATV网进行改造</li></ol><h3 id="hfc-的主要特点">HFC 的主要特点</h3><ol type="1"><li>HFC网的<strong>主干线</strong>路采用光纤</li><li>HFC 网将原 CATV网中的同轴电缆主干部分改换为光纤，并使用模拟光纤技术。</li><li>在模拟光纤中采用光的振幅调制 AM，这比使用数字 光纤更为经济。</li><li>模拟光纤从头端连接到<strong>光纤结点(fibernode)</strong>，即光分配结点 ODN (Optical DistributionNode)。在光纤结点光信号被转换为电信号。在光纤结点以下就是同轴电缆。(光信号转换成点信号)</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec10/23.jpg"></p><blockquote><p>到小区前是光传输，之后是电传输</p></blockquote><ul><li>具有比 CATV 网更宽的频谱，且具有双向传输功能</li></ul><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec10/24.jpg"></p><h3 id="用户接口盒uib-user-interface-box">用户接口盒UIB (User InterfaceBox)</h3><ol type="1"><li>每个家庭要安装一个用户接口盒</li><li>用户接口盒要提供三种连接，即：<ol type="1"><li>使用同轴电缆连接到机顶盒(set-topbox)，然后再连接到用户的电视机。</li><li>使用双绞线连接到用户的电话机。</li><li>使用电缆调制解调器连接到用户的计算机</li></ol></li></ol><h3 id="电缆调制解调器cable-modem">电缆调制解调器(Cable Modem)</h3><ol type="1"><li>电缆调制解调器是为 HFC 网而使用的调制解调器。</li><li>电缆调制解调器最大的特点就是<strong>传输速率高</strong>。其下行速率一般在3∼10 Mb/s之间，最高可达 30 Mb/s，而上行速率一般为 0.2∼2 Mb/s，最高可达10 Mb/s。</li><li>电缆调制解调器比在普通电话线上使用的调制解调器要复杂得多，并且不是成对使用，而是只安装在<strong>用户端</strong>。(远端是光，不是电)</li></ol><h3 id="hfc-网的最大优点">HFC 网的最大优点</h3><ol type="1"><li>具有很宽的频带，并且能够利用已经有相当大的覆盖面的有线电视网。</li><li>要将现有的 450 MHz 单向传输的有线电视网络改造为 750 MHz 双向传输的HFC 网(还要将所有的用户服务区互连起来而不是一个个 HFC 网的孤岛)，也需要相当的资金和时间。</li><li>在电信政策方面也有一些需要协调解决的问题。</li><li>电信也在跨界到视频</li></ol><h3 id="fttx-技术">FTTx 技术</h3><ol type="1"><li>FTTx(光纤到……)也是一种实现宽带居民接入网的方案。这里字母 x可代表不同意思。<ol type="1"><li>光纤到家 FTTH (Fiber To TheHome)：光纤一直铺设到用户家庭可能是居民接入网最后的解决方法。</li><li>光纤到大楼 FTTB (Fiber To TheBuilding)：光纤进入大楼后就转换为电信号，然后用电缆或双绞线分配到各用户。</li><li>光纤到路边 FTTC (Fiber To TheCurb)：从路边到各用户可使用星形结构双绞线作为传输媒体</li></ol></li></ol><h1 id="考试要求">考试要求</h1><ol type="1"><li>名词解释</li><li>ADSL意义、实现和B和D信道的带宽使用等</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> 互联网计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 互联网计算 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>局域网交换和vlan</title>
      <link href="/2022/05/31/%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E5%92%8Cvlan/"/>
      <url>/2022/05/31/%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E5%92%8Cvlan/</url>
      
        <content type="html"><![CDATA[<h1 id="局域网交换-与-vlan">局域网交换 与 vlan</h1><ul><li>网桥和路由器一般是通过软件来完成的，基于操作系统的</li><li>交换机是基于硬件的</li></ul><h1 id="交换机">交换机</h1><h2 id="交换机基本功能">交换机基本功能</h2><ul><li>根据MAC地址建立和维护 交换表（类似于网桥表</li><li>将帧切换出接口到目标</li></ul><h2 id="对称交换-symmetric-switching">对称交换 Symmetric Switching</h2><ul><li><p>对称交换可再具有相同带宽的端口之间提供交换连接（10/10Mbps or100/100Mbps）</p></li><li><p>用户尝试访问其他网段上的服务器时，可能会导致瓶颈（对称交换可能会导致带宽不足）</p><p><img src="https://s2.loli.net/2022/06/01/c3qhxPfeFDnjTaR.png"></p></li></ul><blockquote><p>多个客户端 向服务器访问的话， 服务器端口流量会比较阻塞</p><p>（在对称切换中，双端的带宽时完全对称的，这是一个瓶颈）</p></blockquote><h2 id="非对称交换-asymmetric-switching">非对称交换 AsymmetricSwitching</h2><ul><li><p>通过将带有服务器的网段连接到更高带宽的端口(100Mbps)，非对称交换(asymmetricswitching)减少了服务器上潜在瓶颈的可能性</p></li><li><p>非对称交换需要在交换器中进行内存缓冲</p></li><li><p>非对称交换端口解决对称交换端口中的对称阻塞问题(进一步保证了服务器的稳定实现)</p></li></ul><p><img src="https://s2.loli.net/2022/06/01/4vwEJ7xUBbrTtkM.png"></p><h3 id="内存缓冲">内存缓冲</h3><ol type="1"><li>交换机中存储目标 和传输数据的内存区域，直到可以将其切换出正确的端口为止。<ol type="1"><li>基于端口(Port)的内存缓冲<ol type="1"><li>数据包存储在每个端口的队列中</li><li>由于目标端口繁忙，一个数据包可能会延迟其他数据包的传输</li><li>其他端口存在不均衡的问题。</li></ol></li><li>共享(Shared)内存缓冲<ol type="1"><li>所有端口共享的公用内存缓冲</li><li>允许将数据包在一个端口上接收并在另一个端口上发送出去，而无需将其更改为其他队列。</li><li>需要自己记录端口的信息</li></ol></li></ol></li><li>发生阻塞的时候，根据情况按照端口或者内存将包缓存下来</li></ol><h2 id="交换方式">交换方式</h2><h3 id="储存转发-store-and-forward-网桥-路由器等通过软件的设备">储存转发(Store and Forward ,网桥 路由器等通过软件的设备)</h3><ul><li>交换机接受整个帧，最后将其计算为CRC，然后再将其发送到目的地</li><li>接受后，校验，正确再发送</li></ul><h3 id="cut-through-直通">Cut through 直通</h3><ol type="1"><li>转发会增加延迟，通过使用直通切换方法可以减少</li><li>快速转发切换：仅在立即转发帧之前侦察目标MAC（只看到帧的目的地址就转发，不看帧的后面部分）</li></ol><h3 id="segment-free-switching-无碎片转发">Segment free Switching无碎片转发</h3><ol type="1"><li><p>​碎片释放：在转发帧之前读取前64个字典以减少错误，避免碰撞和帧碎片</p></li><li><p>Example：（三种不同查看方式）</p><p><img src="https://s2.loli.net/2022/06/01/NfZa1IdQKisUcGT.png"></p></li></ol><h2 id="第二层交换机">第二层交换机</h2><p><img src="https://s2.loli.net/2022/06/01/CWj3uywt67zIBqk.png"></p><ul><li>大规模集成电路，保证链路效率，低时延，低成本</li><li>有一个MAC地址</li></ul><h2 id="第三层交换机">第三层交换机</h2><p><img src="https://s2.loli.net/2022/06/01/Uiefl85qr93CL2I.png"></p><ol type="1"><li>基于硬件的帧转发机制</li><li>较高的帧转发性能</li><li>较高速的计算</li><li>低延迟</li><li>流控制</li><li>安全性更高</li><li>对数据流进行路由，生成MAC和IP的映射</li></ol><p>MAC地址过来的时候直接根据表从第二层进行通过</p><h2 id="第四层交换机">第四层交换机</h2><p><img src="https://s2.loli.net/2022/06/01/vo56H8dq1xaUENp.png"></p><ol type="1"><li>数据段在数据报里面，数据报在数据帧里面</li><li>只有交换机可以看到数据帧的数据部分的首部</li><li>可以根据端口主机的应用特点进行一定的流量控制</li><li>和Net OS是不一样的，没有那么智能</li><li>识别到前80个字节的数据报长度，对指定应用进行管理</li></ol><h2 id="多层交换机总结">多层交换机总结</h2><p><img src="https://s2.loli.net/2022/06/01/t5EiJwNZRDMnrAG.png"></p><ol type="1"><li>一般我们只是用二层交换机</li><li>交换机可以简单识别第三层和第四层信息</li></ol><h1 id="生成树协议stp-the-spanning-tree-protocol">生成树协议(STP, TheSpanning-Tree Protocol)</h1><h2 id="回路">回路</h2><ol type="1"><li>出于各种原因，网络中可能会出现<strong>环路</strong><ol type="1"><li>通常，网络中的环路是故意(deliberate)提供冗余的结果。</li><li>也可能由于配置错误而发生:在桥接网络中，环路可能是绝对灾难性的两个主要原因：<ol type="1"><li>广播回路(广播风暴)，没有TTL</li><li>路由表的错误</li></ol></li></ol></li><li>往往是<strong>第二层交换机</strong>的冗余导致的桥回路。</li><li>接入层到核心层的接入往往<strong>要有冗余</strong>，这个区域是主干网(backbone)</li></ol><h2 id="冗余造成了路由回路">冗余造成了路由回路</h2><p><img src="https://s2.loli.net/2022/06/01/nQlU3ADuLiImfg9.png"></p><ul><li>设备通过backbone和远端设备进行链接</li></ul><h2 id="第二层路由回路">第二层路由回路</h2><ol type="1"><li>广播和第2层循环可能是危险的组合。</li><li>以太网帧没有TTL字段</li><li>以太网帧开始循环后，它可能会继续下去，直到有人关闭其中一台交换机或断开链路为止(外部条件)</li><li>交换机将抖动(flip flop)主机A的桥接表条目(创建极高的CPU利用率)。</li><li>消耗CPU和内存</li></ol><h3 id="第二层路由回路-泛洪单播帧">第二层路由回路-泛洪单播帧</h3><p><img src="https://s2.loli.net/2022/06/01/d9BDfXaGNx4wKsc.png"></p><ul><li>过一段时间CAT-1和CAT-2没有收到Host-B的信息，删除表中的对应记录</li><li>在这之后，Host A发送给HostB信息，然后在CAT-1和CAT-2之间进行循环</li></ul><h2 id="生成树协议-综述">生成树协议 综述</h2><ol type="1"><li>生成树协议的元素<ol type="1"><li>主要功能：在<strong>交换/桥接网络</strong>中允许<strong>冗余路径</strong>，而不会因环路的影响而引起延迟。</li><li>STP通过计算<strong>稳定的生成树</strong>网络拓扑来防止环路</li><li><strong>生成树帧</strong>(称为桥协议数据单元-BPDU)用于确定生成树拓扑</li></ol></li><li>在正常情况下禁用一些端口来防止出现冗余</li></ol><h3 id="stp决策顺序seqence">STP决策顺序(Seqence)</h3><ol type="1"><li>生成树始终使用相同的四步决策序列：<ol type="1"><li>在拓扑里面最低的root BID(网桥标识)</li><li>找到 Root bridgh的最低路径成本</li><li>每个路径都会选择一个最低BID的sender这个是针对一个链路的，详见例子</li><li>每个路径再指定一个最低的ID端口</li></ol></li></ol><h3 id="bpdus-bridge-protocol-data-unit">BPDUs (Bridge Protocol DataUnit)</h3><ol type="1"><li>BPDU是交换机之间的流量；它们不承载最终用户(end-user)流量。</li><li>STP建立一个称为<strong>根网桥的根节点</strong>，生成的树源自根桥。</li><li>不属于最短路径树的冗余连接将被阻止。(block端口，不转发，但是接收)</li><li>在阻塞的链接上收到的数据帧将被丢弃。</li><li>交换机发送的允许形成无环逻辑拓扑的消息是BPDU</li></ol><p><img src="https://s2.loli.net/2022/06/01/T9cYgnlLaqm8esF.png"></p><ul><li>BPDU里面包含几个字段标识协议、版本、数据类型、标志等，记录它认可的RootBID(类似OSPF)、到BID最小的代价、发送的交换机的ID、从哪个端口发送</li><li>和OSPF不一样的:不一定以自己为根</li><li>这样在选举之后，冗余链路就被屏蔽掉了</li></ul><h3 id="stp的bpdu帧">STP的BPDU帧</h3><p><img src="https://s2.loli.net/2022/06/01/PdnXvft7VMC6AcT.png">注意前四个是很有意义的</p><ul><li>默认交换机每2s发送一次BPDU</li><li>主要是维护最短的路径</li><li>接收到BPDU帧的时候，会比较根ID，计算，如果更优则接受，反之则不接受。</li><li>经过一段时间的传递后会全局稳定</li></ul><h3 id="bridge-identificationbid">Bridge Identification/BID</h3><ol type="1"><li>网桥ID(BID)：8个字节(2 + 6)<ol type="1"><li>高阶BID子字段(2个字节)：网桥优先级<ol type="1"><li>216个可能的值：0-65,535(默认值：32,768)</li><li>通常以十进制格式表示</li></ol></li><li>低阶子字段(6个字节)：分配给交换机的MAC地址，以十六进制格式表示</li></ol></li><li>STP成本值：成本越低越好</li></ol><h3 id="选举根交换机">选举根交换机</h3><ol type="1"><li>交换机通过查找具有<strong>最低BID</strong>的交换机(通常称为根战争)来选择单个根交换机。</li><li>如果所有交换机都使用默认的网桥优先级32768，则最低的MAC地址将作为平局。</li><li>配置优先级来调整根桥</li></ol><h2 id="路径代价-cost">路径代价 Cost</h2><p><img src="https://s2.loli.net/2022/06/01/DyS54QtwOChjLPl.png"></p><ol type="1"><li>桥梁使用成本的概念来评估它们与其他桥梁的距离。</li><li>和OSPF算法相同的，这个标准是比较合适的，比之前OSPF要新，用固定的数值除以带宽来获得代价</li></ol><h2 id="five-stp-states-5个stp状态">Five STP States 5个STP状态</h2><ol type="1"><li>通过根据策略配置每个端口来建立状态</li><li>然后，STP根据流量模式(traffic Patterns)和潜在环路(ProtentialLoops)修改状态</li><li>STP状态的默认顺序为：<ol type="1"><li>阻塞:没有转发帧，听到了BPDU</li><li>监听:不转发任何帧，监听数据帧(确定自己可以参加的交换)，也会发送一些数据帧表示自己状态变了</li><li>学习:不转发帧，学习地址</li><li>转发:转发帧，学习地址</li><li>禁用:没有转发帧，没有听到BPDU</li></ol></li></ol><p><img src="https://s2.loli.net/2022/06/01/AlISN9e4Li7pt3b.png"></p><blockquote><p>STP过程：Blocking -&gt; 20s Listening -&gt; 15s Learning -&gt; 15sFowarding或者Disabled</p></blockquote><p><img src="https://s2.loli.net/2022/06/01/E16DpXngofWqYwF.png"></p><p><img src="https://s2.loli.net/2022/06/01/75O6iZqpBTGhbIP.png"></p><ul><li>2s可以调整</li><li>老化时间:保存的时间</li></ul><h2 id="初始stp收敛">初始STP收敛</h2><ol type="1"><li>当网络首次启动时，所有网桥都会混合使用BPDU信息来泛洪网络。(开始泛洪BPDU信息)</li><li>立即，他们应用决策序列，允许他们BPDU进行PK，然后选择出来ROOT，从而形成整个网络的单个生成树</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(Step 1) 根交换机决定：选择一个根桥作为该网络的中心点</span><br><span class="line">(Step 2) 选择根端口：所有剩余的网桥都会计算出一组根端口</span><br><span class="line">(Step 3) 选择指定端口：其余所有网桥计算一组指定端口</span><br></pre></td></tr></table></figure><ul><li>Root switch针对一个特定的交换机</li><li>根端口针对一个交换机</li><li>指定端口对应链路</li></ul><h3 id="步骤1根交换机决定">步骤1：根交换机决定</h3><ol type="1"><li>宣布自己为根</li><li>检查端口上收到的所有BPDU以及将在该端口上发送的BPDU</li><li>对于每个到达的BPDU，如果其值小于为端口保存的现有BPDU</li><li>旧值被替换</li><li>BPDU的发送者被接受为新的根</li></ol><p><img src="https://s2.loli.net/2022/06/01/kZWUSDaL9GiCwvz.png"></p><ul><li>BC收到后将根修改为A</li><li>比如在BC链路中，B的MAC地址比较小，作为链路的SenderBID，这个port是指定端口</li></ul><h3 id="步骤2选择根端口">步骤2：选择根端口</h3><ol type="1"><li>每个非根桥必须选择一个根端口。<ol type="1"><li>桥的根端口是最接近根桥的端口。</li><li>根路径成本是到根网桥的所有链接的累积(cumulative)成本。</li></ol></li><li>STP成本随着在端口上接收到BPDU而增加，而不是随着它们从端口发送出去而增加</li></ol><p><img src="https://s2.loli.net/2022/06/01/7gdsQ1JRKYHW5ZA.png"></p><blockquote><p>B会把上面一个端口做为RootPort，虽然两个可达，但是上面一个更快，C也是同样</p></blockquote><h3 id="步骤3选择网段的指定端口i">步骤3：选择网段的指定端口(I)</h3><ol type="1"><li>每个网段都有一个指定的端口：充当单个网桥/交换机端口，该端口既向该网段又向根网桥发送流量，也从该网段和根网桥接收流量。</li><li>包含给定网段的指定端口的网桥/交换机称为该网段的指定网桥。</li><li>所有网桥/交换机将阻止它们上未指定的端口，根网桥上的每个活动端口都将成为指定端口</li><li>每个链路只有一个指定端口，一旦选定其他就block了</li></ol><p><img src="https://s2.loli.net/2022/06/01/JCz9tV2W6seKpYq.png"></p><ul><li>BC之间的，左边是指定端口(BID小)</li><li>MAC地址唯一的</li><li>Root Port都是上面的</li></ul><p><img src="https://s2.loli.net/2022/06/01/xF6yLAMRw7Jo5sY.png"></p><ul><li>AB和AC之间的链路的指定端口是A上面的端口</li></ul><h1 id="vlan-virtual-local-area-network-虚拟局域网">VLAN (Virtual LocalArea Network 虚拟局域网)</h1><h2 id="为什么引入vlan">为什么引入VLAN？</h2><ul><li>传统的局域网使用的是集线器（Hub)，Hub只有一根总线，一根总线就是一个冲突域。所以传统的局域网是一个扁平的网络，一个局域网属于同一个冲突域。<strong>任何一台主机</strong>发出的报文都会被同一冲突域中的所有其他机器接收到。</li><li>后来，组网时使用<strong>交换机代替集线器</strong>，每个端口可以看成是一根单独的总线，冲突域缩小到每个端口，使得网络发送单播报文的效率大大提高，与此同时极大地提高了二层网络的性能。</li><li>但是假如一台主机发出广播报文，连接在交换机的所有设备仍然可以接收到该广播信息，通常把广播报文所能传输的范围称为广播域。交换机在传递广播报文的时候依然要将广播报文复制多份，发送到网络的各个角落。所以随着<strong>网络规模的扩大</strong>，网络中的广播报文越来越多，严重<strong>影响网络性能</strong>，这就是所谓的广播风暴的问题。由干交换机二层网络工作原理的限制，交换机对广播风暴的问题无能为力。为了提高网络效率，一般需要将网络进行分段:<strong>把一个大的广播域划分成几个小的广播域</strong>。</li><li>过去往往通过路由器对网络进行分段，这样可以使得广播报文的发送范围大大减小，这种方案解决了广播风暴的问题，但用路由器是在网络层上分段将网络隔离的，网络规划复杂,组网方式不灵活，并且大大增加了管理维护的难度。作为替代的LAN分段方法，虚拟局域网(VLAN）就出现了，专门用来<strong>解决大型的二层网络环境</strong>面临的问题。</li></ul><h2 id="vlan可以不通过路由器就隔离广播域吗">VLAN可以不通过路由器就隔离广播域吗？</h2><ul><li>虚拟局域网（VLAN)逻辑上把<strong>网络资源</strong>和<strong>网络用户</strong>按照一定的原则进行划分，把一个物理上实际的网络划分成多个小的逻辑的网络。这些小的逻辑的网络形成各自的广播域，也就是虚拟局域网VLAN。</li><li>从下图中可以看出，一共有3个虚拟局域网，它们形成各自的广播域，广播报文不能跨越这些广播域传送。</li><li>从图中还可以看出，各大主机都是不枸泥于所处的物理位置，因为它们既可以挂接在同一个交换机中，也可以挂接在不同的交换机中。</li></ul><p><img src="https://s2.loli.net/2022/06/01/d1eGEjz8xoUqc5I.png"></p><h2 id="虚拟局域网介绍">虚拟局域网介绍</h2><h3 id="现有的共享局域网配置">现有的共享局域网配置</h3><ol type="1"><li>在典型的共享局域网中…<ol type="1"><li>根据用户所插入(plug)的集线器对用户进行物理分组</li><li>路由器分割局域网并提供广播防火墙</li></ol></li><li>在虚拟局域网中<ol type="1"><li>您可以按使用的功能，部门或应用程序对用户进行逻辑分组</li><li>通过专有软件进行配置</li></ol></li></ol><h3 id="lan和vlan之间的差异">LAN和VLAN之间的差异</h3><ol type="1"><li>虚拟局域网<ol type="1"><li>在第2层和第3层工作</li><li>控制网络广播</li><li>允许用户由网络管理员分配。</li><li>提供更严格的网络安全性</li></ol></li></ol><p><img src="https://s2.loli.net/2022/06/01/r6SPz7QcRHVNOsA.png"></p><ul><li>左边是基于地理位置划分成子网(传统局域网)</li><li>VLAN是是通过逻辑位置进行划分</li><li>VLAN1的报文不会发送给VLAN2(虽然连接在一个交换机上)</li></ul><h3 id="vlans-ieee-802.1q">VLANs (IEEE 802.1q)</h3><ol type="1"><li>特点<ol type="1"><li>不限于物理交换机网段的网络设备或用户的<strong>逻辑分组</strong>。</li><li>VLAN中的设备或用户可以按功能，部门，应用程序等进行分组，而<strong>不管其物理网段的位置</strong>如何。</li><li>VLAN<strong>创建一个不限于物理网段</strong>的单个广播域，并且将其视为子网。</li><li>VLAN设置是由网络管理员使用供应商的软件在交换机中完成的。</li></ol></li><li>优点:<ol type="1"><li>限制广播包，提高带宽的利用率。</li><li>增强通信的安全性:其他VLAN用户网络收不到非本VLAN的报文，避免被监听</li><li>创建虚拟工作组：可以一个部门工作的人划分为一个VLAN，这样子即使他移动了办公位置，仍然能够正常办公</li><li>增强网络的健壮性：将一些网络故障限制在一个VLAN中</li></ol></li></ol><h3 id="分组用户">分组用户</h3><ol type="1"><li>VLAN可以从逻辑上将用户划分为不同的子网(广播域)</li><li>广播帧仅在具有相同VLAN ID的一个或多个交换机的端口之间切换。(VLANID属于端口)</li><li>可以通过基于以下内容的软件对用户进行逻辑分组：<ol type="1"><li>端口号</li><li>MAC地址</li><li>使用的协议</li><li>使用的应用</li></ol></li></ol><p><strong>没有vlan的网络广播</strong></p><p><img src="https://s2.loli.net/2022/06/01/7bcYoiEwZaxD26T.png" alt="大家在一个交换机上不可以进行划分"></p><p><strong>划分了vlan的网络广播</strong></p><p><img src="https://s2.loli.net/2022/06/01/mLV4aJA9doE73Kr.png" alt="各自角色之间单独进行通信，虽然连接的是同一个交换机，如果不在同一个VLAN上，相互之间也不能通信"></p><h3 id="vlan-间通信">VLAN 间通信</h3><p><img src="https://s2.loli.net/2022/06/01/PL1qgDAGbV8ZWn9.png"></p><ul><li>首先127.17.10.21询问网关地址(ARQ)</li><li>路由器帮忙转发(VLAN的交换需要路由器的支持)</li><li>交换机S2的不同端口在不同的VLAN，S1和S2、S1和S3之间是VLAN骨干</li></ul><h3 id="vlan-和第3层转发来控制广播域">VLAN 和第3层转发来控制广播域</h3><p><img src="https://s2.loli.net/2022/06/01/WTs74gyKUpLhG3S.png" alt="第三层交换机:为每一个网段设置一个SVI(switch virtual interface,虚拟交换机结构，也可以理解为子接口)，通过这个来进行不同网段之间的通信"></p><h2 id="vlan的结构">VLAN的结构</h2><h3 id="虚拟局域网通过骨干网backbone">虚拟局域网通过骨干网(BackBone)</h3><p><img src="https://s2.loli.net/2022/06/01/7cXpHV8mWN9gw1x.png"></p><ol type="1"><li>VLAN配置需要支持互连的路由器和交换机之间的骨干数据传输。</li><li>骨干网是用于VLAN间通信的区域</li><li>骨干网应该是高速链路，通常为100Mbps或更高</li><li>BackBone可以跑多个VLAN，是骨干网</li></ol><h3 id="在虚拟局域网中的路由器的作用">在虚拟局域网中的路由器的作用</h3><ol type="1"><li>路由器提供不同VLAN之间的连接</li><li>例如，您有VLAN1和VLAN2。<ol type="1"><li>在交换机内，位于不同VLAN上的用户无法相互通信(VLAN的好处！)</li><li>但是，VLAN1上的用户可以向VLAN2上的用户发送电子邮件，但他们需要路由器才能执行此操作</li></ol></li></ol><h3 id="在虚拟局域网中的帧的使用">在虚拟局域网中的帧的使用</h3><ol type="1"><li>交换机根据帧中的数据做出过滤和转发决策。</li><li>使用了两种技术<ol type="1"><li>帧过滤：检查有关每个帧的特定信息(MAC地址或第3层协议类型),特定的VLAN记录或者映射</li><li>帧标记：在整个网络骨干网中转发时，在每个帧的标题中放置一个唯一的标识符</li></ol></li></ol><p><img src="https://s2.loli.net/2022/06/01/muSnX3sAQpLY7zJ.png"></p><p><strong>Frame Filiter 帧过滤</strong></p><p><img src="https://s2.loli.net/2022/06/01/CJ1VwGv34bKMBZa.png"></p><ul><li>收到帧转发后，发现都不在一个LAN上，然后通过Backbone转发</li><li>Frame Table在交换机上传输</li></ul><p><strong>帧标记</strong></p><ol type="1"><li>帧标记实施过程：<ol type="1"><li>在整个网络骨干网中转发时，在每个帧的标题中放置一个VLAN标识符。</li><li>每个开关都可以理解和检查标识符。</li><li>当帧离开网络骨干网时，交换机会在帧发送到目标终端站之前删除标识符。只和端口绑定，而不影响主机</li></ol></li><li>帧标记在第2层起作用，并且几乎不需要处理或管理开销</li><li>从主机到了交换机端口，交换机端口进行标记，然后进行转发</li></ol><p><img src="https://s2.loli.net/2022/06/01/7WrK1qV6bG93vlP.png"></p><h3 id="frame-tagging-ieee802.1q-and-isl">Frame Tagging – IEEE802.1Q andISL</h3><ol type="1"><li>IEEE802.1Q:IEEE标准，在标头中插入VLAN的标签以标识所属的VLAN。(帧标记)。</li><li>ISL(Inter-SwitchLink)：思科专有。ISL在数据帧的前面添加一个26字节的标头，并在末尾附加一个CRC(4字节)。</li><li>推荐用IEEE802.Q</li><li>标记一般在BackBone上</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec09/27.png"></p><h2 id="虚拟局域网的实现">虚拟局域网的实现</h2><h3 id="端口虚拟局域网和广播">端口、虚拟局域网和广播</h3><ol type="1"><li>实现VLAN的两种方法<ol type="1"><li>静态的</li><li>动态的</li></ol></li><li>每一个端口绑定给一个VLAN<ol type="1"><li>确保不共享同一VLAN的端口不共享广播。</li><li>确保共享相同VLAN的端口将共享广播。</li></ol></li><li>实现途径:<ol type="1"><li>基于端口的虚拟局域网</li><li>基于MAC地址的虚拟局域网</li><li>基于IP地址的虚拟局域网</li><li>基于上层协议的虚拟局域网</li></ol></li></ol><h3 id="静态vlans">静态VLANS</h3><p><img src="https://s2.loli.net/2022/06/01/qkToyeOV7U1SXur.png"></p><ol type="1"><li>定义：静态VLAN是指将交换机上的端口管理性地分配给VLAN的时间</li><li>优点：<ol type="1"><li>安全，易于配置和监控</li><li>在控制移动的网络中效果很好</li></ol></li><li>端口是写死在交换机的端口上的</li></ol><h3 id="动态vlans">动态VLANS</h3><p><img src="https://s2.loli.net/2022/06/01/bTP9YEpXS2k7Awh.png" alt="一个服务器来配置VLAN的信息 ， 交换机通过MAC地址或者哪一个协议，指定是哪一个VLAN"></p><ol type="1"><li>当工作站最初连接到未分配的端口时，交换机会检查表中的条目，并使用正确的VLAN动态配置端口</li><li>优点<ol type="1"><li>添加或移动用户时减少管理(更多前期工作)</li><li>集中通知未授权用户</li></ol></li></ol><h3 id="以端口为中心的vlan">以端口为中心的VLAN</h3><p><img src="https://s2.loli.net/2022/06/01/XObNGkP8TVuim3K.png"></p><ul><li>实际的网络是有层次的</li><li>static的物理的接入层(physical Layer)</li><li>不同电脑在一个房间内</li><li>不同房间的不同电脑组成一个VLAN</li><li>路由器网关来处理</li></ul><h3 id="以端口为中心的vlan的优点">以端口为中心的VLAN的优点</h3><ol type="1"><li>同一VLAN中的所有节点都连接到同一路由器接口</li><li>使管理更容易，因为…<ol type="1"><li>通过路由器端口分配用户</li><li>VLAN易于管理。</li><li>提供更高的安全性</li><li>数据包不会"泄漏"到其他域</li></ol></li></ol><h3 id="接入和骨干连接">接入和骨干连接</h3><p><img src="https://s2.loli.net/2022/06/01/U9cm73DJHwuzMSQ.png"></p><ul><li>分为两类:<ol type="1"><li>接入链路:通过一个VLAN报文</li><li>骨干链路:通过多个VLAN报文</li></ol></li></ul><h3 id="访问连接">访问连接</h3><ol type="1"><li>访问连接是仅作为一个VLAN成员的交换机上的连接。</li><li>此VLAN被称为端口的本机VLAN，连接到端口的任何设备都完全不知道VLAN存在</li></ol><h3 id="主干链路">主干链路</h3><ol type="1"><li>主干链路能够支持多个VLAN。</li><li>主干链路通常用于将交换机连接到其他交换机或路由器。</li><li>交换机在快速以太网和千兆位以太网端口上都支持骨干链路。</li><li>也存在访问和骨干链接</li><li>一般Trunk就是BackBone</li></ol><p><img src="https://s2.loli.net/2022/06/01/tJwEC84HWnq69RI.png"></p><blockquote><ol type="1"><li>Sa和Sb上面连接使用单独的线，浪费</li><li>底下使用串行的线，不浪费端口</li></ol></blockquote><ol type="1"><li>骨干是支持多个VLAN的点对点链接</li><li>骨干用于在两个实现VLAN的设备之间创建链接时节省端口</li><li>骨干链路不属于特定的VLAN：充当交换机和路由器之间VLAN的通道。</li><li>可以将骨干链路配置为传输所有VLAN或有限数量的VLAN。</li><li>但是，骨干链路可能具有本地VLAN。</li><li>如果骨干线链路由于任何原因失败，则骨干线的本地VLAN是该骨干线使用的VLAN。</li><li>native VLAN是不发送无标记的信息</li></ol><h3 id="交换机29xx中的配置">交换机29xx中的配置</h3><ol type="1"><li>在Cisco 29xx交换机上配置VLAN时，必须遵循以下准则：<ol type="1"><li>VLAN的最大数量取决于交换机本身。</li><li>VLAN 1是出厂默认VLAN之一。(nativeVLAN往往是VLAN1，以及广播也是)</li><li>VLAN 1是默认的以太网VLAN。</li><li>思科发现协议(CDP)和VLAN骨干协议(VTP)通告在VLAN 1上发送。</li><li>默认情况下，Catalyst 29xx IP地址在VLAN 1广播域中。</li></ol></li></ol><h3 id="vlan配置">VLAN配置</h3><ol type="1"><li>步骤1：创建VLAN所需的步骤。 如果需要，还可以配置VLAN名称。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Switch# vlan database</span><br><span class="line">Switch(vlan)# vlan vlan_number</span><br><span class="line">Switch(vlan)# exit</span><br></pre></td></tr></table></figure><ol type="1"><li>步骤2：将VLAN分配给一个或多个接口：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Switch(config)# interface fastethernet 0/9 Switch(config-if)# switchport access vlan vlan_number</span><br><span class="line"></span><br><span class="line">REASONML</span><br></pre></td></tr></table></figure><h3 id="添加vlan示例">添加VLAN示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cat2950#vlan database</span><br><span class="line">cat2950(vlan)#vlan 9 name switchlab90</span><br><span class="line">VLAN 9 added:</span><br><span class="line">   Name: switchlab90</span><br><span class="line">cat2950(vlan)#?</span><br><span class="line">VLAN database editing buffer manipulation commands:</span><br><span class="line">    abort Exit mode without applying the changes</span><br><span class="line">    apply Apply current changes and bump revision number</span><br><span class="line">    exit Apply changes, bump revision number, and exit mode</span><br><span class="line">    reset Abandon current changes and reread current database Adding a VLAN Example</span><br><span class="line">cat2950(config)#interface fa 0/2</span><br><span class="line">cat2950(config-if)# switchport access vlan 9</span><br></pre></td></tr></table></figure><h3 id="验证vlan">验证VLAN</h3><ol type="1"><li><code>Switch# show vlan [vlanid]</code></li></ol><p><a href="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec09/33.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec09/33.png" alt="img"></a></p><blockquote><p>剩下的是默认VLAN</p></blockquote><h3 id="删除vlan">删除VLAN</h3><ol type="1"><li>删除VLAN后，分配给该VLAN的所有端口都将变为非活动状态。但是，端口将一直与删除的VLAN关联，直到分配给新的VLAN。</li><li><code>switch(vlan)# no vlan vlanid [name /vlan-name]</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat2950(vlan)#no vlan 9</span><br><span class="line">Deleting VLAN 9...</span><br><span class="line">cat2950(vlan)#exit</span><br><span class="line">APPLY completed.</span><br><span class="line">Exiting....</span><br><span class="line">cat2950#</span><br></pre></td></tr></table></figure><h2 id="在局域网之间的路由">在局域网之间的路由</h2><p><img src="https://s2.loli.net/2022/06/01/nuNvt48FaCWDd1k.png"></p><ol type="1"><li>每个端口连接一个VLAN，每个IP和一个VLAN连接</li><li>如下图，我们使用串口线，物理上是一个一个接口，划分成多个IP和子接口</li></ol><p><img src="https://s2.loli.net/2022/06/01/K51nrHsp8YTwAOz.jpg"></p><ul><li>对比如下:接入方式不同</li></ul><p><img src="https://s2.loli.net/2022/06/01/HuFBDXOctYKCQ7I.png"></p><h3 id="子接口">子接口</h3><p><img src="https://s2.loli.net/2022/06/01/jYkndq98TNP24bF.png"></p><ol type="1"><li>物理上一个，划分成Fa0/1、Fa0/2和Fa/3</li><li>涉及到的是单臂路由</li></ol><h3 id="配置vlan间路由">配置VLAN间路由</h3><ol type="1"><li>Step1:识别界面.<code>Router(config)#interface fastethernet port-number. subinterface-number</code></li><li>Step2:定义VLAN封装.(一般用dot1q)<code>Router(config-if)#encapsulation dot1q vlan-number</code></li><li>Step3:为接口分配IP地址<code>Router(config-if)#ip address ip-address subnet-mask</code></li></ol><h3 id="配置vlan间路由-1">配置VLAN间路由</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Sydney(config)#interface FastEthernet 0/0 </span><br><span class="line">Sydney(config-if)#full duplex 全双工</span><br><span class="line">Sydney(config-if)#no shut</span><br><span class="line">Sydney(config-if)#interface FastEthernet 0/0.1</span><br><span class="line"></span><br><span class="line">Sydney(config-subif)#encapsulation 802.1q 1</span><br><span class="line">Sydney(config-subif)#ip address 192.168.1.1 255.255.255.0</span><br><span class="line">Sydney(config-if)#interface FastEthernet 0/0.2</span><br><span class="line"></span><br><span class="line">Sydney(config-subif)#encapsulation 802.1q 20</span><br><span class="line">Sydney(config-subif)#ip address 192.168.2.1 255.255.255.0</span><br><span class="line">Sydney(config-if)#interface FastEthernet 0/0.3</span><br><span class="line"></span><br><span class="line">Sydney(config-subif)#encapsulation 802.1q 30</span><br><span class="line">Sydney(config-subif)#ip address 192.168.3.1 255.255.255.0</span><br></pre></td></tr></table></figure><ol type="1"><li>如果是Trunk Link:应该使用交叉线，而不是直通线</li><li>如果是Access Link:直通线</li></ol><h1 id="vlan题目备注">VLAN题目备注</h1><ol type="1"><li>同一VLAN中的两台主机可以跨越多台交换机</li><li>必须是第三层及以上的交换机才能用来构建VLAN</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> 互联网计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 互联网计算 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Routing and Routers</title>
      <link href="/2022/05/27/Routing-and-Routers/"/>
      <url>/2022/05/27/Routing-and-Routers/</url>
      
        <content type="html"><![CDATA[<h1 id="路由器基础">路由器基础</h1><h2 id="路由器的内部组件">路由器的内部组件</h2><p><img src="https://s2.loli.net/2022/05/27/a4rPZNuK7M9pAdT.png"></p><ul><li>特殊组件的计算机</li><li>console口进行具体的调试</li><li>辅助口(Auxiliary):一般不用，但是可能会用到</li></ul><h3 id="随机存取存储器ram-random-access-memory">随机存取存储器(RAM,Random Access Memory)</h3><ol type="1"><li>路由器配置文件的临时存储，一般做为内存使用</li><li>断电或重新启动时RAM内容丢失</li><li>存储:<ol type="1"><li>路由表</li><li>ARP缓存</li><li>快速切换缓存</li><li>报文缓存:可能前面有正在处理的，需要等待</li><li>数据包保留队列</li></ol></li><li>根据地址位就可以读到地址内容(访问比较快)</li></ol><h3 id="非易失随机存取存储器nvram-non-volatile-ram">非易失随机存取存储器(NVRAM,Non-volatile RAM)</h3><ol type="1"><li>存储备份(backup)/启动(startup)配置文件</li><li>路由器掉电或重启时内容不会丢失。</li><li>内置电池的方式来保证不断电，这一部分可以整体单独拿出来</li><li>保证快速访问，但是存储空间有限</li></ol><h3 id="flash-相当于台式机硬盘">Flash (相当于台式机硬盘)</h3><ol type="1"><li>电子可擦可编程只读存储器(EEPROM, Electronically ErasableProgrammable Read-Only Memory)</li><li>存储了Cisco IOS(互联网操作系统)</li><li>允许更新软件而无需更换闪存芯片</li><li>可以存储多个版本的IOS</li><li>断电保持</li></ol><h3 id="只读存储器rom-read-only-memory">只读存储器(ROM, Read-OnlyMemory)</h3><ol type="1"><li>包含POST(开机自检):PC也有，开机的时候，读取一些参数进行对比，如果一样则保证硬件是正常的。</li><li>引导程序(加载Cisco IOS)</li><li>作系统软件<ol type="1"><li>IOS的备份，精简(trimmed down)版本</li><li>升级需要安装新的芯片组</li></ol></li></ol><h2 id="接口">接口</h2><ol type="1"><li>数据包通过其进入和离开路由器的网络连接口</li><li>附在主板(motherboard)上或作为单独的模块。</li><li>大部分是网口，主要是用来支持网络的</li><li>0/0第一个，串口接口可能还分多个</li><li><img src="https://s2.loli.net/2022/05/27/RlkC5qFG6wtQ4jp.png"></li></ol><h1 id="路由器启动startup步骤">路由器启动(startup)步骤</h1><h2 id="系统启动程序">系统启动程序</h2><ol type="1"><li>执行开机自检(POST)：在此自检期间，路由器从所有硬件模块上的ROM执行诊断：如果有问题导致操作系统无法重启，那么我们就需要对硬件进行检查</li><li>验证CPU，内存和网络接口端口的基本操作。</li><li>软件初始化。</li></ol><p><img src="https://s2.loli.net/2022/05/27/RlkC5qFG6wtQ4jp.png"></p><h2 id="软件启动程序">软件启动程序</h2><ol type="1"><li><p>步骤1:ROM中的通用引导加载程序(bootstrap)在CPU卡上执行。</p></li><li><p>步骤2:可以在以下几个位置之一找到操作系统(CiscoIOS)。该位置在配置寄存器的引导字段中公开。</p></li><li><p>步骤3:加载操作系统映像。</p><ol type="1"><li>先从Flash找，也就只有一个image文件，将image导入内存</li><li>如果image找不到，则到TFTP Server，如果能找到则下载下拉一个image</li><li>如果TFTP也没有配置，则去ROM中导出IOS</li></ol></li><li><p>步骤4:将保存在NVRAM中的</p><p>配置文件</p><p>加载到主存储器中，并一次执行一行。</p><ol type="1"><li>先看NVRAM中有没有配置(start.config)</li><li>然后看TFTP Server有没有配置，如果有则下载一个</li><li>如果都没有，用console进行配置</li></ol></li><li><p>步骤5-如果NVRAM中<strong>没有</strong>有效的配置文件，则执行问题驱动(question-driven)的初始配置例程，该例程称为系统配置对话框，也称为<strong>设置模式</strong>。</p></li></ol><h2 id="路由器初始化过程">路由器初始化过程</h2><ol type="1"><li>设置不用作在路由器中输入复杂协议功能的模式。</li><li>对于大多数路由器配置任务，应使用安装程序提出最少的配置，然后使用各种configurationmode命令而非安装程序</li></ol><p><img src="https://s2.loli.net/2022/05/27/RlkC5qFG6wtQ4jp.png">]<img src="https://s2.loli.net/2022/05/27/RlkC5qFG6wtQ4jp.png">]</p><h2 id="查看和修改基本的路由器配置">查看和修改基本的路由器配置</h2><p><img src="https://s2.loli.net/2022/05/27/RlkC5qFG6wtQ4jp.png" alt="img"></p><ol type="1"><li>其他更加具体命令内容，可以在命令行下使用<code>?</code>来看</li><li><code>config</code>模式是全局配置。</li><li>banner:配置登录提示文字:一般会写路由器是谁用的，干什么用的，谁登录是非法的。</li><li><code>show version</code>命令可以查看到路由器的配置信息。</li></ol><h2 id="执行基本的编址方案">执行基本的编址方案</h2><p><img src="https://s2.loli.net/2022/05/27/RlkC5qFG6wtQ4jp.png"></p><ol type="1"><li>配置接口，每一个接口可以配置一个描述</li><li>no shutdown:启动端口</li><li>可以拷贝配置情况进入startup中</li></ol><h1 id="路由和配置">路由和配置</h1><h2 id="使用网络寻址进行路由">使用网络寻址进行路由</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/7.png"></p><ol type="1"><li>路由器通常使用两个基本功能(路径确定功能和交换功能)将数据包从一条数据链路中继(relay)到另一条数据链路。<ol type="1"><li><strong>交换功能</strong>允许路由器在一个接口上<strong>接受数据包</strong>并<strong>通过第二个接口转发。</strong></li><li><strong>路径确定</strong>功能使路由器能够选择<strong>最合适的接口</strong>来<strong>转发数据包</strong>。</li></ol></li><li>路由器使用地址的网络部分进行路径选择，以将数据包传递到下一个路由器</li><li>地址的节点部分由直接连接到目标网络的路由器使用，以将数据包传递到正确的主机。</li></ol><h2 id="静态和动态路由">静态和动态路由</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/10.png"></p><h3 id="静态路由">静态路由</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/11.png"></p><ol type="1"><li>尽管(whereas)动态路由倾向于显示(reveal)有关互联网络的所有已知信息，但是出于安全原因，您可能希望隐藏互联网络的某些部分。</li><li>当只有一条路径可访问网络时，到网络的静态路由就足够了。(默认路由，将B所有不知道位置的全部交给A，由A去进行访问)</li><li>这种分区称为末节网络(Stub Network)</li></ol><h3 id="静态路由配置">静态路由配置</h3><p><img src="https://s2.loli.net/2022/05/27/AaR19CIDq6BpLsh.png"></p><ol type="1"><li>network:包含掩码</li><li>adress:要确定下一跳地址</li><li>Distance:管理距离</li></ol><h3 id="管理距离">管理距离</h3><ol type="1"><li><strong>管理距离(administrativedistance)</strong>是路由信息源的可信赖性的等级，表示为从0到255的数值。(管理距离)</li><li>数字越大，可信度(trustworthiness)越低。</li><li>因此静态路由的管理距离通常很短(默认值为1)</li><li>管理距离是0的路由是什么情况?直连网段是最可信的，比静态路由还高</li></ol><h2 id="动态路由">动态路由</h2><ol type="1"><li>动态路由协议还可以重定向网络中不同路径之间的流量(或负载分担(loadshare))</li><li>往往网络是冗余的，保证连通性</li><li>静态路由的问题:如果指定的路径中出现故障就会出问题，而静态路由就避免了这个问题。</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/13.png"></p><ol type="1"><li>动态路由依赖于路由协议在路由器之间共享知识。</li><li>动态路由取决于两个基本路由器功能：<ol type="1"><li>维护(maintance)路由表(动态维持的)</li><li>向其他路由器分发(distribution)路由信息</li></ol></li></ol><p><img src="https://s2.loli.net/2022/05/27/wxnAtQXL6GNhOdR.png"></p><ol type="1"><li>彼此基于协议交换信息</li></ol><h2 id="收敛convergence时间">收敛(Convergence)时间</h2><p><img src="https://s2.loli.net/2022/05/27/8gBKvSTVtpqfO4I.png"></p><ol type="1"><li>收敛时间:<ol type="1"><li>从刚启动到网络达到稳定的时间</li><li>从发生变化到再次稳定的时间</li></ol></li><li>收敛时间越短，路由协议越强，需要路由器的基本硬件支持。</li></ol><h2 id="动态路由协议分类">动态路由协议分类</h2><p><img src="https://s2.loli.net/2022/05/27/R4hxIflEna7Y6ZA.png"></p><ol type="1"><li>大致分为以下三类:<ol type="1"><li>距离矢量(DV,Distance Vector)</li><li>链路状态(LS,Link State)</li><li>混合路由(HR,Hybird Routing)</li></ol></li><li>其中Hybrid Routing是在两种之间</li></ol><h3 id="距离矢量协议">距离矢量协议</h3><p><img src="https://s2.loli.net/2022/05/27/XswgfOU4b69YqIa.png"></p><ol type="1"><li>距离矢量算法不允许路由器知道互联网络的<strong>确切拓扑</strong></li><li>基于距离矢量的路由算法(也称为Bellman-Ford算法)在路由器之间传递路由表的周期性副本。<ol type="1"><li>大家交换Routing Table</li><li>只知道可达，但是不知道怎么可达(知道where,但是不知道how)，不知道整个网路的具体拓扑</li></ol></li></ol><h4 id="路由环路问题">路由环路问题</h4><p><img src="https://s2.loli.net/2022/05/27/cBdPEWXtKN8SoI9.png"></p><blockquote><ol type="1"><li><strong>稳定之后</strong>,如果NetWork1不可到达</li><li>B发现不可达，但是告知C的时候比较晚，C已经将信息告诉了D，这样子就可能循环下去，然后不收敛。</li></ol></blockquote><p><img src="https://s2.loli.net/2022/05/27/74kpyj6VcF9BzNP.png"></p><ol type="1"><li>网络1的无效更新将继续循环，直到其他进程停止循环为止。</li><li>尽管有一个基本事实，即目标网络(网络1)已关闭，但这种称为计数到无穷大的条件却使数据包在网络中连续循环。</li><li>当路由器计数到无穷远时，无效信息将允许存在路由环路。</li></ol><h4 id="路由环路解决方案一定义最大值maximum">3.5.1.2.路由环路解决方案一：定义最大值(Maximum)</h4><p><a href="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/20.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/20.png" alt="img"></a></p><ol type="1"><li>设置最大跳数，比如最多转发15跳，16跳以上为不可达</li></ol><h4 id="路由环路解决方案二路由中毒route-poisoning">路由环路解决方案二：路由中毒(RoutePoisoning)</h4><p><img src="https://s2.loli.net/2022/05/27/2D9JNPTdGqF8VEM.png"></p><ol type="1"><li>当网络5发生故障时，路由器E通过将网络5的表条目设置为<strong>16或不可访问</strong>来启动路由中毒。(而不是删除条目)</li><li>、当路由器C从路由器E接收到路由中毒时，它会将更新(称为毒性逆转，poisonreverse)发送回路由器E。这确保网段上的所有路由器都已接收到中毒的路由信息。</li><li>最终所有的路由器都知道不可达</li><li>路由毒害，由信息在路由表中失效的时候，把该表项的的度量值(metric)设为无穷大16，而不是马上从路由表中删掉这条路由信息，再将其信息发布出去，这样相邻的路由器就得知这条路由已无效了</li></ol><h4 id="路由环路解决方案三水平分隔split-horizon">路由环路解决方案三：水平分隔(SplitHorizon)</h4><ol type="1"><li><img src="https://s2.loli.net/2022/05/27/JqegUYv4NcsGF5Q.png">从某个端口收到的报文信息，不能再从端口发送回去</li><li>比如A发送给B和D，之后B和D又把之后的报文还给A，这时候就不接受B和D的。也即使A只接受B的</li><li>如果B和D接收到一个到达目的网段1的更好的路径，A是会接收的</li><li><strong>有名词解释题目</strong></li></ol><h4 id="路由环路解决方案四计时器hold-down-timers">路由环路解决方案四：计时器(Hold-DownTimers)</h4><p><img src="https://s2.loli.net/2022/05/27/MWV61PQI5ALeXs2.png"></p><ol type="1"><li>我收到网络信息不可以到达的信息的时候，启动计时器，开始计时(这个信息包含请计时信息)</li><li>如果有任何一个计时的设备收到了一个比原来更好的达到路径，则会修改对应记录，但是如果更差不会记录。</li><li>计时器结束后，删除掉对应的条目，避免出现问题</li><li>每一条路由表的记录都有<strong>有效时间</strong></li></ol><h3 id="阻止发送路由更新">阻止发送路由更新</h3><ol type="1"><li>为了防止接口发出任何路由更新信息，请使用以下命令：<code>Router(config-router)#Passive-interface f0/0</code></li><li>它仅在使用距离矢量路由协议时才有效，因为链接状态路由协议不会直接从其邻居的路由表中获取拓扑信息</li><li><strong>接受路由表的更新，但是不发送报文出去</strong></li></ol><h2 id="链接状态协议lsp-link-state-protocol">链接状态协议(LSP,Link-state Protocol)</h2><ol type="1"><li>基于链接状态的路由算法也称为SPF(最短路径优先)算法，维护复杂的拓扑信息数据库:对树处理路由表，没有环路问题</li><li>链接状态路由使用：<ol type="1"><li>链接状态广告(LSAs):告诉你我有这个链路(每一个网段都是相同性质链路，链路上有唯一的NetID、带宽、连接拓扑关系、网段、链路类型等属性，我们优化属性后，进行LSA，告知对方主Key，如果再需要的话，再给具体信息)</li><li>拓扑数据库(有LSA组成，每个结点都持有)</li><li>根据SPF(shortest pathfirst)算法生成的SPF树(Tree会不一样，因为每一个路由都是以自己为根的)</li><li>每个网络的路径和端口的路由表</li></ol></li><li>RFC 1583包含对OSPF链路状态概念和操作的描述。</li></ol><h3 id="链接状态网络发现">链接状态网络发现</h3><p><img src="https://s2.loli.net/2022/05/27/IKEmedMbRng8qBS.png"></p><ol type="1"><li>路由器之间<strong>交换LSA</strong>，每个路由器都以直接连接的网络开头</li><li>每个路由器与其他路由器并行<strong>构建一个拓扑数据库</strong>，该拓扑数据库包含来自网络的所有LSA。</li><li><strong>SPF算法计算网络可达性</strong>:路由器将此逻辑拓扑构建为一棵树，以其自身为根，由链路状态协议互联网络中每个网络的所有可能路径组成。然后，对这些路径进行最短路径优先(SPF)排序。</li><li><strong>路由器在路由表中列出其最佳路径以及这些目标网络的端口</strong>。它还维护拓扑元素和状态详细信息的其他数据库。</li></ol><h3 id="链接状态的问题">链接状态的问题</h3><ol type="1"><li>处理和存储要求<ul><li>在大多数情况下，运行链路状态路由协议要求路由器比距离矢量路由协议使用更多的内存并执行更多的处理：需要CPU进行计算</li></ul></li><li>带宽要求<ol type="1"><li>在初始链路状态数据包泛洪(flooding)期间，所有使用链路状态路由协议的路由器会将LSA数据包发送到所有其他路由器。随着路由器对带宽的需求增加，此操作将淹没互联网，并暂时减少可用于承载用户数据的路由流量的带宽。</li><li>一开始的时候报文会比较频繁多(所以告知LSA而不是LS，减小压力)</li><li>注：初期消耗大，之后消耗小，稳定之后是根据事务触发更新</li></ol></li></ol><h2 id="问题链接状态更新">问题：链接状态更新</h2><ol type="1"><li>链路状态路由必须确保所有路由器都获得所有必要的LSA数据包。</li><li>具有不同LSA集的路由器根据不同的拓扑数据计算路由。</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/25.png"></p><ul><li>如果有一个链路的状态发生变化(恢复或者被破坏)，必须将修改通知给全部路由器消耗代价比较大(SPF算法)。</li></ul><h2 id="比较链接状态和距离矢量">比较：链接状态和距离矢量</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/26.png"></p><ol type="1"><li>DV:距离矢量<ol type="1"><li>视野窄，代价小</li><li>基于跳数</li><li>定期交换路由表，收敛慢</li><li>交换路由表</li></ol></li><li>LS:链路状态<ol type="1"><li>视野宽，有一定代价</li><li>基于带宽</li><li>初期充分交换，收敛快</li><li>交换Linked State的数据库</li></ol></li></ol><h2 id="混合协议hybrid-protocols">混合协议(Hybrid Protocols)</h2><ol type="1"><li>混合协议的示例：<ol type="1"><li>OSI’s IS-IS (Intermediate System-to-Intermediate System)</li><li>Cisco’s EIGRP(Enhanced Interior Gateway Routing Protocol).基于负载和带宽评判，定时交换路由表</li></ol></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/27.png"></p><ul><li>上面是思科的一个视角</li></ul><h2 id="routing-protocols-主动路由协议">Routing Protocols主动路由协议</h2><ol type="1"><li>IP主动路由协议的示例包括：</li></ol><table><colgroup><col style="width: 9%"><col style="width: 51%"><col style="width: 25%"><col style="width: 13%"></colgroup><thead><tr class="header"><th>英文缩写</th><th>英文解释</th><th>中文解释</th><th>备注</th></tr></thead><tbody><tr class="odd"><td>RIP</td><td>a distance-vector routing protocol</td><td>距离矢量协议</td><td>DV</td></tr><tr class="even"><td>IGRP</td><td>Cisco’s distance-vector routing protocol IGRP</td><td>思科的距离矢量路由协议</td><td>DV，基本启用</td></tr><tr class="odd"><td>OSPF</td><td>Open Shortest Path First</td><td>开放式最短路径优先</td><td>LSP</td></tr><tr class="even"><td>EIGRP</td><td>-</td><td>平衡的混合路由协议</td><td>杂合</td></tr></tbody></table><ol type="1"><li>工作在第三层</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/28.png"></p><h2 id="路由协议的主要目标">路由协议的主要目标</h2><ol type="1"><li>最佳(Optimal)路线:选择最佳路线</li><li>效率(Efficiency):最少使用带宽和路由器处理器资源</li><li>快速收敛(Rapid Convergence):越快越好。有些比其他人收敛更快。</li><li>灵活性(Flexibility):可以处理各种情况，例如高使用率和失败的路由</li></ol><h3 id="评价协议的标准">评价协议的标准</h3><ol type="1"><li>四个方面都好的协议更好一些</li><li>可以同时运行多个进程，之后基于AD度量，AD的值低的被采用</li></ol><h2 id="如何启用动态路由协议">如何启用动态路由协议</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/29.png"></p><ul><li>如何启动protocol:<code>router protocol [RIP...]</code></li><li>公告端口<code>network network-number</code>:要求是直连的网口</li></ul><h2 id="定义默认路由">定义默认路由</h2><ol type="1"><li>默认路由使路由表更短。(很多路由被省略)</li><li>如果路由表中没有目标网络的条目，则将数据包发送到默认网络。</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/30.png"></p><blockquote><ol type="1"><li>在B上设置，除了左侧五个网段的信息，都默认从192.34.56.0转发</li><li>对于左边的网络可以被认为是一个末节网络(Stub NetWork)</li></ol></blockquote><ol type="1"><li>使用动态路由协议定义默认路由:<code>Router(config)# ip default-network [network-number]</code></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/31.png"></p><ol type="1"><li>将默认路由定义为静态路由：<code>Router(config)# ip route 0.0.0.0 0.0.0.0 [next-hop-ipaddress| exit-interface]</code></li><li>配置默认路由后，使用show iproute将显示：(172.16.1.2是默认的下一跳地址)<ol type="1"><li>不得已的网关是到网络0.0.0.0的172.16.1.2</li><li>所有不知道转发给谁的都给172.16.1.2</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> 互联网计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 互联网计算 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Routing Protocols</title>
      <link href="/2022/05/26/Routing-Protocols/"/>
      <url>/2022/05/26/Routing-Protocols/</url>
      
        <content type="html"><![CDATA[<h1 id="routing-protocols-rip-and-ospf">Routing Protocols （RIP andOSPF）</h1><h1 id="rip-v1-rip-v2">RIP v1 / RIP v2</h1><h2 id="rip-v1">RIP v1</h2><ol type="1"><li>RIP v1被认为是一种<strong>内部网关</strong>协议<ol type="1"><li>RIPv1是一种距离向量协议，它以预定间隔将其整个路由表广播到每个邻居路由器，默认间隔为<strong>30s</strong></li><li>RIP使用<strong>跳数</strong>作为度量标准，最大跳数为15，达到16跳的报文自动抛弃</li></ol></li><li>RIP v1能够在多达六个等价路径上进行 <strong>负载平衡（LoadBalancing）</strong>，默认情况下为四个路径，最多六个，跳数才能负载均衡，跳数不同不满足条件</li><li>RIP 最初是在RFC 1058中指定的</li><li>RIP v1具有以下限制<ol type="1"><li>它不会在其更新中发送子网掩码信息:意味着必须用同样的子网掩码，不支持VLSM或无类域间路由(CIDR，ClasslessInterdomain Routing)。</li><li>它以255.255.255.255的广播形式发送更新:只能发给邻居，<strong>不能通过路由器转发。</strong></li><li>它不支持身份验证(authentication):只要启动RIP就可以接受到信息，也就意味着只要接入网络并且启动RIP进程，就可以了解到整个网络拓扑</li></ol></li></ol><h2 id="rip配置">RIP配置</h2><ol type="1"><li><code>router rip</code>命令选择RIP作为路由协议。</li><li>network命令分配基于NIC的网络地址，路由器将直接连接到该网络地址。</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec08/1.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">router rip # 选择RIP路由协议</span><br><span class="line">network 1.0.0.0</span><br><span class="line">network 2.0.0.0</span><br><span class="line">凡是属于上面的网段的端口都运行RIP协议</span><br></pre></td></tr></table></figure><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec08/2.png"></p><blockquote><p>上图中，A启动RIP进程，A有4个端口</p></blockquote><h2 id="rip-v2">RIP v2</h2><ol type="1"><li>RIP v2是RIPv1的<strong>改进</strong>版本，并且<strong>新增</strong>了以下的功能：<ol type="1"><li>这是一种使用<strong>跳数指标</strong>的距离矢量协议。</li><li>它使用<strong>抑制计时器</strong>来防止路由循环-默认值为<strong>180秒</strong>,6倍于交换时间</li><li>它使用水平分割(Split Horizon)来防止路由循环(Routing Loops)。</li><li>它使用16跳作为<strong>无限距离的度量</strong>。(15跳及以内可达)</li></ol></li></ol><h2 id="rip-v2的配置">RIP v2的配置</h2><ol type="1"><li>network命令导致实现以下三个功能：<ol type="1"><li>路由更新从接口多播。</li><li>如果路由更新进入相同的界面，则将对其进行处理。</li><li>广播直接连接到该接口的子网。</li></ol></li><li><code>version 2</code>:表示启动RIPv2，直接使用<code>router rip</code>默认为v1，一定要输入这个命令才能启动RIPv2</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec08/4.png"></p><h3 id="verifying-troubleshooting-验证与故障排除">Verifying&amp;Troubleshooting 验证与故障排除</h3><ol type="1"><li>验证 RIP v2<ol type="1"><li><code>Router# show ip protocols</code>:Verifying the RIPConfiguration 验证RIP配置</li><li><code>Router# show ip route</code>:Displaying the IP Routing Table显示IP路由表</li></ol></li><li>故障排除 RIP v2<ol type="1"><li><code>Router# debug ip rip</code>:display RIP routing updates sentand received. 显示更新路由表的时候的更新</li><li><code>Router# undebug all (/no debug all)</code>:停止debug</li></ol></li><li>Example</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec08/5.png"></p><h3 id="debug-ip-rip命令"><code>debug IP RIP</code>命令</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec08/6.png"></p><ol type="1"><li>The debug ip ripcommand displays RIP routing updates as they aresent and received. In this example, the update is sent by 183.8.128.130.debug ip rip命令显示RIP路由更新的发送和接收。在本示例中，更新是通过183.8.128.130发送的。</li><li>It reported on three routers, one of which is inaccessible becauseits hop count is greater than 15. Updates were then broadcast through183.8.128.2.它报告了三台路由器，其中一台无法访问，因为其跳数大于15。然后通过183.8.128.2广播了更新。</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec08/7.png"></p><ol type="1"><li>上图是查看路由表:Codes:表示对于路由协议类型的描述</li><li>120/1：表示1跳到达，120/2：表示2跳到达</li></ol><h2 id="rip-v1-和-rip-v2-的区别">RIP v1 和 RIP v2 的区别</h2><p><img src="https://s2.loli.net/2022/05/30/AMtK4QRUz2GCXjD.png"></p><ol type="1"><li>V2和V1不同的特点:<ol type="1"><li>支持有类路由:可以携带子网掩码</li><li>使用主播地址进行发送广播:特定给RIP接受，避免了接受后发现没有启动RIP进程耽误时间</li><li>需要身份认证才确定是否继续进行接收</li></ol></li></ol><h1 id="ospfsingle-area">OSPF（single area）</h1><h2 id="ospf概述">OSPF概述</h2><ul><li>开放最短路径优先（Open Shortest PathFirst）是基于标准的链路状态路由协议</li><li>It is described in several standards of the Internet EngineeringTask Force (IETF) Internet 网络工程任务组(IETF，Internet EngineeringTask Force)的多个标准中对此进行了描述:The most recent description is RFC2328. 最新的描述是RFC 2328。(已经不是最新的了)</li><li>与RIP v1和RIPv2相比，OSPF正在成为首选的IGP协议，因为它具有可伸缩性。</li><li>和RIP相比优势比较大，很多网络公司在研究OSPF的优化</li></ul><h2 id="路由信息">路由信息</h2><ol type="1"><li>链接的状态是对接口及其与其相邻路由器的关系的描述。</li><li>链接状态的集合形成一个<strong>链接状态数据库</strong>，有时也称为<strong>拓扑数据库</strong>。</li><li>路由器应用<strong>Dijkstra最短路径优先</strong>(SPF)算法来构建以自己为根的SPF树。</li><li>路由器通过SPF树计算最佳路径，然后选择最佳路径并将其放置在<strong>路由表</strong>中</li></ol><h2 id="ospf-vs-rip">OSPF vs RIP</h2><p><img src="https://s2.loli.net/2022/05/30/PyQuSFqtNUGhRED.png"></p><ul><li>OSPF:用于大型网络，基于带宽，可以分层(将网络划分成2层)，收敛更快，支持多路负载均衡</li></ul><p><img src="https://s2.loli.net/2022/05/30/a8l9M5eBFLsNRWu.png"></p><ul><li>上面带宽大，2跳达到，下面带宽小，1跳到达。</li><li>OSPF从上面走，RIP从下面走，但是上面会快一些</li></ul><h2 id="ospf特征">OSPF特征</h2><ul><li><p>OSPF特征</p><ul><li>更健壮</li><li>更具拓展性</li></ul></li><li><p>大型OSPF网络使用分层设计</p><ul><li>将大的网络分成多个area ， 每一个area 只能和area0 相连，保证area没有回路</li><li>层次最多只有两个，一个area 就是 area0</li><li>层次维持树的关系</li></ul></li></ul><p><img src="https://s2.loli.net/2022/05/30/84gBoSiscMLvFGm.png"></p><h2 id="ospf术语">OSPF术语</h2><p><img src="https://s2.loli.net/2022/05/30/FoYI5iySR9ztVnk.png"></p><blockquote><p>Link : 两个设备之间的物理链路</p></blockquote><p><img src="https://s2.loli.net/2022/05/30/koHtiJOwN9nQ3WM.png"></p><blockquote><p>Neighbors：相邻的路由器</p><p>Link-State（物理链路信息）：路由器连接关系、通过什么接口、网络类型（点对点，多路复用）等</p><p>不同网络类型处理代价不同</p></blockquote><p><img src="https://s2.loli.net/2022/05/30/8IpbztMKq3olAfi.png"></p><blockquote><p>Cost: 不同网络链路处理的时候的代价和链路带宽成反比，一般是固定值/带宽</p></blockquote><p><img src="https://s2.loli.net/2022/05/30/udHG7YXTWPjEe6f.png"></p><blockquote><p>Area：一个有很多路由器的端口都属于的区域（相同）</p></blockquote><p><img src="https://s2.loli.net/2022/05/30/P58ISoTrOtLEUK9.png"></p><blockquote><p>Autonomous System：多个Area形成一个自治系统</p></blockquote><p><img src="https://s2.loli.net/2022/05/30/gLMm53QcN2dtxAe.png"></p><p><img src="https://s2.loli.net/2022/05/30/eFcJNIau5g1iknY.png"></p><p><img src="https://s2.loli.net/2022/05/30/ylqXkWmHe9GZgut.png"></p><blockquote><p>Neighbours必须在一个Area中才算是，Neighbour之间交换TopologyDatabases</p><p>一个Area中获得全部LS(Link State)后计算Tree，生成表</p></blockquote><p><img src="https://s2.loli.net/2022/05/30/4T2QDcpAKdZfbXh.png"></p><blockquote><p>DR：指定路由器，只有在多路复用的情况下使用</p><p>BDR：如果DR坏了，再次选举会出现问题，如果DR损坏，BDR会立即称为DR</p></blockquote><h2 id="ospf域逻辑指称">OSPF域（逻辑指称）</h2><ol type="1"><li>区域用32位数字标识<ol type="1"><li>可以是IP格式，也可以是一个十进制值</li><li>区域0或区域0.0.0.0</li></ol></li><li>区域0：区域编号为0的单个区域</li><li>OSPF使用二级分层模型：逻辑上必须是两层结构，而物理实现上可能有一定的差异</li><li>在多区域OSPF网络中，要求所有区域都连接到区域0（主干）</li><li>Example：Area是和端口相关（注意端口相关）</li></ol><p><img src="https://s2.loli.net/2022/05/30/ukzE2PC9QlnUHFx.png"></p><ul><li>ABR(Area BorderRouter)：区域边界路由器，有一定的约束（一个路由器最多不连接超过三个以上的路由器）</li><li>一个Area中不能超过<strong>50</strong>台路由器，否则会导致SPF算法产生的计算量和内存过大</li></ul><h2 id="ospf行为">OSPF行为</h2><ul><li><p>OSPF使用邻居的邻接关系(Adjacencies)来全面了解网络</p></li><li><p>OSPF操作包括五个步骤</p><ul><li>建立邻接关系</li><li>选择DT和BDR（如果需要）：多路复用的时候才需要</li><li>发现路线</li><li>发现适当的路线</li><li>维护路线信息</li></ul></li><li><p>OSPF具有七个状态，分别是</p><ul><li>init，Two-way（双向），Exstart（预先启动），Exchange，Loading，Full</li></ul><p><img src="https://s2.loli.net/2022/05/30/DMVB2Onq39NmE5w.jpg"></p></li></ul><p><img src="https://s2.loli.net/2022/05/30/t5mZPDJe4N7QqIX.jpg"></p><h2 id="最短路径算法">最短路径算法</h2><ul><li><p>最短路径算法使用该节点作为起点，并以此检查它具有的相关相邻节点的信息来计算无环拓扑</p></li><li><p>SPF：有权图—&gt;树</p><p><img src="https://s2.loli.net/2022/05/30/zVk8SOW2E5bRiDa.png"></p></li><li><p>以C为根的例子：找到最短路径</p></li><li><p>部根据跳数选择，而根据最小权和来寻找</p></li></ul><h2 id="选择dr-和-bdr">选择DR 和 BDR</h2><ul><li><p>OSPF网络类型</p><ul><li>广播多路复用网络 例如 以太网</li><li>点对点网络</li><li>非广播多路复用网络（NBMA，Nonbroadcasr multi-access）</li></ul><p><img src="https://s2.loli.net/2022/05/30/ldHQWp92X8ibVCg.png"></p></li></ul><h2 id="dr-bdr">DR &amp; BDR</h2><p><img src="https://s2.loli.net/2022/05/30/FIhHREAm3sdLGbc.png"></p><ul><li>为什么要选择DR和BDR<ul><li>如果不选择DR 和 BDR会导致每一个路由器都和其他的素有路由器交流</li><li>每一个都要建立<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="12.821ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5666.9 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(1222.2,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mo" transform="translate(1944.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(2333.4,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g><g data-mml-node="mo" transform="translate(3055.7,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mn" transform="translate(3777.9,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(4277.9,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mn" transform="translate(4777.9,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(5277.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>个连接，对于链路的复杂比较高，有了DR只需要<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.146ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3600.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(889,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1711.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2711.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3211.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>个连接</li></ul></li><li>BDR是DR的备份，其他路由器之间就不用通信了</li><li>如果有DR则需要至少4条连接，DR和BDR之间必然有连接</li></ul><p><img src="https://s2.loli.net/2022/05/30/FYqUktEspBKGnlL.png"></p><blockquote><p>只有多路复用的实现需要DR 和 BDR</p></blockquote><ol type="1"><li>然后每个路由 与 DR 和 BDR 形成邻接关系</li><li>对于所有OSPF路由器，DR使用224.0.05（自己的ip）的<strong>主播地址</strong>向该网段上的所有其他路由器发送链接状态信息</li><li>为确保DR/BDR看到所有路由器在网段上发送的链接状态，使用了所有DR/BDR的多播地址224.0.06（DR/BDR之间）</li></ol><h3 id="多路复用中的-ospf">多路复用中的 OSPF</h3><ol type="1"><li><p>Giga/Fast/Ethernet, FDDI, Token Ring</p><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec08/25.png"></p></li><li><p>几个Area有几个DR和BDR(是在不同Area上)</p></li><li><p>DR和BDR归属于区域</p></li></ol><h2 id="ospf-报文">OSPF 报文</h2><ul><li>OSPF有五个类型的报文<ul><li><img src="https://s2.loli.net/2022/05/30/FBlSeTszaiDgC6I.png"></li><li>DBD:LSA, 发现没有发送LSR</li><li>由于传输要求比较高，所以设计了LSAck</li></ul></li></ul><h3 id="ospf-hello协议">OSPF Hello协议</h3><ul><li>路由器在接口上启动OSPF路由过程时，将发送hello数据包，并继续以固定的时间间隔（intervals）发送hello</li><li>控制（govern）OSPF hello 数据包交换的规则称为Hello 协议</li><li>Hello数据包的地址为224.0.05</li><li>默认情况下，广播多路访问 和 点对点网络 每十秒 发送一次Hello报文</li><li>在连接到 NBMA网络的接口（例如帧中继）上，默认时间时30s</li><li>保持心跳，确定还活着， hello 几乎是空报文，给所有跑OSPF的路由器发送</li></ul><h3 id="ospf报文头部">OSPF报文头部</h3><blockquote><p>Hello报文的Type字段设置为1</p></blockquote><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec08/27.png"></p><h3 id="哪个路由器-将称为dr">哪个路由器 将称为DR</h3><ul><li>优先级 + 路由器ID， 最大的为DR ， 第二大为BDR</li><li>优先级： 1-255 ， 默认值为：1</li><li>路由器ID<ol type="1"><li>环回IP地址（逻辑端口），避免端口宕机出现问题，（3中描述的问题）需要手动配置</li><li>如果没有回环IP地址，则接口IP为最高值地址（Active的端口上的IP作为参考）</li><li>若接口出现故障，则路由器必须重新建立邻接关系并重新转换（readvertising)LSA</li></ol></li></ul><h2 id="ospf操作的-完整步骤">OSPF操作的 完整步骤</h2><p><img src="https://s2.loli.net/2022/05/30/ocxWPge2RkyptlE.png"></p><ul><li>一开始的状态是Down State</li><li>然后发送Hello报文(Init State)</li><li>B收到A的报文(收到报文一定是邻居):Hello报文的TTL是1，所以不会跨路由器传播，收到即丢弃。</li><li>收到后，B也会发送自己的Hello，然后A收到后进入Two Way状态</li></ul><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec08/30.png"></p><ul><li>准备交换数据库(Exstart Starts)</li><li>首先确认主方(发送方)、从方(接受方)，保证数据有序，简单就是谁的RouterID高</li><li>RouterID高的(主方)发送自己DBD报文，从方对主方发送的DBD接受处理并发送</li></ul><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec08/31.png"></p><ul><li>交换完成后，各自检查自己是不是有全部的信息<ul><li>如果有完整的信息，则发送LSAck</li><li>如果发现有没有的，则发送LSR，等待LSU(整个链路的详细信息，不是LSA)来进行学习，之后收到完成后发送LSAck</li></ul></li></ul><h2 id="reviewospf-operation">Review：OSPF Operation</h2><ol type="1"><li>Set up the adjacency relationships</li><li>Elect DR and BDR (if needed)</li><li>Discover the routes</li><li>Choose appropriate routes</li><li>Maintain the route information</li></ol><h3 id="步骤1建立路由器邻接">步骤1：建立路由器邻接</h3><ol type="1"><li>路由器每隔一段时间发送一次hello数据包,Hello报文的TTL是1，表明不会跨路由传播。</li><li>如果邻居被发现了：将邻居添加到邻居数据库</li><li>发现网络类型<ol type="1"><li>如果是多路复用网络，进入DR/BDR选举过程，然后进入步骤2。</li><li>如果是点对点或点对多点网络，则不会举行DR/BDR选举过程，并跳过步骤2。</li><li>如果hello数据包标头中的DR/BDR字段已被占用(即DR /BDR对已经存在)，则不会进行DR/BDR选举，并跳过步骤2。</li></ol></li><li>如果对方的DP/BDP优于我的DP/BDP，则接受对方的。</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec08/28.png"></p><blockquote><p>HelloInterval:如果不同不能建立关系,Hello报文包含了DR信息在内的必要的参数</p></blockquote><h3 id="步骤2选举dr和bdr">步骤2：选举DR和BDR</h3><ol type="1"><li>如果没有其他路由器联机，则该路由器将成为DR。下一个要"启动"的路由器将是BDR。</li><li>如果多个路由器(两个或更多)同时联机，则<ol type="1"><li>优先级最高的路由器成为DR：优先级为零表示"从不DR"</li><li>如果存在平局，则具有最高路由器ID的路由器将成为DR：路由器ID是最高的环回或接口IP地址</li><li>具有第二高优先级或路由器ID的路由器成为BDR</li></ol></li><li>如果DR无效，则BDR变为DR。</li><li>然而<ol type="1"><li>如果新的OSPF路由器以更高的优先级或路由器ID加入网络，则当前的DR和BDR<strong>不会更改</strong>。</li><li>仅当当前DR失败时，它才成为新的BDR；或者仅当当前DR和BDR失败时，才成为新的DR。</li></ol></li></ol><h3 id="步骤3发现路线">步骤3：发现路线</h3><ol type="1"><li>这一步从Ex Start状态转换到完整状态</li><li>路由器确定"主/从(master/slave)"关系</li><li>多路复用网络中的DR/BDR交换LSA，并且所有其他DR将其Type 2DBD发送给DR/BDR。</li><li>如有必要，路由器可以通过发送请求更多信息的LSR进入负载状态:所有路由器必须在"加载状态"中等待，直到完全更新请求的路由器。</li><li>路由器现在进入完整状态</li></ol><h3 id="步骤4选择适当的路线">步骤4：选择适当的路线</h3><ol type="1"><li>现在，将与网络上的所有其他路由器并行地计算SPF算法。<ol type="1"><li>切记：在发生这种情况之前，所有路由器必须具有相同的链接状态数据库。</li><li>SPF使用Cost作为指标</li><li>SPF将从其自身到目的地的每条路径的成本相加，并以路由器为根来构建树</li><li>OSPF然后在路由表中安装成本最低的路径：最多将安装4条等价路径以进行负载共享</li></ol></li></ol><h3 id="步骤5维护路由信息">步骤5:维护路由信息</h3><ol type="1"><li>常规的Hello交换是OSPF用于检测新邻居或故障(downed)邻居的机制。</li><li>根据网络的类型，Hello数据包以不同的默认间隔发送。(确定对方是不是还好)<ol type="1"><li>对于速度为T1(1.544Mbps)或更高的链接，每10秒：广播多路访问和点对点链接</li><li>对于小于T1的链接，每30秒：非广播多路访问链接</li><li>"死间隔"是问候间隔的四倍。(如果在这样子对方还没有成功则对方死了)</li></ol></li></ol><h3 id="链路状态变化出现">2.13.6. 链路状态变化出现</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec08/32.png"></p><ul><li>Router A tells all OSPF DRs on 224.0.0.6</li><li>Event触发交换:比如A连接的网段断掉了</li><li>A使用LSU告知<strong>DR</strong></li></ul><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec08/33.png"></p><ul><li>DR tells others on 224.0.0.5</li><li>DR 通过LSU告知所有的路由器</li></ul><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec08/34.png"></p><ul><li>如果B连接了别的Area，则继续进行交换</li></ul><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec08/35.png"></p><ul><li>所有的路由信息交换完毕后，同时更新路由表。</li></ul><h2 id="基本的ospf配置">基本的OSPF配置</h2><ol type="1"><li>在路由器上启动OSPF<ol type="1"><li><code>Router (config)# router ospf process-id</code></li><li>进程号:process-id<ol type="1"><li>取值: 1 ~ 65535</li><li>在一台路由器上识别多个OSPF进程</li><li>通常在整个AS(自治系统)中保持相同的进程ID</li></ol></li></ol></li><li>在路由器上识别IP网络<ol type="1"><li><code>Router (config-router) # network address wildcardmask area area-id</code></li><li>网络地址可以是整个网络，子网或接口的地址。</li><li>address:IP地址</li></ol></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec08/36.png"></p><ul><li>只有一个Area，则为0</li><li><strong>Wild-cardMask和子网掩码相反</strong>:子网掩码是255.255.255.0，则Wild-cardAddress就是0.0.0.255</li><li>写IP和写网段最后都是一样的</li></ul><h2 id="配置回路loop地址">配置回路(Loop)地址</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Router (config) # interface loopback number </span><br><span class="line">Router (config-if) # ip address address subnet-mask</span><br></pre></td></tr></table></figure><ol type="1"><li>为OSPF路由器ID添加稳定性<ol type="1"><li>必须在OSPF进程开始之<strong>前</strong>配置回环接口:会涉及到主从关系确定和DR的选举</li><li>配置环回地址时，请使用/32掩码以避免潜在的路由问题</li><li>I建议您在基于OSPF的网络中的所有关键路由器上使用环回地址(专用或公用地址)。</li><li>一旦配置立刻生效，不需要no shutdown的命令即可</li></ol></li></ol><p><img src="https://s2.loli.net/2022/05/30/ILqn38yjAR7Xvcl.png"></p><blockquote><p>配置回路地址的方式如上图，删除只需要在前面添加no</p></blockquote><h2 id="修改ospf接口优先级">修改OSPF接口优先级</h2><ol type="1"><li>操纵DR/BDR选举<ol type="1"><li><code>Router (config-if) # ip ospf priority number</code></li><li>优先级:越大越高<ol type="1"><li>值：0-255,默认为1</li><li>优先级0表示接口不能被选为DR或BDR</li></ol></li></ol></li><li>操作OSPF的端口的优先级：<code>Router # show ip ospf [interface type number]</code></li><li>Example:</li></ol><p><a href="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec08/38.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec08/38.png" alt="img"></a></p><h2 id="ospf成本-指标">OSPF成本 = 指标</h2><ol type="1"><li>Cost适用于所有路由器连接路径</li><li>16位数字(1 – 65,535)</li><li>较低的Cost-&gt;更理想</li><li>路径决定是基于路径的总成本。</li><li>指标受到带宽的影响</li><li>用一个很大的数字去除以当前的带宽得到代价，计算方法如下</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec08/39.png"></p><h3 id="ospf路径cost">OSPF路径COST</h3><ol type="1"><li>连接到同一链接的所有接口必须就该链接的成本达成一致。否则，该链接将被视为关闭<ol type="1"><li>意味着可以手动调整优先级</li><li>串行链路的Cisco路由器默认成本为1784(56Kbps带宽):<code>Router (config-if) # ip ospf cost number(1-65536)</code></li><li>如果链路是更低速的，你必须为其确定真实的链路速度。</li><li>If the line is a slower speed, you must specify the real link speed:<code>Router (config-if) # bandwidth number(Kbps)</code></li></ol></li><li>例子：<ol type="1"><li>需要更改成本的常见情况是在多供应商(multi-vendor)路由环境中。成本更改将确保一个供应商的成本值与另一供应商的成本值匹配。</li><li>另一种情况是使用千兆以太网。默认成本将最低成本值1分配给100Mbps链路。</li></ol></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec08/40.png"></p><blockquote><p>现在的除数已经比这个要大了</p></blockquote><h3 id="设置ospf计时器">设置OSPF计时器</h3><ol type="1"><li>OSPF区域中的所有路由器必须在相同的hello间隔和相同的死间隔上达成一致，默认情况下：<ol type="1"><li>T1或更高链接(广播)为10秒</li><li>慢于T1的链接为30秒(非广播)</li><li>死亡间隔= 4 *问候间隔</li></ol></li><li>更改问候间隔的命令</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Router(config-if)# ip ospf hello-interval seconds</span><br><span class="line">Router(config-if)# ip ospf dead-interval seconds</span><br></pre></td></tr></table></figure><ol type="1"><li>注意：停顿间隔将自动调整为新的hello间隔的四倍。(只配置了一个的时候)</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec08/41.png"></p><h1 id="参考">参考</h1><p><a href="https://spricoder.github.io/2020/07/05/2020-Internet-computing/2020-Internet-computing-lecture08-Routing%20Protocols/">2020-计算机网络-lecture08-RoutingProtocols - SpriCoder的博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> 互联网计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 互联网计算 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由器和网络</title>
      <link href="/2022/05/26/%E8%B7%AF%E7%94%B1%E5%99%A8%E5%92%8C%E7%BD%91%E7%BB%9C/"/>
      <url>/2022/05/26/%E8%B7%AF%E7%94%B1%E5%99%A8%E5%92%8C%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="routing-and-routers-路由器和网络">Routing and Routers路由器和网络</h2><h1 id="路由器基础">路由器基础</h1><h2 id="路由器的内部组件">路由器的内部组件</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/1.png"></p><ul><li>特殊组件的计算机</li><li>console口进行具体的调试</li><li>辅助口(Auxiliary):一般不用，但是可能会用到</li></ul><h3 id="随机存取存储器ram-random-access-memory">随机存取存储器(RAM,Random Access Memory)</h3><ol type="1"><li>路由器配置文件的临时存储，一般做为内存使用</li><li>断电或重新启动时RAM内容丢失</li><li>存储:<ol type="1"><li>路由表</li><li>ARP缓存</li><li>快速切换缓存</li><li>报文缓存:可能前面有正在处理的，需要等待</li><li>数据包保留队列</li></ol></li><li>根据地址位就可以读到地址内容(访问比较快)</li></ol><h3 id="非易失随机存取存储器nvram-non-volatile-ram">非易失随机存取存储器(NVRAM,Non-volatile RAM)</h3><ol type="1"><li>存储备份(backup)/启动(startup)配置文件</li><li>路由器掉电或重启时内容不会丢失。</li><li>内置电池的方式来保证不断电，这一部分可以整体单独拿出来</li><li>保证快速访问，但是存储空间有限。</li></ol><h3 id="flash-相当于台式机硬盘">Flash (相当于台式机硬盘)</h3><ol type="1"><li>电子可擦可编程只读存储器(EEPROM, Electronically ErasableProgrammable Read-Only Memory)</li><li>存储了Cisco IOS(互联网操作系统)</li><li>允许更新软件而无需更换闪存芯片</li><li>可以存储多个版本的IOS</li><li>断电保持</li></ol><h3 id="只读存储器rom-read-only-memory">只读存储器(ROM, Read-OnlyMemory)</h3><ol type="1"><li>包含POST(开机自检):PC也有，开机的时候，读取一些参数进行对比，如果一样则保证硬件是正常的。</li><li>引导程序(加载Cisco IOS)</li><li>作系统软件<ol type="1"><li>IOS的备份，精简(trimmed down)版本</li><li>升级需要安装新的芯片组</li></ol></li></ol><h2 id="接口">接口</h2><ol type="1"><li>数据包通过其进入和离开路由器的网络连接口</li><li>附在主板(motherboard)上或作为单独的模块。</li><li>大部分是网口，主要是用来支持网络的</li><li>0/0第一个，串口接口可能还分多个</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/2.png"></p><h1 id="路由器启动startup步骤">路由器启动(startup)步骤</h1><h2 id="系统启动程序">系统启动程序</h2><ol type="1"><li>执行开机自检(POST)：在此自检期间，路由器从所有硬件模块上的ROM执行诊断：如果有问题导致操作系统无法重启，那么我们就需要对硬件进行检查</li><li>验证CPU，内存和网络接口端口的基本操作。</li><li>软件初始化。</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/3.png"></p><h2 id="软件启动程序">软件启动程序</h2><ol type="1"><li>步骤1:ROM中的通用引导加载程序(bootstrap)在CPU卡上执行。</li><li>步骤2:可以在以下几个位置之一找到操作系统(CiscoIOS)。该位置在配置寄存器的引导字段中公开。</li><li>步骤3:加载操作系统映像。<ol type="1"><li>先从Flash找，也就只有一个image文件，将image导入内存</li><li>如果image找不到，则到TFTP Server，如果能找到则下载下拉一个image</li><li>如果TFTP也没有配置，则去ROM中导出IOS</li></ol></li><li>步骤4:将保存在NVRAM中的<strong>配置文件</strong>加载到主存储器中，并一次执行一行。<ol type="1"><li>先看NVRAM中有没有配置(start.config)</li><li>然后看TFTP Server有没有配置，如果有则下载一个</li><li>如果都没有，用console进行配置</li></ol></li><li>步骤5-如果NVRAM中<strong>没有</strong>有效的配置文件，则执行问题驱动(question-driven)的初始配置例程，该例程称为系统配置对话框，也称为<strong>设置模式</strong>。</li></ol><h2 id="路由器初始化过程">路由器初始化过程</h2><ol type="1"><li>设置不用作在路由器中输入复杂协议功能的模式。</li><li>对于大多数路由器配置任务，应使用安装程序提出最少的配置，然后使用各种configurationmode命令而非安装程序</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/4.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/6.png"></p><h2 id="查看和修改基本的路由器配置">查看和修改基本的路由器配置</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/8.png"></p><ol type="1"><li>其他更加具体命令内容，可以在命令行下使用<code>?</code>来看</li><li><code>config</code>模式是全局配置。</li><li>banner:配置登录提示文字:一般会写路由器是谁用的，干什么用的，谁登录是非法的。</li><li><code>show version</code>命令可以查看到路由器的配置信息。</li></ol><h2 id="执行基本的编址方案">执行基本的编址方案</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/9.png"></p><ol type="1"><li>配置接口，每一个接口可以配置一个描述</li><li>no shutdown:启动端口</li><li>可以拷贝配置情况进入startup中</li></ol><h1 id="路由和配置">路由和配置</h1><h2 id="使用网络寻址进行路由">使用网络寻址进行路由</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/7.png"></p><ol type="1"><li>路由器通常使用两个基本功能(路径确定功能和交换功能)将数据包从一条数据链路中继(relay)到另一条数据链路。<ol type="1"><li><strong>交换功能</strong>允许路由器在一个接口上<strong>接受数据包</strong>并<strong>通过第二个接口转发。</strong></li><li><strong>路径确定</strong>功能使路由器能够选择<strong>最合适的接口</strong>来<strong>转发数据包</strong>。</li></ol></li><li>路由器使用地址的网络部分进行路径选择，以将数据包传递到下一个路由器</li><li>地址的节点部分由直接连接到目标网络的路由器使用，以将数据包传递到正确的主机。</li></ol><h2 id="静态和动态路由">静态和动态路由</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/10.png"></p><h3 id="静态路由">静态路由</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/11.png"></p><ol type="1"><li>尽管(whereas)动态路由倾向于显示(reveal)有关互联网络的所有已知信息，但是出于安全原因，您可能希望隐藏互联网络的某些部分。</li><li>当只有一条路径可访问网络时，到网络的静态路由就足够了。(默认路由，将B所有不知道位置的全部交给A，由A去进行访问)</li><li>这种分区称为末节网络(Stub Network)</li></ol><h3 id="静态路由配置">静态路由配置</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/12.png"></p><ol type="1"><li>network:包含掩码</li><li>adress:要确定下一跳地址</li><li>Distance:管理距离</li></ol><h3 id="管理距离">管理距离</h3><ol type="1"><li><strong>管理距离(administrativedistance)</strong>是路由信息源的可信赖性的等级，表示为从0到255的数值。(管理距离)</li><li>数字越大，可信度(trustworthiness)越低。</li><li>因此静态路由的管理距离通常很短(默认值为1)</li><li>管理距离是0的路由是什么情况?直连网段是最可信的，比静态路由还高</li></ol><h2 id="动态路由">动态路由</h2><ol type="1"><li>动态路由协议还可以重定向网络中不同路径之间的流量(或负载分担(loadshare))</li><li>往往网络是冗余的，保证连通性</li><li>静态路由的问题:如果指定的路径中出现故障就会出问题，而静态路由就避免了这个问题。</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/13.png"></p><ol type="1"><li>动态路由依赖于路由协议在路由器之间共享知识。</li><li>动态路由取决于两个基本路由器功能：<ol type="1"><li>维护(maintance)路由表(动态维持的)</li><li>向其他路由器分发(distribution)路由信息</li></ol></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/14.png"></p><ol start="3" type="1"><li>彼此基于协议交换信息</li></ol><h2 id="收敛convergence时间">收敛(Convergence)时间</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/15.png"></p><ol type="1"><li>收敛时间:<ol type="1"><li>从刚启动到网络达到稳定的时间</li><li>从发生变化到再次稳定的时间</li></ol></li><li>收敛时间越短，路由协议越强，需要路由器的基本硬件支持。</li></ol><h2 id="动态路由协议分类">动态路由协议分类</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/16.png"></p><ol type="1"><li>大致分为以下三类:<ol type="1"><li>距离矢量(DV,Distance Vector)</li><li>链路状态(LS,Link State)</li><li>混合路由(HR,Hybird Routing)</li></ol></li><li>其中Hybrid Routing是在两种之间</li></ol><h3 id="距离矢量协议">距离矢量协议</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/17.png"></p><ol type="1"><li>距离矢量算法不允许路由器知道互联网络的<strong>确切拓扑</strong></li><li>基于距离矢量的路由算法(也称为Bellman-Ford算法)在路由器之间传递路由表的周期性副本。<ol type="1"><li>大家交换Routing Table</li><li>只知道可达，但是不知道怎么可达(知道where,但是不知道how)，不知道整个网路的具体拓扑</li></ol></li></ol><h4 id="路由环路问题">路由环路问题</h4><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/18.png"></p><blockquote><ol type="1"><li><strong>稳定之后</strong>,如果NetWork1不可到达</li><li>B发现不可达，但是告知C的时候比较晚，C已经将信息告诉了D，这样子就可能循环下去，然后不收敛。</li></ol></blockquote><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/19.png"></p><ol type="1"><li>网络1的无效更新将继续循环，直到其他进程停止循环为止。</li><li>尽管有一个基本事实，即目标网络(网络1)已关闭，但这种称为计数到无穷大的条件却使数据包在网络中连续循环。</li><li>当路由器计数到无穷远时，无效信息将允许存在路由环路。</li></ol><h4 id="路由环路解决方案一定义最大值maximum">路由环路解决方案一：定义最大值(Maximum)</h4><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/20.png"></p><ol type="1"><li>设置最大跳数，比如最多转发15跳，16跳以上为不可达</li></ol><h4 id="路由环路解决方案二路由中毒route-poisoning">路由环路解决方案二：路由中毒(RoutePoisoning)</h4><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/21.png"></p><ol type="1"><li>当网络5发生故障时，路由器E通过将网络5的表条目设置为<strong>16或不可访问</strong>来启动路由中毒。(而不是删除条目)</li><li>、当路由器C从路由器E接收到路由中毒时，它会将更新(称为毒性逆转，poisonreverse)发送回路由器E。这确保网段上的所有路由器都已接收到中毒的路由信息。</li><li>最终所有的路由器都知道不可达</li><li>路由毒害，由信息在路由表中失效的时候，把该表项的的度量值(metric)设为无穷大16，而不是马上从路由表中删掉这条路由信息，再将其信息发布出去，这样相邻的路由器就得知这条路由已无效了</li></ol><h4 id="路由环路解决方案三水平分隔split-horizon">路由环路解决方案三：水平分隔(SplitHorizon)</h4><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/22.png"></p><ol type="1"><li>从某个端口收到的报文信息，不能再从端口发送回去</li><li>比如A发送给B和D，之后B和D又把之后的报文还给A，这时候就不接受B和D的。也即使A只接受B的</li><li>如果B和D接收到一个到达目的网段1的更好的路径，A是会接收的</li><li><strong>有名词解释题目</strong></li></ol><h4 id="路由环路解决方案四计时器hold-down-timers">路由环路解决方案四：计时器(Hold-DownTimers)</h4><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/23.png"></p><ol type="1"><li>我收到网络信息不可以到达的信息的时候，启动计时器，开始计时(这个信息包含请计时信息)</li><li>如果有任何一个计时的设备收到了一个比原来更好的达到路径，则会修改对应记录，但是如果更差不会记录。</li><li>计时器结束后，删除掉对应的条目，避免出现问题</li><li>每一条路由表的记录都有<strong>有效时间</strong></li></ol><h3 id="阻止发送路由更新">阻止发送路由更新</h3><ol type="1"><li>为了防止接口发出任何路由更新信息，请使用以下命令：<code>Router(config-router)#Passive-interface f0/0</code></li><li>它仅在使用距离矢量路由协议时才有效，因为链接状态路由协议不会直接从其邻居的路由表中获取拓扑信息</li><li><strong>接受路由表的更新，但是不发送报文出去</strong></li></ol><h2 id="链接状态协议lsp-link-state-protocol">链接状态协议(LSP,Link-state Protocol)</h2><ol type="1"><li>基于链接状态的路由算法也称为SPF(最短路径优先)算法，维护复杂的拓扑信息数据库:对树处理路由表，没有环路问题</li><li>链接状态路由使用：<ol type="1"><li>链接状态广告(LSAs):告诉你我有这个链路(每一个网段都是相同性质链路，链路上有唯一的NetID、带宽、连接拓扑关系、网段、链路类型等属性，我们优化属性后，进行LSA，告知对方主Key，如果再需要的话，再给具体信息)</li><li>拓扑数据库(有LSA组成，每个结点都持有)</li><li>根据SPF(shortest pathfirst)算法生成的SPF树(Tree会不一样，因为每一个路由都是以自己为根的)</li><li>每个网络的路径和端口的路由表</li></ol></li><li>RFC 1583包含对OSPF链路状态概念和操作的描述。</li></ol><h3 id="链接状态网络发现">链接状态网络发现</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/24.png"></p><ol type="1"><li>路由器之间<strong>交换LSA</strong>，每个路由器都以直接连接的网络开头</li><li>每个路由器与其他路由器并行<strong>构建一个拓扑数据库</strong>，该拓扑数据库包含来自网络的所有LSA。</li><li><strong>SPF算法计算网络可达性</strong>:路由器将此逻辑拓扑构建为一棵树，以其自身为根，由链路状态协议互联网络中每个网络的所有可能路径组成。然后，对这些路径进行最短路径优先(SPF)排序。</li><li><strong>路由器在路由表中列出其最佳路径以及这些目标网络的端口</strong>。它还维护拓扑元素和状态详细信息的其他数据库。</li></ol><h3 id="链接状态的问题">链接状态的问题</h3><ol type="1"><li><strong>处理和存储要求</strong><ul><li>在大多数情况下，运行链路状态路由协议要求路由器比距离矢量路由协议使用更多的内存并执行更多的处理：需要CPU进行计算</li></ul></li><li><strong>带宽要求</strong><ol type="1"><li>在初始链路状态数据包泛洪(flooding)期间，所有使用链路状态路由协议的路由器会将LSA数据包发送到所有其他路由器。随着路由器对带宽的需求增加，此操作将淹没互联网，并暂时减少可用于承载用户数据的路由流量的带宽。</li><li>一开始的时候报文会比较频繁多(所以告知LSA而不是LS，减小压力)</li><li>注：初期消耗大，之后消耗小，稳定之后是根据事务触发更新</li></ol></li></ol><h2 id="问题链接状态更新">问题：链接状态更新</h2><ol type="1"><li>链路状态路由必须确保所有路由器都获得所有必要的LSA数据包。</li><li>具有不同LSA集的路由器根据不同的拓扑数据计算路由。</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/25.png"></p><ul><li>如果有一个链路的状态发生变化(恢复或者被破坏)，必须将修改通知给全部路由器消耗代价比较大(SPF算法)。</li></ul><h2 id="比较链接状态和距离矢量">比较：链接状态和距离矢量</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/26.png"></p><ol type="1"><li>DV:距离矢量<ol type="1"><li>视野窄，代价小</li><li>基于跳数</li><li>定期交换路由表，收敛慢</li><li>交换路由表</li></ol></li><li>LS:链路状态<ol type="1"><li>视野宽，有一定代价</li><li>基于带宽</li><li>初期充分交换，收敛快</li><li>交换Linked State的数据库</li></ol></li></ol><h2 id="混合协议hybrid-protocols">混合协议(Hybrid Protocols)</h2><ol type="1"><li>混合协议的示例：<ol type="1"><li>OSI’s IS-IS (Intermediate System-to-Intermediate System)</li><li>Cisco’s EIGRP(Enhanced Interior Gateway Routing Protocol).基于负载和带宽评判，定时交换路由表</li></ol></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/27.png"></p><ul><li>上面是思科的一个视角</li></ul><h2 id="routing-protocols-主动路由协议">Routing Protocols主动路由协议</h2><ol type="1"><li>IP主动路由协议的示例包括：</li></ol><table><colgroup><col style="width: 9%"><col style="width: 51%"><col style="width: 25%"><col style="width: 13%"></colgroup><thead><tr class="header"><th>英文缩写</th><th>英文解释</th><th>中文解释</th><th>备注</th></tr></thead><tbody><tr class="odd"><td>RIP</td><td>a distance-vector routing protocol</td><td>距离矢量协议</td><td>DV</td></tr><tr class="even"><td>IGRP</td><td>Cisco’s distance-vector routing protocol IGRP</td><td>思科的距离矢量路由协议</td><td>DV，基本启用</td></tr><tr class="odd"><td>OSPF</td><td>Open Shortest Path First</td><td>开放式最短路径优先</td><td>LSP</td></tr><tr class="even"><td>EIGRP</td><td>-</td><td>平衡的混合路由协议</td><td>杂合</td></tr></tbody></table><ol type="1"><li>工作在第三层</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/28.png"></p><h2 id="路由协议的主要目标">路由协议的主要目标</h2><ol type="1"><li>最佳(Optimal)路线:选择最佳路线</li><li>效率(Efficiency):最少使用带宽和路由器处理器资源</li><li>快速收敛(Rapid Convergence):越快越好。有些比其他人收敛更快。</li><li>灵活性(Flexibility):可以处理各种情况，例如高使用率和失败的路由</li></ol><h3 id="评价协议的标准">评价协议的标准</h3><ol type="1"><li>四个方面都好的协议更好一些</li><li>可以同时运行多个进程，之后基于AD度量，AD的值低的被采用</li></ol><h2 id="如何启用动态路由协议">如何启用动态路由协议</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/29.png"></p><ul><li>如何启动protocol:<code>router protocol [RIP...]</code></li><li>公告端口<code>network network-number</code>:要求是直连的网口</li></ul><h2 id="定义默认路由">定义默认路由</h2><ol type="1"><li>默认路由使路由表更短。(很多路由被省略)</li><li>如果路由表中没有目标网络的条目，则将数据包发送到默认网络。</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/30.png"></p><blockquote><ol type="1"><li>在B上设置，除了左侧五个网段的信息，都默认从192.34.56.0转发</li><li>对于左边的网络可以被认为是一个末节网络(Stub NetWork)</li></ol></blockquote><ol start="3" type="1"><li>使用动态路由协议定义默认路由:<code>Router(config)# ip default-network [network-number]</code></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec07/31.png"></p><ol type="1"><li>将默认路由定义为静态路由：<code>Router(config)# ip route 0.0.0.0 0.0.0.0 [next-hop-ipaddress| exit-interface]</code></li><li>配置默认路由后，使用show iproute将显示：(172.16.1.2是默认的下一跳地址)<ol type="1"><li>不得已的网关是到网络0.0.0.0的172.16.1.2</li><li>所有不知道转发给谁的都给172.16.1.2</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> 互联网计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 互联网计算 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件构造</title>
      <link href="/2022/05/26/%E8%BD%AF%E4%BB%B6%E6%9E%84%E9%80%A0/"/>
      <url>/2022/05/26/%E8%BD%AF%E4%BB%B6%E6%9E%84%E9%80%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="软件构造">软件构造</h1><ul><li>概述</li><li>活动</li><li>实践方法</li><li>Construction Idea</li></ul><h1 id="概述">概述</h1><h2 id="construction-is-not-implementation">Construction is notImplementation</h2><ul><li><p>Distinction Between Activities and Phases</p><ul><li><p>Activity != Phase</p></li><li><p>Talking about “Construction” as an activity does not imply adistinct phase</p></li><li><p>Differentiating between kinds of activities is extremelyhelpful</p></li></ul></li><li><p>将软件构造定义为：通过编码、验证、单元测试、集成测试和调试等⼯作的结合，⽣产可⼯作的、有意义的软件的详细创建过程</p></li></ul><p><img src="https://s2.loli.net/2022/05/26/oMOTJBFYC6ruyxj.png"></p><h2 id="软件构造是设计的延续">软件构造是设计的延续</h2><ul><li>设计是规划软件构建⽅案的过程，实现是依据规划的软件构建⽅案建造真正产品的过程；</li><li>源程序是软件构建⽅案的最后⼀个规划，不是产品本身，真正的产品是运⾏于计算机上的由⼆进制代码组成的可执⾏程序；</li><li>源程序的⽣产过程——编程，属于设计活动，编译器完成的编译和链接才是依据规划建造软件产品的实现活动</li></ul><h1 id="活动">活动</h1><ul><li>详细设计</li><li>编程</li><li>测试</li><li>调试</li><li>代码评审</li><li>集成与构建（Build）</li><li>构造管理</li></ul><h2 id="详细设计">详细设计</h2><ul><li>有些项⽬会将主要的详细设计⼯作分配在软件构造阶段完成</li><li>不论是哪种项⽬，在软件构造阶段都不可避免的会涉及到详细设计的调整⼯作。因为<strong>编程语⾔是软件设计的⼀个重要约束</strong>，随着编程⼯作的进⾏和深⼊，⼈们可能会发现与预想不⼀致的情况和更多的约束，这个时候就需要在软件构造阶段修改详细设计⽅案</li><li>软件构造阶段详细设计使⽤的⽅法与技术与软件设计阶段是⼀样的，只是应⽤在更⼩的规模上</li></ul><h2 id="程序代码的典型质量">程序代码的典型质量</h2><p><img src="https://s2.loli.net/2022/05/26/wqb28uRdW6OeYGy.png"></p><h2 id="编程的主要技术">编程的主要技术</h2><ul><li>构造可理解的源代码的技术，包括命名和空间布局；</li><li>使⽤类、枚举类型、变量、命名常量和其它类似实体；</li><li>使⽤控制结构；</li><li>处理错误条件——既包括预计的错误，也包括未预期的异常；</li><li>预防代码级的安全泄露（例如，缓冲区超限或数组下标溢出）；</li><li>使⽤资源，⽤互斥机制访问串⾏可复⽤资源（包括线程和数据库锁）；<ul><li>文件，数据库</li></ul></li><li>源代码组织（组织为语句、例程、类、包或其它结构）；</li><li>代码⽂档；</li><li>代码调整</li></ul><h2 id="测试">测试</h2><ul><li>Inspection and testing is concerned with establishing the existenceof defects in a program</li><li>通常来说，程序员每修改⼀次程序就会进⾏最少⼀次单元测试，在编写程序的过程中前后很可能要进⾏多次单元测试，以证实程序达到了要求，没有程序错误。<strong>集成测试⼀般在单元测试之后</strong>，⽤来测试多个单元之间的接⼝是否编程正确</li></ul><h2 id="调试">调试</h2><ul><li>Debugging is concerned with locating and repairing these errors</li><li>调试过程分为三部分<ul><li>重现问题</li><li>诊断缺陷</li><li>修复缺陷</li></ul></li></ul><h3 id="重现问题的方法">重现问题的方法</h3><ul><li>控制输入<ul><li>找到相应的数据输⼊，能够重现绝⼤多数的问题。可以通过控制数据输⼊来重现问题意味着缺陷就发⽣在对该数据的处理代码之中</li><li>寻找能够重现问题的数据输⼊可以使⽤问题回溯推理、内存数据监控、记录输⼊数据⽇志等⽅法</li></ul></li><li>控制环境<ul><li>有些问题是编译器、操作系统、数据库管理系统、⽹络管理系统等系统软件环境造成的，通过控制数据输⼊⽆法重现问题。这时就需要通过控制环境来重现问题。⼀定要记住的是，如果你进⾏各种⼿段诊断之后确信你的程序代码没有缺陷，就要警惕可能是软件环境造成了问题。</li><li>控制环境以重现问题经常使⽤替换法，例如替换机器、操作系统、数据库管理系统等</li></ul></li></ul><h3 id="寻找和定位缺陷的方法">寻找和定位缺陷的方法</h3><ul><li>灵活使用编译器提示</li><li>持续缩小嫌疑代码范围</li><li>检查刚刚修改过的部分</li><li>警惕已经出现缺陷和常见缺陷</li><li>利用工具</li></ul><h3 id="常见错误">常见错误</h3><p><img src="https://s2.loli.net/2022/05/26/4uLAxI17ERvOai5.png"></p><h3 id="修复缺陷的注意点">修复缺陷的注意点</h3><ul><li><strong>一次只修复一个缺陷</strong><ul><li>缺陷 + 缺陷 --&gt; "正确"</li></ul></li><li>修改前保留旧版本的备份，如果项目使用了配置管理系统，这个工作会由配置管理工具完成，否则就需要由程序员手动完成</li><li>使用测试和评审验证修复的有效性</li><li>检查和修复<strong>类似的缺陷</strong>，这可以在<strong>代码搜索</strong>、程序切片等工具的帮助下进行</li></ul><h2 id="代码评审">代码评审</h2><ul><li>代码评审对代码的<strong>系统检查</strong>，通常是通过同⾏专家评审来完成的。通过评审会议可以发现并修正之前忽略的代码错误，从⽽同时提⾼软件的质量和开发者的技巧</li><li>代码评审⼀般分为正式评审、轻量级评审和结对编程</li></ul><h3 id="实践经验">实践经验</h3><p><img src="https://s2.loli.net/2022/05/26/7ohwSsgHdmurAVa.png"></p><h2 id="集成与构建">集成与构建</h2><ul><li>在以分散的方式完成程序基本单位（例程，类）之后，软件构造含需要将这些分散单位集成和构建为构件，子系统和完整系统</li><li>集成有<strong>大爆炸式集成</strong>和<strong>增量式集成</strong>两种方式，实践中<strong>增量式集成</strong>有更好的效果</li><li>构建将可读的源代码转换成标准的能在计算机上运行的可执行文件，构建过程需要配置管理工具的帮助</li></ul><h3 id="构造管理">构造管理</h3><ul><li>构造计划</li><li>度量</li><li>配置管理</li></ul><h1 id="实践方法">实践方法</h1><ul><li>重构</li><li>测试驱动开发</li><li>结对编程</li></ul><h2 id="重构">重构</h2><p><img src="https://s2.loli.net/2022/05/26/YrcsumUtbw5RSKd.png"></p><h2 id="代码的坏味道">代码的坏味道</h2><p><img src="https://s2.loli.net/2022/05/26/DeQlfJW7sdEzMTY.png"></p><p><img src="https://s2.loli.net/2022/05/26/jEGA3SPmzdO76hu.png" alt="坏味道的代码"></p><p><img src="https://s2.loli.net/2022/05/26/HrOEh2vKoYMxNjL.png" alt="重构后的代码"></p><h2 id="测试驱动开发">测试驱动开发</h2><ul><li>测试驱动开发⼜被称为测试优先（TestFirst）的开发，随着极限编程⽅法的普遍应⽤⽽得到普及</li><li>测试驱动开发要求程序员在编写⼀段代码之前，优先完成该段代码的测试代码。测试代码通常由测试⼯具⾃动装载执⾏，也可以由程序员⼿⼯执⾏。完成测试代码之后，程序员再编写程序代码，并在编程中重复执⾏测试代码，以验证程序代码的正确性</li></ul><p><img src="https://s2.loli.net/2022/05/26/N7Q9mXe1ZCAnVjo.png" alt="过程"></p><p><img src="https://s2.loli.net/2022/05/26/ox58N9bMIEZpjAh.png" alt="示例"></p><p><img src="https://s2.loli.net/2022/05/26/WOuhw2jv3xfgktT.png"></p><h2 id="结对编程-pair-programming">结对编程 Pair Programming</h2><ul><li>Two programmers working side-by-side, collaborating on the same<strong>design</strong>, <strong>algorithm</strong>,<strong>code</strong> or <strong>test</strong></li><li>One programmer, the driver, has control of the keyboard/mouse andactively implements the program</li><li>The other programmer, the <strong>observer</strong>, continuouslyobserves the work of the driver to identify tactical (syntactic,spelling, etc.) defects and also thinks strategically about thedirection of the work</li><li>On demand, the two programmers can brainstorm any challengingproblem</li><li>The two programmers periodically switch roles, they work together asequals to develop software</li></ul><h3 id="how-does-it-work">How does it work</h3><ul><li>Pair-Pressure<ul><li>Keep each other on task and focused</li></ul></li><li>Pair-Think<ul><li>Bring different prior experiences to the task</li></ul></li><li>Pair-Relaying<ul><li>Each, in turn, contributes to the best of their knowledge andability Then, sit back and think while their partner fights on</li></ul></li></ul><p><img src="https://s2.loli.net/2022/05/26/bWglicGTsLRaCOU.png"></p><p><img src="https://s2.loli.net/2022/05/26/2WmLNsDXfTCrcY6.png" alt="Workplace Layout"></p><p><img src="https://s2.loli.net/2022/05/26/D3rMCIPTA4NmoVd.png" alt="Partner Selection"></p><h3 id="pair-rotation">Pair Rotation</h3><ul><li>Ease staff training and transiton</li><li>Knowledge management/Reduced product risk</li><li>Enhanced team building</li></ul><h1 id="construction-idea">Construction Idea</h1><ul><li>A Decade of Advances in Software Construction</li><li>Ten Realities of Modern Software Construction</li><li>Some of the Worst Construction Ideas of 1990s and 2000s</li></ul><h2 id="construction-ideas">Construction Ideas</h2><ol type="1"><li>Design has Been Raised a Level</li><li>Daily Build and Smoke Test</li><li>Standard Libraries</li><li>Visual Basic</li><li>Open Source Software</li><li>The Web, for Research</li><li><strong>Widespread Use</strong> of Incremental Development</li><li><strong>Test-First</strong> Development</li><li>Refactoring as a Discipline</li><li><strong>Faster</strong> Computers</li></ol><h2 id="ten-realities-of-modern-software-construction-现代软件建设的十个现实">TenRealities of Modern Software Construction 现代软件建设的十个现实</h2><h3 id="构造是正当的话题">"构造"是正当的话题</h3><ol type="1"><li>软件"构造" –现在看起来像这样</li></ol><h3 id="个人差异很大">个人差异很大</h3><ol type="1"><li>变化在哪里存在？</li><li>研究人员发现以下方面的变化范围是10倍至28倍：<ol type="1"><li>编码速度</li><li>调试速度</li><li>发现缺陷的速度</li><li>发现缺陷的百分比</li><li>发现缺陷的百分比...</li><li>设计品质</li><li>设计生成的代码量</li></ol></li></ol><h3 id="个人纪律事项">个人纪律事项</h3><ol type="1"><li>为什么个人纪律很重要<ol type="1"><li>在预测未来时要现实</li><li>纪律很重要的领域<ol type="1"><li>重构</li><li>原型制作</li><li>优化</li><li>最小复杂度的设计</li><li>一般管理复杂性</li></ol></li><li>端点—纪律和勇气<ol type="1"><li>汉弗莱(PSP)</li><li>贝克谈极限编程</li></ol></li></ol></li></ol><h3 id="专注于简单比专注于复杂性更好">专注于简单比专注于复杂性更好</h3><ol type="1"><li>专注于读取时间的方便，而不是写入时间的方便</li><li>让别人更加任意的理解</li></ol><h3 id="缺陷成本增长依然有效">缺陷成本增长依然有效</h3><p><img src="https://s2.loli.net/2022/05/26/IyX8wAqU9KHR2DP.png"></p><ol type="1"><li>指数增长的修复代价</li></ol><h3 id="设计的重要性">设计的重要性</h3><ol type="1"><li>"无设计" —"所有设计"连续体上有很多有效的观点</li><li>要点：极端情况通常没有生产力<ol type="1"><li>全部预先设计与没有预先设计</li><li>完全计划与完全即兴(迭代/增量)</li><li>纯迭代与直序列</li><li>所有结构与所有创意</li><li>记录一切，什么都不记录</li></ol></li></ol><h3 id="技术浪潮影响施工实践">技术浪潮影响施工实践</h3><ol type="1"><li>技术浪潮对施工的影响<ol type="1"><li>"技术浪潮"的定义<ol type="1"><li>初潮特征</li><li>成熟波特征</li><li>后波特性</li></ol></li><li>施工受技术的影响–比我想象的要多(哦！)</li><li>可以根据一般原则解决技术</li></ol></li></ol><h3 id="增量方法效果最佳">增量方法效果最佳</h3><ol type="1"><li>增量主义观点<ol type="1"><li>纯瀑布模型完全不是增量模型或迭代模型，这就是为什么它不能很好地工作的原因</li><li>螺旋发展具有高度的增量性和迭代性，这就是其运作良好的部分原因</li><li>所有项目在某个时候都会经历迭代</li><li>想一想在项目中何时何地获得增量主义—便宜还是昂贵？</li></ol></li></ol><h3 id="工具箱的隐喻继续发亮">工具箱的隐喻继续发亮</h3><ol type="1"><li>工具箱隐喻<ol type="1"><li>什么才好 敏捷？ XP？ Scrum？ CMM？</li><li>工具箱说明没有一项适合每一项工作的工具</li><li>不同的行业部门将具有不同的工具，甚至会有不同的工具箱</li><li>软件工程工具箱中有什么？<ol type="1"><li>最佳实践</li><li>生命周期模型</li><li>模板，清单，模式，示例</li><li>软件工具</li></ol></li></ol></li></ol><h3 id="软件的基本张力">软件的基本张力</h3><ol type="1"><li>多年来，软件的主要矛盾一直没有改变：<ol type="1"><li>刚性计划与即兴创作</li><li>规划与算命</li><li>创意与结构</li><li>纪律与灵活性</li><li>定量与定性</li><li>工艺与产品</li><li>优化与满意</li></ol></li><li>平衡摇杆，但基本张力是恒定的</li></ol><h2 id="年代和2000年代最糟糕的建筑思想">1990年代和2000年代最糟糕的建筑思想</h2><p><img src="https://s2.loli.net/2022/05/26/sP5oDgAr9vTF4SY.png"></p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
          <category> 软件工程与计算2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
            <tag> 软件构造 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树</title>
      <link href="/2022/05/26/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
      <url>/2022/05/26/%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="线段树">线段树</h1><h2 id="概述">概述</h2><p><strong>线段树</strong>（SegmentTree）几乎是算法竞赛最常用的数据结构了，它主要用于维护<strong>区间信息</strong>（要求满足结合律）。与树状数组相比，它可以实现<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="7.695ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3401 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(1450,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1935,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(2412,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3012,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>的<strong>区间修改</strong>，还可以同时支持<strong>多种操作</strong>（加、乘)，更具通用性</p><hr><p>求解【值域爆炸，查询有限】的区间问题的几种方式</p><hr><h2 id="example">Example</h2><h3 id="我的日程安排表-i"><a href="https://leetcode.cn/problems/my-calendar-i/">729. 我的日程安排表I</a></h3><p>实现一个 MyCalendar类来存放你的日程安排。如果要添加的日程安排不会造成 重复预订，则可以存储这个新的日程安排。</p><p>当两个日程安排有一些时间上的交叉时（例如两个日程安排都在同一时间内），就会产生重复预订 。</p><p>日程可以用一对整数 start 和 end 表示，这里的时间是半开区间，即[start, end), 实数 x 的范围为， start &lt;= x &lt; end 。</p><p>实现 MyCalendar 类：</p><p>MyCalendar() 初始化日历对象。 boolean book(int start, int end)如果可以将日程安排成功添加到日历中而不会导致重复预订，返回 true。否则，返回 false 并且不要将该日程安排添加到日历中</p><p><strong>提示：</strong></p><blockquote><p><code>0 &lt;= start &lt; end &lt;= 109</code></p><p>每个测试用例，调用 <code>book</code> 方法的次数最多不超过<code>1000</code> 次。</p></blockquote><h2 id="solution">Solution</h2><p><strong>线段树（动态开点）</strong></p><p>线段树维护的节点信息包括：</p><ol type="1"><li><code>ls/rs</code>：分别代表当前节点的左右子节点在线段树数组<code>tr</code>中的下表</li><li><code>add</code>：懒标记</li><li><code>val</code>：为当前区间的所包含的点的数量</li></ol><p>对于常规的线段树实现来说，都是一开始调<code>build</code>操作创建空树，而线段树一般是以<strong>满二叉树</strong>的形式用数组存储，因此需要<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="4.625ex" height="1.557ex" role="img" focusable="false" viewBox="0 -677 2044.4 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mi" transform="translate(1444.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>的空间，并且这些空间在起始<code>build</code>空树的时候已经锁死</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 常用算法 </category>
          
          <category> 板子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码设计</title>
      <link href="/2022/05/26/%E4%BB%A3%E7%A0%81%E8%AE%BE%E8%AE%A1/"/>
      <url>/2022/05/26/%E4%BB%A3%E7%A0%81%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="代码设计">代码设计</h2><h1 id="设计易读的代码">设计易读的代码</h1><ol type="1"><li>维护的需要(维护的工作量已经超过了开发的工作量)<ol type="1"><li>50%-90%的维护时间在于阅读代码</li></ol></li><li>团队协作的需要</li></ol><h2 id="代码规范">代码规范</h2><h3 id="布局格式">布局格式</h3><ol type="1"><li>用缩进与对齐表达逻辑结构(Python)<ol type="1"><li>统一缩进格式一或者缩进格式二，主要符合团队编程的习惯即可</li><li>IDEA统一格式化:Ctrl + Alt + L</li></ol></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/1.png"></p><ol start="2" type="1"><li>将相关逻辑组织在一起<ol type="1"><li>成员变量声明</li><li>构造方法和析构方法</li><li>public方法</li><li>protected方法</li><li>private方法</li></ol></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/3.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/4.png"></p><ol start="3" type="1"><li>将空行分隔逻辑(将大规模的逻辑划分的片段进行分隔)</li><li>将语句进行分隔(将过长的语句分隔到几行中进行显示)</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/5.png"></p><h3 id="命名">命名</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/6.png"></p><h3 id="注释">注释</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/7.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/8.png"></p><ol type="1"><li>怎么写:去Github学习</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/9.png"></p><ol type="1"><li>JavaDoc可以生成API文档</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/10.png"></p><ol start="2" type="1"><li>例子:</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/11.png"></p><ol start="3" type="1"><li>类内部注释</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/12.png"></p><ol start="4" type="1"><li>例子</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/13.png"></p><h1 id="设计易维护的代码">设计易维护的代码</h1><h2 id="小型任务">小型任务</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/14.png"></p><h2 id="复杂决策">复杂决策</h2><ol type="1"><li>使用新的布尔变量，代替复杂决策</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/15.png"></p><ol start="2" type="1"><li>使用有意义的名称封装复杂决策</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/16.png"></p><ol start="3" type="1"><li>表驱动</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/17.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/18.png"></p><h2 id="数据使用">数据使用</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/19.png"></p><h2 id="明确依赖关系">明确依赖关系</h2><ol type="1"><li>类之间模糊的依赖关系会影响到代码的理解与修改，非常容易导致修改时产生未预期的连锁反应。</li></ol><h1 id="设计可靠的代码-重要">设计可靠的代码 重要</h1><h2 id="契约式设计">契约式设计</h2><h3 id="异常方式">异常方式</h3><ol type="1"><li>代码会很臃肿</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/20.png"></p><h3 id="断言方式">断言方式</h3><ol type="1"><li>Java提供的断言语句:<code>assert Expression1(: Expression2);</code></li><li>Expression1是一个布尔表达式，在契约式设计中可以将其设置为前置条件或后置条件</li><li>Expression2是一个值，如果存在，则会在排除异常的时候作为参数沟改造AssertionError</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/21.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/22.png"></p><h2 id="防御式编程">防御式编程</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/23.png"></p><ol type="1"><li>防御式编程往往会带来比较冗余和复杂的代码，但是会有效地提高程序的抗干扰能力和回复能力，有利于人机交互。</li></ol><h2 id="表驱动编程">表驱动编程</h2><ol type="1"><li>复杂逻辑到决策表再到表驱动</li></ol><h1 id="使用模型辅助设计复杂的代码">使用模型辅助设计复杂的代码</h1><ol type="1"><li>决策表:多个if/else</li><li>伪代码:在纸或者白板上</li><li>程序流程图</li></ol><h2 id="决策表">决策表</h2><table><thead><tr class="header"><th>条件和行动</th><th>规则</th></tr></thead><tbody><tr class="odd"><td>条件声明</td><td>条件选项</td></tr><tr class="even"><td>行为声明</td><td>行为选项</td></tr></tbody></table><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/24.png"></p><ol type="1"><li>决策表有效地保证了决策分析的完备性，可以和表驱动编程结合使用。</li></ol><h2 id="伪代码">伪代码</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/25.png"></p><ol type="1"><li>结合课本详细的描述</li><li>使用了IF、THEN、ELSE、DO、DO WHILE、DOUNTIL等关键字来表示程序的逻辑组织。</li><li>通过类似编程语言的缩进方式来表明程序逻辑</li><li>使用尽可能短的语句，只是用名词和动词，避免使用容易产生歧义的形容词的使用</li><li>实例详见课本P312页</li></ol><h2 id="程序流程图">程序流程图</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/26.png"></p><ol type="1"><li>圆角:开始或者结束</li><li>平行四边形:输入或输出</li><li>直角:处理步骤</li><li>菱形:控制结构</li></ol><h1 id="为代码开发单元测试用例">为代码开发单元测试用例</h1><h2 id="为方法开发测试用例">为方法开发测试用例</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/27.png"></p><ol type="1"><li>测试驱动的编程</li><li>方便集成和开发</li><li>等价类进行划分和区别</li><li>覆盖方式:<ol type="1"><li>路径覆盖</li><li>分支覆盖</li><li>语句覆盖</li></ol></li></ol><h3 id="sales方法">Sales方法</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/28.png"></p><ol type="1"><li>使用桩程序代替没有写的方法</li></ol><h2 id="使用mock-object测试类的方法">使用Mock Object测试类的方法</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/29.png"></p><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/32.png"></p><h2 id="为类开发测试用例">为类开发测试用例</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/30.png"></p><ul><li>我们使用状态图来辅助我们分析，通过状态图生成测试用例线索表，最后生成一个测试用例</li></ul><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/58.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/31.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/59.png"></p><h1 id="代码复杂度度量">代码复杂度度量</h1><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/33.png"></p><ul><li>重要:这里涉及到两种计算方法</li></ul><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/34.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/35.png"></p><h2 id="度量的意义">度量的意义</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/36.png"></p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.777ex;" xmlns="http://www.w3.org/2000/svg" width="24.5ex" height="2.563ex" role="img" focusable="false" viewBox="0 -789.6 10828.8 1132.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">类</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">加</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">权</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">方</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">法</text></g><g data-mml-node="mo" transform="translate(6277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="munderover" transform="translate(7333.6,0)"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1089,477.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(1089,-285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="msub" transform="translate(9786.9,0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="TeXAtom" transform="translate(748,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></g></svg></mjx-container></span></p><h1 id="代码大全书">代码大全(书)</h1><h2 id="变量">变量</h2><h3 id="变量定义">变量定义</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/37.png"></p><h3 id="变量初始化">变量初始化</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/38.png"></p><ol type="1"><li>使用内存访问工具来检查所有的指针的有效性。</li></ol><h3 id="作用域">作用域</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/39.png"></p><ol type="1"><li>生命周期越长越容易出现问题</li></ol><h3 id="减少作用域的一般原则">减少作用域的一般原则</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/41.png"></p><h3 id="持续性">持续性</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/42.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/43.png"></p><h3 id="为变量制定单一用途">为变量制定单一用途</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/44.png"></p><ol type="1"><li>哪怕是临时变量也尽量避免重复使用。</li></ol><h3 id="两个变量用于两种用途">. 两个变量用于两种用途</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/45.png"></p><h3 id="避免让代码具有隐含意义">避免让代码具有隐含意义</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/46.png"></p><h3 id="变量的命名">变量的命名</h3><ol type="1"><li>一定要用规范的方式命名变量</li></ol><h2 id="数值理论">数值理论</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/47.png"></p><ol type="1"><li>整数:<ol type="1"><li>检查整数除法</li><li>检查整数溢出</li><li>检查中间结果溢出(浮点运算)</li></ol></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/48.png"></p><h2 id="创建子程序的正当理由">创建子程序的正当理由</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/49.png"></p><h2 id="子程序的命名">子程序的命名</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/50.png"></p><h2 id="算法的设计">算法的设计</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/51.png"></p><ol type="1"><li>了解编译器的优化</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/40.png"></p><h2 id="一般控制问题">一般控制问题</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/53.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/60.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/54.png"></p><h2 id="空语句">空语句</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/55.png"></p><h2 id="更加清晰的非空循环体">更加清晰的非空循环体</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/56.png"></p><h2 id="处理危险的深层嵌套">处理危险的深层嵌套</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/55.png"></p><h1 id="问题代码与建议">问题代码与建议</h1><h2 id="green-1997-how-to-write-unmaintable-code">[Green 1997] How toWrite Unmaintable Code</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/61.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/62.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/63.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/64.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/65.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/65.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/66.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/67.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt18/68.png"></p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
          <category> 软件工程与计算2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
            <tag> 代码设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应用层</title>
      <link href="/2022/05/25/%E5%BA%94%E7%94%A8%E5%B1%82/"/>
      <url>/2022/05/25/%E5%BA%94%E7%94%A8%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="layer-5---the-session-layer-第五层-会话层">Layer 5 - The SessionLayer 第五层 会话层</h1><ul><li>TCP控制传输，如果用户想要完成一定的数据控制，就会对应在会话层完成</li></ul><h2 id="第五层的职责">第五层的职责</h2><p><img src="https://s2.loli.net/2022/05/25/8y5P3qJt4oml19L.png"></p><ul><li>基于令牌进行交互发言，通过数据同步保证数据完整性（应用逻辑）</li><li>进行数据分段，拼接，保证传输的有效</li><li>同步技术，保证故障恢复</li></ul><h2 id="第五层的服务">第五层的服务</h2><p><img src="https://s2.loli.net/2022/05/25/LuARX1FsIPrVHMv.png"></p><ol type="1"><li>双向同步通讯<ol type="1"><li>全双工通信</li><li>半双工通信</li><li>单工通信</li></ol></li><li>双向交替控制<ol type="1"><li>会话连接，活动开始，数据校验（同步）</li><li>令牌转换等</li></ol></li><li>是否同步了你的会话的主题</li></ol><p><img src="https://s2.loli.net/2022/05/25/hMLbFKrVgAe2Xi9.png"></p><ol type="1"><li>同步点（<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="11.986ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 5298 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(760,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(1336,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1802,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(2235,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(2756,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(3507,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(3992,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4337,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4937,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container></span>）用于分隔会话的各个部分，以前称为对话（<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="9.414ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 4161 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(520,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(865,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1394,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(1692,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(2177,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(2654,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3226,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(3692,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g></svg></mjx-container></span>）<ol type="1"><li>同步点： 发送一定数据后设置同步点</li><li>次同步点： 作为同步点的一个子集，进行数据校验</li><li>主同步点： 按照主同步点进行校验确认</li><li>如果错误，恢复到上次都已经同步的主同步点</li></ol></li><li>对话分离（<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="10.975ex" height="2.034ex" role="img" focusable="false" viewBox="0 -705 4851 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(645,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1111,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(1614,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(2080,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2531,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(3060,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(3421,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3766,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(4251,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>）是通信的有序启动，终止和管理</li><li>尽量保证了通话的效率和可靠性</li></ol><h2 id="第五层设备">第五层设备</h2><p><img src="https://s2.loli.net/2022/05/25/7yku9WFPDOzINGU.png"></p><ul><li>Client-Server 客户端-服务器模式：通过会话实现</li></ul><h1 id="layer-6---the-presentation-layer-第六层-表示层">Layer 6 - ThePresentation Layer 第六层 表示层</h1><ol type="1"><li>表示层负责以接受<strong>设备可以理解</strong>的形式表示数据<ol type="1"><li>传送语法协商</li><li>接受语法协商</li></ol></li><li>表示层具有三个主要功能<ol type="1"><li>数据格式（format）</li><li>数据压缩（compression）: 早起网络比较慢，倾向于先压缩再发送</li><li>数据加密（encryption）</li></ol></li><li>协商编码方式可以在会话层中实现</li></ol><h2 id="数据格式">数据格式</h2><ol type="1"><li>想象两个不同的（dissimilar）的系统<ol type="1"><li>一种使用拓展二进制编码的十进制交换码（EBCDIC,Extended Binary CodedDecimal Interchange Code） 格式化文本</li><li>另一种使用<strong>美国信息交换标准码（ASCII）</strong>标准化文本</li><li>选择大家都能识别的编码形式传输，保证大家都能理解</li></ol></li><li>第六层提供了这两种不同类型的代码之间的转换</li></ol><h3 id="图形文件格式">图形文件格式</h3><ol type="1"><li>互联网通常使用两种二进制文件格式来显示图像<ol type="1"><li>图形交换格式（GIF， Graphic Interchange Format)</li><li>联合图像专家组（JPEG, Joint Photographic Experts Group）</li></ol></li><li>任何具有读取器的GIF和JPEG文件格式的计算机都可以读取这些文件类型，而与计算机的类型无关</li></ol><h3 id="多媒体文件格式">多媒体文件格式</h3><ol type="1"><li>多媒体文件格式是另一种二进制文件，它存储声音，音乐和视屏<ol type="1"><li>这些文件可以完全下载，然后播放，也可以在播放时下载</li><li>后一种方法称为流音频</li></ol></li></ol><h2 id="数据加密与压缩">数据加密与压缩</h2><ol type="1"><li>第六层负责数据加密：数据加密可在信息传输过程中保护信息</li><li>表示层还负责文件的压缩</li></ol><h1 id="layer-7-the-application-layer-应用层">Layer 7： The ApplicationLayer 应用层</h1><p><img src="https://s2.loli.net/2022/05/25/wNIodOR1UnsSYr4.png"></p><ol type="1"><li>上图中各层的一些协议和使用：对端口进行管理</li><li>应用程序层（最接近用户）支持应用程序的通信组件</li></ol><h2 id="应用层职责">应用层职责</h2><ol type="1"><li>确定并确定预期的通用合作伙伴的可用性</li><li>同步合作的应用程序</li><li>同步协议的作用</li><li>建立有关错误恢复程序的协议</li><li>控制数据完整性</li><li>通过网络应用（networkapplications）为OSI模型的其余部分提供一个直接接口，或是通过独立应用提供非直接接口，如果文字处理，电子表格，演示管理器（presentationmanagers）,网络重定向器</li><li>不同应用不同情况</li></ol><h2 id="超文本传输协议-http-hypertext-transfer-protocol">超文本传输协议HTTP , HyperText Transfer Protocol</h2><p><img src="https://s2.loli.net/2022/05/26/FXJROlcQ7Sxt5bg.png"></p><ul><li>和电视的播放比较类似，通过浏览器界面切换内容，通过URL切换</li><li>多源点传输，内容规范</li><li>如何实现URL的转发： HTTP</li><li>如何完成界面： html</li><li>如何整合和查询：搜索引擎</li></ul><h3 id="统一资源定位符uniform-resource-locator">统一资源定位符（UniformResource Locator）</h3><ol type="1"><li>统一资源定位符URL是对可以从因特网上得到的资源的位置和访问方法的一种简介的表示</li><li>URL给资源的位置提供一种抽象的识别方法，并用这种方法给资源定位</li><li>只要能够对资源定位，系统就可以对资源进行各种操作，如存取、更新、替换和查找其属性</li><li>URL相当于一个文件名在网络范围的拓展。因此URL是与因特网相连的机器上的任何可访问对象的一个指针</li><li><code>&lt;URL的访问方式&gt;://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;</code><ul><li>访问方式：协议HTTPS或者HTTP</li><li>主机：域名的方式</li><li>端口对应进程</li><li>路径对应具体文件</li></ul></li></ol><h3 id="http">HTTP</h3><ol type="1"><li>HTTP是<strong>面向事务</strong>的客户端服务器协议</li><li>HTTP 1.0 协议是<strong>无状态的</strong> （stateless）<ol type="1"><li>每一次请求是<strong>独立的</strong>，不记录上一次的请求信息</li><li>Cookie是征求同意的存储（维持登陆状态），可以保证在多个应用之间维持登陆状态</li></ol></li><li>HTTP协议本身也<strong>无连接</strong>的，虽然它使用了面向连接的TCP向上提供的服务</li><li>万维网浏览器就是一个HTTP客户，而在万维网服务器等待HTTP请求的进程常称为HTTPdaemon， 缩写为 HTTPD</li><li>HTTPD 在收到HTTP客户端的请求后，把所需的文件返回给HTTP客户</li></ol><h3 id="http的报文结构请求报文">HTTP的报文结构（请求报文）</h3><p><img src="https://s2.loli.net/2022/05/26/WaJEdQXLyviD7RA.png"></p><ol type="1"><li>报文由三个部分组成， 开始行 + 首部行 + 实体主题</li><li>请求报文中，开始行就是请求行</li><li>请求报文和应答报文的应答结构都是一样的</li><li>应答码：<ol type="1"><li>2xx：成功</li><li>3xx：重定向</li><li>4xx：错误</li><li>5xx：服务器内部错误</li></ol></li></ol><h3 id="http请求报文的一些方法">HTTP请求报文的一些方法</h3><table><thead><tr class="header"><th>方法(操作)</th><th>意义</th></tr></thead><tbody><tr class="odd"><td>OPTION</td><td>请求一些选项的信息</td></tr><tr class="even"><td>GET</td><td>请求读取由URL所标志的信息</td></tr><tr class="odd"><td>HEAD</td><td>请求读取由URL所标志的信息的首部</td></tr><tr class="even"><td>POST</td><td>给服务器添加信息(例如，注释)</td></tr><tr class="odd"><td>PUT</td><td>在指明的URL下存储一个文档</td></tr><tr class="even"><td>DELETE</td><td>删除指明的URL所标志的资源</td></tr><tr class="odd"><td>TRACE</td><td>用来进行环回测试的请求报文</td></tr><tr class="even"><td>CONNECT</td><td>用于代理服务器</td></tr></tbody></table><h2 id="htmlhypertext-markup-language">HTML（HyperText MarkupLanguage）</h2><ul><li>定义了用于排版的命令</li><li>HTML文档是一种可以用任何文本编辑器创建的ASCII码文件</li><li>仅当HTML文档是以.html或.htm为后缀时，浏览器才对此文档的各种标签进行解释。</li><li>当浏览器从服务器读取HTML文档，针对HTML文档中的各种标签，根据浏览器所使用的显示器的尺寸和分辨率大小，重新进行排版并恢复出所读取的页面。</li><li>HTML用一对标签(一个开始标签和一个结束标签)或几对标签来标识一个元素。</li></ul><h2 id="ftpfiletransfer-protocol-and-tftptrivial-file-transfer-protocol">FTP(FileTransferProtocol) and TFTP（Trivial File Transfer Protocol）</h2><ul><li>FTP是一种<strong>可靠的</strong>，<strong>面向连接</strong>的服务，它使用TCP传输文件<ul><li>FTP首先在客户端和服务器（端口21）之间建立<strong>控制连接</strong></li><li>然后，建立第二个连接，这是计算机之间通过其传输数据的连接（端口20）</li></ul></li><li>TFTP是使用UDP的无连接服务（简化的FTP）<ul><li>体积小，易于实施，更方便</li><li>例如，TFTP在路由器上用于传输配置文件和Cisco IOS映像</li><li>不支持交互，没有目录浏览功能</li></ul></li><li>互联网早期，文件传输量很大</li></ul><h3 id="主进程工作步骤">主进程工作步骤</h3><ol type="1"><li>打开熟知端口(端口号21)，使客户进程能够连接上。（可以修改熟知端口）</li><li>等待客户进程发出连接请求</li><li>启动从属进程来处理客户进程发来的请求。从属进程对客户进程的请求处理完毕后即终止，但从属进程在运行期间根据需要还可能创建其他一些子进程<ol type="1"><li>控制连接</li><li>数据连接：数据通信</li><li>需要建立两个连接才能完成传输</li></ol></li><li>回到等待状态，继续接受其他客户进程发来的请求，主进程与从属进程的处理是并发地进行</li></ol><h3 id="ftp的屏幕信息举例">FTP的屏幕信息举例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">用户要用FTP和远地主机(网络信息中心NIC上的主机)建立连接。域名:nic.ddn.mil</span><br><span class="line">[01] ftp nic.ddn.mil</span><br><span class="line">本地FTP发送的连接成功信息</span><br><span class="line">[02] connected to nic.ddn.mil</span><br><span class="line">从远地服务器返回的信息，220表示"服务就绪"</span><br><span class="line">[03] 220 nic FTP server (Sunos 4.1)ready.</span><br><span class="line">本地FTP提示用户键入名字。用户键入的名字表示"匿名"。用户只需键入anonymous即可(匿名)</span><br><span class="line">[04] Name: anonymous</span><br><span class="line">数字331表示"用户名正确"，需要口令</span><br><span class="line">[05] 331 Guest login ok, send ident as password.</span><br><span class="line">本地FTP提示用户键入口令。用户这时可键入guest作为匿名的口令，也可以键入自己的电子邮件地址，即耶鲁大学数学系名为xyz的主机上的abd(匿名密码是随意输入的)</span><br><span class="line">[06] Password: abc@xyz.math.yale.edu</span><br><span class="line">数字230表示用户已经注册完毕</span><br><span class="line">[07] 230 Guest login ok, access restrictions apply.</span><br><span class="line">"ftp&gt;"是FTP的提示信息。用户键入的是将目录改变为包含RFC文件的目录</span><br><span class="line">[08] ftp&gt; cd rfc</span><br><span class="line">字符"CWD"是FTP的标准命令，表示Change Working Directory</span><br><span class="line">[09] 250 CWD command successful.</span><br><span class="line">用户要求将名为rfc1261.txt的文件复制到本地主机上，并改名为nicinfo(get 获取到本地)</span><br><span class="line">[10] ftp&gt; get rfc1261.txt nicinfo</span><br><span class="line">字符PORT是FTP的标准命令，表示要建立数据连接。200表示"命令正确"</span><br><span class="line">[11] 200 PORT command successful.</span><br><span class="line">数字150表示"文件状态正确，即将建立数据连接"</span><br><span class="line">[12] 150 ASCII data connection for rfc1261.txt (128.36.12.27,1401) (4318 bytes).</span><br><span class="line">数字226是"释放数据连接"，现在一个新的本地文件已经生成。</span><br><span class="line">[13] 226 ASCII Transfer complete. local: nicinfo remote: rfc1261.txt 4488 bytes received in 15 seconds (0.3 Kbytes/s).</span><br><span class="line">用户键入退出命令。</span><br><span class="line">[14] ftp&gt; quit</span><br><span class="line">表示FTP工作结束</span><br><span class="line">[15] 221 Goodbye. </span><br></pre></td></tr></table></figure><h2 id="telnet-协议">Telnet 协议</h2><ul><li>Telnet客户端软件提供了登录到运行Telnet服务器应用程序的远程Internet主机，然后从命令行执行命令的功能</li></ul><p><img src="https://s2.loli.net/2022/05/26/lEAnybaB495TYVq.png"></p><ul><li>输入参数，达成一致，对服务器操作</li><li>不同的操作系统可能有差异</li><li>基于Telnet的标准，virtual Terminal 可视标准</li></ul><h2 id="smtpsimple-mail-transfer-protocoland-poppost-office-protocol">SMTP（SimpleMail Transfer Protocol）and POP(Post Office Protocol)</h2><ul><li>电子邮件服务器使用STMP发送和POP接受邮件的相互通信<ul><li>SMTP（简单邮件传输协议）邮件发送，登陆发送的操作</li><li>POP3 邮件接受，邮件到达邮件服务端，由客户端和服务端联系接收邮件</li></ul></li></ul><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec06/9.png"></p><p><img src="https://s2.loli.net/2022/05/26/EHaNPB6tcZjm4O1.png" alt="SMTP_POP"></p><blockquote><p>发送者先登录到服务器，通过服务器根据SMTP传输到对应的服务器</p><p>用户登录，通过POP3协议收邮件到本地</p></blockquote><h3 id="mimemultipurpose-internet-mail-extensions-多用途internet邮件拓展">MIME(MultipurposeInternet Mail Extensions) 多用途Internet邮件拓展</h3><p>增加五个新的邮件首部</p><ol type="1"><li>MIME-Version: 标志 MIME 的版本。现在的版本号是1.0。若无此行，则为英文文本</li><li>Content-Description:这是可读字符串，说明此邮件主体是否是图像、音频或视频</li><li>Content-Id: 邮件的惟一标识符</li><li>Content-Transfer-Encoding: 在传送时邮件的主体是如何编码的</li><li>Content-Type:说明邮件主体的数据类型和子类型</li></ol><h3 id="mime-和-smtp-的关系">MIME 和 SMTP 的关系</h3><p><img src="https://s2.loli.net/2022/05/26/xrv6ctap8qb4hud.png"></p><ol type="1"><li>MIME标准扩充了SMTP标准</li><li>很多的文件(附件)并不是ASCII码的，我们需要用MIME将对应的文件进行转换(扩充)。过程如上图</li></ol><h2 id="snmpsimple-network-management-protocol简单网络管理协议">SNMP（SimpleNetwork Management Protocol）简单网络管理协议</h2><ol type="1"><li>简单网络管理协议(SNMP)是一种应用程序层协议，可简化网络设备之间的管理信息交换。</li></ol><p><img src="https://s2.loli.net/2022/05/26/sjqndAWoVUKLPD5.png"></p><ol type="1"><li>NMS(Network ManagementSystem):网管,通过下发请求对上网的所有的主机关于流量等等信息进行管理(监控)</li><li>通过管理数据库(MIB)进行信息交流</li><li>使用UDP通过广播进行实现</li></ol><h2 id="dnsdomain-name-system域名系统">DNS(Domain NameSystem）域名系统</h2><ol type="1"><li><p>域名系统(DNS)是网络上的服务，该服务管理域名并响应客户端将域名转换为关联IP地址的请求</p><p><img src="https://s2.loli.net/2022/05/26/WbQzeNKyF1Ca7Z3.png"></p></li><li><p>早期使用IP地址以及Host文件来进行访问</p></li></ol><h3 id="domain-name-域名">Domain Name 域名</h3><p><img src="https://s2.loli.net/2022/05/27/3etw8BXbAOGI5Zf.png"></p><ol type="1"><li>使用<code>.</code> 将字符串分隔</li><li>越靠后域名级别越高</li><li>www就是对应到主机群</li></ol><h3 id="tld-top-level-domain-顶级域">TLD （Top Level Domain）顶级域</h3><ol type="1"><li>国家TLD(nTLD)<ol type="1"><li>.cn(CHINA) 中国</li><li>.us (United States) 美国</li><li>.uk (United kingdom), etc. 英国等等</li></ol></li><li>通用TLD(gTLD)，最早的域包括：<ol type="1"><li>.com Enterprises and companies 企业和公司</li><li>.net Network services providers 网络服务提供者</li><li>.org Nonprofit organizations 非盈利组织</li><li>.edu Educational facilities 教育机构</li><li>.gov Governments (only for U.S.A) 政府(美国)</li><li>.mil Military facilities (only for U.S.A) 军方(美军)</li><li>.int International organizations 国际组织</li></ol></li><li>Infrastructure domain 基础设施领域<ol type="1"><li>Only one: arpa, for resolving domain names reversely仅一个：arpa，用于反向解析域名</li></ol></li><li>Recently, new TLD domain added:<ol type="1"><li>.aero(航空运输企业)</li><li>.biz (公司和企业)</li><li>.cat (加泰隆人的语言和文化团体)</li><li>.coop(合作团体)</li><li>.info(各种资讯)</li><li>.jobs(人力资源管理者)</li><li>.mobi(移动产品与服务的用户和提供者)</li><li>.museum (博物馆)</li><li>.name (个人)</li><li>.pro (经过认证的专业人员)</li><li>.travel (旅游业)</li></ol></li></ol><h3 id="domain-name-sever-域名服务器">Domain Name Sever 域名服务器</h3><p><img src="https://s2.loli.net/2022/05/27/QZDUsjkGgbMSW4l.png"></p><ul><li>顶级域名地下的域名就是由 顶级域名下面进行管理</li><li>根据域名服务器存储位置，所以子服务器能知道根服务器的地址</li></ul><h3 id="结合域名服务器查找ip地址">结合域名服务器查找IP地址</h3><ul><li>DNS系统以层次（hierarchy）结构设置，该层次结构创建不同级别的DNS服务器</li><li>此级别的DNS服务器判断其自身能否将域名转换为关联的IP地址<ul><li>如果可以，则将结果返回给客户端</li><li>如果没有，它将请求发送到更到级别（向上级请求）</li></ul></li></ul><p><img src="https://s2.loli.net/2022/05/27/LNQRmYaDpcZkBOo.png"></p><ul><li>请求分为两种<ul><li>能够应答</li><li>不能应答</li></ul></li><li>递归地进行查找：具体过程在上图</li><li>下面递归，上面迭代</li></ul><h2 id="应用层沟通的方式">应用层：沟通的方式</h2><ul><li>通信处理发生的一种方式： （无上下文，请求后自动断开）<ul><li>当浏览器打开时，它将连接到默认页面，并且该页面的文件将传输到客户端</li><li>处理完成，连接断开</li></ul></li><li>第二种：（有上下文）<ul><li>作文Telnet和FTP，建立与服务器的连接并保持该连接，知道执行所有处理</li><li>当用户确定已经完成时，客户端终止连接</li></ul></li></ul><h2 id="dhcpdynamic-host-configuration-protocol-动态主机配置协议">DHCP（DynamicHost Configuration Protocol） 动态主机配置协议</h2><ul><li>DHCP服务器可以是服务器</li></ul><h3 id="dhcp概述">DHCP概述</h3><ol type="1"><li>一个协议软件在使用之前先作为正确协议配置，具体配置内容取决于协议</li><li>接到因特网的计算机的协议软件需要配置的项目包括：<ol type="1"><li>IP地址</li><li>子网掩码</li><li>默认路由器的IP地址</li><li>域名服务器的IP地址</li></ol></li><li>DHCP可以高效地分配IP地址<ol type="1"><li>局域网地网络协议</li><li>使用UDP实现</li></ol></li><li>目前一般都是自动获取IP地址，不需要手动获取IP地址等信息</li></ol><h3 id="dhcp过程">DHCP过程</h3><h4 id="dhcp工作过程">DHCP工作过程</h4><p><img src="https://s2.loli.net/2022/05/27/hXF3KY82fxcMksw.png"></p><ol type="1"><li>A，B为两个Server</li><li>Client 先Discover 去搜索</li><li>Server返回有一个Offer报文</li><li>Client选择优先返回的Offer来优先服务</li><li>Client广播，告知服务了谁</li><li>B返回一个Ack报文</li><li>到了时间之后选择Release 或 续租</li><li>A，B的信息不对称不同步（局域网的地址B分配完成了，但是A不知道，广播里面会携带分配的地址信息，告知A进行同步）</li></ol><h4 id="发现阶段">发现阶段</h4><p><img src="https://s2.loli.net/2022/05/27/8K5mRiX3TEnvL9t.png"></p><ul><li>DHCP Client开始并不知道DHCP Server的ip地址，也难辞以广播的方式发出DHCP Discover报文</li><li>广播携带地址是MAC地址</li></ul><h4 id="响应阶段">响应阶段</h4><p><img src="https://s2.loli.net/2022/05/27/y2SMwRBEG73CFkh.png"></p><p>DHCP Server 在IP地址池中查找合法的IP地址通过DHCP Offer报文提供给DHCPClient</p><h4 id="选择阶段">选择阶段</h4><p><img src="https://s2.loli.net/2022/05/27/CEgPY6hUBObG9X2.png"></p><ul><li>DHCP Client选择一个DHCP Offer报文(一般 选择最先收到的DHCPOffer报文)，向网络发送一个DHCPRequest广播数据包，所有的Server进行同步</li></ul><h4 id="租约确认阶段">租约确认阶段</h4><p><img src="https://s2.loli.net/2022/05/27/tFW1o36OUmH8knT.png"></p><ul><li>DHCP Server接收到DHCP Request消息后，以DHCP ACK消息向DHCPClient广播成功的确认；出错则广播否定确认消息DHCP NAK</li></ul><h4 id="租期续约">租期续约</h4><p><img src="https://s2.loli.net/2022/05/27/2IFg8VEJltfTvqP.png"></p><ul><li>在租期中，DHCP Client直接向为其提供IP地址的DHCP Server发送DHCPRequest消息，收到回应的DHCP ACK消息后，DHCPClient根据所提供的新的租期以及其它更新的 TCP/IP参数更新自己的配置，IP租用更新完成</li></ul><h4 id="租期释放">租期释放</h4><p><img src="https://s2.loli.net/2022/05/27/SRdZEIs8wnTa9xL.png"></p><ul><li>当DHCP Client不再需要使用分配IP地址时，就会主动向 DHCPServer发送Release报文，告知不再需要分配IP地址，DHCPServer会释放被绑定的租约</li><li>到时间后，Server会主动询问，如果没有应答会自动释放</li></ul><h4 id="dhcp报文结构">DHCP报文结构</h4><p><img src="https://s2.loli.net/2022/05/27/i2n48OAgryhFT7t.png"></p><ol type="1"><li>op:报文类型，1请求，2应答</li><li>HTYPE:硬件地址类型，1表示10M以太网地址</li><li>HLEN:以太网地址长度，10M为6</li><li>Hops:是否使用代理服务器进行处理</li></ol><h3 id="dhcp报文类型">DHCP报文类型</h3><ol type="1"><li>DHCP Discover：发现</li><li>DHCP Offer：提供</li><li>DHCP Request：告知决定</li><li>DHCP ACK：租约确认</li><li>DHCP NAK：租约不确认</li><li>DHCP Release：释放租约</li><li>DHCP Decline:收到Ack后，Client告诉服务器不接受</li><li>DHCP Inform:客户端向服务器端请求详细信息</li></ol><h3 id="dhcp欺骗及防范">DHCP欺骗及防范</h3><h4 id="dhcp欺骗原理">DHCP欺骗原理</h4><ol type="1"><li>客户端以广播的方式来寻找服务器，并且只接收第一个到达的服务器提供的网络配置参数。</li><li>非授权的DHCP服务器先应答，客户端最后获得的网络参数即是非授权的，客户端即被欺骗。(恶意服务器把自己作为默认网关)</li><li>在实际应用DHCP的网络中，基本上都会采用DHCP中继，因此本网络的非授权DHCP服务器一般都会先于其余网络的授权DHCP服务器的应答(由于网络传输的延迟)，在这样的应用中，DHCP欺骗更容易完成</li></ol><h4 id="dhcp欺骗攻击">DHCP欺骗攻击</h4><p><img src="https://s2.loli.net/2022/05/27/3wYheKZpdLiPuHs.png"></p><ol type="1"><li>首先PC发出请求</li><li>然后将DHCP请求发送出去</li><li>伪装者收到后，DHCP伪装者给出应答</li></ol><p><img src="https://s2.loli.net/2022/05/27/RFIJKq5CXZ3djls.png"></p><ul><li>DHCP Server也会给出应答，但是可能比伪装者慢</li><li>这样子A收到的就是伪装者的报文</li></ul><p><a href="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec06/26.png"><img src="https://s2.loli.net/2022/05/27/xArn73h4NB1gM2Z.png" alt="img"></a></p><ul><li>A发出去的网关就是B，所以A上网的请求就发送给B，B转发给默认网关上网，然后返回信息给B</li><li>B再把返回的信息给A</li><li>很隐蔽的安全问题</li><li>除了服务器不应该启动DHCP进程</li></ul><h4 id="dhcp欺骗防范">DHCP欺骗防范</h4><ol type="1"><li>在交换机上启用DHCP Snooping功能 DHCP Snooping技术通过建立和维护DHCPSnooping绑定表过滤不可信任的DHCP信息:比如B的DHCP不能通过认证，交换机拒绝进行转发<ol type="1"><li>在交换机的全局配置模式中启用DHCPSnooping:<code>switch (config)# ip dncp snooping</code></li><li>在交换机的全局配置模式中开启需要启用DHCP Snooping的VLAN":<code>switch (config)# ip dhcp snooping vlan vlan号</code></li><li>在端口配置子模式中将授权DHCP服务器所连的端口设为信任端口(缺省都是非信任的端口):就是连接到DHCPServer的端口:<code>switch (config-if)# ip dhcp snooping trust</code></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> 互联网计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 互联网计算 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运输层</title>
      <link href="/2022/05/24/%E8%BF%90%E8%BE%93%E5%B1%82/"/>
      <url>/2022/05/24/%E8%BF%90%E8%BE%93%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h2 id="transport-layer">Transport Layer</h2><ol type="1"><li>第四层运输层主要是实现了主机之间的通信。</li><li>数据通信是服务于主机上的进程(Session)。</li></ol><h1 id="第四层综述">第四层综述</h1><ol type="1"><li>第4层执行多项功能：<ol type="1"><li>分割上层应用程序数据(新的数据单元-数据段)</li><li>建立端到端(end to end)的运营</li><li>从一个终端主机向另一个终端主机发送段(第三层和第二层不进行可靠性检验，第四层完成可靠性检验，接受方认为数据错误，在第四层进行要求重传)</li><li>流量控制和可靠性<ol type="1"><li>可以比喻为与外国人交谈:通常，您会要求外国人重复他/她的话(可靠性)并慢声说话(流量控制)</li><li>双方主机的网络的处理能力不同，缓存能力不同</li></ol></li></ol></li><li>两个特别重要的第4层协议：<ol type="1"><li>传输控制协议(TCP, Transmission Control Protocol)</li><li>用户数据报协议(UDP, User Datagram Protocol)</li></ol></li><li>将传出邮件分成多个部分,在目标站重新组合消息</li><li>TCP: 可靠(效率比较低，早期网络应用少，需要可靠性)<ol type="1"><li>面向连接，使用确认机制，提供流量控制</li><li>软件检查细分</li><li>重新发送丢失或错误的任何内容</li></ol></li><li>UDP: 不可靠<ol type="1"><li>无连接，不使用确认，不进行流量控制</li><li>不提供用于细分的软件检查</li><li>直接丢弃错误的报文，而不进行其他操作。</li></ol></li><li>SCTP(Stream Control TransmissionProtocol)：流控制传输协议，为了进行视频和音频的传输</li></ol><h2 id="服务模型">服务模型</h2><ol type="1"><li>TCP和UDP都使用<strong>端口</strong>来跟踪(track)同时穿越网络的不同会话</li><li>应用软件开发人员已同意使用RFC1700中定义的知名端口号</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec05/1.png"></p><h3 id="端口分配规范">端口分配规范</h3><ol type="1"><li>低于255的端口号(0-255)保留给TCP和UDP公共应用程序使用。(端口号0-255是public的，不可以随意分给其他的进程，如果分发则不符合规范)</li><li>0-1023是熟知端口，有分发的规范，不应当被随意使用</li><li>1024-49151的端口号进行登记使用，有的是应用程序已经的使用端口号，避免冲突</li><li>基于端口号的不同，进行不同的包的分发</li></ol><h2 id="套接字socket-第四层的单位">套接字(Socket, 第四层的单位)</h2><ol type="1"><li>套接字表示为(IP地址，端口)</li><li>每个连接都表示为(socket <sub> source </sub>，socket <sub>destination</sub>)，这是一个点对点全双工通道</li><li>通讯被认为是以一个socket和另一个socket之间的连接。(SocketAPI是一套规范，根据上下文有不同的含义)</li><li>TCP不支持多播和广播</li></ol><h1 id="tcp-transmission-control-protocol">TCP (Transmission ControlProtocol)</h1><h2 id="tcp必须解决的问题">TCP必须解决的问题</h2><ol type="1"><li>可靠传输</li><li>流传输<ol type="1"><li>滑动窗口(窗口进行通信，一次数据传输是有上限发的，缓存问题，拥塞问题)</li><li>避免拥塞</li></ol></li><li>连接控制<ol type="1"><li>建立连接:三次握手</li><li>断开连接:四次握手</li></ol></li></ol><h2 id="tcp数据段的格式">TCP数据段的格式</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec05/2.png"></p><h3 id="首部情况">首部情况</h3><blockquote><p>一行共计4字节，段首在前，固定首部长度为20字节。</p></blockquote><h3 id="源端口和目的端口">源端口和目的端口</h3><blockquote><p>源端口和目的端口字段:各占 2 字节</p></blockquote><ol type="1"><li>端口是运输层与应用层的服务接口</li><li>运输层的复用和分用功能都要通过端口才能实现</li></ol><h3 id="序号字段">序号字段</h3><blockquote><p>序号字段：占 4 字节(4G(<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.919ex" height="1.887ex" role="img" focusable="false" viewBox="0 -833.9 1290.1 833.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g></g></g></g></g></svg></mjx-container></span>)的地址空间)</p></blockquote><ol type="1"><li>TCP 传送的数据流中的每一个字节都编上一个序号</li><li>序号字段的值指本报文段所发送的数据的第一个字节的序号</li><li>通过序号字段做可靠传输的保证，指示的是一个<strong>TCP传输的bit编码</strong>，而不是地址。</li><li>我们从小向大进行使用，如果使用到最大之后，我们会从小再次重新开始分配。</li></ol><h3 id="确认号字段">确认号字段</h3><blockquote><p>确认号字段：占 4字节，是期望收到对方的下一个报文段的数据的第一个字节的序号</p></blockquote><ol type="1"><li>确认对方的数据号(发送同时对上一次传输进行确认)</li><li><strong>体现出了全双工通信的优点，比如上回收到最后序号是700，那么确认号就是701</strong></li></ol><h3 id="数据偏移">数据偏移</h3><blockquote><p>数据偏移(即首部长度)：占 4 位</p></blockquote><ol type="1"><li>指出 TCP 报文段的数据起始处距 TCP报文段的起始处的长度(Data部分从什么地方开始算)</li><li>单位是 32 位字(以 4 字节为计算单位)</li><li>不满足的话使用填充位保证为4字节的整数倍(保证对齐问题)</li></ol><h3 id="保留字段">保留字段</h3><blockquote><p>保留字段：占 6 位，保留为今后使用，目前置 0，也就是说截止到现在也没有使用这部分的字段。</p></blockquote><h3 id="urg">URG</h3><blockquote><p>紧急 URG = 1 时，表明紧急指针字段有效。</p></blockquote><ol type="1"><li>告诉系统此报文段中有紧急数据，应尽快传送(相当于高优先级的数据)</li><li>优先放紧急数据，0 的时候则为不紧急(Ctrl + Z)</li></ol><h3 id="ack">ACK</h3><blockquote><p>ACK = 1 时确认号字段有效;ACK = 0 时确认号字段无效</p></blockquote><h3 id="pshpush">PSH(PuSH)</h3><ol type="1"><li>接收 TCP 收到 PSH = 1的报文段，就尽快地交付接收应用进程，而不再等到整个缓存都填满了后再向上交付，此时将<strong>缓存所有部分</strong>都传输，而并不是只将这个报文段的信息进行传输。</li><li>TCP在正常条件下并不是立马传输的，首先要缓存满了才发送，其次还有就是要保证网络可信的时候才发送</li></ol><h3 id="rst">RST</h3><ol type="1"><li>ReSeT =1时，表明TCP连接中出现严重差错(如由于主机崩溃或其他原因)，必须释放连接，然后再重新建立运输连接</li><li>就是重新来过，如果请求方发送的请求，如果应答方不想连接则将ReSet置为1</li></ol><h3 id="syn">SYN</h3><blockquote><p>同步 SYN = 1:表示这是一个连接请求或连接接受报文(初始的时候才出现)</p></blockquote><h3 id="finfinis">FIN(FINis)</h3><blockquote><p>用来释放一个连接。FIN = 1表明此报文段的发送端的数据已发送完毕，并要求释放运输连接。(发送方没有传输数据了)</p></blockquote><h3 id="窗口">窗口</h3><ol type="1"><li>占 2字节，用来让对方设置<strong>发送窗口</strong>的依据，单位为字节。</li><li>表示可以进行传输的窗口大小是多少。</li></ol><h3 id="检验和">检验和</h3><blockquote><p>检验和:占有2字节。</p></blockquote><ol type="1"><li>检验和字段检验的范围包括<strong>首部和数据</strong>这两部分</li><li>2字节，IP报文中的地址等伪首部进行校验</li></ol><h3 id="紧急指针字段">紧急指针字段</h3><blockquote><p>紧急指针字段:占有2字节</p></blockquote><ol type="1"><li>指出在本报文段中紧急数据共有多少个字节(紧急数据放在本报文段数据的最前面)</li></ol><h3 id="选项">选项</h3><ol type="1"><li>TCP 最初只有一种选项，即最大报文段长度 MSS(Maximum SegmentSize)</li><li>MSS 告诉对方缓存所能接收的报文段的数据字段的最大长度是 MSS个字节</li><li>数据字段加上 TCP 首部才等于整个的 TCP 报文段</li></ol><h3 id="填充字段">填充字段</h3><blockquote><p>填充字段：这是为了使整个首部长度是 4 字节的整数倍。</p></blockquote><h2 id="tcp协议">TCP协议</h2><ol type="1"><li>主机使用网段(TPDU)交换数据</li><li>每个段都有：<ol type="1"><li>标头为20个字节(可选部分除外)</li><li>0或更多数据字节(请求连接的时候)</li></ol></li><li>段的大小必须与IP数据包匹配，并且还必须满足底层的需求<ol type="1"><li>例如，以太网的MTU(最大传输单位)为1500字节</li><li>是面向字节的传输。</li></ol></li><li>每个字节都有一个32位序号<ol type="1"><li>通讯中商定初识序号，确认到每一位</li><li>面向字节:TCP传输的数据块和上层数据给的数据块的大小可以不对应(通过商量解决)</li><li>根据网络条件，对每一个字节进行确认，</li></ol></li></ol><h3 id="reliable-connection-可靠连接">Reliable Connection 可靠连接</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec05/3.png"></p><ol type="1"><li>红蓝两军问题</li><li>两军之间传输信息，由侦查员进行传递</li><li>结论:无论通信多少次，都不能确定一个完全可信的时间。</li></ol><h3 id="tcp-establish-connection-tcp建立可靠连接">TCP: EstablishConnection TCP:建立可靠连接</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec05/29.png"></p><h4 id="第一次握手">第一次握手</h4><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec05/4.png"></p><ol type="1"><li>服务器：执行LISTEN和ACCEPT原语，并进行被动监视</li><li>客户端：执行CONNECT原语，生成SYN = 1和ACK =0的TCP段，代表连接请求</li></ol><h4 id="第二次握手">第二次握手</h4><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec05/5.png"></p><ol type="1"><li>服务器检查是否存在监视端口的服务进程<ol type="1"><li>如果没有任何进程，请使用RST = 1回答一个TCP段</li><li>如果存在进程，则决定拒绝或接受请求</li><li>如果接受连接请求，则发送SYN = 1和ACK = 1的网段</li></ol></li></ol><h4 id="第三次握手">第三次握手</h4><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec05/6.png"></p><ol type="1"><li>客户端发送一个SYN = 0和ACK = 1的段以确认连接</li><li>为了避免出现延时之类的情况(如果只有两次会浪费服务器资源)</li></ol><h4 id="通知上层应用准备数据传输">通知上层应用，准备数据传输</h4><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec05/7.png"></p><blockquote><p>服务器收到确认后，会通知上层应用程序</p></blockquote><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec05/8.png"></p><ol type="1"><li>默认三次握手就认为可靠了，之后就进行数据传输</li><li>有时候我们会选择，第三次握手的时候同时携带数据。</li></ol><h3 id="建立连接实例">建立连接实例</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec05/9.png"></p><ol type="1"><li>用于连接同步(Synchronization)的基本三次握手</li><li>请注意，ACK不会占用序列号空间(如果确实如此，我们将结束ACK的ACK！)</li></ol><h2 id="停止等待协议">停止等待协议</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec05/10.png"></p><ol type="1"><li>发送段后，<strong>暂时保留备份</strong><ol type="1"><li>在发送后没有收到确认的时候，要保存备份来重传</li><li>收到确认的时候，抛弃备份</li><li>超时计时器:如果对方的应答超过一定时间后则直接进行重发(时间要比正常往返时间稍微长一点)</li></ol></li><li>每个网段和ACK必须具有ID</li><li>重新发送时间必须<strong>大于</strong>平均传输时间 * 2</li><li>停止等待协议是一个简单的协议，但是效率很低</li><li>实施控制，来进行错误处理</li></ol><h2 id="数据传输---丢失确认-和-确认延迟">数据传输 - 丢失确认 和确认延迟</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec05/11.png"></p><ol type="1"><li>发过去没有应答或者丢失:进行重传</li><li>应答超时，有收到请求立即重传</li><li>晚到的应答直接丢弃(不做处理)</li></ol><h2 id="可靠通信">可靠通信</h2><ol type="1"><li>ARQ (Automatic Repeat reQuest)自动重传请求：这表示"重新发送请求"为自动发送并且接收方无需请求发送方重新发送错误段</li></ol><h3 id="contiguous-arqautomatic-repeat-request-protocol-连续arq协议">ContiguousARQ(Automatic Repeat-reQuest) Protocol 连续ARQ协议</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec05/12.png"></p><ol type="1"><li>多个数据同时发送过去(一次发送多个)</li><li>窗口大小是双方协商的，通过TCP报文中的窗口字段表示。</li></ol><h3 id="arq具体实例">ARQ具体实例</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec05/13.png"></p><ol type="1"><li>发送端要发送 900 字节长的数据，划分为 9 个 100字节长的报文段，而发送窗口确定为 500 字节。</li><li><strong>发送端只要收到了对方的确认，发送窗口就可前移</strong>。</li><li>发送 TCP要维护一个指针。每发送一个报文段，指针就向前移动一个报文段的距离。</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec05/14.png"></p><ol start="4" type="1"><li>发送端已发送了 400 字节的数据，但只收到对前 200字节数据的确认，同时窗口大小不变。</li><li>现在发送端还可发送 300 字节。</li><li>发送端收到了对方对前 400字节数据的确认，但对方<strong>通知发送端必须把窗口减小到 400字节</strong>。</li><li>现在发送端最多还可发送 400 字节的数据。</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec05/15.png"></p><ol start="8" type="1"><li>利用可变窗口大小进行流量控制双方确定的窗口值是 400</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec05/16.png"></p><ol start="9" type="1"><li>WIN:窗口的大小:双方动态协商，收到确认调整窗口</li><li>ACK:是指可以继续发送的数据的位置。</li><li>为什么201在401后面发送？<strong>超时重传(要超过两倍的平均传输时间后才进行重传)</strong></li></ol><h2 id="tcp释放链接">TCP:释放链接</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec05/17.png"></p><ol type="1"><li>发起断开连接请求</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec05/18.png"></p><ol start="2" type="1"><li>Ack =1:允许断开，但是此时并不是断开连接，而是说不在发送新的数据，此时我们需要完成之前未处理完成的数据的处理。(这里只是说我已经收到了你请求停止传输的请求)</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec05/19.png"></p><ol start="3" type="1"><li>FIN =1:数据处理完成，注意需要的变化(此时表示所有的需要处理的数据已经处理完了，此时表示正式确认断开)</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec05/20.png"></p><ol start="4" type="1"><li>确认收到B的断开信息</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec05/21.png"></p><ol start="5" type="1"><li>上图是释放连接的汇总<ol type="1"><li>等待最大的网路往返时间(保证能处理到B最后发送的报文)</li></ol></li></ol><h2 id="为什么必须等待2msl">为什么必须等待2MSL？</h2><ol type="1"><li>为了确保A发送的最后一个ACK可以到达B</li><li>防止出现任何无效的连接请求段：等待2MSL之后，我们可以确保连接上的所有段均已消失</li></ol><h2 id="tcp中的计时器">TCP中的计时器</h2><ol type="1"><li>重传计时器:多长时间进行重传</li><li>坚持计时器:避免死锁(WIN =0的时候修改WIN但是没有办法发送过去)：收到WIN = 0的时候，开始进行计时，到时间主动询问</li><li>保持计时器:<ol type="1"><li>发送数据段后，刷新</li><li>如果到达一定的时间，则再次询问是不是还要保持连接。</li></ol></li><li>时间等待计时器</li></ol><h2 id="tcp的有限状态机">TCP的有限状态机</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec05/22.png"></p><ol type="1"><li>粗线:正常的服务器端</li><li>虚线:正常客户端</li><li>细线:异常状态的问题</li></ol><h1 id="用户数据报协议udp-user-datagram-protocol">用户数据报协议(UDP,User Datagram Protocol)</h1><h2 id="用户数据报协议udp-user-datagram-protocol-1">用户数据报协议UDP(User Datagram Protocol)</h2><ol type="1"><li>为什么我们需要UDP？<ol type="1"><li>没有建立连接(避免延时)</li><li>简单：发送方，接收方无连接状态</li><li>小段标题</li><li>没有拥塞控制：UDP可以按照期望的速度传输</li></ol></li><li>无连接：没有复杂控制，头部简单<ol type="1"><li>UDP发送方，接收方之间没有握手(HandShake，包含进程等信息的)</li><li>每个UDP段都独立处理</li></ol></li><li>常用于流媒体(Stream)多媒体(multimedia)应用<ol type="1"><li>容忍损失:无非就是降低帧率</li><li>这类应用是<strong>速率敏感</strong>的应用，而不一定是质量敏感的应用。</li></ol></li><li>UDP用于：<ol type="1"><li>RIP:定期发送路由信息(periodically)</li><li>DNS:避免延迟建立TCP连接(DNS需要快速找到)</li><li>SNMP:SNMP：拥塞时(congestion)，SNMP必须仍然可运行。在没有拥塞和可靠性控制机制的情况下，UDP在这种情况下的性能要优于TCP。(主播和多播，大量信息传输)</li><li>其他协议包括TFTP，DHCP</li></ol></li><li>必要时增加<strong>应用层</strong>的可靠性</li><li>流媒体就算有数据丢失也问题不大(对屏幕进行模糊化处理就行),但是发送速率是很重要的！(就算丢包了，也可以模糊处理)</li></ol><h2 id="udp数据帧格式">UDP数据帧格式</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec05/23.png"></p><ol type="1"><li>UDP的数据段很简单</li><li>UDP只有8个字节的首部</li><li>源端口、目的端口、长度、校验(data)、Data</li><li>校验也要对data一并校验，如果出现错误，直接丢弃。</li><li>应用层进行数据切片，决定如何进行发送，UDP直接发送</li></ol><h2 id="tcp和udp的不同">TCP和UDP的不同</h2><h3 id="tcp">TCP</h3><ol type="1"><li>不是立即交给上层校验，而是需要先和对方沟通</li><li>缓存满了才统一交付。</li></ol><h3 id="udp">UDP</h3><ol type="1"><li>直接转发报文，保留报文边界</li><li>IP进行划分</li><li>应用程序会发送比较合适的UDP报文大小进行发送</li></ol><h3 id="共同点">共同点</h3><ol type="1"><li>校验是相同的。</li></ol><h1 id="应用nat和pat">应用：NAT和PAT</h1><h2 id="什么是natnetwork-address-translation">什么是NAT?Network AddressTranslation</h2><ol type="1"><li>NAT，是在IP数据包头中将一个地址交换为另一个地址的过程<ol type="1"><li>网络地址转换</li><li>是网络地址即将用完的解决方案</li></ol></li><li>实际上，NAT用于允许私下寻址的主机访问Internet。</li><li>IP地址耗尽的解决方案之一<ol type="1"><li>保留注册(合法)地址</li><li>连接到Internet时增加灵活性</li></ol></li><li>RFC 1631 - Network Address Translator (NAT)</li></ol><h2 id="nat技术是一个简单的概念">NAT技术是一个简单的概念</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec05/24.png"></p><ol type="1"><li>NAT需要一个路由器来实现</li><li>左侧是一个局域网</li><li>在NAT 路由器将局部地址 转换成网络上的地址(双向转换，有一个NAT表)</li></ol><h2 id="nat的类型">NAT的类型</h2><ol type="1"><li>静态NAT：固定的内部地址(internal address)到注册地址(registeredaddress)的映射(一开始就写死)</li><li>动态NAT：映射以先到先得的方式动态进行(不是写死，配一个地址池,通过更新)</li><li>PAT(过载，Port addresstranslation)：端口地址转换用于允许许多内部用户共享一个"内部全局"地址(基于Socket映射，而不是IP地址，多个内网主机映射到一个公网地址)</li></ol><h2 id="nat地址类型">NAT地址类型</h2><ol type="1"><li>Inside Local address (内部本地地址):内网IP地址</li><li>Inside Global address (内部全局地址): 注册IP地址,对外部展示的内部地址</li><li>Outside Global address(外部全局地址):由主机所有者分配的IP地址。通常是注册地址。(对内网而言的外部，是目的地址)</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec05/25.png"></p><ol start="4" type="1"><li>三个地址在上面可以看一下</li><li>内部主机发送报文给网关，网关根据NATTable进行翻译，转换成内部全局地址，然后进行转发</li></ol><h2 id="静态nat的例子">静态NAT的例子</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec05/26.png"></p><ol type="1"><li>这是静态的表</li></ol><h2 id="动态nat的例子">动态NAT的例子</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec05/27.png"></p><ol type="1"><li>指定一个地址池</li></ol><h2 id="nat的优点和缺点">NAT的优点和缺点</h2><ol type="1"><li>优点：由于并非每个内部主机都需要同时进行外部访问，因此您可以使用少量的全局唯一地址池来服务相对大量的私有寻址主机。</li><li>缺点：一一映射，并没有从根本上解决地址短缺的问题。</li><li>也就是说，如果专用地址空间为/8，但公用地址为/24，则一次只能有254个主机可以访问Internet，主要内网不是同时有很多主机上网，就可以如上操作，进一步降低地址压力(类似并行和穿行的区别)</li></ol><h2 id="pat的工作原理">PAT的工作原理</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec05/29.png"></p><ol type="1"><li>第一个是IP</li><li>可以有不同的端口</li><li>同样的出口IP</li></ol><h2 id="pat操作">PAT操作</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec05/28.png"></p><ol type="1"><li>也就是我们对端口信息进行了调整</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> 互联网计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 互联网计算 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前缀和</title>
      <link href="/2022/05/23/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
      <url>/2022/05/23/%E5%89%8D%E7%BC%80%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="前缀和">前缀和</h1><h2 id="巫师的总力量和"><a href="https://leetcode.cn/problems/sum-of-total-strength-of-wizards/">6077.巫师的总力量和</a></h2><p>本周周赛第四题被全是1的用例卡了，想来是因为不熟悉前缀和的使用和单调栈维护</p><h2 id="题目">题目</h2><p>作为国王的统治者，你有一支巫师军队听你指挥。</p><p>给你一个下标从 0 开始的整数数组 strength ，其中 strength[i] 表示第 i位巫师的力量值。对于连续的一组巫师（也就是这些巫师的力量值是 strength 的子数组），总力量 定义为以下两个值的 乘积 ：</p><p>巫师中 最弱 的能力值。 组中所有巫师的个人力量值 之和 。 请你返回 所有巫师组的 总 力量之和。由于答案可能很大，请将答案对 109 + 7 取余后返回。</p><p>子数组 是一个数组里 非空 连续子序列。</p><p><strong>示例 1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">输入：strength = [1,3,1,2]</span><br><span class="line">输出：44</span><br><span class="line">解释：以下是所有连续巫师组：</span><br><span class="line">- [1,3,1,2] 中 [1] ，总力量值为 min([1]) * sum([1]) = 1 * 1 = 1</span><br><span class="line">- [1,3,1,2] 中 [3] ，总力量值为 min([3]) * sum([3]) = 3 * 3 = 9</span><br><span class="line">- [1,3,1,2] 中 [1] ，总力量值为 min([1]) * sum([1]) = 1 * 1 = 1</span><br><span class="line">- [1,3,1,2] 中 [2] ，总力量值为 min([2]) * sum([2]) = 2 * 2 = 4</span><br><span class="line">- [1,3,1,2] 中 [1,3] ，总力量值为 min([1,3]) * sum([1,3]) = 1 * 4 = 4</span><br><span class="line">- [1,3,1,2] 中 [3,1] ，总力量值为 min([3,1]) * sum([3,1]) = 1 * 4 = 4</span><br><span class="line">- [1,3,1,2] 中 [1,2] ，总力量值为 min([1,2]) * sum([1,2]) = 1 * 3 = 3</span><br><span class="line">- [1,3,1,2] 中 [1,3,1] ，总力量值为 min([1,3,1]) * sum([1,3,1]) = 1 * 5 = 5</span><br><span class="line">- [1,3,1,2] 中 [3,1,2] ，总力量值为 min([3,1,2]) * sum([3,1,2]) = 1 * 6 = 6</span><br><span class="line">- [1,3,1,2] 中 [1,3,1,2] ，总力量值为 min([1,3,1,2]) * sum([1,3,1,2]) = 1 * 7 = 7</span><br><span class="line">所有力量值之和为 1 + 9 + 1 + 4 + 4 + 4 + 3 + 5 + 6 + 7 = 44 。</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><blockquote><p><code>1 &lt;= strength.length &lt;= 105</code></p><p><code>1 &lt;= strength[i] &lt;= 109</code></p></blockquote><h2 id="题解">题解</h2><p>那么 很快就发现是一道板子题， 使用单调栈 + 前缀和 即可计算出答案</p><h2 id="前缀和-1">前缀和</h2><p><strong>前缀和</strong>是一种很容易理解的算法，甚至不用专门去记忆它的算法模板，因为理解了思想之后，每个人都可以很快的写出算代码实现。</p><p>这个算法简单到看名字就知道是什么意思，简单到你从来没了解过但是面试时候现场想都能轻松的想到做法。</p><p>虽然前缀和很简单，但是它却经常被用于一些比较复杂的问题的中间步骤。</p><p>由于它过于简单，很容易被忽略。</p><p>因此，一些比较复杂的问题可能正是因为我们忽略了前缀和，才导致想不到解决方法</p><p>前缀和的主要用处：求任意区间的区间和。</p><blockquote><p><strong>假设</strong>：有 m 个查询，每个查询给出index：l,r<strong>需求</strong>：计算从数组（数组长度假设为 n ）第 l 个元素到第 r个元素的和。</p></blockquote><p>【一般思路】：遍历<code>[l,r]</code>求和，计算时间复杂度是<code>O(n)</code>， 那 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.986ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 878 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span> 个查询的时间复杂度则是<code>O(mn)</code>。</p><p>【前缀和】：非常快的时间求出多个区间的和。每个查询的时间复杂度是<code>O(1)</code></p><p>具体解法如下：</p><p>前缀和计算区间 <code>[l,r]</code>的区间和的思路：<code>s[r] - s[l-1]</code>。</p><p>即：</p><p>区间和 <strong>=</strong> 前 r 个元素的和 <strong>-</strong> 前 l-1个元素的和。</p><h2 id="代码">代码</h2><p>维护一个前缀和数组arr，那么我们 <code>[l,r]</code>的 sum 即为<code>arr[r+1] - arr[l]</code></p><p>那么<code>[L,R]</code>内所有子数组的元素和可以表示为</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.845ex;" xmlns="http://www.w3.org/2000/svg" width="21.874ex" height="2.869ex" role="img" focusable="false" viewBox="0 -894.5 9668.5 1268"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="3A3" d="M666 247Q664 244 652 126T638 4V0H351Q131 0 95 0T57 5V6Q54 12 57 17L73 36Q89 54 121 90T182 159L305 299L56 644L55 658Q55 677 60 681Q63 683 351 683H638V679Q640 674 652 564T666 447V443H626V447Q618 505 604 543T559 605Q529 626 478 631T333 637H294H189L293 494Q314 465 345 422Q400 346 400 340Q400 338 399 337L154 57Q407 57 428 58Q476 60 508 68T551 83T575 103Q595 125 608 162T624 225L626 251H666V247Z"></path></g><g data-mml-node="TeXAtom" transform="translate(755,411.6) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(759,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1537,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(755,-297.3) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(451,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(1229,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1574,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(2352,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="msubsup" transform="translate(2821.7,0)"><g data-mml-node="mi"><path data-c="3A3" d="M666 247Q664 244 652 126T638 4V0H351Q131 0 95 0T57 5V6Q54 12 57 17L73 36Q89 54 121 90T182 159L305 299L56 644L55 658Q55 677 60 681Q63 683 351 683H638V679Q640 674 652 564T666 447V443H626V447Q618 505 604 543T559 605Q529 626 478 631T333 637H294H189L293 494Q314 465 345 422Q400 346 400 340Q400 338 399 337L154 57Q407 57 428 58Q476 60 508 68T551 83T575 103Q595 125 608 162T624 225L626 251H666V247Z"></path></g><g data-mml-node="TeXAtom" transform="translate(755,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(755,-315.5) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(298,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(1076,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g></g></g><g data-mml-node="mo" transform="translate(4869.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5258.1,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(5727.1,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(6005.1,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6456.1,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(6956.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(7956.5,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(8425.5,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(8703.5,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(9001.5,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(9279.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p><p>$ = <em>{r = i+1}^{R+1}((i-L+1) * s[r] - ^{i}</em>{l = L}s[l])$</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.845ex;" xmlns="http://www.w3.org/2000/svg" width="48.441ex" height="2.869ex" role="img" focusable="false" viewBox="0 -894.5 21410.9 1268"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(1055.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1444.8,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2012,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(3012.2,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(3915.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(4915.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(5415.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(6026.9,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="msubsup" transform="translate(6749.1,0)"><g data-mml-node="mi"><path data-c="3A3" d="M666 247Q664 244 652 126T638 4V0H351Q131 0 95 0T57 5V6Q54 12 57 17L73 36Q89 54 121 90T182 159L305 299L56 644L55 658Q55 677 60 681Q63 683 351 683H638V679Q640 674 652 564T666 447V443H626V447Q618 505 604 543T559 605Q529 626 478 631T333 637H294H189L293 494Q314 465 345 422Q400 346 400 340Q400 338 399 337L154 57Q407 57 428 58Q476 60 508 68T551 83T575 103Q595 125 608 162T624 225L626 251H666V247Z"></path></g><g data-mml-node="TeXAtom" transform="translate(755,411.6) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(759,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1537,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(755,-297.3) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(451,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(1229,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1574,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(2352,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mi" transform="translate(9570.8,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(10039.8,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(10317.8,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(10768.8,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(11269,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(12269.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(12658.2,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(13639.4,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(14639.7,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(15206.9,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(16207.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(16707.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(17318.3,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="msubsup" transform="translate(18040.6,0)"><g data-mml-node="mi"><path data-c="3A3" d="M666 247Q664 244 652 126T638 4V0H351Q131 0 95 0T57 5V6Q54 12 57 17L73 36Q89 54 121 90T182 159L305 299L56 644L55 658Q55 677 60 681Q63 683 351 683H638V679Q640 674 652 564T666 447V443H626V447Q618 505 604 543T559 605Q529 626 478 631T333 637H294H189L293 494Q314 465 345 422Q400 346 400 340Q400 338 399 337L154 57Q407 57 428 58Q476 60 508 68T551 83T575 103Q595 125 608 162T624 225L626 251H666V247Z"></path></g><g data-mml-node="TeXAtom" transform="translate(755,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(755,-315.5) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(298,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(1076,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g></g></g><g data-mml-node="mi" transform="translate(20087.9,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(20556.9,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(20834.9,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(21132.9,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">totalStrength</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; strength)</span> </span>{</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> n = strength.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">left</span><span class="params">(n,<span class="number">-1</span>)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">right</span><span class="params">(n,n)</span></span>;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++){</span><br><span class="line">            <span class="keyword">while</span>(!st.<span class="built_in">empty</span>() &amp;&amp; strength[st.<span class="built_in">top</span>()] &gt;= strength[i]){</span><br><span class="line">                right[st.<span class="built_in">top</span>()] = i;</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(!st.<span class="built_in">empty</span>()) left[i] = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">push</span>(i);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> s = <span class="number">0L</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ss</span><span class="params">(n+<span class="number">2</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++){</span><br><span class="line">            s += strength[i<span class="number">-1</span>];</span><br><span class="line">            ss[i+<span class="number">1</span>] = (ss[i] + s)%mod;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++){</span><br><span class="line">            <span class="type">long</span> l = left[i] + <span class="number">1</span>;</span><br><span class="line">            <span class="type">long</span> r = right[i]<span class="number">-1</span>;</span><br><span class="line">             <span class="type">long</span> tot = ((i - l + <span class="number">1</span>) * (ss[r + <span class="number">2</span>] - ss[i + <span class="number">1</span>]) - (r - i + <span class="number">1</span>) * (ss[i + <span class="number">1</span>] - ss[l])) % mod;</span><br><span class="line"></span><br><span class="line">            ans = (ans + strength[i] * tot) % mod;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//防止ans为负</span></span><br><span class="line">        <span class="keyword">return</span> (ans + mod) % mod;</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 常用算法 </category>
          
          <category> 板子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博弈论&amp;&amp;DP</title>
      <link href="/2022/05/22/%E5%8D%9A%E5%BC%88%E8%AE%BA-DP/"/>
      <url>/2022/05/22/%E5%8D%9A%E5%BC%88%E8%AE%BA-DP/</url>
      
        <content type="html"><![CDATA[<h1 id="博弈论-dp">博弈论 &amp;&amp; DP</h1><h2 id="我能赢吗"><a href="https://leetcode.cn/problems/can-i-win/">464.我能赢吗</a></h2><p>在 "100 game" 这个游戏中，两名玩家轮流选择从 1 到 10的任意整数，累计整数和，先使得累计整数和 达到或超过 100的玩家，即为胜者。</p><p>如果我们将游戏规则改为 “玩家 不能 重复使用整数” 呢？</p><p>例如，两个玩家可以轮流从公共整数池中抽取从 1 到 15的整数（不放回），直到累计整数和 &gt;= 100。</p><p>给定两个整数 maxChoosableInteger （整数池中可选择的最大数）和desiredTotal（累计和），若先出手的玩家是否能稳赢则返回 true ，否则返回false 。假设两位玩家游戏时都表现 最佳 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：maxChoosableInteger = 10, desiredTotal = 11</span><br><span class="line">输出：false</span><br><span class="line">解释：</span><br><span class="line">无论第一个玩家选择哪个整数，他都会失败。</span><br><span class="line">第一个玩家可以选择从 1 到 10 的整数。</span><br><span class="line">如果第一个玩家选择 1，那么第二个玩家只能选择从 2 到 10 的整数。</span><br><span class="line">第二个玩家可以通过选择整数 10（那么累积和为 11 &gt;= desiredTotal），从而取得胜利.</span><br><span class="line">同样地，第一个玩家选择任意其他整数，第二个玩家都会赢</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><blockquote><p>1 &lt;= maxChoosableInteger &lt;= 20 0 &lt;= desiredTotal &lt;= 300通过次数22,938提交次数57,487</p></blockquote><h2 id="题解">题解</h2><p>这是一条 博弈论DP的题目（注意题目给的数据）</p><p>我们将 maxChoosableInteger 记作 m 那么 state 的范围 [0,1&lt;&lt;m -1]</p><p>首先朴素二维状态我们想到 定义 <code>f[state][k]</code>为当前已经被选择的数，在第k轮时先手选手是否能够获胜，但是这样会导致TLE</p><p>进一步发现，若能够优化轮数的维度，可以减一半的计算量，我们调整状态定义，<code>f[state]</code> 为当前状态 <code>state</code>，当前先手能否获胜</p><p>同时调整递归函数 dfs(int state, int tot)， 通过判断 dfs(0 ,0)的值来得知</p><blockquote><p>这里调整的重点在于：将记录「原始回合的先后手发起 和原始回合的先后手获胜情况」调整为「当前回合发起 和 当前回合获胜情况」</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> n,t;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; f;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> state,<span class="type">int</span> tot)</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(f[state] != <span class="number">0</span>) <span class="keyword">return</span> f[state];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++){</span><br><span class="line">            <span class="keyword">if</span>(((state&gt;&gt;i) &amp; <span class="number">1</span>) == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>( tot + <span class="number">1</span> + i &gt;= t) <span class="keyword">return</span> f[state] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">dfs</span>( state | (<span class="number">1</span> &lt;&lt; i), tot + i + <span class="number">1</span>) == <span class="number">-1</span>) <span class="keyword">return</span> f[state] = <span class="number">1</span>;</span><br><span class="line">        }    </span><br><span class="line">        <span class="keyword">return</span> f[state] = <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canIWin</span><span class="params">(<span class="type">int</span> m,<span class="type">int</span> d)</span></span>{</span><br><span class="line">        f = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">1</span>&lt;&lt;<span class="number">20</span>,<span class="number">0</span>);</span><br><span class="line">        n = m;</span><br><span class="line">        t = d;</span><br><span class="line">        <span class="keyword">if</span>(n * (n + <span class="number">1</span>)/<span class="number">2</span> &lt; t) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">0</span>) == <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure><h2 id="更多">更多</h2><p><a href="https://zhuanlan.zhihu.com/p/20611132">10170Sprague-Grundy定理是怎么想出来的 - 知乎 (zhihu.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 博弈论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>植物大战僵尸</title>
      <link href="/2022/05/21/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8/"/>
      <url>/2022/05/21/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="植物大战僵尸">植物大战僵尸</h1><p>实现一个植物大战僵尸模拟器，判断玩家当前部署的植物能不能防止他们的脑子被僵尸吃掉。</p><p>请注意：为了控制难度，本题的一些规定与同名游戏不同，切忌将该游戏的经验代入本题。</p><h2 id="游戏地图">游戏地图</h2><p><img src="https://s2.loli.net/2022/05/21/DPfqW4i5FwReHz9.png"></p><p>按照从左到右的顺序，整个布局由一幢房子、一个 <strong>5 行 9列的花园</strong>和一个 <strong>5 行 1列的僵尸初始位置</strong>组成，本题将花园和僵尸初始位置统称为<strong>地图</strong>。其中：</p><ul><li>玩家坐在最左侧的房子中，等待突破植物防线的僵尸吃掉自己的脑子</li><li>植物<strong>只能</strong>种植在花园的 5 × 9个单元格中，且<strong>每个单元格最多可以种植一个植物</strong></li><li>所有僵尸初始时都位于僵尸初始位置，<strong>每个单元格中可以有多个僵尸</strong></li></ul><p>后文我们使用 <code>(X, Y)</code> 表示位于第 <code>X</code> 行第<code>Y</code> 列的单元格</p><h2 id="植物说明">植物说明</h2><p>所有植物都有以下特点：</p><ul><li>生命值降为 0 后<strong>立刻</strong>从地图上消失</li><li>不可以移动</li></ul><p>此外，<strong>每种植物还有自己的特性</strong></p><h3 id="普通植物">普通植物</h3><h4 id="豌豆射手-pea">豌豆射手 pea</h4><table><thead><tr class="header"><th style="text-align: left;">属性</th><th style="text-align: left;">类型</th><th style="text-align: left;">说明</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">HP</td><td style="text-align: left;"><code>int</code></td><td style="text-align: left;">豌豆射手的生命值，大于<code>0</code></td></tr><tr class="even"><td style="text-align: left;">ATK</td><td style="text-align: left;"><code>int</code></td><td style="text-align: left;">豌豆射手的攻击力，大于<code>0</code></td></tr></tbody></table><ul><li>豌豆射手会发射豌豆，攻击<strong>与其在同一个单元格</strong>或<strong>与其同行且在其右侧</strong>的僵尸</li><li>豌豆射手发射出的豌豆在进入第一个有僵尸的单元格后会爆炸，对<strong>该单元格内所有僵尸</strong>造成<code>ATK</code>点伤害</li><li>豌豆射手<strong>会阻挡僵尸前进</strong>（即，<strong>僵尸进入豌豆射手所在的单元格后会停止前进）</strong></li><li>在下图所示的情况中，位于 <code>(0, 1)</code>的豌豆射手只能攻击到位于 <code>(0, 4)</code> 的僵尸，而不能攻击到位于<code>(0, 6)</code> 的僵尸</li></ul><p><img src="https://s2.loli.net/2022/05/21/QKb351EZvtukfA2.png"></p><h4 id="坚果-nut">坚果 nut</h4><table><thead><tr class="header"><th style="text-align: left;">属性</th><th style="text-align: left;">类型</th><th style="text-align: left;">说明</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">HP</td><td style="text-align: left;"><code>int</code></td><td style="text-align: left;">坚果的生命值，大于<code>0</code></td></tr></tbody></table><ul><li>坚果无法进行攻击</li><li>坚果<strong>会阻挡僵尸前进</strong></li></ul><h3 id="进阶植物">进阶植物</h3><p><strong>只有20%的测试用例会出现以下植物，请优先考虑普通植物和僵尸的实现！</strong></p><h4 id="毁灭土豆雷-potato">毁灭土豆雷 potato</h4><table><thead><tr class="header"><th style="text-align: left;">属性</th><th style="text-align: left;">类型</th><th style="text-align: left;">说明</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">ATK</td><td style="text-align: left;"><code>int</code></td><td style="text-align: left;">毁灭土豆雷的攻击力，大于<code>0</code></td></tr></tbody></table><ul><li>毁灭土豆雷的<strong>最大攻击范围</strong>是一个以自身所在单元格为中心的边长为<code>3</code>的正方形，该范围中的所有僵尸都会被攻击，受到<code>ATK</code>点伤害，<strong>下图展示了2个毁灭土豆雷的攻击范围。</strong></li></ul><p><img src="https://s2.loli.net/2022/05/21/izwPfTLQnaDbHeo.png"></p><p>图中显示了2个毁灭土豆雷的攻击范围，坐标分别为(3, 4)和(4, 8)</p><ul><li><p>毁灭土豆雷初始时处于<strong>休眠态</strong>，<strong>休眠态</strong>的毁灭土豆雷<strong>不会在植物攻击阶段（见下方游戏规则）进行攻击</strong></p></li><li><p>僵尸会激活<strong>和自身在同一单元格中</strong>的毁灭土豆雷，<strong>激活后</strong>的毁灭土豆雷<strong>会在下一个回合的植物攻击阶段进行攻击</strong></p></li><li><p>毁灭土豆雷攻击后会<strong>立刻</strong>从地图上消失</p></li><li><p>毁灭土豆雷</p><p>不会阻挡</p><p>僵尸前进，也</p><p>不会被僵尸攻击</p><h2 id="僵尸说明">僵尸说明</h2><p>僵尸属性如下</p></li></ul><table><thead><tr class="header"><th style="text-align: left;">属性</th><th style="text-align: left;">类型</th><th style="text-align: left;">说明</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">HP</td><td style="text-align: left;"><code>int</code></td><td style="text-align: left;">僵尸的生命值，大于<code>0</code></td></tr><tr class="even"><td style="text-align: left;">ATK</td><td style="text-align: left;"><code>int</code></td><td style="text-align: left;">僵尸的攻击力，大于<code>0</code></td></tr><tr class="odd"><td style="text-align: left;">SPEED</td><td style="text-align: left;"><code>int</code></td><td style="text-align: left;">僵尸的移动速度，大于<code>0</code>（每回合移动多少单元格）</td></tr></tbody></table><ul><li>僵尸每回合会在自己所在的行向左一格一格移动，直到移动了<code>SPEED</code>个单元格，或者被植物阻挡</li><li>僵尸在<strong>进入有豌豆射手或坚果的单元格后会被阻挡</strong>（指停止前进）</li><li>僵尸只能攻击自身所在单元格内的植物</li><li>僵尸生命值降为 0 后会<strong>立刻从地图上消失</strong></li></ul><h2 id="游戏规则">游戏规则</h2><ul><li><p>所有的植物<strong>在游戏开始前</strong>就按照输入全部布置好，不会在游戏开始后布置新的植物</p></li><li><p>所有的僵尸<strong>在游戏开始前</strong>就按照输入全部布置好，不会在游戏开始后布置新的僵尸</p></li><li><p>游戏按回合进行，每个回合流程如下：</p><ol type="1"><li><p>所有</p><p>存活的豌豆射手和被激活的毁灭土豆雷按照从左到右，从上到下的顺序</p><p>各自进行一次攻击</p><ul><li>如上图所示，假设土豆雷是激活状态，攻击顺序为 <code>(0, 0)</code><code>(0, 3)</code> <code>(1, 2)</code> <code>(2, 3)</code></li></ul></li><li><p>所有<strong>存活的僵尸</strong>向左移动，如果移动中进入<strong>豌豆射手和坚果</strong>所在的单元格，则必须<strong>在当前单元格停下</strong></p></li><li><p>所有<strong>存活的僵尸</strong>对自身所在单元格内的植物进行一次攻击</p></li><li><p>输出指定的内容（见后文输出描述）</p></li><li><p>判断游戏是否结束</p></li></ol></li></ul><p><img src="https://s2.loli.net/2022/05/21/M1kcNZvY6dlX3qV.png"></p><p><strong>游戏结束条件：</strong></p><ul><li>有僵尸进入了玩家的房子（指<strong>僵尸从左侧离开花园</strong>），僵尸获胜</li><li>所有僵尸死亡，植物获胜</li></ul><h1 id="输入输出">输入输出</h1><h2 id="输入描述">输入描述</h2><p>第一行为空格隔开的两个数<code>[num_p] [num_z]</code>，分别表示植物数量和僵尸数量，保证这两个数是<code>int</code>类型的非负整数</p><p>接下来的<code>[num_p]</code>行，每行输入一个植物，三种植物的输入方式分别如下：</p><ul><li><code>pea [HP] [ATK] [X] [Y]</code>，表示在<code>(X, Y)</code>位置布置一个生命值为<code>HP</code>，攻击力为<code>ATK</code>的豌豆射手</li><li><code>nut [HP] [X] [Y]</code>，表示在<code>(X, Y)</code>位置布置一个生命值为<code>HP</code>的坚果</li><li><code>potato [ATK] [X] [Y]</code>表示在<code>(X, Y)</code>位置布置一个攻击力为<code>ATK</code>的毁灭土豆雷</li></ul><p><strong>X 类型为 <code>int</code> 取值范围为<code>[0, 4]</code></strong>，<strong>Y 类型为 <code>int</code>取值范围为<code>[0, 8]</code></strong>。植物会按照从左到右，从上到下的顺序（也就是植物攻击的顺序）给出，且保证所有输入的植物坐标不重复</p><p>接下来的<code>[num_z]</code>行，每行输入一只僵尸，僵尸的输入方式如下：</p><ol type="1"><li><code>[HP] [ATK] [SPEED] [X]</code>，表示在僵尸初始位置的第<code>X</code>行布置一个生命值为<code>HP</code>，攻击力为<code>ATK</code>，速度为<code>SPEED</code>的僵尸</li></ol><p><strong>一个单元格内可能出现多个僵尸，X 类型为<code>int</code>取值范围：<code>[0, 4]</code></strong></p><h2 id="输出描述">输出描述</h2><p><strong>在每个回合的“输出指定的内容”阶段输出一行，每行三个数，中间用空格隔开：</strong><code>[当前回合序号，从1开始] [剩余植物数量] [剩余僵尸数量]</code></p><p><strong>注意：</strong>进入房子的僵尸也需要计入“剩余僵尸数量”中</p><p><strong>游戏结束时额外输出一行</strong> 如果植物胜利，输出：<code>plants win</code> 如果僵尸胜利，输出：<code>zombies win</code></p><h1 id="示例">示例</h1><h2 id="示例1">示例1</h2><p><strong>输入</strong></p><p>复制代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 0</span><br><span class="line">pea 1 1 0 0</span><br></pre></td></tr></table></figure><p><strong>输入说明</strong></p><ul><li><code>1 0</code>：部署1棵植物，0个僵尸</li><li><code>pea 1 1 0 0</code>：一个豌豆射手，生命值1，攻击力1，种在地图上<code>(0, 0)</code>的位置</li></ul><p><strong>输出</strong></p><p>复制代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 1 0</span><br><span class="line">plants win</span><br></pre></td></tr></table></figure><p><strong>流程说明</strong></p><ul><li><p>第一个回合结束之后，没有僵尸存活，游戏结束，植物获胜</p><h2 id="示例2">示例2</h2><p>输入</p><p>复制代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2 1</span><br><span class="line">nut 2 0 1</span><br><span class="line">pea 2 1 0 7</span><br><span class="line">20 1 1 0 </span><br></pre></td></tr></table></figure></li></ul><p><strong>输入说明</strong></p><ul><li><code>2 1</code>：部署2棵植物，1个僵尸</li><li><code>nut 2 0 1</code>：一个坚果，生命值2，种在地图上<code>(0, 1)</code>的位置</li><li><code>pea 2 1 0 7</code>：一个豌豆射手，生命值2，攻击力1，种在地图上<code>(0, 7)</code>的位置</li><li><code>20 1 1 0</code>：一个僵尸，生命值20，攻击力1，速度1，部署在<code>(0, 9)</code>的位置</li></ul><p>输出</p><p>复制代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1 2 1</span><br><span class="line">2 2 1</span><br><span class="line">3 1 1</span><br><span class="line">4 1 1</span><br><span class="line">5 1 1</span><br><span class="line">6 1 1</span><br><span class="line">7 1 1</span><br><span class="line">8 1 1</span><br><span class="line">9 1 1</span><br><span class="line">10 0 1</span><br><span class="line">11 0 1</span><br><span class="line">12 0 1</span><br><span class="line">zombies win</span><br></pre></td></tr></table></figure><p><strong>流程说明</strong></p><ul><li>第一个回合，所有的植物按照输入的顺序进行攻击，（0，7）位置的豌豆攻击（0，9）位置的僵尸，因为豌豆攻击力是1，所以僵尸还剩19生命值，接着僵尸开始移动，由于速度是1，并且所在单元格没有阻挡植物，移动到（0，8），最后僵尸进行攻击，由于所在单元格内没有植物，没有攻击行为</li><li>第二个回合，（0，7）位置的豌豆攻击（0，8）位置的僵尸，僵尸还剩18生命值，僵尸所在单元格没有阻挡植物，移动到（0，7），此时僵尸所在单元格有豌豆阻挡，僵尸攻击豌豆，由于僵尸攻击力是1，豌豆还剩1生命值</li><li>第三个回合，（0，7）位置的豌豆攻击（0，7）位置的僵尸，僵尸还剩17生命值，僵尸所在单元格有豌豆阻挡，无法移动，僵尸攻击豌豆，由于僵尸攻击力是1，豌豆还剩0生命值，豌豆消失，此时游戏还剩下一个植物，一个僵尸</li><li>第四个回合，僵尸移动到（0，6）</li><li>第五个回合，僵尸移动到（0，5）</li><li>第六个回合，僵尸移动到（0，4）</li><li>第七个回合，僵尸移动到（0，3）</li><li>第八个回合，僵尸移动到（0，2）</li><li>第九个回合，僵尸移动到（0，1），僵尸攻击坚果，坚果还剩1生命值</li><li>第十个回合，僵尸被坚果阻挡，无法移动，僵尸攻击坚果，坚果还剩0生命值，坚果消失，此时游戏没有植物存活，还有一个僵尸</li><li>第十一个回合，没有植物存活，僵尸移动到（0，0）</li><li>第十二个回合，僵尸移动到房子区域，游戏结束，僵尸获胜</li></ul><h2 id="示例3">示例3</h2><p><strong>输入</strong></p><p>复制代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">5 5</span><br><span class="line">pea 2 2 2 0</span><br><span class="line">pea 2 2 2 1</span><br><span class="line">pea 2 2 2 2</span><br><span class="line">pea 2 1 2 3</span><br><span class="line">nut 20 2 6</span><br><span class="line">15 1 2 2</span><br><span class="line">30 1 1 2</span><br><span class="line">15 1 3 2</span><br><span class="line">20 3 1 2</span><br><span class="line">15 1 1 2</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><p>复制代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1 5 5</span><br><span class="line">2 5 5</span><br><span class="line">3 5 4</span><br><span class="line">4 5 3</span><br><span class="line">5 5 1</span><br><span class="line">6 5 1</span><br><span class="line">7 5 0</span><br><span class="line">plants win</span><br></pre></td></tr></table></figure><h2 id="示例4">示例4</h2><p><strong>输入</strong></p><p>复制代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">3 2</span><br><span class="line">pea 2 2 0 0</span><br><span class="line">nut 10 0 7</span><br><span class="line">potato 10 2 8</span><br><span class="line">10 2 1 0</span><br><span class="line">10 2 6 2</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><p>复制代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 3 2</span><br><span class="line">2 2 2</span><br><span class="line">zombies win</span><br></pre></td></tr></table></figure><h1 id="代码">代码</h1><p>这是Cpp第二次机考的题目，考试的时候由于个人原因，没有能很好的完成（13/20），今天自己重构了一下。</p><p>考试时候能想出用三维数组存数据也是绝了，其实我们只需要实时记录位置就可以了。</p><p>这个故事告诉我们，一定要先想好怎么写，然后才能开始敲代码呜呜呜</p><p>然而还是只能过16个用例。。。。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GAME</span>{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> gameindex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Zombies</span>;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Plants</span>;</span><br><span class="line">    vector&lt;Plants*&gt;  All_P;</span><br><span class="line">    vector&lt;Zombies*&gt; All_Z;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Plants</span>{</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="type">int</span> HP;</span><br><span class="line">        <span class="type">int</span> ATK;</span><br><span class="line">        pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; location;</span><br><span class="line">        <span class="type">int</span> type;</span><br><span class="line">        <span class="type">int</span> state = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Plants</span>(<span class="type">int</span> hp,<span class="type">int</span> atk,<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> type):<span class="built_in">HP</span>(hp),<span class="built_in">ATK</span>(atk),<span class="built_in">location</span>({x,y}),<span class="built_in">type</span>(type){}</span><br><span class="line">    };</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Zombies</span>{</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="type">int</span> HP;</span><br><span class="line">        <span class="type">int</span> ATK;</span><br><span class="line">        pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; location;</span><br><span class="line">        <span class="type">int</span> SPEED;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Zombies</span>(<span class="type">int</span> hp,<span class="type">int</span> atk,<span class="type">int</span> x,<span class="type">int</span> speed):<span class="built_in">HP</span>(hp),<span class="built_in">ATK</span>(atk),<span class="built_in">location</span>({x,<span class="number">9</span>}),<span class="built_in">SPEED</span>(speed){}</span><br><span class="line">    };</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Game_init</span><span class="params">(vector&lt;Plants*&gt; P,vector&lt;Zombies*&gt; Z)</span></span>{</span><br><span class="line">        All_P = P;</span><br><span class="line">        All_Z = Z;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Plant_Attack</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="built_in">sort</span>(All_P.<span class="built_in">begin</span>(),All_P.<span class="built_in">end</span>(),[](Plants* a,Plants* b)-&gt;<span class="type">bool</span>{</span><br><span class="line">            <span class="keyword">if</span>(a-&gt;location.first &lt; b-&gt;location.first) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(a-&gt;location.first==b-&gt;location.first) <span class="keyword">return</span> a-&gt;location.second&lt;b-&gt;location.second;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        });</span><br><span class="line">        <span class="built_in">sort</span>(All_Z.<span class="built_in">begin</span>(),All_Z.<span class="built_in">end</span>(),[](Zombies* a,Zombies* b)-&gt;<span class="type">bool</span>{</span><br><span class="line">            <span class="keyword">if</span>(a-&gt;location.first &lt; b-&gt;location.first) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(a-&gt;location.first==b-&gt;location.first) <span class="keyword">return</span> a-&gt;location.second&lt;b-&gt;location.second;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        });</span><br><span class="line">        <span class="comment">//按照 从左向右 从上到下的顺序</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;All_P.<span class="built_in">size</span>();i++){</span><br><span class="line">            Plants* p = All_P[i];</span><br><span class="line">            <span class="comment">//豌豆</span></span><br><span class="line">            <span class="keyword">if</span>(p-&gt;type==<span class="number">1</span>){</span><br><span class="line">                <span class="type">int</span> atk = p-&gt;ATK;</span><br><span class="line">                <span class="type">int</span> attacked = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">                vector&lt;Zombies*&gt; New_Zom;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;All_Z.<span class="built_in">size</span>();j++){</span><br><span class="line">                    Zombies* z = All_Z[j];</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(attacked==<span class="number">100</span> &amp;&amp; z-&gt;HP &gt; <span class="number">0</span> &amp;&amp; z-&gt;location.first == p-&gt;location.first){</span><br><span class="line">                        attacked = z-&gt;location.second;</span><br><span class="line">                        <span class="comment">//find which will be attacked</span></span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">if</span>(z-&gt;location.first == p-&gt;location.first &amp;&amp; z-&gt;location.second == attacked){</span><br><span class="line">                        z-&gt;HP -= atk;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;All_Z.<span class="built_in">size</span>();j++){</span><br><span class="line">                    <span class="keyword">if</span>(All_Z[j]-&gt;HP&gt;<span class="number">0</span>) New_Zom.<span class="built_in">push_back</span>(All_Z[j]);</span><br><span class="line">                }</span><br><span class="line">                All_Z = New_Zom;</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;type==<span class="number">3</span>){</span><br><span class="line">                <span class="comment">//土豆类被激活</span></span><br><span class="line">                <span class="keyword">if</span>(p-&gt;state==<span class="number">2</span>){</span><br><span class="line">                    <span class="type">int</span> l = p-&gt;location.first<span class="number">-1</span>;</span><br><span class="line">                    <span class="type">int</span> r = p-&gt;location.first+<span class="number">1</span>;</span><br><span class="line">                    <span class="type">int</span> u = p-&gt;location.second<span class="number">-1</span>;</span><br><span class="line">                    <span class="type">int</span> d = p-&gt;location.second+<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;All_Z.<span class="built_in">size</span>();j++){</span><br><span class="line">                        Zombies* z = All_Z[j];</span><br><span class="line">                        <span class="type">int</span> x = z-&gt;location.first;</span><br><span class="line">                        <span class="type">int</span> y = z-&gt;location.second;</span><br><span class="line">                        <span class="keyword">if</span>((x &gt;= l &amp;&amp; x &lt;= r) &amp;&amp; (y &gt;= u &amp;&amp; y &lt;= d)){</span><br><span class="line">                            z-&gt;HP -= p-&gt;ATK;</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                    p-&gt;HP = <span class="number">-1</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Zombie_Move</span><span class="params">()</span></span>{</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">map</span>(<span class="number">5</span>,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">10</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;All_P.<span class="built_in">size</span>();i++){</span><br><span class="line">            Plants* p = All_P[i];</span><br><span class="line">            map[p-&gt;location.first][p-&gt;location.second] = p-&gt;type;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;All_Z.<span class="built_in">size</span>();i++){</span><br><span class="line">            Zombies* z = All_Z[i];</span><br><span class="line">            <span class="type">int</span> x = z-&gt;location.first;</span><br><span class="line">            <span class="type">int</span> y = z-&gt;location.second;</span><br><span class="line">            <span class="type">int</span> s = z-&gt;SPEED;</span><br><span class="line">            <span class="keyword">while</span>((map[x][y]==<span class="number">0</span>||map[x][y]==<span class="number">3</span>) &amp;&amp; y&gt;z-&gt;location.second-s){</span><br><span class="line">                <span class="keyword">if</span>(map[x][y]==<span class="number">3</span>){</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;All_P.<span class="built_in">size</span>();j++){</span><br><span class="line">                        Plants* p = All_P[j];</span><br><span class="line">                        <span class="keyword">if</span>(p-&gt;location.first==x &amp;&amp; p-&gt;location.second==y){</span><br><span class="line">                            p-&gt;state = <span class="number">2</span>;</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                y--;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(map[x][y]==<span class="number">3</span>){</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;All_P.<span class="built_in">size</span>();j++){</span><br><span class="line">                    Plants* p = All_P[j];</span><br><span class="line">                    <span class="keyword">if</span>(p-&gt;location.first==x &amp;&amp; p-&gt;location.second==y){</span><br><span class="line">                        p-&gt;state = <span class="number">2</span>;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            z-&gt;location.second = y;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Zombie_Attack</span><span class="params">()</span></span>{</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">map</span>(<span class="number">5</span>,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">10</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;All_P.<span class="built_in">size</span>();i++){</span><br><span class="line">            Plants* p = All_P[i];</span><br><span class="line">            map[p-&gt;location.first][p-&gt;location.second] = p-&gt;type;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;All_Z.<span class="built_in">size</span>();i++){</span><br><span class="line">            Zombies* z = All_Z[i];</span><br><span class="line">            <span class="type">int</span> x  = z-&gt;location.first;</span><br><span class="line">            <span class="type">int</span> y  = z-&gt;location.second;</span><br><span class="line">            <span class="type">int</span> atk= z-&gt;ATK;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(map[x][y]!=<span class="number">0</span>){</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;All_P.<span class="built_in">size</span>();j++){</span><br><span class="line">                    Plants* p = All_P[j];</span><br><span class="line">                    <span class="keyword">if</span>(p-&gt;location.first== x &amp;&amp; p-&gt;location.second == y){</span><br><span class="line">                        p-&gt;HP -= atk;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            vector&lt;Plants*&gt; New_P;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;All_P.<span class="built_in">size</span>();i++){</span><br><span class="line">                <span class="keyword">if</span>(All_P[i]-&gt;HP&gt;<span class="number">0</span>){</span><br><span class="line">                    New_P.<span class="built_in">push_back</span>(All_P[i]);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            All_P = New_P;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Output</span><span class="params">()</span></span>{</span><br><span class="line">        gameindex++;</span><br><span class="line">        cout&lt;&lt;gameindex&lt;&lt;<span class="string">" "</span>&lt;&lt;All_P.<span class="built_in">size</span>()&lt;&lt;<span class="string">" "</span>&lt;&lt;All_Z.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">Over</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">//僵尸全死了</span></span><br><span class="line">        <span class="keyword">if</span>(All_Z.<span class="built_in">empty</span>()){</span><br><span class="line">            cout&lt;&lt;<span class="string">"Plants win"</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;All_Z.<span class="built_in">size</span>();i++){</span><br><span class="line">            <span class="keyword">if</span>(All_Z[i]-&gt;location.second&lt;<span class="number">0</span>){</span><br><span class="line">                cout&lt;&lt;<span class="string">"Zombies win"</span>&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    GAME* game = <span class="keyword">new</span> <span class="built_in">GAME</span>();</span><br><span class="line">    vector&lt;GAME::Plants*&gt;  Ps;</span><br><span class="line">    vector&lt;GAME::Zombies*&gt; Zs;</span><br><span class="line">    <span class="type">int</span> num_p,num_z; cin &gt;&gt; num_p &gt;&gt; num_z;</span><br><span class="line">    <span class="keyword">while</span>(num_p-- &gt; <span class="number">0</span>){</span><br><span class="line">        string type; cin &gt;&gt; type;</span><br><span class="line">        <span class="type">int</span> hp,atk,x,y;</span><br><span class="line">        <span class="keyword">if</span>(type == <span class="string">"pea"</span>){</span><br><span class="line">            cin &gt;&gt; hp &gt;&gt; atk &gt;&gt; x &gt;&gt; y;</span><br><span class="line">            Ps.<span class="built_in">push_back</span>(<span class="keyword">new</span> GAME::<span class="built_in">Plants</span>(hp,atk,x,y,<span class="number">1</span>));</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(type==<span class="string">"nut"</span>){</span><br><span class="line">            cin &gt;&gt; hp &gt;&gt; x &gt;&gt; y;</span><br><span class="line">            Ps.<span class="built_in">push_back</span>(<span class="keyword">new</span> GAME::<span class="built_in">Plants</span>(hp,<span class="number">0</span>,x,y,<span class="number">2</span>));</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(type==<span class="string">"potato"</span>){</span><br><span class="line">            cin &gt;&gt; atk &gt;&gt; x &gt;&gt; y;</span><br><span class="line">            Ps.<span class="built_in">push_back</span>(<span class="keyword">new</span> GAME::<span class="built_in">Plants</span>(<span class="number">1000</span>,atk,x,y,<span class="number">3</span>));</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span>(num_z-- &gt; <span class="number">0</span>){</span><br><span class="line">        <span class="type">int</span> hp,atk,speed,x;</span><br><span class="line">        cin &gt;&gt; hp &gt;&gt; atk &gt;&gt; speed &gt;&gt; x;</span><br><span class="line">        Zs.<span class="built_in">push_back</span>(<span class="keyword">new</span> GAME::<span class="built_in">Zombies</span>(hp,atk,x,speed));</span><br><span class="line">    }</span><br><span class="line">    game-&gt;<span class="built_in">Game_init</span>(Ps,Zs);</span><br><span class="line">    <span class="type">bool</span> isOver = game-&gt;<span class="built_in">Over</span>();</span><br><span class="line">    <span class="keyword">while</span>(!isOver){</span><br><span class="line">        game-&gt;<span class="built_in">Plant_Attack</span>();</span><br><span class="line">        game-&gt;<span class="built_in">Zombie_Move</span>();</span><br><span class="line">        game-&gt;<span class="built_in">Zombie_Attack</span>();</span><br><span class="line">        game-&gt;<span class="built_in">Output</span>();</span><br><span class="line">        isOver = game-&gt;<span class="built_in">Over</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟 </tag>
            
            <tag> C++高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2022/05/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/05/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式">设计模式</h1><h1 id="可修改性及其基本实现机制">可修改性及其基本实现机制</h1><ol type="1"><li>实现的<strong>可修改性</strong>:涉及到大的场景的修改<ol type="1"><li>对已有实现的修改</li><li>例如：修改现有促销策略</li></ol></li><li>实现的<strong>可扩展性</strong>(DIP &amp; OCP)<ol type="1"><li>对新的实现的扩展</li><li>例如：增加一条新的促销策略(策略模式)</li></ol></li><li>实现的<strong>灵活性</strong><ol type="1"><li>对实现的动态配置</li><li>例如：动态修改更改某商品对应促销策略</li></ol></li></ol><h2 id="如何实现可修改性-重要">如何实现可修改性？ 重要</h2><ol type="1"><li>接口与实现的分离</li></ol><h2 id="如何将接口与实现的分离----java视角">如何将接口与实现的分离 --Java视角</h2><ol type="1"><li>通过接口与实现该接口的类，将接口与实现相分离</li><li>通过子类继承父类，将父类的接口与子类的实现相分离:通过继承的方式，在一定程度上实现了接口与实现的分离，但是也使得子类继承了父类的接口，使得灵活性略有下降。</li><li>Eg.课本263页</li></ol><h2 id="实现接口interface">实现接口(interface)</h2><ol type="1"><li>interface:定义了规约</li><li>实现class:实现了规约</li></ol><p><img src="https://s2.loli.net/2022/05/19/kcif2nCbRJxWhI6.png"></p><h2 id="类图中的标志物的含义">类图中的标志物的含义</h2><ol type="1"><li>虚线箭头:依赖</li><li>实线箭头:关联(两侧写数量)</li><li>空菱形在一侧的实现箭头:聚合</li><li>实菱形在一侧的实现箭头:合成</li><li>空心实线箭头:泛化(extends)</li><li>空心虚线箭头:实现(implements)</li></ol><h2 id="类图与依赖关系">类图与依赖关系</h2><ol type="1"><li>Client、Interface_A、Class_A1之间是什么关系？</li><li>Client和Class_A1是否存在依赖关系？</li></ol><h2 id="继承">继承</h2><ol type="1"><li>父类定义了规约(contract)</li><li>子类实现了规约(contract)</li></ol><p><img src="https://s2.loli.net/2022/05/19/fKbFWwylA5jupIT.png"></p><h2 id="类图与依赖关系-1">类图与依赖关系</h2><ol type="1"><li>Client、Super_A、Sub_A1之间是什么关系？</li><li>Client和Sub_A1是否存在依赖关系？不</li></ol><h2 id="实现的可修改性">实现的可修改性</h2><ol type="1"><li>对于实现的可修改性，无论是Class_A1还是Sub_A1的method_A方法的实现的修改都和Client中的调用代码没有任何耦合性。</li></ol><h3 id="扩展">扩展</h3><p><img src="https://s2.loli.net/2022/05/19/cuReXHbKzMN6G3k.png"></p><h2 id="实现的可扩展性">实现的可扩展性</h2><ol type="1"><li>对于实现的可扩展性，我们可以通过Class_A2还是Sub_A2的创建来实现。</li></ol><h2 id="实现的灵活性">实现的灵活性</h2><p><img src="https://s2.loli.net/2022/05/19/4cJ2PmqdaAeoif7.png"></p><h2 id="继承的优点">继承的优点</h2><ol type="1"><li>虽然继承也能很好的完成接口与实现的分离，但是继承还有他独有的特征。</li><li>子类不但继承了父类的接口还继承了父类的实现，这可以更好的进行代码的重用。</li></ol><h2 id="继承的缺点">继承的缺点</h2><ol type="1"><li>继承的父类与所有子类存在共有接口的耦合性。当父类接口发生改变的时候，子类的接口就一定会更改，这样就会影响到Client代码。</li><li>而且当子类创建对象的时候，就决定了其实现的选择，没法再动态的修改</li></ol><h2 id="组合">组合</h2><ol type="1"><li>而利用接口的组成关系，却能在实现接口和实现的前提下，体现更好的灵活性。前端类和后端类是组合关系。前段类重用了后端类的代码。</li><li>考虑到软件工程中的人的重要性。</li></ol><p><img src="https://s2.loli.net/2022/05/19/IOlXZChuNdq1Tg9.png"></p><h3 id="组合的优点">组合的优点</h3><ol type="1"><li>前端和后端在接口上不存在耦合性。当后端接口发送改变的时候，并不会直接影响到Client代码。</li><li>后端类的实现亦可以动态创建、动态配置、动态销毁，非常灵活。</li></ol><h1 id="设计模式-1">设计模式</h1><h2 id="why为什么使用设计模式">Why？为什么使用设计模式</h2><ol type="1"><li>设计OO软件非常困难</li><li>设计可重用的OO软件-难度更大</li><li>经验丰富的OO设计师可以做出出色的设计</li><li>新设计师倾向于使用以前使用的非OO技术</li><li>经验丰富的设计师知道一些东西-这是什么？</li><li>专家设计师知道不能从第一原则中解决所有问题</li><li>复用的解决方案</li><li>这些模式使面向对象的设计更加灵活，优雅并且最终可重用。</li></ol><h2 id="什么是设计模式-what-is-a-design-pattern">什么是设计模式 What isa design pattern</h2><ol type="1"><li>设计模式:抽象一个重复的设计结构</li><li>包含类和/或对象<ol type="1"><li>依赖</li><li>结构</li><li>互动，或</li><li>约定</li></ol></li><li>提炼设计经验</li></ol><p><img src="https://s2.loli.net/2022/05/19/VNmR6awCrLPiSFl.png"></p><h2 id="模式">模式</h2><ol type="1"><li>典型问题</li><li>设计分析</li><li>解决方案</li><li>案例</li></ol><h2 id="解决方案">解决方案</h2><ol type="1"><li>组成与协作：描述了设计中涉及的各个类的组成成分，他们之间的相互关系及各自的职责和协作方式。</li><li>应用场景：描述了应该何时使用模式。它解释了设计模式所要解决的问题，以及解决这个问题时所面临的特点的环境、限制条件、场景等。这也是我们在应用某种模式之前，需要仔细去体察的。</li><li>使用注意点：因为模式只是一个模板，他可以应用与多种不同场合，所以解决方案并不描述一个具体的实现，而是提供解决方案的一个抽象模型。</li></ol><h1 id="设计模式-2">设计模式</h1><h1 id="策略模式">策略模式</h1><p>定义了算法族，分别封装起来，让他们互相替换，此模式让算法的变化独立于使用算法的客户</p><h1 id="抽象工厂模式">抽象工厂模式</h1><h3 id="工厂模式">工厂模式</h3><p><img src="https://s2.loli.net/2022/05/23/fydMlmRbcEizA9o.png"></p><p><img src="https://s2.loli.net/2022/05/23/pJiV6GtWh1B5e2Z.png"></p><h3 id="问题">问题</h3><ul><li><p>如图所示，Client严重依赖着具体类ClassA1和ClassA2。</p></li><li><p>Client代码中到处分布着创建A对象的复杂判断。</p></li><li><p>当我们A的子类发生改变，或者创建对象的复杂逻辑发生改变，都会对Client代码造成很复杂的修改</p></li></ul><h3 id="用工厂来解决">用“工厂”来解决</h3><p><img src="https://s2.loli.net/2022/05/23/d5fqJGMjUA6R2u3.png"></p><p><img src="https://s2.loli.net/2022/05/23/3FGt94sSUolNIqH.png"></p><h3 id="还有问题">还有问题</h3><ul><li>而在软件系统中，经常面临着“多种对象”的创建工作，由于需求的变化，多种对象的具体实现有时候需要灵活组合。</li><li>比如汽车由引擎、轮胎、车身、车门等各部件组成。而每一部件都有很多种。一个汽车装配车间会依赖不同种的各个部件装配出不同型号的车。如果这时候我们为每一型号的车根据工厂模式创建一个工厂，由于部件的组合关系，我们就会遇到“组合爆炸“问题，对这个装配车间需要创建“无数”个工厂。这就对工厂模式提出更高要求。</li></ul><h3 id="设计分析">设计分析</h3><ul><li>分析具体的需求，我们可以发现，对客户Client来说需要同时实现工厂的灵活性和产品的灵活性。所以，我们提供了两套接口：一是表现出稳定的工厂行为（创建不同的对象）的工厂接口，二是表现出稳定产品行为的产品接口。从而，实现了工厂多态和产品多态。</li><li>工厂接口既使得原本分布于代码各处的多种对象的实例化，现在变为集中到具体的工厂内部，又隔离了“对象实例化的组合”的变化。</li><li>客户Client通过抽象工厂接口的方法得到ProductA和ProductB的实例，再利用产品接口来灵活使用具体的产品</li></ul><h3 id="使用的原则">使用的原则</h3><p><img src="https://s2.loli.net/2022/05/23/JSbvO8Tzaq9jAg1.png"></p><h3 id="抽象工厂模式的类图">抽象工厂模式的类图</h3><p><img src="../../../../../../AppData/Roaming/Typora/typora-user-images/image-20220523184903751.png"></p><h3 id="参与者">参与者</h3><ul><li>抽象工厂（AbstractFactory）声明了创建抽象产品的各个接口。</li><li>具体工厂（ConcreteFactory）实现了对具体产品的创建</li><li>抽象产品（AbstractProduct）声明了一种产品的接口。</li><li>具体产品（ConcreteProduct）定义了具体工厂中创建出来的具体产品，实现了抽象产品的接口。</li><li>客户（Client）使用抽象工厂和抽象产品的类。使用抽象工厂的方法来创建产品</li></ul><h3 id="协作">协作</h3><ul><li>通常情况下，只有一个具体的工厂的实例被创建。这个具体工厂对于创建产品这个事情本身有具体的实现。对于创建不同的产品对象，客户应该用不同的具体工厂。</li><li>抽象工厂转移了产品的创建到其子类具体工厂类中间去。</li></ul><h1 id="单键模式">单键模式</h1><h1 id="迭代器模式">迭代器模式</h1>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
          <category> 软件工程与计算2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详细设计</title>
      <link href="/2022/05/16/%E8%AF%A6%E7%BB%86%E8%AE%BE%E8%AE%A1/"/>
      <url>/2022/05/16/%E8%AF%A6%E7%BB%86%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="详细设计">详细设计</h1><h2 id="预习测试">预习测试</h2><ul><li>⾯向对象⽅法下详细设计的过程是什么？</li><li>现在要写⼀个Sink dot com游戏，其中棋盘，dot com各应该由哪个类来创建</li></ul><h2 id="主要内容">主要内容</h2><ul><li>详细设计基础</li><li>面向对象详细设计</li><li>为类间协作开发集成测试用例</li><li>结构化详细设计</li><li>详细设计文档描述和评审</li></ul><h1 id="详细设计基础">详细设计基础</h1><p><strong>详细设计的出发点</strong>：软件详细设计是在软件体系结构设计之后进行，以需求开发的结果(需求规格说明和需求分析模型)和软件体系结构的结果(软件体系结构设计方案与原型)为出发点</p><h2 id="what-is-detail-design">What is Detail Design?</h2><ul><li>Mid-level design to a specific module</li><li>And low-level design to objects/classes of the specific module</li></ul><p><img src="https://s2.loli.net/2022/05/16/eyCc4Igl9sStBzh.png"></p><blockquote><ol type="1"><li>高层设计反映的是系统高层抽象的构件层次，描述系统的高层结构、关注点和设计决策。</li><li>中层设计反映的是组成模块的内部结构，例如数据定义、函数定义、类定义、类结构等。</li><li>低层设计则是深入莫夸或者类的内部，关注具体的数据结构、算法、类型、语法和控制逻辑等。</li></ol></blockquote><ol type="1"><li>软件架构定义了模块的规范(对外抽象出来的接口)：就是模块之间交互需要知道的信息</li><li>细节设计通过细节设计机制实现模块<ol type="1"><li>中级：(子调制)-&gt; OO-&gt;类指定</li><li>低级：DS. + ALG. -&gt;实现类</li></ol></li><li>细节设计要求设计者考虑模块的美观，功能和许多其他方面<ol type="1"><li>详细设计中的质量要求：修改，维护，性能……</li></ol></li></ol><h2 id="详细设计的输">详细设计的输⼊</h2><p><img src="https://s2.loli.net/2022/05/16/xWYXjZ3s17n8bSP.png"></p><h3 id="从需求体系结构设计到详细设计">从需求、体系结构设计到详细设计</h3><p><img src="https://s2.loli.net/2022/05/16/EScIpysTPVibFde.png"></p><ol type="1"><li>具体的模块的设计是详细设计</li><li>是对体系结构设计的更加精确的描述</li></ol><h2 id="where-from-detail-design-starts">Where from Detail Design Starts?</h2><p>详细设计的目的是实现所有功能性需求和非功能性需求</p><h3 id="详细设计的上下文">详细设计的上下文</h3><ol type="1"><li>模块的规格：导出/导入接口</li><li>职责分配：<ol type="1"><li>有些职责来自RE(SRS)：典型的用例，领域模型，序列图，状态图</li><li>其他一些来自实施决策</li></ol></li><li>在详细设计文档中需要明确定义:<ol type="1"><li>模块结构及其接口(如果有更细的模块分解)</li><li>类结构、类协作、类接口(面向对象分析方法)</li><li>控制结构与函数接口(结构化分析方法)</li><li>重要的数据结构和算法逻辑(如果必要的话)</li></ol></li></ol><p><img src="https://s2.loli.net/2022/05/16/ncGkKC5fu6h14Fj.png"> <img src="https://s2.loli.net/2022/05/16/ncGkKC5fu6h14Fj.png"></p><h3 id="软件体系结构构件之间的接口">软件体系结构：构件之间的接口</h3><p><img src="https://s2.loli.net/2022/05/16/fG3buqWRjKQ4STd.png"></p><h3 id="详细设计的输出">详细设计的输出</h3><p><img src="https://s2.loli.net/2022/05/16/4LNSvEjz7TmsuZx.png"></p><h1 id="面向对象详细设计">面向对象详细设计</h1><h2 id="面向对象设计的思想职责-重要">面向对象设计的思想：职责 重要</h2><h3 id="职责">职责</h3><ol type="1"><li>职责是执行任务(操作职责)或维护某些数据(数据职责)的义务。<ol type="1"><li>行为职责通常由行为来履行。</li><li>数据职责通常由属性来完成。</li><li>可能会涉及到类之间的协作</li></ol></li></ol><h3 id="职责驱动的分解">职责驱动的分解</h3><ol type="1"><li>职责可以在不同的抽象层次上陈述。</li><li>职责可以分解。</li><li>可以将高级职责分配给高级组件。</li><li>职责分解可以作为分解组件的基础：职责既反映了操作义务，也反映了数据义务，因此职责驱动的分解可能与功能分解不同。</li></ol><h3 id="职责启发法">职责启发法</h3><ol type="1"><li>很好地分配职责有助于实现高凝聚力和低耦合。(高内聚)</li><li>确保模块职责不重叠。</li><li><strong>仅当操作和数据有助于完成模块的职责时，才将其放置在模块中。</strong></li></ol><h3 id="委托">委托</h3><ol type="1"><li>委托是一种策略，其中一个模块(委托人)将职责交给另一个模块(委托人)。</li><li>代理帮你完成联系和收集的情况</li></ol><h2 id="面向对象设计的思想协作-重要">面向对象设计的思想：协作 重要</h2><h3 id="什么是协作">什么是协作</h3><ol type="1"><li>程序中的对象必须<strong>协作</strong>；否则，程序将仅由一个可以执行所有操作的大对象组成。-丽贝卡·维尔夫斯·布洛克等，《设计面向对象的软件》，PrenticeHall，1990年：内聚性好一定意味着比较零散(类比较多)</li><li>同等重要的(作为继承)是相互负责地协作的对象社会的发明。这些社会形成了我所谓的系统机制，并代表了战略性架构决策，因为它们超越了各个类。-[The C ++ Journal，Vol.2，No.1 1992年，"与GradyBooch的访谈"]：每个对象都是相对自治的个体。</li><li>一个应用程序可以分解为许多不同的行为。</li><li>每个此类行为都是通过应用程序对象之间的独特协作来实现的：对象和对象之间的实践</li><li>每次协作，无论大小，都保证实现应用程序的行为</li><li>将面向对象的应用程序想象成通过关系连接的对象网络。</li><li>协作是通过网络追求特定行为的<strong>消息模式</strong></li><li>协作分布在对象网络中，因此在任何地方都不存在</li></ol><h2 id="协同设计的需求">协同设计的需求</h2><ol type="1"><li>毕竟，我们正在尝试实现的是应用程序操作。</li><li>如果实现它们的协作设计不当，则应用程序将不准确或脆弱</li></ol><h1 id="面向对象详细设计的过程">面向对象详细设计的过程</h1><ol type="1"><li>面向对象:对象内部是容易理解的，之间的调用的理解是困难。</li><li>结构化:模块内部是困难的，之间的调用是容易的</li><li>概念类图的类和设计类图的类是不同的:<ol type="1"><li>因为设计类图中有的类是辅助类。</li></ol></li><li>设计模型重构<ol type="1"><li>根据模块化的思想进行重构，目标是高内聚、低耦合</li><li>根据信息隐藏的思想筹够，目标是隐藏职责与变更</li></ol></li></ol><h2 id="通过职责建立静态设计模型">通过职责建立静态设计模型</h2><h3 id="抽象对象的职责">抽象对象的职责</h3><ol type="1"><li>类表达了对对象族的本质特征的抽象，提供了构建一个对象的所需要的蓝图</li><li>职责分类<ol type="1"><li>属性职责:对象的状态</li><li>行为职责:对象的行为</li></ol></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/8.png"></p><ol type="1"><li><code>+</code> 是 public，<code>-</code> 是 private</li></ol><h3 id="抽象类之间的关系">抽象类之间的关系</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/9.png"></p><ol type="1"><li>整体存在则部分存在，部分存在则整体存在</li><li>上图需要好好背诵和记忆:重点掌握类图的画法</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/10.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/11.png"></p><h3 id="grasp原则">GRASP原则</h3><ol type="1"><li>一般职责分配软件模式</li><li>不是"设计模式"，而是对象设计的基本原理</li><li>专注于对象设计的最重要方面之一：为类分配职责</li><li>强调适用性：并不是一个普适的</li><li>常见的一些特点:<ol type="1"><li>低耦合：分配一个职责要保证低耦合度</li><li>高耦合：分配一个职责的时候要保持类的高聚合度</li><li>信息专家：将一个职责分配给专家-履行职责所必须的信息的类</li><li>创建者：创建规则在后面</li><li>控制者：控制规则在后面(避免大多数信息由一个类发出、组件相对较小、行为职责和数据绑定、职责单一)</li></ol></li></ol><h4 id="拇指原则">拇指原则</h4><ol type="1"><li>当存在替代设计选择时，请仔细研究替代方案的<strong>凝聚力和耦合含义</strong>，并可能对替代方案的未来发展压力。</li><li>选择具有良好内聚性，耦合性和稳定性的替代方案。</li></ol><h4 id="信息专家">信息专家</h4><ol type="1"><li>问题：在面向对象设计中分配职责的最基本原则是什么？</li><li>解决方案：将具有完成任务所必需的信息的班级分配给班级。</li><li>维护信息封装</li><li>促进低耦合</li><li>促进高内聚类</li></ol><h5 id="信息专家的例子">信息专家的例子</h5><ol type="1"><li>谁负责了解典型的销售点应用程序中的销售总额？(求总价) Sale</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/12.png"></p><ol type="1"><li>计算总计需要所有SalesLineItem实例及其小计。而这是只有销售(Sale)知道的</li><li>这就是为什么Sale是信息专家。</li><li>因此(通过全部的情况进行开展的)</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/13.png"></p><ol type="1"><li>但是每个订单项都需要小计(数量乘以价格)。</li><li>根据专家的说法，SalesLineItem是专家，知道数量并且与知道价格的产品规格相关联。</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/14.png"></p><ol type="1"><li>因此，职责分配给3个类别。</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/15.png"></p><h5 id="eg.case-study-智能热水器">Eg.Case Study: 智能热水器</h5><ol type="1"><li>智能控制水温<ol type="1"><li>周末水温⾼</li><li>夜晚水温低</li><li>⽣病等特殊情况水温高</li><li>度假水温低</li></ol></li><li>概念模型<ol type="1"><li>类<ol type="1"><li>热水器控制器<ol type="1"><li>模式</li><li>低温</li><li>高温</li><li>周末</li></ol></li><li>时钟</li></ol></li><li>接口：</li><li>WaterHeaterController和Clock怎么交互？<ol type="1"><li>轮询</li><li>通知</li></ol></li></ol></li><li>怎么知道当前时间是该升温还是降温？<ol type="1"><li>Controller自己保存特殊时间并计算(比较当前时间和特殊时间)：Bad：多个职责。</li><li>由SpecialTime类保存特殊时间；Controller调⽤getSpecialTime()得到特殊时间，再计算<ol type="1"><li>Bad：数据职责与行为职责的分离</li><li>SpecialTime是信息专家，对外给接口</li></ol></li><li>由SpecialTime类保存特殊时间，并提供isSpecialTime();Controller调用方法<ol type="1"><li>Good：单一职责</li></ol></li><li>谁有信息谁是专家，数据和功能不要分开</li><li>为什么同样是get方法<ol type="1"><li>一个是合理的:商品那个，那个是因为商品和单价是分开的，所以是合理的</li><li>一个是不合理的:现在这个，因为只有一个数据就可以完成计算</li><li>一个是简单的get方法，不完全数据和行为</li><li>另一个是只需要这一个数据就可以了，并且行为封装在一起是合理的</li><li>类之间的关系的影响</li></ol></li></ol></li></ol><h3 id="添加辅助类">添加辅助类</h3><ol type="1"><li>接口类</li><li>记录类(数据类)</li><li>启动类:从各种地方的初始化，进行转发和分派</li><li>控制器类</li><li>实现数据类型的类</li><li>容器类</li></ol><h3 id="添加辅助类后的设计模型">添加辅助类后的设计模型</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/16.png"></p><h2 id="通过协作创建动态设计模型">通过协作创建动态设计模型</h2><h3 id="抽象对象之间协作">抽象对象之间协作</h3><ol type="1"><li>从小到大,将对象的小职责聚合形成大职责;</li><li>从大到小,将大职责分配给各个小对象。</li><li>这两种方法,⼀般是同时运⽤的,共同来完成对协作的抽象。</li><li>顺序图<ul><li>可以⽤顺序图表示对象之间的协作。顺序图是交互图的⼀种,它表达了对象之间如何通过消息的传递来完成⽐较⼤的职责。</li><li>包含两部分:对象本身和对象之间的信息流</li></ul></li><li>信息分为:图示见课本206页<ol type="1"><li>同步消息</li><li>异步消息</li><li>同步消息返回</li></ol></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/17.png"></p><ol start="6" type="1"><li>对象结束之后可以在底下画一个X表示结束</li><li>状态图<ol type="1"><li>除了顺序图,我们还可以通过状态图来表达软件的动态模型。UML状态图(State Diagram)</li><li>主要⽤于描述⼀个复杂对象在其⽣存期间的动态⾏为,表现为⼀个对象所经历的状态序列,引起状态转移的事件(Event),以及因状态转移⽽伴随的动作(Action)。⼀般可以⽤状态机对⼀个对象的⽣命周期建模,UML状态图⽤于显示状态机(State Machine Diagram),重点在于描述 UML状态图的控制流。⽽协作 是:⽤复杂对象的状态图中的 Event体现出对象之间消息的传递;⽤ Action体现消息引发的对象状态的改变(⾏为)。</li></ol></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/18.png"></p><h3 id="明确对象的创建">明确对象的创建</h3><h4 id="创建者模式">创建者模式</h4><ol type="1"><li>问题：谁负责创建某个类的新实例？</li><li>解决方案：根据潜在的创建者类与要实例化的类之间的关系，确定哪个类应创建类的实例。</li><li>问题：谁负责创建对象？</li><li>回答：如果有以下情况，则由创建者分配B类创建A类实例的职责：<ol type="1"><li>B 聚集了 A 对象</li><li>B 包含了 A 对象</li><li>B 记录了 A 的实例</li><li>B 要经常使用 A 对象</li><li>当 A 的实例被创建，B具有传递给A的初始化数据(也就是 B 是创建 A的实例这项任务的信息专家)</li><li>在有选择的地方，更喜欢B聚合或包含A对象</li></ol></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/19.png"></p><ul><li>第一个(组合关系)</li><li>第二个(单向被关联):比如访问数据库，你要访问的时候，我就给一个访问对象来使用，不用的时候归还就行。</li><li>第三个(持有必要数据):根据业务的情况决定什么时候被创建，有时候B可以创建但是不知道什么时机来创建，如果C知道，那么我们可能让C创建对象，然后B进行初始化</li><li>第四个(聚合关系):关系比较多，要看时机等什么时候合适</li></ul><h4 id="创建例子">创建例子</h4><ol type="1"><li>谁负责创建SalesLineItem对象？<strong>销售</strong>：往往是一旦有sale就会创建</li><li>找到聚合或者包含了SalesLineItem的物体类</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/20.png"></p><ol start="3" type="1"><li>创建者模式建议是 Sale</li><li>合作图是</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/21.png"></p><h4 id="创作者摘要">创作者摘要</h4><ol type="1"><li>通过创建负责创建需要引用的对象的类的实例来促进低耦合</li><li>通过自己创建对象，它们避免依赖于另一个类为它们创建对象.</li></ol><h4 id="谁创建square-piece-player">谁创建Square / Piece / Player？</h4><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/22.png"></p><ol type="1"><li>Piece的创建(那个关联性最强，就是用哪一个来创建)<ul><li>Player？√</li><li>Board？</li></ul></li><li>Squares的创建:Board创建</li><li>Player的创建:用Game创建(没有大问题)</li></ol><h3 id="控制器">控制器</h3><ol type="1"><li>问题：如何分配处理系统事件的职责？</li><li>解决方案：如果程序从其图形界面以外的其他来源接收事件，请添加事件类以将事件源与实际处理事件的对象分离。</li></ol><h4 id="控制方式">控制方式</h4><ol type="1"><li>将处理系统事件消息的职责分配给代表以下选项之一的类：<ol type="1"><li>整个组织的业务(立面控制器)。</li><li>整个系统(外观控制器)。</li><li>在问题域中真实操作解决问题的人(角色控制器)。</li><li>自动化解决用例的模块(用例控制器)。</li></ol></li></ol><h4 id="控制者">控制者</h4><ol type="1"><li>购买项目用例中的系统事件<ol type="1"><li>输入部分</li><li>结束售卖</li><li>结账</li></ol></li><li>谁负责输入</li><li>控制者有四种处理对象<ol type="1"><li>整个系统 Post</li><li>整个业务 商店</li><li>在现实生活中活跃在任务中的</li><li>在系统中机器处理这个部分</li></ol></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/23.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/24.png"></p><ol type="1"><li>按了按钮就会直接进行响应</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/25.png"></p><ol type="1"><li>用POST方法申请Item</li><li>谁设定1:enterItem接口？和需求有关</li><li>界面变更和逻辑变更的频率时不同的，需要分开，Controller存在的必要性</li></ol><h4 id="控制器总结">控制器总结</h4><ol type="1"><li>Controller本身不是面向对象的，它包含很多复杂的逻辑</li><li>使用控制器对象可使外部事件源和内部事件处理程序彼此独立于他们的类型和行为</li><li>控制器对象可能变得高耦合和职责上低内聚</li></ol><h4 id="什么是棋盘游戏的控制者">什么是棋盘游戏的控制者？</h4><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/26.png"></p><h3 id="选择合适的控制风格重要">选择合适的控制风格(重要)</h3><ol type="1"><li>集中式控制风格</li><li>委托式控制风格</li><li>分散式控制风格</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/27.png"></p><ol type="1"><li>系统行为的逻辑在对象(组件)网络之间分布的方式。</li><li>分散的:系统行为的逻辑通过对象网络"<strong>广泛传播</strong>"</li><li>集中式:一个额外的控制器记录系统行为的所有逻辑。</li></ol><h4 id="控件控制情况">. 控件控制情况</h4><ol type="1"><li>做出决定并指导他人行动的对象是控制器。</li><li>他们总是与他人合作有两个原因：<ol type="1"><li>收集信息以便做出决定</li><li>并呼吁其他人采取行动。</li></ol></li><li>他们的重点通常是决策而不是执行后续操作：他们的最终职责通常会转移给对控制器负责的较大任务有更多特定职责的其他人</li></ol><h4 id="控制器协作情况">控制器协作情况</h4><ol type="1"><li>控件样式是一种将所有系统行为分布在对象(组件)网络之间的方式。<ol type="1"><li>集中式:几个控制器记录所有系统行为的逻辑</li><li>委托式:通过对象网络分配决策，由几个控制器进行主要决策</li><li>分散式:所有系统行为都通过对象网络广泛传播</li></ol></li></ol><h4 id="集中式控制风格">集中式控制风格</h4><ol type="1"><li>容易找到做出决定的地方</li><li>易于查看如何制定决策以及如何更改决策流程</li><li>控制器可能会变得的庞大，复杂且难以理解，维护，测试等。</li><li>控制器可以将其他组件视为数据存储库<ol type="1"><li>增加耦合</li><li>破坏信息隐藏</li></ol></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/28.png"></p><ul><li>都是他在调用别人</li></ul><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/29.png"></p><ul><li>部分去中心化的中心模式(如上)</li></ul><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/30.png"></p><ul><li>上图例子:通过一些部分特别的方式读取输入</li></ul><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/31.png"></p><ul><li>上图例子:依赖状态来降低指向性</li><li>控制器只负责状态转移，不管具体的状态处理</li></ul><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/32.png"></p><ul><li>更加分散的设计:进行分发，只负责协调</li></ul><h4 id="控制的启发1">控制的启发1</h4><ol type="1"><li>避免大多数消息都来自单个组件的交互设计。</li><li>保持组件较小。</li><li>确保并非仅将全部职责分配给几个组件。</li><li>确保操作职责与数据职责一致。</li></ol><h4 id="委托式控制风格">委托式控制风格</h4><ol type="1"><li>作出决策的对象不只有一个，职责的分解决定了控制对象的层次。</li></ol><h4 id="分散式控制风格">分散式控制风格</h4><ol type="1"><li>其特点是拥有许多组件，几乎没有数据，职责也很少。</li><li>很难理解控制流。</li><li>组件无法独自完成很多工作，从而增加了耦合。</li><li>隐藏信息是很难的。</li><li>内聚性通常很差。</li><li>很少有模块化原则可以满足。</li><li>完全靠对象自治的方式来实现自己的职责。</li></ol><h4 id="控制启发二">控制启发二</h4><ol type="1"><li>避免要求每个组件发送许多消息的交互。</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/33.png"></p><h1 id="为类间协作开发集成测试用例">为类间协作开发集成测试用例</h1><h2 id="详细设计的集成测试">详细设计的集成测试</h2><ol type="1"><li>类间协作的集成测试<ol type="1"><li>重点针对复杂逻辑(交互⽐较多)</li><li>⾃顶向下或者⾃底向上的集成</li></ol></li><li>Mock Object<ol type="1"><li>不是stub</li></ol></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/50.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/51.png"></p><ol type="1"><li>测试用例</li></ol><h2 id="类间协作的集成测试">类间协作的集成测试</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/34.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/35.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/36.png"></p><h1 id="结构化详细设计">结构化详细设计</h1><h2 id="结构化设计的思想">结构化设计的思想</h2><ol type="1"><li>分解是降低复杂度的一种方法</li><li>按算法的分解:自然的分解想法</li><li>从数据流图向结构图的转换</li></ol><h2 id="降低复杂度的方法">降低复杂度的方法</h2><ol type="1"><li>分解：同一层次</li><li>抽象：从低层次抽象出高层次</li></ol><h2 id="如何描述一个系统">如何描述一个系统？</h2><ol type="1"><li>一系列相互关联的过程</li><li>将输入转化为输出</li><li>DFD:数据流图<ol type="1"><li>数据流(箭头)</li><li>过程(圆圈)</li><li>数据存储(平行线)</li><li>外部实体(矩形)</li></ol></li></ol><h2 id="按算法分解">按算法分解</h2><ol type="1"><li>分而治之</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/37.png"></p><h2 id="结构化设计">结构化设计</h2><ol type="1"><li>结构化设计的重心:从数据流图到结构图</li><li>上述转化过程:<ol type="1"><li>寻找到输入的最高抽象点和输出的最高抽象点</li><li>根据输入、输出的最高抽象点，对模块进行划分</li><li>然后在一次对每个模块寻找最高抽象点，再进行模块分解，从而逐步求精得到树状的结构图</li></ol></li><li>详细参考课本(201页)</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/38.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/39.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/41.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/42.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/43.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/44.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/45.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/46.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt12/47.png"></p><h1 id="详细设计文档描述和评审">详细设计文档描述和评审</h1><p><img src="https://s2.loli.net/2022/05/16/GtPjRspkFrvnAdh.png"></p><ol type="1"><li>所有模块都应该尽量详细</li></ol><h2 id="详细设计验证">详细设计验证</h2><ol type="1"><li>评审:应该很好的展开</li><li>度量<ol type="1"><li>模块化度量</li></ol></li><li>测试<ol type="1"><li>协作测试</li></ol></li></ol><p><img src="https://s2.loli.net/2022/05/16/GtPjRspkFrvnAdh.png"></p><ol start="4" type="1"><li>设计的信息程度对后继开发人员是否足够?就是给不同人应该差不太多。</li></ol><h1 id="第三阶段">第三阶段</h1><ol type="1"><li>制品合理性</li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
          <category> 软件工程与计算2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 详细设计 </tag>
            
            <tag> 软件工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象的模块化</title>
      <link href="/2022/05/16/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
      <url>/2022/05/16/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象的模块化">面向对象的模块化</h1><p><a href="https://github.com/SpriCoder/SpriCoder-Notes">原文链接-张洪胤</a></p><h1 id="模块化的原则总结">模块化的原则(总结)</h1><p><img src="https://s2.loli.net/2022/05/17/d8UstqXahRLm34E.png"></p><ol type="1"><li>核心就是上面的</li><li>题目是，给例子，发现违反的原则并纠正</li></ol><h1 id="面向对象中的模块与耦合">面向对象中的模块与耦合</h1><h2 id="类">类</h2><ol type="1"><li>模块化是消除软件复杂度的一个重要方法，它有效地将一个复杂系统分解为若干个代码片段，每一个代码片段完成一个功能，并且包含完成这个功能所需要的信息。</li><li>模块化希望代码片段由两部分组成:接口和实现。</li></ol><h2 id="模块">模块</h2><ol type="1"><li>一段代码<ol type="1"><li>方法</li><li>类</li><li>模块(包)</li></ol></li><li>耦合:通过段</li><li>聚合:内部段</li></ol><h2 id="耦合中的结构方法与oo方法">耦合中的结构方法与OO方法</h2><ol type="1"><li>耦合:耦合是对从一个模块到另一个模块的连接所建立的关联强度的度量。</li><li>结构化方法:连接是对其他地方定义的某些标签或地址的引用</li><li>面向对象方法<ol type="1"><li>访问耦合</li><li>继承耦合</li></ol></li></ol><h2 id="降低耦合的设计原则">降低耦合的设计原则</h2><ol type="1"><li>原则一：Global Variables Consider Harmful</li><li>原则二：To be Explicit</li><li>原则三：Do not Repeat</li><li>原则四：Programming to Interface</li></ol><h1 id="访问耦合">访问耦合</h1><p><img src="https://s2.loli.net/2022/05/16/MvXh8a5oiEPbBRc.png"></p><h2 id="隐式耦合cascading-message-级联调用问题">隐式耦合:CascadingMessage 级联调用问题</h2><p><img src="https://s2.loli.net/2022/05/16/DVQenvKbJZ4tkxT.png"></p><h3 id="解决方案-引入局部变量">解决方案 — 引入局部变量</h3><p><img src="https://s2.loli.net/2022/05/16/OPybNSR8ElnYCwz.png"></p><ul><li>避免隐式耦合，变为显式耦合，降低耦合度</li></ul><h3 id="cascading-message问题案例">Cascading Message问题案例</h3><p><img src="https://s2.loli.net/2022/05/16/UZ6GLCntPp9YelW.png"></p><ul><li>使用委托的方式来解决，委托给一个类来完成这个业务</li></ul><h3 id="解决方案-委托">解决方案 — 委托</h3><p><img src="https://s2.loli.net/2022/05/16/78VXOGlK3spuZ4k.png"></p><h1 id="组件耦合原理">组件耦合原理</h1><h2 id="原则四面向接口编程">原则四：面向接口编程</h2><ol type="1"><li>编程到所需的接口，不仅是受支持的接口</li><li>按照约定设计<ol type="1"><li>模块/类合同：所需方法/提供的方法</li><li>方法合同：前提条件，后置条件，不变式</li></ol></li><li>在考虑(非继承的)类与类之间的关系时，一方面要求值访问对方的接口，另一方面要避免隐式访问。</li><li>课本231页关于契约的含义的补充:<ol type="1"><li>前置条件</li><li>后值条件</li><li>不变式</li></ol></li><li>案例</li></ol><p><img src="https://s2.loli.net/2022/05/16/DoiWYHxa7M3fvzy.png"></p><h2 id="原则五迪米特法则">原则五:迪米特法则</h2><ol type="1"><li>通俗说法<ol type="1"><li>你可以自己玩。(this)</li><li>你可以玩自己的玩具，但不能拆开它们(自己的成员变量)</li><li>你可以玩送给你的玩具。(方法)</li><li>你可以玩自己制作的玩具。(自己创建的对象)</li></ol></li><li>更加形式化的说法:<ol type="1"><li>每个单元对于其他单元只能拥有优先的知识，只是与当前单元紧密联系的单元</li><li>每个单元只能和它的朋友交谈，不能和陌生单元交谈</li><li>只和自己的直接的朋友交谈</li></ol></li><li>课本232页的例子很生动</li></ol><h3 id="问题案例">问题案例</h3><p><img src="https://s2.loli.net/2022/05/16/M2QlO7fWeGtY4oc.png"></p><ul><li>通过联系人获得信息</li><li>如何获得其他的引用？<ol type="1"><li>this</li><li>成员变量:√在Contact里面持有PostalArea的一个成员变量。</li><li>方法</li><li>自己创建</li></ol></li><li>这里需要再去确定一下</li></ul><h2 id="原则六接口隔离原则isp也叫接口最小化原则">原则六：接口隔离原则(ISP)/也叫接口最小化原则</h2><ol type="1"><li>不应强迫客户端依赖于不使用的接口。 马丁(R. Martin)，1996年</li><li>原则6：接口隔离原则(ISP)：面向简单接口编程</li><li>许多客户端专用接口比一个通用接口要好</li></ol><h2 id="解释接口隔离原则">解释接口隔离原则</h2><ol type="1"><li>多用途的类<ol type="1"><li>方法分成不同组</li><li>没有一个用户使用所有的方法</li></ol></li><li>可能会导致不想要的依赖：使用类的一个方面的客户端也间接依赖于其他方面的依赖性</li><li>ISP有助于解决问题：使用多个客户端特定的接口</li></ol><h3 id="案例一gui界面问题">案例一:GUI界面问题</h3><p><img src="https://s2.loli.net/2022/05/16/SI6T5bswK3ofD9a.png"></p><ul><li>进一步细化接口，避免出现不必要的依赖。</li></ul><h3 id="案例二application的依赖问题">案例二:Application的依赖问题</h3><p><img src="https://s2.loli.net/2022/05/16/bXsVIQonWNZ7YD9.png"></p><ul><li>想法一:将ApplicationForm拆开</li><li>想法二:将Controller合并</li><li>根据具体情况选择想法一和想法二</li></ul><h1 id="继承耦合">继承耦合</h1><p><img src="https://s2.loli.net/2022/05/16/BV3bRYmXNqWxUQJ.png"></p><ol type="1"><li>在以上的各种类型的继承关系中，修改规格、修改实现、精化规格是不可以接受的。</li><li>扩展是最好的继承耦合</li></ol><h2 id="修饰继承耦合">修饰继承耦合</h2><ol type="1"><li>没有任何规则和限制的修改</li><li>最差的继承耦合</li><li>如果客户端使用父引用，则需要使用parent和child方法<ol type="1"><li>隐含的</li><li>有两个连接，比较复杂</li></ol></li><li>危害多态</li></ol><h3 id="案例">案例</h3><p><img src="https://s2.loli.net/2022/05/16/bPqyT3deJE9C1zQ.png"></p><ul><li>父类能做的子类都能做吗?√</li><li>子类能做的父类都能做吗?×</li></ul><h2 id="完善继承耦合">完善继承耦合</h2><ol type="1"><li>定义新信息</li><li>继承的信息仅根据预定规则进行更改</li><li>如果客户使用父母参考，则需要整个父母和子女的修饰<ol type="1"><li>1+connections</li></ol></li><li>常见的</li></ol><p><img src="https://s2.loli.net/2022/05/16/RCSpf4hAymNkLeJ.png"></p><h2 id="扩展继承耦合">扩展继承耦合</h2><ol type="1"><li>子类仅添加方法和实例变量，而没有修改或修饰任何继承的方法和实例变量</li><li>如果客户端使用父引用，则仅需要父引用：一次引用</li></ol><h1 id="降低继承耦合的方法">降低继承耦合的方法</h1><h2 id="继承耦合原理">继承耦合原理</h2><h2 id="原则七里氏替换原则">原则七：里氏替换原则</h2><ol type="1"><li>所有派生类都必须可以替代其基类</li><li>"使用指针或对基类的引用的函数必须能够在不知道的情况下使用派生类的对象。"-R. Martin，1996年</li></ol><h3 id="问题案例一银行问题">问题案例一:银行问题</h3><p><img src="https://s2.loli.net/2022/05/16/LvpqrZjWAMI8Q2s.png"></p><ul><li>继承关系有问题吗？</li><li>继承后子类能够当做父类看待吗？不能，因为子类要求比父类更强</li><li>解决方案:在父类中增加新的变量完成</li></ul><p><img src="https://s2.loli.net/2022/05/16/JR2AocNT7etSEdi.png"></p><h3 id="问题案例二is-a-square-a-rectangle">问题案例二:Is a Square aRectangle?</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Rect</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Rect</span>();</span><br><span class="line">setWidth = <span class="number">4</span>;</span><br><span class="line">setHeight = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">assert</span>(<span class="number">20</span> == getArea());</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_">Rect</span>{</span><br><span class="line">   <span class="comment">// Square invariant, height = width</span></span><br><span class="line">   setWidth(x) {</span><br><span class="line">      setHeight()=x;</span><br><span class="line">   }</span><br><span class="line">   setHeight(x) {</span><br><span class="line">      setWidth(x)</span><br><span class="line">   }</span><br><span class="line">} <span class="comment">// violate LSP?</span></span><br></pre></td></tr></table></figure><ol type="1"><li>正方形继承长方形:正方形条件比长方形条件更强，多限制条件。</li><li>正方形继承长方形是不合适的。</li><li>长方形继承正方形也是不合适的</li></ol><h3 id="问题案例三penguin-is-a-bird">问题案例三:Penguin is a bird?</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bird</span> {</span><br><span class="line">   <span class="comment">// has beak, wings,...</span></span><br><span class="line">   <span class="keyword">public</span>: virtual <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>;</span><br><span class="line">   <span class="comment">// Bird can ﬂy</span></span><br><span class="line">};</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parrot</span> : <span class="keyword">public</span> Bird {</span><br><span class="line">   <span class="comment">// Parrot is a bird</span></span><br><span class="line">   <span class="keyword">public</span>: virtual <span class="keyword">void</span> <span class="title function_">mimic</span><span class="params">()</span>;</span><br><span class="line">   <span class="comment">// Can Repeat words...</span></span><br><span class="line">};</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Penguin</span> : <span class="keyword">public</span> Bird {</span><br><span class="line">   <span class="keyword">public</span>: <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> {</span><br><span class="line">      error (<span class="string">"Penguins don’t fly!"</span>);</span><br><span class="line">   } </span><br><span class="line">};</span><br></pre></td></tr></table></figure><ul><li>不应该被叫做brid，而应该是flyingBird</li><li>Penguins Fail to Fly!</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">PlayWithBird</span> <span class="params">(Bird abird)</span> {</span><br><span class="line">   abird.fly();</span><br><span class="line">   <span class="comment">// OK if Parrot.</span></span><br><span class="line">   <span class="comment">// if bird happens to be Penguin...OOOPS!!</span></span><br><span class="line">} </span><br></pre></td></tr></table></figure><ol type="1"><li>不建模："企鹅不可能"，它建模"企鹅可能很好，但如果他们尝试是错误的"，则尝试运行时错误→不可取</li><li>考虑可替代性-LSP失败</li></ol><h2 id="里氏替换原则总结">里氏替换原则总结</h2><ol type="1"><li>LSP与语义和替换有关<ol type="1"><li>设计前先了解<ol type="1"><li>必须清楚地记录每个方法和类的含义和目的</li><li>缺乏用户理解将导致事实上违反LSP</li></ol></li><li>可替换性至关重要<ol type="1"><li>每当任何系统中的任何代码引用任何类时，</li><li>该类别的任何将来或现有的子类别都必须100％可替换</li></ol></li></ol></li></ol><blockquote><p>"在派生类中重新定义一种方法时，只能用一个较弱的方法代替其先决条件，而用一个较强的方法代替其后置条件"— B. Meyer，1988年</p></blockquote><ol type="1"><li>合同设计<ol type="1"><li>对象的广告行为：<ol type="1"><li>更弱的前置条件</li><li>更强的后置条件</li></ol></li></ol></li><li>派生类服务应仅需更多且承诺不少于</li><li>LSP用来判断是否可以进行继承</li></ol><h3 id="课堂练习">课堂练习</h3><p><img src="https://s2.loli.net/2022/05/16/Ro5uKH43fdygis9.png"></p><ol type="1"><li>两种设计都不好，因为前置条件强了</li></ol><h2 id="设计原则八组合代替继承">设计原则八:组合代替继承</h2><ol type="1"><li>组合优于继承</li><li>使用继承实现多态</li><li>使用委托不继承重用代码！</li></ol><h3 id="coad的继承规则">Coad的继承规则</h3><ol type="1"><li>仅在满足以下所有条件时才使用继承：<ol type="1"><li>子类表示"是一种特殊的"，而不是"是一种角色"</li><li>子类的实例永远不需要成为另一个类的对象</li><li>子类扩展而不是覆盖或取消其父类的职责</li><li>子类不会扩展仅是实用程序类的功能</li></ol></li></ol><h3 id="继承组合-实例一">继承/组合 实例一</h3><p><img src="https://s2.loli.net/2022/05/16/V3NAtK1dnWPB4oI.png"></p><ul><li>如果出现一个用户既是 Passenger 也是 Agent</li><li>Java不允许多继承</li></ul><p><img src="https://s2.loli.net/2022/05/16/uh23qRyvXGBTp1t.png"></p><ul><li>直接的想法就是直接组合</li><li>Person里面持有Passenger、Agent，但是这时候对于单一身份的人是很奇怪的</li></ul><h3 id="继承组合-示例二">继承/组合 示例二</h3><p><img src="https://s2.loli.net/2022/05/16/oAfV18CgXhSIQKR.png"></p><ul><li>Person持有Role，Passenger和Agent实现抽象接口PersonRole</li><li>Role可以是一个List</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Object</span> {  </span><br><span class="line"><span class="keyword">public</span>: <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">update</span><span class="params">()</span> </span>{}; </span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">draw</span><span class="params">()</span> </span>{};</span><br><span class="line"> <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">collide</span><span class="params">(Object objects[])</span> </span>{}; </span><br><span class="line">}; </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Visible</span> : <span class="keyword">public</span> Object { </span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">draw</span><span class="params">()</span> </span>{ </span><br><span class="line">        <span class="comment">/* draw model at position of this object */</span> }; </span><br><span class="line">    <span class="keyword">private</span>: Model* model; </span><br><span class="line">}; </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solid</span> : <span class="keyword">public</span> Object { </span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">collide</span><span class="params">(Object objects[])</span> </span>{ </span><br><span class="line"><span class="comment">/* check and react to collisions with objects */</span> }; </span><br><span class="line">}; </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Movable</span> : <span class="keyword">public</span> Object { </span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">update</span><span class="params">()</span> </span>{</span><br><span class="line"> <span class="comment">/* update position */</span> }; </span><br><span class="line">};</span><br></pre></td></tr></table></figure><ul><li>问题:游戏引擎中存在很多的对象,三个类分别实现方法之一</li><li>继承三件事但是只做了一件，Promise No Less不符合</li><li>接口应该拆成3个</li></ul><p><img src="https://s2.loli.net/2022/05/16/RzaCBKIfxNu8qOJ.jpg"></p><h1 id="内聚">内聚</h1><ol type="1"><li>内聚的分类参考课本237页，功能内聚、信息内聚、过程内聚、时间内聚、逻辑内聚、偶然内聚。</li></ol><p><img src="https://s2.loli.net/2022/05/16/Hl2byUrOtQ689Kn.png"></p><ul><li>方法和属性保持一致</li></ul><p><img src="https://s2.loli.net/2022/05/16/wcKF2JsmtWylEqR.png"></p><ul><li>提高内聚性:将一个类分为三个类</li></ul><p><img src="https://s2.loli.net/2022/05/16/OIgsdHJRoEkPLMa.png"></p><ul><li>将时间抽象出来</li></ul><h2 id="方法内聚">方法内聚</h2><ol type="1"><li>一类方法是普通耦合</li><li>所有方法尽一责<ol type="1"><li>信息内聚</li><li>相对功能(功能内聚)</li><li>第九个原则:单一职责原理</li></ol></li></ol><h2 id="提高内聚的方法">提高内聚的方法</h2><h3 id="原则九单一责任原则srp">原则九：单一责任原则(SRP)</h3><blockquote><p>"一个类只有一个改变的理由"-罗伯特·马丁(Robert Martin)</p></blockquote><ol type="1"><li>与内聚性相关并从中导出，即模块中的元素应在功能上紧密相关</li><li>班级履行某种职责的责任也是班级变化的原因</li><li>一个高内聚的类不仅要是信息内聚的，还应该是功能内聚的。</li></ol><h4 id="问题案例-1">问题案例</h4><p><img src="https://s2.loli.net/2022/05/16/LATyUvZkdejYSIz.png"></p><ul><li>修改的原因:<ul><li>业务逻辑</li><li>XML格式</li></ul></li><li>如何修改如何分开</li></ul><h4 id="结局方案">结局方案</h4><p><img src="https://s2.loli.net/2022/05/16/RBHc38XdaoKl6bV.png"></p><ul><li>我们将两部分职责分离开</li></ul><h3 id="单一职责原则">单一职责原则</h3><ol type="1"><li>班级只有一个改变的理由：职能/职责的凝聚力</li><li>几个职责：表示更改的几个原因→更频繁的更改</li><li>听起来很简单<ol type="1"><li>在现实生活中并非如此轻松</li><li>具有复杂性，重复性，不透明性的Tradeo</li></ol></li></ol><h2 id="课堂练习-1">课堂练习</h2><p><img src="https://s2.loli.net/2022/05/16/TDcg9MjbPqAKxQ6.png"> <img src="https://s2.loli.net/2022/05/16/TDcg9MjbPqAKxQ6.png"></p><ul><li>打电话和挂起两个职责分离开</li></ul><p><img src="https://s2.loli.net/2022/05/16/TDcg9MjbPqAKxQ6.png"></p><ul><li>几何画板:Draw和Area的计算如何分开</li></ul><p><img src="https://s2.loli.net/2022/05/16/TDcg9MjbPqAKxQ6.png"></p><ul><li>解决方案:集合长方形和图形长方形一一对应</li></ul><h1 id="耦合和内聚的度量">耦合和内聚的度量</h1><h2 id="类之间的耦合度量">类之间的耦合度量</h2><h3 id="第一种度量cbo方法调用耦合">第一种度量:CBO(方法调用耦合)</h3><ol type="1"><li>对象类之间的耦合(CBO)</li><li>CBO = 该类访问他类的成员方法的数量 +其他类的成员访问该类的成员方法的数量</li><li>其他类的计数：<ol type="1"><li>哪个访问此类中的方法或变量，或者</li><li>包含此类访问的方法或变量</li><li>不包括继承</li></ol></li><li>越低越好</li></ol><h3 id="第二种度量dac数据抽象耦合">第二种度量:DAC(数据抽象耦合)</h3><ol type="1"><li>数据抽象耦合(DAC)</li><li>DAC =统计一类包含的其他类的其他类的实例的数量，不包括继承关系带来的实例引用</li><li>具有ADT类型的属性数量取决于其他类的定义</li><li>越低越好</li></ol><h3 id="第三种度量ca和ce有效和">第三种度量:Ca和Ce(有效和)</h3><ol type="1"><li>Ce和Ca(有效和有效偶联)<ol type="1"><li>Ca:在此类之外依赖于这类内部的类的数量</li><li>Ce:这个类中依赖于这个类的外部的类的数量</li></ol></li><li>越低越好</li></ol><h3 id="第四种度量dit-继承树的深度">第四种度量:DIT 继承树的深度</h3><ol type="1"><li>继承树的深度</li><li>从节点到树的根的最大长度</li><li>随着DIT的增长，由于高度的继承性，很难预测类的行为</li><li>积极地，较大的DIT值意味着可以重用许多方法</li><li>理论上DIT是越大也好，但是同样也会带来很难实现LSP的问题，DIT&gt;3同样也需要审查继承机制的正确性</li></ol><h3 id="第五种度量-number-of-children-noc-子类的数量">第五种度量 Numberof children (NOC) 子类的数量</h3><ol type="1"><li>是一个类的直接子类的数量</li><li>随着NOC的增长，可复用性增加，抽象减弱了</li><li>随着NOC的增长，抽象可能变得稀疏</li><li>NOC的增加意味着测试量将增加</li><li>一般NOC超过三，就需要认真审查继承机制的正确性，检查是否满足LSP</li></ol><h3 id="衡量类凝聚力-lcom">衡量类凝聚力 LCOM</h3><blockquote><p>Lack of cohesion in methods (LCOM)</p></blockquote><p><img src="https://s2.loli.net/2022/05/16/hZmaMBC9XN32rpg.png"></p><ul><li>交集为空则在P中，交集不为空则在Q中</li></ul><ol type="1"><li>值越低越好</li><li>还定义了许多其他版本的LCOM</li><li>如果LCOM&gt;= 1，则应将类划分</li></ol><p><img src="https://s2.loli.net/2022/05/16/rF1K5dlnJS8IeEV.png"></p><ol start="5" type="1"><li>课本241、242页</li></ol><h2 id="summary-principles-from-modularization-模块化的原则">Summary:Principles from Modularization 模块化的原则</h2><ol type="1"><li>《Global Variables Consider Harmful》 全局变量被认为是有害的</li><li>《To be Explicit》让代码清晰一点</li><li>《Do not Repeat》避免重复</li><li>《Programming to Interface(Design byContract)》面向接口编程，按照契约设计</li><li>《The Law of Demeter》迪米特法则</li><li>《Interface Segregation Principle(ISP)》接口分离原则</li><li>《Liskov Substitution Principle (LSP)》里氏替换原则:Request No More,Promise No Less</li><li>《Favor Composition Over Inheritance》 选择组合而不是继承</li><li>《Single Responsibility Principle》单一职责原理</li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
          <category> 软件工程与计算2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
            <tag> 面向对象的模块化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件交付</title>
      <link href="/2022/05/16/%E8%BD%AF%E4%BB%B6%E4%BA%A4%E4%BB%98/"/>
      <url>/2022/05/16/%E8%BD%AF%E4%BB%B6%E4%BA%A4%E4%BB%98/</url>
      
        <content type="html"><![CDATA[<h2 id="软件交付">软件交付</h2><h1 id="什么是软件交付">什么是软件交付</h1><ol type="1"><li>软件交付是软件项目的结束阶段，标志着软件开发任务的完成</li><li>软件交付是软件开发与软件维护两个既连续又不同的软件产品生存状态的分水岭。</li><li>只有做好软件交付工作，才是真正地完成整个项目。</li></ol><h1 id="安装与部署">安装与部署</h1><ol type="1"><li>需求阶段：考虑环境约束等</li><li>体系结构设计阶段：进行产品部署的设计决策，包括网络拓扑、库文件、动态链接库、配置文件等<ol type="1"><li>32位环境还是64位环境等问题</li></ol></li><li>开发阶段：使用的支持软件也会影响到交付，可能要求客户安装特定支撑软件或者硬件</li></ol><h2 id="安装">安装</h2><ol type="1"><li>安装是软件交付的最常见形式，现在大多数产品都通过安装的形式交付，它要求开发团队创建一个安装包，用户可以通过的执行将软件产品部署到工作环境。</li><li>安装包需要进行仔细的设计，并使用工具(例如Advanced Installer 、SetupFactory等)帮助进行安装包的创建。一个好软件产品应该简单、健壮、可靠、完全。要创建很容易使用的安装包，让用户可以无需创建安装包的人员的帮助就能使用。</li></ol><h2 id="创建安装包的步骤">创建安装包的步骤</h2><h3 id="确定安装环境">确定安装环境</h3><ol type="1"><li>确定安装包需要<strong>支持的操作系统</strong>，这既需要考虑当前用户的工作环境，又需要考虑产品未来的市场规划；</li><li>确定软件产品的语言支撑环境，例如使用Java语言开发的软件产品就需要安装JDK；</li><li>确定软件产品需要的软件支持，例如数据库系统、网络系统等；</li><li>确定硬件等其他要求，例如有些软件产品可能会要求扫描仪、视频卡、通信设备等特殊硬件。</li><li>例如，对超市销售系统MSCS，它的安装环境为：Window XP、 WindowVista、Window7三种操作系统；Java运行环境JDK；数据库管理系统软件(如果使用了数据库的话)。</li></ol><h3 id="列举安装清单">列举安装清单</h3><ol type="1"><li>要根据软件产品的实现情况，结合所需的环境支撑，列举需要安装的文件、初始化数据、注册表等清单信息，要清楚<strong>标明它们在安装后将会出现的位置</strong>。</li><li>在考虑安装位置时要遵守一致性，标记名称的使用要意义清楚，让用户能便利地找出相应文件。</li><li>例如，对超市销售系统MSCS，它所有的可执行程序文件都是需要安装的文件，初始化数据有两处，一处是设置默认的管理员用户帐号，另一处是设置数据库管理系统连接数据。</li></ol><h3 id="设计和建立安装包">设计和建立安装包</h3><ol type="1"><li>要对安装包进行详细的设计，包括一个渐进的安装步骤，各步骤的人机交互方式等等。完成设计后就可以使用安装工具创建安装包。</li><li>例如，超市销售系统MSCS安装包可以按照下列步骤建立:<ol type="1"><li>检查操作系统环境</li><li>检查JDK，如果没有合适的JDK，则提醒用户安装JDK</li><li>检查数据库管理系统软件，如果合适的数据库管理系统软件，则提醒用户进行安装</li><li>设置数据库管理系统连接参数</li><li>连接数据库管理系统，创建MSCS的数据库</li><li>拷贝文件</li><li>设置初始化数据，包括数据库系统连接参数和MSCS的默认管理帐号</li><li>安装成功。</li></ol></li></ol><h3 id="测试安装包">测试安装包</h3><ol type="1"><li>安装包需要在目标环境中进行安装测试，以发现可能的问题。</li><li>需要注意的是：必须以用户的工作环境为<strong>目标环境</strong>进行测试，因为用户使用的机器环境与开发者的机器环境有很大的不同(包括程序环境、操作系统版本、支撑软件版本等等)，在开发者机器上可以正确执行的安装包未必能够在用户的机器上运行。</li></ol><h2 id="部署">部署</h2><ol type="1"><li>在软件产品比较复杂时，仅仅通过一个安装包无法完成软件交付任务，这时可以使用另一种常见的软件交付方式——部署。</li><li>部署通常是由开发人员直接操纵软件产品的目标环境，使得软件产品能够在目标环境中正常运行。</li><li>部署的过程中通常需要执行安装任务，但是还有很多比安装复杂得多的其他任务，例如：安装、设置或调整操作系统，尤其是权限管理参数；安装、设置和调整数据库系统，包括新建数据库和设置访问权限；安装和设置库文件、应用服务器等应用环境。</li></ol><h2 id="部署的步骤">部署的步骤</h2><h3 id="确定部署环境">确定部署环境</h3><ol type="1"><li>和安装一样，软件部署要首先要需要确定部署的目标环境，当然它比安装要求的更高一些。它需要对目标环境进行调查分析，搞清楚部署前的环境细节，然后才能与软件产品需要的环境细节进行比较，才能明确需要执行的部署任务。</li><li>具体来说，软件部署需要了解服务器与网络拓扑、安全控制与权限管理、软硬件系统的配置信息等。</li></ol><h3 id="确定部署任务">确定部署任务</h3><ol type="1"><li>将软件产品需要的目标环境与部署前的环境进行比较，分析二者之间的差距，并将其确立为部署的任务。</li><li>确定任务之后，还需要以渐进的方式安排任务之间的执行次序。例如，先安装和配置操作系统，然后安装和配置相应的软硬件系统，最后完成软件产品的安装与配置，等等。</li></ol><h3 id="完成部署准备">完成部署准备</h3><ol type="1"><li>有些部署工作可以完全依靠现场执行，但多数的部署任务需要进行一定的事前准备，尤其是要综合考虑部署工作可能出现的各种情况，制定完备的应对方案。</li></ol><h3 id="执行部署任务">执行部署任务</h3><ol type="1"><li>按照准备的计划，执行相应的部署任务。</li></ol><h1 id="培训与文档支持">培训与文档支持</h1><ol type="1"><li>帮助用户理解产品，并使其能够轻松地使用产品</li><li>不能让用户学会使用软件产品，那么就不算是完成了软件交付任务</li><li>帮助用户学会使用软件产品的两个关键任务：<ol type="1"><li>培训</li><li>文档支持</li></ol></li></ol><h2 id="培训">培训</h2><ol type="1"><li>培训主要是教会用户使用软件产品的功能来完成其工作和任务。依据任务的不同，要为不同的用户进行不同类型的培训。</li><li>例如，对超市销售系统MSCS<ol type="1"><li>培训收银员使用系统进行销售和退货</li><li>培训客户经理使用系统进行库存管理和会员管理</li><li>培训总经理使用系统制定销售策略和进行库存分析</li><li>培训系统管理员进行用户管理。</li></ol></li></ol><h3 id="培训的注意点">培训的注意点</h3><ol type="1"><li>尤其不能忽略的是对<strong>系统管理员</strong>进行培训。要培训系统管理员如何启动和运行新系统、如何配置系统、如何授权或拒绝对系统的访问、如何支持用户、如何处理异常等。</li><li>在培训中，只介绍能够帮助用户完成主要工作和任务的功能，不要把培训当作软件产品所有功能的展示会。对于一些很少会被使用并且<strong>不太重要</strong>的功能，即使培训也会很快被用户忘记，可以让用户使用<strong>文档支持</strong>来学会使用。</li><li>培训时，要关注用户的工作和任务，不必涉及系统的内部操作，不必知道系统的存储方式、访问方式和权限控制方式。</li></ol><h2 id="文档支持">文档支持</h2><ol type="1"><li>文档是软件交付的重要部分<ol type="1"><li>培训时作为参考材料</li><li>交付完成之后继续帮助用户使用系统</li></ol></li><li>用户文档</li><li>系统管理员文档</li><li>简单的系统只有用户文档，绝大多数系统都有用户文档和系统管理员文档</li></ol><h3 id="用户文档">用户文档</h3><ol type="1"><li>用户文档是指为用户编写参考指南或者操作教程，常见的如用户使用手册、联机帮助文档等，统称为用户文档。</li></ol><h3 id="用户文档的形式">用户文档的形式</h3><ol type="1"><li>用户文档可以是纸质的，也可以是电子的，可以只有一份文档，也可以是由多份文档组成的集合，具体情况要视用户的特点而定。</li><li>用户文档的写作要考虑用户群体的特点，最好是图文结合的方式，以方便普通用户的使用。用户文档写作应该使用逐层展开和系统化(例如层次编码、列表)的方式描述复杂内容。</li></ol><h3 id="用户文档的内容组织">用户文档的内容组织</h3><ol type="1"><li>文档内容的组织应当支持其使用模式，常见的是指导模式和参考模式两种。</li><li>指导模式根据用户的任务组织程序规程，相关的软件任务组织在相同的章节或主题。指导模式要先描述简单的、共性的任务，然后再以其为基础组织更加复杂的任务描述。</li><li>参考模式按照方便随机访问独立信息单元的方式组织内容。例如，按字母顺序排列软件的命令或错误消息列表。</li><li>如果文档需要同时包含两种模式，就需要将其清楚地区分成不同的章节或主题，或者在同一个章节或主题内区分为不同的格式。</li></ol><h3 id="用户文档的要素">用户文档的要素</h3><blockquote><p>表格描述参加课本339页 1. 标识信息 1.包括文档标题、文档产生的版本和日期、相关的软件 产品和版本 2.标识信息应该放在包装袋或者封面，用户可以不用翻阅文档就能看到 2. 引言 1.正文的第一部分，描述文档的预期读者、描述范围，以及对文档目的、功能和操作环境的概要描述3. 文档使用信息 1.文档使用信息描述了关于文档的使用信息，例如，解释各种图示的含义、介绍如何使用帮助等。4. 操作模式 1.操作模式是使用用户文档的模式，例如对操作流程的图示或者文字性描述，再例如解释操作的理论、原因、算法或者通用概念。5. 操作规程 1. 指导模式文档应该包括很多软件功能都会涉及的常见活动规程：1. 需要由用户执行的软件安装与卸载 2. 图形用户界面特性的使用指导 3.访问、登录或者关闭软件 4. 通过软件的导航，访问和退出相关功能 5.数据操作(输入、保存、读取、打印、更新和删除) 6.取消、中断和重启操作的方法 2.对于完成用户任务的操作流程，指导模式文档应该从基本信息、指导步骤和结束信息三个方面来描述3. 基本信息： 1. 简要概述操作规程的目的，定义或解释必要的概念 2.标明执行任务前需要完成的技术活动 3.列举用户完成任务所需要的资源情况，例如数据、文档、密码等 4.对于完成用户任务的操作流程，指导模式文档应该从基本信息、指导步骤和结束信息三个方面来描述5.指导步骤：使用祈使语句描述用户行为，并指出预期的结果。指导步骤要说明：1. 用户输入数据的域值范围、最大长度和格式 2. 相应的错误消息和恢复办法 3.其它可选的步骤和重复步骤 6.对于完成用户任务的操作流程，指导模式文档应该从基本信息、指导步骤和结束信息三个方面来描述7.结束信息：标明操作规程的最后步骤，让用户知道怎样判断整个操作规程的成功完成，告诉用户如何退出操作规程6. 软件命令信息 1.解释用户输入命令的格式和操作规程，包括必要参数、可选参数、缺省值等，要示例说明命令的使用，说明怎样判断命令是成功完成还是异常中止7. 错误信息与问题解决 1.文档要详细描述软件使用中的已知问题，让用户清楚如何自行解决问题或者怎样向技术支持人员报告准确的信息8. 导航特征 1. 包括章节、主题、页码、链接、图标等 2.提高导航特征和效率</p></blockquote><h3 id="系统管理员文档">系统管理员文档</h3><ol type="1"><li>与用户文档注重系统使用细节不同，系统管理员文档更注重系统维护方面的内容，例如系统性能调整、访问权限控制、常见故障解决等等。因此，系统管理员文档需要详细介绍软硬件的配置方式、网络连接方式、安全验证与访问授权方法、备份与容灾方法、部件替换方法等等。</li></ol><h1 id="项目评价">项目评价</h1><ol type="1"><li>开发者自我反省</li></ol><h2 id="为什么要进行项目评价">为什么要进行项目评价</h2><ol type="1"><li>设置"项目"是要保证项目中的各种事件与活动能够依照计划顺利进行，项目评价就是检查其事件与活动的实际执行情况。在理论上，项目评价可以发生在项目进行的任何时机，尤其是到达各个里程碑之后。但最重要的项目评价是在项目结束时进行的项目评价，这也是本章节所要描的项目评价。</li><li>虽然从单个项目看，项目已经结束，评价似乎用处不大。但是考虑到一个组织会有很多项目持续进行，那么评价一个已结束项目就可以"以史为鉴"，帮助更好地完成后续项目。而且因为项目已经完成，总结和评价就远比项目进行中更加准确。</li><li>项目评价工作也需要仔细组织，不是简单的开个总结会完事，否则就无法获得比较深入的信息。</li></ol><h2 id="项目评价的内容">项目评价的内容</h2><ol type="1"><li>一个已结束的项目具有各种事件和活动的信息，通过组织对项目的不同方面内容进行评价，就可以获得各种不同方面的经验，就可以搞清楚出现了哪些问题、为什么会出现、怎样解决、有哪些偏差、最终结果与质量、以及(最重要的是)在下个项目中有哪些需要提高。</li><li>常见的项目评价针对四个方面：<ol type="1"><li>项目管理：可以帮助建立对项目的更准确认知，例如常见的管理问题与偏差、时间与成本耗费分布等。</li><li>产品：可以帮助开发者建立对产品的更准确认知，提高产品的开发经验。</li><li>团队：可以帮助开发者更好地组织分工，也可以帮助团队建立更好的沟通与交流途径。</li><li>个人：可以帮助开发者更准确认知自己的生产力，学习常见问题及其处理方法，了解自己的长处和不足并持续提高。</li></ol></li></ol><h2 id="项目评价方法">项目评价方法</h2><ol type="1"><li>评审</li><li>度量数据分析</li></ol><h3 id="项目评审">项目评审</h3><ol type="1"><li>项目评审通过评审重要项目制品的方法来评价项目，这些重要制品包括项目计划、管理文档、会议记录、历史数据等。</li><li>成功的评审需要评审方法，而不是自由处理。检查列表是最为常用的评审方法。</li><li>checkList如下</li></ol><h3 id="有关项目管理的问题">有关项目管理的问题：</h3><ol type="1"><li>项目所使用的过程是什么？瀑布/迭代开发</li><li>实际的过程与原先确定的过程有什么不同？</li><li>进度表是如何随着时间的变化而改变的？</li><li>有多少个同步点和里程碑按时达到或错失？</li><li>过程的哪些部分运行得好？</li><li>过程的哪些部分本应该能运行得更好？</li><li>工具支持这个过程吗？</li><li>从整体上讲，这个过程运行得有效吗？</li><li>在今后，尤其要对哪些方面进行改进？</li><li>在每个阶段和每项任务上花费的时间是多少？</li></ol><h3 id="有关产品的问题">有关产品的问题：</h3><ol type="1"><li>在项目的生命周期中，产品是如何变化的？</li><li>有没有出现重要的产品返工的情况？如果有，是在什么时候？</li><li>工具支持产品的制造、维护和测量吗？</li><li>产品最后的规模有多大？产品的质量如何？</li></ol><h3 id="有关团队和个人的问题">有关团队和个人的问题：</h3><ol type="1"><li>团队(个人)工作中哪些个风险发生了，其影响又是怎样的？</li><li>在何时做出了哪项重要决定？</li><li>所遇到的主要问题是什么？</li><li>这个决定又是如何影响这个项目的？</li><li>对这些问题的解决方法产生了什么样的效果？</li><li>开发团队成员是如何看待自己的职责的？</li></ol><h2 id="度量数据分析">度量数据分析</h2><ol type="1"><li>度量数据可以提供丰富的信息，通过分析这些信息，开发团队可以获取正确和深入的结论。</li><li>例如，通过分析项目活动的任务量，就可以了解每个人的生产力、项目的工作量分布、特殊任务的工作量耗费等。</li></ol><h3 id="产品信息定量的度量">产品信息定量的度量</h3><ol type="1"><li>一个项目常见的产品信息度量应该包括：<ol type="1"><li>(随着时间而变化的)产品的增长情况和变化历史。</li><li>产品在每个里程碑上的测量。</li><li>产品复杂度和内容的测量。</li><li>过程和工具对产品的影响。</li></ol></li></ol><h3 id="定性文件">定性文件</h3><ol type="1"><li>在进行度量数据分析时可能会遇到数据贫乏——这意味着没有足够的定量数据来支持项目评价，这时可以用问卷调查表和面谈来补充数据信息。也可以通过检查定性文件来建立数据信息，这些定性文件可能包括：<ol type="1"><li>对团队会议和子团队会议所做的记录。</li><li>项目电子邮件的存档(来获得问题确定和决策的日期)。</li><li>任务列表、项目决策和行动条目中的信息。</li></ol></li></ol><h2 id="评价的注意事项">评价的注意事项</h2><h3 id="项目的评价需要仔细的计划">项目的评价需要仔细的计划</h3><ol type="1"><li>作为项目管理活动的一部分，项目评价也需要进行计划，计划的内容包括：<ol type="1"><li>执行项目评价的时间，要在项目结束后，并且不能时间太久导致项目活动细节遗忘</li><li>确定项目评价的关键主题</li><li>确定参与项目评价的人员</li><li>确定需要收集的数据，并将数据收集任务分配给相关人员。</li></ol></li></ol><h3 id="评价要客观">评价要客观</h3><ol type="1"><li>对项目的评价要客观，要保持对项目和过程的关注，不要偏离目标指责和突出个人。如果不能做到客观，列举没有进行分析的测量数据或信息，而仅仅为了表明整个项目是一个巨大成功的话，那就无法得到有益的经验，就是浪费时间。评价不是向高级管理层夸夸其谈的文档，而是团队每个成员和组织通过一个又一个项目来不断获得提高的途径。</li></ol><h1 id="总结">总结</h1><ol type="1"><li>不要忽视软件交付阶段的任务<ol type="1"><li>通过安装与部署将软件产品移交给用户</li><li>通过培训与文档支持保障用户能够有效掌握和使用软件</li></ol></li><li>一个项目的成功或失败都值得总结，以改进将来的项目，即要在项目结束后及时进行项目评价</li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
          <category> 软件工程与计算2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
            <tag> 软件交付 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件测试</title>
      <link href="/2022/05/16/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
      <url>/2022/05/16/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="软件测试">软件测试</h2><h1 id="考试题">考试题</h1><ol type="1"><li>给出功能需求，设计功能测试用例</li><li>给出设计图，按要求写集成测试用例，Stub和Driver</li><li>给出方法的描述，按要求写单元测试用例，Mock Object</li><li>Junit基本用法</li></ol><h1 id="bug起源">Bug起源</h1><h2 id="第一个bug">第一个Bug</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt19/1.png"></p><h2 id="千年虫病毒">千年虫病毒</h2><ol type="1"><li>在七十年代，程序员利用宝贵的内存和磁盘空间通过两位来存储年份</li><li>他们从来没有想到程序可以运行到2000年</li></ol><h2 id="辐射机问题">辐射机问题</h2><ol type="1"><li>Therac-25放射治疗机中的软件有缺陷，导致数名癌症患者接受致命的过量放射。四名患者死亡</li><li>独立科学家进行的一项调查发现，即使在加拿大原子能有限公司(AECL)认为已修复特定错误之后，仍发生了事故。</li><li>他们在报告中写道："这里的基本错误涉及不良的软件工程实践，以及建立依赖该软件进行安全操作的机器。"</li></ol><h2 id="爱国者导弹防御1991">爱国者导弹防御1991</h2><ol type="1"><li>爱国者导弹防御系统未能防御多种导弹</li><li>系统时钟中累积了微小的计时误差，因此14小时后，跟踪系统不再准确</li><li>在对KSA达兰的攻击中，该系统已运行100多个小时</li><li>该系统是可移动的，因此开发人员没想到它会在一个地方停留14小时</li></ol><h2 id="奔腾处理器的浮点数bug">奔腾处理器的浮点数bug</h2><ol type="1"><li>(4195835/3145727) * 3145727 - 4195835 ≠ 0</li><li>测试工程师企图淡化Bug，管理人员认为这并不要紧</li><li>一位用户报告说，1994年10月30日，英特尔试图淡化该错误。如果您可以证明自己受到影响，可以更换芯片</li><li>最终，他们道歉。 更换所有芯片，耗资4.5亿美元</li><li>有趣的是，1.13 MHz Pentium III导致软件冻结</li></ol><h2 id="迪士尼的狮子王动画故事书-1994">迪士尼的《狮子王动画故事书》1994</h2><ol type="1"><li>迪士尼发行了第一张针对儿童的多媒体CD-ROM</li><li>一个大型广告系列，称其为"购买游戏"</li><li>圣诞节过后，许多生气的父母正与迪斯尼通电话，背景中有哭泣的孩子</li><li>问题是游戏只能在少数平台上运行，而包装盒上对此一无所知，因为迪斯尼尚未意识到问题所在</li><li>兼容性的问题，只能在部分CD中进行播放</li></ol><h1 id="什么是对的软件">什么是对的软件？</h1><h2 id="你是否正确的构造了软件">你是否正确的构造了软件</h2><ol type="1"><li>软件正确性<ol type="1"><li>在且仅在以下情况下，才根据规范S考虑程序P：对于每个有效输入，P的输出均符合规范S</li></ol></li><li>验证：常常我们会将软件与终端用户或者其他利益相关者的需求进行比较。</li></ol><h2 id="verification-and-validation-验证和确认-重要">Verification andValidation 验证和确认 重要</h2><ol type="1"><li>Verification:验证，检查开发者是否正确地使用技术建立系统，确保系统能够在于其的环境中按照技术要求正确地运行。</li><li>Validation:确认，检查开发者是否家里了正确的系统，确保最终产品符合规格。</li><li>V＆V差异无关紧要</li><li>V＆V通常是指试图确保软件按要求运行的任何活动。</li><li>Ex见课本320页,重要，会考V&amp;V</li></ol><h3 id="如果软件是错误的">如果软件是错误的</h3><ol type="1"><li>定义<ol type="1"><li>缺陷:系统代码中存在的不正确的地方，计算时存在除0可能</li><li>错误:如果系统执行到缺陷代码，就可能使得执行结果不符合预期且无法预测，表现出来的不稳定的状态，比如计算时存在除0可能的代码，一旦除0则会发生错误</li><li>失败，有Failure一定有fault和Error，而倒过来是未必成立的。失败是指错误的发生会使得软件的功能失效，比如，系统某个功能输出不正确、异常终止、不符合时间或者空间的限制等。</li></ol></li><li>关系<ol type="1"><li>缺陷可能在被活动激发前很长时间不被检测到</li><li>如果错误传播到输出，则最终会导致失败。</li></ol></li><li>缺陷、错误和失败：该链可以递归地迭代：依次由其他交互系统的故障引起故障。</li></ol><h1 id="common-vv-activities-常见的vv活动">Common V&amp;V Activities常见的V＆V活动</h1><ol type="1"><li>静态分析技术<ol type="1"><li>仅基于(手动或自动)检查软件模型和代码的项目文档以及有关需求和设计的其他相关信息</li><li>通常会产生有效的结果，但精度可能较弱</li><li>容易产生误报，因为多态的存在导致很多只能在运行的时候才报错。</li></ol></li><li>动态测试技术<ol type="1"><li>运行软件以暴露可能的故障</li><li>还观察了程序的行为和性能属性</li><li>产生更精确的结果，但仅适用于经过检查的执行</li><li>动态容易漏报，没有运行到一定不会报告</li></ol></li></ol><h2 id="静态分析技术">静态分析技术</h2><ol type="1"><li>可以在需求阶段应用； 在设计阶段； 在实施阶段</li><li>传统静态技术–大量手动操作，容易出错，耗时<ol type="1"><li>软件检查–根据已编译的常见和历史缺陷清单，对生成的文档(可交付成果)进行逐步分析</li><li>软件评审–将工作产品的不同方面呈现给项目人员(经理，用户，客户等)和其他感兴趣的涉众以征求意见或批准的过程</li><li>阅读代码–对生成的代码进行桌面分析，以发现不违反样式或语法的键入错误</li><li>算法分析和跟踪–可以得出所用算法的复杂性以及最坏情况，平均情况和概率分析评估的过程</li></ol></li><li>依靠形式化方法的静态分析技术</li><li>27min漏了</li></ol><h2 id="动态分析技术">动态分析技术</h2><ol type="1"><li>测试–基于对有价输入的代码执行(必要时必须包括表征系统状态的参数和环境条件的定义)<ol type="1"><li>检查指定输入和指定输出</li></ol></li><li>性能分析–程序配置文件记录了一组受控执行过程中某些感兴趣的实体出现的次数<ol type="1"><li>频谱执行情况:一个向量，从第一行到最后一行，形成一个01向量</li><li>分支覆盖法</li></ol></li></ol><h2 id="软件开发中的验证与确认活动">软件开发中的验证与确认活动</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt19/2.png"></p><h1 id="软件测试的目的">软件测试的目的</h1><ol type="1"><li>目的一:向开发者和用户展示软件满足了需求，表明软件产品是一个合格的产品。<ol type="1"><li>有效性测试</li></ol></li><li>目的二:找出软件中的缺陷和不足<ol type="1"><li>缺陷测试:只有发现了缺陷的测试才是成功的测试</li></ol></li><li>总而言之，软件测试是为评价与改进产品质量、标识产品缺陷和问题而进行的活动。</li></ol><h2 id="测试用例">测试用例</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt19/3.png"></p><ol type="1"><li>差分测试</li></ol><ul><li>开发者：理解系统含义，但是只是大体上，通过流程进行了测试</li><li>独立测试人员：必须学习系统相关，但是会去尝试破坏系统，并且是通过质量来驱动测试</li></ul><h2 id="桩与驱动">桩与驱动</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt19/4.png"></p><ol type="1"><li>桩程序是被测试部件的交互环境，他扮演被测试部件需要调用的其他系统部件。桩程序对其他系统部件的扮演仅限于规格相同，内部代码要简单的多，通常是直接返回固定数据或者按照固定规则返回数据。</li><li>驱动程序负责创建被测试部件的执行环境，并驱动和监控被测试部件执行测试用例的过程，判定测试用例的执行结果。</li></ol><h2 id="测试空间">测试空间</h2><ol type="1"><li>黑盒测试、白盒测试、灰盒测试</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt19/5.png"></p><h1 id="测试层次">测试层次</h1><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt19/6.png"></p><ul><li>开发者主要是进行单元测试，可以进行一定程度上的集成测试和系统测试</li><li>重点:<ul><li>α测试:在软件发布前，让小规模、有代表性的潜在用户试用，可以在开发机构中进行。</li><li>β测试:在用户处进行</li></ul></li></ul><h2 id="单元测试">单元测试</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt19/7.png"></p><ol type="1"><li>在过程化编程中，一个单元就是一个函数与过程。</li><li>在面向对象编程中，一个单元就是类的一个方法。</li><li>发现技术缺陷和代码缺陷</li></ol><h2 id="集成测试">集成测试</h2><ol type="1"><li>集成测试一般在单元测试和系统测试之间</li></ol><h3 id="自顶向下的集成测试">自顶向下的集成测试</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt19/8.png"></p><ol type="1"><li>一定要一步一步集成</li></ol><h3 id="自底向上的集成测试">自底向上的集成测试</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt19/9.png"></p><h2 id="系统测试">系统测试</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt19/10.png"></p><h1 id="测试技术">测试技术</h1><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt19/11.png"></p><ol type="1"><li>测试的目的是发现尽可能多的缺陷，并不绝对要求发现所有缺陷。</li></ol><h2 id="测试用例的选择">测试用例的选择</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt19/12.png"></p><ol type="1"><li>课本P326页图 19-7 :工程追求足够好，而不是最好。</li></ol><h2 id="随机测试">随机测试</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt19/13.png"></p><ol type="1"><li>比如int的越界问题:两类测试用例，不越界和越界</li></ol><h2 id="黑盒测试-重要">黑盒测试 重要</h2><ol type="1"><li>黑盒测试是将测试对象作为一个黑盒子，完全基于输入和输出数据来判断测试对象的正确性。</li></ol><h3 id="黑盒测试方法-等价类划分">黑盒测试方法-等价类划分</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt19/14.png"></p><ul><li>把所有可能的输入数据，即程序的输入域划分为若干部分(子集)，从每个子集中选取少量具有代表性的数据作为测试用例。</li><li>例子</li></ul><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt19/15.png"></p><h3 id="黑盒测试方法-边界值分析">黑盒测试方法-边界值分析</h3><ol type="1"><li>边界值分析是等价类划分方法的补充，实践证明，错误最容易发生在各等价类的边界，而不是等价类的内部。</li><li>对定价类划分的补充，错误容易发生在各个等价类的边界上，而不是等价类的内部，因此针对边界情况设计测试用例，可以发现更多的缺陷。</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt19/16.png"></p><h3 id="黑盒测试方法-决策表">黑盒测试方法-决策表</h3><ul><li>决策表是为复杂逻辑判断设计测试用例的技术。决策表示由条件声明、行动声明、规则选项和行动选项等四个象限组成的表格。</li></ul><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt19/17.png"></p><h3 id="黑盒测试方法-状态转换">黑盒测试方法-状态转换</h3><ul><li>状态转换是针对复杂测试对象的测试技术。该类复杂测试对象对输入数据的反映是多样的，还需要依赖自身的状态才能决定。</li><li>状态转换包含有效转换和无效转换，只有在复杂情况和可靠性要求较高的情况下才会为无效转换设计测试用例。</li></ul><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt19/18.png"></p><ul><li>例子</li></ul><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt19/25.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt19/26.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt19/27.png"></p><h2 id="白盒测试-重要">白盒测试 重要</h2><ol type="1"><li>白盒测试是将测试对象看做透明的，不关心测试对象的规格，而是按照测试对象内部的程序结构来设计测试用例进行测试工作。</li></ol><h3 id="白盒测试方法-语句覆盖">白盒测试方法-语句覆盖</h3><ol type="1"><li>语句覆盖设计测试用例的标注是保证被测试的对象的每一行代码都至少执行了一次。</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt19/19.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt19/20.png"></p><ul><li>所有的路径都覆盖一遍，路径覆盖</li></ul><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt19/21.png"></p><h3 id="白盒测试方法-条件覆盖">白盒测试方法-条件覆盖</h3><ol type="1"><li>条件覆盖设计测试用例的标准是确保程序中每个判断的每个结果都至少满足一次。</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt19/22.png"></p><h3 id="白盒测试方法-路径覆盖">白盒测试方法-路径覆盖</h3><ol type="1"><li>路径覆盖测试用例的标准是确保程序中每一条独立执行的路径都至少执行一次。</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt19/23.png"></p><h2 id="特定测试技术">特定测试技术</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt19/24.png"></p><h2 id="面向对象的测试技术">面向对象的测试技术</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt19/28.png"></p><h1 id="测试活动">测试活动</h1><ol type="1"><li>测试计划:在开始具体的软件测试活动之前，必须首先进行测试计划，以明确测试的工作范围、资源与成本、基本策略、进度安排等。</li><li>测试设计:测试的成功取决于有效设计的测试用例</li><li>测试执行:执行测试前需要选择好测试工具</li><li>测试评价:在测试完成后，必须评价测试结果</li><li>以上详见课本332页</li></ol><h2 id="测试用例日志">测试用例日志</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt19/29.png"></p><h2 id="缺陷报告">缺陷报告</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt19/30.png"></p><h1 id="测试度量">测试度量</h1><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt19/31.png"></p><ul><li>需求覆盖率=被测试的需求数量/需求总数</li><li>模块覆盖率=被测试的模块数量/模块总数</li><li>代码覆盖率=被测试的代码行/代码行数</li></ul><h2 id="缺陷度量">缺陷度量</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt19/32.png"></p><h2 id="覆盖率">覆盖率</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt19/33.png"></p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
          <category> 软件工程与计算2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
            <tag> 软件测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cpp特性</title>
      <link href="/2022/05/16/Cpp%E7%89%B9%E6%80%A7/"/>
      <url>/2022/05/16/Cpp%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="stl-all_of-any_of-none_of">(STL) all_of 、 any_of、 none_of</h1><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="9.955ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 4400 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(529,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(827,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(1304,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1789,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2240,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2585,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(2946,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(3522,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span> 头文件中定义了 3种算法，用来检查在算法应用到序列中的元素上时，什么时候使谓词返回true。这些算法的前两个参数是定义谓词应用范围的输入迭代器；第三个参数指定了谓词。检查元素是否能让谓词返回true 似乎很简单，但它却是十分有用的。</p><ul><li>all_of() 算法会返回 true，前提是序列中的所有元素都可以使谓词返回true。</li><li>any_of() 算法会返回 true，前提是序列中的任意一个元素都可以使谓词返回true。</li><li>none_of() 算法会返回 true，前提是序列中没有元素可以使谓词返回true</li></ul><blockquote><p>合理使用会大幅减少代码的整体耗时和空间</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++特性 </tag>
            
            <tag> C++11 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区间合并</title>
      <link href="/2022/05/15/%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/"/>
      <url>/2022/05/15/%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="区间合并">区间合并</h1><h2 id="统计区间中的整数数目"><a href="https://leetcode.cn/problems/count-integers-in-intervals/">6066.统计区间中的整数数目</a></h2><p>板子题</p><p>给你区间的 空 集，请你设计并实现满足要求的数据结构：</p><p>新增：添加一个区间到这个区间集合中。 统计：计算出现在 至少一个区间中的整数个数。 实现 <code>CountIntervals</code>类：</p><ul><li>CountIntervals () 使用区间的空集初始化对象</li><li>void add(int left, int right) 添加区间 [left, right]到区间集合之中。</li><li>int count() 返回出现在 至少一个 区间中的整数个数。 注意：区间 [left,right] 表示满足 left &lt;= x &lt;= right 的所有整数 x 。</li></ul><p><strong>提示</strong></p><blockquote><p><code>1 &lt;= left &lt;= right &lt;= 109</code></p><p>最多调用 <code>add</code> 和 <code>count</code> 方法<strong>总计</strong> <code>105</code> 次</p><p>调用 <code>count</code> 方法至少一次</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CountIntervals</span> {</span><br><span class="line">    <span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    set&lt;pii&gt; st;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">CountIntervals</span>() {}</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> </span>{</span><br><span class="line">        <span class="comment">//注意pii存放的是[right,left]</span></span><br><span class="line">        <span class="type">int</span> L = left, R = right;</span><br><span class="line">        <span class="keyword">auto</span> it = st.<span class="built_in">lower_bound</span>(<span class="built_in">pii</span>(left - <span class="number">1</span>, <span class="number">-2e9</span>));</span><br><span class="line">        <span class="keyword">while</span> (it != st.<span class="built_in">end</span>()) {</span><br><span class="line">            <span class="keyword">if</span> (it-&gt;second &gt; right + <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">            L = <span class="built_in">min</span>(L, it-&gt;second);</span><br><span class="line">            R = <span class="built_in">max</span>(R, it-&gt;first);</span><br><span class="line">            ans -= it-&gt;first - it-&gt;second + <span class="number">1</span>;</span><br><span class="line">            st.<span class="built_in">erase</span>(it++);</span><br><span class="line">        }</span><br><span class="line">        ans += R - L + <span class="number">1</span>;</span><br><span class="line">        st.<span class="built_in">insert</span>(<span class="built_in">pii</span>(R, L));</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 常用算法 </category>
          
          <category> 板子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> 区间合并 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>状态压缩DP</title>
      <link href="/2022/05/14/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9DP/"/>
      <url>/2022/05/14/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9DP/</url>
      
        <content type="html"><![CDATA[<h1 id="状态压缩dp">状态压缩DP</h1><h2 id="概述">概述</h2><p>状压dp是一类比较难理解的dp</p><p>在这之前，我们应该清楚所有的dp是<strong>解决多阶段决策最优化问题</strong>的一种思想方法；</p><p>动态规划多阶段一个重要的特性就是<strong>无后效性</strong>。无后效性就是值对于某个给定的阶段状态，它以前各阶段的状态无<strong>法直接影响它未来的发展</strong>，而只能通过当前的这个状态。换句话说影响当前阶段状态只可能是前一阶段的状态；</p><p>那么可以看出如何定义状态是至关重要的，因为状态决定了阶段的划分，阶段的划分保证了无后效性。</p><p><strong>有时候为了达到最优子结构和无后效性的效果，我们必须要定义好状态</strong>。但是有时候状态维度特别多，但是每个状态的</p><p>决策又很少，这样我们开多维数组很可能会浪费，并且可能会爆空间。</p><p>这时候我们考虑用状态压缩来做，比如每个状态的决策只有两个，但是状态的维度很多。下面我们用01背包来举例,而且这一个维度能表示所有物品放与不放的情况；这个过程就叫做状态压缩</p><h2 id="二进制表示状态"><strong>二进制表示状态</strong></h2><p>二进制的很多应用离不开<strong>集合</strong>这个概念，我们都知道在计算机当中，所有数据都是以二进制的形式存储的。一般一个int整形是4个字节，也就是32位bit，我们通过这32位bit上0和1的组合可以表示多大21亿个不同的数。如果我们把这32位bit看成是一个集合，那么<strong>每一个数都应该对应集合的一种状态</strong>，并且每个数的状态都是不同的.</p><p>也就是说一个整数可以转化成二进制数，它可以代表某个集合的一个状态，这两者一一对应。这一点非常重要，是后面一切推导的基础</p><h2 id="状态转移">状态转移</h2><p>整数的二进制表示可以代表一个二元集合的状态，既然是状态就可以转移。在此基础上，我们可以得出另一个非常重要的结论——<strong>我们可以用整数的加减表示状态之间的转移</strong></p><p>这也就是状态压缩的精髓，所谓的压缩，其实就是将一个集合压缩成了一个整数的意思，因为整数可以作为数组的下标，这样操作会方便我们的编码。</p><h2 id="旅行商问题">旅行商问题</h2><p><u>有一个商人想要<strong>旅行各地</strong>并进行贸易。各地之间有若干条<strong>单向的通道</strong>相连，商人从一个地方出发，想要用最短的路程把所有地区环游一遍，请问环游需要的最短路程是多少？在这题当中，我们假设商人从0位置出发，最后依然回到位置0</u></p><p><strong>极端情况下也就是所有点之间都有连线</strong>的时候，对于每一个点来说，它可以选择的下一个位置一共有n-1种。那么一共可以选择的路线总共有n!种，这是一个非常大的值，显然是我们不能接受的。这也是为什么我们说旅行商问题是一个NP-Hard问题</p><h2 id="np问题"><strong>NP问题</strong></h2><p>P问题可以认为是已经解决的问题，这个解决的定义是可以做<strong>多项式的时间复杂度内</strong>解决。所谓的多项式，也就是<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.865ex" height="2.497ex" role="img" focusable="false" viewBox="0 -853.7 2592.4 1103.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(633,363) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mo" transform="translate(2203.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>，这里的k是一个常数。与多项式相反的函数有很多，比如指数函数、阶乘等等</p><p>NP问题并不是P问题的反义，这里的N不能理解成No，就好像noSQL不是非SQL的意思一样。NP问题指的是可以<strong>在多项式内验证解的问题</strong></p><p>比如给定一个排序的序列让我们判断它是不是有序的，这很简单，我们只需要遍历一下就好了。再比如大整数的因式分解，我们来做因式分解会很难，但是让我们判断一个因式分解的解法是不是正确则要简单得多，我们直接把它们乘起来和原式比较就可以了</p><p>显然<strong>所有P问题都是NP问题</strong>，既然我们可以多项式内找到解，那么必然我们也可以在多项式内验证解是否正确。但是反过来是否成立呢，是否多项式时间内可以验证解的问题，也可以通过某种算法可以在多项式时间内被解开呢？<strong>究竟是我们暂时还没有想到算法，还是解法一开始就不存在呢？</strong></p><p>上面的这个问题就是著名的NP=P是否成立的问题，这个问题目前仍然是一个谜，有些人相信成立，有些人不相信，这也被认为是二十一世纪的最大难题之一。</p><p>为了证明这个问题，科学家们又想出了一个办法，就是给问题做规约。举个例子，比如解方程，我们解一元一次方程非常简单，而解二元一次方程则要困难一些。如果我们想出了解二元一次方程的办法，那么必然也可以用来解一元一次方程，因为我们只需要令另一个未知数等于0就是一元一次方程了。</p><p>同理，我们也可以把NP问题做转化，将它的难度增大，<strong>增大到极限成为一个终极问题</strong>。由于这个终极问题是所有NP问题转化得到的，只要我们想出算法来解决了终极问题，那么，所有的NP问题全部都迎刃而解。就比如如果我们想出了解N元方程的算法，那么这一类解方程的问题就都搞定了。这种转化之后得到的问题称为<strong>NP完全问题，也叫做NPC问题</strong></p><p>最后，还有一个NP-Hard问题，NP-Hard问题是说所有NP问题可以经过转化得到它，但是<strong>它本身并不是NP问题</strong>，也就是说我们无法在多项式时间内判断它的解是否正确。</p><p>比如刚才提到的旅行商问题就是一个NP-Hard问题，因为即使我们给定了一个解，我们也<strong>没有办法快速判断给定的解是否正确</strong>，必须要遍历完所有的情况才可以。我们验证的复杂度就已经超出了多项式的范畴，所以它不属于NP问题，比NP问题更加困难，所以是一个NP-Hard问题</p><h2 id="状态压缩解法"><strong>状态压缩解法</strong></h2><p>既然我们要用动态规划的思路来解决这个问题，就<strong>不能脱离状态和决策</strong>。前文说了我们利用二进制可以用一个整数来表示一个集合的状态，我们很容易会把这个状态当成是动态规划当中的状态，但其实这是不对的。</p><p>单纯集合之间的转移没有限制条件，比如之前的例子当中我们已经拿了1号球和2号球，后面只要是剩下的球都可以拿，但是旅行商问题不一样，假设我们去过了0和1两个地方，我们当前在位置1，我们是无法用2和5两地之间的连线来更新这个状态的，因为我们当前只能从1号位置出发。也就是说我们<strong>能采取的决策是有限制的</strong>。</p><p>所以我们不能只单纯地拿集合的状态来当做状态，为了保证地点之间的移动顺序正确，我们还需要加上一维，也就是当前所处的位置。所以<strong>真正的状态是我们之前遍历过的位置的状态，加上当前所处的地点，这两者的结合</strong></p><h2 id="example">Example</h2><h3 id="贴纸拼词"><a href="https://leetcode.cn/problems/stickers-to-spell-word/">691.贴纸拼词</a></h3><p>我们有 n 种不同的贴纸。每个贴纸上都有一个小写的英文单词。</p><p>您想要拼写出给定的字符串 target，方法是从收集的贴纸中切割单个字母并重新排列它们。如果你愿意，你可以多次使用每个贴纸，每个贴纸的数量是无限的。</p><p>返回你需要拼出 target 的最小贴纸数量。如果任务不可能，则返回 -1。</p><p><strong>注意</strong>：在所有的测试用例中，所有的单词都是从 1000个最常见的美国英语单词中随机选择的，并且 target被选择为两个随机单词的连接。</p><p>使用一个int 类型的数<code>state</code>记录当前的target的凑成情况，如果t[i]已经凑成，state的低i位上1</p><p>初始状态<code>state=0</code>，最终如果凑成，<code>state = (1 &lt;&lt; n) -1</code></p><p>由于每个<code>stickers</code>可以被重复使用，因此对一个特定的<code>state</code>来说，其转换为最终的state 的最小步数固定，我们可以使用记忆化搜索来减少重复搜索</p><p>单步搜索中，我们枚举每个<code>stickers[i]</code>来更新<code>state</code>，假设使用某个<code>stickers[i]</code>得到的新状态为<code>new_state</code>，则所有的<code>dfs(new_state)+1</code>的最小值是<code>f[state]</code></p><h2 id="代码">代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minStickers</span><span class="params">(vector&lt;string&gt;&amp; stickers, string target)</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(<span class="number">1</span>&lt;&lt;<span class="number">15</span>,INT_MAX)</span></span>;</span><br><span class="line">        <span class="type">int</span> n = stickers.<span class="built_in">size</span>(); <span class="type">int</span> m = target.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">cnt</span>(n,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">26</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">char</span> c : stickers[i])</span><br><span class="line">                cnt[i][c-<span class="string">'a'</span>]++;</span><br><span class="line"></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;<span class="comment">//dp[i] 即添加第i个字符后 需要的字帖数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;(<span class="number">1</span>&lt;&lt;m);i++){</span><br><span class="line">            <span class="keyword">if</span>(dp[i] == INT_MAX) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">//无法凑出</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;n;k++){</span><br><span class="line">                <span class="type">int</span> nstate = i;<span class="comment">//记录状态</span></span><br><span class="line">                vector&lt;<span class="type">int</span>&gt; left = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(cnt[k]);<span class="comment">//拷贝cnt</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++){</span><br><span class="line">                    <span class="keyword">if</span>(nstate &amp; (<span class="number">1</span> &lt;&lt; j)) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="comment">//如果对应位置的字符已经凑齐</span></span><br><span class="line">                    <span class="keyword">if</span>(left[target[j] - <span class="string">'a'</span>] &gt; <span class="number">0</span>){</span><br><span class="line">                        nstate += (<span class="number">1</span>&lt;&lt;j);<span class="comment">//对应位置上1</span></span><br><span class="line">                        left[target[j]-<span class="string">'a'</span>]--;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                dp[nstate] = <span class="built_in">min</span>(dp[nstate],dp[i]+<span class="number">1</span>);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dp[(<span class="number">1</span>&lt;&lt;m)<span class="number">-1</span>] == INT_MAX ? <span class="number">-1</span>: dp[(<span class="number">1</span>&lt;&lt;m)<span class="number">-1</span>];</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><ul><li>但是 时间空间消耗不尽如人意</li></ul><h2 id="优化">优化</h2><p>让我们思考一下问题出在哪里。</p><p>考虑有hello和world，目标状态是helloworld。我们从0000000000开始时，既考虑了使用hello，也考虑了使用world。这样就更新出了1111100000和0000011111两个状态。我们会发现，它们其实是殊途同归的。第一次选hello，第二次就要选world；第一次选world，第二次就要选hello。由于我们只需要计算使用贴纸的数量，先后顺序其实并不重要，这两个状态其实是重复的。</p><p>如何消除这一重复？我们可以增加一重限制。每次从当前状态开始更新时，我们只选择包含了当前状态从左边开始第一个没有包含的字母的那些贴纸。比如说在上面的例子中，在0000000000状态下，我们将只会选择hello，不会选择world（没有包含h）。这样就去除了顺序导致的重复状态。</p><p>为了实现这一优化，我们预处理得到了can数组，记录包含每一个字母的贴纸序号</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minStickers</span><span class="params">(vector&lt;string&gt;&amp; stickers, string target)</span> </span>{</span><br><span class="line">        <span class="comment">//dp[i]记录对应的状态的 minstickers</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(<span class="number">1</span> &lt;&lt; <span class="number">15</span>, INT_MAX)</span></span>;</span><br><span class="line">        <span class="type">int</span> n = stickers.<span class="built_in">size</span>(), m = target.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">cnt</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">26</span>));</span><br><span class="line">        <span class="comment">//can 记录stickers存在的所有字母</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">can</span>(<span class="number">26</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> c : stickers[i]) {</span><br><span class="line">                <span class="type">int</span> d = c - <span class="string">'a'</span>;</span><br><span class="line">                cnt[i][d]++;</span><br><span class="line">                <span class="keyword">if</span> (can[d].<span class="built_in">empty</span>() || can[d].<span class="built_in">back</span>() != i)</span><br><span class="line">                    can[d].<span class="built_in">emplace_back</span>(i);                </span><br><span class="line">            }</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; m) - <span class="number">1</span>; ++i) {</span><br><span class="line">            <span class="comment">//总共 1&lt;&lt;m 种状态</span></span><br><span class="line">            <span class="keyword">if</span> (dp[i] == INT_MAX) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> d;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; ++j) {</span><br><span class="line">                <span class="comment">//搜索target</span></span><br><span class="line">                <span class="keyword">if</span> (!(i &amp; (<span class="number">1</span> &lt;&lt; j))) {</span><br><span class="line">                    d = j;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            d = target[d] - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k : can[d]) {</span><br><span class="line">                <span class="type">int</span> nxt = i;</span><br><span class="line">                <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">left</span><span class="params">(cnt[k])</span></span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; ++j) {</span><br><span class="line">                    <span class="keyword">if</span> (nxt &amp; (<span class="number">1</span> &lt;&lt; j))</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span> (left[target[j] - <span class="string">'a'</span>] &gt; <span class="number">0</span>) {</span><br><span class="line">                        nxt += (<span class="number">1</span> &lt;&lt; j);</span><br><span class="line">                        left[target[j] - <span class="string">'a'</span>]--;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                dp[nxt] = <span class="built_in">min</span>(dp[nxt], dp[i] + <span class="number">1</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dp[(<span class="number">1</span> &lt;&lt; m) - <span class="number">1</span>] == INT_MAX ? <span class="number">-1</span> : dp[(<span class="number">1</span> &lt;&lt; m) - <span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure><h1 id="参考">参考</h1><p><a href="https://leetcode.cn/problems/stickers-to-spell-word/solution/zhuang-tai-ya-suo-dpji-you-hua-by-lucifer1004/">状态压缩DP及优化- 贴纸拼词 - 力扣（LeetCode）</a></p><p><a href="https://zhuanlan.zhihu.com/p/131585177">动态规划——状态压缩DP- 知乎 (zhihu.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 常用算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> 状态压缩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据管理基础 NoSQL</title>
      <link href="/2022/05/13/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80-NoSQL/"/>
      <url>/2022/05/13/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80-NoSQL/</url>
      
        <content type="html"><![CDATA[<h1 id="ch-62-关系型数据库的价值">ch 62 关系型数据库的价值</h1><h2 id="获取持久化数据">获取持久化数据</h2><ul><li>持久<strong>存储大量数据</strong></li><li>在大多数的计算架构中，有两个存储区域:<ul><li>速度快但是数据易丢失的“<strong>主存储器</strong>”(main memory)<ul><li>空间有限</li><li>易挥发</li></ul></li><li>存储量大但速度较慢的“<strong>后备存储器</strong>”(backing store)<ul><li>文件系统，如许多生产力应用程序(productivityapplication，比如文字处理软件)</li><li>数据库，大多数企业级应用程序</li></ul></li></ul></li></ul><h2 id="并发">并发</h2><ul><li><strong>多个用户会一起访问</strong>同一份数据体，并且可能要修改这份数据。（大多数情况下，他们都在不同数据区域内各自操作，但是，偶尔也会同时操作一小块数据）</li><li>关系型数据库提供了<strong>“事务”机制</strong>来控制对其数据的访问，以便处理此问题。</li><li>事务在处理错误时也有用。通过事务更改数据时，如果在处理变更的过程中出错了，那么就可以回滚（rollback）这一事务，以<strong>保证数据不受破坏</strong></li></ul><h2 id="集成">集成</h2><ul><li>企业级应用程序居于一个丰富的生态系统中，它需要与其他应用程序<strong>协同工作</strong>。不同的应用程序经常要使用同一份数据，而且某个应用程序更新完数据之后，必须让其他应用程序知道这份数据已经改变了。</li><li>常用的办法是使用<strong>共享数据库集成(shared databaseintegration)</strong>，多个应用程序都将数据保存在同一个数据库中。这样一来，所有应用程序很容易就能使用彼此的数据了。</li><li>与多用户访问单一应用程序时一样，数据库的并发控制机制也可以应对多个应用程序</li></ul><h2 id="近乎标准的模型">近乎标准的模型</h2><ul><li>关系型数据库以近乎标准的方式提供了数据模型。</li><li>尽管各种关系型数据库之间仍有差异，但其核心机制相同<ul><li>不同厂商的SQL方言相似</li><li>“事务” 的操作方式也几乎一样</li></ul></li></ul><h1 id="ch-63-nosql的由来">ch 63 NoSQL的由来</h1><h2 id="阻抗失谐">阻抗失谐</h2><p><strong>阻抗失谐 1</strong></p><ul><li>基于<strong>关系代数(relationalalgebra)</strong>，关系模型把数据组织成“<strong>关系</strong>”(relation)和“<strong>元组</strong>”(tuple)。<ul><li>元组是由“<strong>键值对</strong>”(name-value pair)构成的集合</li><li>而关系则是<strong>元组的集合</strong>。</li><li>SQL操作所使用及返回的数据都是“关系”</li><li>元组不能包含“嵌套记录”(nested record)或“列表”(list) 等任何结构</li></ul></li><li>而内存中的数据结构则无此限制，它可以使用的数据组织形式比“关系”更丰富。</li><li><strong>关系模型和内存中的数据结构之间存在差异</strong>。这种现象通常称为“阻抗失谐”。<ul><li>如果在内存中使用了较为丰富的数据结构，那么要把它保存到磁盘之前，必须先将其转换成“关系形式。于是就发生了“阻抗失谐”：需要在两种不同的表示形式之间转译</li></ul></li></ul><p><strong>阻抗失谐 2</strong></p><p><img src="https://s2.loli.net/2022/05/15/SVwxP5kHXTczQRM.png"></p><h2 id="解决方法">解决方法</h2><ul><li>面向对象数据库</li><li>“对象-关系映射框架”( object-relational mapping framework)通过映射模式( mapping pattern)表达转换</li><li>问题：<ul><li>查询性能问题</li><li>集成问题</li></ul></li></ul><h2 id="集成数据库">集成数据库</h2><ul><li>SQL充当了应用程序之间的一种<code>集成机制</code>。数据库在这种情况下成了“集成数据库”(integrationdatabase)<ul><li>通常由不同团队所开发的多个应用程序，将其数据存储在一个<code>公用的数据库</code>中。</li><li>所有应用程序都在操作内容一致的持久数据，提高了数据通信的效率</li><li>为了能将很多应用程序集成起来，数据库的结构比单个应用程序所要用到的结构复杂得多</li><li>如果某个应用程序想要修改存储的数据，那么它就得和所有使用此数据库的其他应用程序相协调。</li><li>各种应用程序的结构和性能要求不尽相同，数据库通常不能任由应用程序更新其数据。为了保持数据库的完整性，我们需要将这一责任交由数据库自身负责。</li></ul></li></ul><h2 id="应用程序数据库">应用程序数据库</h2><ul><li>将数据库视为“应用程序数据库”(application database)，其内容只能由一个应用程序的代码库直接访问<ul><li>由于只有开发应用程序的团队才需要知道其结构，模式的维护与更新就更容易了。由于应用程序开发团队同时管理数据库和应用程序代码，因此可以把维护数据库完整性的工作放在应用程序代码中。</li></ul></li><li>交互工作转交由应用程序接口来完成<ul><li>“面向服务架构”、Web服务。使得应用程序间通过平台中立的方式完成集成。</li><li>在Web服务作为集成机制后，所交换的数据可以拥有更为灵活的结构<ul><li>如XML、JSON格式，它们均能够使用嵌套记录及列表等更丰富的数据结构</li><li>使用“面向文档”的交互方式，减少通讯次数和开销</li><li>既可以传输文本，也可以传输二进制</li></ul></li></ul></li><li>在使用应用程序数据库后，由于内部数据库与外部通信服务之间已经解耦，所以外界并不关心数据如何存储，这样就可以选用非关系型数据库了<ul><li>关系型数据库的许多特性，诸如安全性等，可以交给使用该数据库的外围应用程序(enclosingapplication)来做</li></ul></li></ul><h2 id="集群问题">集群问题</h2><ul><li>纵向扩展(scale up)及横向扩展(scale out)<ul><li>采用集群应对横向扩展</li></ul></li><li>关系型数据库的“分片”和“复制”<ul><li>在负载分散的同时，应用程序必须控制所有分片，需要知道数据库中的每份小数据的存储情况</li><li>如何确保跨分片的查询、参照完整性(referential integrity)、事务、一致性控制(consistency control)等操作</li></ul></li></ul><h2 id="nosql">NoSQL</h2><ul><li>NoSQL没有规范的定义<ul><li>“开源分布式的非关系型数据库”</li></ul></li><li>各种NoSQL数据库的共同特性是<ul><li><strong>不使用关系模型</strong></li><li>在集群中运行良好<ul><li>关系型数据库使用ACID事务来保持整个数据库的一致性，而这种方式本身与集群环境相冲突</li><li>NoSQL数据库为<strong>处理并发及分布问题</strong>提供了众多选项。</li></ul></li><li>开源</li><li>适用于21世纪的互联网公司</li><li>无模式<ul><li>不用事先修改结构定义，即可自由添加字段了</li><li>这在处理不规则数据和自定义字段时非常有用</li></ul></li></ul></li></ul><h1 id="ch-64-聚合">ch 64 聚合</h1><h2 id="聚合">聚合</h2><ul><li>把一组相互关联的对象视为一个整体单元来操作，而这个单元就叫聚合（aggregate）。<ul><li>通过原子操作(atomic operation)更新聚合的值（含一致性管理）</li><li>以聚合为单位与数据存储通信</li><li>在集群中操作数据库时，用聚合为单位来复制和分片</li><li>由于程序员经常通过聚合结构来操作数据，故而采用聚合也能让其工作更为轻松。</li></ul></li><li>面向聚合操作数据时所用的单元，其结构比元组集合复杂得多<ul><li>“键值数据库”、“文档数据库”、“列族数据库”</li></ul></li></ul><h2 id="关系模型">关系模型</h2><p><img src="https://s2.loli.net/2022/05/13/XsivCTwIqMBu1ex.png"></p><h2 id="关系实例">关系实例</h2><p><img src="https://s2.loli.net/2022/05/13/ovr8NUq5XhQ7egM.png"></p><h2 id="聚合数据模型">聚合数据模型</h2><p><img src="https://s2.loli.net/2022/05/13/S9IMVpGkyNRwuAt.png"></p><h2 id="聚合实例两个聚合">聚合实例（两个聚合）</h2><p><img src="https://s2.loli.net/2022/05/13/IoX3fC2thez4uVT.png"></p><h2 id="另一种聚合">另一种聚合</h2><p><img src="https://s2.loli.net/2022/05/13/WEVQbfhk1KroHNs.png"></p><h2 id="聚合实例一个聚合">聚合实例（一个聚合）</h2><p><img src="https://s2.loli.net/2022/05/13/PL6dIeDzri97hvK.png"></p><h2 id="聚合无知">聚合无知</h2><ul><li>关系型数据库的数据模型中，没有“聚合”这一概念，因此我们称之为“聚合无知”(aggregate-ignorant)。<ul><li>“图数据库"也是聚合无知的。</li></ul></li><li>聚合反应数据操作的边界，很难在共享数据的多个场景中“正确”划分，对某些数据交互有用的聚合结构，可能会阻碍另一些数据交互<ul><li>在客户下单并核查订单，以及零售商处理订单时，将订单视为一个聚合结构就比较合适。</li><li>如零售商要分析过去几个月的产品销售情况，那么把订单做成一个聚合结构反而麻烦了。要取得商品销售记录，就必须深挖数据库中的每一个聚合。</li></ul></li><li>若是采用“聚合无知模型”，那么很容易就能以不同方式来查看数据<ul><li>在操作数据时，如果没有一种占主导地位的结构，那么选用此模型效果会更好。</li></ul></li></ul><h2 id="聚合之间的关系">聚合之间的关系</h2><ul><li>例如：把订单和客户放在两个聚合中，但是想在它们之间设定某种关系，以便能根据订单查出客户数据。<ul><li>要提供这种关联，最简单的办法就是把客户ID嵌入订单的聚合数据中。在应用层级提供关联。</li><li>在数据库层级提供聚合之间关系的表达机制</li></ul></li><li>操作多个有关联的聚合，由应用保证其正确性<ul><li>面向聚合数据库获取数据时以聚合为单元，只能保证单一聚合内部内容的原子性。</li></ul></li></ul><h2 id="聚合集群和事务处理">聚合、集群和事务处理</h2><ul><li>在集群上运行时，需要把采集数据时所需的节点数降至最小<ul><li>如果在数据库中明确包含聚合结构，那么它就可以根据这一重要信息，知道哪些数据需要一起操作了，而且这些数据应该放在同一个节点中</li></ul></li><li>通常情况下，面向聚合的数据库不支持跨越多个聚合的ACID事务。它每次只能在一个聚合结构上执行原子操作。<ul><li>如果想以原子方式操作多个聚合，那么就必须自己组织应用程序的代码</li><li>在实际应用中，大多数原子操作都可以局限于某个聚合结构内部，而且，在将数据划分为聚合时，这也是要考虑的因素之一</li></ul></li></ul><h1 id="ch-65-主要的nosql数据模型">ch 65 主要的NoSQL数据模型</h1><h2 id="键值数据模型与文档数据模型">键值数据模型与文档数据模型</h2><ul><li>这两类数据库都包含<strong>大量聚合</strong>，每个聚合中都有一个获取数据所用的键或ID。</li><li>两种模型的区别是:<ul><li><strong>键值数据库的聚合不透明</strong>，只包含一些没有太多意义的大块信息<ul><li>聚合中可以存储任意数据。数据库可能会限制聚合的总大小，但除此之外，其他方面都很随意</li><li>在键值数据库中，要访问聚合内容，<strong>只能通过键来查找</strong></li></ul></li><li>在文档数据库的聚合中，可以<strong>看到其结构</strong>。<ul><li>限制其中存放的内容，它定义了其允许的结构与数据类型</li><li>能够<strong>更加灵活</strong>地访问数据。通过用聚合中的字段查询，可以只获取一部分聚合，而不用获取全部内容</li><li>可以<strong>按照聚合内容创建索引</strong></li></ul></li></ul></li></ul><h2 id="列族存储">列族存储</h2><p><strong>列族存储 1</strong></p><ul><li>部分数据库都以行为单元存储数据。然而，有些情况下写入操作执行得很少，但是经常需要一次读取若干行中的很多列。此时，列存储数据库将所有行的某一组列作为基本数据存储单元</li><li>列族数据库将列组织为列族。每一列都必须是某个列族的一部分，而且访问数据的单元也得是列<ul><li>某个列族中的数据经常需要一起访问。</li></ul></li><li>列族模型将其视为两级聚合结构(two-level aggregate structure)。<ul><li>与“键值存储”相同，第一个键通常代表行标识符，可以用它来获取想要的聚合。</li><li>列族结构与“键值存储”的区别在于，其“行聚合”(rowaggregate)本身又是一个映射，其中包含一些更为详细的值。这些“二级值"(second-levelvalue)就叫做“列”。与整体访问某行数据一样，我们也可以操作特定的列</li></ul></li></ul><p><strong>列族存储 2</strong></p><p><img src="https://s2.loli.net/2022/05/13/GaELBJm3r2ysgt7.png"></p><p><strong>列族存储 3</strong></p><ul><li>两种数据组织方式<ul><li>面向行(row-oriented)：每一行都是一个聚合(例如ID为1234的顾客就是一个聚合)，该聚合内部存有一些包含有用数据块(客户信息、订单记录)的列族</li><li>面向列(column-oriented):每个列族都定义了一种记录类型(例如客户信息)，其中每行都表示一条记录。数据库中的大“行”理解为列族中每一个短行记录的串接</li></ul></li></ul><h2 id="面向聚合的数据模型">面向聚合的数据模型</h2><ul><li>共同点<ul><li>都使用聚合这一概念，而且聚合中都有一个可以查找其内容的索引键。</li><li>在集群上运行时，聚合是中心环节，因为数据库必须保证将聚合内的数据存放在同一个节点上。</li><li>聚合是“更新”操作的最小数据单位(atomicunit)，对事务控制来说，以聚合为操作单元</li></ul></li><li>差别<ul><li>键值数据模型将聚合看作不透明的整体，只能根据键来查出整个聚合，而不能仅仅查询或获取其中的一部分</li><li>文档模型的聚合对数据库透明，于是就可以只查询并获取其中一部分数据了，不过，由于文档没有模式，因此在想优化存储并获取聚合中的部分内容时，数据库不太好调整文档结构</li><li>列族模型把聚合分为列族，让数据库将其视为行聚合内的一个数据单元。此类聚合的结构有某种限制，但是数据库可利用此种结构的优点来提高其易访问性。</li></ul></li></ul><h2 id="图结构">图结构</h2><p><img src="https://s2.loli.net/2022/05/13/qI17bZjQKCtdALn.png" style="zoom:50%;"></p><h2 id="图数据库">图数据库</h2><ul><li>图数据库的基本数据模型：由边(或称“弧”，arc)连接而成的若干节点。</li><li>可以用专门为“图”而设计的查询操作来搜寻图数据库的网络了<ul><li>指定节点，通过边进行查询</li></ul></li><li>关系型数据可以通过“外键”实现，查询中的多次连接，效率较差</li></ul><h2 id="无模式">无模式</h2><ul><li>关系型数据库中，首先必须定义“模式”，然后才能存放数据。</li><li>NoSQL数据库，无模式：<ul><li>“键值数据库"可以把任何数据存放在一个“键”的名下。</li><li>“文档数据库” 对所存储的文档结构没有限制</li><li>在列族数据库中，任意列里面都可以随意存放数据</li><li>图数据库中可以新增边，也可以随意向节点和边中添加属性。</li></ul></li></ul><h2 id="格式不一致的数据">格式不一致的数据</h2><ul><li>每条记录都拥有不同字段集(set of field)</li><li>关系型数据库中，“模式”会将表内每一行的数据类型强行统一，若不同行所存放的数据类型不同，那这么做就很别扭。<ul><li>要么得分别用很多列来存放这些数据，而且把用不到的字段值填成null(这就成了"稀疏表”，sparsetable)，</li><li>要么就要使用类似custom column 4这样没有意义的列类型。</li></ul></li><li>无模式表则没有这么麻烦，每条记录只要包含其需要的数据即可，不用再担心上面的问题了</li></ul><h2 id="无模式的问题">无模式的问题</h2><ul><li>存在“隐含模式”。在编写数据操作代码时，对数据结构所做的一系列假设<ul><li>应用与数据的耦合问题</li><li>无法在数据库层级优化和验证数据</li></ul></li><li>在集成数据库中，很难解决<ul><li>使用应用程序数据库，并使用Web Services、SOA等完成集成</li><li>在聚合中为不同应用程序明确划分出不同区域<ul><li>在文档数据库中，可以把文档分成不同的区段(section)</li><li>在列族数据库，可以把不同的列族分给不同的应用程序</li></ul></li></ul></li></ul><h1 id="ch-66-分布式模型">ch 66 分布式模型</h1><h2 id="数据分布">数据分布</h2><ul><li>数据分布有两条路径:复制(replication) 与分片(sharding)。既可以在两者中选一个来用，也可以同时使用它们。<ul><li>“分片”则是将不同数据存放<strong>在不同节点</strong>中</li><li>“复制”就是将同一份数据<strong>拷贝至多个节点</strong>;<ul><li>“主从式’(master-slave)和“对等式”(peer-to-peer)</li></ul></li></ul></li></ul><h2 id="单一服务器">单一服务器</h2><ul><li>最简单的分布形式：根本不分布。<ul><li>将数据库放在一台电脑中，让它处理对数据存储的读取与写入操作。</li><li>不用考虑使用其他方案时所需应对的复杂事务，这对数据操作管理者与应用程序开发者来说，都比较简单。</li></ul></li><li>尽管许多NoSQL数据库都是为集群运行环境而设计的，但是只要符合应用程序需求，那就完全可以按照单一服务器的分布模型来使用<ul><li>图数据库配置在一台服务器上</li><li>如果只是为了处理聚合，那么可以考虑在单一服务器上部署“文档数据库”或“键值数据库”</li></ul></li></ul><blockquote><p>NoSQL速度较快，将集群暴露，可以做更多的<strong>定制</strong>（安卓 和IOS）</p><p>安卓类比NoSQL</p></blockquote><h2 id="分片">分片</h2><p><strong>分片 1</strong></p><ul><li>一般来说，数据库的繁忙体现在：不同用户需要访问数据集中的不同部分。</li><li>在这种情况下，把数据的各个部分存放于不同的服务器中，以此实现横向扩展。该技术就叫“分片”(sharding)。</li></ul><p><img src="https://s2.loli.net/2022/05/17/xcCGf6adjJtlzLb.png"></p><p><strong>分片 2</strong></p><ul><li>在理想情况下，不同的服务器节点会服务于不同的用户。每位用户只需与一台服务器通信，并且很快就能获得服务器的响应。网络负载相当均衡地分布于各台服务器上。</li><li>为达成目标，必须保证需要同时访问的那些数据都存放在同一节点上，而且节点必须排布好这些数据块，使访问速度最优。<ul><li>若使用面向聚合的数据库，可以把聚合作为分布数据的单元。</li><li>在节点的数据排布问题上，有若干个与性能改善相关的因素。<ul><li>地理因素</li><li>负载均衡</li><li>聚合有序放置</li></ul></li></ul></li></ul><p><strong>分片 3</strong></p><ul><li>采用应用程序的逻辑实现分片<ul><li>编程模型复杂化，因为应用程序的代码必须负责把查询操作分布到多个分片上</li><li>若想重新调整分片，那么既要修改程序代码，又要迁移数据</li></ul></li><li>采用NoSQL数据库提供的“自动分片”( auto-sharding)功能<ul><li>让数据库自己负责把数据分布到各分片</li><li>并且将数据访问请求引导至适当的分片上</li></ul></li></ul><p><strong>分片 4</strong></p><ul><li>分片可以同时提升读取与写入效率<ul><li>使用“复制”技术，尤其是带缓存的复制，可以极大地改善读取性能，但对于写操作帮助不大</li></ul></li><li>分片对改善数据库的“故障恢复能力”帮助并不大。尽管数据分布在不同的节点上，但是和“单一服务器”方案一样，只要某节点出错，那么该分片上的数据就无法访问了<ul><li>在发生故障时，只有访问此数据的那些用户才会受影响，而其余用户则能正常访问</li><li>由于多节点问题，从实际效果出发，分片技术可能会降低数据库的错误恢复能力</li></ul></li></ul><h2 id="主从复制">主从复制</h2><p><strong>主从复制 1</strong></p><p><img src="https://s2.loli.net/2022/05/17/vIyVW1Uwjz8l3mS.png"></p><p><strong>主从复制 2</strong></p><ul><li>在“主从式分布”( master-slave distribution)中<ul><li>其中有一个节点叫做“主(master) 节点”，或“主要(primary)节点”。主节点存放权威数据，而且通常负责处理数据更新操作。</li><li>其余节点都叫“从(slave) 节点”，或“次要(secondary)节点”，和主节点保持同步，负责读取操作 。</li></ul></li><li>在需要频繁读取数据集的情况下，“主从复制”(master- slave replication)有助于提升数据访问性能<ul><li>以新增更多从节点的方式来进行水平扩展，就可以同时处理更多数据读取请求，并且能保证将所有请求都引导至从节点</li><li>在写入操作特别频繁的场合，数据库仍受制于主节点处理更新，以及向从节点发布更新的能力</li></ul></li><li>“主从复制” 可以增强“读取操作的故障恢复能力”(read resilience)<ul><li>万一主节点出错了，那么从节点依然可以处理读取请求。</li><li>主节点出错之后，除非将其恢复，或另行指派新的主节点，否则数据库就无法处理写入操作。</li><li>在主节点出错之后，由于拥有内容与主节点相同的从节点，很快就能指派一个从节点作为新的主节点，从而具备故障恢复能力。</li></ul></li><li>主节点可以手工指派，也可自动选择。</li><li>“数据的不一致性”</li></ul><h2 id="对等复制">对等复制</h2><p><strong>对等复制 1</strong></p><ul><li>“对等复制” 它没有“主节点”这一概念。所有“副本”(replica)地位相同，都可以接受写入请求，而且丢失其中一个副本，并不影响整个数据库的访问。</li></ul><p><img src="https://s2.loli.net/2022/05/17/qr9WXZDJAQPukiK.png"></p><h2 id="结合主从复制与分片">结合“主从复制”与“分片”</h2><ul><li>如果同时使用“主从复制”与“分片”，那么就意味着整个系统有多个主节点，然而对每项数据来说，负责它的主节点只有一一个</li><li>根据配置需要，同一个节点既可以做某些数据的主节点，也可以充当其他数据的从节点，此外，也可以指派全职的主节点或从节点</li></ul><p><img src="https://s2.loli.net/2022/05/17/QdFiHvD18rogTuA.png"></p><h2 id="结合对等复制与分片">结合“对等复制”与“分片”</h2><ul><li>使用列族数据库时，经常会将“对等复制”与“分片”结合起来。</li><li>数据可能分布于集群中的数十个或数百个节点上。在采用“对等复制”方案时，一开始可以用“3”作为复制因子(replicationfactor),也就是把每个分片数据放在3个节点中。一旦某个节点出错，那么它上面保存的那些分片数据会由其他节点重建</li></ul><p><img src="https://s2.loli.net/2022/05/17/LzkDUwMuReFngri.png"></p><h1 id="ch-67-分布式模型中的不一致性">ch 67 分布式模型中的不一致性</h1><h2 id="写入冲突和读写冲突">写入冲突和读写冲突</h2><ul><li>当两个客户端试图同时修改一份数据时，会发生“写入冲突”。而当某客户端在另一个客户端执行写入操作的过程中读取数据时，则会发生“读写冲突”。</li><li>悲观方式以锁定数据记录来避免冲突<ul><li>“写入锁" (write lock)</li></ul></li><li>乐观方式则在事后检测冲突并将其修复<ul><li>“条件更新”( conditionalupdate)，任意客户在执行更新操作之前，都要先测试数据的当前值和其上一次读入的值是否相同</li><li>保存冲突数据， 。用户自行“合并”(merge)或“自动合并”（面向特定领域）</li></ul></li></ul><h2 id="nosql的不一致性">NoSQL的不一致性</h2><ul><li>“图数据库"常常和关系型数据库-样，也支持ACID事务。</li><li>面向聚合的数据库通常支持“原子更新”( atomicupdate),但仅限于单一聚合内部<ul><li>“一致性” 可以在某个聚合内部保持，但在各聚合之间则不行</li><li>在执行影响多个聚合的更新操作时，会留下一段时间空档，让客户端有可能在此刻读出逻辑不一致的数据</li><li>存在不一致风险的时间长度就叫“不一致窗口”( inconsistency window)</li></ul></li></ul><h2 id="复制一致性">复制一致性</h2><p><strong>复制一致性 1</strong></p><p>“复制一致性”(replicationconsistency)。要求从不同副本中读取同一个数据项时，所得到的值相同</p><p><img src="https://s2.loli.net/2022/05/17/Pcz3RM1EwnBlWxK.png"></p><p><strong>复制一致性 2</strong></p><ul><li>在分布式系统中，如果某些节点收到了更新数据，而另外一些节点却尚未收到，那么这种情况就视为“读写冲突”。若写入操作已经传播至所有节点，则此刻的数据库就具备“最终一致性”(eventually consistent)</li><li>复制不一致性带来的“不一致窗口”，在考虑网络环境后，会比单一节点导致的“不一致窗口”长的多<ul><li>不一致性窗口对应用的影响不同</li></ul></li></ul><h2 id="照原样读出所写内容的一致性">照原样读出所写内容的一致性</h2><p><strong>照原样读出所写内容的一致性 1</strong></p><ul><li>“照原样读出所写内容的一致性”(read-your-writes consistency)，在执行完更新操作之后，要能够立刻看到新值。</li><li>在具备“最终一致性” 的系统中，可以提供“会话一致性”( sessionconsistency) :在用户会话内部保持“照原样读出所写内容的一致性”<ul><li>使用“黏性会话”(stickysession)，即绑定到某个节点的会话(这种性质也叫做“会话亲和力”，sessionaffinity)。<ul><li>“黏性会话”可以保证，只要某节点具备“照原样读出所写内容的一致性”，那么与之绑定的会话就都具备这种特性了。</li><li>“黏性会话”的缺点是，它会降低“负载均衡器”( load balancer)的效能</li></ul></li><li>使用“版本戳”(versionstamp,参见第6章)，并确保同数据库的每次交互操作中，都包含会话所见的最新版本戳。服务器节点在响应请求之前必须先保证，它所含有的更新数据包含此版本戳。</li></ul></li></ul><h2 id="分布式系统中的一致性">分布式系统中的一致性</h2><ul><li>使用“黏性会话”和“主从复制”来保证“会话一致性”时，由于读取与写入操作分别发生在不同节点，那么想保证这一点会比较困难。<ul><li>方法一：将写入请求先发给从节点，由它负责将其转发至主节点，并同时保持客户端的“会话一致性”。</li><li>方法二：在执行写入操作时临时切换到主节点，并且在从节点尚未收到更新数据的这--段时间内，把读取操作都交由主节点来处理。</li></ul></li></ul><h1 id="ch-68-放宽一致性和持久性约束">ch 68放宽‘“一致性”和“持久性”约束</h1><h2 id="使用事务保障一致性">使用事务保障“一致性”</h2><ul><li>使用“事务”达成强一致性</li><li>引入放松“隔离级别” ( isolationlevel)的功能，以允许查询操作读取尚未提交的数据。<ul><li>读未提交，一个事务可以读取另一个未提交事务的数据。脏读</li><li>读已提交，一个事务要等另一个事务提交后才能读取数据。不可重复读</li><li>可重复读，在开始读取数据（事务开启）时，不再允许修改操作。幻读</li><li>可串行化，事务串行化顺序执行。严格一致性，效率是一个问题</li></ul></li></ul><h2 id="事务的问题">事务的问题</h2><ul><li>在并发不大的前提下，是否需要事务</li><li>在数据较多的情况下，为了让应用性能符合用户要求，它们必须弃用“事务”尤其在需要引入分片机制时，更是如此</li><li>在分布式应用中，如事务的业务范围涉及多个以网络连接的参与者。其规模、复杂度和波动性均导致无法使用事务进行良好描述</li></ul><h2 id="cap定理">CAP定理</h2><ul><li>CAP定理:给定“一致性”(Consistency)、“可用性”(Availability)、“分区耐受性”(Partition tolerance) 这三个属性，我们只能同时满足其中两个属性。<ul><li>“一致性”</li><li>“可用性”，如果客户可以同集群中的某个节点通信，那么该节点就必然能够处理读取及写入操作。</li><li>“分区耐受性”，如果发生通信故障，导致整个集群被分割成多个无法互相通信的分区时(这种情况也叫“脑裂”，split brain)，集群仍然可用。</li></ul></li></ul><h2 id="脑裂的例子">“脑裂”的例子</h2><p><img src="https://s2.loli.net/2022/05/24/5IVcQsjae18HAyq.png"></p><h2 id="ca系统">CA系统</h2><ul><li>CA系统，也就是具备“一致性”(Consistency)与“可用性”(Availability)，但却不具备“分区耐受性”的系统<ul><li>大多数关系型数据库</li></ul></li><li>CA集群<ul><li>无法保证“分区耐受性”，这使得一旦“分区”发生，所有节点必须停止运作</li><li>CAP中的，可用性定义为“系统中某个无故障节点所接收的每一条请求，无论成功或失败，都必将得到响应。”</li><li>介于此时所有节点均为故障节点，不违反CAP中的“可用性”</li></ul></li></ul><h2 id="cap定理的现实含义">CAP定理的现实含义</h2><ul><li>尽管“CAP定理”经常表述为“三个属性中只能保有两个”，实际上当系统可能会遭遇“分区”状况时(比如分布式系统)，需要在“一致性”与“可用性”之间进行权衡。<ul><li>这并不是个二选一的决定，通常来说，我们都会略微舍弃“一致性”，以获取某种程度的“可用性”</li><li>这样的系统，既不具备完美的“一致性”，也不具备完美的“可用性”</li><li>但是能够满足需要</li></ul></li></ul><h2 id="缺乏可用性的例子">缺乏“可用性”的例子</h2><ul><li>假设Martin与Pramod都想预订某旅馆的最后一间客房，预订系统使用“对等式分布模型”，它由两个节点组成<ul><li>Martin 使用位于伦敦的节点，而Pramod使用位于孟买的节点。</li><li>若要确保一致性，那么当Martin要通过位于伦敦的节点预订房间时，该节点在确认预订操作之前，必须先告知位于孟买的节点。</li><li>两个节点必须按照相互一致的顺序来处理它们所收到的操作请求</li></ul></li><li>此方案保证了“一致性”，但是假如网络连接发生故障，那么由故障导致的两个“分区”系统，就都无法预订旅馆房间了，于是系统失去了“可用性”</li></ul><h2 id="改善可用性的例子">改善“可用性”的例子</h2><ul><li>指派其中一个节点作为某家旅馆的“主节点”，确保所有预订操作都由“主节点”来处理。<ul><li>假设位于孟买的节点是“主节点”，那么在两个节点之间的网络连接发生故障之后，它仍然可以处理该旅馆的房间预订工作，这样Pramod将会订到最后一间客房</li><li>位于伦敦的用户看到的房间剩余情况会与孟买不一致，但是他们无法预订客房，于是就出现了“更新不一致”现象。</li><li>Martin可以和位于伦敦的节点通信，但是该节点却无法更新数据。于是出现了“可用性”故障(availabilityfailure)</li></ul></li><li>这种在“一致性”与“可用性”之间所做的权衡，能正确处理上述特殊状况。</li></ul><h2 id="进一步改善可用性的例子">进一步改善“可用性”的例子</h2><ul><li>让两个“分区”系统都接受客房预订请求，即使在发生网络故障时也如此。<ul><li>这种方案的风险是，Martin和Pramod有可能都订到了最后一间客房。然而，根据这家旅馆的具体运营情况，这也许不会出问题：<ul><li>通常来说，旅行公司都允许一定数量的超额预订，这样的话，如果有某些客人预订了房间而最终没有人住，那么就可以把这部分空余房间分给那些超额预订的人了</li><li>与之相对，某些旅馆总是会在全部订满的名额之外多留出几间客房，这样万一哪间客房出了问题，或者在房间订满之后又来了一位贵宾，那么旅馆可以把客人安排到预留出来的空房中</li><li>还有些旅馆甚至选择在发现预订冲突之后向客户致歉并取消此预订。</li></ul></li></ul></li><li>该方案所付出的代价，要比因为网络故障而彻底无法预订的代价小</li></ul><h2 id="一个写入不一致的例子">一个写入不一致的例子</h2><ul><li>购物车是允许“写入不一致”现象的一个经典示例<ul><li>即使网络有故障，也总是能够修改购物车中的商品。</li><li>这么做有可能导致多个购物车出现</li><li>而结账过程则会将两个购物车合并，具体做法是，将两个购物车中的每件商品都拿出来，放到另外一个购物车中，并按照新的购物车结账。</li><li>这个办法基本上不会出错，万一有问题，客户也有机会在下单之前先检视一下购物车中的东西</li></ul></li></ul><h2 id="base">BASE</h2><ul><li>与关系型数据库所支持的ACID事务不同，NoSQL系统具备“BASE属性”<ul><li>基本可用，Basically Available</li><li>柔性状态，Soft state</li><li>最终一致性，Eventual consistency</li></ul></li><li>“ACID”与“BASE"不是非此即彼的关系，两者之间存在着多个逐渐过渡的权衡方案可选。</li></ul><h2 id="一致性与延迟-之间取舍">“一致性”与“延迟” 之间取舍</h2><ul><li>在权衡分布式数据库的“一致性”时，与其考虑如何权衡“一致性”与“可用性”，不如思考怎样在“一致性”与“延迟”(latency)之间取舍。<ul><li>参与交互操作的节点越多，“一致性”就越好</li><li>然而，每新增一个节点，都会使交互操作的响应时间变长</li><li>“可用性”可以视为能够忍受的最大延迟时间，一旦延迟过高，我们就放弃操作，并认为数据不可用</li><li>这样一来，就和“CAP定理”对“可用性”所下的定义相当吻合了</li></ul></li></ul><h2 id="持久性的权衡">持久性的权衡</h2><ul><li>数据库大部分时间都在内存中运行，更新操作也直接写入内存，并且定期将数据变更写回磁盘<ul><li>可以大大提高响应请求的速度。</li><li>代价在于，一旦服务器发生故障，任何尚未写回磁盘的更新数据都将丢失。</li></ul></li><li>多用户的“会话状态”信息<ul><li>会话数据就算丢失，与应用系统效率相比，也不过是个小麻烦。这时可以考虑非持久性写入操作”(nondurablewrite)。</li><li>可以在每次发出请求时，指定该请求所需的持久性。从而，把某些极为重要的更新操作立刻写回磁盘。</li></ul></li><li>捕获物理设备的遥测数据(telemetricdata)。就算最近的更新数据可能会因为服务器发生故障而丢失，也还是选择把快速捕获数据放在首位</li></ul><h2 id="分布模型中持久性的权衡"><strong>分布模型中“持久性”的权衡</strong></h2><p><strong>分布模型中“持久性”的权衡 1</strong></p><ul><li>如一个节点处理完更新操作之后，在更新数据尚未复制到其他节点之前就出错了，那么则会发生“复制持久性”(replicationdurability) 故障。</li><li>假设有一个采用“主从式分布模型”的数据库，在其主节点出错时，它会自动指派一个从节点作为新的主节点。<ul><li>若主节点发生故障，则所有还未复制到其他副本的写入操作就都将丢失</li><li>一旦主节点从故障中恢复过来，那么，该节点上的更新数据就会和发生故障这段时间内新产生的那些更新数据相冲突</li><li>我们把这视为一个“持久化”问题，因为主节点既然已经接纳了这个更新操作，那么用户自然就会认为该操作已经顺利执行完，但实际上，这份更新数据却因为主节点出错而丢失了</li></ul></li></ul><p><strong>分布模型中“持久性”的权衡 2</strong></p><ul><li>解决方案：<ul><li>不重新指派新的主节点<ul><li>在主节点出错之后迅速将其恢复</li></ul></li><li>确保主节点在收到某些副本对更新数据的确认之后，再告知用户它已接纳此更新<ul><li>从节点发生故障时，集群不可用</li><li>拖慢更新速度</li></ul></li></ul></li><li>与处理“持久性”的基本手段类似，也可以针对单个请求来指定其所需的持久性</li></ul><h2 id="ch-69-仲裁">ch 69 仲裁</h2><h2 id="写入仲裁">写入仲裁</h2><ul><li>处理请求所的节点越多，避免“不一致”问题的能力就越强，要想保“强一致性”(strongconsistency)， 需要使用多少个节点才行?</li><li>“对等式分布模型”：<ul><li>“写入仲裁”(writequorum)：如果发生两个相互冲突的写入操作，那么只有其中一个操作能为超过半数的节点所认可，W&gt;N/2。即，参与写入操作的节点数(W)，必须超过副本节点数(N)的一半。副本个数又称为“复制因子”</li></ul></li><li>“主从式分布模型”<ul><li>只需要向主节点中写入数据</li></ul></li></ul><h2 id="读取仲裁"><strong>读取仲裁</strong></h2><ul><li>想要保证能够读到最新数据，必须与多少个节点联系才行?</li><li>“对等式分布模型”：<ul><li>只有当R+W&gt;N时，才能保证读取操作的“强一致性”。其中，执行读取操作时所需联系的节点数(R)，确认写入操作时所需征询的节点数(W)，以及复制因子(N)</li></ul></li><li>“主从式分布模型”<ul><li>只需从主节点中读取数据</li></ul></li></ul><h2 id="复制因子"><strong>复制因子</strong></h2><ul><li>“复制因子”( replication factor)。<ul><li>一个集群有100个节点，然而其“复制因子”可能仅仅是3，因为大部分数据都分布在各个"分片”之中。</li></ul></li><li>将“复制因子”设为3，就可以获得足够好的“故障恢复能力”了。<ul><li>如果只有一个节点出错，那么仍然能够满足读取与写入所需的最小法定节点数。</li><li>若是有自动均衡( automatic rebalancing)机制，那么用不了多久，集群中就会建立起第三个副本，在替代副本建立好之前，再次发生副本故障的概率很小</li></ul></li></ul><h2 id="实际情况"><strong>实际情况</strong></h2><ul><li>需要在“一致性”与“可用性”之间权衡，参与某个操作的节点数，可能会随着该操作的具体情况而改变。<ul><li>在写入数据时，根据“一致性”与“可用性”这两个因素的重要程度，有一些更新操作可能需要获得足够的节点支持率才能执行，而另外一些则不需要。</li><li>与之相似，某些读取操作可能更看中执行速度，而可以容忍过时数据，此时，它就可以少联系几个节点。</li></ul></li><li>通常需要协调考虑读、写两种情况：<ul><li>假设需要快速且具备“强一致性”的读取操作，那么写入操作就要得到全部节点的确认才行，这样的话，只需联系一个节点，就能完成读取操作了(N=3，W=3，R=1)</li><li>但是，这个方案意味着，写入操作会比较慢，因为它们必须得到全部三个节点确认之后，才能执行，而且此时连一个节点都不能出错</li></ul></li></ul><h1 id="ch-70-版本戳">ch 70 版本戳</h1><h2 id="商业活动"><strong>商业活动</strong></h2><ul><li>“商业活动”(Business Activity)。<ul><li>比如说，用户浏览产品目录，选中了一瓶价格很实惠的Talisker威士忌，填入信用卡信息，然后确认订单。</li></ul></li><li>需要确保最终一致性，但是出于时间、交互的考虑，无法使用事务加以实现<ul><li>如使用事务实现，必须锁住数据库中各个元素。而长时间锁定元素是不现实的。</li><li>因此，应用程序通常只在处理完用户交互操作之后才开始“系统事务”，这样的话，锁定时间就比较短了。</li><li>然而当需要计算和决策的时候，数据有可能已经改动了。<ul><li>价格表上Talisker威士忌的售价也许已经变了，或是某人可能会修改客户的地址，从而导致运费改变</li></ul></li></ul></li></ul><h2 id="条件更新和版本戳">条件更新和版本戳</h2><ul><li>条件更新（conditionalupdate），客户端执行操作时，将重新读取商业活动所依赖的信息，并检测该信息在首次读取后是否一直没有变动，若一直未变，则将其展示给用户</li><li>通过保证数据库中的记录都有某种形式的版本戳（versionstamp）实现“乐观离线锁”（Optimistic Offline Lock）<ul><li>版本戳是一个字段，每当记录中的底层数据改变时，其值也随之改变</li><li>读取数据时可以记下版本戳，这样在写入数据时可以先检查数据版本是否已经变了</li></ul></li><li>使用版本戳避免“更新冲突” ，维护“会话一致性”</li><li>“CAS”操作 ( “compare-and-set”操作）<ul><li>既可以由数据库提供</li><li>也可以由开发者负责检测的执行</li></ul></li></ul><h2 id="构建版本戳的方法">构建版本戳的方法</h2><p><strong>构建版本戳的方法1</strong></p><ul><li>使用计数器<ul><li>每当资源更新时，就将他的值+1，根据值判断哪个版本比较新</li><li>需要服务器来生成该值，并且要有一个主节点来保证不同版本的计数器值不会重复</li></ul></li><li>使用GUID（全局唯一标识符），也就是一个值很大且保证唯一的随机数<ul><li>可以将日期，硬件信息，以及其他一些随机出现的资源组合起来构建此值</li><li>好处：任何人都可以生成，不用担心重复</li><li>缺点：数值比较大，不乏通过直接比较来判断版本新旧</li></ul></li></ul><p><strong>构建版本戳的方法2</strong></p><ul><li>根据资源内容生成hash码，只要哈希键足够大，那么“内容哈希码”就可以向GUID那样全局唯一，并且任何人都可以来生成它<ul><li>好处：hash码的内容是确定的，只要资源数据相同，那么任何节点生成的内容哈希码都是一样的</li><li>但是哈希码和GUID一样，都无法直接比较看出版本新旧，而且比较冗长</li></ul></li><li>使用上一次更新时的时间戳（timestamp）<ul><li>与计数器一样，时间戳也相当短小，而且可以直接通过比较其数值判断版本先后</li><li>时间戳不需要主节点来生成，可以由多台时钟同步的计算机生成，如果某个节点的时钟出错了，那么可能会导致各种数据毁损现象（datacorruption）</li><li>如果时间戳<strong>精度</strong>过低，则可能重复。</li></ul></li></ul><p><strong>构建版本戳的方法3</strong></p><ul><li>可以把几种时间戳生成方案的优点融合起来，同时使用多种手法创建出一个“复合版本戳”(compositestamp)。</li><li>在CouchDB创建版本戳时，使用了计数器与“内容哈希码”。<ul><li>大部分情况下，只要比较版本戳就可以判定两个版本的新旧</li><li>万一碰到两个节点同时更新数据的情况，因为两个版本戳的计数器相同，而“内容哈希码”却不同，立刻就能发现冲突</li></ul></li></ul><h2 id="主从式复制模型中的版本戳"><strong>“主从式复制模型”中的版本戳</strong></h2><ul><li>在“主从式复制模型”中，只有一个权威数据源(authoritative source fordata)，使用基本的版本戳生成方案</li><li>由主节点负责生成版本戳，而从节点必须使用主节点的版本戳。<ul><li>以计数器为例，节点每次更新数据时，都将它加1,并把其值放人版本戳中。</li><li>假设某主节点有两个副本，分别是“蓝色”节点和“绿色”节点。</li><li>如果在蓝色节点所给出的应答数据中，版本戳为4，而绿色节点的版本戳是6，那么绿色节点上的数据就比较新</li></ul></li></ul><h2 id="对等式分布模型中的版本戳"><strong>“对等式分布模型”中的版本戳</strong></h2><p><strong>对等式分布模型中的版本戳1</strong></p><ul><li>在“对等式分布模型”中，没有统一设置版本戳的节点</li><li>如果向两个节点索要同一份数据，那么有可能获得不同的答案<ul><li>有可能是更新操作已经通知给其中一个节点了，而另外一个节点尚未收到通知<ul><li>可以选用最新的数据</li></ul></li><li>发生了“更新不一致”现象</li></ul></li></ul><p><strong>对等式分布模型中的版本戳2</strong></p><ul><li>在“对等式分布模型”中<ul><li>确保所有节点都有一份“版本戳记录”( version stamphistory)。从而判断出蓝色节点给出的应答数据是不是绿色节点所给数据的“祖先”。<ul><li>要么让客户端保存“版本戳记录”，要么由服务器节点来维护此记录，并且把它放在应答数据中，传给客户端。</li><li>用“版本戳记录”可以检测出数据“不一致”现象<ul><li>如果两份应答数据中的版本戳都无法在对方的“版本戳记录”中找到，那么就可以判定发生了“不一致”问题。</li></ul></li></ul></li><li>使用“时间戳”<ul><li>很难确保所有节点的时间都一致</li><li>无法检测“写人冲突”</li></ul></li></ul></li></ul><h2 id="数组式版本戳">数组式版本戳</h2><p><strong>数组式版本戳1</strong></p><ul><li>“数组式版本戳” (vector stamp)由一系列计数器组成，每个计数器都代表一个节点。</li><li>假设有三个节点(分别记为“蓝色(blue)、“绿色”(green)、“黑色”(black)),那么一个可能的“数组式版本戳”就类似<code>[blue: 43，green :54，black: 12]</code> 。</li><li>每当节点执行“内部更新”(internal update)操作时，就将其计数器加1，<ul><li>假设绿色节点执行了一次更新操作，那么现在这个“数组式版本戳”就成了<code>[blue: 43，green: 55， black: 12]</code></li></ul></li><li>只要两个节点通信，它们就同步其“数组式版本戳”。具体的同步方式有很多种。</li><li>使用此方案，就能辨别某个“数组式版本戳”是否比另外一个新，因为版本戳中的计数器总是大于或等于旧版本戳。<ul><li>比如，<code>[blue: 1，green: 2，black: 5]</code>就比<code>[blue: 1, green: 1, black: 5]</code>新</li></ul></li></ul><p><strong>数组式版本戳2</strong></p><ul><li>若两个版本戳中都有一个计数器比对方大，那么就发生了“<strong>写入冲突</strong>”<ul><li>比如，<code>[blue: 1,green:2，black: 5]</code>与<code>[blue: 2，green: 1，black: 5]</code>相冲突</li></ul></li><li>数组中可能缺失某些值，我们将其视为0。<ul><li>比如，<code>[blue: 6, black: 2]</code>与<code>[blue: 6，green: 0，black: 2]</code>等价。</li><li>需要弃用现有的“数组式版本戳”，就可以向其中轻易新增节点。</li></ul></li><li>“数组式版本戳”是一种能够侦测出“不一致”现象的有用工具，然而它们无法解决此问题。要想解决冲突，就得依赖领域知识。</li><li>在“一致性”与延迟之间权衡时。<ul><li>如果偏向“一致性”，那么系统在出现“网络分区”现象时就无法使用</li><li>反之，若要减少延迟，则必须自己检测并处理“不一致”问题</li></ul></li></ul><h1 id="ch-71-键值数据库">ch 71 键值数据库</h1><h2 id="键值数据库">键值数据库</h2><p><strong>键值数据库1</strong></p><ul><li>键值数据库(key-value store)是一张简单的哈希表(hashtable)，主要用在所有数据库访问均通过主键(primary key)来操作的情况下。<ul><li>可把此表想象成传统的“关系” 该关系有两列：ID与NAME</li><li>ID列代表关键字，NAME列存放值。NAME列仅能存放String型的数据。</li><li>应用程序可提供ID及VALUE值，并将这一键值对持久化</li><li>假如ID已存在，就用新值覆盖当前值，否则就新建一条数据</li></ul></li></ul><p><img src="https://s2.loli.net/2022/05/27/5aDcEORvqTMlwtS.png"></p><p><strong>键值数据库2</strong></p><ul><li>键值数据库是最简单的NoSQL数据库。</li><li>客户端可以根据键查询值，设置键所对应的值，或从数据库中删除键。<ul><li>“值”只是数据库存储的一块数据而已，它并不关心也无需知道其中的内容</li><li>应用程序负责理解所存数据的含义。</li></ul></li><li>由于键值数据库总是通过主键访问，所以它们一般性能较高，且易于扩展。</li><li>流行的键值数据库有:Riak、Redis（数据结构服务器）、 MemcachedDB及其变种、Berkeley DB、HamsterDB (尤其适合嵌入式开发) 、 AmazonDynamoDB (不开源)和Project Voldemort (Amazon DynamoDB的开源实现)</li></ul><h2 id="数据结构服务器">数据结构服务器</h2><ul><li>在键值数据库中，所存储的聚合不一定是领域对象(domainobject)，也可以拥有通用数据结构</li><li>Redis能够存储list、set、hash等数据结构，可以支持“获取某个范围内的数值"(range)、“求差集”(diff)、“求并集”(union)、 “求交集”( intersection) 等操作</li><li>这些功能使数据库的用途变得比标准键值数据库更多</li></ul><h2 id="单一存储区">单一存储区</h2><p><strong>单一存储区</strong> <strong>1</strong></p><ul><li>存储区（bucket）用于区隔关键字的一种手段，可以将其视为存放关键字所用的”平坦命名空间“（flatnamespace）</li><li>使用单一存储区，把所有数据放入一个对象里，并将其存入单一的存储区中</li></ul><p><img src="https://s2.loli.net/2022/05/31/xGmDR5S2nyAjPdu.png"></p><p><strong>单一存储区 2</strong></p><ul><li>将各类对象（也就是聚合)全部存放在一个存储区中，缺点是：存储区中可能要存放类型不同的多个聚合，这增加了关键字的冲突的几率</li><li>还有一种方法，把对象名放在键名后面<ul><li>例如 288790b8a421_ userProfile，这样就可用它查出所需的单个对象了</li></ul></li></ul><p><img src="https://s2.loli.net/2022/05/31/VygB8dRYMEG6K7r.png"></p><h2 id="领域存储区">领域存储区</h2><ul><li>领域存储区（domain bucket）来存放特定数据</li><li>客户端驱动程序可以对其执行序列化和反序列化操作(serialization anddeserialization)</li><li>将跨越多个存储区的数据分割成对象，将之存放在领域存储区或不同的存储区中，这样无需该改变关键字的命名方式，即可读出所需对象</li><li>存放表达相同含义的不同聚合方案，以应对多种不同应用的需求<ul><li>效率及数据不一致性问题</li></ul></li></ul><h2 id="一致性">一致性</h2><p><strong>一致性 1</strong></p><ul><li>只有针对单个键的操作才具备“一致性”，因为这种操作只可能是“获取”、“设置”或“删除”。<ul><li>由于数据库无法侦测数值改动， “乐观写入”(optimisticwrite)功能的实现成本太高。</li></ul></li><li>分布式键值数据库，用“最终一致性模型” 实现“一致性”。<ul><li>两种解决“更新冲突”的办法:<ul><li><strong>采纳新写入的数据而拒绝旧数据</strong></li><li>将<strong>两者(或存在冲突的所有数据)返回给客户端</strong>，令其解决冲突</li></ul></li></ul></li></ul><p><strong>一致性 2</strong></p><ul><li>在创建存储区时设置与一致性有关的选项<ul><li>若想提高数据一致性，可以规定，执行完写入操作后，只有当存放此数据的全部节点一致将其更新，才认定该操作生效<ul><li>显然降低了集群的写入效率</li></ul></li><li>若想提高写入冲突或读取冲突的解决速度，可在创建“存储区”时设置为数据库接纳最新的写入操作，而不再创立“旁系记录”(sibling)</li></ul></li></ul><h2 id="事务">事务</h2><ul><li>不同类型的键值数据库，其“事务”规范也不同，实现“事务”的方式各异。一般说来，无法保证写入操作的“一致性"。</li><li>Riak在调用写入数据的API时，它使用W值与复制因子来实现“仲裁”。<ul><li>假设某个集群的复制因子是5，而W值为3。</li><li>在写入数据时，必须有至少3个节点汇报其写入操作已顺利完成，数据库才会认为此操作执行完毕。</li><li>由于N等于5而W是3，所以集群在两个节点(N-W=2)故障时仍可执行写入操作，不过，此时我们无法从那些发生故障的节点中读取某些数据</li></ul></li></ul><h2 id="查询功能">查询功能</h2><ul><li>所有的键值数据库都可以按关键字查询，他们的查询功能基本仅限于此</li><li>如果希望根据（值列）valuecolumn的某些属性来查询，那么无法用数据库来完成此操作<ul><li>应用程序需要自己读出值，来判断其属性是否符合查询条件</li></ul></li><li>如果不知道关键字怎么办<ul><li>大部分数据库都不提供主键列表，即使提供了，获取关键字列表并查询值的操作也很繁琐</li><li>某些键值数据库支持数值搜索，以解决此问题</li></ul></li><li>通过API、HTTP(浏览器，Curl等)，操作键值数据库</li></ul><h2 id="键名的设计">键名的设计</h2><ul><li>使用键值数据库时，通过某种算法生成键<ul><li>使用用户信息(例如ID、电子邮件地址等)、时间戳等值，生成键</li></ul></li><li>键值数据库非常适合保存会话(用会话ID作为键)、购物车数据、用户配置等信息</li></ul><h2 id="数据结构">数据结构</h2><ul><li>键值数据库不关心键值对里的值，可以是二进制块，文本，JSON，XML等</li><li>可在HTTP请求中使用Content-Type指定数据类型<ul><li>实质上时由应用判定其内容</li></ul></li></ul><h2 id="可拓展性">可拓展性</h2><p><strong>可拓展性 1</strong></p><ul><li>很多键值数据库都可用“分片”技术扩展。采用此技术后，键的名字就决定了负责存储该键的节点。<ul><li>假设按照键名的首字母“分片”。如果键名是<code>f4b19d79587d</code>，那么由于其首字母为f,所以存放它的节点就与存放<code>ad9c7a396542</code>这个键的节点不同。</li><li>当集群中的节点数变多时，这种“分片”设定可提高效率。</li></ul></li><li>“分片”也会引发某些问题。假如存放首字母为f的键所用的那个节点坏了，那么其上的数据将无法访问，而且也不能再写入其他键名首字母为f的新数据了</li></ul><p><strong>可拓展性 2</strong></p><ul><li>可以控制“CAP定理” 中的参数:<ul><li>N (存放键值对的副本节点数)</li><li>R (顺利完成读取操作所需的最小节点数)</li><li>W (顺利完成写入操作所需的最小节点数)。</li><li>假设集群有5个节点。将N设为3，意思就是所有数据都至少要复制到3个节点中，将R设为2，意思是GET请求要有两个节点应答，才能成功，将W设为2,意思是PUT请求必须写入两个节点，才算执行完毕。</li></ul></li><li>可以利用这些设置来微调读取及写入操作所能容忍的故障节点数。应该按照应用的需要来改变这些值，以提升数据库的“可读能力”(readavailability) 及“可写能力”(writeavailability)。通常应该根据“一致性”需求来确定W值。</li><li>创建“存储区”时可设定上述各参数的默认值</li></ul><h2 id="适用案例-存放会话信息"><strong>适用案例-存放会话信息</strong></h2><ul><li>通常来说，每一次网络会话都是唯一的，所以分配给它们的<code>sessionid</code>值也各不相同。</li><li>如果应用程序原来要把<code>sessionid</code>存在磁盘上或关系型数据库中，那么将其迁移到键值数据库之后，会获益良多<ul><li>因为全部会话内容都可以用一条<code>PUT</code>请求来存放，而且只需一条<code>GET</code>请求就能取得。</li><li>由于会话中的所有信息都放在一个对象中，所以这种“单请求操作”(single-requestoperation) 很迅速</li></ul></li></ul><h2 id="适用案例-用户配置信息">适用案例-用户配置信息</h2><ul><li>用户配置信息，几乎每位用户都有<code>userId</code>、<code>username</code>或其他独特的属性，而且其配置信息也各自独立，诸如语言、颜色、时区、访问过的产品等。</li><li>这些内容可全部放在一个对象里，以便只用一次GET操作即获取某位用户的全部配置信息。</li><li>同理，产品信息也可如此存放</li></ul><h2 id="适用案例-购物车数据"><strong>适用案例-购物车数据</strong></h2><ul><li>购物车数据，电子商务网站的用户都与其购物车相绑定。</li><li>由于购物车的内容要在不同时间、不同浏览器、不同电脑、不同会话中保持一致，所以可把购物信息放在<code>value</code>属性中，并将其绑定到<code>userid</code>这个键名上</li></ul><h2 id="不适用场合"><strong>不适用场合</strong></h2><p><img src="https://s2.loli.net/2022/05/31/rDtRfecOZ6hkSvb.png" alt="不适用场合"></p><h1 id="ch-72-文档数据库">ch 72 文档数据库</h1><h2 id="文档数据库"><strong>文档数据库</strong></h2><p><strong>文档数据库 1</strong></p><ul><li>文档 （document）是文档数据库中的主要概念<ul><li>其格式可以是XML,JSON,BSON等</li><li>文档具备自述性（self-describing），呈现分层的树状数据结构（hierarchicaltree data structure），可以包含映射表，集合和标量值</li></ul></li><li>文档彼此相似，但不必完全相同，文档数据库所存放的文档，就相当于键值数据库所存放的值</li><li>文档数据库可视为其值可查的键值数据库</li></ul><p><img src="https://s2.loli.net/2022/05/31/9VOAhm7cFEyQR3T.png"></p><p><strong>文档数据库 2</strong></p><ul><li><strong>文档数据库</strong>中，放在同一“集合”内的各文档的“数据模式”(theschema of the data)可以不同<ul><li><strong>关系型数据库</strong>中，表格中每行数据的模式都要相同。</li></ul></li><li>文档中可以嵌套数组等基本数据类型，也可以将“子文档”(child document)以“子对象”(subobject) 的形式嵌入主文档。</li><li>由于没有“数据模式”约定，文档数据库的文档中无需空属性，若其中不存在某属性，就假定该属性值未设定或与此文档无关。向文档中新增属性时，既无需预先定义，也不用修改已有文档内容。<ul><li><strong>关系型数据库</strong>中，需要定义表中的每一列，而且若某条记录中的某列没有数据，则要将其留空(empty)或设为null。</li></ul></li><li>流行的文档数据库有: MongoDB、CouchDB、Terrastore、OrientDB、RavenDB和Lotus Notes</li></ul><h2 id="一致性-1">一致性</h2><ul><li>通过配置“副本集”(replica set) 实现“复制”，以提供较高的“可用性”</li><li>规定写入操作必须等待所写数据复制到全部或是给定数量的从节点之后，才能返回。从而指定数据库的“一致性”强度。</li><li>在只有一台服务器时如果指定w为“majority”，那么写入操作立刻就会返回，因为总共只有一个节点。</li><li>假设“副本集”中有三个节点，则写入操作必须在至少两个节点上执行完毕，才会视为成功</li><li>提升w值可以增强“一致性”，但是会降低写入效率，因为写入操作必须在更多的节点上完成才行。</li><li>也可以增加“副本集”的读取效率:设置slaveOk选项之后，就可以于从节点中读取数据了。</li><li>参数既可设置到整个"连接”、“数据库”、“集合”之上，也可针对每项操作独立设置</li></ul><h2 id="事务-1">事务</h2><ul><li>大多数文档数据库通常<strong>没有事务机制</strong>:其写入操作要么成功，要么失败。</li><li>“单文档级别”(single-document level)的“事务”叫做“原子事务”(atomictransaction)。</li><li>可以用不同级别的<code>WriteConcern</code>参数来确保各种安全级别的写入操作<ul><li>在默认情况下，所有写入操作都将顺利执行。</li><li>以<code>WriteConcern.REPLICAS_SAFE</code>为参数写入,即可确保该操作至少要写入两个节点才算成功。</li><li>在写日志条目(logentry)时，就可使用最低的安全级别，也就是<code>WriteConcern.NONE</code></li></ul></li></ul><h2 id="可用性">可用性</h2><p><strong>可用性 1</strong></p><ul><li>文档数据库可以用主从式数据复制技术来增强“可用性”。多个节点都保有<strong>同一份数据</strong>，即便主节点故障，客户端也依然能获取数据。应用程序代码一般不需检测主节点是否可用。</li><li><code>MongoDB</code>通过“副本集”实现“复制”，以提供较高的“可用性”。副本集中至少有两个节点参与“<strong>异步主从式复制</strong>”(asynchronousmaster-slave replication)。<ul><li>“副本集”通常用于处理<code>“数据冗余”( data redundancy)</code>、<code>“自动故障切换”( automated failover)</code>、<code>“读取能力扩展”(read scaling)</code>、<code>“无需停机的服务器维护( server maintenance without downtime)</code>和<code>“灾难恢复”(disaster recovery)</code>等事项。</li></ul></li><li>应用程序的写入或读取操作都针对主节点。建立连接后，应用程序只需要同“副本集”中的一个节点相连即可(是不是主节点无所谓)，数据库会自动找到其余节点。若主节点故障，则数据库驱动会同“副本集”中新选出的主节点联系。应用程序不用处理通信错误，也无需干预主节点的选拔准则</li></ul><p><strong>可用性 2</strong></p><ul><li>副本集在其内部选举“主”(master)节点，或“主要”(primary)节点。假定所有节点投票权相同，其中某些节点可能会因为距离其他服务器较近，或具有更多运行内存(RAM)等因素而获得更多选票。用户也可以为节点指定一个值在0~ 1000之间的优先级( priority)来影响选举过程。</li><li><strong>所有请求都由主节点处理，而其数据会复制到从节点</strong>。若主节点故障，则“副本集”中剩下的节点就会在其自身范围内选出新的主节点，所有后续请求就交由新的主节点处理，从节点也开始从新的主节点处获取数据。</li><li>当原来的主节点<strong>从故障中恢复</strong>时，<strong>它会作为从节点重新加入</strong>，并获取全部最新数据，以求与其他节点一致</li></ul><p><img src="https://s2.loli.net/2022/05/31/n9yL6JzqSmpxPNQ.png"></p><h2 id="查询功能-1">查询功能</h2><ul><li>文档数据库可以查询文档中的数据，而不像键值数据库（必须根据关键字获取整个文档，然后再检视其内容）</li><li><code>CouchDB</code>:可用“<strong>物化视图</strong>”(materializedview)或“<strong>动态视图</strong>”(dynamic view)实现复杂的文档查询</li><li><code>MongoDB</code>支持一种JSON格式的查询语言<ul><li>由于文档是“<strong>聚合对象</strong>”(aggregatedobject)，所以用带子对象的字段查询待匹配的文档非常方便</li></ul></li></ul><h2 id="可拓展性-1">可拓展性</h2><p><strong>可拓展性 1</strong></p><ul><li>在不将数据库进行迁移的前提下，向其中新增节点或修改其内容。</li><li>增加更多的“<strong>读取从节点</strong>”(readslave)，将读取操作导引至从节点上，这样就可以扩展数据库应对频繁读取的能力了。<ul><li>假设某个应用程序的读取操作很频繁，可向“副本集”中加入更多从节点，并在执行读取操作时设定<code>slaveOk</code>标志，以提升集群的读取能力。完成读取操作的横向扩展</li></ul></li></ul><p><img src="../../../../../../AppData/Roaming/Typora/typora-user-images/image-20220531225724997.png"></p><p><strong>可拓展性 2</strong></p><ul><li>如果想扩展写入能力，可以把数据“分片” 。<ul><li>“分片”与关系型数据库的“分区”类似，<ul><li>“分区”是根据某列的值，例如状态或年份，将数据分割开。关系型数据库的“分区”通常位于同一节点，所以客户端应用程序只查询“基表”(basetable)就好，不需查询某个特定分区，关系型数据库会根据查询内容搜索适当的分区并返回数据。</li><li>“分片”操作也根据特定字段来划分数据，然而那些数据要移动到不同的<code>Mongo</code>节点中。为了让各“分片”的负载保持均衡，需要在节点之间动态转移数据。向集群中新增更多节点，并提高可写入的节点数，就能横向扩展其写入能力。</li></ul></li></ul></li><li>“分片”的关键字很重要。<ul><li>按照客户名字(firstname)来分隔，可确保将数据平衡地散布在各个“分片”上，以获得较好的写入效率。</li><li>如果想把“分片”放在距离用户近的地方，那么可以以用户位置来分片。按客户位置分片时，美国东海岸的全部用户数据都会放在居于东海岸的“分片”中，而所有西海岸的用户数据则将放在位于西海岸的“分片”中</li></ul></li></ul><p><strong>可拓展性 3</strong></p><ul><li>可以把每个"分片”都做成“副本集”，以提高其读取效率。</li><li>如果向已有的“<strong>分片集群</strong>”(shardedcluster)中再加一个新分片”，就可以把原来分布在3个“分片”中的数据打散到4个“分片”中。<ul><li>在转移数据与底层设施重构的全过程中，虽说集群为了重新平衡“分片”负载而传输大量数据时性能也许会下降，但是应用程序却无需停止工作</li></ul></li></ul><p><img src="../../../../../../AppData/Roaming/Typora/typora-user-images/image-20220531225944681.png"></p><h2 id="适用案例-事件记录"><strong>适用案例-事件记录</strong></h2><ul><li>在企业级解决方案中，许多不同的应用程序都需要记录事件。应用程序对事件记录各有需求。</li><li>文档数据库可以把所有这些不同类型的事件都存起来，并作为事件存储的“<code>中心数据库</code>”(centraldata store)使用。</li><li>如果事件捕获的数据类型一直在变，那么就更应该用文档数据库了。</li><li>可以按照触发事件的应用程序名“分片”，也可以按照order_processed或customer_logged等事件类型“分片”</li></ul><h2 id="适用案例-其他"><strong>适用案例-其他</strong></h2><ul><li>内容管理系统 及博客平台<ul><li>由于文档数据库没有“预设模式”(predefinedschema)，而且通常支持JSON文档，所以它们很适合用在“内容管理系统”(contentmanagementsystem)及网站发布程序上，也可以用来管理用户评论、用户注册、用户配置和面向Web文档(web-facingdocument)。</li></ul></li><li>网站分析 与 实时分析<ul><li>文档数据库可存储实时分析数据。由于可以只更新部分文档内容，所以用它来存储“页面浏览量”(pageview)或“独立访客数”( uniquevisitor)会非常方便，而且无需改变模式即可新增度量标准。</li></ul></li><li>电子商务应用程序<ul><li>电子商务类应用程序通常需要较为灵活的模式，以存储产品和订单。同时，它们也需要在不做高成本数据库重构及数据迁移的前提下进化其数据模型</li></ul></li></ul><h2 id="不适用场合-1"><strong>不适用场合</strong></h2><ul><li>包含<strong>多项操作的复杂事务</strong></li><li>文档数据库也许不适合执行“跨文档的原子操作”(atomic cross-documentoperation)，虽然像RavenDB等文档数据库其实也支持此类操作。</li><li>查询<strong>持续变化的聚合结构</strong><ul><li>灵活的模式意味着数据库对模式不施加任何限制。数据以“应用程序实体”(applicationentity)的形式存储。</li><li>如果要即时查询这些持续改变的实体，那么所用的查询命令也得不停变化(用关系型数据库的术语讲，就是:用JOIN语句将数据表按查询标准连接起来时，待连接的表一直在变)。</li><li>由于数据保存在聚合中，所以假如聚合的设计持续变动，那么就需要以“最低级别的粒度”(lowest level ofgranularity)来保存聚合了，这实际上就等于要统一数据格式了。在这种情况下，文档数据库也许不合适</li></ul></li></ul><h1 id="ch-73-列族数据库">ch 73 列族数据库</h1><h2 id="列祖数据库">列祖数据库</h2><ul><li>列族数据库，可以存储关键字及其映射值,并且可以把值分成多个列族，让每个列族代表一张数据映射表(mapof data)。</li><li>Cassandra是一款流行的列族数据库，采用对等集群，能快速执行跨集群写入操作并易于对此扩展。</li><li>此外还有HBase、Hypertable 和 Amazon DynamoDB等其他产品。</li></ul><p><img src="https://s2.loli.net/2022/06/13/QE9cPGNWegFR5xu.png"></p><ul><li>列族数据库将数据存储在列族中，而列族里的行则把许多列数据与本行的“行键”(rowkey)关联起来。</li></ul><p><img src="https://s2.loli.net/2022/06/13/s3yTtRkv5umqljS.png"></p><h2 id="数据结构-1">数据结构</h2><p><strong>数据结构1</strong></p><ul><li>Cassandra的基本存储单元为“列”，列由一个“名值对”(name-valuepair)组成，其中的名字也充当关键字。</li><li>每个键值对都占据一列，并且都存有一个“时间戳”值。令数据过期、解决写入冲突、处理陈旧数据等操作都会用到时间戳。若某列数据不再使用，则数据库可于稍后的“压缩阶段”(compactionphase)回收其所占空间。</li><li>行是列的集合，这些列都附在某个关键字名下，或与之相连。由相似行所构成的集合就是列族。</li><li>每个列族都可以与关系型数据库的“行容器”(container of rows)相对照:<ul><li>两者都用关键字标识行，并且每一行都由多个列组成。</li><li>其差别在于，列族数据库的各行不一定要具备完全相同的列，并且可以随意向其中某行加入一列，而不用把它添加到其他行中</li></ul></li></ul><p><strong>数据结构2</strong></p><ul><li>“标准列族”(standard column family)中的列都是“简单列”(simple column)。</li><li>“超列族”(super column family)：<ul><li>如果某列中包含一个由小列组成的映射表，那么它就是“超列”(supercolumn)。可将超列视为“列容器”(container of columns)。</li><li>用超列构建的列族叫做“超列族” 。</li><li>超列族适合将相关数据存在一起。但是，如果部分列在大部分情况下都用不到，则存在不必要的开销。</li></ul></li><li>“键空间”(keyspace)与关系型数据库中的“数据库”类似，与应用程序有关的全部列族都存放于此。<ul><li>必须先创建键空间，才能为其增添列族</li></ul></li></ul><h2 id="一致性-2">一致性</h2><p><strong>一致性1</strong></p><ul><li>Cassandra收到写入请求后，会先将待写数据记录到“提交日志”(commitlog)中，然后将其写入内存里一个名为“内存表”(memtable)的结构中。写入操作在写入“提交日志”及“内存表”后，就算成功了。</li><li>写入请求成批堆积在内存中，并定期写入一种叫做“SSTable”的结构中。该结构中的缓存一旦写入数据库，就不会再向其继续写入了。</li><li>若其数据变动，则需新写一张SSTable。</li><li>无用的SSTable可由“压缩”( compaction)操作回收</li></ul><p><strong>一致性2</strong></p><ul><li>若不关心数据是否陈旧，或是需要高效执行读取操作，那么可以将“一致性”设为ONE，以低级别的“一致性”执行读取操作。那么当Cassandra收到读取请求后，会返回第一个副本中的数据<ul><li>即便其是陈旧数据，也照样返回。</li><li>如发现数据陈旧，则启动“读取修复”(read repair)过程</li></ul></li><li>若需要极为高效的写入操作，并且不介意丢失某些写入的数据，那么可以将“一致性”设为ONE，以最低的“一致性”执行写入操作。那么Cassandra只将其写入一个节点的“提交日志”中，然后就向客户端返回响应。<ul><li>此时，如果某节点在尚未将写入的数据复制到其他节点前出了故障，那么这些数据就会丢失</li></ul></li></ul><p><strong>一致性3</strong></p><ul><li>若将读取与写入操作的“一致性”都设为QUORUM<ul><li>那么读取操作将在过半数的节点响应之后，根据时间戳返回最新的列数据给客户端，并通过“读取修复”操作把最新数据复制到那些陈旧的副本中</li><li>而“一致性”为QUORUM的写入操作则必须等所写数据传播至过半数的节点后，才能顺利结束其工作并通知客户端。</li></ul></li><li>如果将“一致性”级别设为ALL，那么全部节点就必须响应读取或写入操作<ul><li>这将使集群失去容错能力：一旦某个节点故障，全部读取操作或写入操作都将阻塞并失败。</li></ul></li><li>系统设计师应根据应用程序需求调整“一致性”级别，同一应用程序内部也会有不同的“一致性”需求，所以也可以针对每次操作来设定其“一致性”。<ul><li>例如，显示产品评论所需的“一致性”，就与读取客户所下最新订单状态不同</li></ul></li></ul><p><strong>一致性4</strong></p><ul><li>在创建“键空间”时，可以配置存储数据用的副本数，它决定了数据的“复制因子”。</li><li>若复制因子为3，则数据将复制至3个节点上。使用Cassandra写入及读取数据时，若将“一致性”设为2，则R+W的值就会大于复制因子(2+2&gt;3)，这使得读取操作与写入操作的“一致性”都比较好。</li><li>可以在“键空间”上执行“节点修复”(noderepair)命令，这会迫使Cassandra将其负责的每一个关键字与其余副本相比对。<ul><li>由于此操作开销较大，所以有时可以只修复一个或一组列族。</li></ul></li><li>若某节点故障，则其存储数据会移交给其他节点。而当它重新上线时，数据库会把变更后的数据交还此节点。这种技术叫做“提示移交”(hintedhandoff)，它可以帮助故障节点更快地恢复</li></ul><h2 id="事务-2">事务</h2><ul><li>Cassandra没有传统意义上的“事务”（即封装多个写入操作并决定是否提交其数据变更的单元）。</li><li>Cassandra 的写入操作在“行”级别是“原子的”<ul><li>根据某个给定的行键向行中插入或更新多个列，将算作一个写入操作，它要么成功，要么失败。</li><li>写入操作首先会写在“提交日志”及“内存表”中，只有它向这两者写入数据后，才算顺利执行完</li><li>假如某节点故障，稍后可根据“提交日志”将数据变更恢复至该节点中，这与Oracle数据库中的“重做日志”(redolog) 类似。</li></ul></li><li>可用ZooKeeper等外部的“事务”程序库同步读写操作。还有Cages等程序库可把ZooKeeper形式的“事务”封装起来</li></ul><h2 id="可用性-1">可用性</h2><p><strong>可用性1</strong></p><ul><li>因为集群里没有主节点，其中每个节点地位等同。</li><li>在“一致性”与“可用性”之间做出明智的权衡。减少操作请求的“一致性”级别，即可提升集群“可用性”。</li><li>(R+W) &gt;N。<ul><li>W是成功执行写入操作所需的最小节点数</li><li>R是顺利执行读取操作所需获取的最小应答节点数</li><li>N是参与数据复制的节点数。</li><li>对于某定值N，可改变R与W的值，以调整“可用性”</li></ul></li></ul><p><strong>可用性2</strong></p><ul><li>假设在10节点的Cassandra集群中，有一个复制因子为3的“键空间”(N=3)。<ul><li>如果R=2且W=2，那么(2+2)&gt;3。在此情况下，若有一个节点故障，则不影响“可用性”，因为数据还可以从其他两个节点中获得。</li><li>若W=2而R=1，则集群在两个节点故障时将无法写入，但仍可读取。</li><li>若R=2而W=1，则集群在两个节点故障时仍可写入，但无法读取。</li></ul></li><li>“键空间”与“读/写操作”应该按照需求来设置：要么提高写入操作的“可用性”，要么提高读取操作的“可用性”</li></ul><h2 id="查询功能-2">查询功能</h2><p><strong>查询功能1</strong></p><ul><li>由于Cassandra没有功能丰富的查询语言，所以在设计其数据模型时，应该优化列与列族，以提升数据读取速度。<ul><li>在列族中插入数据后，每行中的数据都会按列名排序。</li><li>假如某一列的获取次数比其他列更频繁，那么为了性能起见，应该将其值用作行键。</li></ul></li><li>基本操作：<ul><li>指定“键空间”作为查询范围</li><li>通过CREATE定义列族</li><li>通过SET向列族插入数据或更新数据</li><li>通过GET获取整个列族或列族所需的一列</li><li>通过DEL删去一列或整个列族</li></ul></li></ul><p><strong>查询功能2</strong></p><ul><li>高级查询与索引编订：<ul><li>Cassandra的列族可以用关键字之外的其他列当索引。</li><li>然后直接通过索引进行查询</li><li>索引以“位映射图”(bit-mapped)的形式实现，在列中频繁出现重复数值的情况下，性能较好。</li></ul></li><li>Cassandra查询语言(CQL)，Cassandra支持一种类似SQL命令的查询语言，叫做“Cassandra查询语言”(CassandraQuery Language，简称CQL)。<ul><li>CQL命令可以创建列族，插入数据，读取读出全部列或者只读取需要的列，为列创立索引，并根据索引查询数据</li><li>CQL中还有很多查询数据的功能，不过它并未包含SQL的全部功能。CQL不支持“连接”(JOIN)及“子查询”(subquery)，而且其where子句通常也比较简单</li></ul></li></ul><h2 id="可拓展性-2">可拓展性</h2><ul><li>在已有的Cassandra集群中扩展，也就意味着增加更多节点。</li><li>由于不存在主节点，所以向集群中新增节点后，即可改善其服务能力，令其可以处理更多的写入及读取操作</li><li>这种横向扩展可以尽力提高其正常运行时间，因为集群在新增节点时，仍能处理客户端请求</li></ul><h2 id="适用案例-事件记录-1">适用案例-事件记录</h2><ul><li>由于列族数据库可存放任意数据结构，所以它很适合用来保存应用程序状态或运行中遇到的错误等事件信息。</li><li>在企业级环境下，所有应用程序都可以把事件写入Cassandra数据库。它们可以用appname:timestamp (应用程序名:时间戳)作为行键，并使用自己需要的列。</li><li>由于Cassandra的写入能力可扩展，所以在事件记录系统中使用它效果会很好</li></ul><p><img src="https://s2.loli.net/2022/06/13/R73YX8lLsbnSoFT.png"></p><h2 id="适用案例-内容管理和博客平台">适用案例-内容管理和博客平台</h2><ul><li>使用列族，可以把博文的“标签”(tag)、“类别”(category)、“链接"(link)和“trackback”日等属性放在不同的列中。</li><li>评论信息既可以与上述内容放在同一行，也可以移到另一个“键空间”。</li><li>同理，博客用户与实际博文亦可存于不同列族中</li></ul><h2 id="适用案例-其他-1">适用案例-其他</h2><ul><li>计数器<ul><li>在网络应用程序中，通常要统计某页面的访问人数并对其分类，以算出分析数据。此时可使用CounterColumnType来创建列族。</li><li>创建好列族后，可以使用任意列记录网络应用程序中每个用户访问每一页面的次数。</li><li>也可以用CQL增加计数器的值</li></ul></li><li>限期<ul><li>可能需要向用户提供试用版，或是在网站上将某个广告条显示一定时间。这些功能可以通过“带过期时限的列”(expiringcolumn)来完成。</li><li>这种列过了给定时限后，就会由Cassandra自动删除。这个时限叫做TTL (TimeTo Live，生存时间)，以秒为单位。</li><li>经过TTL指定的时长后，这种列就被删掉了。程序若检测到此列不存在，则可收回用户访问权限或移除广告条</li></ul></li></ul><h2 id="不适用场合-2">不适用场合</h2><ul><li>需要以“ACID事务”执行写入及读取操作的系统。</li><li>如果想让数据库根据查询结果来聚合数据(例如SUM(求和)或AVG(求平均值)),那么得把每一行数据都读到客户端，并在此执行操作。</li><li>在开发早期原型或刚开始试探某个技术方案时，不太适合用Cassandra。开发初期无法确定查询模式的变化情况，而查询模式一旦改变，列族的设计也要随之修改。这将阻碍产品创新团队的工作并降低开发者的生产能力。<ul><li>在关系型数据库中，数据模式的修改成本很高，而这却降低了查询模式的修改成本</li><li>Cassandra 则与之相反，改变其查询模式要比改变其数据模式代价更高</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> 数据管理基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据管理基础 </tag>
            
            <tag> NoSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DP入门</title>
      <link href="/2022/05/12/DP%E5%85%A5%E9%97%A8/"/>
      <url>/2022/05/12/DP%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="动态规划入门">动态规划入门</h1><blockquote><p>动态规划(Dynamic programming, 简称DP),通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。DP常常适用于有重叠子问题和最优子结构性质的问题,动态规划方法所消耗的时间往往远小于朴素解法。</p></blockquote><h2 id="基本思想与策略">基本思想与策略</h2><p>基本思想与分治法类似，也是将待求解的问题分解为若干个子问题（阶段），按顺序求解子阶段，前一子问题的解，为后一子问题的求解提供了有用的信息。在求解任一子问题时，列出各种可能的局部解，通过决策保留那些有可能达到最优的局部解，丢弃其他局部解。依次解决各子问题，最后一个子问题就是初始问题的解。</p><p>由于动态规划解决的问题<strong>多数有重叠子问题</strong>这个特点，为减少重复计算，对每一个子问题只解一次，将其<strong>不同阶段的不同状态</strong>保存在一个二维数组中。</p><p><em>一言以蔽之</em>：<strong>大事化小，小事化了。</strong></p><h2 id="分治与动态规划">分治与动态规划</h2><p><strong>共同点：</strong>两者都要求原问题具有最优子结构性质，都是将原问题分而治之，分解成若干个规模较小的子问题，然后将子问题的解合并，最终得到答案。</p><p><strong>不同点：</strong>分治法将分解后的子问题看成<strong>相互独立的</strong>，通常用递归来做。动态规划将分解后的子问题理解为<strong>相互间有联系</strong>，有重叠部分，需要记忆，通常用迭代来做。</p><h2 id="example">Example</h2><h3 id="编辑距离"><a href="https://leetcode.cn/problems/edit-distance/">72. 编辑距离</a></h3><p>给你两个单词 word1 和 word2， 请返回将 word1 转换成 word2所使用的最少操作数 。</p><p>你可以对一个单词进行如下三种操作：</p><p>插入一个字符 删除一个字符 替换一个字符</p><p><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：word1 = "intention", word2 = "execution"</span><br><span class="line">输出：5</span><br><span class="line">解释：</span><br><span class="line">intention -&gt; inention (删除 't')</span><br><span class="line">inention -&gt; enention (将 'i' 替换为 'e')</span><br><span class="line">enention -&gt; exention (将 'n' 替换为 'x')</span><br><span class="line">exention -&gt; exection (将 'n' 替换为 'c')</span><br><span class="line">exection -&gt; execution (插入 'u')</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><blockquote><p>0 &lt;= word1.length, word2.length &lt;= 500</p><p>word1 和 word2 由小写英文字母组成</p></blockquote><h3 id="思路">思路</h3><p>一眼DP（bushi）</p><ol type="1"><li>定义<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.543ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2892 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(520,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(1023,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1301,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1646,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(1924,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(2202,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(2614,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span><ol type="1"><li><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.543ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2892 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(520,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(1023,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1301,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1646,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(1924,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(2202,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(2614,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span> 代表<code>word1</code> 中前 <code>i</code> 个字符， 变换到<code>word2</code> 中前 <code>j</code> 个字符 最短需要的操作次数 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="51.314ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 22681 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(878,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1223,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1823,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mi" transform="translate(2651,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2996,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(3465,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(3826,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(4355,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4955,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(5388,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(5854,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(6243,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mi" transform="translate(6959,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(7444,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(7895,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mn" transform="translate(8415,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path></g><g data-mml-node="mi" transform="translate(9193,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(9662,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(10234,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(10663,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(11132,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(11493,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(11944,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(12333,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(12833,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(13277.7,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(13622.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(14011.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(14456.3,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mi" transform="translate(15172.3,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(15657.3,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(16108.3,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mn" transform="translate(16628.3,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path></g><g data-mml-node="mi" transform="translate(17406.3,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(17875.3,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(18447.3,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(18876.3,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(19345.3,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(19706.3,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(20157.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(20546.3,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(21046.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(21491,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(21903,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(22292,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></li><li>考虑 <code>word1</code> or <code>word2</code> 为空的情况，需要保留<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="15.898ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 7027 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(520,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(1023,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(1301,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(1801,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2079,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(2357,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(2769,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mi" transform="translate(3047,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">和</text></g><g data-mml-node="mi" transform="translate(4047,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(4567,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(5070,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(5348,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(5693,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(5971,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(6249,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(6749,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span></li></ol></li><li>状态转移<ol type="1"><li>增 <code>dp[i][j] = dp[i][j-1] + 1</code></li><li>删 <code>dp[i][j] = dp[i-1][j] + 1</code></li><li>改 <code>dp[i][j] = d[i-1][j-1] + 1</code></li><li>按顺序计算，当计算 <code>dp[i][j]</code>时，<code>dp[i - 1][j]</code> ， <code>dp[i][j - 1]</code> ，<code>dp[i - 1][j - 1]</code> 均已经确定了</li><li>配合增删改这三种操作，需要对应的 <code>dp</code>把操作次数加一，取三种的最小</li><li>如果刚好这两个字母相同 <code>word1[i - 1] = word2[j - 1]</code>，那么可以直接参考 <code>dp[i - 1][j - 1]</code> ，操作不用加一</li></ol></li></ol><h3 id="代码">代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minDistance</span><span class="params">(string word1, string word2)</span> </span>{</span><br><span class="line">        <span class="type">int</span> n = word1.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> m = word2.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m+<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) {</span><br><span class="line">            dp[i][<span class="number">0</span>] = i;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; j++) {</span><br><span class="line">            dp[<span class="number">0</span>][j] = j;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++){</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++){</span><br><span class="line">                dp[i][j] = <span class="built_in">min</span>(<span class="built_in">min</span>(dp[i][j<span class="number">-1</span>],dp[i<span class="number">-1</span>][j]),dp[i<span class="number">-1</span>][j<span class="number">-1</span>])+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(word1[i<span class="number">-1</span>]==word2[j<span class="number">-1</span>]) dp[i][j] = <span class="built_in">min</span>(dp[i][j],dp[i<span class="number">-1</span>][j<span class="number">-1</span>]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dp[n][m];</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">};</span><br></pre></td></tr></table></figure><h1 id="参考">参考</h1><p><a href="https://zhuanlan.zhihu.com/p/104520421">动态规划入门 - 知乎(zhihu.com)</a></p><p><a href="https://leetcode.cn/problems/edit-distance/solution/edit-distance-by-ikaruga/">【编辑距离】入门动态规划，你定义的dp 里到底存了啥 - 编辑距离 - 力扣（LeetCode）</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 常用算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双向队列</title>
      <link href="/2022/05/11/%E5%8F%8C%E5%90%91%E9%98%9F%E5%88%97/"/>
      <url>/2022/05/11/%E5%8F%8C%E5%90%91%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="双端单调队列">双端单调队列</h1><h2 id="滑动窗口最大值"><a href="https://leetcode.cn/problems/sliding-window-maximum/">239.滑动窗口最大值</a></h2><p>给你一个整数数组 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="5.699ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 2519 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1172,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2050,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g></svg></mjx-container></span>，有一个大小为 k的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k个数字。滑动窗口每次只向右移动一位。</p><p><em>返回 滑动窗口中的最大值</em> 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,3,-1,-3,5,3,6,7], k = 3</span><br><span class="line">输出：[3,3,5,5,6,7]</span><br><span class="line">解释：</span><br><span class="line">滑动窗口的位置                最大值</span><br><span class="line">---------------               -----</span><br><span class="line">[1  3  -1] -3  5  3  6  7       3</span><br><span class="line"> 1 [3  -1  -3] 5  3  6  7       3</span><br><span class="line"> 1  3 [-1  -3  5] 3  6  7       5</span><br><span class="line"> 1  3  -1 [-3  5  3] 6  7       5</span><br><span class="line"> 1  3  -1  -3 [5  3  6] 7       6</span><br><span class="line"> 1  3  -1  -3  5 [3  6  7]      7</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>提示：</strong></p><p>1 &lt;= nums.length &lt;= 105</p><p>-104 &lt;= nums[i] &lt;= 104</p><p>1 &lt;= k &lt;= nums.length</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">maxSlidingWindow</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>{</span><br><span class="line">        deque&lt;<span class="type">int</span>&gt;q; <span class="comment">//双端队列</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++){</span><br><span class="line">            <span class="keyword">while</span>(q.<span class="built_in">size</span>() &amp;&amp;  i - k + <span class="number">1</span> &gt; q.<span class="built_in">front</span>())  q.<span class="built_in">pop_front</span>(); <span class="comment">//判断队头是否在滑动窗口范围内</span></span><br><span class="line">            <span class="keyword">while</span>(q.<span class="built_in">size</span>() &amp;&amp; nums[i] &gt;= nums[q.<span class="built_in">back</span>()]) q.<span class="built_in">pop_back</span>();<span class="comment">//维护单调递减队列</span></span><br><span class="line">            q.<span class="built_in">push_back</span>(i); <span class="comment">//将当前元素插入队尾</span></span><br><span class="line">            <span class="keyword">if</span>(i &gt;= k - <span class="number">1</span>)  res.<span class="built_in">push_back</span>(nums[q.<span class="built_in">front</span>()]); <span class="comment">//滑动窗口的元素达到了k个，才可以将其加入答案数组中</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure><h2 id="其他参考">其他参考</h2><p><a href="https://freeeeeeeeedom.gitee.io/2022/05/09/单调栈/">单调栈-Freedom</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 常用算法 </category>
          
          <category> 板子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> 双向队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>序列化与反序列化</title>
      <link href="/2022/05/11/%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2022/05/11/%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="序列化和反序列化二叉搜索树"><a href="https://leetcode.cn/problems/serialize-and-deserialize-bst/">449.序列化和反序列化二叉搜索树</a></h1><p>序列化是将数据结构或对象转换为一系列位的过程，以便它可以存储在文件或内存缓冲区中，或通过网络连接链路传输，以便稍后在同一个或另一个计算机环境中重建。</p><p>设计一个算法来序列化和反序列化 <strong>二叉搜索树</strong> 。对序列化/反序列化算法的工作方式没有限制。您只需确保二叉搜索树可以序列化为字符串，并且可以将该字符串反序列化为最初的二叉搜索树。</p><p><strong>编码的字符串应尽可能紧凑</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Codec</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// Encodes a tree to a single string.</span></span><br><span class="line">    <span class="function">string <span class="title">serialize</span><span class="params">(TreeNode* root)</span> </span>{</span><br><span class="line">        string res;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; arr;</span><br><span class="line">        <span class="built_in">postOrder</span>(root,arr);</span><br><span class="line">        <span class="type">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++){</span><br><span class="line">            res += <span class="built_in">to_string</span>(arr[i])+<span class="string">'*'</span>;</span><br><span class="line">        }</span><br><span class="line">        res += <span class="built_in">to_string</span>(arr.<span class="built_in">back</span>());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Decodes your encoded data to tree.</span></span><br><span class="line">    <span class="function">TreeNode* <span class="title">deserialize</span><span class="params">(string data)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(data.<span class="built_in">size</span>()==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        vector&lt;string&gt; arr = <span class="built_in">split</span>(data,<span class="string">'*'</span>);</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; str:arr){</span><br><span class="line">            st.<span class="built_in">push</span>(<span class="built_in">stoi</span>(str));</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">construct</span>(INT_MIN,INT_MAX,st);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">postOrder</span><span class="params">(TreeNode* root,vector&lt;<span class="type">int</span>&gt;&amp; arr)</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">postOrder</span>(root-&gt;left,arr);</span><br><span class="line">        <span class="built_in">postOrder</span>(root-&gt;right,arr);</span><br><span class="line">        arr.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">split</span><span class="params">(<span class="type">const</span> string &amp;str, <span class="type">char</span> dec)</span> </span>{</span><br><span class="line">        <span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> start = <span class="number">0</span>;</span><br><span class="line">        vector&lt;string&gt; res;</span><br><span class="line">        <span class="keyword">while</span> (pos &lt; str.<span class="built_in">size</span>()) {</span><br><span class="line">            <span class="keyword">while</span> (pos &lt; str.<span class="built_in">size</span>() &amp;&amp; str[pos] == dec) {</span><br><span class="line">                pos++;</span><br><span class="line">            }</span><br><span class="line">            start = pos;</span><br><span class="line">            <span class="keyword">while</span> (pos &lt; str.<span class="built_in">size</span>() &amp;&amp; str[pos] != dec) {</span><br><span class="line">                pos++;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (start &lt; str.<span class="built_in">size</span>()) {</span><br><span class="line">                res.<span class="built_in">emplace_back</span>(str.<span class="built_in">substr</span>(start, pos - start));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">construct</span><span class="params">(<span class="type">int</span> lower,<span class="type">int</span> upper,stack&lt;<span class="type">int</span>&gt;&amp; st)</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(st.<span class="built_in">size</span>()==<span class="number">0</span> || st.<span class="built_in">top</span>() &lt; lower || st.<span class="built_in">top</span>() &gt; upper) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="type">int</span> val = st.<span class="built_in">top</span>();</span><br><span class="line">        st.<span class="built_in">pop</span>();</span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(val);</span><br><span class="line">        root-&gt;right = <span class="built_in">construct</span>(val,upper,st);</span><br><span class="line">        root-&gt;left  = <span class="built_in">construct</span>(lower,val,st);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    </span><br><span class="line">};</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>文艺复兴了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 常用算法 </category>
          
          <category> 板子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> 二叉搜索树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>猫鼠游戏</title>
      <link href="/2022/05/10/%E7%8C%AB%E9%BC%A0%E6%B8%B8%E6%88%8F/"/>
      <url>/2022/05/10/%E7%8C%AB%E9%BC%A0%E6%B8%B8%E6%88%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="猫和老鼠"><a href="https://leetcode.cn/problems/cat-and-mouse/">913.猫和老鼠</a></h1><blockquote><p>据说当时周赛国内没一个人ac</p></blockquote><p>两位玩家分别扮演猫和老鼠，在一张 无向图上进行游戏，两人轮流行动。</p><p>图的形式是：graph[a] 是一个列表，由满足 ab 是图中的一条边的所有节点 b组成。</p><p>老鼠从节点 1 开始，第一个出发；猫从节点 2 开始，第二个出发。在节点 0处有一个洞。</p><p>在每个玩家的行动中，他们 <strong>必须</strong>沿着图中与所在当前位置连通的一条边移动。例如，如果老鼠在节点 1，那么它必须移动到 graph[1] 中的任一节点。</p><p>此外，猫无法移动到洞中（节点 0）。</p><p>然后，游戏在出现以下三种情形之一时结束：</p><ul><li>如果猫和老鼠出现在同一个节点，猫获胜。</li><li>如果老鼠到达洞中，老鼠获胜。</li><li>如果某一位置重复出现（即，玩家的位置和移动顺序都与上一次行动相同），游戏平局。</li></ul><p>给你一张图 graph ，并假设两位玩家都都以最佳状态参与游戏：</p><ul><li>如果老鼠获胜，则返回 1；</li><li>如果猫获胜，则返回 2；</li><li>如果平局，则返回 0 。</li></ul><p><img src="https://s2.loli.net/2022/05/10/hVL8E3wtSqI4xHM.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：graph = [[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><blockquote><p>3 &lt;= graph.length &lt;= 50 1 &lt;= graph[i].length &lt;graph.length 0 &lt;= graph[ i ][ j ] &lt; graph.length graph[ i ][ j ]!= i</p><p>graph[i] 互不相同 猫和老鼠在游戏中总是移动</p></blockquote><h2 id="博弈知识介绍">博弈知识介绍</h2><p>这道题是博弈问题，猫和老鼠都按照<strong>最优策略</strong>参与游戏。</p><p>在阐述具体解法之前，首先介绍博弈问题中的三个概念：必胜状态、必败状态与必和状态。</p><p>对于特定状态，如果游戏已经结束，则根据结束时的状态决定必胜状态、必败状态与必和状态。</p><p>如果分出胜负，则该特定状态对于获胜方为必胜状态，对于落败方为必败状态。</p><p>如果是平局，则该特定状态对于双方都为必和状态。</p><p>从特定状态开始，如果存在一种操作将状态变成必败状态，则当前玩家可以选择该操作，将必败状态留给对方玩家，因此该特定状态对于当前玩家为必胜状态。</p><p>从特定状态开始，如果所有操作都会将状态变成必胜状态，则无论当前玩家选择哪种操作，都会将必胜状态留给对方玩家，因此该特定状态对于当前玩家为必败状态。</p><p>从特定状态开始，如果任何操作都不能将状态变成必败状态，但是存在一种操作将状态变成必和状态，则当前玩家可以选择该操作，将必和状态留给对方玩家，因此该特定状态对于双方玩家都为必和状态。</p><p>对于每个玩家，最优策略如下：</p><p><strong>争取将必胜状态留给自己，将必败状态留给对方玩家。</strong></p><p><strong>在自己无法到达必胜状态的情况下，争取将必和状态留给自己。</strong></p><h2 id="自顶向下动态规划解法介绍"><strong>自顶向下动态规划解法介绍</strong></h2><p>博弈问题通常可以使用<strong>动态规划</strong>求解。这道题由于数据规模的原因，动态规划方法不适用，因此只是介绍</p><p>。</p><blockquote><p>改日再战</p></blockquote><h1 id="猫和老鼠-ii"><a href="https://leetcode.cn/problems/cat-and-mouse-ii/">1728. 猫和老鼠II</a></h1><p>！shit！</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 博弈论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单调栈</title>
      <link href="/2022/05/09/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
      <url>/2022/05/09/%E5%8D%95%E8%B0%83%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<h1 id="单调栈">单调栈</h1><p><strong>任意一个元素找左边和右边第一个比自己大/小的位置，用<a href="https://so.csdn.net/so/search?q=单调栈&amp;spm=1001.2101.3001.7020">单调栈</a>。</strong></p><ul><li>单调栈主要可以用来解决区间最值问题</li><li>比如求一个一维数组的中某一个数的右边第一个比他大的元素或者元素下标。</li></ul><p><strong><a href="https://leetcode.cn/problems/daily-temperatures/">739.每日温度</a></strong></p><p>给定一个整数数组 temperatures ，表示每天的温度，返回一个数组 answer，其中 answer[i] 是指在第 i天之后，才会有更高的温度。如果气温在这之后都不会升高，请在该位置用 0来代替</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dailyTemperatures</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; temperatures)</span> </span>{</span><br><span class="line">        <span class="type">int</span> n = temperatures.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(n,<span class="number">0</span>)</span></span>;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++){</span><br><span class="line">            <span class="type">int</span> t = temperatures[i];</span><br><span class="line">            <span class="keyword">while</span>(!st.<span class="built_in">empty</span>() &amp;&amp; t &gt; temperatures[st.<span class="built_in">top</span>()]){</span><br><span class="line">                ans[st.<span class="built_in">top</span>()] = i - st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">            }</span><br><span class="line">            st.<span class="built_in">push</span>(i);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure><p>只需遍历一遍数组，极大减少了时间复杂度</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 常用算法 </category>
          
          <category> 板子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> 单调栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树的非递归遍历</title>
      <link href="/2022/05/09/%E6%A0%91%E7%9A%84%E9%9D%9E%E9%80%92%E5%BD%92%E9%81%8D%E5%8E%86/"/>
      <url>/2022/05/09/%E6%A0%91%E7%9A%84%E9%9D%9E%E9%80%92%E5%BD%92%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h1 id="树的非递归遍历">树的非递归遍历</h1><p>树有很多种遍历方法</p><ul><li>递归</li><li>借助栈迭代</li><li>莫里斯遍历</li><li>标记法</li></ul><p>在树的深度优先遍历中（包括前序、中序、后序遍历），递归方法最为直观易懂，但考虑到效率，我们通常不推荐使用递归。</p><p>栈迭代方法虽然提高了效率，但其嵌套循环却非常烧脑，不易理解，容易造成“一看就懂，一写就废”的窘况。而且对于不同的遍历顺序（前序、中序、后序），循环结构差异很大，更增加了记忆负担</p><h2 id="标记法">标记法</h2><p>所以，我们先来看<strong>颜色标记法</strong>，兼具栈迭代方法的高效，又像递归方法一样简洁易懂，更重要的是，这种方法对于前序、中序、后序遍历，能够写出完全一致的代码。</p><p>其<strong>核心思想</strong>如下：</p><p>使用颜色标记节点的状态，新节点为白色，已访问的节点为灰色。如果遇到的节点为白色，则将其标记为灰色，然后将其右子节点、自身、左子节点依次入栈。如果遇到的节点为灰色，则将节点的值输出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>{</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; result;</span><br><span class="line">        stack&lt;pair&lt;TreeNode*, <span class="type">int</span>&gt; &gt; stk;</span><br><span class="line">        stk.<span class="built_in">push</span>((<span class="built_in">make_pair</span>(root, <span class="number">0</span>)));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(!stk.<span class="built_in">empty</span>()) {</span><br><span class="line">            <span class="keyword">auto</span> [node, type] = stk.<span class="built_in">top</span>();</span><br><span class="line">            stk.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(node == <span class="literal">nullptr</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(type == <span class="number">0</span>) {</span><br><span class="line">                stk.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(node-&gt;right, <span class="number">0</span>));</span><br><span class="line">                stk.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(node, <span class="number">1</span>));</span><br><span class="line">                stk.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(node-&gt;left, <span class="number">0</span>));</span><br><span class="line">                <span class="comment">//这里以中序遍历为例，其余只需更改root的push顺序</span></span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> result.<span class="built_in">emplace_back</span>(node-&gt;val);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure><h2 id="迭代">迭代</h2><h3 id="前序遍历">前序遍历</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>{</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) {</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        stack&lt;TreeNode*&gt; stk;</span><br><span class="line">        TreeNode* node = root;</span><br><span class="line">        <span class="keyword">while</span> (!stk.<span class="built_in">empty</span>() || node != <span class="literal">nullptr</span>) {</span><br><span class="line">            <span class="keyword">while</span> (node != <span class="literal">nullptr</span>) {</span><br><span class="line">                res.<span class="built_in">emplace_back</span>(node-&gt;val);</span><br><span class="line">                stk.<span class="built_in">emplace</span>(node);</span><br><span class="line">                node = node-&gt;left;</span><br><span class="line">            }</span><br><span class="line">            node = stk.<span class="built_in">top</span>();</span><br><span class="line">            stk.<span class="built_in">pop</span>();</span><br><span class="line">            node = node-&gt;right;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure><h3 id="中序遍历">中序遍历</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>{</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        stack&lt;TreeNode*&gt; stk;</span><br><span class="line">        <span class="keyword">while</span> (root != <span class="literal">nullptr</span> || !stk.<span class="built_in">empty</span>()) {</span><br><span class="line">            <span class="keyword">while</span> (root != <span class="literal">nullptr</span>) {</span><br><span class="line">                stk.<span class="built_in">push</span>(root);</span><br><span class="line">                root = root-&gt;left;</span><br><span class="line">            }</span><br><span class="line">            root = stk.<span class="built_in">top</span>();</span><br><span class="line">            stk.<span class="built_in">pop</span>();</span><br><span class="line">            res.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">            root = root-&gt;right;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>复杂度分析</p><ul><li><p>时间复杂度：O(n)，其中 n为二叉树节点的个数。二叉树的遍历中每个节点会被访问一次且只会被访问一次。</p></li><li><p>空间复杂度：O(n)。空间复杂度取决于栈深度，而栈深度在二叉树为一条链的情况下会达到O(n) 的级别。</p></li></ul><h3 id="后序遍历">后序遍历</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode *root)</span> </span>{</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) {</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        stack&lt;TreeNode *&gt; stk;</span><br><span class="line">        TreeNode *prev = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">while</span> (root != <span class="literal">nullptr</span> || !stk.<span class="built_in">empty</span>()) {</span><br><span class="line">            <span class="keyword">while</span> (root != <span class="literal">nullptr</span>) {</span><br><span class="line">                stk.<span class="built_in">emplace</span>(root);</span><br><span class="line">                root = root-&gt;left;</span><br><span class="line">            }</span><br><span class="line">            root = stk.<span class="built_in">top</span>();</span><br><span class="line">            stk.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (root-&gt;right == <span class="literal">nullptr</span> || root-&gt;right == prev) {</span><br><span class="line">                res.<span class="built_in">emplace_back</span>(root-&gt;val);</span><br><span class="line">                prev = root;</span><br><span class="line">                root = <span class="literal">nullptr</span>;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                stk.<span class="built_in">emplace</span>(root);</span><br><span class="line">                root = root-&gt;right;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure><h2 id="morris遍历">Morris遍历</h2><p>对于一般的遍历算法，我们都是利用栈来存储之后需要再次访问的节点。最差情况下，我们需要存储整个二叉树节点。所以空间复杂度为O(n)。而Morris遍历则是将空间复杂度降到了O(1)级别。Morris遍历用到了“线索二叉树”的概念，其实就是利用了叶子节点的左右空指针来存储某种遍历前驱节点或者后继节点。因此没有使用额外的空间</p><h3 id="算法思想">算法思想</h3><h4 id="前序遍历-1">前序遍历</h4><p>假设当前节点为<code>cur</code>，并且开始时赋值为根节点<code>root</code>。</p><p>有一种巧妙的方法可以在线性时间内，只占用常数空间来实现前序遍历。这种方法由J. H. Morris 在 1979 年的论文「Traversing Binary Trees Simply andCheaply」中首次提出，因此被称为 Morris 遍历。</p><p>Morris遍历的核心思想是利用树的大量空闲指针，实现空间开销的极限缩减。其前序遍历规则总结如下：</p><ol type="1"><li>新建临时节点，令该节点为 root；</li><li>如果当前节点的左子节点为空，将当前节点加入答案，并遍历当前节点的右子节点；</li><li>如果当前节点的左子节点不为空，在当前节点的左子树中找到当前节点在中序遍历下的前驱节点：<ol type="1"><li>如果前驱节点的右子节点为空，将前驱节点的右子节点设置为当前节点。然后将当前节点加入答案，并将前驱节点的右子节点更新为当前节点。当前节点更新为当前节点的左子节点。</li><li>如果前驱节点的右子节点为当前节点，将它的右子节点重新设为空。当前节点更新为当前节点的右子节点。</li></ol></li><li>重复步骤 2 和步骤 3，直到遍历结束。</li></ol><p>这样我们利用 Morris遍历的方法，前序遍历该二叉树，即可实现线性时间与常数空间的遍历</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">class Solution {</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; preorderTraversal(TreeNode *root) {</span><br><span class="line">        vector&lt;int&gt; res;</span><br><span class="line">        if (root == nullptr) {</span><br><span class="line">            return res;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        TreeNode *p1 = root, *p2 = nullptr;</span><br><span class="line"></span><br><span class="line">        while (p1 != nullptr) {</span><br><span class="line">            p2 = p1-&gt;left;</span><br><span class="line">            if (p2 != nullptr) {</span><br><span class="line">                while (p2-&gt;right != nullptr &amp;&amp; p2-&gt;right != p1) {</span><br><span class="line">                    p2 = p2-&gt;right;</span><br><span class="line">                }</span><br><span class="line">                if (p2-&gt;right == nullptr) {</span><br><span class="line">                    res.emplace_back(p1-&gt;val);</span><br><span class="line">                    p2-&gt;right = p1;</span><br><span class="line">                    p1 = p1-&gt;left;</span><br><span class="line">                    continue;</span><br><span class="line">                } else {</span><br><span class="line">                    p2-&gt;right = nullptr;</span><br><span class="line">                }</span><br><span class="line">            } else {</span><br><span class="line">                res.emplace_back(p1-&gt;val);</span><br><span class="line">            }</span><br><span class="line">            p1 = p1-&gt;right;</span><br><span class="line">        }</span><br><span class="line">        return res;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure><h4 id="中序遍历-1">中序遍历</h4><ol type="1"><li><p>如果 <code>x-&gt;left == nullptr</code>，将<code>x-&gt;val</code> 加入<code>ans</code>， 访问<code>x-&gt;right</code></p></li><li><p><code>x-&gt;left != nullprt</code> ,找到<code>x-&gt;left</code>中序遍历的最后一个节点，即<code>x</code>在中序遍历中的前驱节点，记为<code>predecessor</code></p><ol type="1"><li>如果<code>predecessor-&gt;right == nullptr</code>，则将<code>predecessor-&gt;right</code>指向<code>x</code>, 然后访问 <code>x-&gt;left</code></li><li>如果<code>predecessor-&gt;right != nullptr</code>,则此时<code>predecessor-&gt;right == x</code>，说明我们已经遍历完<code>x-&gt;left</code>，将<code>predecessor-&gt;right</code>置空，将<code>x-&gt;val加入ans</code>，访问<code>x-&gt;right</code></li></ol></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>{</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        TreeNode *predecessor = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (root != <span class="literal">nullptr</span>) {</span><br><span class="line">            <span class="keyword">if</span> (root-&gt;left != <span class="literal">nullptr</span>) {</span><br><span class="line">                <span class="comment">// predecessor 节点就是当前 root 节点向左走一步，然后一直向右走至无法走为止</span></span><br><span class="line">                predecessor = root-&gt;left;</span><br><span class="line">                <span class="keyword">while</span> (predecessor-&gt;right != <span class="literal">nullptr</span> &amp;&amp; predecessor-&gt;right != root) {</span><br><span class="line">                    predecessor = predecessor-&gt;right;</span><br><span class="line">                }</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 让 predecessor 的右指针指向 root，继续遍历左子树</span></span><br><span class="line">                <span class="keyword">if</span> (predecessor-&gt;right == <span class="literal">nullptr</span>) {</span><br><span class="line">                    predecessor-&gt;right = root;</span><br><span class="line">                    root = root-&gt;left;</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">// 说明左子树已经访问完了，我们需要断开链接</span></span><br><span class="line">                <span class="keyword">else</span> {</span><br><span class="line">                    res.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">                    predecessor-&gt;right = <span class="literal">nullptr</span>;</span><br><span class="line">                    root = root-&gt;right;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 如果没有左孩子，则直接访问右孩子</span></span><br><span class="line">            <span class="keyword">else</span> {</span><br><span class="line">                res.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">                root = root-&gt;right;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure><h4 id="后续遍历">后续遍历</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addPath</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;vec, TreeNode *node)</span> </span>{</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="literal">nullptr</span>) {</span><br><span class="line">            ++count;</span><br><span class="line">            vec.<span class="built_in">emplace_back</span>(node-&gt;val);</span><br><span class="line">            node = node-&gt;right;</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">reverse</span>(vec.<span class="built_in">end</span>() - count, vec.<span class="built_in">end</span>());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode *root)</span> </span>{</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) {</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        TreeNode *p1 = root, *p2 = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (p1 != <span class="literal">nullptr</span>) {</span><br><span class="line">            p2 = p1-&gt;left;</span><br><span class="line">            <span class="keyword">if</span> (p2 != <span class="literal">nullptr</span>) {</span><br><span class="line">                <span class="keyword">while</span> (p2-&gt;right != <span class="literal">nullptr</span> &amp;&amp; p2-&gt;right != p1) {</span><br><span class="line">                    p2 = p2-&gt;right;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span> (p2-&gt;right == <span class="literal">nullptr</span>) {</span><br><span class="line">                    p2-&gt;right = p1;</span><br><span class="line">                    p1 = p1-&gt;left;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    p2-&gt;right = <span class="literal">nullptr</span>;</span><br><span class="line">                    <span class="built_in">addPath</span>(res, p1-&gt;left);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            p1 = p1-&gt;right;</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">addPath</span>(res, root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure><h2 id="参考">参考</h2><p><a href="https://leetcode.cn/problems/binary-tree-preorder-traversal/solution/er-cha-shu-de-qian-xu-bian-li-by-leetcode-solution/">二叉树的前序遍历- 二叉树的前序遍历 - 力扣（LeetCode）</a></p><p><a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/solution/er-cha-shu-de-zhong-xu-bian-li-by-leetcode-solutio/">二叉树的中序遍历- 二叉树的中序遍历 - 力扣（LeetCode）</a></p><p><a href="https://leetcode.cn/problems/binary-tree-postorder-traversal/solution/er-cha-shu-de-hou-xu-bian-li-by-leetcode-solution/">二叉树的后序遍历- 二叉树的后序遍历 - 力扣（LeetCode）</a></p><p><a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/solution/yan-se-biao-ji-fa-yi-chong-tong-yong-qie-jian-ming/">颜色标记法-一种通用且简明的树遍历方法- 二叉树的中序遍历 - 力扣（LeetCode）</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 常用算法 </category>
          
          <category> 板子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> 二叉树遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区间DP</title>
      <link href="/2022/05/09/%E5%8C%BA%E9%97%B4DP/"/>
      <url>/2022/05/09/%E5%8C%BA%E9%97%B4DP/</url>
      
        <content type="html"><![CDATA[<h1 id="动态规划">动态规划</h1><p><strong><a href="https://leetcode.cn/problems/stone-game/">877.石子游戏</a></strong></p><p>Alice 和 Bob 用几堆石子在做游戏。一共有偶数堆石子，排成一行；每堆都有正 整数颗石子，数目为 piles[i] 。</p><p>游戏以谁手中的石子最多来决出胜负。石子的 总数 是 奇数，所以没有平局。</p><p>Alice 和 Bob 轮流进行，Alice 先开始 。 每回合，玩家从行的 开始 或结束 处取走整堆石头。 这种情况一直持续到没有更多的石子堆为止，此时手中石子最多 的玩家 获胜 。</p><p>假设 Alice 和 Bob 都发挥出最佳水平，当 Alice 赢得比赛时返回 true ，当Bob 赢得比赛时返回 false 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：piles = [5,3,4,5]</span><br><span class="line">输出：true</span><br><span class="line">解释：</span><br><span class="line">Alice 先开始，只能拿前 5 颗或后 5 颗石子 。</span><br><span class="line">假设他取了前 5 颗，这一行就变成了 [3,4,5] 。</span><br><span class="line">如果 Bob 拿走前 3 颗，那么剩下的是 [4,5]，Alice 拿走后 5 颗赢得 10 分。</span><br><span class="line">如果 Bob 拿走后 5 颗，那么剩下的是 [3,4]，Alice 拿走后 4 颗赢得 9 分。</span><br><span class="line">这表明，取前 5 颗石子对 Alice 来说是一个胜利的举动，所以返回 true 。</span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><p>定义<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.455ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2411 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(828,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(1126,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(1404,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1682,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2133,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span>为区间 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.959ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1749.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(576,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1020.7,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1471.7,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span>，在双方均做最优选择的情况下，先手与后手的最大得分分差为多少</p><p>那么 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.249ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2762 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(828,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1328,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(1606,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1884,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2484,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span>即为所有石子的先手和后手的得分差值：</p><ul><li><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="10.397ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4595.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(828,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1328,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(1606,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1884,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2484,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(3039.8,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mn" transform="translate(4095.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></span> 返回 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="4.962ex" height="1.557ex" role="img" focusable="false" viewBox="0 -677 2193 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(704,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1155,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1727,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></svg></mjx-container></span></li><li><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="11.049ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4883.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(828,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1328,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(1606,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1884,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(2772,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(3327.8,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mn" transform="translate(4383.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></span> 返回 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="5.681ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 2511 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mi" transform="translate(749,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1278,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(1576,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(2045,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></svg></mjx-container></span></li></ul><p>不失一般性的考虑 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.455ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2411 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(828,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(1126,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(1404,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1682,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2133,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span>如何转移</p><ul><li><p>左端取石子， 价值 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="10.537ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4657.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(848,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(1146,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1612,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(2081,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(2359,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(2879.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(3879.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(4379.4,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span>;取完后，原本的后手边先手，从 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="7.855ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3472.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(798.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1798.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2298.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2743.1,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3194.1,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span> 区间做最优决策， 所得价值为 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.352ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4133.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(828,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(1348.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(2348.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2848.4,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(3126.4,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(3404.4,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3855.4,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span> 。 双方的差值为：</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="22.655ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 10013.3 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(848,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(1146,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1612,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(2081,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(2359,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(2879.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(3879.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(4379.4,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(4879.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(5879.9,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(6429.9,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(6707.9,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(7228.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(8228.3,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(8728.3,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(9006.3,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(9284.3,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(9735.3,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span></p></li><li><p>右端取石子， 价值 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="10.883ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4810.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(848,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(1146,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1612,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(2081,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(2359,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3032.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(4032.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(4532.4,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span>;取完后，原本的后手边先手，从 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="7.855ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3472.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(576,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1020.7,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1693.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2694.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3194.1,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span> 区间做最优决策， 所得价值为 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.352ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4133.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(828,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(1126,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(1404,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1682,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2355.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(3355.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3855.4,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span> 。 双方的差值为：</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="18.758ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 8290.9 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(848,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(1146,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1612,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(2081,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(2359,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(2657,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(3157.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(4157.4,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(4707.4,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(4985.4,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(5283.4,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(5561.4,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(5839.4,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6512.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(7512.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(8012.9,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span></p></li></ul><p>双方都想赢，都会做最优决策（即使自己与对方分差最大）。因此 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.455ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2411 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(828,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(1126,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(1404,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1682,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2133,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span> 为上述两种情况中的最大值。</p><p>根据状态转移方程，我们发现大区间的状态值依赖于小区间的状态值，典型的区间DP 问题。</p><p>按照从小到大「枚举区间长度」和「区间左端点」的常规做法进行求解即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"> vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; f;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">stoneGame</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; piles)</span> </span>{</span><br><span class="line">        <span class="type">int</span> n = piles.<span class="built_in">size</span>();</span><br><span class="line">        f = vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(n+<span class="number">2</span>,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n+<span class="number">2</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="comment">//f[l][r]表示 从l 到 r 这段的最优解</span></span><br><span class="line">        <span class="comment">//注意 piles下标从0 开始</span></span><br><span class="line">        <span class="built_in">reverse</span>(<span class="number">1</span>,n,piles);</span><br><span class="line">        <span class="keyword">return</span> f[<span class="number">1</span>][n] &gt; <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,vector&lt;<span class="type">int</span>&gt;&amp; piles)</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> left = f[l+<span class="number">1</span>][r];</span><br><span class="line">        <span class="type">int</span> right= f[l][r<span class="number">-1</span>];</span><br><span class="line">        f[l][r] = <span class="built_in">max</span>(piles[l<span class="number">-1</span>] - left, piles[r<span class="number">-1</span>] - right);</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 常用算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记忆化搜索</title>
      <link href="/2022/05/09/%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2/"/>
      <url>/2022/05/09/%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="记忆化搜索">记忆化搜索</h1><h2 id="概述">概述</h2><p>记忆化搜索是一种典型的空间换时间的思想。记忆化搜索的典型应用场景是可能经过不同路径转移到相同状态的dfs问题。更明确地说，当我们需要在<strong>有层次结构的图</strong>（不是树，即当前层的不同节点可能转移到下一层的相同节点）中<strong>自上而下地进行dfs搜索</strong>时，大概率我们都可以通过记忆化搜索的技巧<strong>降低时间复杂度。</strong></p><p><strong><a href="https://leetcode.cn/problems/guess-number-higher-or-lower-ii/">375.猜数字大小 II</a></strong></p><p>我们正在玩一个猜数游戏，游戏规则如下：</p><p>我从 1 到 n 之间选择一个数字。 你来猜我选了哪个数字。如果你猜到正确的数字，就会 赢得游戏 。如果你猜错了，那么我会告诉你，我选的数字比你的 更大或者更小，并且你需要继续猜数。 每当你猜了数字 x并且猜错了的时候，你需要支付金额为 x 的现金。如果你花光了钱，就会输掉游戏 。 给你一个特定的数字 n ，返回能够 确保你获胜的最小现金数，不管我选择那个数字 。</p><p>示例 1：</p><p><img src="https://s2.loli.net/2022/05/09/8O2yMa6ELbvISCK.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 10</span><br><span class="line">输出：16</span><br><span class="line">在最糟糕的情况下，你需要支付 $16 。因此，你只需要 $16 就可以确保自己赢得游戏。</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）链接：https://leetcode.cn/problems/guess-number-higher-or-lower-ii</p><p>比较容易想到的做法为使用「递归」进行求解。</p><p>设计递归函数为 int dfs(int l, int r) 传入参数 l 和 r 代表在范围 [l,r][l,r] 内进行猜数，返回值为在 [l, r][l,r]内猜中数字至少需要多少钱。</p><p>我们可决策的部分为「选择猜哪个数 x」，而不可决策的是「选择某个数 x之后（假设没有猜中），真实值会落在哪边」。</p><p>因此为求得「最坏情况下最好」的结果，我们应当取所有的 xx中的最小值。</p><p>最后，为减少重复计算，我们需要在「递归」基础上加入记忆化搜索。并且当我们使用static 修饰 cache时，可以确保每个区间的计算在所有样例中只会发生一次。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; cache;</span><br><span class="line">    <span class="comment">//空间换时间</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getMoneyAmount</span><span class="params">(<span class="type">int</span> n)</span> </span>{</span><br><span class="line">        cache = vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(<span class="number">210</span>,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">210</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(<span class="number">1</span>,n);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(cache[l][r]!=<span class="number">0</span>) <span class="keyword">return</span> cache[l][r];</span><br><span class="line">        <span class="comment">//减少递归次数，避免重复遍历</span></span><br><span class="line">        <span class="type">int</span> ans = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> x = l;x &lt;= r;x++){</span><br><span class="line">            <span class="type">int</span> cur = <span class="built_in">max</span>(<span class="built_in">dfs</span>(l,x<span class="number">-1</span>),<span class="built_in">dfs</span>(x+<span class="number">1</span>,r)) + x;</span><br><span class="line">            ans = <span class="built_in">min</span>(ans,cur);</span><br><span class="line">        }</span><br><span class="line">        cache[l][r] = ans;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.832ex" height="2.451ex" role="img" focusable="false" viewBox="0 -833.2 2577.6 1083.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(2188.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></li><li>空间复杂度：忽略递归带来的额外空间开销，复杂度为 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.832ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 2577.6 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2188.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 常用算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> 记忆化搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashDict</title>
      <link href="/2022/05/05/HashDict/"/>
      <url>/2022/05/05/HashDict/</url>
      
        <content type="html"><![CDATA[<h1 id="hashdict">HashDict</h1><p>现在设计一个由数组和链表共同组成的一个存储键值对的数据结构HashDict，结构图如下。</p><p><img src="https://s2.loli.net/2022/05/05/zKx4Nv8Guqo9HW5.png" alt="img"></p><p>该数据结构内部包含了一个 Entry 类型的数组 table。每个 Entry存储着键值对。它包含了四个字段（hashCode, key, value, next），从 next字段我们可以看出 Entry是一个链表中的节点。即数组中的每个位置被当成一个桶，一个桶存放一个链表。其中键值对中key为整数，value为字符串。</p><p>这个数据结构存储数据时的几种操作说明如下：</p><ul><li><p>添加元素：当要向该数据结构中添加一个键值对（key-value）时，先对key做哈希运算，哈希函数：hash= | 3<em>key^3+5</em>key^2+7*key+11 | ，上述公式中的 |是绝对值符号，获取key的hash值，然后用hash值对数组table的长度length取模获取键值对应该存储的位置pos，公式为pos = hash % length。如果出现哈希冲突的情况，即计算出的位置pos已经存储了数据，则将键值对插入到当前位置已有的链表中，要求插入之后链表是按从小到大排序（按键排序）；如果没有出现哈希冲突，则在当前位置中保存一个单节点链表。</p></li><li><p>删除元素：按照和添加元素同样的逻辑获取对应的键值对所在的位置pos，然后在这个位置里的链表中剔除掉相应的链表节点，如果是单节点链表，则直接把当前位置的链表置为null。</p></li><li><p>扩容：</p><p>在两种情况下需要进行扩容操作：</p><ol type="1"><li>HashDict中节点个数超过了现有数组长度（不包括相等）</li><li>向某一个桶中的链表增加元素后，该链表长度超过4（不包括4）</li></ol><p>每次扩容操作是将数组长度变为之前数组的<strong>两倍+1</strong>（如原来长度为8，扩容后为17），并将原有的键值对<strong>按照添加元素的规则（重新计算hash值取模）重新添加到新的数组中</strong>。</p></li><li><p>查询：查询数组的指定位置存储了哪些键值对。</p></li></ul><p><strong>输入格式</strong>：</p><p>首先输入一个数字L，L代表数组table的初始长度。</p><p>然后输入一个数字N，N代表操作次数，下面N行是具体的操作。</p><p>操作行的输入格式：</p><ul><li>添加元素：<code>add [key] [value]</code>, add代表该行执行添加操作，[key]和[value]是键值对的相应值。如<code>add 1 cpp</code>代表向HashDict中添加key为1，value为cpp的一个键值对。</li><li>删除元素：<code>delete [key]</code>， delete代表该行执行删除操作，[key]是要删除的键值对的键值。保证这个键值一定在HashDict中已经存在。</li><li>查询：<code>search [pos]</code>，search代表执行查询操作，[pos]代表要查询的数组位置，需要输出该位置的链表。保证pos小于数组table的长度。如<code>search 0</code>代表查询数组table第一个位置中存储了哪些键值对。</li></ul><p><strong>输出格式</strong>:</p><p>只有查询操作需要输出，如果查询位置没有键值对，则直接输出null，如果有，则按照</p><p><code>[key]:[value]-&gt;[key]:[value]</code>的格式输出（参考示例）。</p><p><strong>示例1</strong>：</p><p>输入：</p><p>复制代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">4</span><br><span class="line">add 10 cpp</span><br><span class="line">add 5 cat</span><br><span class="line">add 3 dog</span><br><span class="line">search 2</span><br></pre></td></tr></table></figure><p>输出：</p><p>复制代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3:dog-&gt;5:cat</span><br></pre></td></tr></table></figure><p><strong>示例2</strong>：</p><p>输入：</p><p>复制代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">11</span><br><span class="line">add 5 cat</span><br><span class="line">add 3 dog</span><br><span class="line">search 0</span><br><span class="line">add 10 cpp</span><br><span class="line">search 0</span><br><span class="line">search 1</span><br><span class="line">add 7 bird</span><br><span class="line">add 17 pig</span><br><span class="line">search 4</span><br><span class="line">delete 7</span><br><span class="line">search 4</span><br></pre></td></tr></table></figure><p>输出：</p><p>复制代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3:dog-&gt;5:cat</span><br><span class="line">null</span><br><span class="line">5:cat-&gt;10:cpp</span><br><span class="line">7:bird-&gt;17:pig</span><br><span class="line">17:pig</span><br></pre></td></tr></table></figure><p><strong>示例3</strong>：</p><p>输入：</p><p>复制代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">10</span><br><span class="line">add 5 cat</span><br><span class="line">add 3 dog</span><br><span class="line">add 7 cat1</span><br><span class="line">add 11 dog1</span><br><span class="line">search 2</span><br><span class="line">add 9 cpp</span><br><span class="line">search 2</span><br><span class="line">search 5</span><br><span class="line">search 6</span><br><span class="line">search 8</span><br></pre></td></tr></table></figure><p>输出：</p><p>复制代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3:dog-&gt;5:cat-&gt;7:cat1-&gt;11:dog1</span><br><span class="line">7:cat1-&gt;9:cpp</span><br><span class="line">3:dog</span><br><span class="line">5:cat-&gt;11:dog1</span><br><span class="line">null</span><br></pre></td></tr></table></figure><h1 id="代码">代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Entry</span>{</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> hashcode;</span><br><span class="line">    <span class="type">int</span> key;</span><br><span class="line">    string val;</span><br><span class="line">    Entry* next;</span><br><span class="line">    <span class="built_in">Entry</span>():<span class="built_in">next</span>(<span class="literal">nullptr</span>){}</span><br><span class="line">    <span class="built_in">Entry</span>(<span class="type">int</span> k,string v):<span class="built_in">key</span>(k),<span class="built_in">val</span>(v),<span class="built_in">next</span>(<span class="literal">nullptr</span>){}</span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(Entry* hashdict[],<span class="type">int</span> len,<span class="type">int</span> key,string val)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">search</span><span class="params">(Entry* hashdict[],<span class="type">int</span> len,<span class="type">int</span> pos)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(Entry* hashdict[],<span class="type">int</span> len,<span class="type">int</span> key)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">needexp</span><span class="params">(Entry* hashdict[],<span class="type">int</span> len,<span class="type">int</span> CodeNums)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Expand</span><span class="params">(Entry* hashdict[],<span class="type">int</span> len)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="type">int</span> len=<span class="number">0</span>; cin&gt;&gt;len;</span><br><span class="line">    <span class="type">int</span> N  =<span class="number">0</span>; cin&gt;&gt;N;</span><br><span class="line">    Entry* hashdict[<span class="number">1000</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++){</span><br><span class="line">        hashdict[i]= <span class="literal">nullptr</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> NumsOfCode=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(N&gt;<span class="number">0</span>){</span><br><span class="line">        N--;</span><br><span class="line">        string cmd; cin&gt;&gt;cmd;</span><br><span class="line">        <span class="type">int</span> key; string val;</span><br><span class="line">        <span class="keyword">if</span>(cmd[<span class="number">0</span>]==<span class="string">'a'</span>){</span><br><span class="line">            cin&gt;&gt;key;</span><br><span class="line">            cin&gt;&gt;val;</span><br><span class="line">            <span class="built_in">add</span>(hashdict,len,key,val);</span><br><span class="line">            NumsOfCode++;</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cmd[<span class="number">0</span>]==<span class="string">'s'</span>){</span><br><span class="line">            cin&gt;&gt;key;</span><br><span class="line">            <span class="built_in">search</span>(hashdict,len,key);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cmd[<span class="number">0</span>]==<span class="string">'d'</span>){</span><br><span class="line">            cin&gt;&gt;key;</span><br><span class="line">            <span class="built_in">del</span>(hashdict,len,key);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">bool</span> Need = <span class="built_in">needexp</span>(hashdict,len,NumsOfCode);</span><br><span class="line">        <span class="keyword">while</span>(Need){</span><br><span class="line">            <span class="built_in">Expand</span>(hashdict,len);</span><br><span class="line">            NumsOfCode = <span class="number">0</span>;</span><br><span class="line">            len = len * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            Need = <span class="built_in">needexp</span>(hashdict,len,NumsOfCode);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(Entry* hashdict[],<span class="type">int</span> len,<span class="type">int</span> key,string val)</span></span>{</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> k = key;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> hash = <span class="built_in">llabs</span>(<span class="number">3</span>*k*k*k+<span class="number">5</span>*k*k+<span class="number">7</span>*k+<span class="number">11</span>);</span><br><span class="line"></span><br><span class="line">    Entry* item = <span class="keyword">new</span> <span class="built_in">Entry</span>(key,val);</span><br><span class="line">    item -&gt; hashcode = hash;</span><br><span class="line">    <span class="type">int</span> pos = hash % len;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(hashdict[pos]== <span class="literal">nullptr</span>) hashdict[pos] = item;</span><br><span class="line">    <span class="keyword">else</span>{</span><br><span class="line">        Entry* head = hashdict[pos];</span><br><span class="line">        <span class="keyword">if</span>(head-&gt;key &gt; key){</span><br><span class="line">            item-&gt;next = head;</span><br><span class="line">            hashdict[pos] = item;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span>{</span><br><span class="line">            Entry* prev = <span class="keyword">new</span> Entry;</span><br><span class="line">            prev-&gt;next = head;</span><br><span class="line">            <span class="keyword">while</span>(head!= <span class="literal">nullptr</span> &amp;&amp; head-&gt;key &lt; key){</span><br><span class="line">                prev = head;</span><br><span class="line">                head = head-&gt;next;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(head == <span class="literal">nullptr</span>){</span><br><span class="line">                prev-&gt;next = item;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span>{</span><br><span class="line">                prev-&gt;next = item;</span><br><span class="line">                item-&gt;next = head;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">search</span><span class="params">(Entry* hashdict[],<span class="type">int</span> len,<span class="type">int</span> pos)</span></span>{</span><br><span class="line">    Entry* item = hashdict[pos];</span><br><span class="line">    <span class="keyword">if</span>(item== <span class="literal">nullptr</span>){</span><br><span class="line">        cout&lt;&lt;<span class="string">"null"</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span>(item!= <span class="literal">nullptr</span>){</span><br><span class="line">        cout&lt;&lt;item-&gt;key&lt;&lt;<span class="string">":"</span>&lt;&lt;item-&gt;val;</span><br><span class="line">        <span class="keyword">if</span>(item-&gt;next!= <span class="literal">nullptr</span>) cout&lt;&lt;<span class="string">"-&gt;"</span>;</span><br><span class="line">        item = item-&gt;next;</span><br><span class="line">    }</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(Entry* hashdict[],<span class="type">int</span> len,<span class="type">int</span> key)</span></span>{</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> k = key;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> hash = <span class="built_in">llabs</span>(<span class="number">3</span>*k*k*k+<span class="number">5</span>*k*k+<span class="number">7</span>*k+<span class="number">11</span>);</span><br><span class="line">    <span class="type">int</span> pos = hash % len;</span><br><span class="line">    Entry* head = hashdict[pos];</span><br><span class="line">    Entry* prev = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">if</span>(head -&gt; key == key){</span><br><span class="line">        hashdict[pos] = head-&gt;next;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span>(head != <span class="literal">nullptr</span> &amp;&amp; head-&gt;key != key){</span><br><span class="line">        prev = head;</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">    }</span><br><span class="line">    prev-&gt;next = head-&gt;next;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">needexp</span><span class="params">(Entry* hashdict[],<span class="type">int</span> len,<span class="type">int</span> CodeNums)</span></span>{</span><br><span class="line">    <span class="keyword">if</span>(CodeNums &gt; len) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;len;i++){</span><br><span class="line">        Entry* item = hashdict[i];</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(item!= <span class="literal">nullptr</span>){</span><br><span class="line">            count++;</span><br><span class="line">            item = item-&gt;next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(count &gt; <span class="number">4</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Expand</span><span class="params">(Entry* hashdict[],<span class="type">int</span> len)</span></span>{</span><br><span class="line">    Entry* head = <span class="keyword">new</span> Entry;</span><br><span class="line">    Entry* all  = head;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ;i &lt;len ;i++){</span><br><span class="line">        <span class="keyword">if</span>(hashdict[i]!= <span class="literal">nullptr</span>){</span><br><span class="line">            Entry* cur = hashdict[i];</span><br><span class="line">            <span class="keyword">while</span>(cur != <span class="literal">nullptr</span>){</span><br><span class="line">                head-&gt;next = cur;</span><br><span class="line">                head = head-&gt;next;</span><br><span class="line">                cur = cur-&gt;next;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    all = all-&gt;next;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">2</span> * len + <span class="number">1</span>;i++){</span><br><span class="line">        hashdict[i] = <span class="literal">nullptr</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span>(all!= <span class="literal">nullptr</span>){</span><br><span class="line">        <span class="built_in">add</span>(hashdict,<span class="number">2</span> * len + <span class="number">1</span>,all-&gt;key,all-&gt;val);</span><br><span class="line">        all = all-&gt;next;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>麻了，第二次写还de了好久的bug。。。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟 </tag>
            
            <tag> C++高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据管理基础 ch58-61</title>
      <link href="/2022/05/03/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80-ch58-61/"/>
      <url>/2022/05/03/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80-ch58-61/</url>
      
        <content type="html"><![CDATA[<h1 id="ch-58-查询处理">ch 58 查询处理</h1><h2 id="查询处理步骤">查询处理步骤</h2><p><img src="https://s2.loli.net/2022/05/03/KDoc6FWNXC4laqu.png"></p><h2 id="查询分析">查询分析</h2><ul><li>查询分析的任务：对查询语句进行扫描、词法分析和语法分析<ul><li>词法分析：从查询语句中识别出正确的语言符号</li><li>语法分析：进行语法检查</li></ul></li></ul><h2 id="查询检查">查询检查</h2><p><strong>查询检查 1</strong></p><ul><li>查询检查的任务<ul><li>合法权检查</li><li>视图转换</li><li>安全性检查</li><li>完整性初步检查</li></ul></li><li>根据数据字典中有关的模式定义检查语句中的数据库对象，如关系名、属性名是否存在和有效</li><li>如果是对视图的操作，则要用视图消解方法把对视图的操作转换成对基本表的操作</li></ul><p><strong>查询检查 2</strong></p><ul><li>根据数据字典中的用户权限和完整性约束定义对用户的存取权限进行检查</li><li>检查通过后把SQL查询语句转换成内部表示，即等价的关系代数表达式。</li><li>关系数据库管理系统一般都用查询树，也称为语法分析树来表示扩展的关系代数表达式。</li></ul><h2 id="查询优化">查询优化</h2><ul><li>查询优化：选择一个高效执行的查询处理策略</li><li>查询优化分类<ul><li>代数优化/逻辑优化：指关系代数表达式的优化</li><li>物理优化：指存取路径和底层操作算法的选择</li></ul></li><li>查询优化的选择依据<ul><li>基于规则(rule based)</li><li>基于代价(cost based)</li><li>基于语义(semantic based)</li></ul></li></ul><h2 id="查询执行">查询执行</h2><ul><li>依据优化器得到的执行策略生成查询执行计划</li><li>代码生成器(code generator)生成执行查询计划的代码</li><li>两种执行方法<ul><li>自顶向下</li><li>自底向上</li></ul></li></ul><h2 id="选择操作的实现">选择操作的实现</h2><p><strong>选择操作的实现 1</strong></p><ul><li>选择操作典型实现方法：<ul><li>全表扫描方法 (Table Scan)<ul><li>对查询的基本表顺序扫描，逐一检查每个元组是否满足</li><li>选择条件，把满足条件的元组作为结果输出</li><li>适合小表，不适合大表</li></ul></li><li>索引扫描方法 (Index Scan)<ul><li>适合于选择条件中的属性上有索引(例如B+树索引或Hash索引)</li><li>通过索引先找到满足条件的元组主码或元组指针，再通过元组指针直接在查询的基本表中找到元组</li></ul></li></ul></li></ul><p><strong>选择操作的实现 2</strong></p><p><img src="https://s2.loli.net/2022/05/03/lZgIPYpiqFKRNkE.png"></p><p><strong>选择操作的实现 3</strong></p><ul><li>全表扫描算法<ul><li>假设可以使用的内存为M块，全表扫描算法思想：<ol type="1"><li>按照物理次序读Student的M块到内存</li><li>检查内存的每个元组t，如果满足选择条件，则输出t</li><li>如果student还有其他块未被处理，重复①和②</li></ol></li></ul></li></ul><p><strong>选择操作的实现 4</strong></p><ul><li>索引扫描算法</li></ul><p><img src="https://s2.loli.net/2022/05/03/diXQMHjWsumGazS.png"></p><p><strong>选择操作的实现 5</strong></p><p><img src="https://s2.loli.net/2022/05/03/cv8rECJ59KqDO4a.png"></p><p><strong>选择操作的实现 6</strong></p><p><img src="https://s2.loli.net/2022/05/03/DucFvqSQoLmVbnX.png"></p><h2 id="连接操作的实现">连接操作的实现</h2><ul><li>连接操作是查询处理中最耗时的操作之一</li><li>本节只讨论等值连接(或自然连接)最常用的实现算法<ul><li>嵌套循环算法(nested loop join)</li><li>排序-合并算法(sort-merge join 或merge join)</li><li>索引连接(index join)算法</li><li>Hash Join算法</li></ul></li></ul><p><img src="https://s2.loli.net/2022/05/03/cFMU5oQZA2yEiae.png"></p><h2 id="嵌套循环算法">嵌套循环算法</h2><ul><li>嵌套循环算法(nested loop join)<ul><li>对外层循环(Student表)的每一个元组(s)，检索内层循环(SC表)中的每一个元组(sc)</li><li>检查这两个元组在连接属性(Sno)上是否相等</li><li>如果满足连接条件，则串接后作为结果输出，直到外层循环表中的元组处理完为止</li></ul></li></ul><p><img src="https://s2.loli.net/2022/05/03/OtQHbspvxYrCG1J.png"></p><h2 id="排序-合并算法">排序-合并算法</h2><p><strong>排序-合并算法 1</strong></p><ul><li>排序-合并算法(sort-merge join 或merge join)<ul><li>如果连接的表没有排好序，先对Student表和SC表按连接属性Sno排序</li><li>取Student表中第一个Sno，依次扫描SC表中具有相同Sno的元组</li><li>当扫描到Sno不相同的第一个SC元组时，返回Student表扫描它的下一个元组，再扫描SC表中具有相同Sno的元组，把它们连接起来</li><li>重复上述步骤直到Student 表扫描完</li></ul></li><li>Student表和SC表都只要扫描一遍</li><li>如果两个表原来无序，执行时间要加上对两个表的排序时间</li><li>对于大表，先排序后使用排序-合并连接算法执行连接，总的时间一般仍会减少</li></ul><p><strong>排序-合并算法 2</strong></p><p><img src="https://s2.loli.net/2022/05/03/RyE8lpNOwYHs6PI.png"></p><p><img src="https://s2.loli.net/2022/05/03/PwJisVEKfvOdl4e.png"></p><h2 id="索引连接算法">索引连接算法</h2><ul><li>索引连接(index join)算法<ul><li>步骤：</li><li>在SC表上已经建立属性Sno的索引。</li><li>对Student中每一个元组，由Sno值通过SC的索引查找相应的SC元组。</li><li>把这些SC元组和Student元组连接起来<br></li><li>循环执行②③，直到Student表中的元组处理完为止</li></ul></li></ul><h2 id="hash-join算法">Hash Join算法</h2><ul><li>Hash Join算法<ul><li>把连接属性作为hash码，用同一个hash函数把Student表和SC表中的元组散列到hash表中。</li><li>划分阶段(building phase, 也称为partitioning phase)<ul><li>对包含较少元组的表(如Student表)进行一遍处理</li><li>把它的元组按hash函数分散到hash表的桶中</li></ul></li><li>试探阶段(probing phase,也称为连接阶段join phase)<ul><li>对另一个表(SC表)进行一遍处理</li><li>把SC表的元组也按同一个hash函数（hash码是连接属性）进行散列</li><li>把SC元组与桶中来自Student表并与之相匹配的元组连接起来</li></ul></li></ul></li><li>hashjoin算法前提：假设两个表中较小的表在第一阶段后可以完全放入内存的hash桶中</li></ul><h1 id="ch-59-查询优化">ch 59 查询优化</h1><h2 id="查询优化概述">查询优化概述</h2><p><strong>查询优化概述 1</strong></p><ul><li>关系系统的查询优化<ul><li>是关系数据库管理系统实现的关键技术又是关系系统的优点所在</li><li>减轻了用户选择存取路径的负担</li></ul></li><li>关系查询优化是影响关系数据库管理系统性能的关键因素</li><li>由于关系表达式的语义级别很高，使关系系统可以从关系表达式中分析查询语义，提供了执行查询优化的可能性</li></ul><p><strong>查询优化概述 2</strong></p><ul><li>非关系系统<ul><li>用户使用过程化的语言表达查询要求，执行何种记录级的操作，以及操作的序列是由用户来决定的</li><li>用户必须了解存取路径，系统要提供用户选择存取路径的手段，查询效率由用户的存取策略决定</li><li>如果用户做了不当的选择，系统是无法对此加以改进的</li></ul></li></ul><p><strong>查询优化概述 3</strong></p><ul><li>查询优化的优点<ul><li>用户不必考虑如何最好地表达查询以获得较好的效率</li><li>系统可以比用户程序的“优化”做得更好<ul><li>优化器可以从数据字典中获取许多统计信息，而用户程序则难以获得这些信息。</li><li>如果数据库的物理统计信息改变了，系统可以自动对查询重新优化以选择相适应的执行计划。在非关系系统中必须重写程序，而重写程序在实际应用中往往是不太可能的。</li><li>优化器可以考虑数百种不同的执行计划，程序员一般只能考虑有限的几种可能性。</li><li>优化器中包括了很多复杂的优化技术，这些优化技术往往只有最好的程序员才能掌握。系统的自动优化相当于使得所有人都拥有这些优化技术。</li></ul></li></ul></li></ul><h2 id="查询优化的总目标">查询优化的总目标</h2><ul><li>关系数据库管理系统通过某种代价模型计算出各种查询执行策略的执行代价，然后选取代价最小的执行方案<ul><li>集中式数据库<ul><li>执行开销主要包括：磁盘存取块数(I/O代价)+处理机时间(CPU代价)+查询的内存开销</li><li>I/O代价是最主要的<br></li></ul></li><li>分布式数据库<ul><li>总代价=I/O代价+CPU代价+内存代价＋通信代价</li></ul></li></ul></li><li>查询优化的总目标<ul><li>选择有效的策略</li><li>求得给定关系表达式的值</li><li>使得查询代价最小(实际上是较小)</li></ul></li><li>一个关系查询可以对应不同的执行方案，其效率可能相差非常大。</li></ul><h2 id="查询优化的实例">查询优化的实例</h2><p><img src="https://s2.loli.net/2022/05/03/TJsvaiNjmeRXfAZ.png" alt="查询优化的实例"></p><h2 id="方案a">方案A</h2><p><strong>方案A 1</strong></p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="72.296ex" height="2.283ex" role="img" focusable="false" viewBox="0 -759 31955 1009"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="mn" transform="translate(791,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1568.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2624.6,0)"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g><g data-mml-node="mi" transform="translate(3194.6,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(3839.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4439.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(4968.6,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5846.6,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(6312.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(6701.6,0)"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></g><g data-mml-node="mi" transform="translate(7272.6,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(7917.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(8278.6,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(8850.6,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(9370.6,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(9836.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(10436.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(10797.6,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mi" transform="translate(11242.2,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(11887.2,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(12487.2,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mo" transform="translate(13250,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(14305.8,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(14950.8,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(15710.8,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mi" transform="translate(16155.4,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(16800.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(17400.4,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mo" transform="translate(18107.7,0)"><path data-c="2227" d="M318 591Q325 598 333 598Q344 598 348 591Q349 590 414 445T545 151T611 -4Q609 -22 591 -22Q588 -22 586 -21T581 -20T577 -17T575 -13T572 -9T570 -4L333 528L96 -4Q87 -20 80 -21Q78 -22 75 -22Q57 -22 55 -4Q55 2 120 150T251 444T318 591Z"></path></g><g data-mml-node="mi" transform="translate(18996.9,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(19641.9,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(20401.9,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mi" transform="translate(20846.6,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(21606.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(22206.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msup" transform="translate(22969.3,0)"><g data-mml-node="mo"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(811,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="msup" transform="translate(24302.6,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(533,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(25080,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(25469,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(26114,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(26475,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(27047,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(27567,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(28033,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(28633,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(28994,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(29772,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(30417,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(31177,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(31566,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p><p><img src="https://s2.loli.net/2022/05/03/HUnKpOJxasPWQT7.png"></p><p><strong>方案A 2</strong></p><p><img src="https://s2.loli.net/2022/05/03/kN1mZbd6PzBGi24.png"></p><h2 id="方案b"><strong>方案B</strong></h2><p><strong><img src="https://s2.loli.net/2022/05/03/wIYaTkZhnS2NJ1u.png"></strong></p><p><img src="https://s2.loli.net/2022/05/03/KSt2r3hnaLjMeJb.png"></p><h2 id="方案c">方案C</h2><p><img src="https://s2.loli.net/2022/05/03/j8x5vfthOB9LVwY.png"></p><h2 id="拥有索引的实例">拥有索引的实例</h2><p><img src="https://s2.loli.net/2022/05/03/c2y7lTunCaXoERH.png"></p><h2 id="优化实例">优化实例</h2><p><img src="https://s2.loli.net/2022/05/03/uyv1gDCINa3bpUc.png"></p><h1 id="ch-60-代数优化">ch 60 代数优化</h1><h2 id="关系代数表达式等价变换规则">关系代数表达式等价变换规则</h2><ul><li>代数优化策略：通过对关系代数表达式的等价变换来提高查询效率</li><li>关系代数表达式的等价：指用相同的关系代替两个表达式中相应的关系所得到的结果是相同的</li><li>两个关系表达式E1和E2是等价的，可记为E1≡E2</li></ul><h2 id="常用的等价变换规则">常用的等价变换规则</h2><p><strong>常用的等价变换规则 1</strong></p><p><img src="https://s2.loli.net/2022/05/03/By93ogAKfclqOCj.png"></p><p><strong>常用的等价变换规则 2</strong></p><p><img src="https://s2.loli.net/2022/05/03/yQk9cKH1ElIOrwW.png"></p><p><strong>常用的等价变换规则 3</strong></p><p><img src="https://s2.loli.net/2022/05/03/oYp9t4NzXDgwfFb.png"></p><p><strong>常用的等价变换规则 4</strong></p><p><img src="https://s2.loli.net/2022/05/03/xA5mufIheN4EWgQ.png"></p><h2 id="典型的启发式规则">典型的启发式规则</h2><p><img src="https://s2.loli.net/2022/05/03/jQky6YZ4gSrIJbR.png"></p><ul><li>笛卡尔积的使用比较少</li></ul><h2 id="查询树的启发式优化">查询树的启发式优化</h2><p><strong>查询树的启发式优化 1</strong></p><ul><li><p>遵循这些启发式规则，应用等价变换公式来优化关系表达式的算法</p><p><img src="https://s2.loli.net/2022/05/12/kzhjolVq1ZFLxeC.png"></p></li></ul><p><strong>查询树的启发式优化 2</strong></p><p><img src="https://s2.loli.net/2022/05/15/mBqDVFZ1vazRtPe.png"></p><p><strong>查询树的启发式优化 3</strong></p><ul><li>把上述得到的语法树的内节点分组。</li></ul><p><img src="https://s2.loli.net/2022/05/15/IrsaKGAgPT3QEHq.png"></p><h2 id="一个例子">一个例子</h2><p><strong>一个例子 1</strong></p><ul><li><strong>[例9.4]</strong>下面给出[例9.3]中 SQL语句的代数优化示例把SQL语句转换成查询树，如下图所示</li></ul><p><img src="https://s2.loli.net/2022/05/15/BEqXlW2axw8h61U.png" alt="图9.3 查询树图"></p><p><strong>一个例子 2</strong></p><ul><li>为了使用关系代数表达式的优化法，假设内部表示是关系代数语法树，则上面的查询树如图9.4所示</li></ul><p><img src="https://s2.loli.net/2022/05/15/dlZ9TyXuNDkYbH6.png"></p><p><strong>一个例子 3</strong></p><ul><li>对查询树进行优化<ul><li>利用规则4、6把选择<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.471ex;" xmlns="http://www.w3.org/2000/svg" width="10.056ex" height="1.446ex" role="img" focusable="false" viewBox="0 -431 4444.7 639"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></g><g data-mml-node="TeXAtom" transform="translate(604,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(645,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(1405,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mi" transform="translate(1683,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(2443,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3043,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msup" transform="translate(3528,0)"><g data-mml-node="mo"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(811,289) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="msup" transform="translate(4583.5,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(533,289) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g></g></g></g></g></svg></mjx-container></span>移到叶端，图9.4查询树便转换成下图优化的查询树。这就是9.2.2节中Q3的查询树表示。</li></ul></li></ul><p><img src="https://s2.loli.net/2022/05/15/zhBCgMxlRcD5U1E.png"></p><h1 id="ch-61-物理优化">ch 61 物理优化</h1><h2 id="物理优化">物理优化</h2><ul><li><p>代数优化改变查询语句中操作的次序和组合，不涉及底层的存取路径</p></li><li><p>对于一个查询语句有许多存取方案，它们的执行效率不同，仅仅进行代数优化是不够的</p></li><li><p>物理优化就是要选择高效合理的操作算法或存取路径，求得优化的查询计划</p></li><li><p>物理优化方法</p><ul><li><strong>基于规则的启发式优化</strong><ul><li>启发式规则是指那些在大多数情况下都适用，但不是在每种情况下都是最好的规则。</li></ul></li><li><strong>基于代价估算的优化</strong><ul><li>优化器估算不同执行策略的代价，并选出具有最小代价的执行计划。</li></ul></li><li>两者结合的优化方法：<ul><li>常常先使用启发式规则，选取若干较优的候选方案，减少代价估算的工作量</li><li>然后分别计算这些候选方案的执行代价，较快地选出最终的优化方案</li></ul></li></ul></li></ul><h2 id="选择操作的启发式规则">选择操作的启发式规则</h2><ul><li>对于小关系，使用全表顺序扫描，即使选择列上有索引</li><li>对于大关系，启发式规则有：</li></ul><ol type="1"><li>对于选择条件是“主码＝值”的查询<ul><li>查询结果最多是一个元组，可以选择主码索引</li><li>一般的关系数据库管理系统会自动建立主码索引</li></ul></li><li>对于选择条件是“非主属性＝值”的查询，并且选择列上有索引<ul><li>要估算查询结果的元组数目<ul><li>如果比例较小(&lt;10%)可以使用索引扫描方法</li><li>否则还是使用全表顺序扫描</li></ul></li></ul></li><li>对于选择条件是属性上的非等值查询或者范围查询，并且选择列上有索引<ul><li>要估算查询结果的元组数目<ul><li>如果比例较小(&lt;10%)可以使用索引扫描方法</li><li>否则还是使用全表顺序扫描</li></ul></li></ul></li><li>对于用AND连接的合取选择条件<ul><li>如果有涉及这些属性的组合索引<ul><li>优先采用组合索引扫描方法</li></ul></li><li>如果某些属性上有一般的索引，可以用索引扫描方法<ul><li>通过分别查找满足每个条件的指针，求指针的交集</li><li>通过索引查找满足部分条件的元组，然后在扫描这些元组时判断是否满足剩余条件</li></ul></li><li>其他情况：使用全表顺序扫描</li></ul></li><li>对于用OR连接的析取选择条件，一般使用全表顺序扫描</li></ol><h2 id="连接操作的启发式规则">连接操作的启发式规则</h2><ul><li>如果2个表都已经按照连接属性排序<ul><li>选用排序-合并算法</li></ul></li><li>如果一个表在连接属性上有索引<ul><li>选用索引连接算法</li></ul></li><li>如果上面2个规则都不适用，其中一个表较小<ul><li>选用hash join算法</li></ul></li><li>可以选用嵌套循环方法，并选择其中较小的表，确切地讲是占用的块数(B)较少的表，作为外表(外循环的表)。<ul><li>理由：</li><li>设连接表R与S分别占用的块数为Br与Bs，连接操作使用的内存缓冲区块数为K，分配K-1块给外表，如果R为外表，则嵌套循环法存取的块数为<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="19.819ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 8759.9 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mi" transform="translate(759,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1432.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(2432.4,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mi" transform="translate(3191.4,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3642.4,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mi" transform="translate(4401.4,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(4870.4,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mo" transform="translate(5370.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5759.4,0)"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="mo" transform="translate(6870.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(7870.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(8370.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></li><li>显然应该选块数小的表作为外表</li></ul></li></ul><h2 id="基于代价的优化">基于代价的优化</h2><ul><li>启发式规则优化是定性的选择，适合解释执行的系统<ul><li>解释执行的系统，优化开销包含在查询总开销之中</li></ul></li><li>编译执行的系统中查询优化和查询执行是分开的<ul><li>可以采用精细复杂一些的基于代价的优化方法</li></ul></li></ul><h2 id="统计信息">统计信息</h2><ul><li>基于代价的优化方法要计算查询的各种不同执行方案的执行代价，它与数据库的状态密切相关</li><li>优化器需要的统计信息</li></ul><p><img src="https://s2.loli.net/2022/05/15/ijYphZrSCDqMIfN.png"></p><h2 id="代价估算">代价估算</h2><p><strong>代价估算 1</strong></p><ul><li>全表扫描算法的代价估算公式<ul><li>如果基本表大小为B块，全表扫描算法的代价 cost＝B</li><li>如果选择条件是“码＝值”，那么平均搜索代价 cost＝B/2</li></ul></li><li>索引扫描算法的代价估算公式<ul><li>如果选择条件是“码＝值”<ul><li>则采用该表的主索引</li><li>若为B+树，层数为L，需要存取B+树中从根结点到叶结点L块，再加上基本表中该元组所在的那一块，所以cost=L+1</li></ul></li><li>如果选择条件涉及非码属性<ul><li>若为B+树索引，选择条件是相等比较，S是索引的选择基数(有S个元组满足条件)</li><li>满足条件的元组可能会保存在不同的块上，所以(最坏的情况)cost=L+S</li></ul></li><li>如果比较条件是＞，＞＝，＜，＜＝操作<ul><li>假设有一半的元组满足条件</li><li>就要存取一半的叶结点</li><li>通过索引访问一半的表存储块</li><li>cost=L+Y/2+B/2</li><li>如果可以获得更准确的选择基数，可以进一步修正Y/2与B/2</li></ul></li></ul></li></ul><p><strong>代价估算 2</strong></p><p><img src="https://s2.loli.net/2022/05/15/j7UqZk8nJis96KO.png"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> 数据管理基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据管理基础 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络层</title>
      <link href="/2022/04/28/%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
      <url>/2022/04/28/%E7%BD%91%E7%BB%9C%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="layer3-network-layer-网络层">Layer3: Network Layer 网络层</h1><ol type="1"><li>为什么我们不用硬件地址进行通信?<ol type="1"><li>(设备数量问题)因为设备比较多，供应商也比较多</li><li>(规格问题)不同供应商的解决方案不同，所以使用硬件地址进行通信的通用性比较低。</li><li>(寻址问题)全球设备太多，如果使用硬件设备，那么进行定位比较复杂</li></ol></li><li>因为如上情况我们选择使用IP地址(逻辑地址)。</li><li>本章比较重要，期末占比会比较大。</li></ol><h1 id="overview-of-the-network-layer">Overview of the NetworkLayer</h1><ol type="1"><li>对于不同帧使用同一的方案进行处理</li><li>第三层希望通过<strong>路由选择算法</strong>进行路径的选择和转发，对第二层是透明的。</li><li>第三层只能避免拥塞，但是要到第四层(运输层)才能完成流量控制(第三层不能完成流量控制)</li></ol><h2 id="responsibilities-职责">Responsibilities 职责</h2><ul><li><p>Move data through networks</p><p>通过网络移动数据：不同网段之间的通信，不同的广播域，两个广播域之间的进行了划分，互不干扰，不是广播的通信以及对另一个网段的广播需要能传达给对方</p></li><li><p>Use a <em>hierarchical</em> addressing scheme (opposed to MACaddressing, which is flat)</p><p>使用分层寻址方案（和MAC寻址相反，后者平坦）</p></li><li><p>Segment network and control flow of traffic</p><p>细分网络并控制流量(flow)：一步步进行细化，越近了解的越多:IP地址是一致的，也就是可以忽略物理层的不同。(具体原因在开头已经分析过了)</p></li><li><p>Reduce congestion</p><p>减少交通拥堵，基于IP做分段和传达，用来减少拥塞</p></li><li><p>Talk to other network</p><p>与其他网络交谈</p></li></ul><p><img src="https://s2.loli.net/2022/04/25/XEW8cvyLj5euDTM.png"></p><ul><li>在上面我们可以发现，对于不同数据链路层的帧，第三层基于IP地址，来实现跨介质的逻辑理解和连通。</li><li>第三层负责进行连通和传达，数据可靠性由终端设备(第四层及以上)来进行保证(不然会带来比较大的计算量)。</li></ul><h2 id="devices-设备">Devices 设备</h2><ul><li><p>Routers</p><ul><li><p>Interconnect network segments <em>or</em> networks</p><p>互联网段 or 网络</p></li><li><p>Make logical decisions based on IP addresses</p><p>根据ip地址做出合理的决定</p></li><li><p>Determine best path</p></li></ul><p>根据路由表决定最佳路径</p><ul><li>Switch packets from incoming ports to outgoing ports</li></ul><p>将数据包从入站端口切换到出站端口</p></li></ul><p>如果A网段的设备向路由器发送了一个B网段的广播地址，那么路由器会进行转发，然而如果A网段设备发射的是本网段的广播地址，路由器不会进行转发（广播域划分）</p><h1 id="ip-addresses-and-subnets-ip地址和子网划分">IP Addresses andSubnets IP地址和子网划分</h1><h2 id="packetdatagram-封包数据报格式">Packet/Datagram封包/数据报格式</h2><p><img src="https://s2.loli.net/2022/04/25/OEoYvuZTV6FWiwX.png"></p><p><strong>IP地址在报文中占据一部分(32bit一个IP地址)</strong></p><h2 id="ipv4-报文主要结构">IPv4 报文主要结构</h2><p><img src="https://s2.loli.net/2022/04/25/BOsK86gY3LFrR9P.png"></p><h3 id="首部部分">首部部分</h3><blockquote><p>首部部分：上面蓝框部分的整体是首部部分</p></blockquote><h3 id="版本号">版本号</h3><blockquote><p>版本号:占 4 bit，指IP协议的版本。目前的 IP 协议版本号为 4 (即IPv4)(6也就对应IPv6</p></blockquote><h3 id="首部长度">首部长度</h3><blockquote><p>首部长度:占 4 bit，可表示的最大数值是15个单位(一个单位为 4 字节)因此IP的首部长度的最大值是60字节。</p></blockquote><ol type="1"><li>因为首部长度是不确定的，所以我们需要进行标识。(用来方便读取)</li><li>首部长度的32 bit为一行，也就是4个字节为一个单位</li><li>所以IP报文首部字段长度为15行</li></ol><h3 id="服务类型">服务类型</h3><blockquote><p>服务类型:占8bit，用来获得更好的服务，这个字段以前一直没有被人们使用。</p></blockquote><h3 id="总长度">总长度</h3><blockquote><p>总长度:占 16bit，指<strong>首部和数据</strong>之和的长度，单位为字节，因此数据报的最大长度为65535字节(由于放到帧里面，所以大多数不比1500字节长)。总长度必须不超过最大传送单元MTU。</p></blockquote><h3 id="标识">标识</h3><blockquote><p>标识(identification):占 16bit，它是一个计数器，用来产生数据报的标识。</p></blockquote><ol type="1"><li>他只是为了做报文分片的问题，因为路由器可能连接的是不同网络，比如有线帧和无线帧。</li><li>接收方依据标识号进行合并(相同标识号的报文是一个大报文，可以合并的)</li></ol><h3 id="标志">标志</h3><blockquote><p>标志占 3 bit，最高位为 0</p></blockquote><ol type="1"><li>让发送方对报文进行控制，让中间路由器对其进行控制</li><li>DF(Don't fragement):是否允许做分片，0允许做分片,1不允许做分片</li><li>MF:MF为0表示最后一个分片,1是指后面还有分片</li></ol><h3 id="片偏移">片偏移</h3><blockquote><p>片偏移(13bit)指出：较长的分组在分片后某片在原分组中的相对位置。片偏移以8个字节为偏移单位。</p></blockquote><ol type="1"><li>相同标识号，然后根据片偏移进行重拍(先发未必先到)，偏移比较小的更靠前</li><li>因为16-3 = 13，2^3 = 8(因为单位是字节，所以用13位就可以补齐)</li><li>例子(计算偏移量):偏移是字节为单位</li></ol><p><img src="https://s2.loli.net/2022/04/26/z4TwGYJ5vSkLq7b.png"></p><p><img src="https://s2.loli.net/2022/04/26/WbB5dZhHpMLfn1q.png"></p><h3 id="生存时间">生存时间</h3><blockquote><p>生存时间(8 bit)记为 TTL (Time To Live)数据报在网络中可通过的<strong>路由器数</strong>的最大值。</p></blockquote><ol type="1"><li>是通过计数的方式来进行统计</li><li>最大值是255(最多经过255个路由器)</li><li>路由器每转发一次，就会对生存时间-1</li><li>减小为0后，就会丢弃掉，并且通知给发送方我已经丢弃掉这个报文。</li><li>防止在环上进行传输，避免由于回路问题，造成过大的网络资源浪费</li></ol><h3 id="协议">协议</h3><blockquote><p>协议(8bit)字段指出此数据报携带的数据使用何种协议以便目的主机的IP层将数据部分上交给哪个处理过程</p></blockquote><ol type="1"><li>有的协议是上层的</li><li>有的协议是第三层协议</li><li>具体协议的情况如下</li></ol><h3 id="首部检验和">首部检验和</h3><p><img src="https://s2.loli.net/2022/04/26/DHUTsyJVahIjSiW.png"></p><blockquote><p>首部检验和(16 bit)字段:只检验数据报的首部，不包括数据部分。这里不采用CRC检验码而采用简单的计算方法。算法过程如下(比较形式化的问题，并不能解决数据报错误的形式)</p></blockquote><p><img src="https://s2.loli.net/2022/04/26/VwiUXaIoTRjLPzQ.png"></p><ol type="1"><li>源地址和目的地址都各占 4 字节</li><li>15 * 4: 15行，每行4字节</li></ol><h2 id="网络层地址">网络层地址</h2><ol type="1"><li><p>IP addresses are 32 bits long</p><p>IP地址为32位长(Ipv4中)</p></li><li><p>They are represented as four octets in dotted decimal format133.14.17.0</p><p>它们以点分十进制格式表示为四个八位字节：133.14.17.0</p></li><li><p>The IP address has two components:</p><p>IP地址包含两个组成部分：</p><ol type="1"><li><p>The network ID</p><p>网络ID</p></li><li><p>The host ID</p><p>主机ID</p></li></ol></li></ol><p><img src="https://s2.loli.net/2022/04/26/3jPHJFGUnhNVelv.png"></p><h3 id="网络地址用来标识网段">网络地址：用来标识网段</h3><ol type="1"><li><p>assigned by ARIN (American Registry for Internet Numbers,www.arin.net)</p><p>原来由ARIN(美国互联网号码注册机构，www.arin.net)分配，现在已经换了</p></li><li><p>identifies the network to which a device is attached</p><p>标识设备所连接(attached)的网络</p></li><li><p>may be identified by one, two, or three of the first threeoctets</p><p>可以由前三个八位位组(octets)中的一个，两个或三个来标识</p></li></ol><h3 id="主机idip地址后面占据1-3个字节">主机ID：IP地址后面占据1-3个字节</h3><ol type="1"><li><p>assigned by a network administrator</p><p>由网络管理员分配</p></li><li><p>identifies the specific device on that network</p><p>识别该网络上的特定设备</p></li><li><p>may be identified by one, vvtwo, or three of the last threeoctets</p><p>可以由最后三个八位位组中的一个，两个或三个来标识</p></li></ol><h2 id="ip地址">IP地址</h2><ol type="1"><li><p>Different class addresses reserve different amounts of bits forthe network and host portions of the address</p><p>不同的类地址为地址的网络部分和主机部分保留不同数量的位</p></li></ol><p><img src="https://s2.loli.net/2022/04/26/uIAEU6FiOkWvsTg.png"></p><ol start="2" type="1"><li>N是Net ID,H 是 Host ID</li></ol><h3 id="分类">分类</h3><p><img src="https://s2.loli.net/2022/04/26/fuCd1kcMFVX5QIA.png"></p><ol type="1"><li>IP地址主要通过第一个字节进行划分</li><li>0–127 Class A address A类地址</li><li>128-191 Class B address B类地址</li><li>192–223 Class C address C类地址</li><li>224–239 Class D – MulticastD类地址：多播：视频点播的原理也是组播(多播)</li><li>240–255 Class E - Research E类地址：研究</li></ol><h3 id="主机的数量">主机的数量</h3><ol type="1"><li><p>The maximum number of hosts vary for each class.</p><p>每个类别的最大主机数量各不相同。(不包含网络号)</p><ol type="1"><li>A类拥有16,777,214个可用主机(2<sup>24</sup> – 2)</li><li>Class B has 65,534 available hosts (2<sup>16</sup> – 2)B类具有65,534个可用主机(2<sup>16</sup> – 2)</li><li>Class C has 254 available hosts (2<sup>8</sup> – 2)C类具有254个可用主机(2<sup>8</sup> –2)</li></ol></li><li><p>为什么每一类地址中都要减去2？</p><ol type="1"><li><p>The first address in each network is reserved for the networkaddress</p><p>每个网络中的第一个地址都保留用于该网络地址</p></li><li><p>The last address is reserved for the broadcast address</p><p>最后一个地址是为广播地址保留的。</p></li></ol></li></ol><h3 id="保留reserved地址">保留(Reserved)地址</h3><ol type="1"><li>网络地址:在地址的主机部分中以二进制0结尾的IP地址<ol type="1"><li>A类网络地址示例：113.0.0.0</li><li>网络上的主机只有具有相同网络ID的其他主机才能直接通信。(用来确定是不是在一个网段里面)</li></ol></li><li>广播地址:用于将数据发送到网络上的所有设备。(一般是一个网段之间的)<ol type="1"><li>广播IP地址在地址的主机部分中以二进制1结尾。</li><li>B类地址的广播地址的示例:176.10.255.255 (decimal 255 = binary11111111)</li></ol></li><li>Class A<ol type="1"><li>99.0.0.0: a reserved network number</li><li>99.255.255.255: a broadcast number</li></ol></li><li>Class B<ol type="1"><li>156.1.0.0: a reserved network number</li><li>156.1.255.255: a broadcast number</li></ol></li><li>Class C<ol type="1"><li>203.1.17.0: a reserved network number</li><li>203.1.17.255:a broadcast number</li></ol></li></ol><h3 id="private-address-space-专用地址空间">Private Address Space专用地址空间</h3><blockquote><ol type="1"><li>10.0.0.0 - 10.255.255.255</li><li>172.16.0.0 - 172.31.255.255</li><li>192.168.0.0 - 192.168.255.255</li></ol></blockquote><ol type="1"><li><p>There are certain IP address ranges reserved for private IPaddressing schemes.</p><p>有某些IP地址范围保留用于专用IP寻址方案(Schemas)。上述地址都是用作局域网的内部网段。</p></li><li><p>IP address depletion and its solutions</p><p>IP地址耗尽及其解决方案</p><ol type="1"><li>NAT</li><li>CIDR</li><li>IPv6(最终解决方案)</li></ol></li><li><p>发展过程:网络位数小于24，使得其可以组成超网。</p></li><li><p>多个网段进行划分，保留足够的个人子网网段划分</p></li></ol><p><img src="https://s2.loli.net/2022/04/26/lMLcUYwvgQKNtZo.png"></p><h2 id="子网划分">子网划分</h2><ol type="1"><li><p>Network administrators sometimes need to divide networks intosmaller networks, called <em>subnets</em>, in order to provide extraflexibility</p><p>网络管理员有时需要将网络划分为较小的网络，称为<strong>子网</strong>，以提供<strong>额外的灵活性</strong>.</p></li><li><p>Bits are borrowed from the host field and are designated as thesubnet field</p><p>从主机字段借来的位被指定为子网字段(Subnet Fields)</p></li><li><p>ABC类网的主机数量比较大,会造成浪费，因为avalible的很多，很少能够用满。</p></li></ol><p><img src="https://s2.loli.net/2022/04/26/V1kIfwSbKHWmNhx.png"></p><ol start="4" type="1"><li>从Host中借位进行子网划分</li><li>子网掩码:是由发送方提供。</li><li>大的子网划分为小的子网来提高灵活性和利用率。</li></ol><h3 id="子网划分的基本概念">子网划分的基本概念</h3><ol type="1"><li><p>Subnets are smaller divisions of networks</p><p>子网是网络的较小部分</p><ol type="1"><li><p>provide addressing flexibility</p><p>提供寻址灵活性。(小的局域网可以完成隔离)</p></li><li><p>子网划分只需要本网段网络管理员进行处理即可，每一个子网也是一个网络(子网只是一个逻辑形式)</p></li></ol></li><li><p>Subnet addresses are assigned locally, usually by a networkadministrator.</p><p>子网地址通常由网络管理员在本地分配:每一个子网也是一个Net，实际上是和Net是一个标准的</p></li><li><p>Subnets reduce a broadcast domain</p><p>子网减少了广播域:使得广播域变小，提高网络利用率，避免接受到大量的无用的广播，广播只能在对应子网中进行广播。</p></li></ol><h3 id="how-many-bits-can-i-borrow-我们可以借多少位">How many bits can Iborrow? 我们可以借多少位？</h3><ol type="1"><li><p>The minimum number of bits you can borrow is<strong>two</strong></p><p>可以借用的最小位数是2</p></li></ol><p><img src="https://s2.loli.net/2022/04/26/Wwys1kuYaXmDetv.png"></p><ol type="1"><li><p>The minimum number of bits borrowed is 2,WHY?</p><p>借用的最小位数是2，为什么？</p></li><li><ol type="1"><li><p>If you were to borrow only 1 bit, to create a subnet, then youwould only have a network number - the .0 network - and the broadcastnumber - the .1 network</p><p>如果只借用1位以创建一个子网，那么您将只有一个网络号-.0网络-和广播号-.1网络，没有可以使用的专用网络。</p></li><li><p>两位的时候，01和10给Host，00给网络ID，11位广播地址</p></li><li><p>全0可能导致误判</p></li></ol></li><li><p>The maximum number of bits that can be borrowed can be any numberthat leaves at least 2 bits, remaining, for the host number</p><p>可以借用的最大位数可以是保留至少2位主机号的任何数字(给Host至少保留2位，因为1位的话，要么一个是NET无法使用，要么一个是广播地址)</p></li><li><ol type="1"><li>A类网络 20位</li><li>B类网络 14位</li><li>C类网络 6位</li></ol></li><li><p>互联网早期时，计算机比较少，没有划分子网。</p></li></ol><h3 id="byproduct-waste-addresses-子网划分的副产品地址浪费">Byproduct:Waste Addresses 子网划分的副产品：地址浪费</h3><ol type="1"><li><p>We must strike a balance between the number of subnets required,the hosts per subnet that is acceptable, and the resulting waste ofaddresses</p><p>我们必须在所需的子网数，每个子网可接受的主机以及地址的浪费之间取得平衡(strikea balance)。</p></li><li><ol type="1"><li>hostID里面的全0和全1不能使用</li><li>subnet不可以使用全0和全1</li><li>借用4位是最高效率的，提升了划分灵活性，影响了效率</li></ol></li></ol><p><img src="https://s2.loli.net/2022/04/26/4YFUAclW2ZTv9ho.png"></p><h3 id="subnet-mask-子网掩码">Subnet Mask 子网掩码</h3><ol type="1"><li><p>Alias: extended network prefix</p><p>别名:扩展网络前缀</p></li><li><p>define how many bits we use to construct the network, and howmany bits to describe the host addresses</p><p>定义我们用来构建网络的位数，以及描述主机地址的位数</p></li><li><ol type="1"><li>Class A 255.0.0.0</li><li>Class B 255.255.0.0</li><li>Class C 255.255.255.0</li></ol></li></ol><h3 id="calculating-a-subnet-计算子网">Calculating a Subnet计算子网</h3><ol type="1"><li><p>We will subnet the IP address: 223.14.17.0</p><p>我们有一个C类网络：223.14.17.0</p></li><li><p>我们需要完成如下划分</p><ol type="1"><li>划分成13个子网</li><li>每个子网有10个主机</li></ol></li></ol><h4 id="第一步">第一步</h4><ol type="1"><li><p>Determine the default subnet mask</p><p>确定默认的子网掩码</p></li><li><p>Class C default subnet mask: 255.255.255.0</p><p>C类网络的默认子网掩码是：255.255.255.0</p></li></ol><h4 id="第二步">第二步</h4><ol type="1"><li><p>Figure the actual number of subnets and hosts by borrowing bitsfrom host ID</p><p>通过从主机ID借用位来计算子网和主机的实际数量</p></li><li><p>Borrow 4 bits from the host</p><p>我们对每一个子网需要借用4位来满足一个子网有10台可用的主机。</p></li></ol><h4 id="第三步">第三步</h4><p><img src="https://s2.loli.net/2022/04/26/aKtqZboBeNzW7sO.png"></p><ol type="1"><li><p>We get 16 <em>possible</em> subnets and 16 <em>possible</em>hosts for each subnet because:</p><p>我们为每个子网获得16个可能的子网和16个可能的主机，因为：</p><ol type="1"><li><p>For the 4 bits borrowed each bit can be a 1 or a 0 leaving youwith 24 or 16 possible combinations</p><p>对于<strong>借用的4位</strong>，每个位可以是1或0，从而有<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.119ex" height="1.904ex" role="img" focusable="false" viewBox="0 -841.7 936.6 841.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></g></svg></mjx-container></span>或16种可能的组合。</p></li><li><p>The same goes for the 4 leftover host bits</p><p>4个剩余主机位也是如此。</p></li></ol></li><li><p>Important: There are only 14 <em>available</em> subnets and hostson each subnet. Why?</p><p>重要：每个子网上只有14个可用子网和主机。(一般情况下，而可用的是15个可用子网，因为0号子网可用)</p><ul><li><p>Because you cannot use the first and last subnet.</p><p>因为您不能使用第一个和最后一个子网。</p></li><li><p>Because you cannot use the first and last address within eachsubnet.</p><p>因为您不能使用每个子网中的第一个和最后一个地址。</p></li><li><p>For each, one is the broadcast address and one is the networkaddress</p><p>对于每个，一个是广播地址，一个是网络地址。</p></li></ul></li></ol><h4 id="第四步">第四步</h4><ol type="1"><li><p>Determine the subnet mask.</p><p>确定子网掩码。</p></li></ol><p><img src="https://s2.loli.net/2022/04/26/EjAFk7ebYChWrmJ.png"></p><ol type="1"><li><p>Where X represents the borrowed bits for subnetting</p><p>其中X表示用于子网划分的借用位。</p></li><li><p>Add the place values of X together to get the last octet decimalvalue of the subnet mask.</p><p>将X的位值相加，得到子网掩码的最后一个八位位组十进制值：128 + 64 + 32+ 16 = 240</p></li><li><p>子网掩码是：255.255.255.240</p></li><li><p>The subnet mask is used to reveal the subnet and host addressfields in IP addresses.</p><p>子网掩码用于显示IP地址中的子网和主机地址字段</p></li></ol><h4 id="第五步">第五步</h4><ol type="1"><li><p>Determine the ranges of host addresses</p><p>确定主机地址的范围</p></li></ol><p><img src="https://s2.loli.net/2022/04/26/dEW5jeA2wLvyn13.png"> <img src="https://s2.loli.net/2022/04/26/dEW5jeA2wLvyn13.png"></p><ol type="1"><li><p>16 <em>possible</em> subnets.</p><p>16个子网</p><p>14 <em>available</em> subnets</p><p>14个可用子网</p></li><li><p>16 <em>possible</em> hosts on each subnet</p><p>每个子网16个主机</p><p>14 <em>available</em> hosts on each subnet</p><p>14个可用主机</p></li></ol><h3 id="计算子网网络地址">计算子网网络地址</h3><ol type="1"><li><p>Step 1: Change the IP host address to binary.</p><p>第一步：将IP主机地址转换为二进制。</p></li><li><p>Step 2: Change the subnet mask to binary.</p><p>第二步：将子网掩码转换为二进制。</p></li><li><p>Step 3: Use the boolean operator AND to combine the two.</p><p>第三步：使用布尔运算符AND将两者进行运算。</p></li><li><p>Step 4: Convert the network binary address to dotted decimal</p><p>第四步：将网络二进制地址转换为点分十进制。</p></li></ol><p><img src="https://s2.loli.net/2022/04/26/7aQ9pSHmOvE1PWb.png"></p><ol type="1"><li><p>This is the subnet network address</p><p>这是子网的网络地址</p></li><li><p>It can help determine path</p><p>它可以帮助确定路径：用来确定是否是一个网段，是否可以通过网关进行转发</p></li></ol><p><img src="https://s2.loli.net/2022/04/26/scEIwYSMqTBxQA2.png"></p><ol type="1"><li><p>In order to find the network ID of a subnet, the router must takethe IP address, and the subnet mask, and logically, AND themtogether</p><p>为了找到子网的网络ID，路由器必须采用IP地址和子网掩码，并且在逻辑上将它们取和</p></li><li><p>路由器根据运算的结果进行计算</p></li><li><p>上图中的子网掩码255.255.255.0是255.255.0.0借用了8位产生的(而不要理解成为C类地址的子网掩码)</p></li></ol><h2 id="实践ip寻址问题">实践:IP寻址问题</h2><ol type="1"><li>Given 195.137.92.0 and needing 8 usable subnets, find the subnetworknumbers, the ranges of host numbers, and subnetwork broadcast numbers.给定195.137.92.0并且需要8个可用子网，请找到子网号，主机号范围和子网广播号。</li><li>IP Address is a class C. Default subnet mask is 255.255.255.0. Weneed to extend the network number by enough bits to give 8 usablesubnets. IP地址是C类。默认子网掩码是255.255.255.0。我们需要将网络号扩展足够的位数以提供8个可用子网。</li><li>Stealing 2 bits yields 2 usable subnets, stealing 3 bits yields 6usable subnets, so we must steal 4 bits to get 14 usable subnets, ofwhich we needed 8.借用2位会产生2个可用子网，借用3位会产生6个可用子网，因此我们借用4位才能获得14个可用子网，其中我们需要8个可用地址。</li><li>This makes the subnet mask 255.255.255.240. So the Network number is195.137.92.NNNN HHHH where Ns stand for network extension bits (subnets)and Hs stand for host numbers. 这将使子网掩码为255.255.255.240。因此，网络号为195.137.92.NNNNHHHH，其中Ns代表网络扩展位(子网)，Hs代表主机号。</li><li>Next we must number the subnets; there are 16 combinations of 4 bitbinary numbers but they retain their place value within the last octet.接下来，我们必须为子网编号。4位二进制数有16种组合，但它们在最后一个八位位组中保留其位置值。</li><li>借用4-6位都可以，因为并没有规定子网中主机数量，而为什么是6位是因为一个子网中最少用2位给主机。</li></ol><h1 id="layer-3-devices-第三层设备">Layer 3 Devices 第三层设备</h1><ol type="1"><li>第三层的路由器</li><li>路由器的两个功能:<ol type="1"><li>路径选择</li><li>路由转发:将报文转发取出</li></ol></li></ol><h2 id="path-determination-路径选择">Path determination 路径选择</h2><ol type="1"><li><p>The router uses to choose the next hop in the path for the packetto travel to its destination based on the link bandwidth, hop, delay…</p><p>路由器用于根据链路带宽，跳数，延迟 …</p></li><li><p>选择数据包到达目的地的路径中的下一跳。</p></li></ol><p><img src="https://s2.loli.net/2022/04/26/zlQ5hLcieHNrRCE.png"></p><ol start="4" type="1"><li>Internet核心层的冗余链路是很必要的(相对于路径选项消耗，其可靠性和稳定性更加重要)</li><li>路由器根据路由规范，选择他当时认为最为合适的路径</li></ol><h2 id="ip地址-1">IP地址</h2><ol type="1"><li><p>IP addresses are implemented in software, and refer to thenetwork on which a device is located</p><p>IP地址是用软件实现的，是指设备所在的网络。</p></li><li><p>Routers connect networks, each of which must have a uniquenetwork number in order for routing to be successful.</p><p>路由器连接网络，每个网络必须具有唯一的网络号才能成功进行寻找路径。</p></li><li><p>The unique network number is incorporated into the IP addressthat is assigned to each device attached to that network</p><p>唯一的网络号包含在分配(incorporated)给该网络上每个设备的IP地址中</p></li><li><p>IP地址是逻辑的，是我们配置的。(不同于MAC地址)</p></li><li><p>IP地址是有层次，做转发的依据是网段而不是具体的IP，同一网段设备都有相同的IP地址，也就是我们只要到达网段即可</p></li></ol><h2 id="路由器端口">路由器端口</h2><p><img src="https://s2.loli.net/2022/04/26/n1ReDGyS52a3HXA.png"></p><ol type="1"><li>路由器端口记录了网段的IP地址(和连接的地方是相同的)</li></ol><h2 id="路由器发送的过程">路由器发送的过程</h2><p><img src="https://s2.loli.net/2022/04/26/u9QOiVedMkIfUDn.png"></p><ol type="1"><li>A5主机发送报文给B5主机，这个报文的IP地址是B5所在的IP地址，形成帧，然后放上总线。</li></ol><p><img src="https://s2.loli.net/2022/04/26/1XYp8sw95Sucoat.png"></p><ol start="2" type="1"><li>路由器收到帧，然后进行理解，看到报文，知道目的地是B5(解封装)</li></ol><p><img src="https://s2.loli.net/2022/04/26/MbfdVO8qTQzt4jA.png"></p><ol start="3" type="1"><li>检查自己的路由表，找到目的地对应的端口</li></ol><p><img src="https://s2.loli.net/2022/04/26/Zz1GxgEDewW5o7I.png"></p><ol start="4" type="1"><li>在B1端口进行转发，形成新的帧</li></ol><p><img src="https://s2.loli.net/2022/04/26/KoAFL1MHCk8ltSu.png"></p><ol type="1"><li>形成一个全新的帧，这个帧的MAC地址是B1的MAC的地址。</li></ol><h2 id="路由器端口示例">路由器端口示例</h2><p><img src="https://s2.loli.net/2022/04/26/1KYbPCQlqNAUjcm.png"></p><ol type="1"><li><p>Interface is a router’s attachment to a network, it may also bereferred to as a port in IP routing.</p><p>接口是路由器连接到网络的附件，在IP路由中也可以称为端口。</p></li><li><p>这个IP地址往往被作为这个网络的网关</p></li><li><p>Each interface must have a separate, unique network address</p><p>每个接口必须具有一个单独的唯一网络地址。</p></li><li><ol type="1"><li>比如上图中S1和S2不能是相同的IP地址</li><li>路由器的连接的网段一定要是不同的</li></ol></li></ol><h2 id="ip地址分配">IP地址分配</h2><ol type="1"><li><p>静态地址分配(Static addressing)</p><ol type="1"><li><p>Configure each individual device with an IP address</p><p>为每个单独的设备配置一个IP地址</p></li><li><p>You should keep very meticulous records, because problems canoccur if you use duplicate IP addresses</p><p>您应该保留非常细致的记录，因为如果使用重复的IP地址，可能会出现问题。</p></li><li><p>需要知道规范，然后根据上下文，通过命令行进行分配地址</p></li></ol></li><li><p>动态地址分配(Dynamic addressing)</p><ul><li><p>There are a few different methods can be used to assign IPaddresses dynamically</p><p>有几种不同的方法可用于动态分配IP地址：</p><ul><li>RARP: Reverse Address Resolution Protocol.RARP：反向地址解析协议。发起请求</li><li>BOOTP: BOOTstrap Protocol. BOOTP：BOOTstrap协议。用于工作栈</li><li>DHCP: Dynamic Host Configuration Protocol. (比较多用)DHCP：动态主机配置协议</li></ul></li></ul></li><li><p>IP地址和掩码处理后得到网络地址，保证每个网段中的主机的网段地址应该是一致的，不然会出现错误的。</p></li></ol><h2 id="arp-protocol-arp协议">ARP Protocol ARP协议</h2><h3 id="address-resolution-protocol-地址解析协议">Address ResolutionProtocol 地址解析协议</h3><ol type="1"><li><p>In order for devices to communicate, the sending devices needboth the IP addresses and the MAC addresses of the destinationdevices.</p><p>为了使设备进行通信，发送设备需要目标设备的<strong>IP地址和MAC地址</strong>。</p></li><li><p>ARP enables a computer to find the MAC address of the computerthat is associated with an IP address</p><p>ARP使计算机能够查找与IP地址关联的计算机的MAC地址。</p></li><li><p>目的方IP地址 -&gt; 目的方MAC地址</p></li><li><p>需要知道对方的MAC地址，来形成数据地址。</p></li></ol><h3 id="arp示例">ARP示例</h3><p><img src="https://s2.loli.net/2022/04/26/oUaEzdujiVxKfSM.png"></p><ol type="1"><li>source主机访问destination</li><li>不知道目的主机在哪里</li></ol><h3 id="arp表的缓存">ARP表的缓存</h3><p><img src="https://s2.loli.net/2022/04/26/UINjWtlnhBic4zZ.png"></p><ol type="1"><li>可以通过lookup命令进行。</li><li>在RAM里面，如果ARP没有本条目的对应MAC地址。</li><li>MAC地址在ARP中是有时效性的。到时间不更新不激活就会删除</li></ol><h3 id="arp的操作">ARP的操作</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec04/30.png"></p><ol type="1"><li>使用ARP机制</li><li>上图中是一个示意图</li><li>此时ARP table中没有缓存</li><li>图问题:目的MAC地址应该在前面，源MAC地址字后面</li></ol><h4 id="arp-request">ARP request</h4><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec04/31.png"></p><ol type="1"><li>向目的方请求MAC地址</li><li>命令如图：就是找谁是这个主机，你的MAC地址是啥</li><li>将MAC地址设置为全1，作为广播发送</li></ol><h4 id="arp-checking">ARP Checking</h4><p><img src="https://s2.loli.net/2022/04/26/yQHUI1eRl7KgaXP.png"></p><ol type="1"><li>10.0.2.5发现不是自己的主机，那么解析到这里丢掉就行，同样会记录下来对应的发送方的MAC地址。(攻击原理)</li><li>10.0.2.9发现自己的MAC地址，然后形成ARP应答</li><li>同时10.0.2.9会同时记录下A主机的MAC地址，更新到自己ARP地址中去(会记录对方的)</li></ol><h4 id="arp-reply">ARP reply</h4><p><img src="https://s2.loli.net/2022/04/26/aCM2tHO3RufnVsl.png"></p><ol type="1"><li>向A主机进行MAC地址应答</li></ol><h4 id="arp-caching">ARP Caching</h4><p><img src="https://s2.loli.net/2022/04/26/vBxmQ1GqARnauCi.png"></p><ol type="1"><li>A的主机就会把对应的条目写到ARP Table中</li><li>然后再次形成一个数据帧发送出去即可。</li></ol><h3 id="arp-destination-local-目的地址为本地">ARP: Destination local目的地址为本地</h3><p><img src="https://s2.loli.net/2022/04/26/TVmbU5jLGaNcPKk.png"></p><ol type="1"><li>ARP请求是本网段形成的，是一个广播就可以。</li><li>如果目的主机不在本网段中，那么不能跨网段进行广播</li></ol><h3 id="arp-internetwork-communication-网络交流">ARP: InternetworkCommunication 网络交流</h3><p><img src="https://s2.loli.net/2022/04/26/C8VLOkP9R2IuaAJ.png"></p><ol type="1"><li>如何与不在同一物理网段上的设备通信？如下是两种解决方案。<ol type="1"><li>Default gateway 默认网关</li><li>Proxy ARP 代理ARP</li></ol></li></ol><h4 id="default-gateway-默认网关">Default gateway 默认网关</h4><ol type="1"><li><p>In order for a device to communicate with another device onanother network, you must supply it with a default gateway.</p><p>为了使设备与另一网络上的另一设备通信，您必须为其提供<strong>默认网关</strong>。</p></li><li><p>A default gateway is the IP address of the interface on therouter that connects to the network segment on which the source host islocated.</p><p><strong>默认网关是路由器上连接到源主机所在网段的接口的IP地址。</strong></p></li><li><p>In order for a device to send data to the address of a devicethat is on another network segment, the source device sends the data toa default gateway.</p><p>为了使设备将数据发送到另一个网段上的设备的地址，源设备将数据发送到<strong>默认网关</strong>。</p></li><li><p>192.168.0.0和192.168.0.1接入到路由器，如果网关错误是无法进行转发的。自己搭建拓扑需要手动配置。</p><ol type="1"><li>由网关对对应报文进行转发，默认网关就是</li><li>THPCP Server进行动态生成</li></ol></li><li><p>帧被发送到另一个不通过网段的链路无意义</p></li><li><p>发送报文到另一个网段，需要路由器把对应端口的网关的MAC告诉你，然后通过网关进行转发。</p></li></ol><h4 id="proxy-arp-代理arp">Proxy ARP 代理ARP</h4><ol type="1"><li><p>代理ARP是ARP的一种变体(variation)。</p></li><li><p>In the case the source host does not have a default gatewayconfigured.</p><p>如果源主机未配置默认网关。</p></li></ol><p><img src="https://s2.loli.net/2022/04/26/ipAMHZeVT5gjL1a.png"></p><ol type="1"><li>发送ARP请求，然后路由器给你一个ARP的reply，告诉你MAC地址(一般为本端口的IP地址)</li></ol><h3 id="destination-not-local-arp对应目的方不是本地">Destination notlocal ARP对应目的方不是本地</h3><p><img src="https://s2.loli.net/2022/04/26/lgEekbCTO9dNMD6.png"></p><ol type="1"><li>路由器会把Router MAC的地址给你(连接本网段的MAC地址)</li></ol><h3 id="arp-flowchart-arp流程图">ARP Flowchart ARP流程图</h3><p><img src="https://s2.loli.net/2022/04/26/yZOkV93pJ5wYoIW.png"></p><ol type="1"><li>ARP攻击：有一个机器恶意发送无用帧，然后会将cache写满(解决就是一段时间不处理，然后等待ARP记录中的记录失效)</li><li>ARP学习是收到不同的帧，对帧进行保存</li><li>每一个ARP是有声明期的</li></ol><h1 id="network-layer-services-网络层设备">Network Layer Services网络层设备</h1><h2 id="connection-oriented-network-services-面向连接的网络服务">Connectionoriented network services 面向连接的网络服务</h2><p>A connection is established between the sender and the recipientbefore any data is transferred.</p><p><img src="https://s2.loli.net/2022/04/26/xHEMcdSCJbZrKyq.png"></p><ol type="1"><li>面向连接的网络服务<ol type="1"><li>就是任何发送数据的行为之前，先要建立好连接，协商好参数才会开始传输，所有数据进行有序传输</li><li>网络情况导致数据出现问题，需要接受方进行一定处理来保证数据正确</li></ol></li><li>传输过程中要保持连接距离，只有完成传输后才能断开连接。</li><li>传输比较可靠，代价高。</li></ol><h2 id="无连接的网络服务">无连接的网络服务</h2><p><img src="https://s2.loli.net/2022/04/26/YFQnLVim6OcgoKX.png"></p><ol type="1"><li>他们分别对待每个数据包。</li><li>IP是<strong>无连接系统</strong>。</li><li>不要求发送方和接收方在发送前先建立一个连接(不打招呼)。</li><li>系统不需要进行大量的数据保留，不需要很多的缓存</li><li>局域网使用的比较多，可靠性比较低，不处理报文丢失</li><li>可靠网中，少量报文使用无连接是可以提高效率的(常用于比较小型的，并且可靠性相对比较高的网络)</li></ol><h2 id="电路交换circuit-switched">电路交换(Circuit switched)</h2><ol type="1"><li><p>Connection-oriented vs. circuit switched.</p><p>面向连接与电路交换。</p><ol type="1"><li><p>However, the two terms are not the same</p><p>但是，这两个词并不相同</p></li><li><p>要先建立一个虚电路关系，之后报文走对应的虚电路。</p></li></ol></li><li><p>Connection-oriented: establish a connection with the recipient,first, and then begin the data transfer</p><p>面向连接：首先与接收者建立连接，然后开始数据传输。</p></li><li><p>All packets travel sequentially across the same channel, or morecommonly, across the same virtual circuit</p><p>所有数据包依次在同一通道上传播，或更常见的是在同一虚拟电路上传播。</p></li><li><p>问题:电路的利用效率低，一个人用了别人就不能用了(虚电路可能是分段建立，可能局部可以复用，但是整体不可以复用)。</p></li><li><p>虚电路要强于面向连接的，传输更加可靠，保证<strong>传输先后关系</strong>。</p></li></ol><h2 id="报文交换packet-switched">报文交换(Packet Switched)</h2><ol type="1"><li><p>Connectionless network vs. packet switched： The two terms arenot the same, either</p><p>无连接网络与数据包交换:这两个词都不一样</p></li><li><p>When the packets pass from source to destination, they can:</p><p>当数据包从源传递到目标时，它们可以：</p><ol type="1"><li><p>Switch to different paths.</p><p>切换到其他路径。(每一报文有各自的发送方和接收方，可以根据当前的网络情况，进行路由选择)</p></li><li><p>Arrive out of order.</p><p>乱序到达。</p></li></ol></li><li><p>Devices make the path determination for each packet based on avariety of criteria. Some of the criteria may differ from packet topacket.</p><p>设备根据<strong>各种标准</strong>为每个数据包<strong>确定路径</strong>。某些标准可能因分组而异。</p></li><li><p>将原始数据分为很多的子报文(单位)，每个子报文(单位)自己选择路径进行发送。</p></li><li><p>大部分的Connetionless network都是基于packetswitched进行实现，控制网络拥塞。</p></li><li><p>出现问题时候，我们只需要重传对应部分的报文就可以(不用重传全部数据)</p></li></ol><h1 id="network-layer-网络协议操作">Network Layer 网络协议操作</h1><p><img src="https://s2.loli.net/2022/04/26/UB3DhaLxuCylTOw.png"></p><ol type="1"><li>存在冗余，A转发给B是由当前网络状态处理。</li><li>ABC之间都是通过帧进行计算的。</li></ol><h2 id="routed-protocol-被动可路由协议">Routed protocol被动可路由协议</h2><ol type="1"><li>为网络层提供支持的协议称为路由协议或可路由协议。</li><li>IP是网络层协议，因此，它可以通过互联网络进行路由。</li></ol><h2 id="non-routable-protocol-不可路由协议">Non-routable protocol不可路由协议</h2><ol type="1"><li><p>Non-routable protocols are protocols that do not support Layer3</p><p>不可路由协议是不支持第3层的协议。</p></li><li><p>The most common of these non-routable protocols is NetBEUI</p><p>这些不可路由协议中最常见的是NetBEUI。</p><ol type="1"><li>直接根据目的方的地址在局域网中进行生成定位</li><li>这个协议不支持第三层，也就是跨局域网是不可以的。</li></ol></li><li><p>NetBEUI is a small, fast, and efficient protocol that is limitedto running on one segment</p><p>NetBEUI是一种小型，快速且高效的协议，仅限于在一个网段上运行。</p></li></ol><h2 id="addressing-of-a-routable-protocol-被动可路由协议的寻址">Addressingof a routable protocol 被动可路由协议的寻址</h2><p><img src="https://s2.loli.net/2022/04/26/hMlbis51yArX26a.png"></p><p><strong>Routing table</strong></p><p><img src="https://s2.loli.net/2022/04/26/yZ9YnAFegQG3hz7.png"></p><ol type="1"><li>路由器连接三个网段(列出来的是网络号)</li><li>将目的主机和掩码进行逻辑AND操作，得到对应的网段</li><li>然后请求路由表可以发现E2端口为目的网段</li><li>再次将报文封装转发给对应的主机</li><li>路由表是存储在内存中的</li></ol><h2 id="classification-static-and-dynamic-路由协议的分类静态动态">Classification: Static and Dynamic 路由协议的分类:静态、动态</h2><ol type="1"><li><p>Static routes: The network administrator manually enter therouting information in the router</p><p>静态路由：网络管理员在路由器中手动输入路由信息。</p></li><li><p>Dynamic routes:</p><p>动态路由</p><ol type="1"><li><p>Routers can learn the information from each other on the fly.</p><p>路由器可以在运行过程中互相学习信息。</p></li><li><p>Using routing protocol to update routing information</p><p>使用路由协议更新路由信息。</p></li><li><p>RIP, IGRP, EIGRP, OSPF …</p></li><li><p>人工维护的代价比较大</p></li></ol></li></ol><h3 id="static-vs.-dynamic-routes-静态路由和动态路由的区别">Static vs.dynamic routes 静态路由和动态路由的区别</h3><ol type="1"><li><p>静态路由</p><ol type="1"><li><p>For hiding parts of an internetwork用于<strong>隐藏</strong>部分网络。安全(不必进行路由表的交换)</p></li><li><p>To test a particular link in a network测试网络中的特定链接。</p></li><li><p>For maintaining routing tables whenever there is only one path toa destination network.</p><p>用于仅在到达目标网络的路径时维护路由表。</p></li></ol></li><li><p>动态路由</p><ol type="1"><li>Maintenance of routing table 维护路由表。</li><li>Timely distribution of information in the form of routing updates以路由更新的形式及时分发信息。</li><li>Relies on routing protocol to share knowledge依靠路由协议共享知识。</li><li>Routers can adjust to changing network conditions.路由器可以调整以适应不断变化的网络状况。</li><li>打开后会启动<strong>进程</strong>，按照不同的协议，和网上的不同设备学习信息，然后根据<strong>算法</strong>生成路由表</li></ol></li></ol><h3 id="routing-protocol-主动路由协议routing">Routing protocol主动路由协议(Routing)</h3><ol type="1"><li><p>Routing protocols determine the paths that routed protocolsfollow to their destinations.</p><p>路由协议确定路由协议遵循的到达目的地的路径。</p></li><li><p>是用来构建路由表的，所以叫做routing</p></li><li><p>公平、简单、适应变化等特点</p></li></ol><h2 id="routed-vs.-routing-protocol-被动路由协议和主动路由协议">Routedvs. Routing protocol 被动路由协议和主动路由协议</h2><p><img src="https://s2.loli.net/2022/04/26/l1uoFkrXJB4KhwH.png"></p><ol type="1"><li>RoutedPortocol用于路由器之间，用来保证路由器之间连通(完成转发)，保证路由器有效连通。</li><li>Routing Protocol用于做各自的路由表的生成：路由器彼此交换信息。</li><li>Routing Protocol 决定 Routed Protocals</li></ol><h2 id="动态路由协议的分类内部网关协议和外部网关协议">动态路由协议的分类：内部网关协议和外部网关协议</h2><ol type="1"><li><p>Interior Gateway Protocols (RIP, IGRP, EIGRP, OSPF):</p><p>内部网关协议(Interior GatewayProtocols，RIP，IGRP，EIGRP，OSPF)：</p><p>Be used within an autonomous system, a network of routers under oneadministration, like a corporate network, a school district's network,or a government agency's network.</p><p>可在自治系统(autonomoussystem，大的单位或者管理方)中使用，该系统是一个主管部门下的路由器网络，例如公司(corporate)网络，学区的网络或政府机构的网络。</p></li><li><p>Exterior Gateway Protocols (EGP, BGP):</p><p>外部网关协议(Exterior Gateway Protocols，EGP，BGP)：</p><p>Be used to route packets between autonomous systems.</p><p>用于在自治系统之间路由数据包。</p></li><li><p>自治系统是<strong>逻辑</strong>的划分,而未必是物理层次的划分。</p></li><li><p>通过BGP，让其他自治系统了解自己的自治系统中的网段。</p></li><li><p>内部网关协议和外部网关协议的区别：</p><ol type="1"><li>一个单位对自己内部的网络管理负责，用一些协议。</li><li>IGP是内部确定的管理规则，BGP(EGP)标准来沟通不同自己系统。</li></ol></li></ol><h2 id="内部网关协议的分类dvp-and-lsp">内部网关协议的分类：DVP andLSP</h2><ol type="1"><li>距离矢量协议(Distance-Vector Protocols，RIP, IGRP):<ol type="1"><li>View network topology from neighbor’s perspective.从<strong>邻居</strong>的角度查看网络拓扑。(注意不基于全局)</li><li>Add distance vectors from router to router.在路由器之间添加距离向量。(根据跳数来决定，经过一个路由器+1一次)</li><li>Frequent, periodic updates 经常定期(periodic)更新。</li><li>Pass copy of routing tables to neighbor routers将路由表的<strong>副本</strong>传递到邻居路由器。</li></ol></li><li>链路状态协议(Link State Protocols, OSPF):<ol type="1"><li>Gets common view of entire network topology获取整个网络拓扑的通用视图。(全局的视角，会有代价)</li><li>Calculates the shortest path to other routers.计算到其他路由器的最短路径。(基于带宽计算出来的cost，形成cost拓扑图，然后计算出对应的路径代价作为评判依据)</li><li>Event-triggered updates <strong>事件</strong>触发的更新。</li><li>Passes link state routing updates to other routers将链接状态路由更新传递给其他路由器。</li></ol></li></ol><h3 id="distance-vector-routing-距离矢量协议dvp的示例">Distance vectorrouting 距离矢量协议(DVP)的示例</h3><p><img src="https://s2.loli.net/2022/04/26/5xihw9XL6NAyjVd.png"></p><ol type="1"><li>初始的时候，各自持有的是黑色的部分(直连的线路)</li><li>定时路由表会相互交换给邻居，下一时刻C学习到B，B学习到AC，A学习到B，在下一刻进行再次的转发。</li><li>DVP只知道到达一个网段的最少跳数(但是不知道最佳路径)。</li><li>会生成路由回路</li></ol><h3 id="riprouting-information-protocol-dv的代表">RIP(RoutingInformation Protocol) DV的代表</h3><ol type="1"><li>最受欢迎。(实现算法简单，更加靠谱)</li><li>基于距离矢量的内部网关协议。</li><li>唯一的指标是跳数。</li><li>最大跳数为15。(评判依据简单，是一个短板)</li><li>每30秒更新一次(广播)，可以修改。</li><li>并非总是选择最快的路径(而是走跳数最短的路径)。</li><li>产生大量的网络流量。</li><li>RIP v2是RIP v1的改进版本<ul><li>RIP v1用地址广播</li><li>RIP v2用主播地址广播，支持身份认证、路由等，比较安全，常用</li></ul></li></ol><h3 id="link-state-routing-链路状态协议lsp">Link state routing链路状态协议(LSP)</h3><p><img src="https://s2.loli.net/2022/04/26/BKyiYsjO8zeGfWt.png"></p><blockquote><p>上图中的Routing table应该叫做初始时刻的Routing Table(本图的问题)</p></blockquote><ol type="1"><li>彼此交换连接情况，交换的是<strong>Linkstate</strong>而不是路由表，包含link的信息，以NetID作为主键(无相同网段)，包含的是link上的路由器邻接关系、链路类型(4种)、链路带宽，会指定谁连接了谁，这个条目就被称为Database(表)。这样子就不仅仅知道链路，还知道更多的全局信息。</li><li>LSP操作过程:<ol type="1"><li>相互交换彼此学到对应的Tpological Database(是全局的信息)</li><li>之后使用SPF算法，以自己为根，通过最短路径优先算法，生成以自己为根的树</li><li>根据这一个树再生成路由表(了解全局的信息)，逻辑是树的逻辑。</li></ol></li><li>LSP不是进行定时进行交换的，而是初始的时候进行交换，稳定之后，根据<strong>事件触发</strong>的时候才会更新数据。<ol type="1"><li>更新后发送给所有的路由器，需要将Database发送给所有的路由器</li><li>收到的路由器的，根据database更新自己的树，然后再次生成路由表。</li></ol></li><li>LSP是指从所有可达的道路上找到代价最小的路径。</li><li>全局可能会比较大，考虑负载进行处理</li><li>但是没有路由回路，单域内一般不超过20个路由器</li><li>路由表一般只保存一个最优的转发点的(负载均衡)</li></ol><h3 id="ospfopen-shortest-path-first">OSPF(Open Shortest PathFirst)</h3><ol type="1"><li>最短路径优先协议，是基于链路状态的内部网关协议，消耗CPU和内存。</li><li>指标由<strong>带宽</strong>，速度，流量，可靠性和安全性组成，本科阶段只考虑带宽的。</li><li>事件触发的更新。</li><li>最快和什么有关？(最快指的是带宽)<ol type="1"><li>和实时各条链路上的通信冗余有关，也和管理方案有关，简单来说是和带宽有关</li><li>带宽表示为代价，带宽和代价成<strong>反比</strong>。</li></ol></li></ol><h3 id="igrp-interior-gateway-routing-protocol-and-eigrp-enhanced-igrp">IGRP(Interior Gateway Routing Protocol) and EIGRP (Enhanced IGRP)</h3><ol type="1"><li><p>Cisco proprietary. 思科知识产权的。</p></li><li><p>Interior Gateway Protocol. 基于距离矢量的内部网关协议。</p></li><li><p>Distance Vector Protocol. IGRP最大跳数为255。</p></li><li><p>Metric is compose of bandwidth, load, delay and reliability</p><p>EIGRP指标由<strong>带宽(bandwidth)，负载(load)，延迟(delay)和可靠性(reliability)</strong>组成。加权进行运算</p></li><li><p>Updates every 90 seconds 每90秒更新一次。</p></li><li><p>EIGRP is an advanced version of IGRP, that is hybrid routingprotocol.</p><p>EIGRP是IGRP的高级版本，它是<strong>混合</strong>路由协议(不全是根据跳数来计算)。</p></li><li><p>IOS 12.0以后，不支持IGRP，在模拟器中还可以。</p></li><li><p>EIGRP是可以的，和华为等路由器是不兼容的。(因为知识版权是思科独有的)</p></li></ol><h1 id="vlsmvariable-length-subnet-mask-可变长度子网掩码">VLSM(VariableLength Subnet Mask) 可变长度子网掩码</h1><h2 id="classful-routing-vlsm-经典路由和可变长度子网掩码">Classfulrouting &amp; VLSM 经典路由和可变长度子网掩码</h2><h3 id="classful-routing-经典路由classful-routing-无子网掩码">Classfulrouting 经典路由(Classful routing) 无子网掩码</h3><ol type="1"><li><p>Classful routing protocols require that a single network use thesame subnet mask</p><p>有类的路由协议要求单个网络使用相同的子网掩码。</p></li><li><p>例如：网络192.168.187.0必须仅使用一个子网掩码，例如255.255.255.0。</p></li><li><p>会造成网络号的浪费(为了规格一致，为了保证标准一致，会浪费一些网络号)，比如路由器之间的网络没有必要给很多的hostID。</p></li><li><p>特定的情况:将路由器端口的掩码作为目的网络的掩码，可以进一步完成细化</p></li></ol><h3 id="vlsm-variable-length-subnet-masks-可变长度子网掩码variable-length-subnet-masks-有子网掩码">VLSM— Variable-Length Subnet Masks 可变长度子网掩码(Variable-Length SubnetMasks) 有子网掩码</h3><ol type="1"><li><p>VLSM is simply a feature that allows a single autonomous systemto have networks with different subnet masks.</p><p>VLSM只是一项功能，它允许单个自治系统的网络具有不同的子网掩码。</p></li><li><p>有效的解决网络号浪费的问题</p></li></ol><h2 id="vslm-可变长度子网掩码">VSLM 可变长度子网掩码</h2><ol type="1"><li><p>With VLSM, a network administrator can</p><p>使用VLSM，网络管理员可以在主机少的网络上使用长掩码，而在主机多的子网上使用短掩码。(提供了很高的灵活性)</p></li><li><p>如果路由协议允许VLSM</p><ol type="1"><li>在路由网络连接上使用30位子网掩码255.255.255.252</li><li>用户网络的24位掩码255.255.255.0</li><li>或者，对于最多1000个用户的网络，甚至是22位掩码255.255.252.0。(保留10位)</li></ol></li><li><p>在CIDR的基础上发展的，报文中包含有子网掩码。</p></li></ol><h2 id="为什么使用vlsm">为什么使用VLSM</h2><ol type="1"><li><p>VLSM allows an organization to use more than one subnet maskwithin the same network address space</p><p>VLSM允许组织在同一网络地址空间内使用多个子网掩码。</p></li><li><p>Implementing VLSM is often referred to as "subnetting a subnet",and can be used to maximize addressing efficiency.</p><p>实施VLSM通常被称为"子网划分"，可用于最大化寻址效率。</p></li><li><p>VLSM is one of the modifications that has helped to bridge thegap between IPv4 and IPv6.</p><p>VLSM是有助于缩小IPv4和IPv6之间差距的修改(modifications)之一。</p></li></ol><h2 id="vlsm优缺点">VLSM优缺点</h2><h3 id="vlsm的优点">VLSM的优点</h3><ol type="1"><li>Efficient use of IP addresses 高效使用IP地址</li><li>Better route aggregation 更好的路由聚合(aggregation):构建超网</li></ol><h3 id="vlsm的缺点">VLSM的缺点</h3><ol type="1"><li><p>会导致地址空间的浪费:广播地址和网络号都无法被使用。</p><ol type="1"><li><p>In the past, it has been recommended that the first and lastsubnet not be used. But we can used the Subnet 0 from Cisco IOSver12.0</p><p>过去，建议不要使用第一个和最后一个子网。但是我们可以使用Cisco IOSver12.0中的子网0。</p></li><li><p>从IOS ver12.0起，Cisco路由器默认使用零子网。</p></li><li><p>如果想要禁止零子网，使用该指令:<code>router(config)#no ip subnet-zero()</code></p></li></ol></li></ol><p><img src="https://s2.loli.net/2022/04/26/3Sqe1oWpnFk9Pd5.png"></p><blockquote><p>上图解释了子网长度相同会造成怎样的浪费(在路由器所在的子网段我们只需要满足2个主机，也就是需要2位的主机号就可以完成操作)每一个位置都需要30个主机,有7个子网可以使用(全零可以使用，而全一不可以使用)</p></blockquote><h2 id="support-vlsm-routing-protocol-支持vlsm的路由协议">Support VLSMRouting Protocol: 支持VLSM的路由协议</h2><ol type="1"><li>Open Shortest Path First (OSPF) 开放式最短路径优先(OSPF)</li><li>Integrated Intermediate System to Intermediate System (IntegratedIS-IS) 集成中间系统到中间系统(集成IS-IS)</li><li>Enhanced Interior Gateway Routing Protocol (EIGRP)增强型内部网关路由协议(EIGRP)</li><li>RIP v2</li><li>Static routing 静态路由</li></ol><h2 id="vlsm的表示法">VLSM的表示法</h2><p><img src="https://s2.loli.net/2022/04/26/lz8KqfTxe73XBcd.png"></p><ol type="1"><li>斜杠的含义是指前面多少位保留给网络位</li><li>此时也就是/30就可以满足路由器之间的网络连通所需(减少浪费)，剩下的网络地址可以在以后网络进行扩展</li><li>这个例子中不使用VLSM还是可以进行解决的</li></ol><h2 id="vlsm的例子">VLSM的例子</h2><p><img src="https://s2.loli.net/2022/04/26/mwiH4o176nt8zrp.png"></p><h3 id="划分背景">划分背景</h3><ol type="1"><li>已分配192.168.10.0/24的C类地址。<ol type="1"><li>珀斯，悉尼和新加坡与吉隆坡建立WAN连接。</li><li>珀斯需要60个主机</li><li>KL需要28个主机</li><li>悉尼和新加坡分别需要12位房东。</li></ol></li><li>先划分成大的子网，然后进一步进行划分，然后在慢慢进行细化</li><li>为了计算VLSM子网，各个主机首先从地址范围分配最大的需求。需求级别应从最大到最小列出。</li></ol><h3 id="第一步满足珀斯的主机需求">第一步:满足珀斯的主机需求</h3><ol type="1"><li>在此示例中，珀斯需要60个主机号。</li><li>使用6位，因为2<sup>6</sup> – 2 =62个可用主机地址。因此，将从第四个八位位组开始使用2位来表示/26的扩展网络前缀，其余6位将用于主机地址。</li><li>在地址192.168.10.0/24上应用VLSM可得到：<ol type="1"><li>192.168.10.00 hh hhhh /26</li><li>255.255.255.192 (1100 0000)</li></ol></li></ol><p><img src="https://s2.loli.net/2022/04/26/mW5fUDySJlVXNKF.png"></p><ol start="4" type="1"><li>第一个给Perth使用，剩下的用作保留未使用的</li></ol><h3 id="第二步为吉隆坡划分子网">第二步:为吉隆坡划分子网</h3><ol type="1"><li>吉隆坡需要28台主机号。192.168.10.63/26之后的下一个可用地址是192.168.10.64/26。</li><li>由于需要28个主机，因此主机地址需要5位，即25 –2 =30个可用主机地址。</li><li>因此，将需要5位来表示主机，而将使用3位来表示扩展网络前缀/27</li><li>在地址192.168.10.64/26上应用VLSM可得到：<ol type="1"><li>192.168.10.010 hhhhh /27</li><li>255.255.255.224 (1110 0000)</li><li>三个子网再借用一位</li></ol></li></ol><p><img src="https://s2.loli.net/2022/04/26/V3CqER5sS1y7z6e.png"></p><h3 id="第三步为悉尼和新加坡进行分配地址">第三步:为悉尼和新加坡进行分配地址</h3><ol type="1"><li>现在，悉尼和新加坡分别需要12位主机号。下一个可用地址从192.168.10.96/27开始。</li><li>由于需要12个主机，因此主机地址需要4位，即24 = 16、16 – 2 =14个可用地址。</li><li>因此，需要4位来表示主机，对于/28的扩展网络前缀需要4位。</li><li>在地址192.168.10.96/27上应用VLSM可得到：<ol type="1"><li>192.168.10.0110 hhhh /28</li><li>255.255.255.240 (1111 0000)</li></ol></li></ol><p><img src="https://s2.loli.net/2022/04/26/49nbf1adACErFBT.png"></p><h3 id="第四步为之间的路由地址进行划分">第四步:为之间的路由地址进行划分</h3><ol type="1"><li>现在为WAN连接分配地址。请记住，每个WAN连接都需要两个IP地址。下一个可用的子网是192.168.10.128/28。</li><li>由于每个WAN链路需要2个网络地址，因此主机地址需要2位，即22 –2 =2个可用地址。</li><li>因此，需要2位来表示链接，并需要6位来表示扩展网络前缀/30。</li><li>在192.168.10.128/28上应用VLSM可得到：<ol type="1"><li>192.168.10.011000 hh /30</li><li>255.255.255.252 (1111 1100)</li></ol></li></ol><p><img src="https://s2.loli.net/2022/04/26/261UmiDox9aOdES.png"></p><p><img src="https://s2.loli.net/2022/04/26/6MymPAOrfv2z5jI.png"></p><ol start="5" type="1"><li>通过上述方法，从主机需求量大的部分入手，到主机需求量小的部分是很好的方法。</li></ol><h2 id="vlsm-例子总结">VLSM: 例子总结</h2><ol type="1"><li>重要的是要记住，只有未使用的子网才能进一步划分子网。</li><li>如果使用了子网中的任何地址，则该子网不能再进行子网划分。</li><li>一般是从主机多大到主机少(路由间网络)进行划分</li></ol><h2 id="路由聚集route-aggregation">路由聚集(Route Aggregation)</h2><ol type="1"><li>使用无类域间路由(CIDR，Classless InterDomainRouting)和VLSM不仅可以防止地址浪费，而且还可以促进路由聚合或汇总。</li><li>多个路由条目汇聚成小的路由条目</li><li>比如如下图就是讲3个/24的子网合并成一个/16的网络高速远端</li><li>优点:聚集之后我们只需要知道一个网段就可以，也就是远端的路由表就会变少</li></ol><p><img src="https://s2.loli.net/2022/04/26/WsKGVQgUAbplOei.png"></p><h2 id="路由聚集的例子">路由聚集的例子</h2><p><img src="https://s2.loli.net/2022/04/26/ZvlgT8uCL2UEHr6.png"></p><ol type="1"><li>多层聚集</li></ol><h2 id="如何进行路由聚集">如何进行路由聚集</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec04/60.png"></p><blockquote><p>如何进行计算:将尽可能多的位进行聚集，将之后的不通过的位置，作为Host位，就得到了上图的结果</p></blockquote><h2 id="路由聚集的优点">路由聚集的优点</h2><ol type="1"><li>减少路由表条目的数量。</li><li>可用于隔离拓扑更改(聚集之后，只能得到大的网段的信息，因为小的网段的拓扑变化会比较频繁，导致路由表进行不断地计算，只公告比较高聚集后的路由的网段信息)</li></ol><h2 id="路由隔离的其他内容">路由隔离的其他内容</h2><ol type="1"><li>为了使聚合正常工作，请以分层方式(hierarchicalfashion)仔细分配地址，以便汇总的地址将共享相同的高位。</li><li>VLSM允许路由聚合，并且通过将聚合完全基于左侧共享的高阶位来灵活地增加，即使网络不连续也是如此。</li><li>路由聚集需要严谨，不能让A和B两个端口的聚集后的网络号相同</li><li>VLSM是不做连续性检验的，也就是就算不连续也会进行聚集</li><li>全0子网会在题目中说是否可用</li><li>全1子网尽量不要使用</li></ol><h1 id="因特网控制报文协议-icmp">因特网控制报文协议 ICMP</h1><ol type="1"><li>ICMP (Internet Control Message Protocol)：为了提高 IP数据报交付成功的机会(消息管理和协商)</li><li>ICMP允许主机或路由器<strong>报告</strong>差错情况和提供有关异常情况的报告</li><li>ICMP 只是IP层的协议</li><li>ICMP 报文作为IP层数据报的数据，加上数据报的首部，组成 IP数据报发送出去</li><li>一般路由器在丢弃报文的时候(处理之前已经提到的情况)，都会返回一个ICMP差错报文</li></ol><h2 id="icmp-报文的格式">ICMP 报文的格式</h2><p><img src="https://s2.loli.net/2022/04/26/dsKa3mOh5txEFnf.png"></p><ol type="1"><li>前四个字节是一样的(格式化的)</li><li>后面都是个根据类型</li></ol><h2 id="两种icmp报文">两种ICMP报文</h2><p><img src="https://s2.loli.net/2022/04/26/HtNkbsmv1LSDxef.png"></p><ol type="1"><li>查询报文:一般这种情况不是很多</li><li>差错报告报文:一般这种类型会多一些</li></ol><h2 id="目的站不可到达">目的站不可到达</h2><ol type="1"><li><strong>网络</strong>不可到达(net unreachable)</li><li><strong>主机</strong>不可到达(host unreachable)</li><li><strong>协议</strong>不可到达(protocol unreachable)</li><li><strong>端口</strong>不可到达(port unreachable)</li><li><strong>源路由选择</strong>不能完成(source route failed)</li><li>目的网络<strong>不可知</strong>(unknown destination network)</li><li>目的主机<strong>不可知</strong>(unknown destination host)</li><li>不可知是完全不可以解析，不可达是可以解析但是不可以到达</li></ol><h2 id="icmp-差错报告报文的数据字段的内容">ICMP差错报告报文的数据字段的内容</h2><p><img src="https://s2.loli.net/2022/04/26/L5IkuZAbl487HBo.png"></p><ol type="1"><li>一般会把原始的IP数据报文的数据报首部 +8字节(数据的，可能会包含端口信息)作为ICMP的数据部分</li><li>ICMP的前8个字节的是确定的(前4个字节是类型，校验位，后面四个字节是确定的)</li><li>然后添加一个首部作为IP数据报进行发送。</li></ol><h2 id="不应发送-icmp-差错报告报文的几种情况">不应发送 ICMP差错报告报文的几种情况</h2><ol type="1"><li>对 ICMP 差错报告报文不再发送 ICMP 差错报告报文</li><li>对第一个分片的数据报片的所有后续数据报片都不发送 ICMP差错报告报文(就是每次传送只要发送一次就够了)</li><li>对具有多播地址的数据报都不发送 ICMP 差错报告报文</li><li>对具有特殊地址(如127.0.0.0或0.0.0.0)的数据报不发送 ICMP 差错报告报文<ol type="1"><li>127.0.0.0:逻辑回路地址</li><li>0.0.0.0:确认路由地址</li></ol></li></ol><h2 id="ping-packet-internet-groper">PING (Packet InterNet Groper)</h2><ol type="1"><li>PING 是用ICMP的"Echo request"和"Echo reply"消息来实现的</li><li>PING用来测试两个主机之间的连通性，一般是用来检查局域网的连通性：PING不通，不仅仅是发送不过去，有可能是应答不回来。</li><li>PING 使用了ICMP回送请求与回送回答报文</li><li>PING是应用层直接使用网络层ICMP的例子，它没有通过运输层的TCP或UDP</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> 互联网计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 互联网计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据链路层</title>
      <link href="/2022/04/27/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"/>
      <url>/2022/04/27/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="数据链路层">数据链路层</h1><h1 id="数据链路层概述">数据链路层概述</h1><ol type="1"><li>本章主要是局域网的数据链路层的技术标准</li><li>主要是以太网的介质和无线网的介质两大类。</li><li>是一个直连线路上的介质控制，在无线路由器上，会有不同的第二层(手机到路由器，路由器到远端)，数据链路层只能在一个网段，不能跨链路</li></ol><h2 id="物理层和数据链路层的区别">物理层和数据链路层的区别</h2><table><thead><tr class="header"><th>第一层</th><th>第二层</th></tr></thead><tbody><tr class="odd"><td>无法与上层通信</td><td>通过LLC与上层通信</td></tr><tr class="even"><td>无法确定哪台主机将会传输或接受二进制数据</td><td>通过MAC确定</td></tr><tr class="odd"><td>无法命名或标识主机</td><td>通过寻址或命名过程来实现</td></tr><tr class="even"><td>仅仅能描述比特流</td><td>通过帧来组织/分组比特</td></tr></tbody></table><h2 id="数据链路层-data-link-layer">数据链路层 Data Link Layer</h2><p><img src="https://s2.loli.net/2022/04/27/SwqQ4Vvp8DJ5TfO.png"></p><ol type="1"><li>问题：如何在不稳定(instable)的链路上正确传输数据？</li><li>数据链路层提供<ul><li>网络介质访问:</li><li>跨媒体物理传输(transmission):</li></ul></li><li>第二层协议明确了<ul><li>在链路上交换的数据格式</li><li>链路上的两个节点的行为</li></ul></li><li>在数据链路层，过程就是协议。</li><li>在两端校验，帧是否是正确的，或者是不正确的，如果正确交付第三层，否则进行相应的处理</li></ol><h2 id="局域网和数据链路">局域网和数据链路</h2><ol type="1"><li>主要工作<ul><li>错误识别(notification)</li><li>网络拓扑(Network topology)</li><li>流控制(Flow control)</li></ul></li><li>第一层和第二层的不同:<ul><li>第一层不可以访问更高层(upper-levellayers)，而第二层是通过逻辑链路(Logical Link Control)控制进行</li><li>第1层无法决定哪个主机将发送(transmit)或接收(receive)来自组的二进制数据；第2层使用媒体访问控制(MAC)做到这一点，共用总线链路</li><li>第1层无法命名或识别计算机；第2层使用寻址(或命名)过程，以太网场景下</li><li>第1层只能描述比特流；第2层使用成帧对比特进行组织或分组。</li></ul></li></ol><h2 id="第二层提供的服务">第二层提供的服务</h2><ol type="1"><li>提供给网络层的三层服务<ol type="1"><li>(最弱，最不靠谱的)没有确认(acknowledgement)的无连接(Connectionless)服务<ul><li>发送取出就行，不用等收到确认</li><li>可靠(Reliable)的链接(上层以确保数据正确性)</li><li>实时任务，比较高效</li><li>适用于大多数局域网</li></ul></li><li>带有确认的无连接服务：不可靠的链接，例如无线网络：需要保证一定的通信质量(比如无线网络的传输)，同时会损失一定的性能。</li><li>带有确认的连接服务<ul><li>比如蓝牙:需要先确定绑定关系才能进行通信</li><li>手机和手机之间的蓝牙连接需要确定一些信息</li></ul></li></ol></li><li>三种服务的连接的不同和区别:<ol type="1"><li>无线连接和有线连接相比多了<strong>确认</strong>的过程</li><li>网线连接:我们通信的对象是路由器，由路由器进行转发</li><li>PPPoP是<strong>路由器和远端</strong>的服务器的连接</li><li>有线无线都接给路由器，都需要连接，但是无线网相对有线网需要确认(包确认)</li></ol></li></ol><h2 id="常见的局域网的介质访问控制media-access-control">常见的局域网的介质访问控制(MediaAccess Control)</h2><p><img src="https://s2.loli.net/2022/04/27/q1TubJLkzFnNMBY.png"></p><ol type="1"><li>以太网(Ethernet):逻辑总线拓扑(信息流在线性总线上)和物理星形或扩展星形(连线为星形)</li><li>令牌环(TokenRing):逻辑环拓扑(信息流在一个环中)和物理星形拓扑(以星形连接)</li><li>FDDI(光纤分布式数据接口):逻辑环拓扑(信息流在一个环中)和物理双环拓扑(作为双环连接),光纤作为传输介质，曾经很常用，后来被以太网有线接入逐渐替代</li></ol><h2 id="介质访问控制方法access-methods">介质访问控制方法(AccessMethods)</h2><h3 id="两大类介质访问控制方法">两大类介质访问控制方法</h3><ol type="1"><li>确定性轮流(Deterministic—taking turns):Token Ring and FDDI(FiberDistributed Data Interface，光纤分布式数据接口)</li><li>争用式(Non-deterministic (probabilistic))<ol type="1"><li>非确定性(概率性)-先到先得 first come, first sesrved</li><li>Ethernet/802.3</li><li>70年代，Norman Abramson设计</li><li>Pure ALOHA: 纯ALOHA协议<ul><li>主机任何时候都可以发送数据</li><li>如果发生冲突，延迟一段时间再发送</li></ul></li><li>Slotted ALOHA: 分段ALOHA协议<ul><li>把信道在时间上分段。主机任何时候都发送数据，但是必须等待下一个时间分段的开始才开始发送</li><li>如果发生冲突，延迟一段时间再发送</li></ul></li></ol></li></ol><h3 id="确定性轮流-deterministic-mac-protocols">确定性轮流 DeterministicMAC Protocols</h3><ol type="1"><li>特殊数据令牌在环中循环(circulates)。</li><li>当主机收到令牌时，它可以传输数据而不是令牌。这称为夺取(seizing)令牌。</li><li>当发送(transmitted)的帧返回到发送器时，站点将发送新令牌；框架已从环上卸下或脱落(stripped)。</li></ol><h3 id="非确定性mac协议-non-deterministic-mac-protocols">非确定性MAC协议Non-Deterministic MAC Protocols</h3><ol type="1"><li>此MAC协议称为带冲突检测的载波侦听多路访问(CSMA/CD，Carrier SenseMultiple Access with CollisionDetection)(<strong>重要考点</strong>)</li><li>为了使用这种共享介质(shared-medium)技术，以太网允许网络设备为传输权进行仲裁(arbitrate)。</li><li>适用于总线结构的以太网。</li></ol><h2 id="局域网数据传输transmitison方式三种">局域网数据传输(Transmitison)方式:三种</h2><ol type="1"><li>单播(unicast)-将单个数据包从源发送到网络上的单个目标</li><li>多播(multicast)-由发送到网络上特定节点子集的单个数据包组成，这些节点都有同样的进程进行响应</li><li>广播(broadcast)-由单个数据包组成，该数据包传输到网络上的所有节点。(广播的目的地址是0x11111111)</li></ol><h1 id="以太网-和-带冲突检测的载波侦听多路访问-ethernet-and-csmacd">以太网和 带冲突检测的载波侦听多路访问 Ethernet and CSMA/CD</h1><h2 id="逻辑链路logical-link-control和介质访问控制media-access-control子层">逻辑链路(LogicalLink Control)和介质访问控制(Media Access Control)子层</h2><ol type="1"><li>无缘电缆的方式传播电波:以太网</li><li>帧传播速度提高了</li><li>帧的标准没有改变</li></ol><h3 id="局域网标准">局域网标准</h3><ol type="1"><li>定义物理媒体和用于将设备连接到媒体的连接器</li><li>在数据链路层定义设备的通信方式</li><li>数据链路层定义了如何在物理介质上传输数据。</li><li>数据链路层还定义了如何封装(encapsulate)特定于协议的流量(traffic)，以使去往不同上层协议的流量在到达堆栈时可以使用相同的通道。</li></ol><p><img src="https://s2.loli.net/2022/04/27/LvUEYRdFXyrTIjB.png"></p><blockquote><p>IEEE 802.2对应LLC，以太网则覆盖物理层和链路层</p></blockquote><ol type="1"><li>IEEE将数据链路层分为两部分：<ol type="1"><li>媒体访问控制(MAC)(转换为媒体)</li><li>逻辑链路控制(LLC)(过渡到网络层)</li></ol></li><li>乍一看，IEEE标准似乎以两种方式违反了OSI模型。<ol type="1"><li>首先，它定义自己的层(LLC)，包括其接口等。</li><li>其次，看来MAC层标准802.3和802.5跨越了第2层/第1层接口。<ul><li>802.5 令牌环网</li><li>802.3 覆盖了物理层和第二层下半层</li></ul></li></ol></li><li>但是，802.3和802.5定义了用于构建特定技术的命名，框架和媒体访问控制规则，都规范了对应的方案，不同方案不同解决标准</li></ol><h3 id="mac-llc">MAC &amp; LLC</h3><ol type="1"><li>MAC子层(802.3)<ul><li>定义如何在物理线路上传输帧(frames)</li><li>处理物理寻址</li><li>定义网络拓扑</li><li>定义线路规则(discipline)</li></ul></li><li>LLC 子层(802.2)<ul><li>逻辑上标识不同的协议类型，然后将其封装，兼容不同介质的访问</li><li>使用SAP标识符执行逻辑标识，用来做发送的位置的标识</li><li>LLC帧的类型取决于上层协议期望的标识符，对于上层服务进行支持</li><li>LLC已经比较规范了，后来有的厂商已经放弃继续做</li></ul></li></ol><p><img src="https://s2.loli.net/2022/04/27/V6iCtr48J9dcDyf.png"></p><h2 id="media-access-control-sublayer-介质访问控制子层">Media AccessControl Sublayer 介质访问控制子层</h2><p><img src="https://s2.loli.net/2022/04/27/XGLChzSq67BNQe9.png"></p><ol type="1"><li>以字节为单位进行帧结构描述</li><li>有802.3的规范和以太网的规范</li><li>MAC 介质访问控制子层的帧结构</li></ol><h3 id="前同步码">前同步码</h3><ol type="1"><li>从1和0的交替(alternating)模式开始，称为前同步码(preamble)。前同步码是(<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="11.475ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 5072 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(1072,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1000,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(2000,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(2500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(3000,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(3500,0)"></path></g></g></g></svg></mjx-container></span>)，前导码是(<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="11.475ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 5072 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(1072,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1000,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(2000,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(2500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(3000,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(3500,0)"></path></g></g></g></svg></mjx-container></span>)<ul><li>告诉接收方，要来数据了，因为不是预约发数据的模式，这个码就是为了保证对方有相应准备时间，前面7个自己是<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="11.475ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 5072 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(1072,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1000,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(2000,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(2500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(3000,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(3500,0)"></path></g></g></g></svg></mjx-container></span>，最后一个是<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="11.475ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 5072 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(1072,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1000,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(2000,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(2500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(3000,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(3500,0)"></path></g></g></g></svg></mjx-container></span>(用于进行时钟同步)</li><li>使用曼彻斯特编码的方案，无传输的时候是0电平的</li></ul></li><li>前同步码告诉接收站一帧即将到来。</li></ol><h3 id="目标和源物理地址字段">目标和源物理地址字段</h3><p><img src="https://s2.loli.net/2022/04/27/zIFsC5aoQRUdGVm.png"></p><ol type="1"><li>源地址：始终是单播地址</li><li>目的地址：单播地址，组播地址或广播地址 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="35.514ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 15697 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(572,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1172,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1517,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(1950,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(2479,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(2948,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mstyle" transform="translate(3309,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mi" transform="translate(4309,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5187,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5759,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(6057,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(6418,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(6763,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(7196,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(7725,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(8194,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mstyle" transform="translate(8555,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mi" transform="translate(9555,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(10040,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mstyle" transform="translate(10491,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mi" transform="translate(11491,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(11920,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(12371,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(12856,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(13385,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(13905,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(14338,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(14867,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(15336,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container></span></li><li>MAC地址：6个字节目的地址(Dest.add)6个字节源地址(Source.add.)，和第三层第四层报文有差别</li><li>先看目的地址的好处:交换机等看到目的地址就可以进行判断，提高效率</li></ol><h3 id="长度字段">长度字段</h3><blockquote><p>长度字段指示在该字段之后且在帧检查序列字段之前(precede)的数据字节数。</p></blockquote><ol type="1"><li>2个字节长，早期规范放的是长度,指定<strong>数据长度</strong>，以太网2标准下则是使用type来完成这部分内容，指定后面的DATA是IP还是IPX的报文数据。</li><li>没有长度也可以计算出来长度，通过有电平长度就可以计算出数据的长度</li><li>数据长度的限制(46-1500字节)，以太网的帧长度不能长于1518字节</li><li>为了避免歧义，只要保证Length的数据大于数据报的最大长度即可保证是表示type，保证和之前兼容</li></ol><h3 id="数据字段">数据字段</h3><blockquote><p>数据字段包含您要发送的信息。</p></blockquote><ol type="1"><li>数据的长度为46(18 + 46 =64字节)-1500字节，帧的大小至少是64个字节，如果数据太短需要补充0才能生成data，前引导码不算帧长度</li><li>最前面8个字段不算帧的内容</li><li><strong>4个64字节大小帧同时发送才能保证占据全部的链路</strong>，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="5.38ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 2378 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g><g data-mml-node="mi" transform="translate(1500,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>链路，用<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="5.749ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 2541 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(1000,0)"></path></g><g data-mml-node="mi" transform="translate(1500,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2072,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g></svg></mjx-container></span>，就是<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="5.962ex" height="1.62ex" role="img" focusable="false" viewBox="0 -694 2635 716"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(1000,0)"></path></g><g data-mml-node="mi" transform="translate(1500,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(1929,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2274,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container></span></li></ol><h3 id="fcs字段">FCS字段</h3><blockquote><p>FCS字段(四个字节)包含循环冗余校验(cyclic redundancy check)值</p></blockquote><ol type="1"><li>固定4字节</li><li>发送设备创建<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="5.156ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 2279 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(760,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mi" transform="translate(1519,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g></g></g></svg></mjx-container></span></li><li>接收设备重新计算<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="5.156ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 2279 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(760,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mi" transform="translate(1519,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g></g></g></svg></mjx-container></span>，以检查在传输(transit)过程中可能对帧造成的损坏(damage)。</li><li>发送方用有效帧的内容除以一个数字，取得的余数放到这个位置，进行发送，接收方。也会将这个帧的内容除以那个数，然后将得到的进行比较，判断是否出现错误。</li><li>FCS正确不一定能保证数据是正确的，几次错误后导致FCS还是正确的，但是这种出错率比较低</li><li><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="5.156ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 2279 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(760,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mi" transform="translate(1519,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g></g></g></svg></mjx-container></span>错误在不同情况下不同处理:有时候是直接抛弃，有时候还要再校验一下。</li></ol><h2 id="llc-逻辑链路控制子层">LLC 逻辑链路控制子层</h2><ol type="1"><li>逻辑链路控制(LLC)子层通过单个链路管理设备之间的通信</li><li>LLC在IEEE802.2规范中定义，并且支持无连接和面向连接(connect-oriented)的服务。</li><li>LLC子层允许部分数据链接层独立于现有技术运行,单个LLC子层可以与不同的MAC子层兼容(compatible)。</li><li>LLC子层基有面向连接的，也有不面向连接的，也就是既可以是进行总线服务，也可以实现令牌环路</li><li>LLC为什么被弃用了?因为局域网的正确率比较高，不需要LLC来进行守护，避免拖累速度和效率，而这部分也已经被第四层完成了</li><li>蓝牙等特殊连接，直到第二层就已经结束，所以就需要使用LLC来完成</li><li>有无连接是在LLC部分执行的，无法在MAC上进行处理的</li></ol><h3 id="llc子层封装">LLC子层：封装</h3><p><img src="https://s2.loli.net/2022/04/27/mCHt9vZ4ukAFzr2.png"></p><ol type="1"><li>LLC子层服务上层，LLC会放在packet前面，然后再做一次封装。</li><li>第二次封装则为LLC子层向MAC子层请求封装操作。</li><li>如上的过程如下：<ol type="1"><li>LLC获取网络协议数据(数据包，packet)，并添加更多控制信息以帮助将数据包传递到其目的地。</li><li>它添加了802.2规范的两个寻址组件，以在每一端标识上层协议：<ul><li>目标服务访问点(DSAP)</li><li>源服务访问点(SSAP)</li></ul></li><li>然后，此重新打包的数据将传输到MAC以进一步封装数据。</li><li>基于SAP规范进行地址和分配。</li></ol></li><li>提供了<ol type="1"><li>无确认的无连接服务，被使用在<ol type="1"><li>可靠链路(上层来保证数据正确性)</li><li>实时任务</li><li>大多数的局域网内</li></ol></li><li>有确认的无连接服务，被使用在，不可靠链路，比如无线网</li><li>确认的有连接服务</li></ol></li></ol><h2 id="mac子层上的介质访问控制">MAC子层上的介质访问控制</h2><h3 id="十六进制数hexadecimal作为mac地址">十六进制数(Hexadecimal)作为MAC地址</h3><ol type="1"><li>MAC地址为48位，始终表示为<strong>12个十六进制数字</strong>。</li><li>IEEE管理的前6个十六进制数字(从左到右)标识制造商(manufacturer)或销售商(供应商)，并包括组织唯一标识符(OUI)。<ul><li>OUI是生产的厂商，比如<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="7.939ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 3509 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(1000,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1500,0)"></path></g><g data-mml-node="mi" transform="translate(2000,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(2760,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g></g></g></svg></mjx-container></span>就是Cisco的，然后可以使用后面24个bit进行自己的编码</li><li>一个厂商是可以买多个OUI的，也可以几个单位买一个OUI</li><li>第一个bit取0表示这个地址是一个单播地址，取1则是表示是一个多播地址。</li><li>第二个bit取0表示这个地址是全球唯一地址，取1则表示是一个地址唯一地址</li></ul></li><li>其余的6位十六进制数字包括接口序列号，由特定供应商管理。</li></ol><p><img src="https://s2.loli.net/2022/04/27/cLhF1H4XDakpoSA.png"></p><h3 id="以太网802.3广播">以太网802.3广播</h3><ol type="1"><li>广播<ul><li>目标MAC：全1(FFFF.FFFF.FFFF)</li><li>保证所有的设备都能收到这个地址</li><li>会导致非目的主机进行地址解析</li></ul></li><li>广播会不必要地打断电台(stations)，从而严重影响电台的性能</li><li>因此，仅在以下情况下才应使用广播：<ul><li>目的地的MAC地址未知</li><li>T目的地是所有主机</li></ul></li><li>非必要情况下我们不希望有很多广播，有可能会导致广播风暴</li></ol><h3 id="以太网操作">以太网操作</h3><ol type="1"><li>以太网是广播网络，也就是说，每个站都可以看到所有帧，而不管它们是否是目的地</li><li>通过MAC地址判断站点是否为目的地</li><li>目标站在OSI层上发送数据。其他节点丢弃(discard)帧</li></ol><p><img src="https://s2.loli.net/2022/04/27/gIWL95oRdYBNXbl.png"></p><blockquote><p>上图中1是总线拓扑，1发送的数据帧会传达给所有在这个总线上的设备，非目的主机检查目的地址和本机MAC地址不同，则会将该帧丢弃。</p></blockquote><h3 id="广播操作步骤">广播操作步骤</h3><ol type="1"><li>听然后传送</li><li>广播 jam 信号<ul><li>是一个<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="4.83ex" height="1.62ex" role="img" focusable="false" viewBox="0 -694 2135 716"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g><g data-mml-node="mi" transform="translate(1000,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(1429,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1774,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container></span>的全1的数据帧表示出现了冲突</li><li>标准思科认为是所有侦听的设备都会发送</li></ul></li><li>发生碰撞(Collision)<ul><li>两个设备同时使用链路发送电信号，则会出错。</li><li>如果有冲突，则会一直侦听总线，等到空闲则可以组织数据帧发送</li><li>还有问题就是多台主机同时进行组织数据帧进行发送</li><li>因为同时还在侦听总线，如果出现冲突，则会发出jam信号，只要有0或者1传输，有电平则会表示使用</li></ul></li><li>设备退回(backoff)适当的时间，然后重新传输(retransmit),发生冲突的设备，根据特定的回退算法</li></ol><p><img src="https://s2.loli.net/2022/04/27/K4QqPuHCGwD8pOZ.png"></p><ol start="5" type="1"><li>为什么64个字节才能抢线路？<ul><li><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="4.64ex" height="1.595ex" role="img" focusable="false" viewBox="0 -683 2051 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mi" transform="translate(1000,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g></g></g></svg></mjx-container></span>以太网，64个字节才能在<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="5.749ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 2541 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(1000,0)"></path></g><g data-mml-node="mi" transform="translate(1500,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2072,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g></svg></mjx-container></span>中传输满整个<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="5.38ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 2378 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g><g data-mml-node="mi" transform="translate(1500,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>的线路</li></ul></li></ol><h3 id="以太网的csmacd">以太网的CSMA/CD</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec03/11.png"></p><ol type="1"><li>首先设备要发送数据</li><li>开始侦听链路是非忙，如果忙，则过一阵来再看看</li><li>如果不忙，则开始准备发送<ul><li>如果有错误，则到9，表示有冲突发送，广播一个jamsighnal，把自己尝试的次数 + 1(重发有一定限度)</li><li>尝试次数过多，会像上层协议传输网络不可用</li><li>尝试次数还可，则到13计算一个回退时间，来再次尝试，回退时间单位，会保证A和D的时间差能保证第一个人已经用完电路来避免冲突。</li></ul></li><li>如果没有错误，则一直传输到结束为止</li></ol><h1 id="无线局域网和csmaca">无线局域网和CSMA/CA</h1><h2 id="无线wireless局域网">无线(Wireless)局域网</h2><ol type="1"><li>无线局域网<ul><li>基于单元的通信</li><li>电台发送的信号只能被附近的电台接收</li><li>短距离传输</li></ul></li><li>无线局域网标准<ul><li>IEEE 802.11</li><li>IEEE <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="7.256ex" height="1.62ex" role="img" focusable="false" viewBox="0 -694 3207 716"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(1000,0)"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(1500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1778,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(2278,0)"></path></g><g data-mml-node="mi" transform="translate(2778,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g></g></svg></mjx-container></span></li><li>IEEE <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="7.482ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 3307 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(1000,0)"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(1500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1778,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(2278,0)"></path></g><g data-mml-node="mi" transform="translate(2778,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g></g></svg></mjx-container></span></li><li>IEEE <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="7.364ex" height="1.971ex" role="img" focusable="false" viewBox="0 -666 3255 871"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(1000,0)"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(1500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1778,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(2278,0)"></path></g><g data-mml-node="mi" transform="translate(2778,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g></g></g></svg></mjx-container></span></li><li>IEEE <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="7.643ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 3378 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(1000,0)"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(1500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1778,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(2278,0)"></path></g><g data-mml-node="mi" transform="translate(2778,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span></li></ul></li><li>无线局域网分为两类<ol type="1"><li>有基础设施拓扑网络(Infrastructure mode)</li><li>无基础设施拓扑网络(ad-hoc mode)</li></ol></li><li>基础设施是提前建设好的基站，可以覆盖一定的区域<ol type="1"><li>无线网卡和基础设施通信</li></ol></li></ol><h3 id="虚拟载波监听">虚拟载波监听</h3><ol type="1"><li>源站把它要占用信道的时间(包括目的站发回确认帧所需的时间)写入到所发送的数据帧中(即在首部中的<code>持续时间</code>中写入需要占用信道的时间，以微秒为单位，一直到目的站把确认帧发送完为止)，以便使其他所有站在这一段时间都不要发送数据。</li><li>当站点检测到正在信道中传送的帧中的<code>持续时间</code>时，就调整自己的(NetworkAllocationVector，NAV网络分配向量)。NAV指出了信道处于忙状态的持续时间。</li><li>为什么信道空闲还要再等待呢?就是考虑可能有其他站点有<strong>高优先级</strong>的帧要发送。如有，就让高优先级帧先发迭。等待的时间就是IFS(Inter-FrameSpace，帧间间隔)。<ol type="1"><li>SIFS(Short Inter-Frame Space，短帧间间隔)最短</li><li>PIFS(Point Inter-Frame Space，点协调功能帧间间隔)其次</li><li>DIFS(Distributed Inter-Frame Space，分布协调功能帧间间隔)最长。</li></ol></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec03/data_link_layer-1-CSMACA.png" alt="WLAN中的CSMA/CA示意"></p><ol start="5" type="1"><li>实际吞吐量<ol type="1"><li>因为源站点发出帧后，接收节点需要返回确认帧(ACK)。这将导致吞吐量降到带宽的一半</li><li>还受到信号强度的影响，当信号变弱之后，将会发起ARS(Adaptive RateSelection，自适应速率选择)，传输单元会将传输速率从11 Mbps降到5.5Mbps，或5.5到2，或2到1</li></ol></li></ol><h3 id="无线局域网标准">无线局域网标准</h3><ol type="1"><li>IEEE 802.11<ul><li>一项关键技术：<strong>直接序列扩频(DSSS，Direct Sequence SpreadSpectrum)</strong></li><li>DSSS适用于在 1 到 2Mbps范围内运行的无线设备，上面的这个速率在实际生活场景中要除以2，因为无线通信都是有确认的，所以一般我们认为信道一来一回才有一次通信。</li><li>DSSS可以高达11 Mbps的速度运行，但在2 Mbps以上时将不被视为兼容</li><li>也称为 Wi-Fi™，无线保证度，是星型拓扑，基站作为中心</li></ul></li><li>IEEE 802.11b(Wi-Fi)<ul><li>传输能力提高到11 Mbps</li><li>所有802.11b系统都向后兼容(backwardcompliant)，因为它们还仅针对DSSS支持1和2 Mbps数据速率的802.11。</li><li>通过使用与802.11不同的编码技术来实现(Achieves)更高的数据吞吐率</li><li>在2.4 GHz内运行，解决了802.11中出现的部分问题</li><li>使用的是高速直连方案</li></ul></li><li>IEEE 802.11a<ul><li>涵盖在5 GHz传输频带中运行的WLAN设备，运行在5Hz上</li><li>802.11a能够提供54Mbps的数据吞吐量，并且采用称为"速率加倍"的专有技术已达到108 Mbps。</li><li>实际上，更标准的等级是20-26 Mbps。</li><li>传播距离相比802.11和802.11b短(衰减强)，但是对于多用户上网的支持更好了。</li><li>使用<strong>正交频分复用</strong>技术。</li></ul></li><li>IEEE 802.11g<ul><li>可以提供与802.11a(54Mbps)相同的功能，但具有802.11b的向后兼容性</li><li>使用<strong>正交频分复用(OFDM，Orthogonal Frequency DivisionMultiplexing)</strong>技术。</li></ul></li><li>IEEE 802.11n: 下一代的WLAN<ul><li>提供的带宽是802.11g的两倍，即108Mbps，理论上可达500-600Mbps。实际上是100M左右</li><li>目前使用比较多的方案。</li></ul></li></ol><h3 id="无线网络拓扑">无线网络拓扑</h3><p><img src="https://s2.loli.net/2022/04/27/MEWCIvpPqXT9YHb.png"></p><ol type="1"><li>这里讲的是有基础设施的无线网络拓扑结构</li><li>DS:分配系统，线</li><li>上网还要通过网关</li></ol><h3 id="无线网络的基础设施">无线网络的基础设施</h3><ol type="1"><li>基本服务集(BSS)包括一个基站(BS)和几个无线主机<ul><li>所有主机都可以在本地BSS中直接相互通信</li><li>基站中两个主机之间是不直接互相通信的。</li><li>同一个BSS中的主机间直接通信</li></ul></li><li>接入点(AP)充当基础架构模式的基站(BS)<ul><li>AP硬连线到有线(cabled)局域网，以提供Internet访问和与有线网络的连接</li><li>安装AP后，将分配服务集标识符(SSID)和通道</li><li>单元格的范围是91.44至152.4米(300至500英尺)</li><li>覆盖大概100m左右</li></ul></li><li>一个BSS可以通过分发系统(DS)连接到另一个BSS，并构造一个扩展服务集(ESS)。</li><li>家里的路由器既有AP的功能又有路由器功能，但是理论上只应该是AP的功能，一般我们认为家用路由器是一个AP</li></ol><h2 id="访问过程accessing-procedure">访问过程(Accessing Procedure)</h2><ol type="1"><li>在WLAN中激活客户端时，它将开始"侦听"与之"关联"的兼容设备</li><li>这被称为"扫描"<ul><li>主动扫描</li><li>被动扫描</li></ul></li><li>需要和AP连接，才能向AP发送数据帧。</li></ol><h3 id="主动扫描">主动扫描</h3><ol type="1"><li>导致从寻求加入网络的无线节点发送探测(probe)请求。</li><li>探测请求将包含它希望加入的网络的服务集标识符(SSID)</li><li>当找到具有相同SSID的AP时，该AP将发出探测响应</li><li>身份验证和关联步骤已完成</li><li>移动端发出请求帧，但是AP不发送自己的信息</li><li>AP比较安全。不用发送出自己的SSID</li></ol><h3 id="被动扫描">被动扫描</h3><ol type="1"><li>(ad hoc) 侦听由AP(基础结构模式)或对等节点(adhoc)传输的信标管理帧(beacon management frames)，包含自己的SSID信息</li><li>当节点接收到包含要尝试加入的网络的SSID的信标时，将尝试加入该网络。</li><li>被动扫描是一个连续的过程，并且随着信号强度的变化，节点可能会与AP关联或分离，也是因为强度变化，所以连接状态需要维持。</li></ol><h2 id="无线局域网的帧结构">无线局域网的帧结构</h2><ol type="1"><li>WLAN不使用标准的802.3帧。</li><li>框架有三种类型<ul><li>控制帧(Control Frames)</li><li>管理帧(Management frames)</li><li>数据帧(仅数据帧类似于802.3帧)</li></ul></li><li>无线数据帧和802.3帧的有效载荷(payload)为1500字节<ul><li>但是，以太帧不能超过1518字节，而无线帧则可能高达<strong>2346字节</strong>。(是因为在无线情况下使用的是有确认的信息，增加无线帧有效数据大小，来对冲，确认的信息的损耗)。</li><li>无线网络帧的大小也不会太大，尽量避免转换成有线帧的时候出现帧的拆分，也就是说大小一般在1500字节以下，通常，WLAN帧大小将被限制为1518字节，因为它最常连接到有线以太网。</li></ul></li></ol><h2 id="数据帧结构802.11-无线网">数据帧结构(802.11 无线网)</h2><p><img src="https://s2.loli.net/2022/04/27/nm6F1KyVH3qAl58.png"></p><ol type="1"><li>帧控制信息包含 16 bit</li><li>去往AP和来自AP是我们需要重点确认</li><li>WEP规格，Wired Equivalent Privacy(有线等效保密)</li><li>持续期:参数，<strong>很重要</strong>，CSMA/CA需要，这个信息</li><li>有时间窗口，如果超时没收到信号，则进行重传</li></ol><h3 id="数据帧的的地址分类">数据帧的的地址分类</h3><ol type="1"><li>ad hoc(无线网地址)用地址4</li><li>有基础设施用的是地址1、2、3</li></ol><h3 id="数据帧中的地址详解">数据帧中的地址详解</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec03/14.png"></p><ol type="1"><li>扩展星型拓扑</li><li>去往AP和来自AP显然是不能全为1的<ol type="1"><li>去往AP是指向AP发送，参考第二行</li><li>为什么不能全为1?因为两个AP之间通过有线进行通信，所以不是无线通信的过程。</li></ol></li></ol><h2 id="为什么我们需要csmaca">为什么我们需要CSMA/CA？</h2><ol type="1"><li>冲突(Collisions)可能发生在WLAN中，但是站点只能知道附近的传输，因此CSMA/CD不是一个好的选择。<ul><li>隐藏站问题:当A将数据传输到B时，C无法检测到A和B之间的传输，因此C可能会决定将数据传输到B并导致B发生冲突。</li><li>暴露站问题:当B将数据传输到A时，C可以检测到传输，因此C不会将数据传输到D。但这是一个错误。(听到不应该听到的信号)</li></ul></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec03/15.png"></p><ol type="1"><li>应用在无线网络ad hoc连接的时候，直接相连转发</li><li>对应:总线拓扑</li><li>这种情况下做不到全体的侦听</li><li>什么我们不使用CSMA/CD？<ol type="1"><li>碰撞检测"要求一个站点在发送本站数据的同时，还必须不间断地检测信道。一旦检测到碰撞，就立即停止发送。但由于无线信道的传输条件特殊，其信号强度的动态范围非常大，因此在802.11适配器上接收到的信号强度往往会远远小于发送信号的强度(信号强度可能相差百万倍)。如要在无线局域网的适配器上实现检测到碰撞，在硬件上需要的花费就会过大。</li><li>更重要的是，即使我们能够在硬件上实现无线局域网的碰撞检测功能，我们仍然无法避免碰撞的发生。这就表明，无线局域网不需要进行碰撞检测。</li></ol></li></ol><h2 id="多路复用机制mechanism">多路复用机制(Mechanism)</h2><ol type="1"><li>以太网<ul><li>信号被传输到电缆上的<strong>所有</strong>站。</li><li>发送站检测到冲突。</li><li>一次只能在信道上发送一个有效帧。</li></ul></li><li>WLAN 无线网络<ul><li>信号通过电缆传输到发送站附近的站(相邻,不可以跨越有效距离发送)</li><li>MAC协议必须尽最大努力确保仅发送站靠近接收站，发送方只能发送一路信号给接受方，不能有多个发送方发送信号给一个接受点</li><li>接收方检测确定冲突。</li><li>一次可以在通道上传输<strong>多</strong>个有效(effective)帧,不可以产生冲突。</li></ul></li></ol><h2 id="csmaca-避免冲突的载波侦听多路访问">CSMA/CA避免冲突的载波侦听多路访问</h2><ol type="1"><li>CSMA/CA(Carrier Sense Multiple Access with Collision Avoidance)<ul><li>发送站点在发送数据前，以<strong>控制短帧</strong>刺激接收站点发送应答短帧，使接收站点周围的站点监听到该帧，从而在一定时间内避免数据发送</li><li>基本过程<ol type="1"><li>A向B发送RTS(Request ToSend，请求发送)帧，A周围的站点在一定时间内不发送数据，以保证CTS帧返回给A；</li><li>B向A回答CTS(Clear ToSend，清除发送)帧，B周围的站点在一定时间内不发送数据，以保证A发送完数据；</li><li>A开始发送</li><li>若控制帧RTS或CTS发生冲突，采用二进制指数后退算法等待随机时间，再重新开始。(A和C同时发送RTS)</li></ol></li></ul></li><li>退避时间短的设备先传输</li><li>发现冲突所有设备同时退避</li><li>在adhoc网络中比较无序，存在大量延时，比如CTS和RTS相碰撞，这种情况是比较少的，异常情况，不在本课程考虑范围内。</li></ol><h3 id="csmaca过程">3.7.1. CSMA/CA过程</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec03/16.png"></p><ol type="1"><li>为避免冲突，802.11所有站点在完成一个事务后必须等待一段时间才能进行下一个动作，这个时间被称为IFS，具体取决于帧的类型。</li><li>SIFS(Short interframe space):短帧间间隔28us，用于本设备接受发送状态转换，不足够源站接受CTS</li><li>DIFS(Distributed Inter-frame Spacing):分布协调功能帧间间隔128us(多个节点进行协调)</li><li>应答CTS(Clear to Send)，等待SIFS(Short interframespace)后发送数据</li><li>过程中的时间写入时间数据标记位</li><li>NAV(网络分配向量)：网络协调时间,时间长度:NAV计算方式在后面，NAV是一开始就进行预估了，别的节点抢到了节点时，我们会减掉别人正常通信的时间，不是一直累积下去的情况。</li><li>下一次经过争用窗口来抢</li><li>源站需要收到确认信息CTS才能接着发送信息</li><li>多个源站向目的站发RTS给目的站，目的站发现冲突，告诉各自站点，PPT处理的是RTS</li></ol><h3 id="csmama实例">CSMA/MA实例</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec03/17.png"></p><ol type="1"><li>A的反应时间少，抢到使用权</li><li>E加入进来的话也会计算出一个退避时间</li></ol><h2 id="实际数据传输率">实际数据传输率</h2><ol type="1"><li>当源节点发送帧时，接收节点将返回肯定确认(ACK)。<ul><li>这可能导致消耗50％的可用带宽(bandwidth)。</li><li>在额定为11Mbps的802.11b无线局域网上，这会将实际数据吞吐量降低到最大5.0到5.5Mbps。</li></ul></li><li>网络性能也会受到信号强度的影响<ul><li>随着信号变弱，可以调用自适应速率选择(ARS)</li><li>信号会受到距离影响，越远信号越弱，功率越低，带宽不能稳定到初始带宽</li><li>传输单元会将数据速率从11 Mbps降低到5.5Mbps，从5.5 Mbps降低到2Mbps或2 Mbps到1 Mbps。</li></ul></li></ol><h2 id="wlan和ethernet区别">WLAN和Ethernet区别</h2><table><colgroup><col style="width: 44%"><col style="width: 55%"></colgroup><thead><tr class="header"><th>Ethernet</th><th>WLAN</th></tr></thead><tbody><tr class="odd"><td>信号被传输到连接在线缆上的所有站点上</td><td>信号只被传输到接近发送站点的站点</td></tr><tr class="even"><td></td><td>接受站点检测冲突</td></tr><tr class="odd"><td>只会有一个有效帧在信道上传播</td><td>会有多个有效帧同时在信道上传播</td></tr><tr class="even"><td></td><td>MAC协议必须尽可能保证只有发送站点接近接收站点</td></tr></tbody></table><h1 id="layer-2-devices-第二层设备">Layer 2 Devices 第二层设备</h1><h2 id="nics-网卡">NICs 网卡</h2><ol type="1"><li>NIC执行重要的第2层数据链路层功能：<ol type="1"><li>逻辑链接控制-与计算机上层通信</li><li>媒体访问控制-提供对共享访问媒体的结构化访问</li><li>命名-提供唯一的MAC地址标识符</li><li>成帧-封装过程的一部分，打包比特以进行传输。</li><li>信号-使用内置收发器创建信号并与媒体接口(也有第一层功能，变为01信号)</li></ol></li></ol><h2 id="网桥bridges">网桥(Bridges)</h2><ol type="1"><li>网桥将流量划分为多个部分，并根据MAC地址而不是协议对流量进行过滤。</li><li>网桥可以通过减少较大的冲突域来提高网络性能。<ol type="1"><li>大的冲突域变少，碰撞和冲突会变少，但是网桥会成为一个瓶颈。(网桥将数据帧检验存储再转发)</li><li>导致延迟提高10-30%</li></ol></li><li>在从网络的一个网段到其他网段的流量较低的情况下，网桥最有效,当网段之间的流量变大时，网桥会成为瓶颈(bottleneck)，并减慢通信速度。</li><li>一般是处理两个不同的分段，相对比较简单。</li><li>是一种储存转发(store-and-forward)设备，因为它必须接受整个帧并在转发前校验CRC(事实上这必要性不大)</li></ol><h3 id="透明网桥原理">透明网桥原理</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec03/data_link_layer-3-Transparent_Bridge.png" alt="透明网桥"></p><ol type="1"><li>Mac表放到缓存的位置，刚启动时是空表，之后逐渐学习。<ul><li>Mac地址表是有生命周期的，如果计时超过一个阈值没有刺激刷新Mac表，则会刷新表</li><li>比如笔记本更换接入地址。</li></ul></li><li>"透明"指局域网中的站点并不知道所发送的帧将经过哪几个网桥，因为网桥对各站来说是看不见的</li><li>即插即用</li><li>原理<ol type="1"><li>从A发出的帧从接口x进入了网桥，则从这个接口发出帧就一定能达到A。网桥每收到一个帧，就记下其源地址和进入网桥的接口，写入转发表。</li><li>在收到一个新的帧时，在转发表中匹配此帧的目的地址，找到对应的接口并转发。</li><li>在网桥的转发表中写入的信息除了地址和接口外，还有帧进入网桥的时间，因为<ul><li>拓扑可能经常变化</li><li>站点也可能会更换适配器(这就改变了站点的地址)</li><li>站点并非总是处于工作状态</li><li>把每个帧到达网桥的时间登记下来，就可以在转发表中只保留网络拓扑的最新状态信息，使得网桥中的转发表能反映当前网络的最新拓扑</li></ul></li></ol></li><li>问题：网络上的设备要发送数据但不知道目标地址时。<ul><li>向网络上的所有设备发送广播。因为希望数据帧能够发送到全网，尽可能到达目的地</li><li>由于网络上的每个设备都必须注意此类广播，因此网桥始终会转发这些广播。</li></ul></li><li>广播过多会导致广播风暴，并且可能导致：<ul><li>网络延时(network time-outs)</li><li>交通减速(traffic slowdowns)</li><li>低于可接受的性能</li></ul></li></ol><h3 id="源路由网桥">源路由网桥</h3><ol type="1"><li>发送帧时将详细的路由信息放在帧的首部中,从而使每个经过的网桥都了解帧的路径</li><li>在令牌环网络中被广泛使用</li><li>原理:源站以广播方式向目的站发送一个发现帧，每个发现帧都记录所经过的路由。发现帧到达目的站时就沿各自的路由返回源站。源站在得知这些路由后，从所有可能的路由中选择出一个最佳路由。凡从该源站向该目的站发送的帧的首部，都必须携带源站所确定的这一路由信息。</li></ol><h2 id="交换机switches">交换机(Switches)</h2><ol type="1"><li>执行两个基本操作：<ol type="1"><li>切换数据帧：在输入介质(medium)上接收帧，然后将其传输到输出介质</li><li>维护交换操作：交换器建立和维护交换表并搜索循环。路由器构建并维护路由表和交换表。(STB协议避免回路)</li></ol></li><li>交换是一项通过<strong>减少流量</strong>和alleviatescongestion来缓解以太网LAN拥塞(alleviates congestion)的技术.<ol type="1"><li>交换机创建专用(dedicated)的网段或点对点连接，并将这些网段连接到交换机内的虚拟网络中。</li><li>之所以称为<strong>虚拟电路</strong>，是因为它仅在两个节点需要通信时才存在，并且在交换机内建立。网桥内部有一个高带宽的总线(一般内部带宽是接口带宽的10倍)</li><li>您可以将每个交换机端口视为一个微桥(micro-bridge)。该过程称为微分段(microsegmentation)。</li><li>每个交换机端口将介质的全部带宽提供给每个主机</li></ol></li><li>局域网交换机可减少冲突域的大小(通过，VLAN划分)</li><li>但是，连接到交换机的所有主机仍位于同一广播域中。<ol type="1"><li>也就是说，通过LAN交换机连接的所有其他节点仍将看到来自一个节点的广播。</li><li>交换机不能划分广播域(端口-&gt;所有端口转发)</li></ol></li><li>带宽利用率可以接近100%</li><li>交换机连接的是一个局域网，而路由器连接的是不同局域网。</li></ol><h3 id="交换机划分了冲突域">交换机划分了冲突域</h3><ol type="1"><li>转发的速度明显加快，因为它们在<strong>硬件</strong>中进行切换，而网桥在<strong>软件</strong>中进行切换。</li><li>可以使用交换机连接10 Mbps以太网LAN 和 100 Mbps以太网LAN。</li><li>在交换式以太网实现中可用带宽可以接近100％。</li><li>共享以太网网络的容量不足其全部容量的30％至40％时，其性能最佳。</li><li>一些交换机<strong>支持直通交换</strong>，这减少了延迟和延迟，而网桥仅支持<strong>存储转发交换(存储转发，存下来检验转发)</strong>。<ol type="1"><li>直通交换:快速转发，不做校验，只看前6字节的MAC地址。</li><li>局域网:网速比较快，传输速率高，网线比较短，可以认为是基本没有错误的，所以可以进行直通转发</li></ol></li></ol><h3 id="路由器划分了冲突域">路由器划分了冲突域</h3><ol type="1"><li>路由器可以创建最高级别的细分：<ol type="1"><li>创建较小的<strong>碰撞域</strong></li><li>创建较小的<strong>广播域</strong>：除非经过编程，否则路由器不会转发广播。</li></ol></li><li>路由器通过检查数据包上的<strong>目标逻辑地址</strong>，然后在其路由表中查找转发指令来完成数据包的转发</li><li>由于路由器比网桥执行更多的功能，因此它们以更高的延迟率运行。</li><li>路由器可以用作<strong>网关</strong>，用于连接不同的网络媒体和不同的LAN技术</li><li>是根据逻辑地址(IP地址)进行转发，不再是MAC</li><li>function比较多，所以延时会比较多</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> 互联网计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 互联网计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>物理层</title>
      <link href="/2022/04/26/%E7%89%A9%E7%90%86%E5%B1%82/"/>
      <url>/2022/04/26/%E7%89%A9%E7%90%86%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="物理层">物理层</h1><ul><li>Type of Network</li><li>LAN Media</li><li>UTP for Ethernet</li><li>Media and signal Problems</li><li>Basic Knowledge of Data Communication</li></ul><h1 id="网络连接类型-type-of-networks">网络连接类型 Type ofNetworks</h1><p><img src="https://s2.loli.net/2022/04/27/jz3Zo9gRy2KUvkA.png" style="zoom:50%;"></p><ol type="1"><li>多路复用共享介质 Shared media environment<ul><li>多个主机可以访问同一介质</li><li>这意味着它们都共享相同的介质—即使"wire"可能是UTP，它有四对线</li></ul></li><li>点对点(Point To Point)网络 Point-to-point network environment<ol type="1"><li>一个设备通过链路连接到另一个设备</li><li>最广泛地应用于拨号网络连接，也是你最熟悉的一种。使用电信号来完成传输。</li></ol></li></ol><h1 id="局域网介质">局域网介质</h1><p><img src="https://s2.loli.net/2022/04/27/kG3KP2WZuE1vOMJ.png" style="zoom:50%;"></p><blockquote><p>第一类传输电信号，第二类传输光信号，第三类传输无线电波。</p></blockquote><ol type="1"><li>功能是传输数据 tramdmiy data</li><li>光信号、无线信号等传输过程称为<strong>编码</strong> encoding</li><li>电缆类型包括STP(有屏蔽双绞线)、UTP(无屏蔽双绞线)、同轴电缆、光纤</li><li>调节频率、电压、相位等方式来实现不同01编码</li></ol><h2 id="utp-无屏蔽双绞线-unshielded-twisted-pair">UTP (无屏蔽双绞线Unshielded Twisted Pair)</h2><p><img src="https://s2.loli.net/2022/04/27/wSLCoqu4PRO3p1H.png" style="zoom:50%;"></p><blockquote><p>由八根子线组成,两个线组合成一组，共四组，可以保证每一组电流抵消电磁波干扰(抗干扰能力有限)</p></blockquote><ol type="1"><li>仅(solely)依赖于消除效应，由双绞线对产生，以限制由EMI和RFI引起的信号退化</li><li>有四对铜线，阻抗(impedance)为100欧姆，频率低、接口小、布线更加方便。</li><li>一般认为有效范围为100m</li></ol><h3 id="无屏蔽双绞线的优点">无屏蔽双绞线的优点</h3><p><img src="https://s2.loli.net/2022/04/27/eQvKTHBYpy68rsR.png" style="zoom:50%;"></p><ol type="1"><li>易于安装且成本较低，线薄接口小 easy to install and is lessexpensive</li><li>每米成本低于任何其他类型的局域网布线</li><li>较小的外径不能像其他类型的电缆那样迅速地填满布线管道(duct)</li><li>使用RJ连接器安装，因此可以大大减少潜在的网络噪声源，并确保良好的可靠连接</li></ol><h3 id="无屏蔽双绞线的缺点">无屏蔽双绞线的缺点</h3><ol type="1"><li>与其他类型的网络媒体相比，电缆更容易产生<strong>电噪声和干扰</strong></li><li>双绞线的信号增强距离比同轴电缆(Coaxial)和光纤(Fiber-Optic)<strong>短</strong></li></ol><h2 id="同轴电缆-coaxial">同轴电缆 Coaxial</h2><p><img src="https://s2.loli.net/2022/04/27/iBLNpQUnZS1E4uW.png" style="zoom: 67%;"></p><ol type="1"><li>薄/厚</li><li>与双绞线相比，不使用中继器的网络运行时间更长</li><li>比光纤便宜但比双绞线贵</li><li>中间是铜导线，在外面缠上一层金属网，防止外部干扰，细导线传输相对近，粗导线传输相对比较远</li><li>500m左右，无论如何比双绞线传输更加远，成本也要高一点</li><li>内置无线网卡肯定没有同轴电缆，同轴电缆是比较落后的工艺。</li></ol><h2 id="光缆-fiber-optic">光缆 Fiber-Optic</h2><p><img src="https://s2.loli.net/2022/04/27/8UJSpE7bvQfo3qi.png" style="zoom: 67%;"></p><ol type="1"><li>传导调制(modulated)光传输</li><li>不易受到电磁干扰或射频干扰，并且能够比其他网络媒体更高的数据速率</li><li>电磁波(electromagnetic wave)通过光纤被引导</li><li>比较可靠，中间是二氧化硅(光导体)，外面是塑料套，两个接口一个接收一个发送</li><li>成本比较高</li></ol><h3 id="光缆模式fiber-optic-mode-type">光缆模式(Fiber-Optic ModeType)</h3><ol type="1"><li>单模式：单个光传输 Single Mode<ul><li>也称为轴(axial)：光沿着电缆的轴传播</li><li>由于多模中的色散(dispersion)，比多模(高达10 Gbps)更快</li><li>通常用于广域网</li><li>直径小于多模(色散较小)</li><li>最常使用ILD，但也使用LED</li><li>光导体直径比较细，相对于多模式光缆要细一个数量级，认为光传输近似直射，能量损耗少，多用于广域网</li></ul></li><li>多模式 多根光不同角度传输 Multimode<ul><li>光以不同的角度进入玻璃管并沿非轴方向传播，这意味着它从玻璃管壁上来回反射</li><li>大于单光模式，最常用于局域网</li><li>易受更大分散性的影响</li><li>光导体直径大一些，同时传输多光信号，按照角度进行识别，一个上面实现多路传输，能量损失大一些(反射)</li></ul></li><li>都需要用注入式激光二极管或者发光二极管进行发射</li></ol><h2 id="无线通信-wireless-communication">无线通信 WirelessCommunication</h2><ol type="1"><li>区分不同电磁波的主要方法是通过其频率(频率多路复用)</li></ol><p><img src="https://s2.loli.net/2022/04/27/JPtTwSmXucCyEov.png" style="zoom:50%;"></p><ol start="2" type="1"><li>把信号编码成为电磁波的方式<ul><li>不同设备使用不同频段，可以互不干扰</li></ul></li></ol><h2 id="无线传输手段-wireless-transmission-methods">无线传输手段Wireless Transmission Methods</h2><ol type="1"><li>激光 Lasers<ul><li>输出一个相干(coherent)的电磁场，其中所有的波都在同一频率上，并在同一相位上排列</li><li>约定好电磁波频率范围，使用确定对射方案进行传输，部署在中间没有障碍物的两端之间，不能衍射</li></ul></li><li>红外线 Infrared<ul><li>通常是一种瞄准线(line-of-sight)技术，但可以反弹(bounced)或重定向</li><li>无法通过不透明对象</li><li>红外能量要比激光弱的多，成本低，不能衍射，不能跨障碍物传输</li></ul></li><li>收音机 Radio<ul><li>携带可以通过墙壁的数据信号</li><li>地面(terrestrial)和卫星无线电技术</li><li>可以通过衍射使得信号在比较远的距离和障碍物之间进行通信</li><li>传输距离比较远，辐射能量小，容易受到干扰，比如雨天能量会损失，在功率较大的设备旁边容易被干扰</li><li>路设发送信号:无线电台，卫星发射信号:GPS</li></ul></li></ol><h1 id="utp-for-ethernet-以太网使用的双绞线">UTP for Ethernet以太网使用的双绞线</h1><h2 id="电缆规格和终端">电缆规格和终端</h2><ol type="1"><li>网络媒体标准由下列团体制定和发布：<ul><li>电气与电子工程师学会 制定硬件标准，指定一些新型的协议。</li><li>保险商实验室</li><li>电子工业联盟</li><li>电信工业协会</li><li>美国国家标准协会</li></ul></li></ol><p><img src="https://s2.loli.net/2022/04/27/rtsjLGKkNAS654y.png" style="zoom: 67%;"></p><ol type="1"><li>对应不同的接地等标准</li></ol><h2 id="无屏蔽双绞线的分类">无屏蔽双绞线的分类</h2><ol type="1"><li>一类线：主要用于语音传输，不用于数据传输，只有两根线做双绞线，常用作电话的语音通信，并不做语音进行通信</li><li>二类线：传输频率1MHz，用于语音和最高4Mbps的数据传输，常见于令牌网环网，不是很常用</li><li>三类线：EIA/TIA568标准指定电缆，传输频率16MHz，用于语音传输及最高传输速率为10Mbps的数据传输，主要用于10BASE-T(10M带宽的双绞线)</li><li>四类线：传输频率为20MHz，用于语音传输和最高传输速率16Mbps的数据传输，主要用于令牌网和10BASE-T/100BASE-T</li><li>五类线：增加了绕线密度，外套高质量绝缘材料，用于语音和数据传输(主要为100/1000BASE-T)，是最常用的以太网电缆<ul><li>和三类线相比，绞合度更高，抗干扰能力更强。</li><li>从五类线开始进行了更加标准化的处理。</li></ul></li><li>超五类线(主要使用的)：衰减小，串扰少，具有更高的衰减/串扰比和信噪比、更小的时延误差，主要用于1000BASE-T</li><li>六类线：传输频率为1MHz～250MHz，性能远高于超五类标准，适用于高于1Gbps的应用</li><li>七类线：带宽为600MHz，可能用于今后的10G比特以太网。</li></ol><h2 id="线的类型-type-of-cable">线的类型 Type of Cable</h2><ol type="1"><li>直通线 Straght Cable</li><li>反转线 Rollover Cable</li><li>交叉电缆 Crossover Cable</li><li>两个台式机直连使用交叉线，台式机和交换机相连使用直通线。</li></ol><p><img src="https://s2.loli.net/2022/04/27/SxDNB8vcgesimld.png" style="zoom:50%;"></p><blockquote><p>制作线的过程见上图</p></blockquote><h3 id="直通线">直通线</h3><ol type="1"><li>100 欧姆平衡双绞线电信插座/连接器</li></ol><p><img src="https://s2.loli.net/2022/04/27/SxDNB8vcgesimld.png" style="zoom:50%;"></p><ol start="2" type="1"><li>双绞线是八根不同子线，根据颜色进行划分,从左到右(底下):白绿色、绿色、白橙色、蓝色、白蓝色、橙色、白棕色、棕色</li><li>两边都是T568A或者都是T568B的则是直通线</li></ol><h3 id="反转线">反转线</h3><ol type="1"><li>别名：控制台电缆,将计算机作为其他网络设备的控制台，如下解释</li><li>用于将工作站或终端连接到路由器/交换机的控制台端口以进行配置</li><li>一端的插脚1连接到另一端的插脚8；然后插脚2连接到插脚7，插脚3连接到插脚6，依此类推，两端是插脚对应是反着的</li><li>使用控制台配置设备(超级终端，使用电脑进行交换机路由器的配置)<ul><li>使用RJ-45-to-DB-9适配器连接计算机的串行端口(com) Connect the serialport (com) of computer by using RJ-45-to-DB-9 adapter</li><li>启动"超级终端" Start up "super terminal"</li><li>使用"默认配置" Use "default configurations"</li><li>注意，我们连接的是console端口，而不能是网口。</li></ul></li></ol><p><img src="https://s2.loli.net/2022/04/27/SxDNB8vcgesimld.png" style="zoom:50%;"></p><h3 id="交叉线">交叉线</h3><ol type="1"><li>电缆一端的对2和对3将在另一端反转，一端为T568-A的排序，另一端为T568-B的排序</li><li>被认为是"垂直"布线/主干的一部分</li><li>可以用来<ol type="1"><li>连接两个或多个集线器或开关</li><li>连接两个独立的工作站以创建小型</li></ol></li><li>主要用来连接相同的设备，相同的PC之间的连接</li><li>堆叠技术:用交叉线来两个交换机(将两个交换机合成为一个交换机进行使用)或者两个hubs，2个8口交换机，通过一根线连接，则有14个端口</li></ol><h1 id="介质和信号问题物理层">介质和信号问题(物理层)</h1><h2 id="信令和通信问题">信令和通信问题</h2><ol type="1"><li>传播(本质是电磁波) Propagation<ul><li>行程时间；速度取决于介质</li><li>随着数据传输速率的增加，有时必须考虑信号传输所需的时间。</li><li>不同介质传播时间是不同的。传播时延。</li></ul></li><li>衰减 Attenuation<ul><li>由于<strong>周围环境(surroundings)</strong>造成的远距离信号丢失</li><li>会影响网络，因为它限制了可以通过其发送消息的网络布线的长度</li><li>在有限长度下进行传输</li></ul></li><li>反射 Reflection<ul><li>由介质的不连续性引起，我们要保证介质稳定。</li><li>发生在电信号中；可能是电缆扭结(kinks)或电缆端接不良的结果</li><li>网络应具有特定的阻抗，以匹配NIC中的电气组件</li></ul></li><li>噪声(电子干扰) Noise<ul><li>对光/电磁信号的不必要的附加</li><li>电缆中其他电线的串扰电噪声</li><li>EMI(电磁干扰)可由电动机引起。</li><li>可以通过扭转线对在网络介质中提供自屏蔽来避免信号的消除。</li></ul></li><li>时间问题 Timing problem<ul><li>色散信号在时间上，可以通过适当的电缆设计、限制电缆长度和找到适当的阻抗来固定</li><li>抖动源和目标不同步，可通过硬件和软件(包括协议)修复</li><li>网络信号延时</li></ul></li></ol><h2 id="冲突和冲突域-collisions-and-collision-domains">冲突和冲突域Collisions and Collision Domains</h2><ol type="1"><li>当两个位元在同一网路上同时传播时，会发生碰撞。</li><li>通过添加中继器和集线器<strong>扩展</strong>冲突域。</li><li>可以通过添加智能设备(如网桥、交换机和路由器)来分割网络。</li><li>到第二第三层(分段后)才能有效划分冲突域，第一层不能解决冲突问题。</li></ol><h2 id="分割碰撞域-segmenting-collision-domains">分割碰撞域 SegmentingCollision Domains</h2><p><img src="https://s2.loli.net/2022/04/27/FkuQrtaqORN7z9m.png" style="zoom:50%;"></p><ol type="1"><li>将不同的冲突域进行分段(第一层设备无法解决这些问题)，还是在一个局域网中</li><li>局域网划分是根据TCP/IP的协议栈的IP查询的，到三层才能做网络的分段。</li></ol><h1 id="数据通信的基础信息">数据通信的基础信息</h1><ol type="1"><li>数据通信的理论基础:<strong>为什么带宽是有上限的</strong><ol type="1"><li>基本术语</li><li>信号处理</li><li>波特率与比特率</li></ol></li><li>数据通信技术<ol type="1"><li>数据通信系统基本结构</li><li>数据表示和传输方式</li><li>信号的传输</li><li>数字信号编码</li><li>多路复用</li><li>通信方式</li></ol></li><li>参考计算机网络教材，思科网络教程是没有的。</li></ol><h2 id="基本术语">基本术语</h2><ol type="1"><li>信号(signal)——数据的电气的或电磁的表现。传输的是数据。<ul><li>"模拟的"(analogous)——消息的参数的取值是<strong>连续</strong>的，模拟信号是随时间变化而平稳变化的连续波形式</li><li>"数字的"(digital)——消息的参数的取值是离散的，数字信号是离散信号，可能包含有限的几个预定值</li></ul></li><li>码元(code)——在使用<strong>时间域</strong>(或简称为时域,基本时间单位)的波形表示数字信号时，代表不同离散数值的基本波形。<ul><li>传输基本单位，并不一定只包含一位，比如有8个单位，那么我们可以根据波形分为8种，8种区分可以传输三位，2<sup>3</sup>= 8</li></ul></li></ol><h2 id="理论基础信号处理">理论基础:信号处理</h2><ol type="1"><li>模拟信号可以被分为简单信号和复合信号<ul><li>简单信号(<strong>正弦波</strong>)不能被分解为更简单的模拟信号</li><li>正弦波和余弦波也就只差一个相位，问题不大。</li><li>一般使用正弦波来进行表示。</li><li>复合信号可以被分解为多个正弦波</li></ul></li><li>复合模拟信号的分解：<strong>傅立叶分析</strong>，任何一个周期为T的有理周期性函数g(t)可分解为若干项(可能无限多项)正弦和余弦函数之和：</li></ol><p><img src="https://s2.loli.net/2022/04/27/k1tuvMbBSDK5RpO.png" style="zoom:50%;"></p><ol start="3" type="1"><li>数字信号一般是<strong>非周期性</strong>的，通常在传输介质上表现为<strong>方波</strong>，非周期函数也可以变换成周期函数来进行分析</li><li>一个数字信号可以分解为无穷多个被称为<strong>谐波</strong>的简单正弦波，每个谐波都具有不同的<strong>频率与相位</strong>，最后组合成一个方波。</li><li>在介质上发送数字信号时，其实质是在发送无穷多的简单谐波，如果某些分量未能忠实地通过介质传输，则在接收端将产生信号<strong>畸变</strong>。</li><li>由于介质本身的限制，信号畸变是难以完全避免的:传输距离越远、传输速率越高，越容易受到干扰。</li><li>任何实际的信道都不是理想的，在传输信号时会产生各种失真以及带来多种干扰。</li><li>码元传输的速率越高，或信号传输的距离越远，在信道的输出端的波形的失真就越严重</li></ol><h2 id="数字信号通过实际的信道">数字信号通过实际的信道</h2><ol type="1"><li>有失真，但可识别:形变只要不是不可识别还是可以被处理的。</li></ol><p><img src="https://s2.loli.net/2022/04/27/au3mtOZ1FVX2Sfd.png" style="zoom:67%;"></p><ol start="2" type="1"><li>失真大，无法识别:无法区分，码间串扰(无法识别每一个码元)</li></ol><p><img src="https://s2.loli.net/2022/04/27/sneKlx9dUrFikwN.png" style="zoom:67%;"></p><h2 id="无噪声信道的最高传输速率">无噪声信道的最高传输速率</h2><ol type="1"><li>1924 年，奈奎斯特(Nyquist)指出在假定无噪声的信道上，为避免<strong>码间串扰</strong>，传输比特率的上限值为：<ul><li>C = W log<sub>2</sub>L bps</li><li>W 为信道的带宽(以 Hz 为单位)，传输信号的频率(上限)</li><li>L为表示数据的信号电平的数量(码元能表示的信息数)，能表示8个，则为3。</li></ul></li><li>在任何信道中，码元传输的速率是有上限的，否则就会出现码间串扰的问题，使接收端对码元的判决(即识别)成为不可能。</li><li>如果信道的频带越宽，也就是能够通过的信号高频分量越多，那么就可以用更高的速率传送码元而不出现码间串扰</li><li>这是理想情况下，没有信道干扰。</li></ol><h2 id="噪声信道的最高传输速率">噪声信道的最高传输速率</h2><ol type="1"><li>香农(Shannon)用信息论的理论推导出了带宽受限且有高斯白噪声干扰的信道的极限、无差错的信息传输速率</li><li>信道的极限信息传输速率 C 可表达为<ul><li>C = W log<sub>2</sub>(1 + S/N) bps</li><li>W 为信道的带宽(以 Hz 为单位)</li><li>S 为信道内所传信号的平均功率</li><li>N 为信道内部的高斯噪声功率(用高斯概率公式去拟合)</li><li>S/N 称为信噪比</li></ul></li><li>香农公式的含义<ol type="1"><li>信道带宽或信道的<strong>信噪比</strong>越大，极限传输速率越高</li><li>只要信息传输速率低于信道的极限信息传输速率，就<strong>一定</strong>有办法实现无差错的传输。</li><li>若信道的带宽 W 或信噪比 S/N 没有上限(实际不可能)，则其极限信息传输速率 C 也没有上限</li><li>实际能够达到的传输速率比香农极限传输速率<strong>低不少</strong></li><li>请注意：对于频带宽度已确定的信道，即使信噪比不能再提高，且码元速率已达上限，也<strong>有办法提高</strong>传输速率。这就是用编码的方法让每个码元携带更多比特的信息量</li></ol></li></ol><h2 id="理论基础波特率和比特率">理论基础:波特率和比特率</h2><ol type="1"><li>波特率(baud)和比特率(bit)<ul><li>波特率(调制速率)：波信号每秒钟变化的次数</li><li>比特率：每秒钟传送的二进制位数。</li></ul></li><li>波特率与比特率的关系取决于信号值与比特位的关系<ul><li>例：每个信号值表示为3位，则比特率是波特率的3倍；每个信号值表示为1位，则比特率和波特率相同</li><li>对于比特率为a bps的信道，发送8位所需的时间为8/a秒，若8位为一个周期Ｔ，则一次谐波的频率是：f = a/8 Hz</li></ul></li></ol><h2 id="数据通信系统的模型">数据通信系统的模型</h2><p><img src="https://s2.loli.net/2022/04/27/sneKlx9dUrFikwN.png" style="zoom: 67%;"></p><ol type="1"><li>在传输工程中，首先从输入方(原系统，数字比特流)，经过传输系统(比较远，用模拟信号系统)，到达目的系统(数字比特流)</li><li>发送方将数字信号调制成模拟信号</li><li>接收方将模拟信号调制成数字信号</li></ol><h2 id="数据通信技术数字数据编码">数据通信技术：数字数据编码</h2><ol type="1"><li>基带：基本频带，指传输变换前所占用的频带，是原始信号所固有的频带</li><li>基带传输:在传输时直接使用基带数字信号(不转换为 模拟信号，即不调制)<ul><li>基带传输是一种最简单最基本的传输方式，一般用低电平表示"0"，高电平表示"1"</li><li>适用范围：低速和高速的各种情况。</li><li>限制：因基带信号所带的频率成分很宽(低频、直流成分,有的是不能传输，所以需要使用其他频带进行传输)，所以对传输线有一定的要求。</li></ul></li><li>有的信道不能支持基带信号，需要把基带信号调制为频道信号再进行传输。</li><li>一般频道信号是模拟信号。</li></ol><h2 id="将数字数据转换到模拟信号调制">将数字数据转换到模拟信号：调制</h2><p><img src="https://s2.loli.net/2022/04/27/FTWU4kr8jXtiOwR.png" style="zoom:67%;"></p><ol type="1"><li>三种不同调制方式</li></ol><h2 id="将数字数据转换到数字信号线路编码">将数字数据转换到数字信号：线路编码</h2><ol type="1"><li>线路编码是指将二进制数据转换成可以在物理通信链路上传输的形式，例如电线上的电脉冲、光纤上的光脉冲或空间中的电磁波</li><li>在基带传输时数据离散传输，线路编码是有必要的</li><li>线路编码作用:在发送和接收双方进行协同操作，避免混淆理解，提高传输效率</li></ol><h2 id="数字通信技术编码方式的分类">数字通信技术:编码方式的分类</h2><ol type="1"><li>单极性编码:一个正极或者负极</li><li>极化编码<ul><li>NRZ(Non-Return to Zero，不归零制码)</li><li>RZ(Return to Zero，归零制码)</li><li>双相位编码<ul><li>曼彻斯特码</li><li>差分曼彻斯特码</li></ul></li></ul></li><li>双极性编码<ul><li>传号交替反转码(AMI)</li><li>双极性8连0替换码(B8ZS)</li><li>3阶高密度双极性码(HDB3)</li></ul></li></ol><h3 id="单极性编码">单极性编码</h3><p><img src="https://s2.loli.net/2022/04/27/FTWU4kr8jXtiOwR.png"></p><ol type="1"><li>原理：用0电平表示"0"，正电平表示"1"</li><li>缺点：<ul><li>难以分辨一位的结束和另一位的开始</li><li>发送方和接收方必须有时钟同步</li><li>若信号中"0"或"1"连续出现，信号直流分量将累加，单极性编码的直流分量问题严重</li><li>不好知道时钟同步，连续多个0的问题，会有电流大量累积。</li></ul></li><li>结论：容易产生传播错误</li></ol><h3 id="极化编码不归零制码nrz-non-return-to-zero">极化编码：不归零制码(NRZ:Non-Return to Zero)</h3><p><img src="https://s2.loli.net/2022/04/27/FTWU4kr8jXtiOwR.png"></p><ol type="1"><li>不归零电平编码，原理：用负电平表示"0"，正电平表示"1"(或相反)，一定的中和。</li><li>缺点：<ul><li>难以分辨一位的结束和另一位的开始</li><li>发送方和接收方必须有时钟同步</li><li>尽管不会如单极性编码严重，但若信号中"0"或"1"连续出现，信号直流分量仍将累加</li></ul></li><li>不归零反相编码<ul><li>原理：信号电平的一次<strong>翻转</strong>代表比特1，无电平变化代表0</li><li>不归零反相编码优于不归零电平编码：由于每次遇到"1"(或"0")都要发生跃迁，因此可以根据电平跃迁进行有限的同步</li><li>不太容易产生电荷的基类，同步还是存在问题的。</li></ul></li></ol><h3 id="极化编码归零制码rz-return-to-zero">极化编码：归零制码(RZ: Returnto Zero)</h3><p><img src="https://s2.loli.net/2022/04/27/9AutljiVyNHfEZx.png"></p><ol type="1"><li>原理：用负电平表示"0"，正电平表示"1"(或相反)，比特中位跳变到零电平，从而提供同步</li><li>优点：信号本身带有同步信息，经济性好，且不易出错</li><li>缺点：需要采用3个不同电平，两次信号变化来编码1比特，因此增加了占用的带宽</li></ol><h3 id="极化编码曼彻斯特码manchester">极化编码：曼彻斯特码(Manchester)</h3><p><img src="https://s2.loli.net/2022/04/27/Aoa1twnfKjmVydb.png"></p><ol type="1"><li>原理：每一位中间都有一个跳变，从低跳到高表示"0"，从高跳到低表示"1"<ul><li>请思考："00" "01"曼彻斯特编码下应怎样表示？</li><li>优点：克服了NRZ码的不足。每位中间的跳变既可作为数据，又可作为时钟，能够自同步；同时只采用两个电平，跳变减少，比RZ码效率更高</li></ul></li><li>对于归零编码的改进，使用了两个电位表示2个信息</li><li>编码效率为50%，有一半是没有使用的。</li></ol><h3 id="极化编码差分曼彻斯特码differential-manchester">极化编码：差分曼彻斯特码(DifferentialManchester)</h3><p><img src="https://s2.loli.net/2022/04/27/w2yIDhpjHWCmkPo.png" style="zoom:50%;"></p><ol type="1"><li>原理：<ul><li>每一位中间跳变：表示时钟</li><li>每一位位前跳变：表示数据：有跳变表示"0"，无跳变表示"1"</li></ul></li><li>优点：时钟、数据分离，便于提取</li><li>有变化是1，无变化是0，这时候它要看前一个波形，来生成，如果是0，无变化，如果是1，有变化。</li></ol><h3 id="双极性编码双极性传号交替反转码ami">双极性编码：双极性传号交替反转码(AMI)</h3><p><img src="https://s2.loli.net/2022/04/27/VT2Ej75YGpW6hxz.png"></p><ol type="1"><li>与RZ相同的是: 采用三个电平：正、负与零</li><li>与RZ不同的是: 零电平表示"0"，正负电平的跃迁表示"1"，实现对"1"电平的交替反转。</li><li>优点：<ol type="1"><li>对每次出现的"1"交替反转，使直流分量为0</li><li>尽管连续"0"不能同步，但连续"1"可以同步</li></ol></li><li>这次是1是高点位，下一次就是低电位。</li></ol><h3 id="数据通信技术多路复用">数据通信技术：多路复用</h3><p><img src="https://s2.loli.net/2022/04/27/J4f8inUPHM3oLDN.png" style="zoom:50%;"></p><ol type="1"><li>多路复用技术：由于一条传输线路的能力远远超过传输<strong>一个用户</strong>信号所需的能力，为了提高线路利用率，经常让多个信号共用一条物理线路</li><li>复用器和分解器，在逻辑上形成。</li></ol><h2 id="多路复用的分类">多路复用的分类</h2><ol type="1"><li>时分复用 TDM ( Time Division Multiplexing)</li><li>频分复用 FDM ( Frequency Division Multiplexing)</li><li>波分复用 WDM ( Wavelength Division Multiplexing)</li><li>码分复用 CDM (Code Division Multiplexing )</li></ol><h3 id="时分复用tdm-time-division-multiplexing">时分复用TDM (TimeDivision Multiplexing)</h3><p><img src="https://s2.loli.net/2022/04/27/1O3wqEdhLcGSz5Y.png" style="zoom: 67%;"></p><ol type="1"><li>时分复用是将时间划分为一段段等长的时分复用(TDM )帧，每个时分复用的用户在每个 TDM 帧中占用固定序号的时隙。<ul><li>每个间隙发对应的时分复用帧。</li><li>复用器在发送时进行处理，分解器则是在接收时进行分解。</li></ul></li><li>每一个用户所占用的时隙是周期性地出现</li><li>TDM 信号也称为<strong>等时(isochronous)信号</strong>。</li><li>时分复用的所有用户在不同的时间占用同样的频带宽度。</li></ol><p><img src="https://s2.loli.net/2022/04/27/V8y2pnjI4gCWufT.png" style="zoom:50%;"></p><ol start="5" type="1"><li>时分复用可能会造成线路资源的浪费：使用时分复用系统传送计算机数据时，由于计算机数据的突发性质，用户对分配到的子信道的利用率一般不高。</li><li>帧的长度是一定的，划分时间周期是根据设备进行划分的</li></ol><h3 id="统计时分复用-stdm-statistic-tdm">统计时分复用 STDM (StatisticTDM)</h3><p><img src="https://s2.loli.net/2022/04/27/V8y2pnjI4gCWufT.png" style="zoom:50%;"></p><ol type="1"><li>避免大量信道被浪费。</li><li>不是固定时间进行分配，而是一旦充足就组织起来，然后被服务成帧，在一个时间周期中组织好了就发送。</li><li>问题:不再按照时间来区分用户，所以每个帧都要携带自己的用户信息，会造成浪费<ul><li>比较主流的使用方案</li><li>整体效果好于时分复用</li></ul></li><li>帧是按照时间段来发送，但是是谁先来发送谁的</li></ol><h3 id="频分复用-fdm-frequency-division-multiplexing">频分复用 FDM(Frequency Division Multiplexing)</h3><p><img src="https://s2.loli.net/2022/04/27/VFmGvJprtwzxTnB.png" style="zoom: 67%;"></p><ol type="1"><li>用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带。</li><li>所有用户在同样的时间占用不同的带宽资源(请注意，这里的"带宽"是频率带宽)</li><li>避免互相干扰:相邻比率之间是有间隔的，大家可以同时使用介质发送自己的信号</li></ol><h3 id="波分复用-wdm-wavelength-division-multiplexing">波分复用 WDM(Wavelength Division Multiplexing)</h3><ol type="1"><li>波分复用就是光的频分复用：频率和波长是成倒数关系的。</li></ol><p><img src="https://s2.loli.net/2022/04/27/WFS4EC9ibUKwL1Y.png" style="zoom:67%;"></p><h3 id="码分复用-cdm-code-division-multiplexing">码分复用 CDM (CodeDivision Multiplexing)</h3><ol type="1"><li>常用的名词是<strong>码分多址</strong> CDMA(Code Division MultipleAccess)<ul><li>在3G手机时被使用，大家采用相同频率，但是对于数据编码进行变换。(1编译成为n个bits，0编译取1的编译码的反码)</li><li>要求不同基站的1的编码是相互正交的，基站2产生的01序列编码不能对基站1的序列编码产生影响。</li><li>多个基站使用互相正交的编码，互相不影响，进行复用</li></ul></li><li>各用户使用经过特殊挑选的不同码型，因此彼此 不会造成干扰。</li><li>这种系统发送的信号有很强的<strong>抗干扰能力</strong>，其频谱类似于白噪声，不易被敌人发现。</li><li>比如:基站1：11110000表示1,00001111表示0，将一个字节变成8个字节发送，进行扩充，编码内容不同</li><li>频分复用也是使用一个线路</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> 互联网计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 互联网计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人机交互设计</title>
      <link href="/2022/04/25/%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92%E8%AE%BE%E8%AE%A1/"/>
      <url>/2022/04/25/%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="人机交互设计">人机交互设计</h1><ul><li>What is HCI Design?<ul><li>Objectives of HCI - Usability</li></ul></li><li>Three factors in HCI<ul><li>Human</li><li>Computer</li><li>Interaction</li></ul></li><li>HCI Design Process<ul><li>GUI Design</li></ul></li></ul><h1 id="用户和不好的设计">用户和不好的设计</h1><ol type="1"><li>系统用户通常通过系统界面而非功能来判断系统：用户界面的设计应与预期用户的技能，经验和期望相匹配。</li><li>界面设计不当会导致用户发生灾难性错误：不好的UI的设计往往是很多软件系统不被使用的原因。</li><li>IPAD的良好的体验感和可操作性，而早期的Andriod操作系统则主要是从工程师角度出发的操作系统。</li><li>比如医院书写病历:老医生打字困难，所以我们我们应该针对性的进行设计。</li></ol><h1 id="什么是人机交互设计hci">什么是人机交互设计(HCI)</h1><ol type="1"><li>人机交互设计旨在发现最有效的方法来设计人机界面之间的可用和有效的体验</li></ol><h2 id="什么是好的人机交互">什么是好的人机交互</h2><ol type="1"><li>良好的HCI界面设计可鼓励用户与系统之间<strong>轻松，自然且引人入胜</strong>的交互。</li><li>"当程序的行为完全符合用户的想法时，用户界面就会经过精心设计。"<ol type="1"><li>它允许用户执行我们所需的任务。</li><li>一个好的界面应该是<strong>透明</strong>的。有了一个好的用户界面，用户会<strong>忘记自己正在使用计算机</strong>。</li></ol></li><li>如何判断好坏？ 唯一标准:<strong>可用性</strong></li></ol><h2 id="hci的重要组成可用性-重要">HCI的重要组成：可用性 重要</h2><ol type="1"><li>可用性不是用户界面的单一一维属性，它包含以下维度。<ol type="1"><li>易学性：新手用户容易学习，能够很快使用系统。</li><li>效率：熟练的用户可以高效使用它</li><li>易记性：使用过软件系统的用户，能够有效记忆或快速重新学会使用该系统。(超市可以缓存之前的信息)</li><li>出错率：几乎没有错误，可以从错误中快速恢复</li><li>主观满意度：让用户有良好的体验。</li></ol></li></ol><h3 id="不同的用户的学习曲线">不同的用户的学习曲线</h3><ol type="1"><li>易学性和效率是存在冲突的</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt11/1.png"></p><ol start="2" type="1"><li>大多数的GUI界面都是友好新手的，而命令界面是友好专家用户的。</li></ol><h3 id="记忆">记忆</h3><ol type="1"><li>涉及编码和回忆知识并采取适当行动</li><li>我们不记得所有的事情:涉及过滤和处理</li><li>上下文对于影响我们的记忆很重要</li><li>我们认识事物比回忆事物好得多</li><li>GUI在基于命令的界面上的兴起</li><li>相比文字，人们更加容易记住图片</li><li>使用图标而不是名称</li></ol><h1 id="人机交互的三个因素">人机交互的三个因素</h1><h2 id="人">人</h2><ol type="1"><li>什么是人机交互中的人？<ol type="1"><li>用户 -拥有一台笔记本电脑的人，一群一起或远程工作的人，一系列按顺序工作的人...</li><li>一个或多个试图使用计算技术完成工作的人</li><li><strong>用户只想看到它想要看到的</strong></li></ol></li></ol><h3 id="人的特性">人的特性</h3><ol type="1"><li>短期记忆有限<ol type="1"><li>7±2原则</li><li>电脑可以存储知识</li></ol></li><li>人会犯错：避免，恢复，帮助</li><li>人是不同的：新手用户，知识渊博的间歇用户，专家频繁用户</li><li>人们有不同的互动偏好：有一些人喜欢照片，有一些人喜欢文本</li></ol><h3 id="你看到了什么">你看到了什么</h3><p><img src="https://s2.loli.net/2022/04/25/KUpYrWkdMcJI1g5.png"></p><ol type="1"><li>用户答案<ol type="1"><li>成绩</li><li>统计</li></ol></li><li>技术答案<ol type="1"><li>2维画面</li><li>可控的组件<ol type="1"><li>文本和图片</li><li>图标和工具栏</li><li>可扩展栏和菜单栏</li><li>任务栏和状态信息</li><li>控制器和指针</li><li>颜色集合</li></ol></li><li>文档的代表</li><li>软件功能的代表</li></ol></li><li>进行人机交互设计师，一定要谨记从用户的角度来进行学习和分析</li></ol><h3 id="精神模型-重要">精神模型 重要</h3><ol type="1"><li>尝试发现用户对程序帮助他们执行任务的心理模型</li><li>如何？请注意模型的固有隐喻，它们代表任务的概念性组成部分</li><li>隐喻:左上角的开关就应该是控制左上角的灯</li><li><strong>精神模型</strong>就是用户进行人机交互时头脑中的任务模型。依据精神模型可以进行<strong>隐喻</strong>(Metaphor)设计：<ol type="1"><li>隐喻又被称为视觉隐喻，是视觉上的图像，但会被用户映射为业务事物。用户在识别图像时，会依据隐喻将控件功能与已知的熟悉事物联系起来，形成任务模型；</li><li>隐喻本质上是在用户已有知识的基础上建立一组新的知识，实现界面视觉提示和系统功能之间的知觉联系。</li></ol></li><li>进行人机交互设计时，要调查用户的目标和任务，分析用户的任务模型，并且据此设计界面隐喻。</li></ol><p><img src="https://s2.loli.net/2022/04/25/oyGPgvd8rWcfap1.png"></p><h3 id="发现精神模型">发现精神模型</h3><ol type="1"><li>发现用户的精神模型<ol type="1"><li>找到用户在尝试去做什么！目标！</li><li>用户，目标，结果任务的需求</li><li>仅在确定有助于解决任务的功能时才应添加功能:诱惑：如果添加附加功能很便宜，那么通常要这样做-这会严重损害用户界面的概念！</li><li>与用户个人资料相关的任务的频率</li></ol></li></ol><h3 id="差异性">差异性</h3><ol type="1"><li>新手用户<ol type="1"><li>是对业务不熟悉的⼈</li><li>例如新员工或者新接触系统的⼈。为新手用户设计系统时要关注易学性，进⾏业务导航，尽量避免出错。如果⼀个系统的⼤多数⽤户都是新手用户，整个系统的⼈机交互设计都要侧重<strong>易学性</strong>。</li></ol></li><li>专家用户<ol type="1"><li>是能够熟练操作计算机完成业务任务的⼈，⼀般都是⻓时间使⽤软件系统并且计算机操作技能熟练的人。</li><li>为专家用户设计系统时，要关注效率。如果⼀个系统的大多数用户都是专家⽤户，整个系统的⼈机交互设计都要侧重效率。</li></ol></li><li>熟练用户：是介于新手用户和专家用户之间的⼈。为熟练用户设计⼈机交互系统要在易学性和效率之间进行折中。</li><li>好的人机交互应该为不同的用户群体提供差异化的交互机制。<ol type="1"><li>既为新⼿用户提供易学性高的⼈机交互机制(图形界面)</li><li>⼜为专家用户提供效率高的⼈机交互机制(命令行、快捷方式、热键)</li></ol></li></ol><h1 id="人机交互设计中的计算机的因素">人机交互设计中的计算机的因素</h1><h2 id="计算机设备">计算机设备</h2><ol type="1"><li>⼈机交互设备<ol type="1"><li>输入设备<ol type="1"><li>键盘</li><li>鼠标</li><li>⼿写板</li></ol></li><li>输出设备<ol type="1"><li>显示屏</li><li>喇叭</li><li>打印机</li></ol></li></ol></li></ol><h2 id="可视化设计">可视化设计</h2><ol type="1"><li>从可视化设计语言VisualBasic开始，对可视化构件的布局就成为可视化设计的主要⼯作。</li><li>常⻅的可视化构件包括：窗⼝、菜单、标签(Tab)、表单、按钮、列表、树形控件、组合框、输⼊框等等，[Cooper2007]对此有详细的描述。</li><li>要点:<ol type="1"><li>按照任务模型设计界⾯隐喻，同时不要把软件系统的<strong>内部构造机制</strong>暴露给⽤户</li><li>可视化设计还应该基于界面隐喻，尽可能地把功能和任务细节表现出来</li></ol></li></ol><h2 id="不要暴露内部结构">不要暴露内部结构</h2><p><img src="https://s2.loli.net/2022/04/25/AXR9OJvHNfpi5nM.png"></p><ol type="1"><li>最初的压缩软件:只有这3个功能，很明白地全部显示了出来</li><li>现在的压缩软件:停到特定的文件的时候给出拉出菜单</li><li>功能和场景结合起来，而不是完全要全新选择，避免用户做出不当的行为</li></ol><h2 id="展示细节">展示细节</h2><p><img src="https://s2.loli.net/2022/04/25/TNOjnha5M9qKQGe.png"></p><ol type="1"><li>左侧选择字体没有更加细节的展示，而右侧则展示了其中的细节问题</li></ol><h2 id="常见界面类型">常见界面类型</h2><p><img src="https://s2.loli.net/2022/04/25/WOhAxr6aKM3wlX9.png"></p><h2 id="交互">交互</h2><ol type="1"><li>"交互"是双向的：<ol type="1"><li>⼀⽅⾯⽤户主动向软件系统提出请求(输⼊信息)，软件系统给予⽤户响应(输出信息)；</li><li>另⼀⽅⾯，软件系统也应该主动告知⽤户相应的信息，并等待⽤户的响应。</li></ol></li></ol><h3 id="交互方式">交互方式</h3><ol type="1"><li>直接操作(图形)：视窗图标</li><li>菜单选择</li><li>表单输入</li><li>命令语言</li><li>自然语言</li></ol><h3 id="直接操作">直接操作</h3><p><img src="https://s2.loli.net/2022/04/25/NC85HeGz6Ynp3ro.png"></p><ol type="1"><li>优点<ol type="1"><li>用户感到可以控制计算机，而不会被计算机吓倒。</li><li>用户学习时间相对较短。</li><li>用户会立即收到有关其操作的反馈。错误经常可以被发现并迅速纠正。</li></ol></li><li>问题<ol type="1"><li>如何得出适当的信息模型和隐喻？</li><li>鉴于用户拥有很大的信息空间，他们如何在该空间中导航并始终了解其当前位置</li><li>接口通常很复杂。</li></ol></li></ol><h3 id="菜单系统">菜单系统</h3><ol type="1"><li>下拉式菜单<ol type="1"><li>可预测的，但需要更多的屏幕空间</li><li>显示菜单标题。</li><li>用户可以通过此菜单选择命令。</li></ol></li><li>弹出式菜单<ol type="1"><li>灵活，量身定制，可能会引起用户惊讶</li><li>它们与实体(例如字段)相关联。</li></ol></li><li>优点<ol type="1"><li>用户不需要知道命令名称。</li><li>打字非常少。</li><li>可以避免一些用户错误。</li><li>可以提供上下文相关的帮助。</li></ol></li><li>缺点<ol type="1"><li>涉及逻辑结合(和)的动作：或析取(或)难以代表</li><li>注意大型菜单的结构。以下是解决方案<ol type="1"><li>滚动菜单</li><li>层级菜单</li><li>步行菜单</li><li>相关的控制面板</li></ol></li></ol></li></ol><h3 id="表单接口">表单接口</h3><p><img src="https://s2.loli.net/2022/04/25/AVPIZ1dyou9BTlb.png"></p><ol type="1"><li>优点：用于结构化数据表示和填充</li><li>缺点：仅仅是用于结构化数据表示和填充</li></ol><h3 id="命令行模式">命令行模式</h3><ol type="1"><li>优点<ol type="1"><li>由于语言处理，实现起来很简单。</li><li>它可以通过许多命令支持非常复杂的系统。</li><li>用户界面需要一些技巧。</li><li>打字非常少。</li><li>可以避免一些用户错误。</li><li>可以提供上下文相关的帮助。</li></ol></li><li>缺点：<ol type="1"><li>用户必须学习并记住所有命令。</li><li>难以学习的系统，操作起来不容易。</li><li>用户不可避免地会犯错误</li></ol></li></ol><h3 id="自然语言模式">自然语言模式</h3><ol type="1"><li>用户以自然语言键入命令。通常，词汇量是有限的，并且这些系统仅限于特定的应用领域(例如，时间表查询)</li><li>NL处理技术现在已经足够好，可以使这些接口对休闲用户有效，但是有经验的用户发现他们需要太多的输入</li><li>往往结合机器学习中的NLP技术</li></ol><h2 id="总结">总结</h2><p><img src="https://s2.loli.net/2022/04/25/FLBgZdy4x3Dr5Un.png"></p><h1 id="人机设计的交互性">人机设计的交互性</h1><h2 id="导航-重要">导航 重要</h2><ol type="1"><li>好的人机交互设计就像⼀个服务周到的推销员，能够主动将自己的产品和服务简明扼要地告诉⽤户，这个就是导航。</li><li>好的导航就像⼀个好的餐厅菜单，餐厅菜单能够帮助顾客快速地找到喜欢的⻝物，软件系统导航也要能帮助⽤户找到任务的⼊⼝。</li><li>导航的⽬的就是为⽤户提供⼀个很好的完成任务的⼊⼝，好的导航会让这个⼊⼝⾮常符合⼈的精神模型。</li><li>全局结构按照任务模型将软件产品的功能组织起来，并区分不同的重要性和主题提供给不同的⽤户。<ol type="1"><li>全局结构常⽤的导航控件包括<strong>窗口、菜单、列表、快捷方法、热键</strong>等等。</li><li>全局结构的设计主要以功能分层和任务交互过程为主要依据。</li></ol></li><li>局部结构通过安排界面布局细节，制造<strong>视觉上的线索</strong>来给⽤户提供导航。<ol type="1"><li>局部结构常用的导航控件包括可视化控件布局与组合、按钮设置、文本颜色或字体大小等等。</li></ol></li><li>局部结构的设计主要以⽤户关注的任务细节为主要依据。</li></ol><p><img src="https://s2.loli.net/2022/04/25/FX6TRxrcp4CzG8g.png"></p><blockquote><p>标注部分详见课本189页</p></blockquote><h2 id="反馈-重要">反馈 重要</h2><p><img src="https://s2.loli.net/2022/04/25/1CyTLBlzGKMN5wm.png"></p><ol type="1"><li>一定要有反馈，避免进行错误的操作</li><li>⽤户喜欢较短的响应时间；</li><li>较⻓的响应时间(&gt;15秒)具有破坏性；</li><li>⽤户会根据响应时间的变化调整⾃⼰的⼯作⽅式；</li><li>较短的响应时间导致了较短的⽤户思考时间；</li><li>较快的节奏可能会提⾼效率，但也会增加出错率；</li><li>根据任务选择适当的响应时间：<ol type="1"><li>打字、光标移动、⿏标定位：50～150毫秒</li><li>简单频繁的任务：1秒</li><li>普通的任务：2～4秒</li><li>复杂的任务：8～12秒</li></ol></li><li>响应时间适度的变化是可接受的；</li><li>意外延迟可能具有破坏性；</li><li><strong>经验测试</strong>有助于设置适当的响应时间。</li></ol><h2 id="协作式设计-重要">协作式设计 重要</h2><ol type="1"><li>⼈和计算机是⼈机交互的方法，其中⼈的因素是⽐较固定的，一定时期内不会发⽣⼤的变化，所以要让二者交互顺畅，就需要让计算机更多地适应⼈的因素，这也是⼈机交互设计以⽤户为中⼼的根本原因。</li><li>这种调整计算机因素以更好地适应并帮助⽤户的设计⽅式被称为协作式设计</li></ol><h1 id="一些人机交互设计原则-重要至少记住5条以上">一些人机交互设计原则重要(至少记住5条以上)</h1><h2 id="简洁设计72原则">简洁设计(7±2原则)</h2><p><img src="https://s2.loli.net/2022/04/25/lxMXeU1ysiDto29.png"></p><ol type="1"><li>人类的信息处理能力是受限的，一般满足7±2原则</li></ol><h2 id="一致性设计">一致性设计</h2><ol type="1"><li>用户在使用软件系统时，会为软件系统建立精神模型。</li><li>以下是一个不一致性设计的例子。</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt11/13.png"></p><h2 id="低出错率设计">低出错率设计</h2><ol type="1"><li>人机交互设计首先要帮助人们避免犯错，尽可能设计不让⽤户犯严重错误的系统<ol type="1"><li>具体措施包括将不适当的菜单选项功能以灰色显示屏蔽</li><li>禁⽌在数值输入域中出现字母字符</li></ol></li><li>当错误出现时，系统还要在⼈机交互中提供简洁、有建设性、具体的指导来帮助⽤户消除错误：填写表单时如果使用输⼊了无效的编码，那么系统应该引导他们对此进行修改，⽽不是要求⽤户重新填写整个表单。</li><li>出错信息应当遵循以下四个简单原则[Shneiderman1982]：<ol type="1"><li>应当使用清晰的语言来表达，而不要使用难懂的代码；</li><li>使⽤的语言应当精炼准确，而不是空泛、模糊的；</li><li>应当对用户解决问题提供建设性的帮助；</li><li>出错信息应当友好，不要<strong>威胁或责备</strong>使用。</li></ol></li><li>系统还应该提供错误恢复和故障解决帮助⼿册。</li><li>应当尽快的进行校验(检查用户名重复)</li></ol><h2 id="易记性设计">易记性设计</h2><p><img src="https://s2.loli.net/2022/04/25/x1vfliI5rq2wa9n.png"></p><ol type="1"><li>减少短期记忆的负担</li><li>使用逐层递进的方式展示信息</li><li>使用直观的快捷方式</li><li>设置有意义的默认值</li></ol><h2 id="可视化设计要点">可视化设计要点</h2><ol type="1"><li>按照任务模型设计界面隐喻，同时不要把软件系统的内部构造机制暴露给用户</li><li>可视化设计还应该基于界面隐喻，尽可能地把功能和任务细节表现出来。</li></ol><h1 id="人机交互设计过程">人机交互设计过程</h1><h2 id="机交互设计过程">⼈机交互设计过程</h2><p><img src="https://s2.loli.net/2022/04/25/rITbXfhEUQMzejw.png"></p><ol type="1"><li>导航设计:建立多次交互之间的逻辑衔接结构</li><li>页面设计:设计交互中的具体界面的细节</li><li>页面原型化:使用界面原型工具</li><li>页面的评估与修改:用户进行评估</li></ol><h2 id="对话结构图">对话结构图</h2><p><img src="https://s2.loli.net/2022/04/25/S1g745KfXiLMD6k.png"></p><h2 id="页面设计">页面设计</h2><p><img src="https://s2.loli.net/2022/04/25/TCPonOhisL8bWjw.png"></p><h2 id="原型化界面">原型化界面</h2><p><img src="https://s2.loli.net/2022/04/25/8PEwkjDU6NlqJao.png"></p><h1 id="gui设计">GUI设计</h1><ol type="1"><li>关键点</li><li>常见的GUI元素</li><li>设计你的GUI</li><li>创建你的GUI</li><li>保证实用性</li><li>保证可行性</li></ol><h2 id="在建立有效的gui方面的关键点">在建立有效的GUI方面的关键点</h2><ol type="1"><li>在所有阶段吸引用户</li><li>去看看别人怎么做的</li><li>知道并且在你知道的限制内工作完成</li><li>保证你的GUI是可以使用的并且可行的</li></ol><h2 id="常见的gui元素">常见的GUI元素</h2><ol type="1"><li>介绍和支持信息</li><li>获取内容的设施</li><li>主要收藏内容</li><li>扩展特点</li></ol><h3 id="欢迎和支持信息">欢迎和支持信息</h3><ol type="1"><li>欢迎：通常情况下，彩色的"初始"页面反映了馆藏的某些内容</li><li>收藏的相关信息：谁生产的，它的范围，有时是它的制造方式</li><li>帮助信息：如何使用资源</li><li>联系信息：如何与负责资源的人取得联系</li><li>权利信息或使用条款：有关所有权，版权和用户义务的信息</li></ol><h2 id="查找内容的设施">查找内容的设施</h2><ol type="1"><li>浏览信息的方式：用户可以通过单击超链接在集合中导航</li><li>查找信息的方式：用户可以在其中输入搜索查询并查看结果</li></ol><h2 id="主要收藏内容">主要收藏内容</h2><ol type="1"><li>总结页：提供浏览或搜索结果的概述，通常带有缩略图</li><li>细节页：具有屏幕大小的图像，视频或音频播放器以及完整的元数据</li></ol><h2 id="扩展功能">扩展功能</h2><ol type="1"><li>能够查看更大尺寸的数字图像：通常通过缩放</li><li>可以观看不同尺寸的视频流：取决于网络带宽</li><li>选择下载文件：到本地硬盘以供以后使用</li><li>嵌入文件的选项：用户将数字视频剪辑嵌入到另一个在线环境中</li><li>能够"标记"文件以供以后参考：通常称为"相册"或"收藏夹"</li><li>能够对图像，视频或音频文件进行注释或评论：供个人使用或公开展示的标签</li></ol><h2 id="规划您的gui">规划您的GUI</h2><ol type="1"><li>您的用户GUI是首先要考虑的事情-不是最后一件！</li><li>让您的用户参与其GUI的设计</li><li>找出别人做了什么或正在做什么</li></ol><h2 id="建立您的gui">建立您的GUI</h2><ol type="1"><li>使用"货架"解决方案</li><li>自己动手GUI</li><li>组合解决方案</li></ol><h2 id="检查列表">检查列表</h2><h3 id="数据输入界面">数据输入界面</h3><ol type="1"><li>您是否可以自定义数据输入界面以改善您的编目工作流(例如，重命名或重新排序字段，设置模板或下拉列表，从不使用的字段中删除)？</li><li>还有其他功能可以提高生产力或准确性吗(例如键盘快捷键，制表键，自动单词补全，拼写检查，数据验证)？</li><li>可以放大字体或更改颜色组合吗？</li></ol><h3 id="可定制的视觉设计">可定制的视觉设计</h3><ol type="1"><li>您可以添加自己的图形和文本以使其外观和感觉与网站的其余部分一样吗？</li><li>它在不同的Web浏览器和操作系统上是否都能正常工作并且看起来不错？</li></ol><h3 id="搜索和检索界面">搜索和检索界面</h3><ol type="1"><li>您可以自定义搜索或浏览界面以更好地适合您的用户和收藏吗？</li><li>有高级搜索选项吗？</li><li>搜索结果显示良好吗？</li></ol><h3 id="附加的用户功能">附加的用户功能</h3><ol type="1"><li>一些系统具有额外的功能，例如使用户能够收集和注释自己的选择，对项目进行分组的能力等。</li></ol><h3 id="控制用户访问">控制用户访问</h3><ol type="1"><li>您可以将集合的一部分限制为特定用户或用户组吗？</li><li>您能否根据用户提供不同的功能或功能级别或详细信息？</li><li>是否有数字版权管理(DRM)功能，例如自动水印？</li></ol><h3 id="与其他集合的互操作性">与其他集合的互操作性</h3><ol type="1"><li>是否支持链接内容和元数据？</li><li>用户可以搜索集合吗？</li></ol><h2 id="确保可用性">确保可用性</h2><ol type="1"><li>ISO9241：视觉显示终端(VDT)的人机工程学要求，特别是第11部分：可用性指南(1998)</li><li>ISO 13407：以人为本的交互式系统设计过程(1999年)</li></ol><h2 id="评估您的gui">评估您的GUI</h2><ol type="1"><li><strong>实际用户的可用性测试</strong>。向典型用户提供一些任务以执行并记录他们的工作以及对资源的看法。这可能涉及观察用户的行为并记下他们的导航方式。</li><li>您或者专家的可用性评估。他们可能会使用正式的准则，清单或问题(例如"可用性检查"或"启发式评估")，也可能会涉及扮演特定用户类型的角色("认知演练")。</li><li>收集用户反馈。这些方法涉及在用户使用资源后寻求用户的反馈。常见且简便的方法是<strong>调查用户</strong>，但<strong>访谈和焦点</strong>小组可能会提供更丰富的信息。</li><li>使用情况记录。许多有用的信息由用于传递资源的服务器或软件自动记录。通过分析用户访问了哪些页面以及他们的搜索成功程度，可以构建资源可用性的图景。</li></ol><h2 id="为可用性而设计">为可用性而设计</h2><ol type="1"><li>看竞争对手的设计。让一些典型的最终用户评估与您正在开发的资源相似的资源；并告诉您他们对他们的喜好。</li><li>卡分类和标签。要求用户以最有意义的方式组织和标记您的内容和界面。不同的用户会提出不同的解决方案，但是这种方法可能会提供一些有用且令人惊讶的想法。</li><li>原型。要求用户评估资源的模型和模型。这些可以在纸上或屏幕上创建，并且可以包括真实内容或虚拟内容。</li></ol><h2 id="开发高质量和可用接口的过程iso-13407">开发高质量和可用接口的过程(ISO13407)</h2><ol type="1"><li>指定使用环境。了解谁将使用资源以及他们将如何使用它(例如，他们将使用哪个浏览器访问资源？)。</li><li>指定用户和组织要求。列出必须支持的任务(例如，搜索视频)以及一些可衡量的目标，以了解如何有效，有效和令人满意地执行这些任务(例如，"在70％的搜索中找到视频，两次单击即可获得90％的满意度")。</li><li>产生设计解决方案。设计资源以满足第2步中确定的要求。</li><li>根据用户要求评估设计。检查开发是否确实符合您在先前步骤中确定的要求和目标。</li></ol><h2 id="确保可访问性">确保可访问性</h2><ol type="1"><li>考虑无障碍性的法律义务</li><li>无障碍不仅是残疾人的问题</li><li>努力做到灵活</li><li>开发在线收藏时要考虑的一些事情</li></ol><h2 id="开发在线收藏夹时要考虑的一些事情">开发在线收藏夹时要考虑的一些事情</h2><h3 id="接口">接口</h3><ol type="1"><li>可以通过各种设备和浏览器访问该界面吗？</li><li>用户是否可以更改颜色和字体大小？</li><li>是否使用样式表来格式化资源(而不是框架，表格或图形)？所有说明都写清楚吗？</li><li>文字信息是否以文字形式显示(而不只是文字图片)？</li></ol><h3 id="导航">导航</h3><ol type="1"><li>是否总是清楚您在哪里以及可以去哪里？</li><li>是否清楚地标识了超链接并以文本形式(而不是仅图形形式)提供超链接？</li><li>用户能否完全控制其导航和资源使用(例如，暂停任何视频或声音元素)？</li></ol><h3 id="搜索和检索">搜索和检索。</h3><ol type="1"><li>用户可以通过键盘访问搜索表单(还是取决于鼠标)？</li><li>搜索和结果是否以HTML或XML(或嵌入到其他应用程序，如Flash或Java)中显示？</li></ol><h3 id="文件的尺寸和大小">文件的尺寸和大小</h3><ol type="1"><li>是否有满足不同需求的图像/视频尺寸范围(尺寸和文件尺寸)？</li><li>当用户将要访问很大的文件时，用户是否知道？</li><li>是否可以详细查看图像(大图像，图像的放大部分或缩放功能)？</li></ol><h3 id="文件说明">文件说明</h3><ol type="1"><li>是否有所有视觉资源的文字说明？</li><li>是否有音频和视频文件的抄录？</li><li>在书写页面已被数字化的情况下，是否存在可搜索的等效文本？</li></ol><h2 id="黄金法则">黄金法则</h2><ol type="1"><li>让用户掌控一切</li><li>减少用户的内存负载</li><li>始终如一</li></ol><h2 id="十条原则">十条原则</h2><ol type="1"><li>紧凑而自然的对话</li><li>设计图和颜色</li><li>简约就足够了</li><li>使用用户语言</li><li>用户所需的最小内存</li><li>一致的</li><li>反馈</li><li>识别退出清除</li><li>捷径</li><li>良好的错误讯息</li><li>避免错误</li><li>帮助和文件</li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
          <category> 软件工程与计算2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
            <tag> 人机交互设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二维凸包（Andrew算法)</title>
      <link href="/2022/04/23/%E4%BA%8C%E7%BB%B4%E5%87%B8%E5%8C%85%EF%BC%88Andrew%E7%AE%97%E6%B3%95/"/>
      <url>/2022/04/23/%E4%BA%8C%E7%BB%B4%E5%87%B8%E5%8C%85%EF%BC%88Andrew%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="二维凸包andrew-算法">二维凸包（Andrew 算法）</h1><p>Andrew算法正是用于求解凸包上的所有点（围成所有点的最小周长），其算法逻辑将凸包分为「上凸壳」和「下凸壳」，并分别画出（蓝色分割线将凸包分为两部分）：</p><p><img src="https://s2.loli.net/2022/04/28/NaG84xCcw1KtXYg.png"></p><p>基本流程为：</p><p>对所有点进行双关键字排序，先根据 x 坐标排升序，后根据 y 排升序； 根据x排升序的目的，是为了我们能够往一个方向画出凸包边缘（从左往后画出一半凸壳，从右往左画出另外一半），而将y 升序目的是可以确保一旦我们现在从 a 到 b 进行连线，那么 a 到 b之间的所有点能够确保被围住；</p><p>使用栈来维护所有凸包上的点，或者说凸包上的边，会更为准确，凸包起点元素会在栈中出现两次（首尾），因此更为准确的描述应该是使用栈维护凸包的所有的边，栈中相邻元素代表凸包上的一条边；</p><p>分别「从前往后」和「从后往前」处理排序好的所有点，来分别画出凸包的上下两部分，根据画的是第一部分还是第二部分，维护栈内元的处理逻辑稍有不同：</p><ol type="a"><li>画的是凸包的第一部分：</li></ol><p>若栈内元素少于 22个，组成一条线至少需要两个点，说明此时第一条边都还没画出，直接将元素添加到栈中；</p><p>若栈内元素不少于 22个，考虑是否要将栈顶的边删掉（由栈顶前两个元素组成的边）假设栈顶元素为b，栈顶元素的下一位为 a，即栈顶存在一条 a 到 b 的边，当前处理到的点为c，此时我们根据 ac 边是否在 ab 边的时针方向来决定是否要将 ab边去掉：</p><p><img src="https://s2.loli.net/2022/04/28/8zuiDUtyokeOGNj.png"></p><p>按照上述逻辑处理完所有点，凸包第一部分的点（边）都存在于栈中。</p><ol start="2" type="a"><li>画的是凸包的第二部分：逻辑同理，唯一需要注意的是，第一部分的凸包边我们不能删去，假定处理完第一部分凸包，我们栈内有m 个元素，我们需要将上述「栈顶元素不少于 22个」的逻辑替换为「栈顶元素大于 m个」，同时已参与到凸包第一部分的点，不能再考虑，因此需要额外使用一个 vis数组来记录使用过的点。</li></ol><p>一些细节，为了方便取得栈顶的前两位元素，我们使用数组实现栈，stk代表栈容器，tp 代表栈顶元素下标。</p><p>正如刚刚讲到，起点会被入栈两次（对应第一条边和最后一条边），因此输出方案时，栈顶和栈底我们只选其一即可。</p><h1 id="更多">更多</h1><p><a href="https://leetcode-cn.com/problems/erect-the-fence/solution/by-ac_oier-4xuu/">【宫水三叶】二维凸包模板题- 安装栅栏 - 力扣（LeetCode） (leetcode-cn.com)</a></p><h1 id="first">First</h1><p>首先先按照x坐标大小或y坐标大小进行排序（如果x坐标一样，y坐标就从小到大排序<strong>或</strong>如果y坐标一样那么x坐标就从小到大排序）</p><h1 id="second">Second</h1><p>然后进入程序的主干部分，先说一下Andrew主干的大体思路，我们<strong>分两次来求这个凸包</strong>，先从<strong>左到右一遍</strong>，再从<strong>右到左一遍</strong>（或先从下到上一遍，再从上到下一遍）首先我们一定要明白<strong>第n-1个点一定会在第一遍时进入凸包栈内</strong>（看了上面链接的朋友都应该知道这个栈是如何操作的，这里不再赘述）（因为n个点是从0n-1），所以第二遍的时候不必从n-1开始，从n-20开始就可以了（代码上会有体现）然后就完了！</p><h2 id="参考">参考</h2><p><a href="https://www.cnblogs.com/wuwangchuxin0924/p/6223152.html">计算几何--凸包总结- 勿忘初心0924 - 博客园 (cnblogs.com)</a></p><h1 id="现在我们来详细讲一下如何实现second的操作">现在我们来详细讲一下如何实现Second的操作</h1><p>我们要实现找凸包，那么就必须找到最外层的点，这里就要使用叉积进行判断（向量a叉向量b=a.x×b.y-b.x×a.y）<strong>如果为正a在b的右边反之在左边</strong>（题目中因为我们只能定义一个基准坐标系，所以为了实现这个功能我们就必须找参照点，参照点作为临时原点）代码中xmult会体现。</p><p>然后就差不多了！</p><p>下面就是代码了：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span>{</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(point a,point b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(a.y==b.y&amp;&amp;a.x&lt;b.x)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a.y&lt;b.y) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">dis</span><span class="params">(point a,point b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sqrt</span>((a.x-b.x)*(a.x-b.x)+(b.y-a.y)*(b.y-a.y));</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">xcross</span><span class="params">(point a,point b,point c)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> (a.x-c.x)*(b.y-c.y)&gt;=(b.x-c.x)*(a.y-c.y);</span><br><span class="line">}</span><br><span class="line">point node[<span class="number">100005</span>];</span><br><span class="line"><span class="type">int</span> num[<span class="number">100005</span>];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;node[i].x,&amp;node[i].y);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">sort</span>(node,node+n,cmp);</span><br><span class="line">num[<span class="number">0</span>]=<span class="number">0</span>; num[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> top=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;n;++i)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">while</span>(top&gt;<span class="number">1</span>&amp;&amp;<span class="built_in">xcross</span>(node[i],node[num[top]],node[num[top<span class="number">-1</span>]]))</span><br><span class="line">top--;</span><br><span class="line">top++;</span><br><span class="line">num[top]=i;</span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> basic=top;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-2</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">while</span>(top&gt;basic&amp;&amp;<span class="built_in">xcross</span>(node[i],node[num[top]],node[num[top<span class="number">-1</span>]]))</span><br><span class="line">top--;</span><br><span class="line">top++;</span><br><span class="line">num[top]=i;</span><br><span class="line">}</span><br><span class="line"><span class="type">double</span> s;</span><br><span class="line">s=<span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=top;++i)</span><br><span class="line">{</span><br><span class="line">s+=<span class="built_in">dis</span>(node[num[i<span class="number">-1</span>]],node[num[i]]);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.1lf"</span>,s);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h1 id="更多-1">更多</h1><p><a href="https://www.cnblogs.com/mudrobot/p/13330937.html">Andrew算法（我确实不懂Graham）- Mudrobot - 博客园 (cnblogs.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> 凸包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++OOP基础</title>
      <link href="/2022/04/22/C-OOP%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/04/22/C-OOP%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="c-为什么选择oop">C++ 为什么选择OOP</h2><p>OOP是Object Oriented Program</p><ol type="1"><li>潘敏学老师邮箱:mxp@nju.edu.cn</li><li>不封装存在很大的安全隐患(数据暴露，可以被直接修改)</li><li>不符合数据类型的定义,使用封装实现OOP</li></ol><h1 id="non-oo-solution-非面向对象的解决方案">1. non-OO Solution非面向对象的解决方案</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//non-OO Solution</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STACK_SIZE 00</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Stack</span>{</span><br><span class="line">    <span class="type">int</span> top;</span><br><span class="line">    <span class="type">int</span> buffer[STACK_SIZE];</span><br><span class="line">};</span><br><span class="line"><span class="comment">//push和Stack是相关的，但是不是显式相关</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">push</span><span class="params">(Stack &amp;s, <span class="type">int</span> i)</span></span>{</span><br><span class="line">    <span class="keyword">if</span>(s.top == STACK_SIZE - <span class="number">1</span>) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Stack is overflow.\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        s.top++;</span><br><span class="line">        s.buffer[s.top] = i;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">pop</span><span class="params">(Stack &amp;s, <span class="type">int</span> &amp;i)</span></span>{</span><br><span class="line">    <span class="keyword">if</span> (s.top == <span class="number">-1</span>){</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Stack is empty.\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        i = s.buffer[s.top]; </span><br><span class="line">        s.top--;         </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    Stack st1, st2;</span><br><span class="line">    st1.top = <span class="number">-1</span>;<span class="comment">//安全隐患</span></span><br><span class="line">    st2.top = <span class="number">-1</span>;<span class="comment">//安全隐患</span></span><br><span class="line">    <span class="type">int</span>  x; </span><br><span class="line">    <span class="built_in">push</span>(st1,<span class="number">12</span>);  </span><br><span class="line">    <span class="built_in">pop</span>(st1,x);</span><br><span class="line">    <span class="comment">//可以直接操控其中的数据</span></span><br><span class="line">    st1.buffer[<span class="number">2</span>] = <span class="number">-1</span>;<span class="comment">//违背ADT</span></span><br><span class="line">    st2.buffer[<span class="number">2</span>]++;   <span class="comment">//违背ADT</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><h1 id="oo-solution-面向对象的解决方案">2. OO Solution面向对象的解决方案</h1><ol type="1"><li>cfront:用来进行检查一些访问权限的问题。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STACK_SIZE 100</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span></span><br><span class="line">{   <span class="keyword">private</span>: </span><br><span class="line">        <span class="type">int</span> top;</span><br><span class="line">        <span class="type">int</span> buffer[STACK_SIZE];</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Stack</span>(){ top = <span class="number">-1</span>; }<span class="comment">//定义的构造方法</span></span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">push</span><span class="params">(<span class="type">int</span> i)</span></span>;</span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">pop</span><span class="params">(<span class="type">int</span>&amp; i)</span></span>;</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Stack::push</span><span class="params">(<span class="type">int</span> i)</span></span>;{</span><br><span class="line">    <span class="keyword">if</span> (top == STACK_SIZE<span class="number">-1</span>) {</span><br><span class="line">        cout &lt;&lt; <span class="string">"Stack is overflow.\n"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        top++;</span><br><span class="line">        buffer[top] = i;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Stack::pop</span><span class="params">(<span class="type">int</span>&amp; i)</span></span>{</span><br><span class="line">    <span class="keyword">if</span> (top == <span class="number">-1</span>) {</span><br><span class="line">        cout &lt;&lt; <span class="string">"Stack is empty.\n"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }<span class="keyword">else</span> {</span><br><span class="line">        i = buffer[top];           </span><br><span class="line">        top--;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{    Stack st1,st2;</span><br><span class="line">     <span class="type">int</span> x;</span><br><span class="line">     st1.<span class="built_in">push</span>(<span class="number">12</span>); </span><br><span class="line">     st1.<span class="built_in">pop</span>(x);</span><br><span class="line">     <span class="comment">//st1.buffer[2] = -1无法操作</span></span><br><span class="line">     <span class="comment">//cfront用来检查</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><ol type="1"><li>实际上,程序存储的时候并没有发生变化</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Stack</span>{   </span><br><span class="line">    <span class="type">int</span> top;</span><br><span class="line">    <span class="type">int</span> buffer[STACK_SIZE];</span><br><span class="line">};</span><br><span class="line"><span class="comment">//this是指向自己的指针</span></span><br><span class="line"><span class="comment">//对象的函数至少都持有一个this</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">push</span><span class="params">(Stack *<span class="type">const</span> <span class="keyword">this</span>,<span class="type">int</span> i)</span></span>;{</span><br><span class="line">    <span class="keyword">if</span> (top == STACK_SIZE<span class="number">-1</span>) {</span><br><span class="line">        cout &lt;&lt; <span class="string">"Stack is overflow.\n"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        top++;</span><br><span class="line">        buffer[top] = i;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">pop</span><span class="params">(Stack *<span class="type">const</span> <span class="keyword">this</span>,<span class="type">int</span>&amp; i)</span></span>{</span><br><span class="line">    <span class="keyword">if</span> (top == <span class="number">-1</span>) {</span><br><span class="line">        cout &lt;&lt; <span class="string">"Stack is empty.\n"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }<span class="keyword">else</span> {</span><br><span class="line">        i = buffer[top];           </span><br><span class="line">        top--;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span>{   </span><br><span class="line">    Stack st1, st2;</span><br><span class="line">    st1.top = <span class="number">-1</span>;</span><br><span class="line">    st2.top = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="built_in">push</span>(st1,<span class="number">12</span>);</span><br><span class="line">    <span class="built_in">pop</span>(st1,x);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h1 id="oop-面向对象">3. OOP 面向对象</h1><ol type="1"><li>Concepts 面向对象概念<ol type="1"><li>Program = Object<sub>1</sub> + Object<sub>2</sub> + ... +Object<sub>n</sub></li><li>对象:数据 + 操作</li><li>信息:函数调用</li><li>类</li></ol></li><li>Classify 分类<ol type="1"><li>Object-Oriented 面向对象</li><li>Object-Based(Ada:基于对象的语言)<ul><li>Without Inheritance</li></ul></li></ol></li></ol><h1 id="oop评价标准">4. OOP评价标准</h1><ol type="1"><li>高扩展性</li><li>质量<ul><li>外部评价指标：正确性、效率、健壮性、可靠性、可用性、可重用性</li><li>内部评价指标：可读性、可维护性、可移植性</li></ul></li></ol><h1 id="encapsulation封装">ENCAPSULATION(封装)</h1><p>具体到markdown文件中</p><h1 id="对象类型的判断">对象类型的判断</h1><h2 id="方法一运行时判断">方法一:运行时判断</h2><ol type="1"><li>使用if..else</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">typeid</span>(i) == <span class="built_in">typeid</span>(<span class="type">int</span>) )</span><br><span class="line">    cout &lt;&lt; <span class="string">"i is int"</span> &lt;&lt; endl ;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    cout &lt;&lt; <span class="string">"i is not int"</span> &lt;&lt; endl ;</span><br></pre></td></tr></table></figure><h2 id="方法二编译时判断">方法二:编译时判断</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(T t )</span></span>{</span><br><span class="line">    cout &lt;&lt; <span class="string">"i is not int"</span> &lt;&lt; endl ;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="type">void</span> <span class="built_in">func</span>&lt;<span class="type">int</span>&gt;(<span class="type">int</span> i){<span class="comment">//特化</span></span><br><span class="line">    cout &lt;&lt; <span class="string">"i is int"</span> &lt;&lt; endl ;</span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="built_in">func</span>(i)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C++面向对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++友元</title>
      <link href="/2022/04/22/C-%E5%8F%8B%E5%85%83/"/>
      <url>/2022/04/22/C-%E5%8F%8B%E5%85%83/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么要使用友元"><strong>为什么要使用友元？</strong></h1><p>通常对于普通函数来说，要访问类的保护成员是不可能的，如果想这么做那么必须把类的成员都生命成为public( 共用的)，然而这做带来的问题遍是任何外部函数都可以毫无约束的访问它操作它；另一种方法是利用C++ 的 friend修饰符，可以让一些你设定的函数能够对这些私有或保护数据进行操作。</p><h1 id="使用友元有哪些缺点"><strong>使用友元有哪些缺点？</strong></h1><p>使用友元的同时也破坏了类的封装特性，这即是友元最大的缺点。当对外声明为友元后，你的所有细节全部都暴露给了对方。</p><p>就好像你告诉你朋友你很有钱这个密秘，进而又把你有多少钱，多少古董，多少家产，多少小妾等等所有的家底全给他说了</p><h1 id="普通函数做为类的一个友元函数"><strong>普通函数做为类的一个友元函数</strong></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream &gt;</span>    </span></span><br><span class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span>  std;  </span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">MyClass</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span> :    </span><br><span class="line">    <span class="built_in">MyClass</span>(string name)    </span><br><span class="line">    {    </span><br><span class="line">        m_name = name;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//声明一个友元函数</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span>  <span class="type">void</span>  <span class="title">Display</span><span class="params">(MyClass &amp;mycalss)</span></span>;</span><br><span class="line"> </span><br><span class="line">Protected:</span><br><span class="line">    string  m_name;</span><br><span class="line">};</span><br><span class="line"> </span><br><span class="line"><span class="comment">//定义这个友元函数</span></span><br><span class="line"><span class="comment">//写成 void MyClass::Display(MyClass &amp;mycalss)  </span></span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">Display</span><span class="params">(MyClass &amp;mycalss)</span></span></span><br><span class="line"><span class="function"></span>{  </span><br><span class="line">    cout &lt;&lt; <span class="string">"Access Protected data : "</span>&lt;&lt; mycalss.m_name &lt;&lt; endl;  </span><br><span class="line">}  </span><br><span class="line"> </span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">MyClass <span class="title">test</span><span class="params">(<span class="string">"Class A"</span>)</span></span>;  </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Display</span>(test);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="说明">说明：</h2><ol type="1"><li><p>声明这个友元函数可以在任何地方，可以在 public、protected当然也可以在 privated 里。</p></li><li><p>在这个友元函数里，你可以访问这个类里的所有的成员，所有的成员函数，而不管它是不是public、protected 或 privated 的。</p></li><li><p>定义友元函数时，不能写成 void MyClass::Display(MyClass&amp;mycalss) 这点要注意。</p></li></ol><h1 id="一个普通函数可以是多个类的友元函数"><strong>一个普通函数可以是多个类的友元函数</strong></h1><p>在每个类里面都有一个友元函数的声明，声明可以有多个，但定义只能有一个。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream &gt;</span>    </span></span><br><span class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span>  std;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass_B</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass_A</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line">    <span class="built_in">MyClass_A</span>(string name)    </span><br><span class="line">    {    </span><br><span class="line">        m_name = name;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//声明一个友元函数</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">Display</span><span class="params">(MyClass_A &amp;myA, MyClass_B &amp;myB)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string m_name;</span><br><span class="line">};</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass_B</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line">    <span class="built_in">MyClass_B</span>(string name)    </span><br><span class="line">    {    </span><br><span class="line">        m_name = name;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//注意，又声明一个友元函数</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">Display</span><span class="params">(MyClass_A &amp;myA, MyClass_B &amp;myB)</span></span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string m_name;</span><br><span class="line">};</span><br><span class="line"> </span><br><span class="line"><span class="comment">//定义这个友元函数</span></span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">Display</span><span class="params">(MyClass_A &amp;myA, MyClass_B &amp;myB)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    cout &lt;&lt; <span class="string">"MyClass A : "</span>&lt;&lt; myA.m_name &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">"MyClass B : "</span>&lt;&lt; myB.m_name &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">MyClass_A <span class="title">testA</span><span class="params">(<span class="string">"Class A"</span>)</span></span>;  </span><br><span class="line">    <span class="function">MyClass_B <span class="title">testB</span><span class="params">(<span class="string">"Class A"</span>)</span></span>;  </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Display</span>(testA, testB);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>同样的，这个友元函数，可以访问这两个类的所有元素。</p><h1 id="一个类的成员函数也可以是另一个类的友元"><strong>一个类的成员函数也可以是另一个类的友元</strong></h1><p>从而可以使得一个类的成员函数可以操作另一个类的数据成员</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream &gt;</span>    </span></span><br><span class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span>  std;  </span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass_B</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//A 类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass_A</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line">    <span class="built_in">MyClass_A</span>(string name)    </span><br><span class="line">    {    </span><br><span class="line">        m_name = name;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Function</span><span class="params">(MyClass_B &amp;myB)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string m_name;</span><br><span class="line">};</span><br><span class="line"> </span><br><span class="line"><span class="comment">//B 类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass_B</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line">    <span class="built_in">MyClass_B</span>(string name)</span><br><span class="line">    {</span><br><span class="line">        m_name = name;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//友元函数声明，注意和普通函数的区别</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">MyClass_A::Function</span><span class="params">(MyClass_B &amp;myB)</span></span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string m_name;</span><br><span class="line">};</span><br><span class="line"> </span><br><span class="line"><span class="comment">//函数定义</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyClass_A::Function</span><span class="params">(MyClass_B &amp;myB)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    cout&lt;&lt;myB.m_name&lt;&lt;endl;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">MyClass_A <span class="title">testA</span><span class="params">(<span class="string">"Class A"</span>)</span></span>;  </span><br><span class="line">    <span class="function">MyClass_B <span class="title">testB</span><span class="params">(<span class="string">"Class B"</span>)</span></span>;  </span><br><span class="line">    </span><br><span class="line">    testA.<span class="built_in">Function</span>(testB);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>我们可以看到，B 类，对 A类其中的一个函数开放，其结果是这个函数可以访问 B 类的所有元素。</p><h1 id="整个类也可以是另一个类的友元"><strong>整个类也可以是另一个类的友元</strong></h1><p>友类的每个成员函数都可以访问另一个类的所有成员。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream &gt;</span>    </span></span><br><span class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span>  std;  </span><br><span class="line"> </span><br><span class="line"><span class="comment">//类 A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass_B</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass_A</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line">    <span class="built_in">MyClass_A</span>(string name)    </span><br><span class="line">    {    </span><br><span class="line">        m_name = name;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//友元类声明</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">MyClass_B</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string m_name;</span><br><span class="line">};</span><br><span class="line"> </span><br><span class="line"><span class="comment">//类 B</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass_B</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line">    <span class="built_in">MyClass_B</span>(string name)</span><br><span class="line">    {</span><br><span class="line">        m_name = name;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Display</span><span class="params">(MyClass_A &amp;myA)</span></span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string m_name;</span><br><span class="line">};</span><br><span class="line"> </span><br><span class="line"><span class="comment">//成员函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyClass_B::Display</span><span class="params">(MyClass_A &amp;myA)</span></span></span><br><span class="line"><span class="function"></span>{  </span><br><span class="line">    cout&lt;&lt;myA.m_name&lt;&lt;endl; <span class="comment">//访问A的私有成员</span></span><br><span class="line"> </span><br><span class="line">    <span class="function">MyClass_A <span class="title">test</span><span class="params">(<span class="string">"test"</span>)</span></span>;</span><br><span class="line"> </span><br><span class="line">    cout&lt;&lt;test.m_name&lt;&lt;endl; <span class="comment">//好像A的所有元素在B里都存在一样</span></span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">MyClass_A <span class="title">testA</span><span class="params">(<span class="string">"Class A"</span>)</span></span>;  </span><br><span class="line">    <span class="function">MyClass_B <span class="title">testB</span><span class="params">(<span class="string">"Class B"</span>)</span></span>;  </span><br><span class="line">    </span><br><span class="line">    testB.<span class="built_in">Display</span>(testA);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>此时B可以访问A的所有元素，就好像A在B里面一样。</p><h1 id="总结"><strong>总结</strong></h1><p>简单的说就是：<strong>声明一个友元函数或者是友元类，就是要把自己完全暴露给对方</strong>。</p><h1 id="注意">注意</h1><ol type="1"><li>友元关系不能被继承。</li><li>友元关系是单向的，不具有交换性。</li><li>友元关系具有非传递性。</li></ol><h2 id="更多">更多</h2><p><a href="https://blog.csdn.net/lwbeyond/article/details/7591415">(12条消息)详解C++ friend关键字_lwbeyond的博客-CSDN博客_c++ friend</a></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C++面向对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++虚函数</title>
      <link href="/2022/04/22/C-%E8%99%9A%E5%87%BD%E6%95%B0/"/>
      <url>/2022/04/22/C-%E8%99%9A%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="虚函数">虚函数</h1><ol type="1"><li>一个类只有一个虚函数表。</li><li>实现多态的函数</li></ol><p><strong>什么是虚函数:</strong></p><p>　　虚函数是指一个类中你希望<strong>重载的成员函数</strong>，当你用一个 基类指针或引用 指向一个继承类对象的时候，调用一个虚函数时,实际调用的是<strong>继承类的版本</strong>。　　——摘自MSDN</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span></span><br><span class="line">{    </span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">     </span><br><span class="line">     <span class="type">char</span> data[<span class="number">20</span>];</span><br><span class="line">     <span class="function"><span class="type">void</span> <span class="title">Function1</span><span class="params">()</span></span>;    </span><br><span class="line">     <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Function2</span><span class="params">()</span></span>;   <span class="comment">// 这里声明Function2是虚函数</span></span><br><span class="line">     </span><br><span class="line"> }parent;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">Parent::Function1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>{</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"This is parent,function1\n"</span>);</span><br><span class="line"> }</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">Parent::Function2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>{</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"This is parent,function2\n"</span>);</span><br><span class="line"> }</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">Child</span>:<span class="keyword">public</span> Parent</span><br><span class="line"> {</span><br><span class="line">     <span class="function"><span class="type">void</span> <span class="title">Function1</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function"><span class="type">void</span> <span class="title">Function2</span><span class="params">()</span></span>;</span><br><span class="line">     </span><br><span class="line"> } child;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">Child::Function1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>{</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"This is child,function1\n"</span>);</span><br><span class="line"> }</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">Child::Function2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function"> </span>{</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"This is child,function2\n"</span>);</span><br><span class="line"> }</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"> </span>{</span><br><span class="line">     Parent *p;  　　　　　<span class="comment">// 定义一个基类指针</span></span><br><span class="line">     <span class="keyword">if</span>(_getch()==<span class="string">'c'</span>)    <span class="comment">// 如果输入一个小写字母c    </span></span><br><span class="line">         p=&amp;child;        <span class="comment">// 指向继承类对象</span></span><br><span class="line">     <span class="keyword">else</span>    </span><br><span class="line">         p=&amp;parent;       <span class="comment">// 否则指向基类对象</span></span><br><span class="line">     p-&gt;<span class="built_in">Function1</span>();  　　 <span class="comment">// 这里在编译时会直接给出Parent::Function1()的入口地址。    </span></span><br><span class="line">     p-&gt;<span class="built_in">Function2</span>();   　　<span class="comment">// 注意这里，执行的是哪一个Function2？</span></span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line"> }</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用任意版本的Visual C++或Borland C++编译并运行，输入一个小写字母c，得到下面的结果</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> This is parent,function1</span><br><span class="line"><span class="number">2</span> This is child,function2</span><br></pre></td></tr></table></figure><p><strong>为什么会有第一行的结果呢？</strong>因为我们是用一个Parent类的指针调用函数Fuction1()，虽然实际上这个指针指向的是Child类的对象，但编译器无法知道这一事实（直到运行的时候，程序才可以根据用户的输入判断出指针指向的对象），它只能按照调用Parent类的函数来理解并编译，所以我们看到了第一行的结果。</p><p>​那么第二行的结果又是怎么回事呢？我们注意到，Function2()函数在基类中被virtual关键字修饰，也就是说，它是一个虚函数。虚函数最关键的特点是“动态联编”，它可以在运行时判断指针指向的对象，并自动调用相应的函数</p><p><strong>如果我们在运行上面的程序时任意输入一个非c的字符，结果如下：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 This is parent,function1</span><br><span class="line">2 This is parent,function2</span><br></pre></td></tr></table></figure><p>请注意看第二行，它的结果出现了变化。程序中仅仅调用了一个Function2()函数，却可以根据用户的输入自动决定到底调用基类中的Function2还是继承类中的Function2，这就是虚函数的作用。PS:一定要注意“<strong>静态联编</strong> ”和“ <strong>动态联编</strong>”的区别；对于我来说，若没有在VC6.0中亲自去测试，凭自己的感觉，当在键盘中输入“c”时，我会觉得由于有p=&amp;child;这一句代码，我会认为结果都是：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> This is child,function1</span><br><span class="line"><span class="number">2</span> This is child,function2</span><br></pre></td></tr></table></figure><p>但是结果却是：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> This is parent,function1</span><br><span class="line"><span class="number">2</span> This is child，function2</span><br></pre></td></tr></table></figure><p>​因为虽然实际上这个指针指向的是Child类的对象，但编译器无法知道这一事实，它只能按照调用Parent类的函数来理解并编译，所以我们看到了第一行的结果。​<strong>第二行中调用了子类的function2，完全是因为virtual的功能，virtual实现了动态联编，它可以在运行时判断指针指向的对象，并自动调用相应的函数。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p=&amp;parent;  //这一句，该指针很明显的是指向父类，那么肯定调用的是父类的方法</span><br></pre></td></tr></table></figure><h1 id="类型相容">类型相容</h1><ol type="1"><li>类、类型:</li><li>类型相容:<ol type="1"><li>类型相容是指完全相同的(别名)</li><li>一个类型是另一个类型的子类型(int -&gt; long int)</li></ol></li><li>赋值相容(不会丢失信息):对于类型相同的变量才有<ol type="1"><li>如果类型相同可以直接赋值</li><li>子类型可以赋值给父类型</li></ol></li><li>问题:a和b都是类，a、b什么类型时，a =b合法(赋值相容)？B是A的子类型的时候<ul><li><code>A a; B b; class B: public A</code><ul><li>对象的身份发生变化(a和b都代表栈上对应大小的内存),B类型对象变为了A类型的对象</li><li>属于派生类的属性已不存在</li><li>将派生类对象赋值给基类对象-&gt;对象切片</li></ul></li><li><code>A a = b</code>:调用拷贝构造函数</li><li><code>const A &amp;a</code>:函数必然包含的拷贝构造函数中的参数</li><li><code>B* pb;  A* pa = pb; class B: public A</code><ul><li>因为是赋值相容的，所以可以指针赋值</li><li>这种情况类似Java</li></ul></li><li><code>B  b; A &amp; a=b; class B: public A</code>：对象身份没有发生变化(还是B)</li></ul></li><li>把派生类对象赋值给基类对象，基类的引用或指针可以引用或指向派生类对象，不严谨的说，可以说让父类指向子类</li><li>传参的时候尽量不要拷贝传参(存在对象切片问题)，而是使用引用传参。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试切片调用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>{</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">};</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>: <span class="keyword">public</span> A{</span><br><span class="line">    <span class="type">int</span> z;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">g</span><span class="params">()</span></span>;</span><br><span class="line">};</span><br><span class="line"><span class="comment">//把派生类对象赋值给基类对象</span></span><br><span class="line">A a;</span><br><span class="line">B b;</span><br><span class="line">a = b;     <span class="comment">//OK, </span></span><br><span class="line">b = a;     <span class="comment">//Error</span></span><br><span class="line">a.<span class="built_in">f</span>();     <span class="comment">//A::f()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//基类的引用或指针可以引用或指向派生类对象</span></span><br><span class="line">A &amp;r_a = b;     <span class="comment">//OK</span></span><br><span class="line">A *p_a = &amp;b;    <span class="comment">//OK</span></span><br><span class="line"></span><br><span class="line">B &amp;r_b = a;     <span class="comment">//Error</span></span><br><span class="line">B *p_b = &amp;a；   <span class="comment">//Error</span></span><br><span class="line"><span class="comment">//以下两个部分基本是一致的</span></span><br><span class="line"><span class="built_in">func1</span>(A&amp; a){a.<span class="built_in">f</span>();}</span><br><span class="line"><span class="built_in">func2</span>(A *pa){pa-&gt;<span class="built_in">f</span>();}</span><br><span class="line"><span class="built_in">func1</span>(b);<span class="comment">//A::f</span></span><br><span class="line"><span class="built_in">func2</span>(&amp;b);</span><br></pre></td></tr></table></figure><ol type="1"><li>func1(b):为什么是A的呢？<ol type="1"><li>对于B，A的版本的对应函数被隐藏</li><li>静态绑定是只看形参类型</li></ol></li></ol><h1 id="绑定时间">绑定时间</h1><ol type="1"><li>C++默认静态绑定</li></ol><h2 id="前期绑定early-binding静态绑定">前期绑定(EarlyBinding)(静态绑定)</h2><ol type="1"><li>编译时刻确定调用哪一个方法</li><li>依据对象的静态类型</li><li>效率高、灵活性差</li><li>静态绑定根据形参决定</li></ol><h2 id="动态绑定late-binding">动态绑定(Late Binding)</h2><ol type="1"><li>晚绑定是指编译器或者解释器在运行前不知道对象的类型，使用晚绑定，无需检查对象的类型，只需要检查对象是否支持特性和方法即可。</li><li>c++中晚绑定常常发生在使用<code>virtual</code>声明成员函数</li><li>运行时刻确定，依据对象的实际类型(动态)</li><li>灵活性高、<strong>效率低</strong></li><li>动态绑定函数也就是虚函数。</li><li>直到构造函数返回之后，对象方可正常使用</li><li>C++默认的都是静态绑定，Java默认的都是动态绑定</li></ol><h2 id="后期绑定的实现">后期绑定的实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>{</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="title">g</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="built_in">h</span>();<span class="comment">//h函数是默认的</span></span><br><span class="line">};</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>: <span class="keyword">public</span> A{</span><br><span class="line">    <span class="type">int</span> z;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">f</span>();</span><br><span class="line">        <span class="built_in">h</span>();</span><br><span class="line">};</span><br><span class="line">A a; B b;</span><br><span class="line">A *p;</span><br><span class="line"><span class="comment">//调用情况见图</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/27/MHE5VeudhXNbAFx.png" alt="image-20220427103411543"></p><ul><li>p-&gt;f():需要寻找a和b中的f()函数地址</li><li>如果不能明确虚函数个数，没有办法索引</li><li>虚函数表(索引表,vtable):大小可变<ul><li>首先构造基类的虚函数表</li><li>然后对派生类中的函数，如果查找了，则会覆盖对应函数来生成虚函数表</li></ul></li><li>对象内存空间中含有指针指向虚函数表</li><li><code>(**((char *)p - 4))(p):f</code>的函数调用(从虚函数表拿数据),p是参数this</li><li>空间上和时间上都付出了代价<ul><li>空间:存储虚函数表指针和虚函数表</li><li>时间:需要通过虚函数表查找对应函数地址，多调用</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>{</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>() { <span class="built_in">f</span>();}</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">g</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">h</span><span class="params">()</span></span>{</span><br><span class="line">            <span class="built_in">f</span>();</span><br><span class="line">            <span class="built_in">g</span>();</span><br><span class="line">        }</span><br><span class="line">};</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>: <span class="keyword">public</span> A</span><br><span class="line">{   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">g</span><span class="params">()</span></span>;</span><br><span class="line">};</span><br><span class="line"><span class="comment">//直到构造函数返回之后，对象方可正常使用</span></span><br><span class="line"><span class="comment">//函数调用顺序，重要考试题，依据虚函数表</span></span><br><span class="line">B b;      <span class="comment">// A::A()，A::f, B::B()</span></span><br><span class="line"><span class="comment">//为什么调用A的f而不是B的？因为名空间以及B没有构造。 </span></span><br><span class="line">A *p= &amp;b;</span><br><span class="line">p-&gt;<span class="built_in">f</span>();   <span class="comment">//B::f   </span></span><br><span class="line">p-&gt;<span class="built_in">g</span>();   <span class="comment">//A::g，g是静态绑定</span></span><br><span class="line">p-&gt;<span class="built_in">h</span>();   <span class="comment">//A::h, B::f, A::g</span></span><br></pre></td></tr></table></figure><ul><li>尽量不要在构造函数中调用虚函数</li><li>此时的虚函数就是和构造函数名空间相同</li><li>h()函数是非虚接口<ul><li>有不同的实现:调用了虚函数和非虚函数</li><li>可以替换部分的实现</li><li>可以使得非虚函数具有虚函数的特性(让全局函数具有多态:将全局函数做成非虚接口)</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>{</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span> </span>;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">g</span><span class="params">()</span> </span>;</span><br><span class="line">};</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>: <span class="keyword">public</span> A{</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(B* <span class="type">const</span> <span class="keyword">this</span>)</span> </span>{ <span class="built_in">g</span>(); }<span class="comment">//this g() this-&gt;g();</span></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">g</span><span class="params">()</span> </span>;</span><br><span class="line">};</span><br><span class="line">B b;</span><br><span class="line">A* p = &amp;b;</span><br><span class="line">p-&gt;<span class="built_in">f</span>();<span class="comment">//B::f,b.B::g</span></span><br></pre></td></tr></table></figure><ul><li>g()是静态绑定</li><li>虚函数中调用非虚函数:所有版本是和虚函数<strong>一致</strong>的</li><li>非虚函数调用虚函数:正常</li><li>虚函数要严格查表，非虚函数静态确定，对应p-&gt;h()</li><li>注意每一个函数在调用的时候都会传入一个const的this指针</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C++面向对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++类的封装</title>
      <link href="/2022/04/22/C-%E7%B1%BB%E7%9A%84%E5%B0%81%E8%A3%85/"/>
      <url>/2022/04/22/C-%E7%B1%BB%E7%9A%84%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="c-类的封装">C++ 类的封装</h1><h1 id="类">类</h1><ul><li>两种成员：<ol type="1"><li>数据</li><li>操作(函数)</li></ol></li><li>将实现和类定义分离<ol type="1"><li>头文件主要是声明</li><li>源文件:存储实现</li></ol></li><li>在链接的时候，将其他文件中的部分连接过来。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.h 存储类的头文件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TDate</span>{</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="comment">//只有函数签名</span></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">SetData</span><span class="params">(<span class="type">int</span> y,<span class="type">int</span> m ,<span class="type">int</span> d)</span></span>;</span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">IsLeapYear</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="type">int</span> year,month,day;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//a.cpp 用来存储相应的实现部分</span></span><br><span class="line"><span class="comment">//TDate::命名空间</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TDate::SetDate</span><span class="params">(<span class="type">int</span> y ,<span class="type">int</span> m ,<span class="type">int</span> d)</span></span>{</span><br><span class="line">    year = y;</span><br><span class="line">    month = m;</span><br><span class="line">    day = d;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">TDate::IsLeapYear</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">return</span> (year%<span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> !=<span class="number">0</span>)||(year % <span class="number">400</span> == <span class="number">0</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><ul><li>如果直接将函数定义直接放在头文件里，会建议compiler将其作为inline函数进行编译。</li><li>如果函数长度很长的话，反复调用的函数调用时间就会占比很小，而相反的话则会很大。</li><li>随便使用内联函数可能是的代码很烂:get和set函数我们选择使用inline方式</li><li>代码长度不超过10行，不包含for、switch等语句。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.h 不分开实现和签名</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TDate</span>{</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">SetData</span><span class="params">(<span class="type">int</span> y,<span class="type">int</span> m ,<span class="type">int</span> d)</span></span>{</span><br><span class="line">            year = y;</span><br><span class="line">            month = m;</span><br><span class="line">            day = d;</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">IsLeapYear</span><span class="params">()</span></span>{</span><br><span class="line">            <span class="keyword">return</span> (year%<span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> !=<span class="number">0</span>)||(year % <span class="number">400</span> == <span class="number">0</span>);</span><br><span class="line">        }</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="type">int</span> year,month,day;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">TDate g;<span class="comment">//声明全局对象，这个对象已经调用了构造函数，完成了分配</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    g.<span class="built_in">SetDate</span>(<span class="number">2000</span>,<span class="number">1</span>,<span class="number">1</span>); </span><br><span class="line">    TDate t;</span><br><span class="line">    t.<span class="built_in">SetDate</span>(<span class="number">2015</span>,<span class="number">11</span>,<span class="number">17</span>); </span><br><span class="line">    TDate *p = <span class="keyword">new</span> Tdate;</span><br><span class="line">    p-&gt;<span class="built_in">SetDate</span>(<span class="number">2015</span>,<span class="number">11</span>,<span class="number">17</span>);<span class="comment">//简介访问</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><h1 id="类的构造函数">类的构造函数</h1><ol type="1"><li><strong>对象的初始化</strong>(完成对象内存分配)<ol type="1"><li>为创建的对象建立标识符</li><li>为对象数据成员开辟内存空间</li><li>按照规定对成员变量进行初始化</li></ol></li><li>描述<ol type="1"><li>与类同名，无返回类型(不是void)</li><li>自动调用，不可直接调用</li><li>可重载</li><li>默认构造函数:无参数<ul><li>当类中未提供构造函数时，编译系统提供默认构造函数。</li><li>为什么要有？对于类的成员变量，默认值初始化</li><li>如果你写一个带参数，那么你必须要自己配一个没有参数的默认构造函数。</li></ul></li><li>public:可定义为private:接管对象创建</li><li>private的构造函数:单例模式，类内部的构造方法控制(可以控制类的个数)</li></ol></li><li>调用:<ol type="1"><li>自动按照参数列表来对应构造函数</li><li>具体调用方式参照底下。</li></ol></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>{</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">A</span>();</span><br><span class="line">        <span class="built_in">A</span>(<span class="type">int</span> i);</span><br><span class="line">        <span class="built_in">A</span>(<span class="type">char</span> *p);</span><br><span class="line">}</span><br><span class="line">A a1 = <span class="built_in">A</span>(<span class="number">1</span>);</span><br><span class="line"><span class="function">A <span class="title">a1</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">A a1 = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//以上都是调A(int i)</span></span><br><span class="line">A a2 = <span class="built_in">A</span>();</span><br><span class="line">A a2;</span><br><span class="line"><span class="comment">//以上都是调A()，注意：不能写成：A a2();</span></span><br><span class="line">A a3 = <span class="built_in">A</span>(<span class="string">"abcd"</span>);</span><br><span class="line"><span class="function">A <span class="title">a3</span><span class="params">(<span class="string">"abcd"</span>)</span></span>;</span><br><span class="line">A a3 = <span class="string">"abcd"</span>;</span><br><span class="line"><span class="comment">//以上都是调A(char *)</span></span><br><span class="line">A a[<span class="number">4</span>];<span class="comment">//调用a[0]、a[1]、a[2]、a[3]的A()</span></span><br><span class="line">A b[<span class="number">5</span>]={ <span class="built_in">A</span>(), <span class="built_in">A</span>(<span class="number">1</span>), <span class="built_in">A</span>(<span class="string">"abcd"</span>), <span class="number">2</span>, <span class="string">"xyz"</span>};</span><br></pre></td></tr></table></figure><h1 id="成员初始化表构造函数中变量初始化的一种方法">成员初始化表(构造函数中变量初始化的一种方法)</h1><ul><li>构造函数的补充<ol type="1"><li>构造函数:先开辟空间并赋默认值</li><li>成员初始化表:开辟空间的时候就赋值</li></ol></li><li>执行:(常量和引用的声明和定义要放在一起，只能通过这个方法来完成)<ol type="1"><li><strong>先于构造函数执行</strong></li><li><strong>按类数据成员声明次序</strong>:下面的例子中先 x 再 y 再z</li></ol></li><li><code>static const</code>:常量数字，这个是可以在类内部进行初始化(<code>static const a = 1;</code>)</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>{</span><br><span class="line">    <span class="comment">//非静态成员可以初始化</span></span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> y;</span><br><span class="line"><span class="type">int</span>&amp; z;<span class="comment">//引用</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="comment">//签名的冒号后面，用变量(值)来进行初始化，这就是初始化表</span></span><br><span class="line">    <span class="built_in">A</span>(): <span class="built_in">y</span>(<span class="number">1</span>),<span class="built_in">z</span>(x),<span class="built_in">x</span>(<span class="number">0</span>){</span><br><span class="line">            x = <span class="number">100</span>;<span class="comment">//赋值</span></span><br><span class="line">        }</span><br><span class="line">};</span><br></pre></td></tr></table></figure><ul><li>减轻Compiler负担:<ul><li>正常构造函数中赋值<code>x = 100</code>：首先对象构造的时候进行了赋值，之后再次进行了赋值，共计2次</li><li>成员初始化表的时候，只进行了赋值一次。</li></ul></li><li>初始化顺序问题:先执行p，再执行size有问题，按照字面序进行。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CString</span>{</span><br><span class="line">    <span class="type">char</span> *p; </span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="built_in">CString</span>(<span class="type">int</span> x):<span class="built_in">size</span>(x),<span class="built_in">p</span>(<span class="keyword">new</span> <span class="type">char</span>[size]){}    </span><br><span class="line">};</span><br></pre></td></tr></table></figure><ol type="1"><li><strong>在构造函数中尽量使用成员初始化表取代赋值动作</strong><ul><li>const 成员 / reference 成员 / 对象成员:为什么？，默认构造函数？</li><li>效率高:见上面</li><li>数据成员太多的时，不采用本条准则,降低可维护性</li><li>C++11之后允许在构造函数外进行初始化:避免在每个函数的成员初始化表中进行初始化。</li></ul></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> {</span><br><span class="line"><span class="type">int</span> m;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>() {</span><br><span class="line">        m = <span class="number">0</span>; cout &lt;&lt; <span class="string">"A()"</span> &lt;&lt; endl;</span><br><span class="line">    }</span><br><span class="line"><span class="built_in">A</span>(<span class="type">int</span> m1) {</span><br><span class="line">        m = m1;</span><br><span class="line">        cout &lt;&lt; <span class="string">"A(int m1)"</span> &lt;&lt; endl;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> {</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line">A a;<span class="comment">//每一次创建类都优先创建</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">B</span>(){</span><br><span class="line">            x = <span class="number">0</span>; cout &lt;&lt; <span class="string">"B()"</span> &lt;&lt; endl;</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">B</span>(<span class="type">int</span> x1){</span><br><span class="line">            x = x1;</span><br><span class="line">            cout &lt;&lt; <span class="string">"B(int x1)"</span> &lt;&lt; endl;</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">B</span>(<span class="type">int</span> x1, <span class="type">int</span> m1):<span class="built_in">a</span>(m1){</span><br><span class="line">            x = x1;</span><br><span class="line">            cout &lt;&lt; <span class="string">"B(int x1, int m1)"</span> &lt;&lt; endl;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//不能在函数体里写A的构造函数(已经调过了)</span></span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">B b1;<span class="comment">// 调用 B::B() 和 A::A()</span></span><br><span class="line">cout &lt;&lt; <span class="string">"_______________"</span> &lt;&lt; endl;</span><br><span class="line"><span class="function">B <span class="title">b2</span><span class="params">(<span class="number">1</span>)</span></span>;   <span class="comment">// 调用 B::B(int) 和 A::A()</span></span><br><span class="line">cout &lt;&lt; <span class="string">"_______________"</span> &lt;&lt; endl;</span><br><span class="line"><span class="function">B <span class="title">b3</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>; <span class="comment">// 调用 B::B(int,int) 和 A::A(int) … </span></span><br><span class="line">}</span><br><span class="line"><span class="comment">//result:</span></span><br><span class="line"><span class="comment">//A()</span></span><br><span class="line"><span class="comment">//B()</span></span><br><span class="line"><span class="comment">//_______________</span></span><br><span class="line"><span class="comment">//A()</span></span><br><span class="line"><span class="comment">//B(int x1)</span></span><br><span class="line"><span class="comment">//_______________</span></span><br><span class="line"><span class="comment">//A(int m1)</span></span><br><span class="line"><span class="comment">//B(int x1, int m1)</span></span><br></pre></td></tr></table></figure><h1 id="类的析构函数">类的析构函数</h1><ul><li>格式:<code>~&lt;类名&gt;()</code></li><li>功能:RA II: Resource Acquisition IsInitialization(资源获取即初始化)</li><li>调用情况<ol type="1"><li>对象消亡时，系统自动调用</li><li>C++离开作用域的时候回收</li><li>使用delete关键字的时候进行调用</li></ol></li></ul><h2 id="c资源回收机制">C++资源回收机制</h2><ul><li>Java的垃圾回收机制：finalize():调用后在下一次垃圾回收的时候才会进行回收<ol type="1"><li>效率不好，会卡。有些不支持。</li><li>GC 的效率存在障碍，存在不能使用GC 的场合</li><li>GC 只能回收Java存放在堆上的资源</li></ol></li><li>C++的垃圾回收机制：谁创造谁释放，主动权在程序员手里。稳定效率，表现好。</li><li>Private的析构函数：(强制自主控制对象存储分配)<ol type="1"><li>回收对象的过程被接管，保证对象在堆上进行创建，但是不能使用delete，那么我们可以在内容提供一个destroy()方法来进行回收</li><li>写在栈或者全局区是不能通过编译的(自动调用，发现调不到)</li><li>强制在堆上进行创建，对很大的对象而言有好处强制管理存储分配</li><li>适用于内存栈比较小的嵌入式系统</li></ol></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>{</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">A</span>();</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">destroy</span><span class="params">()</span></span>{<span class="keyword">delete</span> <span class="keyword">this</span>;}</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        ~<span class="built_in">A</span>();</span><br><span class="line">};</span><br><span class="line"><span class="comment">//析构函数私有，无法声明</span></span><br><span class="line">A a;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    A aa;<span class="comment">//析构函数私有，无法声明</span></span><br><span class="line">};</span><br><span class="line">A *p = <span class="keyword">new</span> A;<span class="comment">//在堆上声明</span></span><br><span class="line"><span class="keyword">delete</span> p;<span class="comment">//错误</span></span><br><span class="line">p-&gt;<span class="built_in">destroy</span>();<span class="comment">//可能出现p的null空指针问题</span></span><br></pre></td></tr></table></figure><ul><li>更好的解决方案声明成静态方法：free</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Better Solution</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">free</span><span class="params">(A *p)</span></span>{ <span class="keyword">delete</span> p; }</span><br><span class="line">A::<span class="built_in">free</span>(p);</span><br></pre></td></tr></table></figure><ul><li>栈上的内存资源会自动释放，所以我们只针对堆上的资源的释放</li></ul><h2 id="析构函数例子">析构函数例子</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">String</span>{</span><br><span class="line">    <span class="type">char</span> *str;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="built_in">String</span>(){</span><br><span class="line">        str = <span class="literal">NULL</span>;</span><br><span class="line">    }</span><br><span class="line">   <span class="built_in">String</span>(<span class="type">char</span> *p){</span><br><span class="line">        <span class="comment">//str这个数组是不会单独释放出去的</span></span><br><span class="line">        str = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(p)+<span class="number">1</span>];  </span><br><span class="line">        <span class="built_in">strcpy</span>(str,p);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">   ~<span class="built_in">String</span>(){</span><br><span class="line">        <span class="comment">//额外资源要释放掉</span></span><br><span class="line">        <span class="keyword">delete</span> []str;</span><br><span class="line">        <span class="comment">//str和对象同声明周期</span></span><br><span class="line">    }</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">length</span><span class="params">()</span></span>{<span class="keyword">return</span> <span class="built_in">strlen</span>(str);}</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">get_char</span><span class="params">(<span class="type">int</span> i)</span></span>{<span class="keyword">return</span> str[i];}</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">set_char</span><span class="params">(<span class="type">int</span> i, <span class="type">char</span> value)</span></span>{str[i] = value;}</span><br><span class="line"><span class="function"><span class="type">char</span> &amp;<span class="title">char_at</span><span class="params">(<span class="type">int</span> i)</span> </span>{  <span class="keyword">return</span> str[i]; }</span><br><span class="line"><span class="function"><span class="type">char</span> *<span class="title">get_str</span><span class="params">()</span></span>{<span class="keyword">return</span> str; }</span><br><span class="line"><span class="function"><span class="type">char</span> *<span class="title">strcpy</span><span class="params">(<span class="type">char</span> *p)</span></span>{</span><br><span class="line">        <span class="keyword">delete</span> []str;</span><br><span class="line">        str = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(p)+<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(str,p);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">}</span><br><span class="line"><span class="function">String &amp;<span class="title">strcpy</span><span class="params">(String &amp;s)</span></span>{</span><br><span class="line">        <span class="keyword">delete</span> []str;</span><br><span class="line">        str = newchar[<span class="built_in">strlen</span>(s.str)+<span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(str,s.str);</span><br><span class="line">    }</span><br><span class="line"><span class="function"><span class="type">char</span> *<span class="title">strcat</span><span class="params">(<span class="type">char</span> *p)</span></span>;</span><br><span class="line"><span class="function">String &amp;<span class="title">strcat</span><span class="params">(String &amp;s)</span></span>;</span><br><span class="line">};</span><br></pre></td></tr></table></figure><h1 id="类的拷贝构造函数">类的拷贝构造函数</h1><ul><li>相<strong>同类型的类对象是通过拷贝构造函数来完成整个复制过程</strong>：自动调用：创建对象时，<strong>用一同类的对象对其初始化的时候进行调用。</strong></li><li><strong>默认拷贝构造函数</strong><ol type="1"><li><strong>逐个成员初始化(member-wise initialization)</strong></li><li>对于对象成员，该定义是递归的</li></ol></li><li>什么时候需要拷贝构造函数:<ol type="1"><li>赋值拷贝构造</li><li>传参进行拷贝</li><li>返回值进行拷贝</li></ol></li><li><strong>拷贝构造函数私有:</strong>目的是让编译器不能调用拷贝构造函数，防止对象按值传递，<strong>只能引用传递(对象比较大)</strong></li></ul><h2 id="拷贝函数的使用情况以及定义">拷贝函数的使用情况以及定义</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//赋值拷贝构造</span></span><br><span class="line">A a;</span><br><span class="line">A b=a;</span><br><span class="line"><span class="comment">//传参进行拷贝</span></span><br><span class="line"><span class="built_in">f</span>(A a){}</span><br><span class="line">A b;</span><br><span class="line"><span class="built_in">f</span>(b);</span><br><span class="line"><span class="comment">//返回值进行拷贝</span></span><br><span class="line"><span class="function">A <span class="title">f</span><span class="params">()</span></span>{</span><br><span class="line">    A a;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">f</span>();</span><br><span class="line"><span class="comment">//拷贝构造函数</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//const避免出现修改</span></span><br><span class="line">    <span class="built_in">A</span>(<span class="type">const</span> A&amp; a);<span class="comment">//一定要写引用，不然就递归调用了</span></span><br></pre></td></tr></table></figure><ul><li>为什么对象是一个引用类型:不然会出现<strong>循环拷贝</strong>问题:如果没有引用的话，传参则会拷贝，那么就会出现循环拷贝</li><li>按照这个格式背过。</li></ul><h2 id="拷贝构造函数的深拷贝">拷贝构造函数的深拷贝</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">string</span> {</span><br><span class="line">    <span class="type">char</span> *p ;</span><br><span class="line">    <span class="keyword">public</span> :</span><br><span class="line">        <span class="built_in">string</span>(<span class="type">char</span> *str) {</span><br><span class="line">            p = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(str)+ <span class="number">1</span> ];</span><br><span class="line">            <span class="built_in">strcpy</span>(p, str);</span><br><span class="line">        }</span><br><span class="line">        ~<span class="built_in">string</span>() {<span class="keyword">delete</span>[] p;}</span><br><span class="line">};</span><br><span class="line"><span class="function">string <span class="title">s1</span><span class="params">(<span class="string">"abcd"</span>)</span></span>;</span><br><span class="line">string s2 = s1;<span class="comment">//悬挂指针</span></span><br><span class="line"><span class="comment">//deep copy</span></span><br><span class="line">string::<span class="built_in">string</span>(<span class="type">const</span> string&amp; s) {</span><br><span class="line">    p = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(s.p)+<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(p,s.p);</span><br><span class="line">} </span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/22/1vnLm9U52BKsytl.png" alt="image-20220422192720498"></p><ul><li>原来S1和S2两个指针都指向"abcd",但是随着S1的归还，S2就变成了一个空指针了。</li><li>此时我们通过深拷贝完成拷贝</li><li>没有深拷贝需求的时候，使用编译器默认构造函数即可</li></ul><h2 id="拷贝构造函数的初始化问题">拷贝构造函数的初始化问题</h2><ul><li>包含成员对象的类<ol type="1"><li>默认拷贝构造函数:调用<strong>成员对象</strong>的<strong>拷贝构造函数</strong></li><li>自定义拷贝构造函数:调用成员对象的<strong>默认构造函数</strong>：程序员如果接管这件事情，则编译器不再负责任何默认参数。</li></ol></li><li>拷贝函数的拷贝过程没有处理静态数据成员</li><li>默认拷贝构造函数:<ol type="1"><li>逐个成员初始化</li><li>对于对象成员，该定义是递归的</li></ol></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> { </span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>() { x = y = <span class="number">0</span>; }</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inc</span><span class="params">()</span> </span>{ x++; y++; }</span><br><span class="line">};</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> {</span><br><span class="line"><span class="type">int</span> z;</span><br><span class="line">A a;<span class="comment">//已经默认创建了</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">B</span>(){ z = <span class="number">0</span>; }</span><br><span class="line"><span class="built_in">B</span>(<span class="type">const</span> B&amp; b):{ z = b.z; }</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inc</span><span class="params">()</span> </span>{ z++; a.<span class="built_in">inc</span>(); }<span class="comment">//拷贝构造函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inc</span><span class="params">()</span> </span>{ z++; a.<span class="built_in">inc</span>(); }<span class="comment">//指定调用a的拷贝构造函数</span></span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">B b1;    <span class="comment">//b1.z = b1.a.x = b1.a.y =0 </span></span><br><span class="line">b1.<span class="built_in">inc</span>();<span class="comment">//b1.a.x = b1.a.y = b1.z=1 </span></span><br><span class="line"><span class="function">B <span class="title">b2</span><span class="params">(b1)</span></span>;<span class="comment">//b2.z=1 b2.a.x=0 b2.a.y=0,这个时候调用的是A的默认构造函数</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><ul><li>如果想要调用A的拷贝构造函数的话:<code>B(const B&amp; b):a(b.a){z = b.z;}</code></li><li>移动构造函数:将存储单元从一个对象移动到另一个对象<code>move constructor A(A&amp;&amp;)</code>,例子如下</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">generate</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">"test"</span>);</span><br><span class="line">}</span><br><span class="line">string S = <span class="built_in">generate</span>();</span><br><span class="line"><span class="comment">//上面先进行了创建test</span></span><br><span class="line"><span class="comment">//然后进行了拷贝返回</span></span><br><span class="line"><span class="comment">//然后再拷贝给S(拷贝赋值)</span></span><br></pre></td></tr></table></figure><ul><li>移动构造:<code>move constructor A(A&amp;&amp;)</code>：将已经创建好的部分移动给对应部分，避免进行重复拷贝。</li></ul><h2 id="拷贝构造函数的部分问题">拷贝构造函数的部分问题</h2><ul><li>拷贝构造函数必须是引用传递，不能是值传递? 防止递归调用</li><li>如何识别拷贝构造函数?构造函数的第一个参数是(X&amp;|constX&amp;|volatile X&amp;|const volatile X&amp;)</li></ul><h2 id="参考">参考</h2><p><a href="https://blog.csdn.net/sinat_39370511/article/details/91981033">详见</a></p><p><a href="https://blog.csdn.net/weixin_38416696/article/details/90400917">C++拷贝构造函数、赋值构造函数(深拷贝，浅拷贝)</a></p><h1 id="类的移动构造函数">类的移动构造函数</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">generate</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">"test"</span>);<span class="comment">//反复进行拷贝，右值</span></span><br><span class="line">}</span><br><span class="line">string S = <span class="built_in">generate</span>();</span><br><span class="line"><span class="type">int</span> x=<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> &amp; y=x;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp; z=<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//移动构造函数 move constructor</span></span><br><span class="line"><span class="built_in">A</span>(A &amp;&amp;)</span><br><span class="line"></span><br><span class="line">string::<span class="built_in">string</span> (String &amp;&amp;s):<span class="built_in">p</span>(s.p)<span class="comment">//两个&amp;&amp;，如果是右值，则进行移动，并且将原来的资源置为NULL，左值不会调用</span></span><br><span class="line">{s.p=<span class="literal">nullptr</span>;}</span><br></pre></td></tr></table></figure><ul><li>左值:左侧变量，右值是常数、表达式或者函数。</li><li>Const只能被绑定到右值上<ol type="1"><li>不可以写成<code>int &amp;x = 5</code></li><li>为什么不可以对非const引用绑定一个右值？可能会导致可以修改临时变量的值，不允许被修改。</li></ol></li><li>移动构造函数:直接将对应的右值移动过来(我们已经将vector和String进行了是此岸)</li><li>&amp;&amp;是右值引用，不会被左值调用。</li><li>五删原则:拷贝构造、拷贝赋值、析构函数、移动构造、移动复制<ol type="1"><li>提供上面的5个函数之一，则需要自己提供默认函数</li></ol></li><li>书面考试不做要求</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C++面向对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++类成员变量</title>
      <link href="/2022/04/22/C-%E7%B1%BB%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F/"/>
      <url>/2022/04/22/C-%E7%B1%BB%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="类的成员变量">类的成员变量</h1><h1 id="const成员">Const成员</h1><h2 id="const成员变量">const成员变量</h2><ul><li>初始化放在构造函数的成员初始化表中进行：<ol type="1"><li>常量在初始化的时候必须被给值，而不是赋值，所以不能写在构造函数内</li><li>所以我们通过初始化表的方式完成。</li></ol></li><li>每一个Const变量是指对于这个对象的生命周期内是不变的</li><li>staticconst:编译器内的常量，所有的对象都是一样的，最好在定义的地方进行初始化。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>{</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> x;<span class="comment">//常成员变量</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>(<span class="type">int</span> c):<span class="built_in">x</span>(c){}</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="const成员函数">Const成员函数</h2><ul><li>可以是函数也可以是参数</li><li>我们将不修改对象内变量的值的时候，将对应方法声明为const</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>{</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">A</span>(<span class="type">int</span> x1, <span class="type">int</span> y1);</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> <span class="type">const</span></span>;<span class="comment">//前后要保证一致，const在后面</span></span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">A::f</span><span class="params">()</span></span>{x = <span class="number">1</span>; y = <span class="number">1</span>;}<span class="comment">//编译器怎么能发现不是const的？转化为防止变量被赋值，见下面，所以const指针不能修改</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(A * <span class="type">const</span> <span class="keyword">this</span>)</span></span>;<span class="comment">//上面的函数相当于这个</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">A::show</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>{cout &lt;&lt;x &lt;&lt; y;}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">(<span class="type">const</span> A* <span class="type">const</span> <span class="keyword">this</span>)</span></span>;<span class="comment">//上面的函数相当于这个，第一个const表示指向对象常量，后一个const表示指针本身是常量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">const</span> A <span class="title">a</span><span class="params">(<span class="number">0</span>,<span class="number">0</span>)</span></span>;<span class="comment">//常对象:这个对象是不可以修改的</span></span><br><span class="line">a.<span class="built_in">f</span>(); <span class="comment">//错误，常对象无法调用非常方法</span></span><br><span class="line">a.<span class="built_in">show</span>();<span class="comment">//正确</span></span><br></pre></td></tr></table></figure><ul><li>声明为const的对象只能调用常成员对象函数</li><li>如果是非const的对象，则都可以进行调用</li><li>是否const方法真的就不能修改对象里面的值了呢？不是,const只是语法上避免了，但是不是完全不可修改</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>{</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> &amp; indirect_int;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">A</span>():<span class="built_in">indirect_int</span>(*<span class="keyword">new</span> <span class="type">int</span>){ ... }</span><br><span class="line">        ~<span class="built_in">A</span>() {</span><br><span class="line">            <span class="keyword">delete</span> &amp;indirect_int;</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span> <span class="type">const</span></span>{</span><br><span class="line">            <span class="comment">//只要不是直接修改变量的值就OK</span></span><br><span class="line">            <span class="comment">//引用本身是不能修改的，所以编译器认为没问题</span></span><br><span class="line">            indirect_int++;<span class="comment">//只是指向的内容发生了变化</span></span><br><span class="line">        }</span><br><span class="line">};</span><br><span class="line"><span class="comment">//用a来做初始化</span></span><br></pre></td></tr></table></figure><ul><li>关键词mutable:表示成员可以再const中进行修改，而不是用间接的方式来做。</li><li>去掉const转换:<code>(const_cast)&lt;A*&gt;(this)-&gt;x</code>转换后可以修改原来的成员</li></ul><h1 id="静态成员">静态成员</h1><ul><li>放在类的外部，只能初始化一次。</li><li>一个类共享变量</li></ul><h2 id="静态成员简介">静态成员简介</h2><ul><li>类刻画了一组具有相同属性的对象</li><li>对象是类的实例</li><li>问题:为什么不声明成全局变量，而是声明成类的成员。<ol type="1"><li>如果把这些共享变量定义为全局变量，却缺乏数据保护</li><li>名污染</li></ol></li><li>struct和class在封装上大致类似<ol type="1"><li>struct默认访问public</li><li>class默认访问private</li></ol></li></ul><h2 id="静态成员变量">静态成员变量</h2><ul><li>静态成员变量是类对象所共享</li><li>唯一拷贝</li><li>遵循类访问控制</li><li>必须放置在类外</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>{</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> shared;</span><br><span class="line">};</span><br><span class="line"><span class="type">int</span> A::shared=<span class="number">0</span>;<span class="comment">//j静态成员的初始化放在类的外部，只能被赋值一次，所以不再头文件中定义，而是在实现中定义，避免重复。并且定义的时候不用再写static</span></span><br><span class="line">A a,b;</span><br></pre></td></tr></table></figure><h2 id="静态成员函数">静态成员函数</h2><ul><li><strong>只能存取静态成员变量，调用静态成员函数</strong></li><li>遵循类访问控制：在类上直接访问只能是静态成员变量</li><li>类也是一种对象，可以通过类直接调用静态方法</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>{</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> shared;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span> </span>{shared}</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">q</span><span class="params">()</span> </span>{ x,shared}</span><br><span class="line">};</span><br></pre></td></tr></table></figure><h2 id="调用静态成员">调用静态成员</h2><ol type="1"><li>通过对象使用:<code>A a;a.f();</code></li><li>通过类使用:<code>A::f();</code></li><li>C++支持观点"类也是对象"<ol type="1"><li>smalltalk</li></ol></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>{</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> obj_count;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>(){obj_count++;}<span class="comment">//追踪创建了多少个对象</span></span><br><span class="line">    ~<span class="built_in">A</span>(){obj_count--;}</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">get_num_of_obj</span><span class="params">()</span></span>;<span class="comment">//查看已经创建了多少个对象</span></span><br><span class="line">};</span><br><span class="line"><span class="type">int</span> A::obj_count=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">A::get_num_of_obj</span><span class="params">()</span> </span>{ <span class="keyword">return</span> obj_count; }</span><br></pre></td></tr></table></figure><ol start="4" type="1"><li>原则:谁创建，谁归还。解决方法:自动归还</li><li>singleton:单件模式:通过静态成员函数来创建对象</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span>  <span class="title class_">singleton</span>{</span><br><span class="line">    <span class="keyword">protected</span>:<span class="comment">//构造函数外部不可以使用</span></span><br><span class="line"><span class="built_in">singleton</span>(){}</span><br><span class="line"><span class="built_in">singleton</span>(<span class="type">const</span> singleton &amp;);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">static</span> singleton *<span class="title">instance</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">return</span>  m_instance == <span class="literal">NULL</span>? </span><br><span class="line">m_instance = <span class="keyword">new</span> singleton: m_instance;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">destroy</span><span class="params">()</span>  </span>{ <span class="keyword">delete</span> m_instance; m_instance = <span class="literal">NULL</span>; }</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">static</span> singleton *m_instance;<span class="comment">//保存对象的指针也是static的</span></span><br><span class="line">};</span><br><span class="line">singleton *singleton::m_instance= <span class="literal">NULL</span>;<span class="comment">//初始化</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C++面向对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++继承</title>
      <link href="/2022/04/22/C-%E7%BB%A7%E6%89%BF/"/>
      <url>/2022/04/22/C-%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="继承机制">继承机制</h1><ul><li>继承机制<ul><li>基于<strong>目标代码</strong>的复用</li></ul></li><li>对事物进行分类<ol type="1"><li>派生类是基类的具体化</li><li>把事务(概念)以层次结构表示出来，有利于描述和解决问题</li></ol></li><li>增量开发(面向接口编程)</li></ul><h1 id="单继承">单继承</h1><p><strong>protected关键字</strong></p><ol type="1"><li>如果没有继承的话，protected和private是相同的</li><li>派生类可以访问基类中protected的属性的成员。</li><li>派生类不可以访问<strong>基类中的对象</strong>的protected的属性。</li><li><strong>派生类含有基类的所有成员变量</strong></li></ol><p><strong>struct</strong></p><p>默认访问权限是private</p><h2 id="代码">代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> {</span><br><span class="line">    <span class="type">int</span> id;<span class="comment">//id在Undergraduated_Student中仍然是私有的</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="type">char</span> nickname[<span class="number">16</span>];</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">set_ID</span> <span class="params">(<span class="type">int</span> x)</span> </span>{id = x;} </span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">SetNickName</span> <span class="params">(<span class="type">char</span> *s)</span> </span>{<span class="built_in">strcpy</span> (nickname,s);}</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">showInfo</span> <span class="params">()</span> </span>{cout &lt;&lt; nickname &lt;&lt; <span class="string">":"</span> &lt;&lt; id &lt;&lt; endl ;}</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">showInfo</span><span class="params">(<span class="type">int</span> x)</span></span>{cout &lt;&lt; x &lt;&lt; endl;}</span><br><span class="line">};</span><br><span class="line"><span class="comment">//基类和派生类  &lt;--&gt; 父类和子类</span></span><br><span class="line"><span class="comment">// :b</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Undergraduated_Student</span>: <span class="keyword">public</span> Student {</span><br><span class="line">    <span class="type">int</span> dept_no;<span class="comment">//学院编号</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">setDeptNo</span><span class="params">(<span class="type">int</span> x)</span></span>{dept_no = x;}</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">showInfo</span><span class="params">()</span></span>{cout &lt;&lt; dept_no &lt;&lt; <span class="string">":"</span> &lt;&lt; nickname &lt;&lt; endl;}</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">set_ID</span> <span class="params">(<span class="type">int</span> x)</span> </span>{……}</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">showInfo</span><span class="params">(<span class="type">int</span> x)</span></span>{</span><br><span class="line">            cout &lt;&lt; dept_no &lt;&lt; <span class="string">":"</span> &lt;&lt; nickname &lt;&lt; endl;</span><br><span class="line">        }</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        Student::nickname;<span class="comment">//这样在才能修改可见性</span></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">SetNickName</span><span class="params">()</span></span>;<span class="comment">//新定义了一个private方法，父类对应方法被隐藏</span></span><br><span class="line">};</span><br><span class="line">Undergraduated_Student us;</span><br><span class="line">us.<span class="built_in">showInfo</span>(<span class="number">10</span>);<span class="comment">//可以吗？不可以,因为是新的名空间，重定义后面的名空间访问不到</span></span><br><span class="line"><span class="comment">//C++方法调用:名字匹配，匹配成功后直接调用</span></span><br></pre></td></tr></table></figure><h2 id="继承方式">继承方式</h2><p>public、private:访问权限只和基类中的访问权限有关</p><h3 id="public">public</h3><ul><li>public:<code>class Undergraduated_Student: public Student</code></li><li>原来的public是public，原来的private是private</li><li>如果没有特殊需要建议使用public</li></ul><h3 id="private">private</h3><ul><li>private:原来所有的都是private，但是这个private是对于Undergraduate_Student大对象而言，所以他自己还是可以访问的。</li><li>默认的继承方式</li></ul><h3 id="protected">protected</h3><ul><li>如果没有继承的话，protected和private是相同的</li><li>派生类可以访问基类中protected的属性的成员。</li><li>派生类不可以访问<strong>基类中的对象</strong>的protected的属性。</li><li><strong>派生类含有基类的所有成员变量</strong></li></ul><h2 id="继承声明">继承声明</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//错误声明</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Undergraduated_Student</span> : <span class="keyword">public</span> Student;<span class="comment">//声明的时候是不用声明继承的</span></span><br><span class="line"><span class="comment">//正确声明</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Undergraduated_Student</span>;</span><br></pre></td></tr></table></figure><h2 id="基类和派生类的关系">基类和派生类的关系</h2><h3 id="派生类中的showinfo">派生类中的showInfo()</h3><ul><li>showInfo()重载，隐藏基类的同名函数</li><li>不是覆盖</li></ul><h3 id="基类的showinfo">基类的showInfo()</h3><ul><li>如果基类中有一个<code>void ShowInfo(int x)</code>:那么是不是从基类可以进行调用呢？<ol type="1"><li>不可以(所有函数都被隐藏)</li><li>因为重定义将名空间进行了覆盖</li></ol></li><li>父类中的所有的函数都不可见:但是我们可以通过指定名空间来完成访问:<code>using Student::showInfo</code>,所有的版本都可以见，这时候是重写。</li></ul><h3 id="方法调用的顺序">方法调用的顺序</h3><ul><li>首先在名空间中按照名称进行匹配</li><li>一旦名称匹配，则会校验函数参数</li><li>匹配不上是不会去别的名空间进行匹配(也就是不会去student那里去匹配)</li></ul><h3 id="方法覆盖">方法覆盖</h3><ul><li>我们需要指明覆盖:<code>virtual</code>:在对应想要重写的函数的前面写上一个virtual</li><li>虚函数实现的是多态</li></ul><h3 id="不可以被继承的部分">不可以被继承的部分</h3><ul><li>构造函数和析构函数是不可以被继承的:是对类进行初始化的，无法继承</li><li>运算符重载函数也是不可以被继承的</li></ul><h3 id="访问权限的修改方法">访问权限的修改方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private:</span><br><span class="line">Student::nickname;//char nickname[16]语法上没有问题，没有将原来的nickname变成私有的</span><br><span class="line">void SetNickName();//新定义pricate方法，父类方法被隐藏</span><br></pre></td></tr></table></figure><h1 id="继承的初始化">继承的初始化</h1><ul><li>派生类对象的初始化<ul><li>由基类和派生类共同完成</li></ul></li><li>构造函数的执行次序<ul><li>基类的构造函数</li><li>派生类对象成员类的构造函数！！！</li><li>派生类的构造函数</li></ul></li><li>析构函数的执行次序（与构造函数的执行顺序相反）<ul><li>派生类的析构函数</li><li>派生类对象成员类的析构函数</li><li>基类的析构函数</li></ul></li><li>基类构造函数的调用<ul><li>缺省执行基类默认构造函数</li><li>如需执行基类的非默认构造函数，必须在派生类的构造函数成员初始化表中指出</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试执行顺序</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>{</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">A</span>() {x = <span class="number">0</span>; }</span><br><span class="line">        <span class="built_in">A</span>(<span class="type">int</span> i) { x = i; }</span><br><span class="line">};</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>: <span class="keyword">public</span> A</span><br><span class="line">{   <span class="type">int</span> y;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">B</span>(){y = <span class="number">0</span>;}</span><br><span class="line">        <span class="built_in">B</span>(<span class="type">int</span> i) {y = i;}</span><br><span class="line">        <span class="built_in">B</span>(<span class="type">int</span> i, <span class="type">int</span> j):<span class="built_in">A</span>(i){</span><br><span class="line">            <span class="comment">//成员初始化表中显式调用基类构造函数</span></span><br><span class="line">            y = j;</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">B</span>(<span class="type">const</span> B&amp; b){<span class="comment">//拷贝构造</span></span><br><span class="line">            <span class="comment">//首先调用A的默认初始化构造函数</span></span><br><span class="line">            <span class="comment">//如果想要调用对应拷贝构造函数，必须用成员初始化表声明</span></span><br><span class="line">            <span class="comment">//拷贝构造函数</span></span><br><span class="line">        }</span><br><span class="line">};</span><br><span class="line">B b1;<span class="comment">//执行A::A()和B::B()</span></span><br><span class="line"><span class="function">B <span class="title">b2</span><span class="params">(<span class="number">1</span>)</span></span>;<span class="comment">//执行A::A()和B::B(int)</span></span><br><span class="line"><span class="function">B <span class="title">b3</span><span class="params">(<span class="number">0</span>,<span class="number">1</span>)</span></span>;<span class="comment">//执行A::A(int)和B::B(int,int)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>: <span class="keyword">public</span> A{</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="comment">//继承下来多版本的构造函数</span></span><br><span class="line">        <span class="keyword">using</span> A::A; <span class="comment">//继承A的构造函数</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><h1 id="多继承">多继承</h1><h2 id="定义">定义</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class &lt;派生类名&gt;：[&lt;继承方式&gt;] &lt;基类名1&gt;，</span><br><span class="line">                 [&lt;继承方式&gt;] &lt;基类名2&gt;，…</span><br><span class="line">{〈成员表〉}</span><br></pre></td></tr></table></figure><ol type="1"><li>Java不允许多继承，是因为多继承非常复杂。</li><li>继承方式:默认是private的继承方式：public、private 、protected</li><li>继承方式及访问控制的规定同单继承:重复进行继承</li><li>派生类拥有所有基类的所有成员</li></ol><h1 id="友元和protected">友元和protected</h1><h2 id="代码-1">代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>{</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="type">int</span> prot_mem;<span class="comment">//protected成员</span></span><br><span class="line">};</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sneaky</span> : <span class="keyword">public</span> Base{</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">clobber</span><span class="params">(Sneaky&amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">clobber</span><span class="params">(Base&amp;)</span></span>;</span><br><span class="line"><span class="type">int</span> j;<span class="comment">//默认是 pricate</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clobber</span><span class="params">(Sneaky &amp; s)</span></span>{</span><br><span class="line">s.j = s.prot_mem = <span class="number">0</span>;</span><br><span class="line">}<span class="comment">//正确，clobber可以访问Sneaky对象的private和protected成员</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clobber</span><span class="params">(Base &amp;b)</span></span>{</span><br><span class="line">b.prot_mem = <span class="number">0</span>;</span><br><span class="line">}<span class="comment">//错误，clobber不能访问Base的protected成员</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><h1 id="question-c-中基类和派生类的同名函数重载问题">Question : C++中基类和派生类的同名函数重载问题</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>  </span><br><span class="line"> {  </span><br><span class="line"> <span class="keyword">public</span>:  </span><br><span class="line">     <span class="function"><span class="type">void</span> <span class="title">fn</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">     </span>{}  </span><br><span class="line">   </span><br><span class="line">     <span class="function"><span class="type">void</span> <span class="title">fn</span><span class="params">(<span class="type">int</span> a)</span>  </span></span><br><span class="line"><span class="function">     </span>{}  </span><br><span class="line"> };  </span><br><span class="line">   </span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">public</span> A  </span><br><span class="line"> {  </span><br><span class="line"> <span class="keyword">public</span>:  </span><br><span class="line">     <span class="function"><span class="type">void</span> <span class="title">fn</span><span class="params">()</span>   </span></span><br><span class="line"><span class="function">     </span>{}  </span><br><span class="line"> };  </span><br><span class="line">   </span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"> </span>{  </span><br><span class="line">     B b;  </span><br><span class="line">     b.<span class="built_in">fn</span>(<span class="number">3</span>);  <span class="comment">//Error 编译器报错，B中不存在fn(int)的函数</span></span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line"> }  　　</span><br></pre></td></tr></table></figure><p>！！！ C++中，同名函数的重载动作，只发生在自由函数中（即非成员），以及同一个class/struct内部的函数之间，不能跨越基类和派生类，当派生类写一个和基类同名的函数时（无论参数列表是否相同），此时发生的动作叫<strong>覆盖</strong>，即积累的同名函数在派生类内将变得无法直接调用（可以间接调用）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span>  </span><br><span class="line">{  </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> d)</span>  </span></span><br><span class="line"><span class="function">    </span>{  </span><br><span class="line">        cout &lt;&lt; <span class="string">"A::foo - int"</span> &lt;&lt; endl;  </span><br><span class="line">        cout &lt;&lt; d &lt;&lt; endl;  </span><br><span class="line">    }  </span><br><span class="line">};  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">B</span> : <span class="keyword">public</span> A  </span><br><span class="line">{  </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">double</span> d)</span> <span class="comment">//覆盖了A::foo(int d);  </span></span></span><br><span class="line"><span class="function">    </span>{  </span><br><span class="line">        cout &lt;&lt; <span class="string">"B::foo - double"</span> &lt;&lt; endl;  </span><br><span class="line">        cout &lt;&lt; d &lt;&lt; endl;  </span><br><span class="line">    }  </span><br><span class="line">};  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>{     </span><br><span class="line">    A a;  </span><br><span class="line">    a.<span class="built_in">foo</span>(<span class="number">10</span>);  </span><br><span class="line">     </span><br><span class="line">    B b;  </span><br><span class="line">    b.<span class="built_in">foo</span>(<span class="number">10.2</span>);  </span><br><span class="line">    b.<span class="built_in">foo</span>(<span class="number">2</span>); <span class="comment">//调用的仍然是B::foo，虽然2明显是个整数  </span></span><br><span class="line">             </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">}  </span><br></pre></td></tr></table></figure><p>输出结果如下”</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A::foo - <span class="type">int</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line">B::foo - <span class="type">double</span></span><br><span class="line"><span class="number">10.2</span></span><br><span class="line">B::foo - <span class="type">double</span> <span class="comment">//调用的仍然是B::foo，虽然2明显是个整数</span></span><br></pre></td></tr></table></figure><p>那么，如何调用基类的foo(int)呢？</p><h2 id="method-1-显示调用">Method 1: 显示调用</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">B b;</span><br><span class="line">b.A::<span class="built_in">foo</span>(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h2 id="method-2-名空间">Method 2: 名空间</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">struct</span> <span class="title class_">B</span> : <span class="keyword">public</span> A  </span><br><span class="line">  {  </span><br><span class="line">      <span class="keyword">using</span> A::foo; <span class="comment">//通过“使用声明”，引入了A::foo……  </span></span><br><span class="line">       </span><br><span class="line">      <span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">double</span> d)</span>  </span></span><br><span class="line"><span class="function">     </span>{  </span><br><span class="line">          cout &lt;&lt; <span class="string">"B::foo - double"</span> &lt;&lt; endl;  </span><br><span class="line">          cout &lt;&lt; d &lt;&lt; endl;  </span><br><span class="line">     }  </span><br><span class="line"> }; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span>{</span><br><span class="line">    B b;</span><br><span class="line">    b.A::<span class="built_in">foo</span>(<span class="number">3</span>);</span><br><span class="line">    b.<span class="built_in">foo</span>(<span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    b.<span class="built_in">foo</span>(<span class="number">10.234</span>);</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C++面向对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++多态</title>
      <link href="/2022/04/22/C-%E5%A4%9A%E6%80%81/"/>
      <url>/2022/04/22/C-%E5%A4%9A%E6%80%81/</url>
      
        <content type="html"><![CDATA[<h2 id="多态">多态</h2><ol type="1"><li>通用概念:同一论域中一个元素可有多种解释。</li><li>提高面向对象设计的语言灵活性</li><li>程序设计语言:OO程序设计</li><li>多态形式<ol type="1"><li>函数重载:(静态多态)，和虚函数的动态多态不同(一名多用):函数重载包含操作符重载</li><li>类属多态:模板:template</li></ol></li></ol><h1 id="操作符重载">操作符重载</h1><ol type="1"><li>函数重载<ol type="1"><li><strong>名同、参数不同</strong>，返回值不同没有用的:参数顺序、参数类型匹配(找到最佳匹配)</li><li>静态绑定</li></ol></li><li>歧义控制:<ol type="1"><li>顺序:</li><li>最佳匹配:<ol type="1"><li>原则一:这个匹配每一个参数不必其他的匹配更差</li><li>原则二:这个匹配有一个参数更精确匹配</li></ol></li><li>整形提升:更好的，标准转换(标准转换都是一视同仁的)</li><li>窄转换?允许的，大-&gt;小</li></ol></li><li>操作符重载(变为一种函数)<ol type="1"><li>动机:操作符语义<ul><li>built_in 类型</li><li>自定义数据类型</li></ul></li><li>作用:<ol type="1"><li>提高可读性</li><li>提供可扩充性</li></ol></li></ol></li><li>重点记忆返回的变量</li></ol><h2 id="操作符-的重载">操作符 + 的重载</h2><ol type="1"><li>重载第一步</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span> {</span><br><span class="line">    <span class="type">double</span> real, imag;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Complex</span>() {real = <span class="number">0</span>; imag = <span class="number">0</span>;}</span><br><span class="line">        <span class="built_in">Complex</span>(<span class="type">double</span> r, <span class="type">double</span> i) { real = r; imag = i; }</span><br><span class="line">        <span class="function">Complex <span class="title">add</span><span class="params">(Complex&amp; x)</span></span>;</span><br><span class="line">};</span><br><span class="line"><span class="function">Complex <span class="title">a</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>)</span>,<span class="title">b</span><span class="params">(<span class="number">3</span>,<span class="number">4</span>)</span>,c</span>;</span><br><span class="line">c=a.<span class="built_in">add</span>(b);<span class="comment">//想要写成 a + b</span></span><br><span class="line"><span class="comment">//使用操作符重载</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span> {</span><br><span class="line">    <span class="type">double</span> real, imag;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Complex</span>() { real = <span class="number">0</span>; imag = <span class="number">0</span>; }</span><br><span class="line">        <span class="built_in">Complex</span>(<span class="type">double</span> r, <span class="type">double</span> i) { real = r; imag = i; }</span><br><span class="line">        Complex <span class="keyword">operator</span> + (Complex&amp; x) {  </span><br><span class="line">            Complex temp;</span><br><span class="line">            temp.real = real + x.real;</span><br><span class="line">            temp.imag = imag + x.imag;</span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line">        }</span><br><span class="line">};</span><br><span class="line"><span class="function">Complex <span class="title">a</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>)</span>,<span class="title">b</span><span class="params">(<span class="number">3</span>,<span class="number">4</span>)</span>,c</span>;</span><br><span class="line">c = a.<span class="keyword">operator</span> + (b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//进一步完成操作符重载</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span> {</span><br><span class="line">    <span class="type">double</span> real, imag ;</span><br><span class="line">    <span class="keyword">public</span> :</span><br><span class="line">        <span class="built_in">Complex</span>() { real = <span class="number">0</span> ; imag = <span class="number">0</span> ; }</span><br><span class="line">        <span class="built_in">Complex</span>(<span class="type">double</span> r, <span class="type">double</span> i) {</span><br><span class="line">            real = r;</span><br><span class="line">            imag = i;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">friend</span> Complex <span class="keyword">operator</span>+(Complex&amp; c1 , Complex&amp; c2);<span class="comment">//这个是已经预定义好的，我们这样子写就是重载</span></span><br><span class="line">};</span><br><span class="line"><span class="comment">//全局函数</span></span><br><span class="line">Complex <span class="keyword">operator</span>+ (Complex&amp; c1 , Complex&amp; c2 ) {<span class="comment">//全局函数重载至少包含一个用户自定义类型</span></span><br><span class="line">    Complex temp;</span><br><span class="line">    temp.real = c1.real + c2.real;</span><br><span class="line">    temp.imag = c1.imag + c2.imag;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">}<span class="comment">//一般返回临时变量</span></span><br><span class="line"></span><br><span class="line"><span class="function">Complex <span class="title">a</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>)</span>,<span class="title">b</span><span class="params">(<span class="number">3</span>,<span class="number">4</span>)</span>,c</span>;</span><br><span class="line">c = a + b;<span class="comment">//自动进行翻译</span></span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>自增和自减的问题</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span> {</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Counter</span>() { value = <span class="number">0</span>; }</span><br><span class="line">        Counter&amp; <span class="keyword">operator</span> ++()<span class="comment">//++a 左值</span></span><br><span class="line">        {</span><br><span class="line">            value ++;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        }</span><br><span class="line">        Counter <span class="keyword">operator</span> ++(<span class="type">int</span>)<span class="comment">//a++ 右值</span></span><br><span class="line">        {</span><br><span class="line">            Counter temp = *<span class="keyword">this</span>;</span><br><span class="line">            value++;</span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><ol start="3" type="1"><li>重载++函数:封装SAT的问题<ol type="1"><li>返回值引用或者是值是有区别的</li></ol></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Day</span> { SUN, MON, TUE, WED, THU, FRI, SAT};</span><br><span class="line">Day&amp; <span class="keyword">operator</span>++(Day&amp; d)</span><br><span class="line">{  <span class="keyword">return</span> d= (d==SAT)? SUN: <span class="built_in">Day</span>(d+<span class="number">1</span>); }</span><br><span class="line"><span class="comment">//重载重定向符号，用的很多,不能进成员函数重载</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream&amp; o, Day&amp; d)</span><br><span class="line">{<span class="keyword">switch</span> (d)</span><br><span class="line">{<span class="keyword">case</span> SUN: o &lt;&lt; <span class="string">"SUN"</span> &lt;&lt; endl;<span class="keyword">break</span>;<span class="comment">//直接使用ostream中的&lt;&lt;</span></span><br><span class="line"><span class="keyword">case</span> MON: o &lt;&lt; <span class="string">"MON"</span> &lt;&lt; endl;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> TUE: o &lt;&lt; <span class="string">"TUE"</span> &lt;&lt; endl;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WED: o &lt;&lt; <span class="string">"WED"</span> &lt;&lt; endl;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> THU: o &lt;&lt; <span class="string">"THU"</span> &lt;&lt; endl;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> FRI: o &lt;&lt; <span class="string">"FRI"</span> &lt;&lt; endl;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> SAT: o &lt;&lt; <span class="string">"SAT"</span> &lt;&lt; endl;<span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> o;<span class="comment">//为什么要return ostream类型的变量:需要连续的使用可以链式调用，Cout &lt;&lt; 1 &lt;&lt; 2;</span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    Day d = SAT;</span><br><span class="line">    ++d;</span><br><span class="line">    cout &lt;&lt; d;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="可以重载的操作符">可以重载的操作符</h2><ol type="1"><li>不可以重载的操作符:<code>.</code>(成员访问操作符)、<code>.*</code>(成员指针访问运算符，如下)、<code>::</code>(域操作符)、<code>?:</code>(条件操作符)、<code>sizeof</code>:也不重载<ol type="1"><li>原因:前两个为了防止类访问出现混乱</li><li>::后面是名称不是变量</li><li>?:条件运算符涉及到跳转，如果重载就影响了理解</li></ol></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">{   <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">A</span>(<span class="type">int</span> i):<span class="built_in">x</span>(i){} </span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span> </span>{}</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">g</span><span class="params">()</span> </span>{}</span><br><span class="line">};</span><br><span class="line"><span class="built_in">void</span> (A::*p_f)();<span class="comment">//A类成员的函数指针</span></span><br><span class="line"></span><br><span class="line">p_f= &amp;A::f;</span><br><span class="line">(a.*p_f)();</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;b = <span class="number">0</span>;</span><br><span class="line">b?(a = <span class="number">1</span>):(b = <span class="number">1</span>);<span class="comment">//a == b == 1</span></span><br><span class="line"><span class="keyword">operator</span> ?: (p,a = <span class="number">1</span>,b = <span class="number">1</span>)<span class="comment">//均执行了</span></span><br></pre></td></tr></table></figure><ol type="1"><li>重载基本原则:<ol type="1"><li>方法:(大多数都支持，但是有的不支持)<ol type="1"><li>类成员函数</li><li><strong>带有类参数</strong>的全局函数</li></ol></li><li>遵循原有语法<ol type="1"><li>单目/双目:一一对应</li><li>优先级</li><li>结合性</li></ol></li></ol></li><li>永远不要重载&amp;&amp;和||:会造成极大的问题</li></ol><h2 id="双目操作符的重载">双目操作符的重载</h2><h3 id="类成员函数双目操作符">类成员函数(双目操作符)</h3><ol type="1"><li>类成员函数:<ol type="1"><li>格式:<code>&lt;ret type&gt;operator #(&lt;arg&gt;)</code></li><li>this: 隐含，必然是第一个参数</li></ol></li><li>使用:</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">class</span> <span class="title class_">name</span>&gt; a,b;</span><br><span class="line">a <span class="meta"># b;<span class="comment">//a -&gt; this</span></span></span><br><span class="line">a.<span class="keyword">operator</span>#(b)</span><br></pre></td></tr></table></figure><h3 id="全局函数">全局函数</h3><ol type="1"><li>友元:<code>friend &lt;ret type&gt; operator #(&lt;arg1&gt;,&lt;arg2&gt;)</code></li><li>格式:<code>&lt;ret type&gt; operator #(&lt;arg1&gt;,&lt;arg2&gt;)</code></li><li>注意:<code>=</code>、<code>()</code>、<code>[]</code>、<code>-&gt;</code>不可以作为全局函数重载<ul><li>大体上来讲，C++一个类本身对这几个运算符就已经有了相应的解释了。</li><li>如果将这四种符号进行友元全局重载，则会出现一些冲突</li><li>下标和箭头运算符为什么？有保留调用顺序，我们希望能保留原来的顺序，而全局不能要求，而成员函数的this就可以解决这个问题</li><li><a href="https://blog.csdn.net/weixin_30781107/article/details/98147938">参考</a></li></ul></li><li>全局函数作为补充:<ol type="1"><li>单目运算符最好重载为类的成员函数</li><li>双目运算符最好重载为类的友元函数</li></ol></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CL</span> {</span><br><span class="line">    <span class="type">int</span> count;</span><br><span class="line">    <span class="built_in">CL</span>(<span class="type">int</span> i){...}<span class="comment">//10可以直接隐式类型转换</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">friend</span> CL <span class="keyword">operator</span> +(<span class="type">int</span> i, CL&amp; a);</span><br><span class="line">        <span class="keyword">friend</span> CL <span class="keyword">operator</span> +(CL&amp; a, <span class="type">int</span> i); </span><br><span class="line">};<span class="comment">//支持隐式类型转换就行</span></span><br><span class="line"><span class="comment">//如果最左边不是类对象，则必须作为友元函数</span></span><br></pre></td></tr></table></figure><ol start="5" type="1"><li>永远不要重载 &amp;&amp; 和 ||:逻辑与和逻辑或<ol type="1"><li>原因:短路，类似?:</li><li>虽然绝大多数都没有问题，但是如果有逻辑短路容易出现问题</li></ol></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *p;</span><br><span class="line"><span class="keyword">if</span> ((p != <span class="number">0</span>) &amp;&amp; (<span class="built_in">strlen</span>(p) &gt;<span class="number">10</span>)) <span class="comment">//利用了短路，一旦计算就没有短路行为了</span></span><br><span class="line"><span class="keyword">if</span> (expressin1 &amp;&amp; expression2)</span><br><span class="line"><span class="keyword">if</span> (expression1.<span class="keyword">operator</span> &amp;&amp; (expression2))</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">operator</span> &amp;&amp; (expression1, expression2))</span><br></pre></td></tr></table></figure><ol type="1"><li>返回类型的问题:如果没有&amp;的时候，第一个return出现了对象拷贝，避免:临时变量不能返回拷贝</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rational</span> { </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Rational</span>(<span class="type">int</span>,<span class="type">int</span>);</span><br><span class="line">            <span class="type">const</span> Rational&amp; <span class="keyword">operator</span> *(<span class="type">const</span> Rational&amp; r) <span class="type">const</span>;<span class="comment">//const写不写都行，写了更好</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> n, d;</span><br><span class="line">};</span><br><span class="line"><span class="comment">// operator * 的函数体</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Rational</span>(n * r.n, d * r.d);</span><br><span class="line"></span><br><span class="line">Rational *result  = <span class="keyword">new</span> <span class="built_in">Rational</span>(n*r.n, d*r.d);</span><br><span class="line"><span class="keyword">return</span> *result;<span class="comment">//返回引用的问题?</span></span><br><span class="line"><span class="comment">// w = x * y * z出现问题:出现内存泄露的问题</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> Rational result;<span class="comment">//声明为static</span></span><br><span class="line">result.n = n * r.n;</span><br><span class="line">result.d = d * r.d;</span><br><span class="line"><span class="keyword">return</span> result;<span class="comment">//static是全局的，可以吗?不可以，同时出现两个的结果会出现问题</span></span><br><span class="line"><span class="comment">//if((a * b) == (c * d)) -&gt;永真式</span></span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>操作符重载的哲理:尽量让事情有效率，但不是过度有效率(返回引用)</li><li>结论:每次就是返回一个拷贝，而不是引用</li></ol><h2 id="返回值总结">返回值总结</h2><ol type="1"><li>加减乘除:就是拷贝，不是引用，效率不太高?为了解决这个问题:可以返回值优化，第一个return没有拷贝，直接返回的是一个对象(无拷贝)，先计算，最后生成一个对象返回。</li></ol><h2 id="单目操作符的重载">单目操作符的重载</h2><ol type="1"><li>类成员函数:<ol type="1"><li>this:隐含</li><li>格式:<code>&lt;ret type&gt; operator#()</code>:this的隐含</li></ol></li><li>全局函数:<ol type="1"><li><code>&lt;ret type&gt; operator#(&lt;arg&gt;)</code></li><li>参数必须为自定义类型</li></ol></li><li>单目操作符在绝大多数情况下重载为类的成员函数</li><li>15min没了</li><li>a++ 和 ++ a</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span>{</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Counter</span>() { value = <span class="number">0</span>; }</span><br><span class="line">        Counter&amp; <span class="keyword">operator</span> ++() <span class="comment">// ++a</span></span><br><span class="line">        {   value++;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        }</span><br><span class="line">        Counter <span class="keyword">operator</span> ++(<span class="type">int</span>) <span class="comment">//a++</span></span><br><span class="line">        {   Counter temp=*<span class="keyword">this</span>;<span class="comment">//这里的int值是什么意义?区分两个函数，dummy argument，哑元变量</span></span><br><span class="line">            value++;</span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="操作符-的重载-1">操作符 = 的重载</h2><ol type="1"><li>默认赋值操作符重载函数</li><li>逐个成员赋值</li><li>对含有对象成员的类，该定义是递归的</li><li>赋值操作符的重载不可以被继承：因为拷贝构造，派生出来的类有一些新的部分</li><li>返回引用类型:返回*this的引用，支持链式赋值</li><li>this引用应该是非常量引用，返回出来的是作为右值进行计算<ol type="1"><li>a = b = c:不要求非常量引用</li><li>(a = b).f():要求非常量引用</li></ol></li><li>例一:</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>;</span><br><span class="line">A a = b;<span class="comment">//需要调用拷贝构造函数(更重要的是构造，在构造对象时候调用)</span></span><br><span class="line"><span class="function">A <span class="title">a</span><span class="params">(b)</span></span>;</span><br><span class="line">A a,b;</span><br><span class="line">a = b;<span class="comment">//需要调用</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> {</span><br><span class="line">    <span class="type">int</span> x,y ;</span><br><span class="line">    <span class="type">char</span> *p ;</span><br><span class="line">    <span class="keyword">public</span> :</span><br><span class="line">        <span class="built_in">A</span>(<span class="type">int</span> i,<span class="type">int</span> j,<span class="type">char</span> *s):<span class="built_in">x</span>(i),<span class="built_in">y</span>(j){</span><br><span class="line">            p = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(s)+ <span class="number">1</span> ];</span><br><span class="line">            <span class="built_in">strcpy</span>(p,s);<span class="comment">//进行拷贝，最后留一个\0</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">virtual</span> ~<span class="built_in">A</span>(){</span><br><span class="line">            <span class="keyword">delete</span>[] p;</span><br><span class="line">        }</span><br><span class="line">        A&amp; <span class="keyword">operator</span> = (A&amp; a) {</span><br><span class="line">            <span class="comment">//赋值</span></span><br><span class="line">            x = a.x;</span><br><span class="line">            y = a.y;</span><br><span class="line">            <span class="keyword">delete</span> []p;</span><br><span class="line">            p = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(a.p)+<span class="number">1</span>];</span><br><span class="line">            <span class="built_in">strcpy</span>(p,a.p);</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;<span class="comment">//也会出现悬垂</span></span><br><span class="line">        }<span class="comment">//还有问题，就是赋值自身会出现问题</span></span><br><span class="line">};</span><br><span class="line">A a, b;</span><br><span class="line">a = b;<span class="comment">//调用自己的复制</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//idle pointer，B被析构的时候会将p释放掉，导致p指向已经被释放掉的指针</span></span><br><span class="line"><span class="comment">//Memory leak,A申请的区域可能没有办法被释放</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//更安全的拷贝，先new再delete</span></span><br><span class="line"><span class="type">char</span> *pOrig = p;</span><br><span class="line">p = <span class="keyword">new</span> <span class="type">char</span> ...</span><br><span class="line"><span class="built_in">strcpy</span>();</span><br><span class="line"><span class="keyword">delete</span> pOrig;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"><span class="comment">//自我赋值可以吗？可以，换了一块内存空间，没有内存泄露</span></span><br></pre></td></tr></table></figure><ol type="1"><li>注意:避免自我赋值(因为是相同的内存地址)<ol type="1"><li>Sample: class string</li><li>s = s<ol type="1"><li><code>class {... A void f(A&amp; a);...}</code></li><li><code>void f (A&amp; a1, A&amp; a2)</code></li><li><code>int f2(Derived &amp;rd,Base&amp; rb);</code></li></ol></li><li>Object identity<ol type="1"><li>Content</li><li>Same memory location</li><li>Object identifier</li></ol></li></ol></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span> == &amp;a)</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">delete</span> p;<span class="comment">//48min - 50min</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>{</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function">ObjectID <span class="title">identity</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">}; </span><br><span class="line">A *p1,*p2; </span><br><span class="line">p1-&gt; <span class="built_in">identity</span>() == p2-&gt; <span class="built_in">identity</span>()</span><br></pre></td></tr></table></figure><h2 id="操作符-的重载-2">操作符 [] 的重载</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">string</span> {</span><br><span class="line">    <span class="type">char</span> *p;</span><br><span class="line">    <span class="keyword">public</span> :</span><br><span class="line">        <span class="built_in">string</span>(<span class="type">char</span> *p1){</span><br><span class="line">            p = <span class="keyword">new</span> <span class="type">char</span> [<span class="built_in">strlen</span>(p1)+ <span class="number">1</span>];</span><br><span class="line">            <span class="built_in">strcpy</span>(p,p1);<span class="comment">//#pragma warning(disable:4996)来屏蔽问题</span></span><br><span class="line">        }</span><br><span class="line">        <span class="type">char</span>&amp; <span class="keyword">operator</span>[](<span class="type">int</span> i){</span><br><span class="line">            <span class="keyword">return</span> p[i];</span><br><span class="line">        }</span><br><span class="line">        <span class="type">const</span> <span class="type">char</span> <span class="keyword">operator</span>[](<span class="type">int</span> i) <span class="type">const</span>{</span><br><span class="line">            <span class="keyword">return</span> p[i];</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//可以用两个重载函数吗?是可以的</span></span><br><span class="line">        <span class="keyword">virtual</span> ~<span class="built_in">string</span>() { <span class="keyword">delete</span>[] p ; }</span><br><span class="line">};</span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(<span class="string">"aacd"</span>)</span></span>;</span><br><span class="line">s[<span class="number">2</span>] = <span class="string">'b'</span> ;</span><br><span class="line"><span class="comment">//第一个重载加上const可以使得const或者非const对象都可以调用</span></span><br><span class="line"><span class="function"><span class="type">const</span> string <span class="title">cs</span><span class="params">(<span class="string">'const'</span>)</span></span>;</span><br><span class="line">cout &lt;&lt; cs[<span class="number">0</span>];</span><br><span class="line"><span class="type">const</span> cs[<span class="number">0</span>] = <span class="string">'D'</span>;<span class="comment">//const 版本不想被赋值(返回const的)，非const版本想要被赋值，之后再进行重载的时候就需要同时重载两个</span></span><br></pre></td></tr></table></figure><h2 id="多维数组-class-array2d">多维数组 class Array2D</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Array2D</span>{</span><br><span class="line">    <span class="type">int</span> n1, n2;</span><br><span class="line">    <span class="type">int</span> *p;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Array2D</span>(<span class="type">int</span> l, <span class="type">int</span> c):<span class="built_in">n1</span>(l),<span class="built_in">n2</span>(c){</span><br><span class="line">            p = <span class="keyword">new</span> <span class="type">int</span>[n1*n2];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">virtual</span> ~<span class="built_in">Array2D</span>() { <span class="keyword">delete</span>[] p; }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> &amp; <span class="title">Array2D::getElem</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> </span>{ ... }</span><br><span class="line"><span class="comment">//上面是实现高维数组</span></span><br><span class="line"><span class="function">Array2D <span class="title">data</span><span class="params">(<span class="number">2</span>,<span class="number">3</span>)</span></span>;</span><br><span class="line">data.<span class="built_in">getElem</span>(<span class="number">1</span>,<span class="number">2</span>) = <span class="number">0</span>; </span><br><span class="line"><span class="comment">//target -&gt; data[1][2]</span></span><br><span class="line"><span class="comment">//想法:化解为两次调用</span></span><br><span class="line">data.<span class="keyword">operator</span>[](<span class="number">1</span>)[<span class="number">2</span>];<span class="comment">//int *operator[](int i) 一次偏移一行，转化成Array1D</span></span><br><span class="line">data.<span class="keyword">operator</span>[](<span class="number">1</span>).<span class="keyword">operator</span>[](<span class="number">2</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">//问题:三维数组重载问题:重载一次降维一次，3D-&gt;2D等等，多个依次进行重载，重载之后返回对象</span></span><br><span class="line"><span class="comment">//代理对象:Array1D</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">Array1D</span>{</span><br><span class="line">    <span class="type">int</span> *q;<span class="comment">//一维降低到int *就行</span></span><br><span class="line">    <span class="built_in">Array1D</span>(<span class="type">int</span> *p){ q = p; }</span><br><span class="line">    <span class="type">int</span>&amp;  <span class="keyword">operator</span>[](j){</span><br><span class="line">        <span class="keyword">return</span> q[j];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="多维数组的最终版本">多维数组的最终版本</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Array2D</span>{</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="type">int</span> *p;</span><br><span class="line">        <span class="type">int</span> num1, num2;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Array1D</span>{<span class="comment">//Surrogate 多维，proxy class</span></span><br><span class="line">            <span class="keyword">public</span>:</span><br><span class="line">                <span class="built_in">Array1D</span>(<span class="type">int</span> *p) { <span class="keyword">this</span>-&gt;p = p; }</span><br><span class="line">                <span class="type">int</span>&amp; <span class="keyword">operator</span>[ ] (<span class="type">int</span> index) { <span class="keyword">return</span> p[index]; }</span><br><span class="line">                <span class="type">const</span> <span class="type">int</span> <span class="keyword">operator</span>[ ] (<span class="type">int</span> index) <span class="type">const</span> { <span class="keyword">return</span> p[index]; }</span><br><span class="line">        <span class="keyword">private</span>:</span><br><span class="line">        <span class="type">int</span> *p;</span><br><span class="line">        };</span><br><span class="line">        <span class="built_in">Array2D</span>(<span class="type">int</span> n1, <span class="type">int</span> n2) {</span><br><span class="line">            p = <span class="keyword">new</span> <span class="type">int</span>[n1 * n2];</span><br><span class="line">            num1 = n1;</span><br><span class="line">            num2 = n2;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">virtual</span> ~<span class="built_in">Array2D</span>() {</span><br><span class="line">            <span class="keyword">delete</span> [] p;</span><br><span class="line">        }</span><br><span class="line">        Array1D <span class="keyword">operator</span>[](<span class="type">int</span> index) {</span><br><span class="line">            <span class="keyword">return</span> p + index * num2;<span class="comment">//return的值和int*相同，构造函数不能声明成显式构造函数。</span></span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//这里为什么是array1D?通过构造函数进行类型转换</span></span><br><span class="line">        <span class="type">const</span> Array1D <span class="keyword">operator</span>[] (<span class="type">int</span> index) <span class="type">const</span> {</span><br><span class="line">            <span class="keyword">return</span> p+index*num2;</span><br><span class="line">        }</span><br><span class="line">};</span><br></pre></td></tr></table></figure><h2 id="操作符-的重载-3">操作符 () 的重载</h2><ol type="1"><li>()的意义<ol type="1"><li>函数调用</li><li>类型转换操作符</li></ol></li></ol><h3 id="函数调用">1.9.1. 函数调用</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Func</span> {</span><br><span class="line">    <span class="type">double</span> para;</span><br><span class="line">    <span class="type">int</span> lowerBound , upperBound ;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">double</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">double</span>,<span class="type">int</span>,<span class="type">int</span>)</span></span>;</span><br><span class="line">};</span><br><span class="line">Func f;</span><br><span class="line"><span class="built_in">f</span>(<span class="number">2.4</span>, <span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Array2D</span>{</span><br><span class="line">    <span class="type">int</span> n1, n2;</span><br><span class="line">    <span class="type">int</span> *p;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Array2D</span>(<span class="type">int</span> l, <span class="type">int</span> c):<span class="built_in">n1</span>(l),<span class="built_in">n2</span>(c){</span><br><span class="line">            p = <span class="keyword">new</span> <span class="type">int</span>[n1*n2];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">virtual</span> ~<span class="built_in">Array2D</span>() {</span><br><span class="line">            <span class="keyword">delete</span>[] p;</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="type">int</span>&amp; <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span></span>{</span><br><span class="line">            <span class="keyword">return</span> (p+i*n2)[j];<span class="comment">//优化getElement</span></span><br><span class="line">        }</span><br><span class="line">};</span><br></pre></td></tr></table></figure><h3 id="操作符类型转换的重载">操作符类型转换的重载</h3><ol type="1"><li>基本数据类型</li><li>自定义类</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rational</span> {</span><br><span class="line">    <span class="keyword">public</span>: <span class="built_in">Rational</span>(<span class="type">int</span> n1, <span class="type">int</span> n2) {</span><br><span class="line">        n = n1;</span><br><span class="line">        d = n2;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">double</span><span class="params">()</span> </span>{<span class="comment">//类型转换操作符，语法特殊</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="type">double</span>)n/d;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="type">int</span> n, d;</span><br><span class="line">};</span><br><span class="line"><span class="comment">//减少混合计算中需要定义的操作符重载函数的数量</span></span><br><span class="line"><span class="function">Rational <span class="title">r</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>)</span></span>;</span><br><span class="line"><span class="type">double</span> x = r;</span><br><span class="line">x = x + r;<span class="comment">//避免的double 和 rational 的全局函数重载，会自动全部转换为double</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//48min</span></span><br><span class="line"><span class="function">ostream <span class="title">f</span><span class="params">(<span class="string">"abc.txt"</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (f)</span><br><span class="line"><span class="comment">//重载  数值型：如 int</span></span><br></pre></td></tr></table></figure><ol type="1"><li>问题:为什么禁止在类外禁止重载赋值操作符?<ol type="1"><li>如果没有类内提供一个赋值操作符，则编译器会默认提供一个类内的复制操作符</li><li>查找操作符优先查找类内，之后查找全局，所以全局重载赋值操作符不可能被用到</li></ol></li></ol><h2 id="操作符---的重载">操作符 -&gt; 的重载</h2><ol type="1"><li>-&gt;为二元运算符，重载的时候按照一元操作符重载描述。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A a;</span><br><span class="line">a-&gt;<span class="built_in">f</span>();</span><br><span class="line">a.<span class="keyword">operator</span>-&gt;(f)</span><br><span class="line">a.<span class="keyword">operator</span>-&gt;()-&gt;<span class="built_in">f</span>() <span class="comment">//重载时按一元操作符重载描述,这时，a.operator-&gt;()返回一个指针(或者是已经重定义过-&gt;的对象)</span></span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>例子:画图板程序</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CPen</span> {</span><br><span class="line">    <span class="type">int</span> m_color;</span><br><span class="line">    <span class="type">int</span> m_width;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">setColor</span><span class="params">(<span class="type">int</span> c)</span></span>{ m_color = c;}</span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">getWidth</span><span class="params">()</span></span>{ <span class="keyword">return</span> m_width; }</span><br><span class="line">};</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CPanel</span> {</span><br><span class="line">    CPen m_pen;</span><br><span class="line">    <span class="type">int</span> m_bkColor;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function">CPen* <span class="title">getPen</span><span class="params">()</span></span>{<span class="keyword">return</span> &amp;m_pen;}</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">setBkColor</span><span class="params">(<span class="type">int</span> c)</span></span>{ m_bkColor =c;}</span><br><span class="line">};</span><br><span class="line">CPanel c;</span><br><span class="line">c.<span class="built_in">getPen</span>()-&gt;<span class="built_in">setColor</span>(<span class="number">16</span>);</span><br><span class="line"><span class="comment">//简单修改，可以返回一个对象内部对象的指针</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CPen</span> {</span><br><span class="line">    <span class="type">int</span> m_color;</span><br><span class="line">    <span class="type">int</span> m_width;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">setColor</span><span class="params">(<span class="type">int</span> c)</span></span>{ m_color = c;}</span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">getWidth</span><span class="params">()</span></span>{<span class="keyword">return</span> m_width; }</span><br><span class="line">};</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CPanel</span> {</span><br><span class="line">    CPen m_pen;</span><br><span class="line">    <span class="type">int</span> m_bkColor;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function">CPen* <span class="title">getPen</span><span class="params">()</span></span>{<span class="keyword">return</span> &amp;m_pen;}</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">setBkColor</span><span class="params">(<span class="type">int</span> c)</span> </span>{ m_bkColor =c;}</span><br><span class="line">};</span><br><span class="line">CPanel c;</span><br><span class="line">c-&gt;<span class="built_in">setColor</span>(<span class="number">16</span>);</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="comment">//c.operator-&gt;()-&gt;setColor(16);</span></span><br><span class="line"><span class="comment">//c.m_pen.setColor(16)</span></span><br><span class="line">c-&gt;<span class="built_in">getWidth</span>();</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="comment">//c.operator-&gt;()-&gt;getWidth();</span></span><br><span class="line"><span class="comment">//c.m_pen.getWidth()</span></span><br><span class="line">CPanel *p=&amp;c;</span><br><span class="line">p-&gt;<span class="built_in">setBkColor</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><ol start="3" type="1"><li>Prevent memory Leak:需要符合compiler控制的生命周期</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>{</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">g</span><span class="params">(<span class="type">double</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">h</span><span class="params">(<span class="type">char</span>)</span></span>;</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">    A *p = <span class="keyword">new</span> A;</span><br><span class="line">    p-&gt;<span class="built_in">f</span>();<span class="comment">//如果出错可能会导致问题</span></span><br><span class="line">    p-&gt;<span class="built_in">g</span>(<span class="number">1.1</span>);<span class="comment">//返回值</span></span><br><span class="line">    p-&gt;<span class="built_in">h</span>(<span class="string">'A'</span>);</span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//更好的管理A对象，不用在任何退出的地方写delete p</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">AWrapper <span class="title">p</span><span class="params">(<span class="keyword">new</span> A)</span></span>;</span><br><span class="line">    p-&gt;<span class="built_in">f</span>();<span class="comment">//如果出错可能会导致问题</span></span><br><span class="line">    p-&gt;<span class="built_in">g</span>(<span class="number">1.1</span>);<span class="comment">//返回值</span></span><br><span class="line">    p-&gt;<span class="built_in">h</span>(<span class="string">'A'</span>);</span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//须符合compiler控制的生命周期</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AWrapper</span>{<span class="comment">//不包含逻辑</span></span><br><span class="line">    A* p;<span class="comment">// ? T p; 支持多个类型</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">AWrapper</span>(A *p) { <span class="keyword">this</span>-&gt;p = p;}</span><br><span class="line">        ~<span class="built_in">AWrapper</span>() { <span class="keyword">delete</span> p;}</span><br><span class="line">        A*<span class="keyword">operator</span>-&gt;() { <span class="keyword">return</span> p;}</span><br><span class="line">};<span class="comment">//RAII 资源获取及初始化</span></span><br><span class="line"><span class="comment">//函数返回，销毁局部指针的时候会直接删除</span></span><br></pre></td></tr></table></figure><h2 id="操作符-new-和-delete-的重载">操作符 new 和 delete 的重载</h2><ol type="1"><li>频繁调用系统的存储管理，影响效率。</li><li>程序自身管理内存，提高效率</li><li>方法:<ol type="1"><li>调用系统存储分配，申请一块较大的内存</li><li>针对该内存，自己管理存储分配、去配</li><li>通过重载new与delete来实现</li><li>重载的new与delete是静态成员(隐式的，不需要额外声明，不允许操作任何类的数据成员)</li><li>重载的new与delete遵循类的访问控制，可继承(注意派生类和继承类的大小问题，开始5min左右)</li></ol></li><li>我们想要对某些程序进行自己的资源管理的话，可以重载这两个操作符。</li><li>有些我们重复新建销毁的，比如Restful的可以单独管理</li><li>new构造和返回指针</li><li>delete析构和释放内存</li><li>可以重载成全局函数，也可以重载成类成员函数</li></ol><h3 id="重载-new">重载 new</h3><ol type="1"><li><code>void *operator new (size_t size, s...)</code></li><li>名:operator new</li><li>返回类型:void *</li><li>第一个参数:size_t(unsigned int)<ul><li>系统自动计算对象的大小，并传值给size</li></ul></li><li>其他参数:可有可无<ul><li><code>A *p = new (...) A</code>，表示传给new的</li></ul></li><li>new的重载可以有多种</li><li>如果重载一个new，那么通过new动态创建该类的对象时将不再调用内置的(预定义的)new</li><li>允许进行全局重载，但是不推荐使用全局重载</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(size != <span class="built_in">sizeof</span>(base))</span><br><span class="line">    <span class="keyword">return</span> ::<span class="keyword">operator</span> <span class="built_in">new</span> (size);<span class="comment">//调用全局标准库的new进行size的分配，标准库的new永远是可以使用的</span></span><br><span class="line"><span class="keyword">operator</span> <span class="keyword">new</span>;</span><br><span class="line"><span class="keyword">new</span> A[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">operator</span> <span class="keyword">new</span> [];</span><br><span class="line"><span class="function"><span class="type">void</span> * <span class="keyword">operator</span> <span class="title">new</span> <span class="params">(<span class="type">size_t</span> size, <span class="type">void</span>*)</span><span class="comment">//是不可以被重载的，标准库版本</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> * <span class="keyword">operator</span> <span class="title">new</span> <span class="params">(<span class="type">size_t</span> size, ostream &amp; log)</span></span>;<span class="comment">//可以同时写入到日志</span></span><br><span class="line"><span class="function"><span class="type">void</span> * <span class="keyword">operator</span> <span class="title">new</span> <span class="params">(<span class="type">size_t</span> size, <span class="type">void</span> * pointer)</span></span>;<span class="comment">//定位new，placement new，被调用的时候，在指针给定的地方的进行new(可能预先已经分配好的)，分配比较快，长时间运行不被打断(不会导致内存不足)</span></span><br></pre></td></tr></table></figure><ol start="8" type="1"><li>new也可以new在栈上</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>{};</span><br><span class="line"><span class="type">char</span> buf[<span class="built_in">sizeof</span>(A)];</span><br><span class="line">A* a = <span class="built_in">new</span>(buf) A;<span class="comment">//定位new，不用分配内存，直接使用buf指向的区域</span></span><br></pre></td></tr></table></figure><h3 id="重载-delete">重载 delete</h3><ol type="1"><li><code>void operator delete(void *,size_t size)</code></li><li>名：operator delete</li><li>返回类型:void</li><li>第一个参数:void *(必须)：被撤销对象的地址</li><li>第二个参数:可有可无;如果有，则必须为size_t类型：被撤销对象的大小</li><li>delete 的重载只能有一个</li><li>如果重载了delete，那么通过 delete撤消对象时将不再调用内置的(预定义的)delete</li><li>动态删除其父类的所有的。</li><li>如果子类中有一个虚继承函数，则size_t大小会根据继承情况进行确定大小</li></ol><h3 id="new和delete考试">new和delete考试</h3><ol type="1"><li>主要考核集中在这些上面</li></ol><h1 id="模板-template">模板 template</h1><h2 id="模板">模板</h2><ol type="1"><li>模板是一种<strong>源代码复用</strong>机制</li><li>参数化模块:<ul><li>对程序模块(如:类、函数)加上<strong>类型参数</strong></li><li>对不同类型的数据实施相同的操作</li></ul></li><li>实例化:生成具体的函数/类</li><li>模板定义了若干个类，需要显式实例化</li><li>编译系统自动实例化函数模板：是否实例化模板的某个实例由使用点来决定；如果未使用到一个模板的某个实例，则编译系统不会生成相应实例是的代码。</li></ol><h2 id="类属函数-templat-function">类属函数 templat function</h2><ol type="1"><li>同一函数对不同类型的数据完成相同的操作</li><li>宏实现:<ol type="1"><li><code>#define max(a,b) ((a)&gt;(b)?(a):(b))</code></li><li>缺陷:<ol type="1"><li>只能实现简单的功能</li><li>没有类型检查</li></ol></li></ol></li></ol><h2 id="函数重载">函数重载</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">max</span><span class="params">(<span class="type">double</span>,<span class="type">double</span>)</span></span>;</span><br><span class="line"><span class="function">A <span class="title">max</span><span class="params">(A,A)</span> </span>;</span><br></pre></td></tr></table></figure><ol type="1"><li>缺陷:<ol type="1"><li>需要定义的重载函数太多</li><li>定义不全</li></ol></li><li>不可以只有返回值不同</li></ol><h2 id="函数指针">函数指针</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">(<span class="type">void</span> * , <span class="type">unsigned</span> <span class="type">int</span>, <span class="type">unsigned</span> <span class="type">int</span>, <span class="type">int</span> (* cmp) (<span class="type">void</span> *, <span class="type">void</span> *) )</span></span></span><br></pre></td></tr></table></figure><ol type="1"><li>缺陷:<ol type="1"><li>需要定义额外参数</li><li>大量指针运算</li><li>实现起来复杂</li><li>可读性差</li></ol></li><li>template更加结构清晰，实现简单</li></ol><h2 id="函数模板">函数模板</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int和double都可以使用，编译器编译的并不是之下的代码，而是T转化成具体代码，然后分别编译</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">(T A[], <span class="type">unsigned</span> <span class="type">int</span> num)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;num; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>; j&lt; num - i; j++) {</span><br><span class="line">            <span class="keyword">if</span>  (A[j] &gt; A[j+<span class="number">1</span>]) {</span><br><span class="line">                T t = A[j];</span><br><span class="line">                A[j] = A[j+<span class="number">1</span>];</span><br><span class="line">                A[j+<span class="number">1</span>] = t;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> {...}</span><br><span class="line">C a[<span class="number">300</span>];</span><br><span class="line"><span class="built_in">sort</span>(a, <span class="number">300</span>);<span class="comment">//没有重载&gt;</span></span><br></pre></td></tr></table></figure><ol type="1"><li>必须重载操作符 &gt;</li><li>函数模板定义了一类重载的函数</li><li>函数模板的实例化:<ol type="1"><li><strong>隐式实现</strong></li><li>根据具体模板函数调用</li></ol></li><li>函数模板的参数<ol type="1"><li>可有多个类型参数，用逗号分隔</li><li>可带普通参数<ul><li><strong>必须列在类型参数之后</strong></li><li>调用时需显式实例化，使用默认参数值可以不显式实例化</li></ul></li></ol></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(T1 a, T2 b)</span> </span>{}</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>, <span class="type">int</span> size&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(T a)</span> </span>{T temp[size];}</span><br><span class="line"><span class="built_in">f</span>&lt;<span class="type">int</span>,<span class="number">10</span>&gt;(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><ol type="1"><li>函数模板与函数重载配合使用(编译器优先使用没有使用模板的函数)</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="function">T <span class="title">max</span><span class="params">(T a, T b)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> a&gt;b?a:b;</span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> x, y, z;</span><br><span class="line"><span class="type">double</span> l, m, n;</span><br><span class="line">z = <span class="built_in">max</span>(x,y);</span><br><span class="line">l = <span class="built_in">max</span>(m,n);</span><br><span class="line"><span class="comment">//为了解决max(x,m)我们使用函数重载更新</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a, <span class="type">double</span> b)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> a&gt;b? a : b;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="类模板">类模板</h2><ol type="1"><li>类定义带有类型参数，类属类需要显式实例化</li><li>类模板中的静态成员属于实例化后的类</li><li>类模板的实例化:创建对象时显式指定</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span> {</span><br><span class="line">    <span class="type">int</span> buffer[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span></span>;</span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Stack::push</span><span class="params">(<span class="type">int</span>  x)</span> </span>{...}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Stack::pop</span><span class="params">()</span></span>{...}</span><br><span class="line"></span><br><span class="line">Stack st1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span> {</span><br><span class="line">    T buffer[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">( T x)</span></span>;</span><br><span class="line">        <span class="function">T <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="type">void</span> Stack &lt;T&gt; ::<span class="built_in">push</span>(T x) {...}</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line">T Stack &lt;T&gt; ::<span class="built_in">pop</span>() {...}</span><br><span class="line"></span><br><span class="line"><span class="comment">//如下是显式实例化</span></span><br><span class="line">Stack &lt;<span class="type">int</span>&gt; st1;</span><br><span class="line">Stack &lt;<span class="type">double</span>&gt; st2;</span><br></pre></td></tr></table></figure><h2 id="模板例子">模板例子</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>, <span class="type">int</span> size&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span> {</span><br><span class="line">    T buffer[size];</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(T x)</span></span>;</span><br><span class="line">        <span class="function">T <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>, <span class="type">int</span> size&gt;</span><br><span class="line"><span class="type">void</span> Stack &lt;T, size&gt;::<span class="built_in">push</span>(T x) {...}</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>, <span class="type">int</span> size&gt;</span><br><span class="line">T Stack &lt;T, size&gt;::<span class="built_in">pop</span>() {...}</span><br><span class="line"></span><br><span class="line">Stack &lt;<span class="type">int</span>, <span class="number">100</span> &gt; st1 ;<span class="comment">//上面改为template&lt;class T = int,int size = 100&gt;,这里可以改成stack&lt;&gt; st1用来显示实例化</span></span><br><span class="line">Stack &lt;<span class="type">double</span>, <span class="number">200</span> &gt; st2 ;</span><br></pre></td></tr></table></figure><ol type="1"><li>类型参数也可以给出初始值，模板类如果不按照从右往左指定默认值参数，会导致编译错误</li><li>函数模板的默认值不一定是从右向左的，C++11之后函数模板才接受默认值参数。</li><li>总而言之从右向左给出默认值总是没有问题的。</li></ol><h2 id="c中模板的完整定义通常出现在头文件中">C++中模板的完整定义通常出现在头文件中</h2><ol type="1"><li>如果在模块A中要使用模块B中定义的某模板的实例，而在B中未使用这个实例，则模板无法使用这个实例</li><li>为什么C++中模板的完整定义常常出现在头文件中?</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//file1.h</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="keyword">class</span> <span class="title class_">S</span> {</span><br><span class="line">    T a;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">//file1.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"file1.h"</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="type">void</span> S&lt;T&gt;::<span class="built_in">f</span>(){...}</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="function">T <span class="title">max</span><span class="params">(T x, T y)</span></span>{<span class="keyword">return</span> x&gt;y?x:y;}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    <span class="built_in">max</span>(a,b);<span class="comment">//实例化函数模板</span></span><br><span class="line">    S&lt;<span class="type">int</span>&gt; x;</span><br><span class="line">    x.<span class="built_in">f</span>();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//file2.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"file1.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="type">double</span> <span class="title">max</span><span class="params">(<span class="type">double</span>,<span class="type">double</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sub</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="built_in">max</span>(<span class="number">1.1</span>,<span class="number">2.2</span>);<span class="comment">//error</span></span><br><span class="line">    S&lt;<span class="type">float</span>&gt; x;</span><br><span class="line">    x.<span class="built_in">f</span>();<span class="comment">//error</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">//不能通过编译，为什么？file2.cpp找不到max定义，也找不到完整的S代码</span></span><br></pre></td></tr></table></figure><ul><li>解决方案:将file1.cpp中的代码放置到头文件中</li><li>连接器可以去掉多重定义</li></ul><h2 id="template-metaprogramming-元编程">Template MetaProgramming元编程</h2><ol type="1"><li>元程序就是编写一些直接可以生成或者操作其他程序的程序，要在更高层次上。</li><li>编写元程序就是元编程(两级编程)，在编译的时候就已经完成编程</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> N&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fib</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">enum</span> { value = Fib&lt;N - <span class="number">1</span>&gt;::value + Fib&lt;N - <span class="number">2</span>&gt;::value };</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">//模板显式实例化</span></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fib</span>&lt;<span class="number">0</span>&gt;{</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">enum</span> { value = <span class="number">1</span> };</span><br><span class="line">};</span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fib</span>&lt;<span class="number">1</span>&gt;</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">enum</span> { value = <span class="number">1</span> };</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    cout &lt;&lt; Fib&lt;<span class="number">8</span>&gt;::value &lt;&lt; endl;<span class="comment">// calculated at compile time</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><ol type="1"><li>元编程的特点<ol type="1"><li>输入就是模板中的参数(int N)</li><li>返回值往往是enum、static、final等等</li><li>往往是只支持整数，但是浮点数也是可以的</li></ol></li><li>选择和循环语句如何操作?<ol type="1"><li>选择可以通过特殊实例化实现:<code>class isTen&lt;N==10&gt;</code>:模板的特例化</li><li>递归的调用模板就提供了循环的能力</li></ol></li><li>模板元编程是图灵完备的</li><li>不作为考核内容</li></ol><h1 id="参考">参考</h1><ol type="1"><li><a href="https://www.jianshu.com/p/38f17600f19a">C++泛型与多态(1)：基础篇</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C++面向对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++动态内存</title>
      <link href="/2022/04/22/C-%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98/"/>
      <url>/2022/04/22/C-%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<h2 id="动态内存">动态内存</h2><ol type="1"><li>操作系统中内存的一种形式<ol type="1"><li>栈空间:局部变量、值传递参数</li><li>堆空间:动态内存分配的位置</li></ol></li><li>C:早在C之中已经有malloc和free等对动态内存操纵的函数。<ol type="1"><li>malloc() – memory allocation</li><li>free() – free memory</li></ol></li><li>C++<ol type="1"><li>new – create space for a new object (allocate)</li><li>delete – delete this object (free)</li></ol></li></ol><h1 id="动态对象">动态对象</h1><ol type="1"><li>在heap中创建</li><li>new/delete(constructor/destrutor)，可以被重载</li><li>为什么要引入new和delete操作符:因为新的操作符可以解决初始化函数的析构函数的调用的问题</li><li>具体示例如下:</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> {</span><br><span class="line">    <span class="keyword">public</span> :</span><br><span class="line">        <span class="built_in">A</span> () ;</span><br><span class="line">        <span class="built_in">A</span> (<span class="type">int</span>);</span><br><span class="line">};</span><br><span class="line">A *p,*q;</span><br><span class="line">p = <span class="keyword">new</span> A;     </span><br><span class="line"><span class="comment">//在程序的 heap 中申请一块大小为 sizeof(A) 的 内存</span></span><br><span class="line"><span class="comment">//新的功能:调用 A 的默认构造函数对该空间上的对象初始化</span></span><br><span class="line"><span class="comment">//返回创建的对象的地址并赋值给 p</span></span><br><span class="line">q = <span class="keyword">new</span> <span class="built_in">A</span>(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//调用 A 的另一个构造函数 A::A(int)</span></span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line"><span class="comment">//新功能:调用 p 所指 向 的对象的析构函数</span></span><br><span class="line"><span class="comment">//释放对象空间 delete q ;</span></span><br></pre></td></tr></table></figure><ol type="1"><li>malloc(不调用构造函数)|free(不调用析构函数)<ul><li>new可以重载</li></ul></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p = (A *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(A))<span class="comment">//A中的成员变量没有初始化</span></span><br><span class="line"><span class="built_in">free</span>(p)</span><br></pre></td></tr></table></figure><h1 id="创建对象">创建对象</h1><ol type="1"><li>new:<ol type="1"><li>使用原始类型</li><li>使用类类型</li></ol></li><li>Syntax:语法<ol type="1"><li>原始类型:<code>type* ptrName = new type;</code></li><li>使用类类型:<code>type* ptrName = new type(params);</code></li></ol></li><li>注意:这是没有变量名字的物体</li></ol><p><img src="https://s2.loli.net/2022/04/22/amoZjHKQhtq2JuI.png" alt="image-20220422185529896"></p><p><img src="https://s2.loli.net/2022/04/22/SOTlFhHu1gMdZoc.png" alt="image-20220422185550569"></p><h1 id="对象的删除">对象的删除</h1><p><img src="https://s2.loli.net/2022/04/22/CrmZ37YJTfhNexH.png" alt="image-20220422185606285"></p><ol type="1"><li>delete：<ol type="1"><li>唤起指向物体的指针</li><li>处理原始类型或类类型</li></ol></li><li>语法:<code>delete ptrName;</code></li><li>注意:删除之后，要将指针置为空指针，这样子之后可以继续使用，避免意外的引用对象,如果指针没有修改的话，可能是一个悬挂指针(有可能出现段错误等等)</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> ptrName;</span><br><span class="line">ptrName = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><h1 id="动态对象数组">动态对象数组</h1><ol type="1"><li>动态对象数组的创建与撤销</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A *p;</span><br><span class="line">p = <span class="keyword">new</span> A[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">delete</span> []p;</span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>注意:<ol type="1"><li>不能显式初始化，相应的类必须有默认构造函数</li><li>初始化部分是修改比较多的</li></ol></li><li>在堆上分配的内存默认不进行初始化<ol type="1"><li><code>int *p1 = new int[5];</code> 默认不进行初始化</li><li><code>int *p2 = new int[5]();</code>进行默认初始化</li><li><code>int *p2 = new int[5]{0,1,2,3,4}</code>:进行显式对应函数初始化</li></ol></li><li>注意:<code>delete []p</code>中的[]不可以省略<ol type="1"><li>如果省略的话，是删除了数组的第一个元素。并且会破坏其中的存储数组长度</li><li><code>new int[100]</code>就可以直接delete，因为不是复杂对象</li></ol></li></ol><h1 id="动态2d数组">动态2D数组</h1><ol type="1"><li>创建算法:<ol type="1"><li>分配行的数量</li><li>对于每一行分配列</li></ol></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> ROWS = <span class="number">3</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> COLUMNS = <span class="number">4</span>;</span><br><span class="line"><span class="type">char</span> **chArray2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// allocate the rows 粉色部分</span></span><br><span class="line">chArray2 = <span class="keyword">new</span> <span class="type">char</span>* [ROWS];</span><br><span class="line"></span><br><span class="line"><span class="comment">// allocate the (pointer) elements for each row 蓝色部分</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> row = <span class="number">0</span>; row &lt; ROWS; row++ )</span><br><span class="line">    chArray2[row] = <span class="keyword">new</span> <span class="type">char</span>[ COLUMNS ];</span><br></pre></td></tr></table></figure><ol type="1"><li>删除算法:和创建算法相反</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> row = <span class="number">0</span>; row &lt; ROWS; row++) {</span><br><span class="line">    <span class="keyword">delete</span> []chArray2[ row ];</span><br><span class="line">    chArray2[ row ] = <span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">delete</span> []chArray2;</span><br><span class="line">chArray2 = <span class="literal">NULL</span>; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C++面向对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++指针与引用</title>
      <link href="/2022/04/22/C-%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8/"/>
      <url>/2022/04/22/C-%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="c-指针">C++ 指针</h2><ol type="1"><li>C++中的指针主要是<strong>管理地址信息</strong><ol type="1"><li>管理数据</li><li>调用代码</li></ol></li></ol><h1 id="指针定义与基本操作">1. 指针定义与基本操作</h1><ol type="1"><li>定义:<code>&lt;基类型&gt;*&lt;指针变量&gt;</code>:<code>void*</code>:可以作为所有指针的接口，void的指针类型可以被赋值为任何类型的指针。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">9</span>;</span><br><span class="line"><span class="type">int</span>* p = &amp;a;</span><br><span class="line"><span class="type">int</span>* q = p;<span class="comment">//指向同一地址</span></span><br><span class="line">*p = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* p1 = p;</span><br><span class="line"><span class="type">double</span>* q1;</span><br><span class="line">p1 = q1;<span class="comment">//是允许的</span></span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>使用typedef来定义一个指针类型(别名)</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span>* Pointer;</span><br><span class="line"><span class="comment">// p和q均为指针变量</span></span><br><span class="line">Pointer p, q;</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="type">int</span>*p, q;<span class="comment">//主要q是int不是指针</span></span><br></pre></td></tr></table></figure><ol start="3" type="1"><li>可以直接进行赋值:因为C++可以进行系统开发，所以一定是可以操作绝对地址的。<ol type="1"><li><code>int *p = (int *)0x080483A0;</code></li><li><code>int *p = 0x080483A0;</code></li></ol></li></ol><h2 id="基本操作">1.1. 基本操作</h2><ol type="1"><li>取地址:<code>&amp;</code></li><li>间接取内容:<code>*</code></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x=<span class="number">9</span>; </span><br><span class="line"><span class="type">int</span> *p;</span><br><span class="line">p = &amp;x;</span><br><span class="line">*p = <span class="number">1000</span>;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/22/ZDchN5uUCwxYEFX.png"></p><ol start="3" type="1"><li>所有的指针都要初始化(Pointer Literal)<ul><li>C++会初始化指针为0(默认初始化)，如果编译器发现指向为0，则报错，因为0地址是保留空间</li><li>不允许:<code>char *p = (void*)</code></li><li>在新的C++部分中，我们引入了<code>nullptr</code>:作为不依赖任何值的指针。<code>Pointer p = nullptr;</code></li></ul></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ANSI C</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NULL ((void*)0)</span></span><br><span class="line"><span class="comment">//C++</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NULL 0</span></span><br><span class="line"><span class="comment">//以下的情况，会调用int的重载版本</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">char</span>*)</span></span>;</span><br><span class="line"><span class="built_in">func</span>(<span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><ol start="4" type="1"><li>空指针并不一定用与整数0同样的二进制模式表示，可由实现者采用任何选定的方式表示。</li><li>赋值:同类型赋值:<code>p = &amp;d//error，不同类型</code></li><li>加减:整形<ol type="1"><li>结果类型:不变</li><li>数值:sizeof(<strong>基类型</strong>) * 整形数值</li><li>char*是一个一个走</li></ol></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* p ;</span><br><span class="line"><span class="type">double</span> *q;</span><br><span class="line"><span class="comment">//注意这里的++隐含的意义是加上一个sizeof(type)</span></span><br><span class="line">p++;<span class="comment">//p的值加4  (sizeof(int))</span></span><br><span class="line">q++;<span class="comment">//q的值加8  (sizeof(double)) </span></span><br></pre></td></tr></table></figure><h2 id="指针之间的运算">1.2. 指针之间的运算</h2><ol type="1"><li>同类型指针相减(<strong>仔细看offset的定义</strong>)<ol type="1"><li>结果类型:整形</li><li>数值:偏移量</li></ol></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>] = { <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> };</span><br><span class="line"><span class="type">int</span> *p = &amp;a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) {</span><br><span class="line">cout &lt;&lt; *p++ &lt;&lt; <span class="string">" "</span>;<span class="comment">//指针移动</span></span><br><span class="line">cout &lt;&lt; *p &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">cout &lt;&lt; *(p + i) &lt;&lt; endl;<span class="comment">//指针不动</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) {</span><br><span class="line">cout &lt;&lt; a[j] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">}</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>同类型指针比较:<ol type="1"><li>== 或者 !=</li><li>一般不使用 &gt; 等符号</li></ol></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>  x=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> *p=&amp;x;</span><br><span class="line">cout &lt;&lt; p;    <span class="comment">// p的值 (x的地址)</span></span><br><span class="line">cout &lt;&lt; *p;   <span class="comment">// p所指向元素的值</span></span><br><span class="line"><span class="type">char</span> *p = <span class="string">"ABCD"</span>;<span class="comment">//有问题</span></span><br><span class="line"><span class="type">char</span> *p = (<span class="type">char</span> *) <span class="string">"ABCD"</span><span class="comment">//没有问题，但是并不推荐这么使用</span></span><br><span class="line">cout &lt;&lt; p;<span class="comment">//p指向的字符串，即: ABCD</span></span><br><span class="line"><span class="comment">//调用ostream&amp; operator &lt;&lt; (ostream&amp;, char*)</span></span><br><span class="line"><span class="comment">//调用时，operator &lt;&lt; (cout,p);</span></span><br><span class="line">cout &lt;&lt; *p;    <span class="comment">//p指向的字符，即：A</span></span><br><span class="line">cout &lt;&lt; (<span class="type">int</span> *)p   <span class="comment">//p的值</span></span><br></pre></td></tr></table></figure><ol type="1"><li>void*<ol type="1"><li>只管理地址信息<code>void *p;</code></li><li>是指针类型的公共接口</li><li>任何操作须做强制类型转换(不然是没有意义的)</li></ol></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *any_pointer;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">double</span> y;</span><br><span class="line">any_pointer = &amp;x;</span><br><span class="line">any_pointer = &amp;y;</span><br><span class="line">*any_pointer <span class="comment">//error,对void*类型的指针取值的时候，一定要先转换为对应具体类型的指针后再进行取值</span></span><br><span class="line"></span><br><span class="line">*((<span class="type">int</span> *)any_pointer)    <span class="comment">//OK</span></span><br><span class="line">*((<span class="type">double</span> *)any_pointer) <span class="comment">//OK</span></span><br></pre></td></tr></table></figure><ol start="4" type="1"><li>指针可用来将某块内存清零</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例：将某块内存清零，按照bit进行处理！</span></span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">memset</span> <span class="params">( <span class="type">void</span> *pointer, <span class="type">unsigned</span> size)</span> </span>{</span><br><span class="line">    <span class="type">char</span> *p = (<span class="type">char</span> *)pointer;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k=<span class="number">0</span>;k&lt;size;k++)</span><br><span class="line">        *p++ = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">memcpy</span><span class="params">(<span class="type">void</span> *des, <span class="type">void</span> *src, <span class="type">unsigned</span> size)</span> </span>{</span><br><span class="line"><span class="comment">//进行内存拷贝</span></span><br><span class="line"><span class="type">char</span> *sp = (<span class="type">char</span> *)src;</span><br><span class="line"><span class="type">char</span> *dp = (<span class="type">char</span> *)des;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line">*dp++ = *sp++;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showBytes</span><span class="params">(<span class="type">void</span> *q, <span class="type">int</span> n)</span><span class="comment">//查看内存</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cout &lt;&lt; n &lt;&lt; endl;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *p = (<span class="type">unsigned</span> <span class="type">char</span> *)q;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++){</span><br><span class="line">        cout &lt;&lt; (<span class="type">void</span> *)(p+i) &lt;&lt; <span class="string">" : "</span>&lt;&lt; <span class="built_in">setw</span>(<span class="number">2</span>) &lt;&lt; hex &lt;&lt; (<span class="type">int</span>)*(p+i) &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="keyword">if</span> ( (i+<span class="number">1</span>) %<span class="number">4</span> ==<span class="number">0</span> ) cout &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line">cout &lt;&lt; dec &lt;&lt; endl;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="memset的部分具体解释">1.2.1. memset()的部分具体解释</h3><ol type="1"><li>通常是为申请内存进行初始化的操作</li><li>可以将int数组的空间初始化为0或者-1</li><li>函数原型:<code>memset(void *s,int ch,size_t n);</code></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span>{...};</span><br><span class="line">A a;</span><br><span class="line"><span class="built_in">memset</span>(&amp;a,<span class="built_in">sizeof</span>(A));</span><br><span class="line"><span class="type">int</span> A[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">memset</span>(&amp;a[<span class="number">0</span>],<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> arr[<span class="number">100</span>] = {<span class="number">0</span>};</span><br><span class="line"><span class="built_in">memset</span>(arr,<span class="built_in">sizeof</span>(arr));</span><br><span class="line"><span class="built_in">memset</span>(arr,<span class="number">100</span> * <span class="built_in">sizeof</span>(<span class="type">int</span>));<span class="comment">//arr作为参数传递时</span></span><br></pre></td></tr></table></figure><h2 id="常量指针与指针常量">1.3. 常量指针与指针常量</h2><ol type="1"><li>操作地址一定要保证存在并且有意义</li></ol><h3 id="常量指针">1.3.1. 常量指针</h3><ol type="1"><li><code>const &lt;类型&gt; * &lt;指针变量&gt;</code></li><li>不可以修改指针指向单元的内部的值</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *cp;</span><br><span class="line"><span class="type">int</span> y = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> *q;</span><br><span class="line">cp  = &amp;c; √<span class="comment">//cp 可以指向 c</span></span><br><span class="line">q   = &amp;y; √<span class="comment">//q  可以指向 y</span></span><br><span class="line">*cp = <span class="number">1</span> ; ×<span class="comment">//*cp 是一个常量,不可以赋值</span></span><br><span class="line">*q  = <span class="number">2</span> ; √<span class="comment">//变量指针可以指向变量</span></span><br><span class="line">cp  = &amp;y; √<span class="comment">//常量指针可以指向变量，传递的是y的空间，并且对于y的这个空间只是可读的，安全的  </span></span><br><span class="line">q   = &amp;c; ×<span class="comment">//不可以的，因为q的修改可以间接修改c，所以编译器不允许</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> *p)</span></span>{</span><br><span class="line">    cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c = <span class="number">8</span>;</span><br><span class="line"><span class="built_in">print</span>(c) ;<span class="comment">//不可以被调用的</span></span><br><span class="line"><span class="built_in">print</span>(&amp;c);<span class="comment">//C++赋给的权利，在调用的时候除去常量的特性，这个&amp;是强制类型转换，取消常量特性</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">int</span> *p)</span></span>{<span class="comment">//如此修改就可以大量复用</span></span><br><span class="line">    <span class="comment">//常量使用者和变量使用者都可以使用</span></span><br><span class="line">    cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><ol type="1"><li>常量指针指向的地址存储的值不可以被修改，用来消除函数的副作用，保证在函数端中只读数据。</li><li>cp(variable) -&gt; c(constant)</li><li>服务提供者<strong>Use const whenever possible</strong>(cp =&amp;y可以保证函数不修改参数中的值):让调用者直接访问被调用者空间中的数据，为了保证不可以修改数据，使用const</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Fun1</span><span class="params">(<span class="type">int</span> *p)</span></span>{</span><br><span class="line">    <span class="comment">//*p 读写</span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Func2</span><span class="params">(<span class="type">const</span> <span class="type">int</span> *p)</span></span>{</span><br><span class="line">    <span class="comment">//*p 只读</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><ol start="5" type="1"><li>面向对象中没有const会带来很大的访问权限的问题</li></ol><h3 id="实例说明指针">1.3.2. 实例说明指针</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x=<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> *p = &amp;x;</span><br><span class="line">cout &lt;&lt; <span class="string">" x "</span> &lt;&lt; &amp;x  &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">" p "</span> &lt;&lt; &amp;p &lt;&lt; p &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">"*p "</span> &lt;&lt; p &lt;&lt;  *p &lt;&lt; endl;<span class="comment">//*p = x</span></span><br><span class="line"><span class="comment">//Name   Addr    Value</span></span><br><span class="line"><span class="comment">//x    0012FF7C   10</span></span><br><span class="line"><span class="comment">//p    0012FF78   0012FF7C</span></span><br><span class="line"><span class="comment">//*p   0012FF7C   10</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c = <span class="number">128</span>;</span><br><span class="line"><span class="type">int</span> * q = <span class="built_in">const_cast</span>&lt;<span class="type">int</span> *&gt;(&amp;c);<span class="comment">//强制类型转换</span></span><br><span class="line">*q = <span class="number">111</span>;<span class="comment">//企图通过变量指针修改常量</span></span><br><span class="line">cout &lt;&lt; <span class="string">" c "</span> &lt;&lt; &amp;c &lt;&lt; c &lt;&lt; endl;</span><br><span class="line"><span class="comment">//这里的c是符号常量，所以在编译的时候，符号常量已经变为128了，相当于define</span></span><br><span class="line">cout &lt;&lt; <span class="string">" q "</span> &lt;&lt; &amp;q &lt;&lt; q &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">"*q "</span> &lt;&lt; q &lt;&lt; *q &lt;&lt; endl;</span><br><span class="line"><span class="comment">//Name   Addr     Value</span></span><br><span class="line"><span class="comment">//c    0012FF74    128</span></span><br><span class="line"><span class="comment">//q    0012FF70    0012FF74</span></span><br><span class="line"><span class="comment">//*q   0012FF74    111</span></span><br><span class="line"><span class="comment">//why?为什么这个单元对于c是128，而对于q这个单元是111，见上面，确实已经修改成111了</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showBytes</span><span class="params">(<span class="type">void</span> *q, <span class="type">int</span> n)</span><span class="comment">//查看内存</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cout &lt;&lt; n &lt;&lt; endl;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *p = (<span class="type">unsigned</span> <span class="type">char</span> *)q;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++){</span><br><span class="line">        cout &lt;&lt; (<span class="type">void</span> *)(p+i) &lt;&lt; <span class="string">" : "</span>&lt;&lt; <span class="built_in">setw</span>(<span class="number">2</span>) &lt;&lt; hex &lt;&lt; (<span class="type">int</span>)*(p+i) &lt;&lt; <span class="string">" "</span>;<span class="comment">//这里是很重要的</span></span><br><span class="line"><span class="keyword">if</span> ( (i+<span class="number">1</span>) %<span class="number">4</span> ==<span class="number">0</span> ) cout &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line">cout &lt;&lt; dec &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//cout利用控制符dec、hex和oct，分别输出十进制、十六进制和八进制显示整数</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="指针常量">1.3.3. 指针常量</h3><ol type="1"><li><code>&lt;类型&gt;* const&lt;指针变量&gt;</code></li><li>在定义时初始化</li><li>p(constant)-&gt;x(variable)</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="type">int</span> *<span class="type">const</span> p = &amp;x;<span class="comment">//p就始终如一的指向x这个单元</span></span><br><span class="line"><span class="comment">//同时这个单元是可变的</span></span><br><span class="line"></span><br><span class="line">p = &amp;y;<span class="comment">//错误的</span></span><br></pre></td></tr></table></figure><ol start="4" type="1"><li>const int * const p是非常强的指针约束</li></ol><h1 id="指针与函数">2. 指针与函数</h1><ol type="1"><li>指针作为形参<ol type="1"><li>提高传输效率</li><li>函数副作用</li><li>常量指针</li></ol></li><li>程序基本组织单位就是函数</li><li>进阶:Function Pointer指向函数的指针</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> A[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> T[<span class="number">2</span>];<span class="comment">//相当于int[2] T</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> (*fp)(<span class="type">int</span>);<span class="comment">//fp是指向函数的指针</span></span><br><span class="line"><span class="built_in">double</span> (<span class="type">int</span>) * fp;<span class="comment">//上面的理解，不能这么写</span></span><br><span class="line"><span class="function"><span class="type">double</span> *<span class="title">fp</span> <span class="params">(<span class="type">int</span>)</span></span>;<span class="comment">//符合C++语法，fp是一个函数，参数是int，返回值是double*</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">double</span> <span class="params">(*FP)</span><span class="params">(<span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">double</span> <span class="params">(*)</span><span class="params">(<span class="type">int</span>)</span> FP</span>;<span class="comment">//上面那个的理解</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">f</span><span class="params">(<span class="type">int</span> x)</span></span>{}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">g</span><span class="params">()</span></span>{}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    FP fp;</span><br><span class="line">    fp = f;   <span class="comment">//相当于fp = &amp;f;为函数指针赋值</span></span><br><span class="line">    (*fp)(<span class="number">10</span>);<span class="comment">//相当于fp(10);</span></span><br><span class="line">    fp = g;  <span class="comment">//Error</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><ol type="1"><li>(*fp)就是函数的执行</li></ol><h2 id="函数指针实现框架如何写一个框架">2.1.函数指针实现框架(如何写一个框架)</h2><ol type="1"><li>一个计算任务的执行(加法/减法)</li><li>是一个前缀输入</li></ol><h3 id="第一版高耦合版本">2.1.1. 第一版:高耦合版本</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span> </span>{<span class="keyword">return</span> a+b;}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">minus</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span> </span>{ <span class="keyword">return</span> a-b; }</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="type">char</span> c; </span><br><span class="line"><span class="type">int</span> op1, op2;</span><br><span class="line">cin &gt;&gt; c;</span><br><span class="line"><span class="keyword">while</span> (c != <span class="string">'#'</span>){<span class="comment">//#是终止符</span></span><br><span class="line">        <span class="comment">//类似Windows中的一些时间的参数</span></span><br><span class="line">        <span class="comment">//以下对应getTask()</span></span><br><span class="line">        cin &gt;&gt; op1;</span><br><span class="line">    cin &gt;&gt; op2;</span><br><span class="line">        <span class="comment">//以下对应executeTask()</span></span><br><span class="line">        <span class="keyword">switch</span> (c){</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'+'</span>: cout &lt;&lt; <span class="built_in">add</span>(op1,op2) &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'-'</span>: cout &lt;&lt; <span class="built_in">minus</span>(op1,op2) &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">       cin &gt;&gt; c;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="第二版剥离io部分">2.1.2. 第二版:剥离IO部分</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//剥离IO getMessage，和操作系统一样</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Task</span>{</span><br><span class="line">    <span class="type">int</span> op1;</span><br><span class="line">    <span class="type">int</span> op2;</span><br><span class="line">    OPRAND_TYPE op;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">OPRAND_TYPE</span> { END=<span class="number">-1</span>,  ADD,  MINUS};</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>   </span>{ <span class="keyword">return</span> a+b; }</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">minus</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span> </span>{ <span class="keyword">return</span> a-b; }</span><br><span class="line"><span class="comment">//add 和 minus 抽象成函数指针</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span>  <span class="title">int</span> <span class="params">(*FP)</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">OPRAND_TYPE <span class="title">getTask</span><span class="params">(Task &amp;task)</span></span>{</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    cin &gt;&gt; c;</span><br><span class="line">    <span class="keyword">switch</span> (c){</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'#'</span>:</span><br><span class="line">            task.op = END;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">            task.op = ADD; </span><br><span class="line">        cin &gt;&gt; task.op1;</span><br><span class="line">        cin &gt;&gt; task.op2;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">            task.op = MINUS; </span><br><span class="line">        cin &gt;&gt; task.op1;</span><br><span class="line">        cin &gt;&gt; task.op2;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> task.op;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="第三版抽离计算部分">2.1.3. 第三版:抽离计算部分</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽离计算部分第一版</span></span><br><span class="line"><span class="comment">//如何修改可以使得无论多少个任务都不导致如下方法的修改</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">executeTask</span><span class="params">(<span class="type">const</span> Task task)</span></span>{</span><br><span class="line">    FP fp;</span><br><span class="line">    <span class="keyword">switch</span>(task.op){</span><br><span class="line">        <span class="keyword">case</span> ADD: fp = app;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MINUS : fp = minus;<span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">fp</span>(task.op1,task.op2)</span><br><span class="line">}</span><br><span class="line"><span class="comment">//抽离计算部分第二版代码</span></span><br><span class="line"><span class="comment">//Table Driven</span></span><br><span class="line">FP op[<span class="number">2</span>] = {add, minus};</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">executeTask</span><span class="params">(<span class="type">const</span> Task task)</span></span>{</span><br><span class="line">    op[task.op](task.op1,task.op2);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><ol type="1"><li>此时发生修改，我们只需要修改枚举类型和函数类型</li></ol><h3 id="最后一版主方法集成">2.1.4. 最后一版:主方法集成</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Task task;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">getTask</span>(task) != END)</span><br><span class="line">        <span class="built_in">executeTask</span>(task);<span class="comment">//call by reference</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">//组织改善:利用define，集合IDE</span></span><br><span class="line"><span class="comment">//完成时间处理、协议解析、服务框架</span></span><br></pre></td></tr></table></figure><h2 id="函数指针实现泛型">2.2. 函数指针实现泛型</h2><h3 id="冒泡排序第一版默认int型排序">2.2.1.冒泡排序第一版:默认int型排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一版实现冒泡排序，默认数据类型为int</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MySort</span><span class="params">(<span class="type">int</span> A[],<span class="type">unsigned</span> <span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> i=<span class="number">1</span>;i&lt;num;i++){</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">unsigned</span> j=<span class="number">0</span>;j&lt;num-i;j++)</span><br><span class="line">            <span class="keyword">if</span>(A[j] &gt; A[j+<span class="number">1</span>]){</span><br><span class="line">                <span class="type">int</span> tmp = A[j];</span><br><span class="line">                A[j] = A[j+<span class="number">1</span>];</span><br><span class="line">                A[j+<span class="number">1</span>] = tmp;</span><br><span class="line">            }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="冒泡排序第二版扩展复杂数据类型">2.2.2.冒泡排序第二版:扩展复杂数据类型</h3><ol type="1"><li>每一个数据块的大小可能是不确定的，所以我们需要确定每一个块的大小(width)</li><li>void * base对应首地址</li><li>解决序关系的处理</li><li>解决数据块的交换</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MySort</span><span class="params">(<span class="type">void</span> *base, <span class="type">unsigned</span> width,<span class="type">unsigned</span> num，<span class="type">int</span>(*compare)(<span class="type">const</span> <span class="type">void</span> *elem1,<span class="type">const</span> <span class="type">void</span> *elem2))</span></span>{<span class="comment">//这部分意味着我们必须要传入一个compare的函数</span></span><br><span class="line">    <span class="type">char</span> *A = (<span class="type">char</span>*) base;<span class="comment">//void* 是不可以进行移动的</span></span><br><span class="line">    <span class="type">char</span> *tmp = (<span class="type">char</span>*)<span class="built_in">malloc</span>(width);<span class="comment">//申请堆空间</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> i=<span class="number">1</span>;i&lt;num;i++){</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">unsigned</span> j=<span class="number">0</span>;j&lt;num-i;j++)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">compare</span>(A + j * width,A + (j+<span class="number">1</span>)*width) &gt; <span class="number">0</span>){<span class="comment">//序关系由函数确定</span></span><br><span class="line">                <span class="built_in">memcpy</span>(tmp,A + j * width,width);<span class="comment">//tmp = A[j]</span></span><br><span class="line">                <span class="built_in">memcpy</span>(A + j * width,A+(j+<span class="number">1</span>)*width,width);<span class="comment">//A[j] = A[j+1]</span></span><br><span class="line">                <span class="built_in">memcpy</span>(A + (j + <span class="number">1</span>) * width,tmp,width);<span class="comment">//A[j + 1] = tmp</span></span><br><span class="line">            }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">free</span>(tmp);<span class="comment">//释放这部分的空间</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="冒泡排序第三版使用泛型函数实现调用部分">2.2.3.冒泡排序第三版:使用泛型函数实现调用部分</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TStudent</span></span><br><span class="line">{   <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">};</span><br><span class="line">TStudent student[] = {...};</span><br><span class="line"><span class="type">int</span> num = <span class="built_in">sizeof</span>(student)/<span class="built_in">sizeof</span>(student[<span class="number">0</span>]);<span class="comment">//计算出来有多少个</span></span><br><span class="line"><span class="type">int</span> width = <span class="built_in">sizeof</span>(student[<span class="number">0</span>]);<span class="comment">//计算出来宽度</span></span><br><span class="line"><span class="built_in">MySort</span>(student, width, num, icompare);</span><br><span class="line"><span class="built_in">MySort</span>(student, width, num, scompare);</span><br><span class="line"><span class="comment">//compare不用给大小，因为compare是调用者给出的，显然不用给出width了</span></span><br><span class="line"><span class="comment">//call back function：在运行中反过来调用</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">icompare</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *elem1, <span class="type">const</span> <span class="type">void</span> *elem2)</span></span>{</span><br><span class="line">    TStudent *p1 = (TStudent *)elem1;</span><br><span class="line">    TStudent *p2 = (TStudent *)elem2;</span><br><span class="line">    <span class="keyword">return</span> p1-&gt;age - p2-&gt;age;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">scompare</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *elem1, <span class="type">const</span> <span class="type">void</span> *elem2)</span></span>{</span><br><span class="line">    TStudent *p1 = (TStudent *)elem1;</span><br><span class="line">    TStudent *p2 = (TStudent *)elem2;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strcmp</span>(p1-&gt;name, p2-&gt;name);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="冒泡排序另一种实现简单数据类型">2.2.4.冒泡排序另一种实现:简单数据类型</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MySort</span><span class="params">(T A[],<span class="type">unsigned</span> T num)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> i=<span class="number">1</span>;i&lt;num;i++){</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">unsigned</span> j=<span class="number">0</span>;j&lt;num-i;j++)</span><br><span class="line">            <span class="keyword">if</span>(A[j] &gt; A[j+<span class="number">1</span>]){</span><br><span class="line">                T tmp = A[j];</span><br><span class="line">                A[j] = A[j+<span class="number">1</span>];</span><br><span class="line">                A[j+<span class="number">1</span>] = tmp;</span><br><span class="line">            }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> a[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">sort</span>(a,<span class="number">100</span>);<span class="comment">//此时的T转换成为int(对应类型)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>{...}</span><br><span class="line">C a[<span class="number">300</span>];</span><br><span class="line"><span class="built_in">sort</span>(a,<span class="number">300</span>);<span class="comment">//编译器可以将其变为C,但是有问题</span></span><br><span class="line"><span class="comment">//我们需要重载&gt;运算符</span></span><br></pre></td></tr></table></figure><h3 id="lambda表达式">2.2.5. lambda表达式</h3><p>直接给出即可</p><h2 id="函数指针">2.3. 函数指针</h2><ol type="1"><li>计算一元函数在某区间上的定积分</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">integrate</span><span class="params">(<span class="type">double</span> (*f)(<span class="type">double</span>),<span class="type">double</span> a, <span class="type">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>{ … <span class="built_in">f</span>(x),  a ,  b, …  }</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">my_func</span><span class="params">(<span class="type">double</span> x)</span></span>{ … }</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="built_in">integrate</span>(sin,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">integrate</span>(cos,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">integrate</span>(my_func,<span class="number">1</span>,<span class="number">10</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="一维数组">2.3.1. 一维数组</h3><p><img src="https://s2.loli.net/2022/04/22/2Ah4M9ogc75nliv.png"></p><ol type="1"><li>注意右侧的第二个部分:可以控制p的移动情况</li><li><code>*(p+i)</code>:p不移动</li><li><code>*(p++)</code>:p移动</li><li><code>int *p = a</code>:这时候a表示的是数组的首地址<ul><li>这里传递的是<code>int * const</code></li><li>a[0]可以写为p[0]</li></ul></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> A[],<span class="type">int</span> n)</span></span>{</span><br><span class="line">    <span class="built_in">sizeof</span>(A)/<span class="built_in">sizeof</span>(A[<span class="number">0</span>])<span class="comment">//始终1，就是地址</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><ol type="1"><li><code>sizeof(a)</code>:是数组的整个块的大小</li><li><code>sizeof(a[0])</code>:是数组中一个元素的大小</li></ol><h3 id="二维数组">2.3.2. 二维数组</h3><p><img src="https://s2.loli.net/2022/04/22/BF8ghS1lKjUtNam.png"></p><ol type="1"><li>二维数组用一维方式访问</li><li><code>int *p = &amp;a[0][0]</code>:p指向的是T类型</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">12</span>;i++){</span><br><span class="line">    *(p++) = <span class="number">9</span>;<span class="comment">//越界了(对应一维数组的越界)，但是二维数组没有越界</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> T[<span class="number">2</span>];   </span><br><span class="line">T a[<span class="number">6</span>];<span class="comment">//int a[6][2]</span></span><br><span class="line">T *q = a;</span><br><span class="line"><span class="comment">//不使用T的方法</span></span><br><span class="line"><span class="type">int</span>[<span class="number">2</span>] *q;</span><br></pre></td></tr></table></figure><h1 id="指针与数组">3. 指针与数组</h1><ol type="1"><li>数组元素操作:下标表达式和访问效率<ol type="1"><li>a[i] == *(a+i)</li><li>&amp;a[i] == a+i</li></ol></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">sizeof</span>(a);<span class="comment">//数组大小</span></span><br><span class="line"><span class="built_in">sizeof</span>(a+<span class="number">1</span>);<span class="comment">//内存地址的长度，单位bytes</span></span><br><span class="line"><span class="type">int</span> *p;</span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">p = &amp;a[<span class="number">0</span>] == p = a;    </span><br><span class="line"></span><br><span class="line">a[i] == *(a+i) == *(p+i) == p[i]</span><br><span class="line">&amp;a[i] == a+i == p+i == &amp;p[i]</span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>多维数组</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> b[<span class="number">20</span>][<span class="number">10</span>];</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="comment">//typedef int T[10];</span></span><br><span class="line"><span class="comment">//T b[20];</span></span><br><span class="line"><span class="type">int</span> *q;</span><br><span class="line">q = &amp;b[<span class="number">0</span>][<span class="number">0</span>];<span class="comment">// q = b[0]</span></span><br><span class="line"><span class="comment">//b[i][j] == *(&amp;b[0][0] + i*10 + j) == *(q + i * 10 + j) == q[i*10 + j]</span></span><br><span class="line">T * p;<span class="comment">//int (*p)[10];</span></span><br><span class="line">p = &amp;b[<span class="number">0</span>];<span class="comment">// p = b</span></span><br><span class="line"><span class="comment">//b[i][j] == *(*(b+i)+j) == *(*(p+i)+j) == p[i][j]</span></span><br></pre></td></tr></table></figure><ol start="3" type="1"><li>通过指针和数组元素存储的关系来快速访问数组元素</li></ol><h2 id="降维操作">3.1. 降维操作</h2><ol type="1"><li>越界操作:C++认为是允许的，只要这块内存空间在我们的控制范围内即可</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span>  <span class="title">maximum</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;n;k++)</span><br><span class="line">        <span class="keyword">if</span> (a[k] &gt; max)</span><br><span class="line">max = a[k];  </span><br><span class="line"><span class="keyword">return</span> max;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span>  A[<span class="number">2</span>][<span class="number">4</span>] = { {<span class="number">68</span>,<span class="number">69</span>,<span class="number">70</span>,<span class="number">71</span>} , {<span class="number">85</span>,<span class="number">86</span>,<span class="number">87</span>,<span class="number">89</span>}};</span><br><span class="line">    cout &lt;&lt; <span class="string">"the max grade is"</span> &lt;&lt; <span class="built_in">maximum</span>(A[<span class="number">0</span>],<span class="number">2</span>*<span class="number">4</span>);<span class="comment">//maximum(&amp;A[0][0],2*4) =&gt;maximum(&amp;A[0][0],sizeof(A)/sizeof(A[0][0]))</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="升维操作重要">3.2. 升维操作(重要)</h2><ol type="1"><li>因为申请内存空间的时候只能申请到线性部分</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">(<span class="type">int</span> a[],  <span class="type">int</span> n)</span></span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)  {</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    }</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">(<span class="type">int</span> a[][<span class="number">2</span>], <span class="type">int</span> n)</span></span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++) {</span><br><span class="line">            cout &lt;&lt; a[i][j] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">            cout &lt;&lt; *(a+i)+j &lt;&lt; <span class="string">" :"</span> &lt;&lt; a[i][j] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">            <span class="comment">//四个换一行</span></span><br><span class="line">            <span class="keyword">if</span> ((i*<span class="number">2</span>+j+<span class="number">1</span>)%<span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">                cout &lt;&lt; endl;</span><br><span class="line">        }</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">(<span class="type">int</span> a[][<span class="number">2</span>][<span class="number">3</span>], <span class="type">int</span> n)</span></span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k=<span class="number">0</span>;k&lt;<span class="number">3</span>;k++){</span><br><span class="line">                cout &lt;&lt; a[i][j][k] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">                cout &lt;&lt; *(*(a+i)+j)+k &lt;&lt; <span class="string">" :"</span> &lt;&lt; a[i][j][k] &lt;&lt; <span class="string">"  "</span>;</span><br><span class="line">                <span class="comment">//换行输出</span></span><br><span class="line">                <span class="keyword">if</span> ((i*<span class="number">6</span>+j*<span class="number">3</span>+k+<span class="number">1</span>)%<span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">                    cout &lt;&lt; endl;</span><br><span class="line">            }</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="type">int</span> b[<span class="number">12</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">12</span>;i++)  b[i] = i+<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">show</span>(b,<span class="number">12</span>);</span><br><span class="line">    <span class="comment">//二维数组</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">int</span> T[<span class="number">2</span>];</span><br><span class="line">    <span class="built_in">show</span>((T*)b,<span class="number">6</span>);<span class="comment">//show((int (*)[2])b,6),一定有括号</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//三维数组</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">int</span> T1[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">typedef</span> T1 T2[<span class="number">2</span>];</span><br><span class="line">    <span class="built_in">show</span>((T2*)b,<span class="number">2</span>);<span class="comment">//show((int (*)[2][3])b,2)</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="指针数组">3.3. 指针数组</h2><ol type="1"><li>main函数:<code>int main(int argc,char * argv[],char * env[])</code><ul><li>argc:参数个数(包含命令)</li><li>argv:命令行参数</li><li>env:环境参数(为什么这个不必指出长度?因为\0结束，一个结束符)</li></ul></li><li>Eg.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ping  -t  192.168.0.1</span><br><span class="line">argc : 3</span><br><span class="line">argv:  ping / -t / 192.168.0.1</span><br><span class="line">env：</span><br></pre></td></tr></table></figure><ol start="3" type="1"><li>数组中的元素为指针(以下两种方式实现是不同的:内存空间的分配)</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *s1[] = {<span class="string">"C++"</span>, <span class="string">"PASCAL"</span>, <span class="string">"FORTRAN"</span>};</span><br><span class="line"><span class="type">char</span> s2[][<span class="number">8</span>] = {<span class="string">"C++"</span>, <span class="string">"PASCAL"</span>, <span class="string">"FORTRAN"</span>};</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/22/KjcuFs9mfv5ah6J.png"> <img src="https://s2.loli.net/2022/04/22/UWdzeHFcJhPo4BE.png"></p><h2 id="可变参数">3.4. 可变参数</h2><ol type="1"><li><code>int printf(const char*,...)</code>:后面是可变参数，由调用者决定。</li><li><code>const char*</code>:是调用者和被调用者之间的约定</li></ol><p><img src="https://s2.loli.net/2022/04/22/gawv1WR2hsOAKux.png"></p><ol start="3" type="1"><li>printf("%d%c",x,y);<ol type="1"><li>少写一个也没问题</li><li>这种约定是不受保护的，给出参数个数和类型，表示如何取</li><li>active frame:之前的active frame地址要保存下来</li></ol></li></ol><h2 id="实现myprint">3.5. 实现Myprint</h2><ol type="1"><li>alignment的说明(内存地址)</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">目标求Q</span><br><span class="line">X = Qn + r, -n &lt; r &lt;= 0 Q大于X，能放下，并且是整数倍</span><br><span class="line">思考:X = qn + r, 0 &lt;= r &lt; n</span><br><span class="line">    q = x/n</span><br><span class="line">    r = x%n</span><br><span class="line">    这样子就能求了</span><br><span class="line"></span><br><span class="line">X + n - 1 = Qn + r1, 0 &lt;= r1 &lt; n</span><br><span class="line">       Qn = ((x + n - 1)/ n) * n</span><br><span class="line">n 是 2 的幂次 =&gt; 左移右移都是乘以或者除以2</span><br><span class="line">n = 2 的 m 次方</span><br><span class="line">所以先乘以2再除以2，相当于后m为全部清0</span><br><span class="line">也就等价于(x+n-1) &amp; (~(n-1))</span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>具体的内存C++实现</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//platform : x86 宏的说明，这不是在库文件中已经定义了的</span></span><br><span class="line"><span class="keyword">typedef</span>  <span class="type">char</span> *va_list; 　　</span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  _INTSIZEOF(x)  ((sizeof(x) + sizeof(int) - 1) &amp; ~(sizeof(int) - 1)) <span class="comment">//alignment 偏移的大小</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  va_start(ap,v) ( ap = (va_list)&amp;v + _INTSIZEOF(v) )</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  va_arg(ap,t)   ( *(t *)((ap += _INTSIZEOF(t)) - _INTSIZEOF(t)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  va_end(ap)     ( ap = (va_list)0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyPrint</span><span class="params">(<span class="type">char</span> *s, ...)</span></span>{</span><br><span class="line">    va_list marker;<span class="comment">//拿到一个指针</span></span><br><span class="line">    <span class="built_in">va_start</span>(marker,s);<span class="comment">//找到参数的位置，s的位置</span></span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="keyword">while</span> ((c=s[i]) != <span class="string">'\0'</span>){</span><br><span class="line">        <span class="keyword">if</span> (c != <span class="string">'%'</span>)</span><br><span class="line">            cout &lt;&lt; c;</span><br><span class="line">        <span class="keyword">else</span>{</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">switch</span> (c=s[i]){</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'f'</span>: cout &lt;&lt; <span class="built_in">va_arg</span>(marker,<span class="type">double</span>); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'d'</span>: cout &lt;&lt; <span class="built_in">va_arg</span>(marker,<span class="type">int</span>);<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'c'</span>: cout &lt;&lt; <span class="built_in">va_arg</span>(marker,<span class="type">char</span>);<span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">    }</span><br><span class="line">       i++;</span><br><span class="line">    }</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">va_end</span>(marker);<span class="comment">//将当前指针回归原始状态          </span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> num, ...)</span> </span>{</span><br><span class="line">va_list marker;<span class="comment">//拿到一个指针</span></span><br><span class="line"><span class="built_in">va_start</span>(marker, num);</span><br><span class="line"><span class="type">int</span> maxNum = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++) {</span><br><span class="line">tmp = <span class="built_in">va_arg</span>(marker, <span class="type">int</span>);</span><br><span class="line"><span class="keyword">if</span> (tmp &gt; maxNum) {</span><br><span class="line">maxNum = tmp;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">va_end</span>(marker);<span class="comment">//将当前指针回归原始状态      </span></span><br><span class="line"><span class="keyword">return</span> maxNum;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">MyPrint</span>(<span class="string">"double: %f integer: %d string: %c "</span>,<span class="number">1.1</span>, <span class="number">100</span>, <span class="string">'A'</span>);</span><br><span class="line">    cout &lt;&lt; <span class="built_in">max</span>(<span class="number">5</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">50</span>,<span class="number">30</span>,<span class="number">40</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><ol type="1"><li>格式化串攻击:偷摸摸搞到其他部分的内存</li></ol><h1 id="指针与结构">4. 指针与结构</h1><ol type="1"><li>结构成分的访问:<code>(*p).x == p-&gt;x</code></li><li>结构作为函数参数:<ol type="1"><li>大块数据传输</li><li>const</li></ol></li></ol><h1 id="多级指针">5. 多级指针</h1><ol type="1"><li>基类型为指针类型</li><li>指向指针的指针</li><li>编写一个函数交换两个字符串</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">myswap</span><span class="params">(<span class="type">int</span> *p1, <span class="type">int</span> *p2)</span> </span>{</span><br><span class="line"><span class="type">int</span>* tmp = p1;</span><br><span class="line">p1 = p2;</span><br><span class="line">p2 = tmp;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myswap2</span><span class="params">(<span class="type">int</span> &amp;p1, <span class="type">int</span> &amp; p2)</span> </span>{</span><br><span class="line"><span class="type">int</span> tmp = p1;</span><br><span class="line">p1 = p2;</span><br><span class="line">p2 = tmp;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myswap</span><span class="params">(<span class="type">char</span> **p1, <span class="type">char</span> **p2)</span> </span>{</span><br><span class="line"><span class="type">char</span> *tmp = *p1;</span><br><span class="line">*p1 = *p2;</span><br><span class="line">*p2 = tmp;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="type">char</span> *p1 =(<span class="type">char</span>*) <span class="string">"abcd"</span>;</span><br><span class="line"><span class="type">char</span> *p2 =(<span class="type">char</span>*) <span class="string">"1234"</span>;</span><br><span class="line"><span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">200</span>;</span><br><span class="line"><span class="built_in">myswap</span>(&amp;a, &amp;b);</span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">" "</span> &lt;&lt; b &lt;&lt; endl;<span class="comment">//100 200</span></span><br><span class="line"><span class="built_in">myswap2</span>(a, b);</span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">" "</span> &lt;&lt; b &lt;&lt; endl;<span class="comment">//200 100</span></span><br><span class="line"><span class="built_in">myswap</span>(&amp;p1, &amp;p2);</span><br><span class="line">cout &lt;&lt; p1 &lt;&lt; <span class="string">" "</span> &lt;&lt; p2 &lt;&lt; endl;<span class="comment">//1234 abcd</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><h1 id="动态变量">6. 动态变量</h1><ol type="1"><li>动态:<ol type="1"><li>大小</li><li>生命周期</li></ol></li><li>非编译时刻确定</li><li>是在heap中申请存储空间</li></ol><h2 id="申请动态变量">6.1. 申请动态变量</h2><ol type="1"><li><code>new &lt;类型名&gt; [&lt;整型表达式&gt;]</code></li><li>malloc也可以用来申请动态变量(但是建议使用new)</li><li>new和malloc两者区别:<ol type="1"><li>语法:强制类型转换</li><li>语义:构造函数</li></ol></li><li>申请内存的时候有可能会申请失败:<ol type="1"><li>new之后一定要判断p是不是NULL</li><li>如果不是NULL，一定是有效的</li></ol></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//--------------------------------------</span></span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> *p = <span class="keyword">new</span> <span class="type">int</span>;</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line"><span class="type">int</span> *p = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="type">int</span> &amp;a = p;</span><br></pre></td></tr></table></figure><h3 id="使用malloc分配空间">6.1.1. 使用malloc分配空间</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//malloc</span></span><br><span class="line"><span class="function"><span class="type">void</span> * <span class="title">malloc</span> <span class="params">(<span class="type">unsigned</span> <span class="type">int</span> size)</span></span></span><br><span class="line"><span class="function">p </span>= (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>));  <span class="comment">//new int </span></span><br><span class="line">q = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>)*<span class="number">20</span>);    <span class="comment">//new int [20]</span></span><br></pre></td></tr></table></figure><h3 id="分配连续空间涉及多维数组">6.1.2. 分配连续空间(涉及多维数组)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//---------------------------------------</span></span><br><span class="line"><span class="type">int</span> *p = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>];<span class="comment">//分配一块连续空间</span></span><br><span class="line"><span class="type">int</span> *p = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>)*<span class="number">10</span>)</span><br><span class="line"><span class="built_in">int</span> (*p2)[<span class="number">5</span>] = (<span class="built_in">int</span> (*)[<span class="number">5</span>])p;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    p[i] = i+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">q = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">2</span>][<span class="number">5</span>];<span class="comment">//错误的，没有这种写法</span></span><br><span class="line"><span class="comment">//想用二维数组访问，升维操作</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++)</span><br><span class="line">{   <span class="keyword">for</span> (<span class="type">int</span> k=<span class="number">0</span>;k&lt;<span class="number">5</span>;k++)</span><br><span class="line">        cout &lt;&lt; p2[j][k] &lt;&lt; <span class="string">"   "</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------------------------</span></span><br><span class="line"><span class="comment">//多维数组使用构造数据类型申请内存</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> i5Array [<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    i5Array *p = <span class="keyword">new</span> i5Array [<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k=<span class="number">0</span>;k&lt;<span class="number">5</span>;k++)</span><br><span class="line">            p[j][k] = (j*<span class="number">5</span>)+(k+<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="面向对象中的new关键字">6.1.3. 面向对象中的new关键字</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//---------------------------------------</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line"></span><br><span class="line">A *p = <span class="keyword">new</span> A;<span class="comment">//调用默认构造函数</span></span><br><span class="line">A *p = (A*) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(A));<span class="comment">//只是分配空间</span></span><br><span class="line"><span class="comment">//---------------------------------------</span></span><br><span class="line"><span class="keyword">namespace</span> std{<span class="comment">//处理内存</span></span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*new_handler)</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">new_handler <span class="title">set_new_handler</span><span class="params">(new_handler p)</span> <span class="title">throw</span><span class="params">()</span></span>;</span><br><span class="line">}<span class="comment">//不满意应对，我们可以重载方法来处理</span></span><br></pre></td></tr></table></figure><h2 id="归还动态变量">6.2. 归还动态变量</h2><ol type="1"><li>操作符:<code>new -- delete|delete[]</code><ol type="1"><li>delete:调用数组内第一个对象的析构函数</li><li>delete[]:调用数组内所有的对象的析构函数</li><li>空间都会被归还</li></ol></li><li>操作符:<code>malloc -- free</code><ol type="1"><li>free不会调用<strong>析构函数</strong>。</li></ol></li><li>如何处理归还的大小(cookie):在数据的前面会加入一个size:这也就是为什么我们一定要复制指针，然后归还地址归还的是原地址。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">8</span>; i ++){</span><br><span class="line">    *(p++) = <span class="number">128</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span>[] p;</span><br><span class="line"><span class="comment">//很大的问题，因为p移动过，这时候指针想上看size:128，就向下归还128个字节。</span></span><br></pre></td></tr></table></figure><ol type="1"><li>由于C++没有GC，所以要防止memory leak<ul><li>析构函数:不仅仅是归还自己的内存，还有窗口资源和文件等东西归还掉。</li></ul></li></ol><h2 id="动态变量的应用">6.3. 动态变量的应用</h2><ol type="1"><li>数据结构:<ol type="1"><li>链表(单、双) --栈、队列</li><li>树、图</li></ol></li><li>链表的结点的定义</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">NODE</span>{</span><br><span class="line">    <span class="type">int</span>  content;</span><br><span class="line">    NODE *next;</span><br><span class="line">};</span><br><span class="line">NODE *head=<span class="literal">NULL</span>;<span class="comment">//使用头结点</span></span><br></pre></td></tr></table></figure><ol start="3" type="1"><li>具体应用：硬盘上的文件存放:一种实现是单链表<ol type="1"><li>文件分配表FAT:用来存储数据的开始的位置。</li><li>FAT一旦被破坏就导致所有的数据丢失</li></ol></li></ol><h2 id="单链表---应用">6.4. 单链表 - 应用</h2><h3 id="单链表的插入">6.4.1. 单链表的插入</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//节点初始化</span></span><br><span class="line">NODE *p = <span class="keyword">new</span> NODE;</span><br><span class="line">p-&gt;content = _value;</span><br><span class="line">p-&gt;next = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><blockquote><p>head是不可以动的</p></blockquote><ol type="1"><li>表头进行插入</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//链表为空  </span></span><br><span class="line">head = p;</span><br><span class="line"><span class="comment">//链表不为空</span></span><br><span class="line">p-&gt;next = head;</span><br><span class="line">head = p;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/22/FIThb8g2MN4zZYJ.png"> <img src="https://s2.loli.net/2022/04/22/bZvmg6TKupHnFSj.png"></p><ol start="2" type="1"><li>表尾进行插入</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//表尾插入</span></span><br><span class="line">NODE *q = head;</span><br><span class="line"><span class="keyword">while</span> (q-&gt;next != <span class="literal">NULL</span>)<span class="comment">//从头结点找到尾结点</span></span><br><span class="line">    q = q-&gt;next;</span><br><span class="line">q-&gt;next = p;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/22/pn8WOKsVfb7FzcI.png"></p><ol start="3" type="1"><li>表中间插入:插在链表中某结点(值为a)的后面<ul><li>短路表达式:如果部分子表达式的值已经能确定表达式的值，则其他部分不会进行计算</li></ul></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">NODE *q = head;</span><br><span class="line"><span class="keyword">while</span>  (q != <span class="literal">NULL</span> &amp;&amp; q-&gt;content != a ){</span><br><span class="line">    q = q-&gt;next;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (q != <span class="literal">NULL</span>){</span><br><span class="line">    <span class="comment">//存在a</span></span><br><span class="line">    p-&gt;next = q-&gt;next;</span><br><span class="line">    q-&gt;next = p;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">    <span class="comment">//不存在a</span></span><br><span class="line">    cout &lt;&lt; <span class="string">"Not found!"</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><ol start="4" type="1"><li>表中间插入:插在链表中某结点(值为a)的前面<ol type="1"><li>链表永远不为空(永远不发生在头的插入)</li><li>Guard node:(一个Dummy结点在最前面)</li></ol></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插在链表中某结点(值为a)的前面</span></span><br><span class="line">NODE *q1=<span class="literal">NULL</span>, *q2=head;<span class="comment">//q1是q2的前一个结点</span></span><br><span class="line"><span class="keyword">while</span>(q2 !=<span class="literal">NULL</span> &amp;&amp; q2-&gt;content != a){</span><br><span class="line">    q1 = q2;</span><br><span class="line">    q2 = q2-&gt;next;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (q2 != <span class="literal">NULL</span>){<span class="comment">//存在a</span></span><br><span class="line">    <span class="keyword">if</span>(q1 == <span class="literal">NULL</span>){<span class="comment">// a是第一个结点</span></span><br><span class="line">        p-&gt;next = q2;</span><br><span class="line">        head = p;</span><br><span class="line">    }<span class="keyword">else</span>{<span class="comment">// a不是第一个结点</span></span><br><span class="line">        p-&gt;next = q2;</span><br><span class="line">        q1-&gt;next = p;</span><br><span class="line">    }</span><br><span class="line">}<span class="keyword">else</span>{<span class="comment">//不存在a</span></span><br><span class="line">    cout &lt;&lt; <span class="string">"Not found!"</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="单链表的删除">6.4.2. 单链表的删除</h3><ol type="1"><li>删除值为a的链表结点</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">NODE *q1=<span class="literal">NULL</span>, *q2=head;<span class="comment">//q1是q2前面的一个结点</span></span><br><span class="line"><span class="keyword">while</span> (q2 != <span class="literal">NULL</span> &amp;&amp; q2-&gt;content != a){</span><br><span class="line">    q1 = q2;</span><br><span class="line">    q2 = q2-&gt;next;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (q2 != <span class="literal">NULL</span>) {<span class="comment">//存在a</span></span><br><span class="line">    <span class="keyword">if</span> (q1 == <span class="literal">NULL</span>){</span><br><span class="line">        <span class="comment">// a是第一个结点</span></span><br><span class="line">        head = q2-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> q2;</span><br><span class="line">    }<span class="keyword">else</span>{<span class="comment">// a不是第一个结点</span></span><br><span class="line">        q1-&gt;next = q2-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> q2;</span><br><span class="line">    }</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">    <span class="comment">//不存在a</span></span><br><span class="line">    cout &lt;&lt; <span class="string">"Not found!"</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="单向排序链----应用">6.5. 单向排序链 -- 应用</h2><ol type="1"><li>结点定义</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>{</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    Node *next;</span><br><span class="line">} *first = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><h3 id="释放单向排序链">6.5.1. 释放单向排序链</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">release</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="comment">//释放整个单向排序链</span></span><br><span class="line">    <span class="keyword">while</span>(first != <span class="literal">NULL</span>){</span><br><span class="line">        Node *p = first;</span><br><span class="line">        first = first-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="打印单向排序链">6.5.2. 打印单向排序链</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="comment">//打印整个单向排序链</span></span><br><span class="line">    Node *p = first;</span><br><span class="line">    <span class="keyword">while</span> (p){</span><br><span class="line">        cout &lt;&lt;  p-&gt;k &lt;&lt; endl;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="插入单向排序链">6.5.3. 插入单向排序链</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">insert</span>(Node *first, <span class="type">int</span> n);</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> k)</span></span>{</span><br><span class="line">    Node *p = <span class="keyword">new</span> Node;</span><br><span class="line">    p-&gt;k = k;</span><br><span class="line">    p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//创建新结点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!first){</span><br><span class="line">        <span class="comment">//链表为空</span></span><br><span class="line">        first = p;</span><br><span class="line">    }<span class="keyword">else</span> <span class="keyword">if</span> (k &lt; first-&gt;k){</span><br><span class="line">        <span class="comment">//插入在头结点</span></span><br><span class="line">        p-&gt;next = first;</span><br><span class="line">        first = p;</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="comment">//插入在后面</span></span><br><span class="line">        Node *p1 = first;</span><br><span class="line">        <span class="keyword">while</span> (p1-&gt;next != <span class="literal">NULL</span> &amp;&amp; k &gt; p1-&gt;next-&gt;k)</span><br><span class="line">            p1 = p1-&gt;next; </span><br><span class="line">p-&gt;next = p1-&gt;next;</span><br><span class="line">        p1-&gt;next = p;  </span><br><span class="line">    }  </span><br><span class="line">}</span><br><span class="line"><span class="comment">//first作为main里面的局部变量，如下使用会有问题吗</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    Node* first = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">insert</span>(first,n);<span class="comment">//有问题，值传递，不能修改first</span></span><br><span class="line">    <span class="built_in">insert</span>(&amp;first,n);<span class="comment">//这样子就行了</span></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="删除单向排序链">6.5.4. 删除单向排序链</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">delNode</span><span class="params">(<span class="type">int</span> k)</span></span>{</span><br><span class="line">    <span class="keyword">if</span> (!first) <span class="keyword">return</span>;</span><br><span class="line">    Node *p1 = first;</span><br><span class="line">    <span class="keyword">if</span> (k == first-&gt;k){</span><br><span class="line">        <span class="comment">//删除头结点</span></span><br><span class="line">        first = first-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> p1;</span><br><span class="line">    }<span class="comment">//删除头结点</span></span><br><span class="line">    <span class="keyword">else</span>{</span><br><span class="line">        <span class="keyword">while</span>(p1-&gt;next != <span class="literal">NULL</span>&amp;&amp; p1-&gt;next-&gt;k != k)</span><br><span class="line">            p1 = p1-&gt;next; </span><br><span class="line">    <span class="keyword">if</span> (p1-&gt;next != <span class="literal">NULL</span>){</span><br><span class="line">            Node *p = p1-&gt;next;</span><br><span class="line">            p1-&gt;next = p-&gt;next;</span><br><span class="line">            <span class="keyword">delete</span> p;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h1 id="c引用">7. C++引用</h1><ol type="1"><li>定义:为一块已有的内存空间取一个别名<ol type="1"><li>引用变量和被引用变量，必须是同类型</li><li>引用变量定义中的&amp;不是取地址操作符</li><li>定义引用变量时，必须初始化</li></ol></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> &amp;a = *p;<span class="comment">//一旦是p的别名，就一定只能是p的别名了</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> &amp;a)</span><span class="comment">//利用函数副作用</span></span></span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>应用:<ol type="1"><li>函数参数传递</li><li>动态变量命名</li></ol></li><li>函数返回值为指针或者引用<ol type="1"><li><strong>不可以返回局部量</strong></li><li>涉及到操作符的重载</li></ol></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">max1</span><span class="params">(<span class="type">int</span> x[], <span class="type">int</span> num)</span></span>{</span><br><span class="line">    <span class="type">int</span> m,i;</span><br><span class="line">    m = x[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;num; i++)</span><br><span class="line">        <span class="keyword">if</span> (x[i] &gt; m) m = x[i];</span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> &amp;<span class="title">max3</span><span class="params">(<span class="type">int</span> x[], <span class="type">int</span> num)</span></span>{</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;num; i++)</span><br><span class="line">       <span class="keyword">if</span> (x[i] &gt; x[j]) j = i;</span><br><span class="line">    <span class="keyword">return</span> x[j];</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> *<span class="title">max2</span><span class="params">(<span class="type">int</span> x[], <span class="type">int</span> num)</span></span>{</span><br><span class="line">    <span class="comment">//返回的指针</span></span><br><span class="line">    <span class="type">int</span> *p,*q;</span><br><span class="line">    p = x;</span><br><span class="line">    q = x+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (num &gt; <span class="number">1</span>){</span><br><span class="line">        <span class="keyword">if</span> (*q &gt; *p) p = q;</span><br><span class="line">        q++; num--;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="type">int</span> A[<span class="number">16</span>];<span class="comment">//操作的是调用者的空间的部分</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">max1</span>(A,<span class="number">16</span>);</span><br><span class="line">    cout &lt;&lt; <span class="built_in">max2</span>(A,<span class="number">16</span>);<span class="comment">//返回的是一个地址</span></span><br><span class="line">    *<span class="built_in">max2</span>(A,<span class="number">16</span>) = <span class="number">-1</span>;<span class="comment">//将最大值修改为-1</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">max3</span>(A,<span class="number">16</span>);</span><br><span class="line">    <span class="built_in">max</span>(A,<span class="number">16</span>) = <span class="number">-1</span>;<span class="comment">//将最大值修改为-1</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><ol start="4" type="1"><li>用 const限定引用<code>void swap(const int&amp; a, const int&amp; b)</code></li><li>引用一旦定义，不可被改变，可以被const限制</li><li>及时释放在堆中的变量的引用</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">100</span>);</span><br><span class="line"><span class="type">int</span> &amp;x = *p; …… ;</span><br><span class="line"><span class="keyword">delete</span> &amp;x;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C++结构化编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++异常处理</title>
      <link href="/2022/04/22/C-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>/2022/04/22/C-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="c-异常处理">C++ 异常处理</h2><ol type="1"><li>错误<ol type="1"><li>语法错误:编译系统</li><li>逻辑错误:测试</li></ol></li><li>异常 Exception<ol type="1"><li>运行环境造成:内存不足、文件操作失败等</li><li>异常处理:错误提示信息等</li></ol></li></ol><h1 id="异常处理">1. 异常处理</h1><ol type="1"><li>特征：<ol type="1"><li>可以预见</li><li>无法避免</li></ol></li><li>作用:提高程序鲁棒性(Bobustness)</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">char</span> *str)</span> </span>{<span class="comment">//str可能是用户的一个输入</span></span><br><span class="line">    <span class="function">ifstream <span class="title">file</span><span class="params">(str)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (file.<span class="built_in">fail</span>()) {</span><br><span class="line">        <span class="comment">// 异常处理</span></span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    file &gt;&gt; x;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><ol type="1"><li>问题:发现异常之处与处理异常之处不一致，怎么处理?函数中的异常要告知调用者</li><li>常见处理方式:<ol type="1"><li>函数参数:<ul><li>返回值(特殊的，0或者1)</li><li>引用参数(存放一些特定的信息)</li></ul></li><li>逐层返回</li></ol></li><li>缺陷:程序结构不清楚</li><li>相同的异常，不同的地方，需要编写相同的处理了逻辑是不合理的</li><li>传统异常处理方式不能处理构造函数出现的异常</li></ol><h2 id="处理机制">1.1. 处理机制</h2><ol type="1"><li>C++异常处理机制是，一种专门、清晰描述异常处理过程的机制</li><li>try：监控</li><li>throw：抛掷异常对象，不处理</li><li>catch：捕获并处理</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>{</span><br><span class="line">    <span class="comment">//&lt;语句序列&gt;</span></span><br><span class="line">    <span class="comment">//监控</span></span><br><span class="line">}<span class="keyword">throw</span><span class="comment">//&lt;表达式&gt;，可以是基本类型，拷贝构造函数用来拷贝类</span></span><br><span class="line"><span class="built_in">catch</span>(&lt;类型&gt;[&lt;变量&gt;]){<span class="comment">//变量不重要可以省略</span></span><br><span class="line">    <span class="comment">//&lt;语句序列&gt; 捕获并处理</span></span><br><span class="line">    <span class="comment">//依次退出，不要抛出指向局部变量的指针，解决:直接抛出对象，自动进行拷贝</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="catch的用法">1.2. catch的用法</h2><ol type="1"><li>类型:异常类型，匹配规则同函数重载(精确匹配只有底下三种，int转double都不行)<ol type="1"><li>允许从非常量到常量转换</li><li>允许从派生类到基类转换</li><li>允许数组和函数转换成指针</li></ol></li><li>变量:存储异常对象，可省</li><li>一个try语句块的后面可以跟多个catch语句块，用于捕获不同类型的异常进行处理</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">throw</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">throw</span> <span class="number">1.0</span>;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">"abcd"</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">    <span class="built_in">f</span>();</span><br><span class="line">}<span class="built_in">catch</span> (<span class="type">int</span>)<span class="comment">// 处 理 throw 1;</span></span><br><span class="line">{...}</span><br><span class="line"><span class="built_in">catch</span>(<span class="type">double</span>)<span class="comment">//throw 1.0</span></span><br><span class="line">{...}</span><br><span class="line"><span class="built_in">catch</span>(<span class="type">char</span> *)<span class="comment">//throw "abcd"</span></span><br><span class="line"><span class="comment">//字符串优先解释为char *</span></span><br><span class="line">{...}     </span><br></pre></td></tr></table></figure><h2 id="异常处理的嵌套">1.3. 异常处理的嵌套</h2><ol type="1"><li>调用关系:f-&gt;g-&gt;h</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第二节课10min</span></span><br><span class="line"><span class="built_in">f</span>(){</span><br><span class="line">    <span class="keyword">try</span>{</span><br><span class="line">        <span class="built_in">g</span>();</span><br><span class="line">    }<span class="built_in">catch</span> (<span class="type">int</span>)</span><br><span class="line">     { … }</span><br><span class="line">    <span class="built_in">catch</span> (<span class="type">char</span> *)</span><br><span class="line">    { … }</span><br><span class="line">}</span><br><span class="line"><span class="built_in">g</span>(){</span><br><span class="line">    <span class="keyword">try</span>{</span><br><span class="line">        <span class="built_in">h</span>();</span><br><span class="line">    }<span class="built_in">catch</span> (<span class="type">int</span>)</span><br><span class="line">    { …  }</span><br><span class="line">}</span><br><span class="line"><span class="built_in">h</span>(){</span><br><span class="line">  <span class="keyword">throw</span> <span class="number">1</span>;   <span class="comment">//由g捕获并处理</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="string">"abcd"</span>; <span class="comment">//由f捕获并处理</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><ol type="1"><li>如果所抛掷的异常对象如果在调用链上未被捕获，则由系统的abort处理,尽量不要</li></ol><h2 id="定义异常类">1.4. 定义异常类</h2><ol type="1"><li>注意catch块排列顺序：这样子保证了继承顺序(重要)，顺序向下检查是否符合条件，一旦符合条件就不再向下查找了。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FileErrors</span> { };</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NonExist</span>:<span class="keyword">public</span> FileErrors { } ;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WrongFormat</span>:<span class="keyword">public</span> FileErrors { } ;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DiskSeekError</span>:<span class="keyword">public</span> FileErrors { };</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">try</span>{</span><br><span class="line">        WrongFormat wf;</span><br><span class="line">        <span class="keyword">throw</span> wf;</span><br><span class="line">    }<span class="built_in">catch</span>(NonExists&amp;){...}</span><br><span class="line">    <span class="built_in">catch</span>(DiskSeekError&amp;){...}</span><br><span class="line">    <span class="built_in">catch</span>(FileErrors){...}<span class="comment">//最后一个可以接住，派生类像基类转换是允许的</span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">try</span>{</span><br><span class="line">        WrongFormat wf;</span><br><span class="line">        <span class="keyword">throw</span> wf;</span><br><span class="line">    }<span class="built_in">catch</span>(FileErrors){...}<span class="comment">//这样子底下都捕获不到</span></span><br><span class="line">    <span class="built_in">catch</span>(NonExists&amp;){...}</span><br><span class="line">    <span class="built_in">catch</span>(DiskSeekError&amp;){...}</span><br><span class="line">}</span><br><span class="line"><span class="comment">//Catch exceptions by reference</span></span><br><span class="line"><span class="comment">//尝试多继承，而不是拷贝，避免冗余</span></span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>实例:</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyExceptionBase</span> {};</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyExceptionDerived</span>: <span class="keyword">public</span> MyExceptionBase { };</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(MyExceptionBase&amp; e)</span> </span>{</span><br><span class="line">    <span class="keyword">throw</span> e;<span class="comment">//调用拷贝构造函数</span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    MyExceptionDerived e;</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="built_in">f</span>(e);</span><br><span class="line">    }<span class="built_in">catch</span>(MyExceptionDerived&amp; e) {</span><br><span class="line">        cout &lt;&lt; <span class="string">"MyExceptionDerived"</span> &lt;&lt; endl;</span><br><span class="line">    }<span class="built_in">catch</span>(MyExceptionBase&amp; e) {</span><br><span class="line">        cout &lt;&lt; <span class="string">"MyExceptionBase"</span> &lt;&lt; endl;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//输出:MyExceptionBase，为什么?调用了拷贝构造函数，拷贝构造的结果是MyExceptionBase类型的对象</span></span><br></pre></td></tr></table></figure><h2 id="异常处理的特例">1.5. 异常处理的特例</h2><ol type="1"><li>无参数throw:将捕获到的异常对象重新抛掷出去<code>catch(int){throw;}</code></li><li>catch(...):默认异常处理,这三个点是标准语法,捕获所有异常</li><li>实现:不影响对象布局:程序状态&lt;-&gt;析构函数、异常处理器，对程序验证特征的支持</li><li>构造函数的初始化表前，放置try-catch同样捕获异常1</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对程序验证特征的支持</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keyword">class</span> E&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Assert</span><span class="params">(T exp, E e)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (DEBUG)</span><br><span class="line">        <span class="keyword">if</span> (!exp) <span class="keyword">throw</span> e;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><ol start="5" type="1"><li>问题:如何应对多出口引发的处理碎片问题，如果多个地方throw，则意味着这里有多个出口。</li><li>Java中在异常处理这一部分提供了Finally操作，无论在哪里没有抛出最后都会执行finally，将内存缓存进行自己的处理</li><li>可是C++中没有finally,那怎么进行处理呢?这个在C++中，执行完异常处理后，必然执行析构函数</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Know what functions C++ silently writes and calls</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Empty</span> { }; </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Empty</span> {</span><br><span class="line">    <span class="comment">//以下是C++默认提供给空类的方法</span></span><br><span class="line">    <span class="built_in">Empty</span>();</span><br><span class="line">    <span class="built_in">Empty</span>(<span class="type">const</span> Empty&amp;);</span><br><span class="line">    ~<span class="built_in">Empty</span>();</span><br><span class="line">    Empty&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Empty&amp;);</span><br><span class="line">    Empty *<span class="keyword">operator</span> &amp;();</span><br><span class="line">    <span class="type">const</span> Empty* <span class="keyword">operator</span> &amp;() <span class="type">const</span>;</span><br><span class="line">};</span><br></pre></td></tr></table></figure><h1 id="使用析构函数来避免造成内存泄漏">2.使用析构函数来避免造成内存泄漏</h1><h2 id="异常处理的例子资源泄露小动物收养保护中心">2.1.异常处理的例子:资源泄露【小动物收养保护中心】</h2><ol type="1"><li>收养中心每天产生一个文件，包含当天的收养个案信息</li><li>读取这个文件，为每个个案做适当的处理</li></ol><p><img src="https://s2.loli.net/2022/04/22/2nWE4K193iuRjXL.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ALA</span>{<span class="comment">//Adorable Little Animal</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">processAdoption</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">};</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Puppy</span>: <span class="keyword">public</span> ALA{</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">processAdoption</span><span class="params">()</span></span>;</span><br><span class="line">};</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Kitten</span>: <span class="keyword">public</span> ALA{</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">processAdoption</span><span class="params">()</span></span>;</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">processAdoptions</span><span class="params">(istream&amp; dataSource)</span></span>{ </span><br><span class="line">    <span class="keyword">while</span> (dataSource){</span><br><span class="line">        ALA *pa = <span class="built_in">readALA</span>(dataSource);</span><br><span class="line">        <span class="keyword">try</span>{</span><br><span class="line">            pa-&gt;<span class="built_in">processAdoption</span>();<span class="comment">//处理可能会出现问题</span></span><br><span class="line">        }<span class="built_in">catch</span> (…){</span><br><span class="line">            <span class="keyword">delete</span> pa;</span><br><span class="line">            <span class="keyword">throw</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">delete</span> pa;<span class="comment">//正常执行也要进行处理，这就是多出口的问题</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><ul><li>结构破碎:被迫重复"清理码"2次delete的pa(不符合集中式处理的想法、同时容易导致维护困难的问题)</li><li>集中处理？用析构函数(智能指针)</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">auto_ptr</span>{</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">auto_ptr</span>(T *p=<span class="number">0</span>):<span class="built_in">ptr</span>(p) {}</span><br><span class="line">        ~<span class="built_in">auto_ptr</span>() { <span class="keyword">delete</span> ptr; }</span><br><span class="line">        T* <span class="keyword">operator</span>-&gt;()  <span class="type">const</span> { <span class="keyword">return</span> ptr;}</span><br><span class="line">    T&amp; <span class="keyword">operator</span> *()  <span class="type">const</span> { <span class="keyword">return</span> *ptr; }</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        T*  ptr;</span><br><span class="line">};</span><br><span class="line"><span class="comment">//结合智慧指针使用</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">processAdoptions</span><span class="params">(istream&amp; dataSource)</span></span>{</span><br><span class="line">    <span class="keyword">while</span> (dataSource){</span><br><span class="line">        <span class="function">auto_ptr&lt;ALA&gt; <span class="title">pa</span><span class="params">(readALA(dataSource))</span></span>;</span><br><span class="line">        pa-&gt;<span class="built_in">processAdoption</span>();<span class="comment">//只要对象结束，就会自动delete</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="gui应用软件中的某个显示信息的函数">2.2.GUI应用软件中的某个显示信息的函数</h2><ol type="1"><li>handle class:句柄类，就是处理智能指针</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">displayInfo</span><span class="params">(<span class="type">const</span> Information&amp; info)</span></span>{  </span><br><span class="line">    <span class="function">WINDOW_HANDLE <span class="title">w</span><span class="params">(createWindow())</span></span>;<span class="comment">//针对windows窗体的一个指针，createWindow:返回一个窗体指针，WINDOW_HANDLE是别名</span></span><br><span class="line">    display info in window corresponding to w;</span><br><span class="line">    <span class="built_in">destroyWindows</span>(w);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//专门的句柄类，处理窗体问题</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WindowHandle</span>{</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">WindowHandle</span>(WINDOW_HANDLE handler) : <span class="built_in">w</span>(handler) {}</span><br><span class="line">    ~<span class="built_in">WindowHandle</span>() { <span class="built_in">destroyWindow</span>(w);}<span class="comment">//析构就会自动释放资源</span></span><br><span class="line">        <span class="function"><span class="keyword">operator</span> <span class="title">WINDOW_HANDLE</span><span class="params">()</span> </span>{ <span class="keyword">return</span> w; }<span class="comment">//重载类型转换操作符，转换为WINDOW_HANDLE指针，将句柄类对象和包含的句柄一样的进行使用</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        WINDOW_HANDLE w;</span><br><span class="line">        <span class="built_in">WindowHandle</span>(<span class="type">const</span> WindowHandle&amp;);</span><br><span class="line">        WindowHandle &amp; <span class="keyword">operator</span> = (<span class="type">const</span> WindowHandle&amp;);</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">displayInfo</span><span class="params">(<span class="type">const</span> Information&amp; info)</span></span>{</span><br><span class="line">    <span class="function">WindowHandle  <span class="title">w</span><span class="params">(createWindow())</span></span></span><br><span class="line"><span class="function">    <span class="comment">//display info in window corresponding to w;</span></span></span><br><span class="line"><span class="function">}</span></span><br></pre></td></tr></table></figure><ul><li>第9、10课需要仔细听一下</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C++结构化编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++头文件</title>
      <link href="/2022/04/22/C-%E5%A4%B4%E6%96%87%E4%BB%B6/"/>
      <url>/2022/04/22/C-%E5%A4%B4%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="c-头文件">C++ 头文件</h2><h1 id="头文件">1. 头文件</h1><ol type="1"><li><code>#include</code></li><li>iostream：输入输出流</li><li>cmath：数学函数</li><li>iomanip：I/O流控制符</li></ol><h1 id="头文件主要内容">2. 头文件主要内容</h1><ol type="1"><li>头文件可以包含常量定义、变量/函数声明、编译预处理、类型定义、内联函数</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//const.h</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="number">3.1415926</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.h</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">float</span> salary;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>调用头文件:<code>#include "a.h"</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C++结构化编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++数据</title>
      <link href="/2022/04/22/C-%E6%95%B0%E6%8D%AE/"/>
      <url>/2022/04/22/C-%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="c-数据">C++ 数据</h2><h1 id="结构化程序设计">1. 结构化程序设计</h1><ol type="1"><li>Data Structure + Algorithm</li></ol><h1 id="数据">2. 数据</h1><ol type="1"><li>数据的组成:名、值、地址、类型、性质</li></ol><h2 id="数据类型">2.1. 数据类型</h2><ol type="1"><li>基本类型：都属于Built-in的类型<ol type="1"><li>整型:int<ol type="1"><li>短整型,short int</li><li>整形,int</li><li>长整型,long int</li></ol></li><li>字符型,char</li><li>浮点型:float<ol type="1"><li>单精度型,float</li><li>双精度型.double</li><li>长双精度型.long double</li></ol></li><li>布尔型,bool</li></ol></li><li>派生类型：<ol type="1"><li>指针类型,*</li><li>枚举类型,enum</li><li>数组类型,[]</li><li>结构体类型,struct</li><li>公用体类型,union</li><li>类类型,class</li></ol></li><li>空类型,void</li><li>数据类型是第一层的封装<ul><li>数据类型包括了Value Set和Operation</li></ul></li></ol><h3 id="抽象数据类型-adt">2.1.1. 抽象数据类型 ADT</h3><ol type="1"><li>Mathmatical Model</li><li>约束着我们的操作：类型决定了取值</li><li>类型系统:<ol type="1"><li>强/弱:是指类型严格与否，弱类型允许进行隐式转换</li><li>静/动:静是指在编译之前就已经确定类型，而动是指在编译过程中确定类型。</li><li>compiler + linker</li></ol></li><li>C++的特征:<ol type="1"><li>强类型(通过特殊的手段是可以打破强类型的手段)</li><li>动/静结合</li><li>类型安全不能代替测试</li></ol></li><li>动态类型和静态类型的区别<ol type="1"><li>java:"666"/3，编译报错</li><li>python: "666"/3，运行报错</li></ol></li></ol><h3 id="变量修饰符">2.1.2. 变量修饰符</h3><ol type="1"><li>注解:对于char、int、float、double(四种基本数据类型)和修饰符(long、short、signed、unsigned):<ol type="1"><li>char只可以被signed和unsigned修饰</li><li>float不能被修饰</li><li>double只能用long修饰</li><li>int可以被四种修饰符组合修饰</li></ol></li><li>省略表示</li></ol><h3 id="sizeof操作符">2.1.3. sizeof操作符</h3><ol type="1"><li>用来返回该数据占有的内存空间的大小。(字节)</li></ol><h3 id="typedef关键字">2.1.4. typedef关键字</h3><ol type="1"><li>用来为已有的类型定义一个同义词(别名)</li><li>格式:<code>typedef [原本类型] [同义词/别名]</code></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> profit;</span><br></pre></td></tr></table></figure><ol start="3" type="1"><li>提高程序可移植性(应用的价值所在)<ul><li>16位系统:<code>typedef int INT16</code></li><li>32位系统:<code>typedef short INT16</code></li></ul></li><li>是为了已有类型定义别名，而不是定义新的类型</li></ol><h2 id="常值">2.2. 常值</h2><h3 id="数值常量">2.2.1. 数值常量</h3><ol type="1"><li>整形常量的表示<ol type="1"><li>0开头:八进制</li><li>0X开头：十六进制</li><li>其他正常进制：十进制</li></ol></li><li>浮点数的表示<ol type="1"><li>十进制小数形式：78.</li><li>指数形式(浮点形式):3.14*10<sup>0</sup>，字符 数字部分 指数部分</li></ol></li><li>字符常量<ol type="1"><li>普通的字符常量</li><li>转义字符常量</li><li>字符串常量：字符串结尾<code>\0</code></li></ol></li><li>符号常量：<ol type="1"><li>#define NUM 10</li><li>进行预定义操作</li></ol></li></ol><h3 id="枚举常量">2.2.2. 枚举常量</h3><ol type="1"><li>直接输出枚举常量，会在屏幕上显示对应的值，而不是枚举的名称</li><li>不能直接给枚举类赋一个int值，可以today =weekday(4),其中weekday是预定义好的枚举类。</li></ol><h2 id="变量">2.3. 变量</h2><h3 id="局部变量">2.3.1. 局部变量</h3><ol type="1"><li>生存域，在函数局部等地方生存。</li></ol><h3 id="全局变量">2.3.2. 全局变量</h3><ol type="1"><li>从定义位置到程序结束都是有效的。</li></ol><h3 id="自动变量">2.3.3. 自动变量</h3><ol type="1"><li>如果不用static声明变量类型，编译器对它们是动态地分配储存空间的</li></ol><h3 id="指针变量">2.3.4. 指针变量</h3><ol type="1"><li>int *pointer;定义</li><li>间接访问指针变量：<ol type="1"><li>&amp;取地址运算符</li><li>*间接访问运算符:访问地址上的函数值。</li></ol></li></ol><h3 id="作用域">2.3.5. 作用域</h3><ol type="1"><li>文件作用域</li><li>函数作用域</li><li>块作用域</li><li>函数原型作用域</li></ol><h3 id="变量的存储类别">2.3.6. 变量的存储类别</h3><ol type="1"><li>动态存储方式</li><li>静态存储方式</li><li>存储类别有：<ol type="1"><li>自动的(auto)</li><li>静态的(static)，阻止本程序的有些变量被其他程序使用</li><li>寄存器的(register)</li><li>外部的(extern)</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C++结构化编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++输入输出</title>
      <link href="/2022/04/22/C-%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/"/>
      <url>/2022/04/22/C-%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="c-输入输出">C++ 输入输出</h2><h1 id="io">1. I/O</h1><ol type="1"><li>输入输出流:包含在头文件<code>&lt;iostream&gt;</code>中</li><li>开头需要进行<code>#include&lt;iostream&gt;</code></li></ol><h2 id="标准库对象">1.1. 标准库对象</h2><table><thead><tr class="header"><th>对象</th><th>功能</th></tr></thead><tbody><tr class="odd"><td>istream:cin</td><td>处理输入</td></tr><tr class="even"><td>ostream:cout</td><td>处理输出</td></tr><tr class="odd"><td>ostream:cerr</td><td>处理错误</td></tr><tr class="even"><td>ostream:clog</td><td>保证log</td></tr></tbody></table><h1 id="输入">2. 输入</h1><h2 id="输入原理">2.1. 输入原理</h2><ol type="1"><li>程序的输入都键入一个缓冲区，即输入缓冲区。</li><li>键盘输入结束后，会将数据存入缓冲区，之后cin函数直接从输入缓冲区取数据</li><li>问题在于:缓冲区中有残留数据的时候，cin输入流直接从缓冲区拿数据。</li></ol><h2 id="cin">2.2. cin</h2><ol type="1"><li><code>&gt;&gt;</code>是流提取符，以空格，Tab),(回车)为终止</li><li>往往使用来赋值给变量</li><li>cin的变量类型可以为int、float、char、char*、string等诸多类型。</li></ol><h3 id="数组输入">2.2.1. 数组输入</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//已知长度数组读入</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n; i++){</span><br><span class="line">    cin &gt;&gt; nums[i]</span><br><span class="line">}</span><br><span class="line"><span class="comment">//未知长度数组读入</span></span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n){<span class="comment">//如果没有数字输入则会为NULL</span></span><br><span class="line">    nums[i] = n;</span><br><span class="line">    i ++;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="解决格式化输入问题">2.2.2. 解决格式化输入问题</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Ctrl + Z 表示输入结束</span></span><br><span class="line"><span class="comment">//读取(0,0),(1,1)</span></span><br><span class="line"><span class="type">char</span> c;<span class="comment">//用来读取无用的</span></span><br><span class="line"><span class="type">int</span> x1,x2,y1,y2</span><br><span class="line">cin &gt;&gt; c &gt;&gt; x1 &gt;&gt; c &gt;&gt; x2 &gt;&gt; c &gt;&gt; c &gt;&gt; c &gt;&gt; y1 &gt;&gt; c &gt;&gt; y2 &gt;&gt; c &gt;&gt; c;(这个很重要)</span><br></pre></td></tr></table></figure><h3 id="get方法">2.2.3. get方法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">istream&amp; <span class="title">get</span><span class="params">(<span class="type">char</span>&amp; c)</span></span>;</span><br><span class="line"><span class="function">istream&amp; <span class="title">get</span><span class="params">(<span class="type">char</span>* s, streamsize n)</span></span>;</span><br><span class="line"><span class="function">istream&amp; <span class="title">get</span><span class="params">(<span class="type">char</span>* s, streamsize n, <span class="type">char</span> delim)</span></span>;</span><br><span class="line"><span class="function">istream&amp; <span class="title">get</span><span class="params">(streambuf&amp; sb)</span></span>;</span><br><span class="line"><span class="function">istream&amp; <span class="title">get</span><span class="params">(streambuf&amp; sb, <span class="type">char</span> delim)</span></span>;</span><br></pre></td></tr></table></figure><ol type="1"><li>结束符默认为enter，结束字符串的读写</li><li>字符串最后一个为<code>\0</code>，并且对空格不敏感。</li><li>get方法<strong>并不会将结束符从缓冲区丢弃</strong>：务必注意是结束符！未必是回车。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按照字符读取</span></span><br><span class="line">cin.<span class="built_in">get</span>(x);</span><br><span class="line">cin.<span class="built_in">get</span>(y);<span class="comment">//\n也可以读取到</span></span><br><span class="line"><span class="comment">//cin.get == c语言中的getchar()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//按照字符串读取</span></span><br><span class="line"><span class="type">char</span> ch1,ch2[<span class="number">10</span>];</span><br><span class="line">cout&lt;&lt;<span class="string">"请输入字符串："</span>&lt;&lt;endl;</span><br><span class="line">cin.<span class="built_in">get</span>(ch2,<span class="number">6</span>);<span class="comment">//在不遇到结束符的情况下，最多可接收6-1=5个字符到ch2中，注意结束符为默认Enter</span></span><br><span class="line">cin.<span class="built_in">get</span>(ch1);<span class="comment">//或ch1 = cin.get();      </span></span><br><span class="line">out&lt;&lt;ch2&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;ch1&lt;&lt;<span class="string">"\n"</span>&lt;&lt;(<span class="type">int</span>)ch1&lt;&lt;endl;</span><br></pre></td></tr></table></figure><ol type="1"><li>直接回车在上面程序中会出现错误输出(越界)，处理方法<code>cin.clear()</code>:但是不会清理终止符。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调整结束符</span></span><br><span class="line">cin.<span class="built_in">get</span>(ch, <span class="number">3</span>, <span class="string">'a'</span>);<span class="comment">// 结束符为'a'，直接输入a(enter)</span></span><br><span class="line">cin.<span class="built_in">get</span>(ch2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意cin.get()的返回值的问题</span></span><br><span class="line">cin.<span class="built_in">get</span>(ch, <span class="number">3</span>, <span class="string">'a'</span>); <span class="comment">//此处输入a(enter)</span></span><br><span class="line">ch2 = cin.<span class="built_in">get</span>(); <span class="comment">//注意与cin.get(ch2)不同</span></span><br><span class="line">cout &lt;&lt; ch2 &lt;&lt; <span class="string">' '</span> &lt;&lt; (<span class="type">int</span>)ch2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//cin.get()</span></span><br><span class="line">cin.<span class="built_in">get</span>();<span class="comment">//用来舍弃输入中不需要的字符(包含回车)，用来弥补不足，用来避免下次读入的时候再次读入</span></span><br></pre></td></tr></table></figure><h3 id="cin.getline">2.2.4. cin.getline()</h3><ol type="1"><li><code>cin.getline(字符数组名,接收长度，结束符)</code></li><li>cin.get()超长后不会影响cin的操作，而cin.getline()如果超长会导致之后cin的错误。</li></ol><h3 id="getline">2.2.5. getline()</h3><ol type="1"><li><code>getline(istream is,string str,结束符)</code></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">getline</span>(cin,str);</span><br></pre></td></tr></table></figure><h2 id="cin异常处理机制">2.3. cin异常处理机制</h2><h3 id="标志位">2.3.1. 标志位</h3><ol type="1"><li>定义在IOS类中</li><li>他们不是储存异常状态常量，而是对应状态为的掩码。</li></ol><table><thead><tr class="header"><th>名称</th><th>二进制显示</th><th>功能</th></tr></thead><tbody><tr class="odd"><td>failbit</td><td>001</td><td>输入(输出)流出现致命错误，不可挽回</td></tr><tr class="even"><td>eofbit</td><td>010</td><td>已经到达文件尾</td></tr><tr class="odd"><td>badbit</td><td>100</td><td>输入(输出)流出现非致命错误，可挽回</td></tr><tr class="even"><td>goodbit</td><td>000</td><td>流状态完全正常，各异常标志位都为0</td></tr></tbody></table><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; ios::failbit &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; ios::eofbit &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; ios::badbit &lt;&lt; endl; </span><br><span class="line">cout &lt;&lt; ios::goodbit &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h3 id="rdstate">2.3.2. rdstate()</h3><ol type="1"><li>rdstate():获取标志变量的值</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">TestFlags</span><span class="params">( ios&amp; x )</span> <span class="comment">// 获得x流的三个标志位状态  </span></span></span><br><span class="line"><span class="function"></span>{  </span><br><span class="line">    cout &lt;&lt; ( x.<span class="built_in">rdstate</span>( ) &amp; ios::badbit ) &lt;&lt; endl;  </span><br><span class="line">    cout &lt;&lt; ( x.<span class="built_in">rdstate</span>( ) &amp; ios::failbit ) &lt;&lt; endl;  </span><br><span class="line">    cout &lt;&lt; ( x.<span class="built_in">rdstate</span>( ) &amp; ios::eofbit ) &lt;&lt; endl;  </span><br><span class="line">    cout &lt;&lt; endl;  </span><br><span class="line">}  </span><br></pre></td></tr></table></figure><h3 id="bool-iosfailconst">2.3.3. bool ios::fail()const</h3><ul><li>1 or true if rdstate &amp; failbit is nonzero, otherwise 0 or false.(引用msdn)</li><li>其中rdstate即通过rdstate()取得的标识变量的值，与failbit相与，即取得failbit标志位的值，如果结果非零则放回true，否则返回false。即该函数返回failbit的状态，将标志位状态通过bool值返回。</li></ul><h3 id="bool-iosbad-const">2.3.4. bool ios::bad() const</h3><ul><li>1 or true if rdstate &amp; badbit is nonzero; otherwise 0.(引用msdn) 与fail()相似。</li></ul><h3 id="bool-iosgoodconst">2.3.5. bool ios::good()const</h3><ul><li>1 or true if rdstate == goodbit (no state flags are set), otherwise,0 orfalse. (引用msdn)改函数取goodbit的情况，即三个标志位都0(即没有任何异常情况)时返回true，否则返回false。</li></ul><h3 id="voidioscleariostate-_stategoodbit">2.3.6. voidios::clear(iostate_State=goodbit)</h3><ul><li>该函数用来重置标识变量，_State是用来重置的值，默认为goodbit，即默认时将所有标志位清零。用户也可以传进参数，如：clear(failbit)，这样就将标识变量置为failbit(即：001)。</li><li>我们一般是用它的默认值，当cin出现异常，我们用该函数将所有标志位重置。如果cin出现异常，没有重置标志的话没法执行下一次的cin操作。如上一节的程序2的测试二为什么第二次输入操作没有执行？程序8中cin&gt;&gt;ch 为什么没有执行？都是这个原因！！！ 所以经常在程序中使用cin.clear(), 为了重置错误标志！</li></ul><h3 id="void-iossetstateiostate_state">2.3.7. voidios::setstate(iostate_State)</h3><ol type="1"><li>这个函数也是用来设置标识变量的，但与clear()不同。clear()是将所有标志清零，在置以参数新的标志。而该函数不清零其他的标志，而只是将参数对应的标志位置位。这个函数不是经常使用，这里不再赘述。</li></ol><h3 id="例子">2.3.8. 例子</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span>{  </span><br><span class="line">    <span class="type">char</span> ch, str[<span class="number">20</span>];  </span><br><span class="line">    cin.<span class="built_in">getline</span>(str, <span class="number">5</span>);  </span><br><span class="line">    cout&lt;&lt;<span class="string">"flag1:"</span>&lt;&lt;cin.<span class="built_in">good</span>()&lt;&lt;endl;   <span class="comment">// 查看goodbit状态，即是否有异常  </span></span><br><span class="line">    cin.<span class="built_in">clear</span>();                        <span class="comment">// 清除错误标志  </span></span><br><span class="line">    cout&lt;&lt;<span class="string">"flag1:"</span>&lt;&lt;cin.<span class="built_in">good</span>()&lt;&lt;endl;   <span class="comment">// 清除标志后再查看异常状态  </span></span><br><span class="line">    cin&gt;&gt;ch;   </span><br><span class="line">    cout&lt;&lt;<span class="string">"str:"</span>&lt;&lt;str&lt;&lt;endl;  </span><br><span class="line">    cout&lt;&lt;<span class="string">"ch :"</span>&lt;&lt;ch&lt;&lt;endl;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">}</span><br><span class="line"><span class="comment">//测试输入：</span></span><br><span class="line"><span class="comment">//12345[Enter]</span></span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line"><span class="comment">//flag1:0 // good()返回false说明有异常</span></span><br><span class="line"><span class="comment">//flag2:1 // good()返回true说明，clear()已经清除了错误标志</span></span><br><span class="line"><span class="comment">//str:1234</span></span><br><span class="line"><span class="comment">//ch :5</span></span><br></pre></td></tr></table></figure><ul><li>【分析】程序执行结束还是只执行了一次读操作，cin&gt;&gt;ch还是没有从键盘读取数据，但是与程序8中不同，这里打印了ch的值为'5'，而且在cin&gt;&gt;ch之前已经清楚了错误标志，也就是cin&gt;&gt;ch的读操作实际上执行了。这就是前面讲的cin读取数据的原理：它是直接从输入缓冲区中取数据的。此例中，第一次输入"12345",而getline(str,5)根据参数'5'只取缓冲区中的前4个字符，所以str取的是"1234"，而字符'5'仍在缓冲区中，所以cin&gt;&gt;ch直接从缓冲区中取得数据，没有从键盘读取数据！</li><li>也就是当前一次读取数据出错后，如果缓冲区没有清空的话，重置错误标志还不够！要是能将缓冲区的残留数据清空了就好了哦！下面我们再来看一个很重要的函数！</li></ul><h3 id="basic_istreamignorestreamsize-_count-1-int_type-_delim-traits_typeeof">2.3.9.basic_istream&amp;ignore(streamsize _Count = 1, int_type _Delim =traits_type::eof());</h3><ol type="1"><li>Causes a number of elements to be skipped from the currentreadposition</li><li>Parameters:<ol type="1"><li>_Count, The number of elements to skip from the current readposition.</li><li>_Delim, The element that, if encountered before count, causes ignoreto returnand allowing all elements after _Delim to be read.(引用msdn)<br></li></ol></li><li>这个函数用来丢弃输入缓冲区中的字符，第一参数定义一个数，第二个参数定义一个字符变量。下面解释一下函数是怎样执行的：函数不停的从缓冲区中取一个字符，并判断是不是_Delim，如果不是则丢弃并进行计数，当计数达到_Count退出，如果是则丢弃字符退出。例：cin.ignore(5,'a');函数将不断从缓冲区中取一个字符丢弃，直到丢弃的字符数达到5或者读取的字符为'a'。下面我们看个程序例子：</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line">cin.<span class="built_in">ignore</span>(<span class="number">5</span>, <span class="string">'a'</span>);</span><br><span class="line">cin.<span class="built_in">get</span>(ch);</span><br><span class="line">cout &lt;&lt; (<span class="type">int</span>)ch &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><ol start="4" type="1"><li>例子见参考三</li></ol><h3 id="丢弃一个字符">2.3.10. 丢弃一个字符</h3><ol type="1"><li><code>cin.ignore()</code>:删除缓冲区的第一个字符</li></ol><h3 id="清除缓冲区">2.3.11. 清除缓冲区</h3><ol type="1"><li><code>cin.ignore(1024,'\n');</code></li><li><code>cin.ignore(std::numeric_limits&lt;std::streamsize&gt;::max(), '\n');</code></li></ol><h2 id="函数输出">2.4. 函数输出</h2><h3 id="getchar">2.4.1. getchar()</h3><ol type="1"><li>getchar()；获得一个字符</li><li>可以读取到空格。</li></ol><h3 id="putchar">2.4.2. putchar()</h3><ol type="1"><li>putchar()；输出一个字符</li></ol><h1 id="输出">3. 输出</h1><h2 id="标准输出流-cout">3.1. 标准输出流 cout</h2><ol type="1"><li>&lt;&lt;流插入符</li><li><code>std::endl</code>:换行，可以输出一个或者多个，等价于<code>\n</code></li></ol><h3 id="格式化输出">3.1.1. 格式化输出</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line">cout &lt;&lt; hex &lt;&lt; <span class="number">10</span> &lt;&lt; <span class="string">""</span> &lt;&lt; oct &lt;&lt; <span class="number">8</span>;<span class="comment">//16进制和8进制</span></span><br><span class="line"><span class="comment">//hex 设定后，直接将后面所有的进行转换，知道再次设定</span></span><br><span class="line"><span class="comment">//hex 16</span></span><br><span class="line"><span class="comment">//dec 10</span></span><br><span class="line"><span class="comment">//oct 8</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">setorecison</span>(<span class="number">4</span>) &lt;&lt; <span class="number">1.11111</span>;<span class="comment">//4位小数</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">6</span>) &lt;&lt; right &lt;&lt; <span class="number">10</span>;<span class="comment">//6位右对齐</span></span><br><span class="line">cout &lt;&lt; year &lt;&lt; <span class="string">'-'</span> &lt;&lt; <span class="built_in">setw</span>(<span class="number">2</span>) &lt;&lt; <span class="built_in">setfill</span>(<span class="string">'0'</span>) &lt;&lt; month &lt;&lt; ‘-’ &lt;&lt; std::<span class="built_in">setw</span>(<span class="number">2</span>) &lt;&lt; std::<span class="built_in">setfill</span>(<span class="string">'0'</span>) &lt;&lt; day;</span><br><span class="line"><span class="comment">//填充</span></span><br></pre></td></tr></table></figure><h2 id="使用命名空间std">3.2. 使用命名空间std</h2><ol type="1"><li>using namespace std;来直接使用</li><li>cin,cout是C++标准库内置函数但不是关键字。</li></ol><h2 id="函数输出-1">3.3. 函数输出</h2><ol type="1"><li>scanf("%d",&amp;a);</li><li>printf("%d",a);</li></ol><h1 id="控制符">4. 控制符</h1><table><thead><tr class="header"><th>控制符</th><th>名称</th><th>作用</th></tr></thead><tbody><tr class="odd"><td>endl</td><td>换行符</td><td>换行</td></tr></tbody></table><h1 id="不同类别的io处理">5. 不同类别的I/O处理</h1><ol type="1"><li>基于函数库的I/O</li><li>基于类库的I/O</li></ol><p><img src="https://s2.loli.net/2022/04/22/VF7xE6CSuwmW1In.png"></p><h2 id="io流库的三类输入输出">5.1. I/O流库的三类输入/输出</h2><ol type="1"><li>控制台I/O:标准I/O设备(cin、cout、cerr、clog)</li><li>文件I/O</li><li>字符串I/O</li></ol><h2 id="重定向">5.2. 重定向</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ifstream <span class="title">in</span> <span class="params">(<span class="string">"in. txt"</span>)</span></span>;</span><br><span class="line">streambuf * cinbuf = cin. <span class="built_in">rdbuf</span> ();<span class="comment">//save old buf</span></span><br><span class="line">cin. <span class="built_in">rdbuf</span> ( in. <span class="built_in">rdbuf</span> ());<span class="comment">//redirect cin to in. txt !</span></span><br><span class="line"><span class="function">ofstream <span class="title">out</span> <span class="params">(<span class="string">" out. txt "</span>)</span></span>;</span><br><span class="line">streambuf * coutbuf = cout. <span class="built_in">rdbuf</span> (); <span class="comment">//save old buf</span></span><br><span class="line">cout. <span class="built_in">rdbuf</span> ( out. <span class="built_in">rdbuf</span> ()); <span class="comment">//redirect cout to out. txt !</span></span><br><span class="line">string word;</span><br><span class="line">cin &gt;&gt; word; <span class="comment">//input from the file in. txt </span></span><br><span class="line">cout &lt;&lt; word &lt;&lt; <span class="string">" "</span>;<span class="comment">//output to the file out. txt</span></span><br><span class="line">cin. <span class="built_in">rdbuf</span> ( cinbuf );<span class="comment">//reset to standard input again</span></span><br><span class="line">cout. <span class="built_in">rdbuf</span> ( coutbuf ); <span class="comment">//reset to standard output again</span></span><br><span class="line">cin &gt;&gt; word; <span class="comment">//input from the standard input</span></span><br><span class="line">cout &lt;&lt; word; <span class="comment">//output to the standard input</span></span><br></pre></td></tr></table></figure><h2 id="对操作符的重载">5.3. 对操作符&lt;&lt;和&gt;&gt;的重载</h2><ol type="1"><li>对自定义类的对象的I/O</li><li>全局(友元)函数重载</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CPoint2D</span>{</span><br><span class="line">    <span class="type">double</span> x, y;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream&amp;, CPoint2D &amp;);</span><br><span class="line">};</span><br><span class="line"><span class="comment">//全局函数</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream&amp; out,  CPoint2D&amp; a){<span class="comment">//引用类型保证能递归显示</span></span><br><span class="line">    out &lt;&lt; a.x &lt;&lt; <span class="string">","</span> &lt;&lt; a.y &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> out;</span><br><span class="line">}</span><br><span class="line">CPoint2D a;</span><br><span class="line">cout &lt;&lt; a;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CPoint3D</span>: <span class="keyword">public</span> CPoint2D</span><br><span class="line">{   <span class="type">double</span> z;</span><br><span class="line">    </span><br><span class="line">}</span><br><span class="line">CPoint3D b;</span><br><span class="line">cout &lt;&lt; b;<span class="comment">//只显示b.x和b.y，而没显示b.z</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CPoint3D</span>: <span class="keyword">public</span> CPoint2D</span><br><span class="line">{   <span class="type">double</span> z;</span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream &amp;, CPoint3D &amp;);</span><br><span class="line">}</span><br><span class="line">ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream&amp; out,  CPoint3D &amp; b){</span><br><span class="line">    out &lt;&lt; b.x &lt;&lt; <span class="string">","</span> &lt;&lt; b.y &lt;&lt;<span class="string">","</span>  &lt;&lt; b.z &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> out;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//问题:3D对象被2D指针指向，cout调用了2D的版本，解决:虚化</span></span><br></pre></td></tr></table></figure><h2 id="io处理">5.4. IO处理</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解决上面的问题</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CPoint2D</span>{</span><br><span class="line">    <span class="type">double</span> x, y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">display</span><span class="params">(ostream&amp; out)</span></span>{</span><br><span class="line">            out &lt;&lt; x &lt;&lt; <span class="string">","</span> &lt;&lt; y &lt;&lt; endl;</span><br><span class="line">        }</span><br><span class="line">};</span><br><span class="line"><span class="comment">//全局函数的多态，使用虚函数</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream&amp; out,  CPoint2D &amp;a){<span class="comment">//虚函数保证必然会调用对象对应的实际类型的版本的对应方法</span></span><br><span class="line">    a.<span class="built_in">display</span>(out);</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CPoint3D</span>: <span class="keyword">public</span> CPoint2D{</span><br><span class="line">    <span class="type">double</span> z;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(ostream&amp; out)</span></span>{   </span><br><span class="line">            CPoint2D::<span class="built_in">display</span>();</span><br><span class="line">            out &lt;&lt; <span class="string">","</span>&lt;&lt; z &lt;&lt; endl;  }</span><br><span class="line">};</span><br></pre></td></tr></table></figure><h2 id="virtualizing-constructors-虚拟化构造器">5.5. Virtualizingconstructors 虚拟化构造器</h2><ol type="1"><li>虚函数</li><li>构造器</li></ol><p><img src="https://s2.loli.net/2022/04/22/VF7xE6CSuwmW1In.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NLComponent</span> {…};</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TextBlock</span> :<span class="keyword">public</span> NLComponent {…};</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Graphic</span> :<span class="keyword">public</span> NLComponent {…};</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewsLetter</span>{</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">NewsLetter</span>(istream&amp; str){</span><br><span class="line">            <span class="keyword">while</span> (str)</span><br><span class="line">                components.<span class="built_in">push_back</span>(<span class="built_in">readComponent</span>(str));</span><br><span class="line">        }</span><br><span class="line">    <span class="function"><span class="type">static</span> NLComponent * <span class="title">readComponent</span><span class="params">(istream&amp; str)</span></span>;</span><br><span class="line">        <span class="built_in">NewsLetter</span>(<span class="type">const</span> NewsLetter&amp; rhs){<span class="comment">//拷贝构造函数</span></span><br><span class="line">            <span class="keyword">for</span> (list&lt;NLComponent *&gt;::iterator it=rhs.component.<span class="built_in">begin</span>();it != rhs.component.<span class="built_in">end</span>(); ++it )</span><br><span class="line">                <span class="comment">//期望有一个虚函数可以拷贝自己</span></span><br><span class="line">                component.<span class="built_in">push_back</span>();<span class="comment">//new TextBlock? Graphic?</span></span><br><span class="line">        }</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    list&lt;NLComponent *&gt; components;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//虚化构造器</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> NLComponent *<span class="title">clone</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="comment">//原型模式:添加clone</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> TextBlock *<span class="title">clone</span><span class="params">()</span> <span class="type">const</span></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">TextBlock</span>(*<span class="keyword">this</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Graphic  *<span class="title">clone</span><span class="params">()</span> <span class="type">const</span></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Graphic</span> (*<span class="keyword">this</span>);</span><br><span class="line">}</span><br><span class="line">NewsLetter::<span class="built_in">NewsLetter</span>( <span class="type">const</span> NewsLetter&amp; rhs){</span><br><span class="line">    <span class="keyword">for</span> ( list&lt;NLComponent *&gt;::iterator it=rhs.component.<span class="built_in">begin</span>();</span><br><span class="line">it != rhs.component.<span class="built_in">end</span>(); ++it )</span><br><span class="line">        component.<span class="built_in">push_back</span>((*it)-&gt;<span class="built_in">clone</span>());</span><br><span class="line">}</span><br><span class="line"><span class="comment">//typeid(*it)==typeid(TextBlock)判断对象的类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Question</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BST</span> {};</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BalancedBST</span>: <span class="keyword">public</span> BST {};</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printBSTArray</span><span class="params">(ostream&amp; s, <span class="type">const</span> BST array[], <span class="type">int</span> numElements)</span></span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i &lt; numElements; i++)</span><br><span class="line">        s &lt;&lt; array[i];</span><br><span class="line">}</span><br><span class="line">BalancedBST bBSTArray[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">printBSTArray</span>(cout, bBSTArray, <span class="number">10</span>);</span><br><span class="line"><span class="comment">//问题是?array[i]是指针算法的缩写，数组每次偏移地址是sizeof(BST)，而不是sizeof(BalancedBST)，会出现问题。</span></span><br></pre></td></tr></table></figure><h1 id="读文件">6. 读文件</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ifstream <span class="title">infile</span><span class="params">(<span class="string">"file_name"</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (!infile.<span class="built_in">is_open</span>()){</span><br><span class="line">    cout &lt;&lt; <span class="string">"未成功打开文件"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> arr[<span class="number">26</span>] = { <span class="number">0</span> };</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line">infile &gt;&gt; c;</span><br><span class="line"><span class="keyword">while</span> (!infile.<span class="built_in">eof</span>()) {</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">    infile &gt;&gt; c;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h1 id="泛型用一个方法输出double和int">7.泛型用一个方法输出double和int</h1><ol type="1"><li>如果<code>(a - int(a)) &gt; 1E-7</code>:则认为是double</li><li>否则为int</li></ol><h1 id="参考">8. 参考</h1><ol type="1"><li><a href="https://blog.csdn.net/a3192048/article/details/80303547">cin、cin.get()、cin.getline()、getline()的区别</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C++结构化编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++命名空间</title>
      <link href="/2022/04/22/C-%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/"/>
      <url>/2022/04/22/C-%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<h2 id="命名空间">命名空间</h2><h1 id="命名空间的理念和作用">1. 命名空间的理念和作用</h1><ol type="1"><li>理念<ol type="1"><li>兼容</li><li>快速:理解、实现</li></ol></li><li>作用:进一步解决了全局变量/函数的名冲突</li><li>在约束作用域方向，替代static</li><li>细节特点:<ol type="1"><li>别名</li><li>全局</li><li>开放</li><li>可嵌套</li><li>可重载</li></ol></li><li>不可以在同一作用域两次使用using-directive</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> L{</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span>)</span></span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//using-declaration</span></span><br><span class="line"><span class="keyword">using</span> L::k;</span><br><span class="line"><span class="keyword">using</span> L::f;</span><br><span class="line">k = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">f</span>(<span class="number">6</span>);</span><br><span class="line"><span class="comment">//using-directive</span></span><br><span class="line">k = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">f</span>(<span class="number">6</span>);</span><br></pre></td></tr></table></figure><h2 id="命令空间的目的">1.1. 命令空间的目的</h2><ol type="1"><li>解决lib的冲突的</li><li>是在94标准化中出现的</li><li>重要的原因:避免一些命名问题、宏问题和类问题</li><li>可以将优先作用域更加有效的表示出来。</li></ol><h2 id="命令空间的理念">1.2. 命令空间的理念</h2><ol type="1"><li>兼容<ul><li>link不冲突</li><li>程序中定义新名称时不必担心与其他(比如库)冲突</li><li>在库里增加名字，不影响用户</li><li>不同库里含有同名元素，可选择</li><li>不修改函数的前提下，可消解名冲突</li><li>避免命名空间的名字之间发生冲突</li><li>使名字空间可以处理标准库</li></ul></li><li>原则：<ul><li>防冲突</li><li>遇冲突，可选择</li><li>易扩展，与用户独立</li></ul></li></ol><h2 id="命名空间的快速要求">1.3. 命名空间的快速要求</h2><ol type="1"><li>理解:10 minutes</li><li>时间:2 weeks</li></ol><h2 id="例子">1.4. 例子</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> Func(x,y) x ## y<span class="comment">//连接x和y</span></span></span><br><span class="line"><span class="built_in">Func</span>(my,_f)();</span><br><span class="line"><span class="comment">//my_f()</span></span><br><span class="line"><span class="built_in">Func</span>(your,_f)()</span><br></pre></td></tr></table></figure><h1 id="命名空间的两种形式">2. 命名空间的两种形式</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> L</span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span>)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><ol type="1"><li>declaration:对每一个变量进行管理控制</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> L::k;</span><br><span class="line"><span class="keyword">using</span> L::f; </span><br><span class="line"></span><br><span class="line">k=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">f</span>(<span class="number">6</span>);</span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>directive:全局应用</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> L;</span><br><span class="line"></span><br><span class="line">k=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">f</span>(<span class="number">6</span>);</span><br></pre></td></tr></table></figure><ol start="3" type="1"><li>在约束作用域方面，替代static</li></ol><h2 id="细节">2.1. 细节</h2><ol type="1"><li>别名(namespace本身名字也会冲突)</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> American_Telephone_and_Telegraph {}</span><br><span class="line"><span class="keyword">namespace</span> ATT = American_Telephone_and_Telegraph</span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>全局：无命名空间，只有<code>::</code>默认为全局变量</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="keyword">namespace</span> X{</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="type">int</span> a=<span class="number">0</span>;</span><br><span class="line">        a++;</span><br><span class="line">        X::a++;</span><br><span class="line">        ::a++;<span class="comment">//无命名空间则为全局变量，全局变量默认最外层</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><ol type="1"><li>开放:可以多次定义，持续扩展</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> A</span><br><span class="line">{   <span class="type">int</span> a;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> A</span><br><span class="line">{   <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span> </span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><ol start="4" type="1"><li>可嵌套</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> L1{</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="keyword">namespace</span> L2{</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span> </span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">L1::L2::<span class="built_in">f</span>(); </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> L1;</span><br><span class="line">L2::<span class="built_in">f</span>();</span><br></pre></td></tr></table></figure><ol start="5" type="1"><li>重载</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> B{</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span>)</span> </span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">namespace</span> A{</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">char</span>)</span> </span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> A;<span class="comment">//A::f和f形成了重载关系</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">g</span><span class="params">()</span></span>{</span><br><span class="line">   <span class="built_in">f</span>(<span class="string">'1'</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//错误</span></span><br><span class="line"><span class="comment">//不要在同一个作用域中两次使用using-directive</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> B;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> A;</span><br><span class="line">…….</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">g</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{ </span><br><span class="line">    <span class="built_in">f</span>(<span class="string">'1'</span>);</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="6" type="1"><li>向前兼容:新的语言成分不应该对以前的程序的影响<ul><li>优先考虑:using-declaration</li><li>.h和非.h文件:如果使用stdio需要写<code>using namespace std</code>;</li></ul></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello, world\n"</span>); </span><br><span class="line">}</span><br><span class="line"><span class="comment">//stdio</span></span><br><span class="line"><span class="keyword">namespace</span> std { </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">printf</span><span class="params">( <span class="type">const</span> <span class="type">char</span> *, …)</span></span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//stdio.h</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> std { </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">printf</span><span class="params">( <span class="type">const</span> <span class="type">char</span> *, …)</span></span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C++结构化编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++环境问题</title>
      <link href="/2022/04/22/C-%E7%8E%AF%E5%A2%83%E9%97%AE%E9%A2%98/"/>
      <url>/2022/04/22/C-%E7%8E%AF%E5%A2%83%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="c-出现的部分问题">C++ 出现的部分问题</h2><h1 id="x86和x64的不同">1. x86和x64的不同</h1><ol type="1"><li>x86是32位系统</li><li>x64是64位系统</li><li>在配置dll文件的时候务必注意两者区别</li></ol><h1 id="xc00000007应用无法启动的问题">2.xc00000007应用无法启动的问题</h1><ol type="1"><li>我遇到的是链接库的ddl文件和调试模式不同，32位和64位混淆</li></ol><h1 id="缺少ddl文件">3. 缺少ddl文件</h1><ol type="1"><li>首先务必确认是32位操作系统还是64位操作系统</li><li>去网上找到网站下载并且配置到提示的对应路径</li></ol>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C++结构化编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心关键字</title>
      <link href="/2022/04/22/C-%E6%A0%B8%E5%BF%83%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2022/04/22/C-%E6%A0%B8%E5%BF%83%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h1 id="c核心关键字">C++核心关键字</h1><h1 id="friend">Friend</h1><ol type="1"><li>private和protected不能从声明它们的同一类外部访问。</li><li>被friend关键字修饰的函数或类成为友元函数或友元类。</li></ol><h1 id="this">this</h1><ol type="1"><li>在C++中，每一个对象都可以通过this指针来访问自己的地址。</li><li>this是所有成员函数的隐藏参数。</li></ol><h2 id="注意">注意</h2><ol type="1"><li>友元函数没有this指针</li><li>this关键字之能用于成员函数，不能被修饰static的函数。</li><li>因为在C++中，this关键字是一个指向对象自己的指针，不能加点，而是用-&gt;</li></ol><h1 id="volatile">volatile</h1><h2 id="易变性">易变性</h2><ol type="1"><li>也就是在汇编层面上来讲，下一条语句不会直接使用上一条语句的volatile变量的寄存器内容，而是重新从内存读取。</li></ol><h2 id="不可优化">不可优化</h2><ol type="1"><li>volatile告诉编译器，不要对这个变量进行优化，保证程序员写在代码中的指令一定会被执行。</li></ol><h2 id="顺序性">顺序性</h2><ol type="1"><li>保证在多线程情况下的一定的处理顺序</li></ol><h2 id="参考">参考</h2><p><a href="https://www.cnblogs.com/god-of-death/p/7852394.html">解释volatile关键字</a></p><h1 id="static">static</h1><ul><li>用static可以为类类型的所有对象所共有，像是全局对象，但又被约束在类类型的名字空间中。static定义的静态变量在函数执行后不会释放其存储空间。<ul><li>修饰一个全局变量只对定义在同一文件中的函数可见：其他文件可以定义相同名字的变量。</li><li>修饰局部变量，这个变量值不会因为函数终止而丢失，该变量在全局函数区分配内存(局部变量在栈区)</li></ul></li><li>可以实施封装，将其放在private和protected区域</li><li>static成员没有this指针，它不是任何一个对象的组成部分，推荐使用"类名::static成员名"调用</li></ul><h2 id="成员函数">成员函数</h2><ol type="1"><li>声明时候写static关键词</li><li>定义时候不写static关键词</li><li>不可以使用const以修饰其不改变其成员属性。<code>static void f() const{};//error</code>，因为static函数不包含this指针</li><li>不能使用virtual修饰其虚拟性</li><li>目的:作为类作用域的全局函数。不能访问类的非静态数据成员。类的静态成员函数没有this指针，这导致<ol type="1"><li>不能直接存储类的非静态成员变量，调用非静态成员函数</li><li>不能被声明为virtual</li></ol></li></ol><h2 id="数据成员">数据成员</h2><ol type="1"><li>声明时候写static关键词</li><li>定义时候不写static关键词，如果定义的时候加了，其实是变成了<strong>文件作用域</strong></li><li><code>static const</code>数据成员<ol type="1"><li>可以在类中声明并且初始化，然后在类定义之外再次进行定义</li><li>或者在类中声明，但在类定义外进行定义。</li></ol></li><li><strong>非const的static数据成员仅能在类中声明，并在类定义之外进行定义。</strong></li></ol><h1 id="const">const</h1><ol type="1"><li>const定义的常量在超出其作用域之后<strong>其空间会被释放</strong><ol type="1"><li>const数据成员只在某个对象生存期内是常量</li><li>对于整个类是可变的，因为类是可以创建多个对象，对于不同对象其const数据成员的值可以不同</li></ol></li><li>const数据成员的初始化<strong>只能在类的构造函数的初始化列表中进行</strong>，想要建立在整个类中都恒定的常量，应该用类对的枚举常量来实现，或者staticconst</li><li>const成员函数主要目的是防止成员函数修改对象的内容。即const成员函数不能修改成员变量的值，但是可以访问成员变量。当方法成员函数时，该函数只能是const成员函数。</li><li><strong>数组成员不能在初始化列表中初始化</strong></li></ol><h1 id="protected">protected</h1><h1 id="private">private</h1><h1 id="public">public</h1><p>三个一起讲</p><ol type="1"><li><p><strong>类的一个特征就是封装，public和private作用就是实现这一目的</strong>。所以：</p><p>用户代码（类外）可以访问public成员而不能访问private成员；private成员只能由类成员（类内）和友元访问。</p></li><li><p><strong>类的另一个特征就是继承，protected的作用就是实现这一目的</strong>。所以：</p><p>protected成员可以被派生类对象访问，不能被用户代码（类外）访问。</p></li></ol><h2 id="示例">示例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="type">int</span> a;</span><br><span class="line">  <span class="built_in">A</span>(){</span><br><span class="line">    a1 = <span class="number">1</span>;</span><br><span class="line">    a2 = <span class="number">2</span>;</span><br><span class="line">    a3 = <span class="number">3</span>;</span><br><span class="line">    a = <span class="number">4</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span>{</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; endl;    <span class="comment">//正确</span></span><br><span class="line">    cout &lt;&lt; a1 &lt;&lt; endl;   <span class="comment">//正确</span></span><br><span class="line">    cout &lt;&lt; a2 &lt;&lt; endl;   <span class="comment">//正确，类内访问</span></span><br><span class="line">    cout &lt;&lt; a3 &lt;&lt; endl;   <span class="comment">//正确，类内访问</span></span><br><span class="line">  }</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="type">int</span> a1;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  <span class="type">int</span> a2;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="type">int</span> a3;</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">  A itema;</span><br><span class="line">  itema.a = <span class="number">10</span>;    <span class="comment">//正确</span></span><br><span class="line">  itema.a1 = <span class="number">20</span>;    <span class="comment">//正确</span></span><br><span class="line">  itema.a2 = <span class="number">30</span>;    <span class="comment">//错误，类外不能访问protected成员</span></span><br><span class="line">  itema.a3 = <span class="number">40</span>;    <span class="comment">//错误，类外不能访问private成员</span></span><br><span class="line">  <span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p><strong>继承中的特点：</strong></p><p>先记住：不管是否继承，上面的规则永远适用！</p><p>有public, protected,private三种继承方式，它们相应地改变了基类成员的访问属性。</p><p><strong>1.public继承：</strong>基类public成员，protected成员，private成员的访问属性在派生类中分别变成：public,protected, private</p><p><strong>2.protected继承：</strong>基类public成员，protected成员，private成员的访问属性在派生类中分别变成：protected,protected, private</p><p><strong>3.private继承：</strong>基类public成员，protected成员，private成员的访问属性在派生类中分别变成：private,private, private</p><p><strong>！！！但无论哪种继承方式，上面两点都没有改变</strong>：</p><p>1.private成员只能被本类成员（类内）和友元访问，不能被派生类访问；</p><p>2.protected成员可以被派生类访问。</p><h2 id="参考-1">参考</h2><p><a href="https://zhuanlan.zhihu.com/p/70758317">深入理解C++中public、protected及private用法- 知乎 (zhihu.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C++结构化编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++函数</title>
      <link href="/2022/04/22/C-%E5%87%BD%E6%95%B0/"/>
      <url>/2022/04/22/C-%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="c-函数">C++ 函数</h2><h1 id="函数">1. 函数</h1><ol type="1"><li>一个函数就是一个功能</li><li>函数包括<ol type="1"><li>系统函数(库函数)</li><li>用户自己定义的函数<ol type="1"><li>无参函数</li><li>有参函数</li></ol></li></ol></li></ol><h2 id="函数的原则">1.1. 函数的原则</h2><ol type="1"><li>函数不可以被<strong>嵌套定义</strong>:函数内部不可以再次定义新的函数</li><li>函数可以通过原型完成有默认参数的函数</li><li>函数是先定义后使用，具体是指上下文环境</li><li><code>Runtime Environment</code>在我们C++中是使用<code>Stack</code></li></ol><h1 id="函数模板">2. 函数模板</h1><ol type="1"><li><code>template &lt;typename T&gt;</code></li><li><code>T max(T a,T b, T c){}</code></li><li>在运行时确定T的类型</li></ol><h1 id="函数编译链接">3. 函数编译链接</h1><ol type="1"><li>编译只编译当前模块</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">g</span>(){<span class="comment">//a.cpp</span></span><br><span class="line">    <span class="built_in">f</span>();<span class="comment">//b.cpp</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>编译每个编译单元(<code>.cpp</code>)时是相互独立的，即每个cpp文件之间是不知道对方的存在的,<code>.cpp</code>编译成<code>.obj</code>后，link期时<code>a.obj</code>才会从<code>b.obj</code>中获得<code>f()</code>函数的信息(这就是为什么要预先)</li><li>link时将编译的结果连接成可执行代码，主要是确定各部分的地址,将编译结果中的<strong>地址符号全换成实地址</strong>(call指令在a.cpp被编译时只是callf的符号，而不知道f确切的地址)</li></ol><h1 id="重载overloading-重写overriding">4. 重载(Overloading)重写(Overriding)</h1><ol type="1"><li>overload:语言的多态</li><li>override:父子类的，OO语言独有多态</li><li>多态不是程序语言独有的，而是语言拥有的特性。</li><li>C++支持重载，C不支持重载。</li></ol><h2 id="函数的重载overload">4.1. 函数的重载(Overload)</h2><ol type="1"><li>原则:<ol type="1"><li>名称相同，参数不同(重载函数的参数个数、参数类型、参数顺序至少一个不同)</li><li>返回值类型不作为区别重载函数的依据</li></ol></li><li>匹配原则:<ol type="1"><li>严格匹配</li><li>内部转换</li><li>用户定义的转换</li></ol></li><li>以下为几个例子</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">(<span class="type">int</span> i)</span> </span>{</span><br><span class="line">cout &lt;&lt; <span class="string">"bar(1)"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">(<span class="type">const</span> <span class="type">char</span> c)</span> </span>{</span><br><span class="line">cout &lt;&lt; <span class="string">"bar(2)"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span> </span>{</span><br><span class="line">cout &lt;&lt; <span class="string">"func(1)"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">char</span> c)</span> </span>{</span><br><span class="line">cout &lt;&lt; <span class="string">"func(2)"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">long</span> <span class="type">long</span> ll)</span> </span>{</span><br><span class="line">cout &lt;&lt; <span class="string">"func(3)"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hum</span><span class="params">(<span class="type">int</span> i, ...)</span> </span>{</span><br><span class="line">cout &lt;&lt; <span class="string">"hum(1)"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hum</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> </span>{</span><br><span class="line">cout &lt;&lt; <span class="string">"hum(2)"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="type">char</span> c = <span class="string">'A'</span>;</span><br><span class="line"><span class="built_in">bar</span>(c);</span><br><span class="line"><span class="type">short</span> s=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">func</span>(s);</span><br><span class="line"><span class="built_in">hum</span>(<span class="number">12</span>, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">hum</span>(<span class="number">10</span>, <span class="number">12</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//输出结果为</span></span><br><span class="line"><span class="comment">//bar(2)</span></span><br><span class="line"><span class="comment">//func(1)</span></span><br><span class="line"><span class="comment">//hum(2)</span></span><br><span class="line"><span class="comment">//hum(1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//下面这种是不被允许的，ambiguous</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">long</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">double</span>)</span></span>;            </span><br><span class="line"><span class="built_in">f</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><h2 id="函数的默认参数是对函数重载的补充">4.2.函数的默认参数(是对函数重载的补充)</h2><ol type="1"><li>默认参数的声明:默认参数是严格从<strong>右至左</strong>的顺序使用的<ol type="1"><li>在函数原型中给出</li><li>先定义的函数中给出</li></ol></li><li>默认参数的顺序:<ol type="1"><li>右-&gt;左</li><li>不间断</li></ol></li><li>默认参数与函数重载要注意<ul><li><code>void f(int); void f(int, int=2);</code></li></ul></li><li>在定义中一般不给出默认参数，在调用的时候使用函数原型的时候给出默认参数。</li><li>函数默认重载，在面向对象编程中，子类即便修改默认参数，也不生效。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.cpp中</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span></span>{}</span><br><span class="line"><span class="comment">//b.cpp中</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span>,<span class="type">int</span> = <span class="number">2</span>,<span class="type">int</span> = <span class="number">3</span>)</span></span>;<span class="comment">//使用函数原型</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">g</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="built_in">f</span>(<span class="number">1</span>);<span class="comment">//==f(1,2,3)</span></span><br><span class="line">    <span class="built_in">f</span>(<span class="number">1</span>,<span class="number">3</span>);<span class="comment">//==f(1,3,3)</span></span><br><span class="line">    <span class="built_in">f</span>(<span class="number">1</span>,<span class="number">5</span>,<span class="number">5</span>);<span class="comment">//==f(1,5,5)</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><h1 id="外部函数-extern">5. 外部函数 extern</h1><ol type="1"><li>符号表:Name mangling: extern "C"<ul><li>在C++的g中调用C中的f，会在link的时候出问题(因为不在C++的符号表中)</li><li>解决方案:在函数名前面加上extern的关键词(这样子编译器就会在编译过程中从外部进行寻找)</li></ul></li><li>C编译器编译的文件被放置在lib库中，C++不能直接调用，而是需要extern才可以</li><li>原因:符号表机制</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">extern</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">g</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="built_in">f</span>();</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="符号表机制">5.1. 符号表机制</h2><ol type="1"><li>符号表：与编译的各个阶段都有交互，存有函数名、地址等信息；编译时会创建一个函数符号表<code>&lt;name,address&gt;</code>，对应的符号后面的地址还没确定(link期决定)，callname根据name找到符号表对应的地址，再执行</li><li>对于c语言来说，编译得到的符号表内函数f在符号表里的name就是f(不存在函数重载)</li><li>对于c++来说，因为有重载，所以f(int)和f(float)在符号表里的name是不同的</li><li>c++对于c语言的函数f会按c++的方式生成函数表中的nameA，但c编译好的函数表内f对应的nameB和nameA不一致，导致c++无法找到该函数</li></ol><h1 id="函数-与-内存">6. 函数 与 内存</h1><ol type="1"><li>在内存中的code，是不可以断章取义的。</li><li>需要按照类型来进行</li><li>函数是使用<strong>临时性存储空间</strong>，</li></ol><h2 id="存储空间与内存">6.1. 存储空间与内存</h2><ol type="1"><li>从上往下分别是<ul><li>code:每个指令都有对应的单元地址。函数的代码存放的位置是受到限制的</li><li>Data:存放数据(局部变量和全局变量)</li><li>Stack:由系统管理，存放函数</li><li>Heap:可以用程序员进行分配，可以在运行时动态确定，<code>int *p = (int *)malloc(4)</code>，归还内存<code>free</code>(在C++中不推荐使用这种方法进行处理，而是使用new和delete)</li></ul></li><li>compiler组织成<strong>符号表</strong>。CPP是一个文件一个文件进行编译的。<ul><li>在编译A文件的时候，是不知道B文件存在的，也就是说每一个文件都是单独编译的。</li><li>借助符号表来获取存储地址，问题?函数名相同，重载(多态)的问题,解决:不仅仅按照函数名，还要<strong>按照函数参数</strong>来划分。</li><li>所以函数表，不仅仅存储函数名，还存储函数的参数返回值类型。</li></ul></li><li>问题:可以在不降低可读性的前提下，降低COST吗?</li><li>运行逻辑是由RuntimeEnvironment是有差异的：注意合作方的运行环境(使用Lib的注意)</li></ol><h2 id="runtime-environment">6.2. RunTime Environment</h2><ol type="1"><li>每一个函数都有栈空间，被称为frame(activeframe是当前运行函数的栈空间)</li><li>以下类似是一种契约，这种约定被compiler和linker共同管理</li></ol><h3 id="cdecl">6.2.1. _cdecl</h3><ol type="1"><li>函数空间(参数)归<strong>调用者</strong>管理，本章讲解的是这种，也就是被调用者不清空栈，调用者清空栈。</li><li>问题:函数调用者结束后，原空间的参数仍然在(未归还)</li><li>好处:由调用者管理所有的调用参数，可以灵活管理参数<ul><li>例子:<code>printf()</code>函数是可变参数，根据字符串形式决定(由调用者控制):<code>int printf(const char * format,...)</code></li><li>上述例子，只能由调用者归还。</li><li>无法控制传递参数的个数，写了8个%d，但是只传递了1个，则会导致调用者环境被破坏。</li><li>同样的问题，就算环境不被破坏，则会导致，软件内部不应该被看到的数据被拿出来。</li></ul></li><li>坏处:安全问题，调用者环境被破坏。</li></ol><h3 id="stdcal">6.2.2. _stdcal</h3><ol type="1"><li>函数调用后，函数空间由被调用者管理，被调用者清空栈</li><li>调用者来传递参数(申请空间)，由被调用者归还参数(归还空间)，这部分空间被称为<strong>中间地带</strong>。</li><li>好处:空间节省，跨平台性：比如C++调用C的时候(C不允许重载)</li><li>坏处:对于可变参数的函数无法计算ebp的参数个数，但是对于调用者是知道的，这样只能使用_cdecl</li></ol><h3 id="fastcall">6.2.3. _fastcall:</h3><ol type="1"><li>是一种快速调用方式，利用栈空间</li><li><a href="https://baike.baidu.com/item/__fastcall/3736920?fr=aladdin">_fastcall</a></li></ol><h3 id="调用者和被调用者">6.2.4. 调用者和被调用者</h3><ol type="1"><li>caller:调用者</li><li>callee:被调用者</li></ol><h1 id="函数执行机制">7. 函数执行机制</h1><h2 id="建立被调用函数的栈空间stack">7.1.建立被调用函数的栈空间(Stack)</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-C-plus-plus-advanced-programming/img/function/1.png"></p><ul><li>栈空间是从高地址向低地址生长</li><li>栈底:ebp(当前函数的存取指针，即存储或者读取数时的指针基地址)</li><li>栈顶:esp(当前函数的栈顶指针)</li><li>保存:返回地址、调用者的基指针</li><li>过程描述:调用一个函数时，先将堆栈原先的基址(ebp)入栈，以保存之前任务的信息。然后将栈顶指针的值赋给ebp，将之前的栈顶作为新的基址(栈底)，然后在这个基址上开辟相应的空间用作被调用函数的堆栈。函数返回后，从ebp中可取出之前的esp值，使栈顶恢复函数调用前的位置；再从恢复后的栈顶可弹出之前的EBP值，因为这个值在函数调用前一步被压入堆栈。这样，EBP和ESP就都恢复了调用前的位置，堆栈恢复函数调用前的状态。</li></ul><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-C-plus-plus-advanced-programming/img/function/2.png"></p><h2 id="参数传递">7.2. 参数传递</h2><h3 id="值传递call-by-valuecc支持">7.2.1. 值传递(call byvalue,C、C++支持)</h3><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-C-plus-plus-advanced-programming/img/function/3.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-C-plus-plus-advanced-programming/img/function/4.png"></p><ol type="1"><li>最上面是main函数，左侧，下面是Function.</li><li>为什么ebp和esp之间距离很大，因为我们要<strong>对齐</strong>，提高内存管理效率。</li><li>数据类型决定存放数据的空间的大小</li><li>函数调用过程:<ol type="1"><li>开始调用esp从栈顶向下移动32位，存ret_addr，开辟main函数的栈空间</li><li>然后esp继续向下存ebp_main</li><li>然后ebp到esp处</li><li>然后esp到新的函数空间的栈顶</li><li>函数处理</li><li>esp先返回到ebp</li><li>然后ebp根据ebp_main返回，然后esp加一(向上)</li><li>之后esp回到ret_addr位置即可。</li><li>动画过程看PPT 50页</li></ol></li><li>eip 存放了ret_addr</li></ol><h3 id="引用传递函数副作用call-by-referencec支持">7.2.2.引用传递:函数副作用(call by reference,C++支持)</h3><ol type="1"><li>传递的是地址，会同时修改对应地址单元中的值。</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-C-plus-plus-advanced-programming/img/function/5.png"><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-C-plus-plus-advanced-programming/img/function/6.png"></p><h3 id="call-by-name">7.2.3. call by name</h3><ol type="1"><li>call by name 是指在用到该参数的时候才会计算参数表达式的值。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">p</span><span class="params">(<span class="type">int</span> x)</span></span>{</span><br><span class="line">    ++i;</span><br><span class="line">    ++x;</span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">a[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">a[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">p</span>(a[i]);</span><br><span class="line"><span class="comment">//值传递:对于i的修改会影响全局，但是不影响a[i]</span></span><br><span class="line"><span class="comment">//引用传递:同时影响i和a[i]</span></span><br><span class="line"><span class="comment">//call by name:将p函数中的x进行替换。(Delayed Evaluation)，也就是a[2] = 3;x -&gt; a[i]</span></span><br><span class="line"><span class="comment">//call by name:主要是对于没有函数副作用的时候</span></span><br></pre></td></tr></table></figure><h3 id="call-value-resultcopy-restore">7.2.4. callvalue-result:copy-restore</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">p</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>{</span><br><span class="line">    ++x;</span><br><span class="line">    ++y;</span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">p</span>(a,a);</span><br><span class="line"><span class="comment">//a = 1,如果两个都为引用传递，则a=3</span></span><br></pre></td></tr></table></figure><h2 id="保存调用函数的运行状态额外的cost">7.3.保存调用函数的运行状态(额外的Cost)</h2><ul><li>存储新的基指针：如上面，将ret_addr和main_esp进行存储。</li><li>分配函数存储的空间</li><li>执行某些功能</li><li>释放不必要的存储空间</li></ul><h2 id="将控制转交给被调函数">7.4. 将控制转交给被调函数</h2><ul><li>加载调用者的基指针</li><li>记载返回地址</li></ul><h2 id="summary">7.5. Summary</h2><ol type="1"><li>加载参数(进栈)</li><li>保存上下文环境<ul><li>保存返回地址</li><li>保存调用者基指针</li></ul></li><li>执行函数<ul><li>设置新的基指针</li><li>分配空间(可选)</li><li>执行一些任务</li><li>释放空间(如果分配了的话)</li></ul></li><li>恢复上下文环境<ul><li>加载调用者基指针</li><li>加载返回指针</li></ul></li><li>继续执行调用者的功能</li></ol><h2 id="思考">7.6. 思考</h2><ol type="1"><li>如果所有数据都放置在内存中的数据区<ul><li>好处:方便管理</li><li>坏处:占用空间大，没有利用程序的局部性。</li></ul></li></ol><h1 id="函数原型">8. 函数原型</h1><ol type="1"><li>遵守先定义后使用原则</li><li>自由安排函数定义位置</li><li>语句:只需参数类型，无需参数名称</li><li>编译器检查</li><li>函数原型:只需要看到函数名和参数读取到即可:<code>int func(int,int)</code><ul><li>在调用点一定要能看到接口</li><li>仅仅需要函数名和参数类型即可</li></ul></li><li>函数原型应当放置在头文件中</li></ol><h1 id="内外部函数划分使用">9. 内外部函数划分使用</h1><h2 id="内部函数">9.1. 内部函数</h2><ol type="1"><li>static修饰</li></ol><h2 id="外部函数">9.2. 外部函数</h2><ol type="1"><li>默认状态的extern</li></ol><h1 id="内联函数inline">10. 内联函数inline</h1><ol type="1"><li>目的:<ol type="1"><li>提高可读性</li><li>提高效率</li><li>解决了两个cost的问题</li></ol></li><li>对象:使用频率高、简单、小段代码</li><li>实现方法:编译系统将为inline函数创建一段代码，在每次调用时，用相应的代码替换</li><li>限制：<ol type="1"><li>必须是非递归函数,因为已经加入主体部分了</li><li>由编译系统控制,和编译器是完全相关的</li></ol></li><li>inline 关键字 仅仅是请求<ol type="1"><li>有可能是递归，无法加入</li><li>也有可能是很复杂的函数，导致无法理解(上下文比较复杂)</li></ol></li><li>提请inline但是被拒绝可能是有代价的</li><li>如果对象的初始化-构造函数为明确给出，计算机会给出inline的构造函数</li><li>宏:<code>max(a,b) (a) &gt; (b) ? (a) : (b)</code>：不同于inline函数，一定要有括号，因为运算数据中的优先级不同</li></ol><h2 id="例子">10.1. 例子</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-C-plus-plus-advanced-programming/img/function/7.png"></p><ol type="1"><li>没有进行替换，只是将ascii函数体内操作直接进行替换。</li><li>内联必须和函数体放在一起，而不是和原型放在一起，并且函数体必须出现在调用之前，否则函数可以编译，但是不出现内联。</li></ol><h2 id="使用inline的优点和缺点">10.2. 使用inline的优点和缺点</h2><ol type="1"><li>只有对编译系统的提示<ol type="1"><li>过大、复杂、循环选择和函数体过大的会导致被拒绝</li><li>函数指针</li></ol></li><li>编译器：静态函数</li><li>缺点:<ol type="1"><li>增大目标代码</li><li>病态的换页:<strong>如果有过长的代码，被替换进入代码的段中，代码页在内存和磁盘中反复换页抖动</strong>(每调用一次内联函数就会将那段代码复制到主文件中，内存增加，内存调用时原本一页的内容可能出现在第一页+第二页的一部分，<strong>造成操作系统的"抖动"</strong>)</li><li>降低指令快取装置的命中率(instruction cache hit rate)</li></ol></li></ol><h2 id="问题">10.3. 问题</h2><ol type="1"><li>是所有的编译器都能做到inline吗?不是都能做到</li><li>如果我向编译器要求inline，是否一定能做到吗？如果做不到按照正常函数进行处理</li><li><a href="https://blog.csdn.net/chunyexiyu/article/details/43673059">函数放在头文件中被多次包含的重定义问题</a></li></ol><h1 id="rop">11. ROP</h1><ol type="1"><li>在返回地址的时候，攻击我们的程序，调整Bad_addr导致调用到坏的代码(将错误的代码注入stack中去,在传入参数的过程中传入错误的代码)</li><li>防止这种攻击:禁止在执行过程中写入stack</li><li>新的攻击方式:修改return前面的<strong>短序列</strong>(rop链攻击)<ul><li>使用正确代码的错误组合进行攻击</li><li>如果太长，需要依赖寄存器，导致攻击困难</li></ul></li><li>防止这种攻击:禁止读系统中的代码<ol type="1"><li>因为这种攻击需要先读出来所有的操作，然后进行组合，如果不能读出也就没有了</li></ol></li></ol><h2 id="什么是-rop">11.1. 什么是 ROP</h2><ol type="1"><li>所谓ROP:就是面向返回语句的编程方式，它就用libc代码段里面的多个retq前的一段指令的一段指令拼凑出一段有效的逻辑，从而达到攻击目的。</li><li>什么是retq：retq指定决定程序返回值在哪里执行，由栈上的内容决定，这是攻击者很容易控制的地址。</li><li>控制参数:在retq前面执行的popreg指令，将栈上的内容弹到指令的寄存器上，以达到预期。(重复上述操作指导达成目的)</li><li>我们利用glibc进行逆向工程来查看返回前的pop指令</li></ol><h2 id="参考">11.2. 参考</h2><ol type="1"><li><a href="https://blog.csdn.net/linyt/article/details/48738757/">使用ROP攻击技术</a></li></ol><h1 id="函数副作用">12. 函数副作用</h1><ol type="1"><li>函数副作用可以实现call byreference，参考scanf，而并不是通过return多参数而实现。</li></ol>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C++结构化编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++高级程序设计</title>
      <link href="/2022/04/22/C-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
      <url>/2022/04/22/C-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="16.61ex" height="2.032ex" role="img" focusable="false" viewBox="0 -704 7341.6 898"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="mi" transform="translate(791,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1363,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1848,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(2209,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(2675,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mtext" transform="translate(3195,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(3445,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mi" transform="translate(4194,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4645,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(5130,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(6008,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mo" transform="translate(6535.8,0)"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mtext" transform="translate(7091.6,0)"><path data-c="A0" d=""></path></g></g></g></svg></mjx-container></span> 张洪胤</p><h2 id="c高级程序设计">C++高级程序设计</h2><ol type="1"><li>C++广泛应用于很多的领域，使用C++我们计算出来很多的工具</li></ol><h1 id="语言">1. 语言</h1><h2 id="语言特征">1.1. 语言特征</h2><ol type="1"><li>Syntax、Semantics、Pragmatics 句法、语义、语用<ul><li>语义:<ul><li>静态语义:Static</li><li>动态语义:Dynamic semantics</li><li>静态:在将程序交给操作系统之前，也就是在形成过程中的</li></ul></li></ul></li><li>EBNF/语法图:从自然语言中抽象出来的，用符号语言形式化，thank sb forsth</li><li>BNF范式 巴科斯范式<ul><li>描述编程语言的文法，自然语言存在不同程度的二义性。这种模糊、不确定的方式无法精确定义一门程序设计语言。必须设计一种准确无误地描述程序设计语言的语法结构，这种严谨、简洁、易读的形式规则描述的语言结构模型称为文法。该范式由他定义Algol 60 语言时提出</li><li>::-是按照一定规则实现，以下的ID、A、D是非终结符，使用&lt;&gt;代替，而<code>_</code>是终结符</li><li><code>&lt;ID&gt; ::- _&lt;A&gt;_&lt;&gt;</code>(ID根据以下三条规则进行生成，有四种结果)</li><li><code>&lt;A&gt; ::- a|b</code></li><li><code>&lt;D&gt; ::- 0|1</code></li></ul></li></ol><p><img src="https://s2.loli.net/2022/04/22/m4eqxNKof5RWaJh.png"></p><ol start="4" type="1"><li>计算机是根据给定的范式规则，不断用右部来替换左部，生成抽象语法树<ul><li>从下往上:reduce</li><li>从上往下:reduct</li></ul></li></ol><h2 id="avram-noam-chomsky">1.2. Avram Noam Chomsky</h2><ol type="1"><li><p>将自然语言分成四类</p><ul><li>RG:自动识别模型 Finite Automata</li><li>CFG:自动识别模型 PushDown Automata 使用栈</li><li>CSG:自动识别模型 Linear Bounded Automata</li><li>PSG:自动识别模型 Turing Automata</li><li>从上往下:约束越来越小，外延越来越大</li><li>用ad hoc进行解决</li></ul></li><li><p>语法:上下文无关文法 Context free grammer</p><ul><li>也有不是上下文无关文法的</li></ul></li><li><p>在特定的字母表上，按照一定的语法形成的符号串的集合就是语言</p></li><li><p>文法定义G=(V<sub>N</sub>，V<sub>T</sub>，R，Z)</p><ul><li>V<sub>N</sub>非终结符号(或语法实体，或变量)集</li><li>V<sub>T</sub>终结符号集</li><li>R 规则集合</li><li>Z 目标</li></ul></li></ol><h2 id="语义分类">1.3. 语义分类</h2><ol type="1"><li>操作语义</li><li>指称语义</li><li>公理语义</li></ol><h1 id="programming">2. Programming</h1><h2 id="对于programming的不同看法">2.1. 对于Programming的不同看法</h2><h3 id="science-科学">2.1.1. Science 科学</h3><p><img src="https://s2.loli.net/2022/04/22/NiVPZrT4tU3dEWS.png"></p><ol type="1"><li>The Science of programming —— David Gries<ul><li>程序一般会有前置条件和后置条件，在写程序之前要先写好前后置条件</li><li>上图中从左到右的为不断修正程序的bug</li><li>最后x的输入条件是从结果 x = y * q + r 推知</li></ul></li><li>应该的程序形式:calculus,在每一句前后都有条件(检查)</li></ol><p><img src="https://s2.loli.net/2022/04/22/zbaOpLNxiZ1SIl8.png"></p><ol start="3" type="1"><li>另一种保证程序正确性方法:<ul><li>使用之前提到的自动机进行模型验证</li></ul></li></ol><h3 id="艺术">2.1.2. 艺术</h3><ol type="1"><li>The Art of Computer Programming —— Donald Ervin Knuth(推荐阅读)</li><li>为数字计算机准备程序的过程特别吸引人，不仅因为它可以带来经济和科学上的回报，还因为它可以成为一种审美体验，就像作诗或作曲一样</li><li>在许多情况下，除非人们对计算机的机器语言也有一定的了解，否则无法欣赏这种算法的全部美；相应的机器程序的效率是一个不能脱离算法本身的重要因素。</li></ol><h2 id="编程范式">2.2. 编程范式</h2><h3 id="命令式程序编程范式">2.2.1. 命令式程序编程范式</h3><ol type="1"><li>过程式程序设计<ul><li>基于过程调用的概念</li><li>分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了(命令式思想：即程序员一步步告诉计算机应该做什么)</li></ul></li><li>面向对象式程序设计<ul><li>人类与现实世界现象相互作用的概念理论和模型</li><li>把构成问题事务分解成各个对象，建立对象的目的不是为了完成一个步骤，而是为了描叙某个事物在整个解决问题的步骤中的行为</li></ul></li></ol><p><img src="https://s2.loli.net/2022/04/22/4d8urQlCnzNevyT.png"></p><ol type="1"><li>做不到所有问题都可以用完备系统进行计算的</li><li>可计算性:问题<ul><li>可递归的问题都是可计算的</li><li>可以使用lambda算子可以表示的都是可计算的</li><li>使用图灵机表示的都是可计算的</li><li>后来证明的上述三个问题是同一个问题</li><li>之后冯诺依曼体系结构解决了计算问题</li></ul></li></ol><h3 id="声明式编程">2.2.2. 声明式编程</h3><ol type="1"><li>函数式设计编程 Haskell、R<ul><li>数学与函数论</li><li>Lisp(atom, list，cons,…) app：Emacs</li><li>函数副作用:函数作用过程中，会修改外部的部分环境参数，比如fg(x)!=gf(x)</li><li>Letax也是这种</li><li>Hadoop:Map Reduce分布式计算:就是把相互独立、无先后序关系的事情并行计算</li><li><a href="https://blog.csdn.net/archimelan/article/details/81940858">什么是函数式编程</a></li></ul></li><li>逻辑式程序设计<ul><li>人工智能中的自动证明</li><li>基于公理，推理规则和查询</li><li>序言</li><li>将人类的知识告诉给机器，然后让机器自己决定计算结果(AI的第二阶段)</li></ul></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">son(a,c)</span><br><span class="line">son(b,c)</span><br><span class="line">brother(X,Y) -son(X,Z),son(Y,Z) 规则</span><br><span class="line">?-brother(a,b) # 询问机器</span><br><span class="line">Yes            # 机器回答</span><br><span class="line">?-brother(a,X) # 询问机器</span><br><span class="line">unknown        # 机器回答</span><br></pre></td></tr></table></figure><ol type="1"><li>无法了解其中具体的运行状况</li></ol><h2 id="c-发展历程">2.3. C++ 发展历程</h2><p><img src="https://s2.loli.net/2022/04/22/CNufoAIFBL5gnwD.png"></p><ol type="1"><li>目的:更告诉地进行编码</li><li>John Backus:发明了FORTRAN，使得编程更贴近于问题本身</li><li>Dijkstra:发明了编译器，著名观点:goto是有害的，不能随意跳转</li><li>Algol 60:其中阐述了很多的一些观点</li><li>脉络一:Algol 68:结构化编程的部分的继承<ul><li>Niklaus Wirth:发明了PASCAL，很实用于教学</li><li>C. A. R. Hoare</li><li>Donald E.Knuth:和 Dijkstra一同提出goto有害性</li><li>继承下来:关于结构化编程的特性</li></ul></li><li>脉络二:系统化编程的继承<ul><li>BCPL:贴近计算机，写出高效的程序，很好的想法:将IO作为类成分而不是语言成分，以提高语言可移植性</li><li>在BCPL和C之间还有B语言，B语言是将BCPL里面的比较繁杂的部分取出。</li><li>C:Dennis Ritchie、Ken Thompson，compiler决定程序语义和性质</li><li>继承下来:关于系统编程的特性</li></ul></li><li>脉络三:Simula 67 第一个OO的研究(OO部分的继承)<ul><li>OO的第一个提出人:Ole-Johan Dahl、Kristen Nygaard</li><li>继承下来:关于面向对象编程的特性</li><li>Barbara Liskov:关于高层复用做出很大的贡献</li></ul></li><li>C++为什么不叫D:因为并没有完全抛弃C中的很多东西，粗略说法</li></ol><h3 id="simula-isimula-67-前身">2.3.1. Simula I(Simula 67 前身)</h3><ol type="1"><li>背景:1962, Kristen Nygaard(KN), initiated a project<ul><li>模拟语言:仿真，用户模拟某些不能真实做的、已有较大随机性的实验</li><li>UNIVAC</li></ul></li><li>选择:FORTRAN or ALGOL60(已经有一些局部性概念了)?<ul><li>块状结构</li><li>良好的编程安全性</li><li>欧洲爱国主义</li></ul></li><li>入手:仿真语言突破严格的后进先出机制</li><li>措施:<ol type="1"><li>类似活动声明的过程</li><li>用于动态命名和引用的显式进程指针</li><li>访问机制</li><li>进程的调度和排序机制</li></ol></li><li>实现:<ul><li>编写新的运行时系统(垃圾收集器)</li><li>compiler extensions：block prex" SIMULA"，兼容Algol60编译器扩展:</li></ul></li><li>还不是编程语言</li></ol><h3 id="simula-67">2.3.2. Simula 67</h3><ol type="1"><li>思考:公共部分抽象形成class和subclass<ul><li>活动/过程:通常用于编程和系统设计</li><li>属于具有公共属性的不同类的对象</li><li>Tony Hoare提出了类和子类的概念</li></ul></li><li>方法:<ul><li>类：假设运算符是为整个语言定义的基本协同程序调用</li><li>继承</li></ul></li><li>更多的细节<ul><li>自下而上程序设计</li><li>从"虚拟程序"的概念看自上而下的机制</li><li>Tony Hoare :"abstraction function"</li><li>垃圾收集器</li></ul></li><li>OO paradigm:基本已经形成了OO的全部概念</li><li>缺点:为什么simula 没有向下发展<ul><li>runtime有很大问题，运行慢</li><li>使用人很少，主要在欧洲而不再工业中心美国</li><li>具有不可重用性的问题</li></ul></li></ol><h3 id="bjarne-stroustrup-designed-and-implemented-c">2.3.3. BjarneStroustrup designed and implemented C++</h3><ol type="1"><li>C++的发明人</li><li>BS为了完成博士论文需要一门语言作为支撑<ol type="1"><li>Simula：性能差</li><li>BCPL：debug困难</li><li>虽然他最后还是选择原有语言完成了论文，但是希望能有一门语言综合simula的良好编程体验和BCPL高性能的特点。</li></ol></li></ol><h2 id="c的诞生">2.4. C++的诞生</h2><h3 id="史前-1979">2.4.1. 史前 1979</h3><ol type="1"><li>最早是为了研究分布式系统的系统软件组织:Cambridge ph.D<ul><li>设计：隔离良好的模块组合为软件</li><li>实验：模拟器 IBM/360</li></ul></li><li>实现<ol type="1"><li>Simula:第一阶段<ul><li>优点:良好组合特征、良好的可读性、co-routine、灵活类型系统、编译捕捉错误能力强</li><li>缺点：性能差，确实是很差的</li><li>原因：运行时的类型检查、废料收集</li></ul></li><li>BCPL:第二阶段，问题debug难</li></ol></li></ol><h3 id="思考">2.4.2. 思考</h3><ol type="1"><li>科学观<ol type="1"><li>设计：程序组织 Simula</li><li>效率：连接规则简单、灵活(异构语言) BCPL</li><li>移植性：不能依赖复杂的运行系统</li><li>其他<ul><li>protected、const、区分初始化和赋值、异常(源于OS)</li><li>int x = 8;是初始化</li><li>x = 8是赋值</li></ul></li></ol></li><li>哲学观、历史观<ul><li>实用主义</li></ul></li><li>文学观<ul><li>存在主义</li><li>幽默感</li></ul></li></ol><h3 id="带类的c-1979-方言">2.4.3. 带类的C 1979 方言</h3><ol type="1"><li>UNIX 内核分布到局域网 Bell Lab<ul><li>内核模块化</li><li>流量分析</li></ul></li><li>本质(接近机器，接近问题)<ul><li>组织 class</li><li>计算 C</li><li>舍弃并行，走向通用</li><li>舍弃复数、矩阵、字符串等</li></ul></li><li>工具<ul><li>C-pre: C(某些语言结构不安全，灵活、高校、可用、可移植) + class</li><li>16 projects 1980</li><li>lib + job system</li></ul></li><li>不能舍弃C中"危险" 、"丑陋"特性而付出效益的代价</li><li>Linker 连接兼容性 重于 代码兼容性<ul><li>分别编译 编译一致性保障，头文件</li><li>类型安全</li><li>方便与其他语言实现的模块连接，不能附加DB(如：散列)</li></ul></li><li>稳步前进<ul><li>实现+测试 非论文式</li><li>自我应用</li><li>逐步推广</li></ul></li><li>出发点:<strong>程序员是可以被相信的</strong><ul><li>这就是为什么C++中存在很多很灵活并且看似不合理的地方</li></ul></li><li>在贝尔实验室，C++的思想逐渐，完善，C++思想逐渐完善，C-pre:预处理程序，C+ class of Simula</li></ol><p><img src="https://s2.loli.net/2022/04/22/i1UDM6sqIjYfmlb.png"></p><h3 id="c-1983">2.4.4. C++ 1983</h3><ol type="1"><li>C++ 1983<ul><li>影响语言设计的因素<ul><li>用户 产业界+大学</li><li>运行环境 硬件+OS</li></ul></li><li>避免提供工具</li><li>Cfront</li></ul></li><li>标准化<ul><li>ANSI 1994</li><li>ISO 1998</li></ul></li><li>观点<ol type="1"><li>好的语言不是设计，而是成长起来的</li><li>相比数学，与工程、社会学、哲学的关系更紧密</li><li>亲历实验，依赖老练的程序员</li><li>正交性要让位于有用性和效率</li></ol></li><li>C front就已经生成了所有的语义</li><li>C的编译过程：C++源代码想通过cpp预处理后再通过Cfront翻译成C语言，最后通过C编译器来使程序运行。</li><li>用Cfront不用Cpre的原因：Cpre不懂C语法，Cfront懂，发现语法错误会传回sourcecode，但Cpre将方言部分翻译成c后交给cc，此时若发现错误才传回sourcecode</li><li>正交性：矛盾体，有你没我，有我没你。但这些可以容忍，如果共存后效率能提高</li></ol><table><colgroup><col style="width: 4%"><col style="width: 10%"><col style="width: 38%"><col style="width: 46%"></colgroup><thead><tr class="header"><th>名词</th><th>全称</th><th>功能</th><th>备注</th></tr></thead><tbody><tr class="odd"><td>cpre</td><td>-</td><td>将C++扩展内容翻译成为c</td><td>是C With Class中的含有的</td></tr><tr class="even"><td>cfront</td><td>-</td><td>将c++翻译成为c,可以直接检查语法错误，而不必经过cc</td><td>编译简单分成前端后端，前端负责语法检查，后端负责代码生成和优化，cc负责后端</td></tr><tr class="odd"><td>cc</td><td>c compiler</td><td>c编译器，负责进行语法检查，有问题返回Source code</td><td>-</td></tr><tr class="even"><td>cpp</td><td>c pre process</td><td>-</td><td>-</td></tr></tbody></table><p><img src="https://s2.loli.net/2022/04/22/jYgyXeZTrpftPl6.png"></p><h2 id="c和c的关系">2.5. C和C++的关系</h2><ol type="1"><li>超集</li><li>C++ 支持 C 所支持的全部编程技巧</li><li>任何 C 程序都能被 C++用基本相同的方法编写，并具备同等开销(时间、空间)</li><li>C++ 兼顾细节与抽象</li></ol><h2 id="程序员是应该被相信的">2.6. 程序员是应该被相信的</h2><ol type="1"><li>与可能出现的错误相比，更重要的是能做什么好的事情</li></ol>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C++结构化编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++部分特殊符号</title>
      <link href="/2022/04/22/C-%E9%83%A8%E5%88%86%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7/"/>
      <url>/2022/04/22/C-%E9%83%A8%E5%88%86%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="c中部分特殊符号">C++中部分特殊符号</h2><h1 id="section">1. ~</h1><ol type="1"><li>用在类中的析构函数之前，表示该函数是析构函数。<ol type="1"><li>作用:释放对象的资源，销毁非static成员。</li><li>特点:<ol type="1"><li>无参数无返回值。</li><li>每个类有且只有一个析构函数，不显式定义，系统会帮你生成一个缺省的析构函数。</li><li>析构函数不能重载，一次构造函数的调用一定有一次析构函数的调用。</li></ol></li></ol></li><li>用在数字或者整形变量之前，表示对该数取反操作，按照二进制取反。</li></ol><h1 id="section-1">2. -&gt;</h1><ol type="1"><li>用处:主要用于类类型的指针访问类的成员。</li><li>A-&gt;B:<ol type="1"><li>A只能是指向类、结构、联合的指针。</li></ol></li></ol><h1 id="section-2">3. .</h1><ol type="1"><li>用处:主要用于访问类的成员。</li></ol><h1 id="section-3">4. ||</h1><ol type="1"><li>用处:逻辑或</li></ol><h1 id="section-4">5. &amp;&amp;</h1><ol type="1"><li>用处:逻辑与</li></ol><h1 id="冒号">6. 冒号</h1><h2 id="section-5">6.1. :</h2><ol type="1"><li>用法一:表示机构内位域的定义(即一个变量占几个bit空间)</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">name</span>{</span><br><span class="line">    <span class="type">char</span> a:<span class="number">4</span>;</span><br><span class="line">};</span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>用法二:构造函数后面的冒号起分隔作用，是类给成员变量赋值的方法，初始化列表，更适用于成员变量的常量const型(初始化表)</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">_XXX</span>{</span><br><span class="line">    _XXX():<span class="built_in">y</span>(<span class="number">0</span>){};</span><br><span class="line">}</span><br></pre></td></tr></table></figure><ol start="3" type="1"><li>用法三:public和private后面的，用来声明相应的变量的类型</li><li>用法四:类名冒号后面的是用来定义类的继承。<ul><li>默认继承方式:public</li></ul></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> 派生类名:继承方式 基类名{派生类的成员}；</span><br></pre></td></tr></table></figure><ol start="5" type="1"><li>用法五:在?:这个表达式中</li></ol><h2 id="section-6">6.2. ::</h2><ol type="1"><li>表示域运算符:在类外声明一个函数的实体</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">test</span>{</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test::f</span><span class="params">()</span></span>{</span><br><span class="line">    more;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>直接用在全局函数前，表示是全局函数。</li><li>表示引用成员函数及变量，作用域成员运算符。<ol type="1"><li>静态数据成员既可以通过对象名引用，也可以通过类名加::来引用。</li><li>静态成员函数同上<ul><li>静态成员函数引用不了非静态的数据成员。</li></ul></li><li>引用勒种定义的typedef新类型。</li><li>A::B<ol type="1"><li>A可以使名字空间、类、结构。</li></ol></li></ol></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">test</span>{</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">int</span> INT;</span><br><span class="line">}</span><br><span class="line">test::INT b;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C++结构化编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++部分内置函数</title>
      <link href="/2022/04/22/C-%E9%83%A8%E5%88%86%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/"/>
      <url>/2022/04/22/C-%E9%83%A8%E5%88%86%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="c部分内置函数">C++部分内置函数</h2><h1 id="内置函数">1. 内置函数</h1><table><thead><tr class="header"><th>函数</th><th>作用</th></tr></thead><tbody><tr class="odd"><td>max(a,b)</td><td>取最大值</td></tr><tr class="even"><td>min(a,b)</td><td>取最小值</td></tr></tbody></table><h1 id="系统时间">2. 系统时间</h1><h2 id="通过systemtime来进行获取">2.1. 通过SYSTEMTIME来进行获取</h2><ol type="1"><li>相应头文件:<code>windows.h</code></li><li>变量类型：SYSTEMTIME sys;</li><li>获取当前系统时间:<code>GetLocalTime(&amp;sys)</code></li><li>其结构定义如下:</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_SYSTEMTIME</span> {</span><br><span class="line">    WORD wYear;<span class="comment">//年</span></span><br><span class="line">    WORD wMonth;<span class="comment">//月</span></span><br><span class="line">    WORD wDayOfWeek;<span class="comment">//星期</span></span><br><span class="line">    WORD wDay;<span class="comment">//日</span></span><br><span class="line">    WORD wHour;<span class="comment">//时</span></span><br><span class="line">    WORD wMinute;<span class="comment">//分</span></span><br><span class="line">    WORD wSecond;<span class="comment">//秒</span></span><br><span class="line">    WORD wMilliseconds;<span class="comment">//毫秒</span></span><br><span class="line">  } SYSTEMTIME;</span><br></pre></td></tr></table></figure><h2 id="参考">2.2. 参考</h2><p><a href="https://blog.csdn.net/TweeChalice/article/details/96501332">SYSTEMTIME</a></p><h1 id="sort函数的用法">3. sort函数的用法</h1><ol type="1"><li>被包含的头文件:<code>#include&lt;algorithm&gt;</code></li></ol><h2 id="sort的标准型">3.1. sort()的标准型</h2><ol type="1"><li><code>sort(a,b,function_name)</code></li></ol><ul><li>可以调用定义的函数，default-&gt;整数的</li><li>function要求他们的参数应当为两个。</li></ul><ol start="2" type="1"><li>可以自定义的函数cmp(a,b)</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sort</span>(first_pointer,second_pointer,cmp);</span><br><span class="line"><span class="comment">//cmp(a,b)可以自定义</span></span><br><span class="line"><span class="comment">//返回1表示a在b前，返回0表示a在b后面</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;a,<span class="type">const</span> <span class="type">int</span> &amp;b)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> a &gt; b;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; temp = { <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span> };</span><br><span class="line"><span class="built_in">out</span>(temp);</span><br><span class="line"><span class="built_in">sort</span>(temp.<span class="built_in">begin</span>(), temp.<span class="built_in">end</span>() , cmp);</span><br><span class="line"><span class="built_in">out</span>(temp);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="参考-1">3.2. 参考</h2><ol type="1"><li><a href="https://blog.csdn.net/fadedsun/article/details/78796158">c++sort函数的用法</a></li></ol><h1 id="put和write">4. put()和write()</h1><h2 id="put">4.1. put()</h2><ol type="1"><li>原型:<code>put()</code>:适用于wchar_t</li></ol><ul><li><code>osrteam &amp;put(char)</code></li><li>返回一个指向调用对象的引用，也就是可以直接拼接输出</li></ul><h2 id="write">4.2. write()</h2><ol type="1"><li>原型:<code>basic_ostream&lt;charT,traits&gt; &amp;write(const char_type* s,streamsize n);</code></li><li>write():方式返回一个指向调用它对象的引用，所以可以拼接，并不会遇到空制度时自动停止打印字符，而是打印指定数目的字符。</li></ol><h2 id="参考-2">4.3. 参考</h2><ol type="1"><li><a href="https://www.cnblogs.com/maqiang/archive/2012/05/02/2478400.html">c++put()与write()</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C++结构化编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++表达式</title>
      <link href="/2022/04/22/C-%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2022/04/22/C-%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="c-表达式">C++ 表达式</h2><ol type="1"><li>C++中的表达式由以下三种组成:<ol type="1"><li>operand</li><li>operator</li><li>others</li></ol></li><li>求值需要受到<strong>以下元素的制约</strong>:<ol type="1"><li>优先级</li><li>结合性</li><li>类型转换约定(强制类型转换)<ul><li>coresion</li><li>casting</li></ul></li><li>求值次序:收到编译器的影响</li><li>副作用:破坏可移植性，降低可读性</li><li>视频1:43</li></ol></li><li>注意:防止溢出</li><li>类型转换是由compiler决定的<ul><li><code>type casting</code>强制类型转换</li><li>例子:<code>d + x/y*d + ++y</code>:初始条件全为int</li><li>强制类型转换:<code>d + (double) x/y*d + ++y</code></li></ul></li></ol><h1 id="基本运算符">1. 基本运算符</h1><table><colgroup><col style="width: 11%"><col style="width: 20%"><col style="width: 67%"></colgroup><thead><tr class="header"><th>运算符</th><th>名称</th><th>作用</th></tr></thead><tbody><tr class="odd"><td><code>&lt;&lt;</code></td><td>插入运算符</td><td>将后面的插入流中去，也可以被理解为重定向运算符</td></tr><tr class="even"><td><code>&gt;&gt;</code></td><td>取出运算符</td><td>按顺序读入参数，以空格为分隔符</td></tr><tr class="odd"><td><code>~</code></td><td>取反运算符</td><td>按位取反</td></tr><tr class="even"><td><code>*</code></td><td>指针运算符</td><td>取出指针所对应的内存地址中的值</td></tr><tr class="odd"><td><code>sizeof</code></td><td>求字节数运算符</td><td>返回该变量或者数据结构占据的字节数</td></tr><tr class="even"><td><code>-&gt;</code></td><td>指向成员运算符</td><td>用于拿到成员中变量</td></tr></tbody></table><ol type="1"><li>二元运算符</li><li>逗号运算符：表示按照顺序向下计算，并且将最后的计算结果赋值给最左边的<ul><li>a = 3 * 5,a * 4 =&gt; a = 60</li></ul></li></ol><h1 id="表达式的种类">2. 表达式的种类</h1><ol type="1"><li>表达式可以大致分为一下几种:<ol type="1"><li>算术</li><li>关系和逻辑</li><li>赋值</li><li>逗号</li><li>字位运算符</li></ol></li><li>操作符可以重载<ul><li>实现<strong>多态</strong>，避免多函数</li><li>无权利定义操作符</li></ul></li></ol><h2 id="赋值表达式">2.1. 赋值表达式</h2><ol type="1"><li>C++为左值表达式</li><li>左值 = 右值表达式<ol type="1"><li>左值:可以出现在赋值表达式左部的表达式，具有存放数据的空间。</li><li>类型不同时，先计算右值表达式的值，然后<strong>转换为</strong>左值表达式，之后赋值</li></ol></li><li>11中出现了右值表达式，<code>int &amp;&amp; x = 1</code></li></ol><h2 id="算术表达式">2.2. 算术表达式</h2><ol type="1"><li>增量和减量操作符<ol type="1"><li>前增量(前减量):++a(--a)</li><li>后增量(后减量):a++(a--)</li><li>提高编译结果的执行效率</li></ol></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> b, c, d, e;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl;<span class="comment">//1 a = 1</span></span><br><span class="line">b = a++;</span><br><span class="line">cout &lt;&lt; b &lt;&lt; endl;<span class="comment">//1 b = 1 a = 2</span></span><br><span class="line">c = a--;</span><br><span class="line">cout &lt;&lt; c &lt;&lt; endl;<span class="comment">//2 c = 2 a = 1</span></span><br><span class="line">d = ++a;</span><br><span class="line">cout &lt;&lt; d &lt;&lt; endl;<span class="comment">//2 d = 2 a = 2</span></span><br><span class="line">e = --a;</span><br><span class="line">cout &lt;&lt; e &lt;&lt; endl;<span class="comment">//1 e = 1 a = 1</span></span><br></pre></td></tr></table></figure><h2 id="条件表达式">2.3. 条件表达式</h2><ol type="1"><li><code>&lt;exp1&gt;?&lt;exp2&gt;:&lt;exp3&gt;</code></li><li>唯一的三目运算符,不允许进行<strong>重载</strong></li><li>只计算一个运动分量</li><li>如果<code>&lt;exp2&gt;</code>和<code>&lt;exp3&gt;</code>的值类型相同且均为左值，则该条件运算符表达式为左值表达式。</li><li>可以嵌套(满足就近原则)</li></ol><h2 id="逗号表达式">2.4. 逗号表达式</h2><ol type="1"><li>也就是进行连续计算</li><li><code>&lt;exp1&gt;,&lt;exp2&gt;,...,&lt;expn&gt;</code></li><li><code>&lt;expn&gt;</code>的值是逗号表达式的值</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a,b,c;</span><br><span class="line">d = (a = <span class="number">1</span>,b = a + <span class="number">2</span>,c = b + <span class="number">3</span>)</span><br><span class="line"><span class="comment">//a = 1</span></span><br><span class="line"><span class="comment">//b = 3</span></span><br><span class="line"><span class="comment">//c = d = 6</span></span><br></pre></td></tr></table></figure><ol start="4" type="1"><li>如<code>&lt;exp n&gt;</code>为左值，则该逗号表达式为左值</li></ol><h2 id="字位运算符表达式">2.5. 字位运算符表达式</h2><ol type="1"><li>对于整形数二进制位(bit)的操作，将整形数看做二进制序列<ul><li>复位和置位进行操作</li></ul></li></ol><table><thead><tr class="header"><th>操作符名</th><th>操作符</th><th>参与运算元数</th><th>备注</th></tr></thead><tbody><tr class="odd"><td>按位取反</td><td><code>~</code></td><td>单目</td><td>-</td></tr><tr class="even"><td>按位与</td><td><code>&amp;</code></td><td>双目</td><td>复位</td></tr><tr class="odd"><td>按位或</td><td><code>|</code></td><td>双目</td><td>置位</td></tr><tr class="even"><td>异或</td><td><code>^</code></td><td>双目</td><td>-</td></tr></tbody></table><ol start="2" type="1"><li>对于异或<code>^</code>:<ol type="1"><li>与全0的二进制串进行运算：不变</li><li>与全1的二进制串进行运算：取反</li><li>与本身的运算：清零</li><li>与同一个对象进行异或运算两次：还原，应用:进行加密</li></ol></li><li>交换两个整数x和y:如何写函数</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//允许中间变量</span></span><br><span class="line"><span class="type">int</span> t = x;</span><br><span class="line">x = y;</span><br><span class="line">y = t</span><br><span class="line"><span class="comment">//不允许中间变量</span></span><br><span class="line">a = a ^ b</span><br><span class="line">b = b ^ a</span><br><span class="line">a = a ^ b</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">x = x + y</span><br><span class="line">y = x - y</span><br><span class="line">x = x - y</span><br></pre></td></tr></table></figure><h2 id="移位运算符表达式">2.6. 移位运算符表达式</h2><ol type="1"><li>不仅仅只是进行移位运算</li><li>还有将相应的数据进行转换。</li></ol><h2 id="处理overflow">2.7. 处理Overflow</h2><ol type="1"><li>在C++中计算出负值不正确的结果:我们统一称为exception</li></ol><h2 id="左值表达式和右值表达式">2.8. 左值表达式和右值表达式</h2><ol type="1"><li>左值表达式:<code>++i</code></li><li>右值表达式:<code>i++</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C++结构化编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++Vector</title>
      <link href="/2022/04/22/C-Vector/"/>
      <url>/2022/04/22/C-Vector/</url>
      
        <content type="html"><![CDATA[<h2 id="vector">Vector</h2><ol type="1"><li>需要头文件<code>#include&lt;vector&gt;</code></li><li>如果不<code>using namespace std;</code>会编译错误</li><li>向量(Vector)是一个封装了动态大小数组的顺序容器，可以存放各种类型的对象。</li></ol><h1 id="容器特性">1. 容器特性</h1><ol type="1"><li><strong>顺序序列</strong><ul><li>其中元素按照严格的线性顺序排序，可以通过元素在序列中的位置访问相应的元素。</li></ul></li><li><strong>动态数组</strong><ul><li>支持对序列中的任意元素进行快速直接访问，甚至可以通过指针算术进行该操作。</li></ul></li><li><strong>能够感知内存分配器的</strong><ul><li>使用了一个内存分配器对象来动态地处理它的存储需求。</li></ul></li></ol><h1 id="声明初始化">2. 声明初始化</h1><h2 id="简单初始化">2.1. 简单初始化</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; a ;</span><br><span class="line"><span class="comment">//声明一个int型向量a</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">b</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="comment">//声明一个初始大小为10的向量</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">c</span><span class="params">(<span class="number">10</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="comment">//声明一个初始大小为10且初始值都为1的向量</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">b</span><span class="params">(a)</span></span>;</span><br><span class="line"><span class="comment">//声明并用向量a初始化向量b</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">b</span><span class="params">(a.begin(), a.begin()+<span class="number">3</span>)</span></span>;</span><br><span class="line"><span class="comment">//将a向量中从第0个到第2个(共3个)作为向量b的初始值</span></span><br></pre></td></tr></table></figure><h2 id="二维vector的初始化">2.2. 二维vector的初始化</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; array;</span><br></pre></td></tr></table></figure><h1 id="元素输入">3. 元素输入</h1><ol type="1"><li>可以直接向普通数组一样使用cin&gt;&gt;，cout&lt;&lt;进行输入输出</li></ol><h1 id="特殊方法">4. 特殊方法</h1><table><thead><tr class="header"><th>方法</th><th>作用</th></tr></thead><tbody><tr class="odd"><td><code>a.size()</code></td><td>返回长度</td></tr><tr class="even"><td><code>a.empty()</code></td><td>判断是否为空</td></tr><tr class="odd"><td><code>a.clear()</code></td><td>清空向量中的元素</td></tr><tr class="even"><td><code>a.insert(a.begin(),共几个,插入的数字)</code></td><td>在一个位置上插入</td></tr><tr class="odd"><td><code>a.erase(b.begin(),b.begin()+3)</code></td><td>删除某个位置或者之间的元素</td></tr><tr class="even"><td><code>sort.(a.begin(),a.end())</code></td><td>排序</td></tr></tbody></table><ol start="2" type="1"><li>遍历器:<code>vector&lt;int&gt;::iterator t;</code><ul><li>t = a.begin()</li><li>t!= a.end()</li><li>t ++</li></ul></li></ol><h1 id="了解更多">5. 了解更多</h1><ol type="1"><li><a href="https://www.runoob.com/w3cnote/cpp-vector-container-analysis.html">菜鸟教程</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C++数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++Union</title>
      <link href="/2022/04/22/C-Union/"/>
      <url>/2022/04/22/C-Union/</url>
      
        <content type="html"><![CDATA[<h2 id="union">Union</h2><ol type="1"><li>共享存储空间(三选一！)</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="title class_">user</span>{</span><br><span class="line">  <span class="comment">//从以下三个情况选择一种</span></span><br><span class="line">    <span class="type">int</span> ival;</span><br><span class="line">    <span class="type">double</span> dval;</span><br><span class="line">    <span class="type">char</span> cval;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h1 id="统一数据空间用两种操作方式进行操作">1.统一数据空间用两种操作方式进行操作</h1><ol type="1"><li>常用于系统软件和嵌入式系统</li><li>例子(将数组组合成矩阵)</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span>  _element[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line"><span class="type">int</span>  i, j;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">    <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line">         _element [i][j] = (i+<span class="number">1</span>)*(j+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++){</span><br><span class="line">  <span class="keyword">for</span> ( j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line">    cout &lt;&lt; _element [i][j] &lt;&lt; <span class="string">"  "</span>;</span><br><span class="line">  cout &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">union</span>  <span class="title class_">Matrix</span>{</span><br><span class="line">    <span class="keyword">struct</span></span><br><span class="line">    {   <span class="type">double</span>  _a11, _a12, _a13;</span><br><span class="line">        <span class="type">double</span>  _a21, _a22, _a23;</span><br><span class="line">        <span class="type">double</span>  _a31, _a32, _a33;</span><br><span class="line">    };</span><br><span class="line">    <span class="type">double</span> _element[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">};</span><br><span class="line"><span class="comment">//如果没有struct，那么布局会出现问题</span></span><br><span class="line">Matrix m;</span><br><span class="line"><span class="type">int</span>  i, j;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">    <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line">         m._element[i][j] = (i+<span class="number">1</span>)*(j+<span class="number">1</span>);</span><br><span class="line">         <span class="comment">//每个单元都有两个名称</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++){</span><br><span class="line">  <span class="keyword">for</span> ( j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line">    cout &lt;&lt; m._element[i][j] &lt;&lt; <span class="string">"  "</span>;</span><br><span class="line">  cout &lt;&lt; endl;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h1 id="union的另一种用法">2. Union的另一种用法</h1><ol type="1"><li>例：定义数组, 存储100个图形(直线、矩形、圆)</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Line</span>{</span><br><span class="line">  <span class="type">int</span> x1, y1, x2, y2</span><br><span class="line">};</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Ellipse</span>{</span><br><span class="line">  <span class="type">int</span> x, y, r; </span><br><span class="line">}；</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Rectangle</span>{</span><br><span class="line">  <span class="type">int</span> lef, top, rig, bot;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//第一种实现</span></span><br><span class="line">Line figures_L[<span class="number">100</span>];</span><br><span class="line">Rectangle figures_R[<span class="number">100</span>];</span><br><span class="line">Ellipse firgures_E[<span class="number">100</span>];</span><br><span class="line"><span class="comment">//过于浪费空间</span></span><br><span class="line"><span class="comment">//第二种实现</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">FIGURE_TYPE</span>  {LINE, RECTANGLE, ELLIPSE};<span class="comment">//使用标签来确认其类别</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Line</span>{</span><br><span class="line">  FIGURE_TYPE t ;</span><br><span class="line">  <span class="type">int</span> x1, y1, x2, y2;</span><br><span class="line">};</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Ellipse</span>{</span><br><span class="line">  FIGURE_TYPE t; </span><br><span class="line">  <span class="type">int</span> x, y, r; </span><br><span class="line">};</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Rectangle</span>{</span><br><span class="line">  FIGURE_TYPE t;</span><br><span class="line">  <span class="type">int</span> left, top, rig, bot;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">union</span> <span class="title class_">FIGURE</span>{</span><br><span class="line">  FIGURE_TYPE t;<span class="comment">//共享了第一块空间</span></span><br><span class="line">Line line;</span><br><span class="line">Rectangle rect; </span><br><span class="line">Ellipse ellipse;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">FIGURE  figures[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{   <span class="built_in">input</span>( figures, <span class="number">100</span> );</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)</span><br><span class="line">         <span class="built_in">draw</span>(figures[i]);</span><br><span class="line">} </span><br><span class="line"></span><br><span class="line"><span class="comment">//API：</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">draw_line</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>,<span class="type">int</span>,<span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">draw_rect</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>,<span class="type">int</span>,<span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">draw_ellipse</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>,<span class="type">int</span>)</span></span>;</span><br></pre></td></tr></table></figure><ol type="1"><li>Union占据的空间:</li></ol><ul><li>选中最大的空间进行共享</li><li>注意最右边的t，这方便了我们的访问</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多态性</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">(FIGURE  figure)</span></span>{</span><br><span class="line">  <span class="keyword">switch</span> ( figure.t ){</span><br><span class="line">    <span class="keyword">case</span> LINE:</span><br><span class="line">      <span class="built_in">draw_line</span>(figure.line.x1, ……);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> RECTANGLE:</span><br><span class="line">      <span class="built_in">draw_rect</span>(figure.rect.lef, ……);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> ELLIPSE:</span><br><span class="line">      <span class="built_in">draw_ellipse</span>(figure.ellipse.x, ……);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">input</span> <span class="params">(Figure fig[],  <span class="type">int</span> size)</span></span>{    </span><br><span class="line">  <span class="type">int</span> t;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> k=<span class="number">0</span>; k&lt;size; k++){</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">switch</span> (t){</span><br><span class="line">      <span class="keyword">case</span> LINE:</span><br><span class="line">        fig[k].type = LINE;</span><br><span class="line">        cin &gt;&gt; fig[k].line.x1 &gt;&gt; fig[i].line.y1 &gt;&gt; fig[k].line.x2  &gt;&gt;  fig[i].line.y2;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> RECTANGLE:   ……</span><br><span class="line">      <span class="keyword">case</span> ELLIPSE:   …….</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>如果要增加color和width</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">FIGURE_TYPE</span>  {LINE, RECTANGLE, ELLIPSE};<span class="comment">//使用标签来确认其类别</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Line</span>{</span><br><span class="line">  FIGURE_TYPE t ;</span><br><span class="line">  <span class="type">int</span> color, <span class="type">int</span> width;</span><br><span class="line">  <span class="type">int</span> x1, y1, x2, y2;</span><br><span class="line">};</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Ellipse</span>{</span><br><span class="line">  FIGURE_TYPE t;</span><br><span class="line">  <span class="type">int</span> color, <span class="type">int</span> width; </span><br><span class="line">  <span class="type">int</span> x, y, r; </span><br><span class="line">};</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Rectangle</span>{</span><br><span class="line">  FIGURE_TYPE t;</span><br><span class="line">  <span class="type">int</span> color, <span class="type">int</span> width;</span><br><span class="line">  <span class="type">int</span> left, top, rig, bot;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">union</span> <span class="title class_">FIGURE</span>{</span><br><span class="line">  FIGURE_TYPE t;<span class="comment">//共享了第一块空间</span></span><br><span class="line">  <span class="type">int</span> color, <span class="type">int</span> width;</span><br><span class="line">Line line;</span><br><span class="line">Rectangle rect; </span><br><span class="line">Ellipse ellipse;</span><br><span class="line">};</span><br></pre></td></tr></table></figure><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-C-plus-plus-advanced-programming/C++-数据结构/img/union/3.png"></p><ol start="3" type="1"><li>C++不希望在运行时进行类型检查</li></ol><ul><li>所有C++利用virtual func来进行实现</li></ul><h1 id="互斥赋值">3. 互斥赋值</h1><ol type="1"><li>在任何时刻，联合中只能有一个数据成员可以有值。当给联合中某个成员赋值之后，该联合中的其他成员就会变成为赋值状态</li></ol><h1 id="结构和联合">4. 结构和联合</h1><ol type="1"><li>通过使用union完成和保证c++运行时的多态性</li></ol><h1 id="参考">5. 参考</h1><p><a href="https://blog.csdn.net/hou09tian/article/details/80816445">C++关于union的理解</a></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C++数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++String</title>
      <link href="/2022/04/22/C-String/"/>
      <url>/2022/04/22/C-String/</url>
      
        <content type="html"><![CDATA[<h2 id="string类">string类</h2><ol type="1"><li><a href="https://www.cnblogs.com/engraver-lxw/p/7581540.html">相关方法</a></li><li>复制用=号</li><li>连接用+号</li><li>比较直接用是运算符</li><li>支持字符串数组</li></ol><h1 id="c中的字符串的表示">1. c++中的字符串的表示</h1><ol type="1"><li>使用string的形式来做，我们需要使用头文件&lt;string.h&gt;</li><li>char* 指向字符串的指针，实质上是指向字符串的首字母</li><li>const char* 一个不可以被修改的字符串</li><li>char[] 一个字符数组</li></ol><h1 id="string操作">2. string操作</h1><ol type="1"><li>读入:<ol type="1"><li>不能读入空格，以空格、制表符、回车符作为结束标志</li><li>cin &gt;&gt; s</li></ol></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string str1,str2,str3;</span><br><span class="line">cin &gt;&gt; str1 &gt;&gt; str2 &gt;&gt; str3;</span><br><span class="line">cout &lt;&lt; str1 &lt;&lt; <span class="string">"|"</span> &lt;&lt; str2 &lt;&lt; <span class="string">"|"</span> &lt;&lt; str3 &lt;&lt; <span class="string">"|"</span>;</span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>getline(cin,s):是指一次读一行，可以读入空格和制表符，以回车为结束符</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string str1,str2,str3;</span><br><span class="line"><span class="built_in">getline</span>(cin,str1);</span><br><span class="line"><span class="built_in">getline</span>(cin,str2);</span><br><span class="line"><span class="built_in">getline</span>(cin,str3);</span><br></pre></td></tr></table></figure><h2 id="getline-三个参数">2.1. getline 三个参数</h2><ol type="1"><li>可以添加第三个参数是结束符</li><li>第一个参数是cin输入流，第二个参数是字符串，第三个是结束符。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输入 a b"c"\nC</span></span><br><span class="line"><span class="built_in">getline</span>(cin,str1,<span class="string">" "</span>);<span class="comment">//a</span></span><br><span class="line"><span class="built_in">getline</span>(cin,str2,<span class="string">"'"</span>);<span class="comment">//b</span></span><br><span class="line"><span class="built_in">getline</span>(cin,str3,<span class="string">"'"</span>);<span class="comment">//c</span></span><br><span class="line"><span class="built_in">getline</span>(str4);<span class="comment">//\n</span></span><br><span class="line"><span class="built_in">getchar</span>();<span class="comment">//C</span></span><br><span class="line"><span class="comment">//注意回车的存在</span></span><br></pre></td></tr></table></figure><ol start="3" type="1"><li>可以进行分隔来进行进一步处理</li><li>实现split:<code>,</code>分隔</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string inputValues</span></span><br><span class="line"><span class="function"><span class="title">getline</span><span class="params">(cin,inputValues)</span></span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; num;</span><br><span class="line"><span class="function">istringstream <span class="title">iss</span><span class="params">(inputValues)</span></span>;</span><br><span class="line">string temp;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">getline</span>(iss,temp,<span class="string">','</span>)){</span><br><span class="line">  num.<span class="built_in">push_back</span>(<span class="built_in">stoi</span>(temp));</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="从string中获取char字符">2.2. 从string中获取char字符</h2><ol type="1"><li>str.at(int index)</li><li>str[index]</li></ol><h2 id="replace">2.3. replace</h2><table><colgroup><col style="width: 34%"><col style="width: 65%"></colgroup><thead><tr class="header"><th>函数名</th><th>作用</th></tr></thead><tbody><tr class="odd"><td>replace(num1,num2,str)</td><td>将从num1开始的num2个字符替换成为str</td></tr><tr class="even"><td>replace(num1,num2,str,num3,num4)</td><td>将当前字符串的第num1开始的num2个字符替换成str的nums3开始的nums4个字符</td></tr><tr class="odd"><td>replace(num1,num2,num3,char)</td><td>字符串第num1位置上以及后面的num2个字符替换成num3个char</td></tr></tbody></table><h2 id="比较">2.4. 比较</h2><ol type="1"><li>compare</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(s1 &lt; s2)</span><br><span class="line">s1.<span class="built_in">compare</span>(s2)</span><br><span class="line"><span class="comment">//0 表示 相同</span></span><br><span class="line"><span class="comment">//1 表示 大于</span></span><br><span class="line"><span class="comment">//-1 表示 小于</span></span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>strcmp</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int strcmp(const char *str1, const char *str2)</span><br><span class="line">如果返回值 &lt; 0，则表示 str1 小于 str2</span><br><span class="line">如果返回值 &gt; 0，则表示 str2 小于 str1</span><br><span class="line">如果返回值 = 0，则表示 str1 等于 str2</span><br></pre></td></tr></table></figure><h2 id="连接">2.5. 连接</h2><ol type="1"><li>string = string1 + string2</li><li>string1.append(string2)</li></ol><h2 id="长度">2.6. 长度</h2><ol type="1"><li>str.size() 或者 str.length()</li></ol><h2 id="查找">2.7. 查找</h2><table><thead><tr class="header"><th>函数名</th><th>作用</th></tr></thead><tbody><tr class="odd"><td>str.find(str1)</td><td>从前往后第一次找到</td></tr><tr class="even"><td>str.find(str1,num)</td><td>从num开始第一次找到str</td></tr><tr class="odd"><td>str.rfind(str1)</td><td>从后往前第一次找到</td></tr><tr class="even"><td>str.rfind(str1,num)</td><td>从后面向前第一次找到str</td></tr><tr class="odd"><td>str.substr(pos,n)</td><td>从pos开始取n个字符</td></tr></tbody></table><h2 id="其他操作一览">2.8. 其他操作一览</h2><table><colgroup><col style="width: 68%"><col style="width: 31%"></colgroup><thead><tr class="header"><th>函数名</th><th>作用</th></tr></thead><tbody><tr class="odd"><td>strcat(char[],const char[])</td><td>字符串连接</td></tr><tr class="even"><td>strcpy(char <em>dest,const char </em>src)</td><td>字符串复制函数</td></tr><tr class="odd"><td>strlen(const char[])</td><td>字符串长度函数</td></tr><tr class="even"><td>getchar()</td><td>获取一个字符</td></tr><tr class="odd"><td>str.erase(num1,num2)</td><td>擦除从num1开始的num2个字符</td></tr><tr class="even"><td>str.insert(num,str)</td><td>在第num个位置上插入str2</td></tr><tr class="odd"><td>reverse(str.begin(),str.end())</td><td>将字符串反过来</td></tr><tr class="even"><td>transformer(str.begin(),str.end(),str.begin(),::toupper)</td><td>转换</td></tr></tbody></table><h2 id="字符串分隔">2.9. 字符串分隔</h2><ol type="1"><li>原型:char* strtok(char* str,char* delim)|</li><li>用来进行分解字符串,将str按照delim进行分割，返回第一个分隔值，之后只要循环进行分隔就行。</li><li>sentence中间是第一个分隔的。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> sentence[] = <span class="string">"This is a sentence"</span>;</span><br><span class="line"><span class="type">char</span> *tokenPtr = <span class="built_in">strtok</span>(sentence,<span class="string">" "</span>)</span><br><span class="line"><span class="keyword">while</span>(tokenPtr!= <span class="literal">NULL</span>){</span><br><span class="line">  tokenPtr = <span class="built_in">strtok</span>(<span class="literal">NULL</span>,<span class="string">" "</span>);<span class="comment">//继续分隔之前的</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="string的大小写转换">2.10. string的大小写转换</h2><ol type="1"><li>使用<code>string.h</code>头文件</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//char[]数组，同样string也是可以的</span></span><br><span class="line"><span class="type">char</span> s[<span class="number">100</span>];</span><br><span class="line">s[i] = <span class="built_in">toupper</span>(s[i]);<span class="comment">//转换为大写</span></span><br><span class="line">s[i] = <span class="built_in">tolower</span>(s[i]);<span class="comment">//转换为大写</span></span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>使用<code>algorithm</code>头文件</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1[i] = <span class="built_in">toupper</span>(s1[i]);<span class="comment">//转换为大写</span></span><br><span class="line"><span class="built_in">transform</span>(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>(),s.<span class="built_in">begin</span>(),::toupper);<span class="comment">//转换大写</span></span><br><span class="line"><span class="built_in">transform</span>(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>(),s.<span class="built_in">begin</span>(),::tolower);</span><br><span class="line"><span class="comment">//转换小写</span></span><br></pre></td></tr></table></figure><h1 id="string和数值类型转换">3. string和数值类型转换</h1><h2 id="c11标准string转换成数值类型">3.1.C++11标准:string转换成数值类型</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="built_in">stoi</span>(str);</span><br><span class="line"><span class="comment">//64位 long = int</span></span><br><span class="line"><span class="type">long</span> i = std::<span class="built_in">stol</span>(str);<span class="comment">//stoll long long</span></span><br><span class="line"><span class="type">float</span> i = std::<span class="built_in">stof</span>(str);</span><br><span class="line"><span class="type">double</span> i = str::<span class="built_in">stod</span>(str);<span class="comment">//越界会报错</span></span><br></pre></td></tr></table></figure><ol type="1"><li>具体的整数部分函数:其中b表示转换所用的基数，默认为10(表示十进制).p是size_t的指针，用来保存s中第一个非数值字符的下标，p默认为0，即函数不返回下标.<ol type="1"><li>stoi(s,p,b):int</li><li>stol(s,p,b):long</li><li>stoul(s,p,b):unsigned long</li><li>stoll(s,p,b):long long</li><li>stoull(s,p,b):unsigned long long;</li></ol></li><li>具体的小数部分函数:参数p的作用与整数转换函数中的一样。<ol type="1"><li>stof(s, p):float</li><li>stod(s, p):double</li><li>stold(s, p):long double</li></ol></li></ol><h2 id="string转换成数值类型sscanf方法">3.2.string转换成数值类型(sscanf方法)</h2><ol type="1"><li>sscanf() 用于将字符串转化为数字</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">  <span class="type">char</span> str[]=<span class="string">"1234321"</span>; </span><br><span class="line">  <span class="type">int</span> a; </span><br><span class="line">  <span class="built_in">sscanf</span>(str,<span class="string">"%d"</span>,&amp;a); </span><br><span class="line">  cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">  <span class="type">char</span> str1[]=<span class="string">"123.321"</span>; </span><br><span class="line">  <span class="type">double</span> b; </span><br><span class="line">  <span class="built_in">sscanf</span>(str1,<span class="string">"%lf"</span>,&amp;b); </span><br><span class="line">  cout&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="int转换成string">3.3. int转换成string</h2><ol type="1"><li>使用Stringstream</li><li>头文件:<code>#include&lt;sstream&gt;</code></li></ol><h3 id="实例代码">3.3.1. 实例代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="comment">//clear()很好解决复用问题但内存消耗大</span></span><br><span class="line">    <span class="type">int</span> size = <span class="number">100</span>;  </span><br><span class="line">    stringstream strStream;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; size; ++i){  </span><br><span class="line">      strStream.<span class="built_in">clear</span>();</span><br><span class="line">      strStream &lt;&lt; i;<span class="comment">//数字转换成流</span></span><br><span class="line">      string numStr;</span><br><span class="line">      strStream &gt;&gt; numStr;<span class="comment">//流输出为字符串  </span></span><br><span class="line">      cout&lt;&lt;numStr&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">      strStream.<span class="built_in">str</span>(<span class="string">""</span>);</span><br><span class="line">    }  </span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"size=%d\n"</span>, strStream.<span class="built_in">str</span>().<span class="built_in">capacity</span>());  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="处理复用问题和内存问题">3.3.2. 处理复用问题和内存问题</h3><ol type="1"><li>每次调用strStream.clear()是希望在每次使用完strStream之后清理strStream占用的资源，但stringstream的clear方法并没有真正地释放strStream占用的空间，这样strStream所占用的空间一直在增长。当size较大时，strStream消耗的内存迅速增长，可能出现严重问题。</li><li>所以我们使用<code>strStream.str("")</code>来清空缓存区</li></ol><h2 id="数字转换为字符串">3.4. 数字转换为字符串</h2><ol type="1"><li>更加自由，不限制于整数</li><li>sprintf()用于将数字转化为字符串:<code>sprintf(res,"%s%s",a,b)</code></li><li>简单转换方法:<code>to_string()</code></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::<span class="built_in">to_string</span>(num);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="type">char</span> str[<span class="number">10</span>]; </span><br><span class="line">    <span class="type">int</span> a=<span class="number">1234321</span>;</span><br><span class="line">    <span class="comment">//将整数转化为字符串</span></span><br><span class="line">    <span class="built_in">sprintf</span>(str,<span class="string">"%d"</span>,a);</span><br><span class="line">    <span class="type">int</span> len=<span class="built_in">strlen</span>(str);</span><br><span class="line">    cout&lt;&lt;<span class="string">"字符串"</span>&lt;&lt;str&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">"长度"</span>&lt;&lt;len&lt;&lt;endl;</span><br><span class="line">    <span class="type">char</span> str1[<span class="number">10</span>]; </span><br><span class="line">    <span class="type">double</span> b=<span class="number">123.321</span>;</span><br><span class="line">    <span class="comment">//将浮点数转化为字符串</span></span><br><span class="line">    <span class="built_in">sprintf</span>(str1,<span class="string">"%.3lf"</span>,b);</span><br><span class="line">    <span class="type">int</span> len1=<span class="built_in">strlen</span>(str1);</span><br><span class="line">    cout&lt;&lt;<span class="string">"字符串"</span>&lt;&lt;str1&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">"长度"</span>&lt;&lt;len1&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="c11标准数字转字符串">3.5. C++11标准:数字转字符串</h2><ol type="1"><li>标准库中定义了to_string(val);可以将其它类型转换为string。还定义了一组stoi(s,p,b)、stol(s,p,b)、stod(s,p,b)等转换函数，可以函数，可以分别转化成int、long、double等.</li></ol><h2 id="字符串转换为char数组">3.6. 字符串转换为char数组</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">getline</span>(cin,input);</span><br><span class="line"><span class="built_in">strcpy_s</span>(str, input.<span class="built_in">c_str</span>());</span><br></pre></td></tr></table></figure><h2 id="字符串切片">3.7. 字符串切片</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">string test = <span class="string">"123"</span>;</span><br><span class="line">cout &lt;&lt; test.<span class="built_in">substr</span>(<span class="number">1</span>, test.<span class="built_in">size</span>() - <span class="number">2</span>);<span class="comment">//'2'</span></span><br><span class="line">cout &lt;&lt; test.<span class="built_in">substr</span>(<span class="number">1</span>, test.<span class="built_in">size</span>() - <span class="number">1</span>);<span class="comment">//'23'</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="字符转换整数或者浮点数">3.8. 字符转换整数或者浮点数</h2><ol type="1"><li>atof:转换为浮点数</li><li>atoi:转换为整数</li></ol><h1 id="参考">4. 参考</h1><ol type="1"><li><a herf="https://blog.csdn.net/l631068264/article/details/25115917">Stringstream缓冲区清空方法 和 复用StringStream 不是clear那么简单</a></li><li><a href="https://www.cnblogs.com/houchen/p/8984164.html">c++数字和字符串的转换</a></li><li><a href="https://blog.csdn.net/HiccupHiccup/article/details/62421032">【整理】C++string转int，string转double，string转long，int转string，double转string…</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C++数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++Stack</title>
      <link href="/2022/04/22/C-Stack/"/>
      <url>/2022/04/22/C-Stack/</url>
      
        <content type="html"><![CDATA[<h2 id="c-stack">c++ stack</h2><ol type="1"><li>简要记录比较通俗易懂的stack(c++内置版本)</li><li>头文件:<code>#include&lt;stack&gt;</code></li><li>是一个FIFO的线性链表</li></ol><table><thead><tr class="header"><th>函数名</th><th>功能</th><th>其他备注</th></tr></thead><tbody><tr class="odd"><td>top()</td><td>取出栈顶元素</td><td>不删除栈顶元素</td></tr><tr class="even"><td>pop()</td><td>删除栈顶元素</td><td>无</td></tr><tr class="odd"><td>empty()</td><td>检验栈是否为空</td><td>为空则为true</td></tr><tr class="even"><td>push()</td><td>在栈顶增加元素</td><td>无</td></tr><tr class="odd"><td>size()</td><td>返回栈中元素个数</td><td>无</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C++数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++Map</title>
      <link href="/2022/04/22/C-Map/"/>
      <url>/2022/04/22/C-Map/</url>
      
        <content type="html"><![CDATA[<p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="12.443ex" height="2.057ex" role="img" focusable="false" viewBox="0 -704 5499.8 909"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="mi" transform="translate(791,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1363,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1848,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(2209,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(2675,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mtext" transform="translate(3195,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(3445,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mi" transform="translate(4204,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(4694,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mo" transform="translate(5221.8,0)"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g></g></g></svg></mjx-container></span>https://blog.csdn.net/sevenjoin/article/details/81943864</p><h1 id="map简介">map简介</h1><p>map是STL的一个关联容器，它提供一对一的hash。</p><p>第一个可以称为关键字(key)，每个关键字只能在map中出现一次；第二个可能称为该关键字的值(value)；</p><p>map以模板(泛型)方式实现，可以存储任意类型的数据，包括使用者自定义的数据类型。Map主要用于资料一对一映射(one-to-one)的情況，map內部的实现自建一颗红黑树，这颗树具有对数据自动排序的功能。在map内部所有的数据都是有序的，后边我们会见识到有序的好处。比如一个班级中，每个学生的学号跟他的姓名就存在著一对一映射的关系。</p><h1 id="map的功能">map的功能</h1><p>自动建立key － value的对应。key 和value可以是任意你需要的类型，包括自定义类型。</p><h1 id="使用map">使用map</h1><p>使用map得包含map类所在的头文件</p><p>#include <map> //注意，STL头文件没有扩展名.h</map></p><p>map对象是模板类，需要关键字和存储对象两个模板参数：</p><p>std:map&lt;int, string&gt; personnel;</p><p>这样就定义了一个用int作为索引,并拥有相关联的指向string的指针.</p><p>为了使用方便，可以对模板类进行一下类型定义，</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> map&lt;<span class="type">int</span>,CString&gt; UDT_MAP_INT_CSTRING;</span><br><span class="line"></span><br><span class="line">UDT_MAP_INT_CSTRING enumMap;</span><br></pre></td></tr></table></figure><h1 id="成员方法">成员方法</h1><table><colgroup><col style="width: 21%"><col style="width: 78%"></colgroup><thead><tr class="header"><th>成员方法</th><th>功能</th></tr></thead><tbody><tr class="odd"><td>begin()</td><td>返回指向容器中第一个（注意，是已排好序的第一个）键值对的双向迭代器。如果map 容器用 const 限定，则该方法返回的是 const 类型的双向迭代器。</td></tr><tr class="even"><td>end()</td><td>返回指向容器最后一个元素（注意，是已排好序的最后一个）所在位置后一个位置的双向迭代器，通常和begin() 结合使用。如果 map 容器用 const 限定，则该方法返回的是 const类型的双向迭代器。</td></tr><tr class="odd"><td>rbegin()</td><td>返回指向最后一个（注意，是已排好序的最后一个）元素的反向双向迭代器。如果map 容器用 const 限定，则该方法返回的是 const类型的反向双向迭代器。</td></tr><tr class="even"><td>rend()</td><td>返回指向第一个（注意，是已排好序的第一个）元素所在位置前一个位置的反向双向迭代器。如果map 容器用 const 限定，则该方法返回的是 const类型的反向双向迭代器。</td></tr><tr class="odd"><td>cbegin()</td><td>和 begin() 功能相同，只不过在其基础上，增加了 const属性，不能用于修改容器内存储的键值对。</td></tr><tr class="even"><td>cend()</td><td>和 end() 功能相同，只不过在其基础上，增加了 const属性，不能用于修改容器内存储的键值对。</td></tr><tr class="odd"><td>crbegin()</td><td>和 rbegin() 功能相同，只不过在其基础上，增加了 const属性，不能用于修改容器内存储的键值对。</td></tr><tr class="even"><td>crend()</td><td>和 rend() 功能相同，只不过在其基础上，增加了 const属性，不能用于修改容器内存储的键值对。</td></tr><tr class="odd"><td>find(key)</td><td>在 map 容器中查找键为 key的键值对，如果成功找到，则返回指向该键值对的双向迭代器；反之，则返回和end() 方法一样的迭代器。另外，如果 map 容器用 const限定，则该方法返回的是 const 类型的双向迭代器。</td></tr><tr class="even"><td>lower_bound(key)</td><td>返回一个指向当前 map 容器中第一个大于或等于 key的键值对的双向迭代器。如果 map 容器用 const 限定，则该方法返回的是 const类型的双向迭代器。</td></tr><tr class="odd"><td>upper_bound(key)</td><td>返回一个指向当前 map 容器中第一个大于 key 的键值对的迭代器。如果 map容器用 const 限定，则该方法返回的是 const 类型的双向迭代器。</td></tr><tr class="even"><td>equal_range(key)</td><td>该方法返回一个 pair 对象（包含 2 个双向迭代器），其中 pair.first 和lower_bound() 方法的返回值等价，pair.second 和 upper_bound()方法的返回值等价。也就是说，该方法将返回一个范围，该范围中包含的键为 key的键值对（map 容器键值对唯一，因此该范围最多包含一个键值对）。</td></tr><tr class="odd"><td>empty()</td><td>若容器为空，则返回 true；否则 false。</td></tr><tr class="even"><td>size()</td><td>返回当前 map 容器中存有键值对的个数。</td></tr><tr class="odd"><td>max_size()</td><td>返回 map容器所能容纳键值对的最大个数，不同的操作系统，其返回值亦不相同。</td></tr><tr class="even"><td>operator[]</td><td>map容器重载了 [] 运算符，只要知道 map容器中某个键值对的键的值，就可以向获取数组中元素那样，通过键直接获取对应的值。</td></tr><tr class="odd"><td>at(key)</td><td>找到 map 容器中 key 键对应的值，如果找不到，该函数会引发out_of_range 异常。</td></tr><tr class="even"><td>insert()</td><td>向 map 容器中插入键值对。</td></tr><tr class="odd"><td>erase()</td><td>删除 map容器指定位置、指定键（key）值或者指定区域内的键值对。后续章节还会对该方法做重点讲解。</td></tr><tr class="even"><td>swap()</td><td>交换 2 个 map 容器中存储的键值对，这意味着，操作的 2个键值对的类型必须相同。</td></tr><tr class="odd"><td>clear()</td><td>清空 map 容器中所有的键值对，即使 map 容器的 size() 为 0。</td></tr><tr class="even"><td>emplace()</td><td>在当前 map容器中的指定位置处构造新键值对。其效果和插入键值对一样，但效率更高。</td></tr><tr class="odd"><td>emplace_hint()</td><td>在本质上和 emplace() 在 map容器中构造新键值对的方式是一样的，不同之处在于，使用者必须为该方法提供一个指示键值对生成位置的迭代器，并作为该方法的第一个参数。</td></tr><tr class="even"><td>count(key)</td><td>在当前 map 容器中，查找键为 key 的键值对的个数并返回。注意，由于 map容器中各键值对的键的值是唯一的，因此该函数的返回值最大为 1。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C++数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++List</title>
      <link href="/2022/04/22/C-List/"/>
      <url>/2022/04/22/C-List/</url>
      
        <content type="html"><![CDATA[<h1 id="list-类">List 类</h1><h1 id="定义">1. 定义</h1><ol type="1"><li>是一个stl实现的双向链表，与vectors相比，允许快速的插入和删除，但是随即访问却比较慢。</li><li>使用头文件<code>#include&lt;list&gt;</code></li></ol><h1 id="定义和初始化">2. 定义和初始化</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list&lt;<span class="type">int</span>&gt; lst1;          <span class="comment">//创建空list</span></span><br><span class="line"><span class="function">list&lt;<span class="type">int</span>&gt; <span class="title">lst2</span><span class="params">(<span class="number">5</span>)</span></span>;       <span class="comment">//创建含有5个元素的list</span></span><br><span class="line"><span class="function">list&lt;<span class="type">int</span>&gt; <span class="title">lst3</span><span class="params">(<span class="number">3</span>,<span class="number">2</span>)</span></span>;  <span class="comment">//创建含有3个元素的list</span></span><br><span class="line"><span class="function">list&lt;<span class="type">int</span>&gt; <span class="title">lst4</span><span class="params">(lst2)</span></span>;    <span class="comment">//使用lst2初始化lst4</span></span><br><span class="line"><span class="function">list&lt;<span class="type">int</span>&gt; <span class="title">lst5</span><span class="params">(lst2.begin(),lst2.end())</span></span>;  <span class="comment">//同lst4</span></span><br></pre></td></tr></table></figure><h1 id="list常用操作函数">3. List常用操作函数</h1><table><thead><tr class="header"><th>函数名</th><th>函数作用</th></tr></thead><tbody><tr class="odd"><td>Lst1.assign()</td><td>给list赋值</td></tr><tr class="even"><td>Lst1.back()</td><td>返回最后一个元素</td></tr><tr class="odd"><td>Lst1.begin()</td><td>返回指向第一个元素的迭代器</td></tr><tr class="even"><td>Lst1.clear()</td><td>删除所有元素</td></tr><tr class="odd"><td>Lst1.empty()</td><td>如果list是空的则返回true</td></tr><tr class="even"><td>Lst1.end()</td><td>返回末尾的迭代器</td></tr><tr class="odd"><td>Lst1.erase()</td><td>删除一个元素</td></tr><tr class="even"><td>Lst1.front()</td><td>返回第一个元素</td></tr><tr class="odd"><td>Lst1.get_allocator()</td><td>返回list的配置器</td></tr><tr class="even"><td>Lst1.insert()</td><td>插入一个元素到list中</td></tr><tr class="odd"><td>Lst1.max_size()</td><td>返回list能容纳的最大元素数量</td></tr><tr class="even"><td>Lst1.merge()</td><td>合并两个list</td></tr><tr class="odd"><td>Lst1.pop_back()</td><td>删除最后一个元素</td></tr><tr class="even"><td>Lst1.pop_front()</td><td>删除第一个元素</td></tr><tr class="odd"><td>Lst1.push_back()</td><td>在list的末尾添加一个元素</td></tr><tr class="even"><td>Lst1.push_front()</td><td>在list的头部添加一个元素</td></tr><tr class="odd"><td>Lst1.rbegin()</td><td>返回指向第一个元素的逆向迭代器</td></tr><tr class="even"><td>Lst1.remove()</td><td>从list删除元素</td></tr><tr class="odd"><td>Lst1.remove_if()</td><td>按指定条件删除元素</td></tr><tr class="even"><td>Lst1.rend()</td><td>指向list末尾的逆向迭代器</td></tr><tr class="odd"><td>Lst1.resize()</td><td>改变list的大小</td></tr><tr class="even"><td>Lst1.reverse()</td><td>把list的元素倒转</td></tr><tr class="odd"><td>Lst1.size()</td><td>返回list中的元素个数</td></tr><tr class="even"><td>Lst1.sort()</td><td>给list排序</td></tr><tr class="odd"><td>Lst1.splice()</td><td>合并两个list</td></tr><tr class="even"><td>Lst1.swap()</td><td>交换两个list</td></tr><tr class="odd"><td>Lst1.unique()</td><td>删除list中重复的元素</td></tr></tbody></table><h1 id="链表操作">4. 链表操作</h1><h2 id="插入">4.1. 插入</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!head){</span><br><span class="line">    <span class="comment">// 空表插入</span></span><br><span class="line">    head = tempNew;</span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(value &lt;= head -&gt; val){</span><br><span class="line">    <span class="comment">//插入头部</span></span><br><span class="line">    tempNew-&gt;next = head;</span><br><span class="line">    head = tempNew;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">    <span class="comment">//在中间插入</span></span><br><span class="line">    Node* p = head;</span><br><span class="line">    <span class="keyword">while</span>(p -&gt; next != <span class="literal">NULL</span> &amp;&amp; value &gt; p-&gt;next-&gt;value){</span><br><span class="line">        p = p -&gt; next;</span><br><span class="line">    }</span><br><span class="line">    tempNew-&gt;next = p -&gt; next;</span><br><span class="line">    p -&gt; next = tempNew;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="删除">4.2. 删除</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( value == head-&gt;value){</span><br><span class="line">    head = head-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span> cur;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">    <span class="keyword">while</span>(cur -&gt; next != <span class="literal">NULL</span> &amp;&amp; cur -&gt; next -&gt; value != value){</span><br><span class="line">        cur = cur -&gt; next;</span><br><span class="line">    }</span><br><span class="line">    Node* needDel = cur -&gt; next;</span><br><span class="line">    cur -&gt; next = needDel -&gt; next;</span><br><span class="line">    <span class="keyword">delete</span> needDel;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h1 id="其他参考">5. 其他参考</h1><p><a href="https://blog.csdn.net/fanyun_01/article/details/56881515"></a></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C++数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++数组</title>
      <link href="/2022/04/22/C-%E6%95%B0%E7%BB%84/"/>
      <url>/2022/04/22/C-%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="数组">1. 数组</h1><ol type="1"><li>数组作为参数<code>int a[]</code></li><li>特征:<ol type="1"><li>相同类型</li><li><strong>连续存储</strong>:0 - n-1</li></ol></li><li>数组名的含义:</li></ol><ul><li><code>int A[6]</code>的A是代表6个int的集合</li><li><code>sizeof(A)</code>:6 * sizeof(int)</li></ul><h2 id="一维数组">1.1. 一维数组</h2><ol type="1"><li>类型定义<code>T name[number]</code></li><li>赋值操作，部分赋值的话，之后按照默认值</li><li>函数接口:<code>void f(int a[], int n);//这里面的a的身份已经发生了变化</code></li></ol><ul><li>此时a已经不知道有多少个元素了</li><li>C++是允许数组的越界(给予语言表达极大的灵活性)，不检查数组的越界</li><li>元素个数需通过参数<strong>显式</strong>给出，不可以通过sizeof来获得:<code>void f(char a[]);</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> s1[]=<span class="string">"abc"</span>;</span><br><span class="line">cout &lt;&lt; s1;<span class="comment">//实际上是{'a','b','c','\0'}</span></span><br><span class="line"><span class="type">char</span> s2[]={<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>};</span><br><span class="line">cout &lt;&lt; s2;<span class="comment">//错误</span></span><br></pre></td></tr></table></figure><ol start="4" type="1"><li>读取字符数组的时候，我们可以根据<code>\0</code>来判断是否字符串结束</li><li>为什么会出现"烫烫烫":<code>0xCC</code>是烫(在VS下由于未初始化，VS为了帮助你发现问题，对于未使用的内存空间我们都使用0xCC填充，0xCC是指3号中断)</li></ol><ul><li>0xCC:烫</li><li>0xCD:屯:heap(在栈部分出现的额问题)</li><li>数组未初始化:在对应位置填充0xCC,其上下文填充0xFD</li><li>释放内存，如果没有请0，则会帮你将内存中的值清理成一个特定的值，用来防止内存为清零。</li></ul><h2 id="一位数组的初始化">1.2. 一位数组的初始化</h2><ol type="1"><li>整数数组的初始化</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认初始化</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>] = {};    <span class="comment">//[0, 0, 0, 0, 0]</span></span><br><span class="line"><span class="comment">//全部初始化为0</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>] = {<span class="number">0</span>};    <span class="comment">//[0, 0, 0, 0, 0]</span></span><br><span class="line"><span class="comment">//c++11新写法</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>]{};    <span class="comment">//[0, 0, 0, 0, 0]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意，想要整型数组 全部初始化为1的时候不能粗暴的设置为 </span></span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>] = {<span class="number">1</span>};    <span class="comment">//[1, 0, 0, 0, 0]</span></span><br><span class="line"><span class="comment">// 因为 数组初始化列表中的元素个数小于指定的数组长度时， 不足的元素以默认值填补。</span></span><br><span class="line"><span class="comment">//可以分别赋值</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>] = {<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>}; <span class="comment">//[1,1,1,1,1]</span></span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>字符串的初始化-栈初始化</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string *str = string[<span class="number">5</span>];    <span class="comment">//调用5次默认构造函数</span></span><br><span class="line">string *str1 = string[<span class="number">5</span>]{<span class="string">"aaa"</span>};    <span class="comment">//数组中的第一个元素调用 string::string(const char *)  进行初始化。后面四个调用 默认构造函数</span></span><br></pre></td></tr></table></figure><ol start="3" type="1"><li>数组的默认初始化:如果不明确指出初始化列表，那么基本类型<strong>不会被初始化</strong>(全局变量和静态变量除外)，所有内存都是脏数据；且自定义的类类型会为每个元素调用默认构造函数进行初始化</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">5</span>]{};</span><br><span class="line">a[<span class="number">6</span>];      <span class="comment">//32766</span></span><br><span class="line">a[<span class="number">10</span>];    <span class="comment">//1474921429</span></span><br><span class="line"><span class="comment">// Xcode会提示 Array index 10 is past the end of the array (which contains 5 elements)。虽然不会爆红，但是Xcode提示越界了。这在程序中也是需要特别注意的,越界时会取到脏数据。</span></span><br><span class="line">string str[<span class="number">5</span>];     <span class="comment">//["","","","",""]</span></span><br><span class="line">string str1[<span class="number">5</span>] = {<span class="string">""</span>,<span class="string">"2"</span>,<span class="string">""</span>,<span class="string">""</span>};     <span class="comment">//["","2","',"",""]</span></span><br><span class="line">string str2[<span class="number">5</span>] = {<span class="string">"a"</span>};     <span class="comment">//["a","","","",""]</span></span><br></pre></td></tr></table></figure><h2 id="二维数组">1.3. 二维数组</h2><ol type="1"><li><code>T name[number1][number2]</code></li><li>也是按照顺序进行排列的，不过是一行一行的放置而已</li><li>二维数组初始化</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> **p;</span><br><span class="line">p = <span class="keyword">new</span> <span class="type">int</span>*[<span class="number">10</span>];<span class="comment">//一个有10个元素的指针数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i){</span><br><span class="line">  p[i] = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">5</span>];</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="多维数组">1.4. 多维数组</h2><ol type="1"><li>定义:<code>T  A[c1][c2]</code></li><li>存储组织:</li><li>参数传递:<code>void f(int a[][3], int n);</code></li></ol><ul><li>理解为int[3] a[] (单个元素是三个int)</li><li>缺省第1维</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> T T1[c2];</span><br><span class="line"><span class="keyword">typedef</span> T1 A[c1]; </span><br></pre></td></tr></table></figure><ol start="4" type="1"><li>升/降维处理</li></ol><h2 id="字符数组">1.5. 字符数组</h2><ol type="1"><li>直接按照字符串形式输出</li><li>字符数组的约定是，以<code>\0</code>作为结尾</li></ol>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C++数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++结构体</title>
      <link href="/2022/04/22/C-%E7%BB%93%E6%9E%84%E4%BD%93/"/>
      <url>/2022/04/22/C-%E7%BB%93%E6%9E%84%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<h2 id="struct-结构体">struct 结构体</h2><ol type="1"><li><h2 id="什么是结构体">1. 什么是结构体</h2><p>结构体(struct)是一种自定义的数据类型，就是把一组需要在一起使用的数据元素组合成一个新的类型。结构体的作用就是封装，以方便地使用这些封装到一起的属性。新的类型与C++中基本类型<code>int</code>，库类型<code>string</code>一样。C++的关键字<code>struct</code>是从C语言中的<code>struct</code>继承过来的，它们之间有区别与联系。</p><h2 id="c语言的struct">2. C语言的struct：</h2><p>C语言可以使用结构体<code>struct</code>来存放一组不同类型的数据，在C语言中结构体只能包含<code>变量</code>，不能包含<code>函数</code>，定义格式为：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct 结构体名{</span><br><span class="line">    结构体所包含的变量;</span><br><span class="line">};</span><br><span class="line">在定义结构体时，不能在结构体内初始化包含的那些变量,因为结构体声明只是创建一个新的数据类型，还不存在这种类型的变量实体。</span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> 注意：花括号{}后面的分号<span class="string">';'</span>不可缺少，因为它是一条定义语句。</span><br></pre></td></tr></table></figure><p>例如，我们想定义一个与学生考试成绩有关的数据结构类型，方便我们的管理，那么新类型所包含的应该有学生的名称，年龄，学号等信息，可以写为如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span>{</span><br><span class="line">    <span class="type">char</span> *name; <span class="comment">//姓名</span></span><br><span class="line">    <span class="type">int</span> age; <span class="comment">//年龄</span></span><br><span class="line">    <span class="type">int</span> school_id; <span class="comment">//学号</span></span><br><span class="line">};</span><br><span class="line">注意：各个变量都不能在结构体内初始化，因为结构体声明只是创建一个新的数据类型，还不存在这种类型的变量实体。</span><br></pre></td></tr></table></figure><p>这样就定义了一个新的类型<code>Student</code>，与基本类型int，double或者库类型string一样，可以用这个新类型去定义变量。比如我们定义一个整型变量，定义一个双精度浮点数，再定义2个学生信息，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">double</span> b = <span class="number">1.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//C语言要求结构体在定义变量时要加上 struct Student</span></span><br><span class="line"><span class="function"><span class="keyword">struct</span> Student <span class="title">xiaoming</span>(<span class="params"><span class="string">"xiaoming"</span>, <span class="number">10</span>, <span class="number">10001</span></span>), <span class="title">jim</span>(<span class="params"><span class="string">'jim'</span>, <span class="number">9</span>, <span class="number">10002</span></span>)</span>; <span class="comment">//直接在定义变量 xiaoming，jim 时提供赋值</span></span><br><span class="line"></span><br><span class="line">或者定义变量时不提供初始值，后续再逐个给变量的成员赋值，如下：</span><br><span class="line"><span class="keyword">struct</span> Student xiaoming, jim;  <span class="comment">//定义了两个变量 xiaoming，jim</span></span><br><span class="line">xiaoming.name = <span class="string">"xiaoming"</span>;</span><br><span class="line">xiaoming.age = <span class="number">10</span>;</span><br><span class="line">xiaoming.school_id = <span class="number">10001</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>还有2种方式 给结构体类型<code>Student</code>定义变量，如下，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">第一种：将变量放在结构体定义的最后即可。同时也可以提供赋值。</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span>{</span><br><span class="line">    <span class="type">char</span> *name; <span class="comment">//姓名</span></span><br><span class="line">    <span class="type">int</span> age; <span class="comment">//年龄</span></span><br><span class="line">    <span class="type">int</span> school_id; <span class="comment">//学号</span></span><br><span class="line">}xiaoming, jim = {<span class="string">"jim"</span>, <span class="number">9</span>, <span class="number">10002</span>}; <span class="comment">//将变量放在结构体定义的最后即可（大括号之后、分号之前）。同时也可以提供赋值。</span></span><br><span class="line"></span><br><span class="line">第二种：</span><br><span class="line">如果只需要 `xiaoming`, `jim` 两个变量，后面不需要再使用该结构体的名称去定义其他变量，那么在定义时也可以不给出结构体名称。</span><br><span class="line">这样做省略了结构体的名称，书写简单，但是因为没有结构体名，后面就没法用该结构体定义新的变量。如下所示：</span><br><span class="line"><span class="keyword">struct</span> {</span><br><span class="line">    <span class="type">char</span> *name; <span class="comment">//姓名</span></span><br><span class="line">    <span class="type">int</span> age; <span class="comment">//年龄</span></span><br><span class="line">    <span class="type">int</span> school_id; <span class="comment">//学号</span></span><br><span class="line">}xiaoming, jim = {<span class="string">"jim"</span>, <span class="number">9</span>, <span class="number">10002</span>}; <span class="comment">//省略了结构体的名称，后续就无法再用此结构体定义变量。</span></span><br></pre></td></tr></table></figure><p>使用结构体内定义的成员时，通过点号<code>.</code>操作，例如，</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">xiaoming.name</span> = <span class="string">"xiaoming"</span><span class="comment">;</span></span><br><span class="line"><span class="attr">xiaoming.age</span> = <span class="number">12</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><p>就完成了对变量xiaoming的name与age的赋值。</p><blockquote><p>以上就是C语言的struct结构体的主要定义方法与赋值，更多的详细内容可以参考<a href="http://c.biancheng.net/c/100/">C语言结构体详解http://c.biancheng.net/c/100/</a>。</p></blockquote><hr><h2 id="c的struct">3. C++的struct</h2><p>C++的关键字<code>struct</code>是从C语言中的<code>struct</code>继承过来的，但是与C语言中要求struct只能包含成员变量不一样。C++中，<code>struct</code>类似于<code>class</code>，既可以包含<strong>成员变量</strong>，又可以包含<strong>成员函数</strong>。C++的struct与C语言的不同之处有：</p><h3 id="c的结构体在定义变量时结构体名称的前面可以省略struct例如-定义了student结构体类型">1.C++的结构体在定义变量时，结构体名称的前面可以省略<code>struct</code>,例如定义了Student结构体类型，</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span>{</span><br><span class="line">    <span class="type">char</span> *name; <span class="comment">//姓名</span></span><br><span class="line">    <span class="type">int</span> age; <span class="comment">//年龄</span></span><br><span class="line">    <span class="type">int</span> school_id; <span class="comment">//学号</span></span><br><span class="line">};</span><br><span class="line">在定义结构体时，不能在结构体内初始化包含的那些变量,因为结构体声明只是创建一个新的数据类型，还不存在这种类型的变量实体。</span><br><span class="line"></span><br><span class="line">Student xiaoming, jim; <span class="comment">//C++允许省略struct，在Student前面可以不加struct。定义结构体Student类型的变量xiaoming,jim。</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span> xiaoming, jim; <span class="comment">//C风格的变量定义，在C++里面也没有问题，兼容。</span></span><br></pre></td></tr></table></figure><h3 id="结构体的初始化使用初始化列表或构造函数">2.结构体的初始化：使用初始化列表或构造函数</h3><p>初始化列表的方式初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">stu1</span> <span class="operator">=</span> {<span class="string">"James"</span>,  <span class="number">15</span>,  <span class="number">20190101</span>}; </span><br><span class="line">这就定义了一个Student类型的变量stu1，并且以列表的形式为其中的变量提供了初始值。</span><br></pre></td></tr></table></figure><p>除了使用初始化列表之外，C++中还可以使用<code>构造函数</code>来初始化结构体成员变量，这和初始化类<code>class</code>成员变量是相同的。与<code>类class</code>的构造函数一样，结构体的构造函数必须是与结构体名称相同的公共成员函数，并且没有返回类型。因为默认情况下，所有结构体成员都是公开的，所以不需要使用关键字public。 初始化构造函数的示例，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span>{</span><br><span class="line">    <span class="type">char</span> *name; <span class="comment">//姓名</span></span><br><span class="line">    <span class="type">int</span> age; <span class="comment">//年龄</span></span><br><span class="line">    <span class="type">int</span> school_id; <span class="comment">//学号</span></span><br><span class="line">    <span class="comment">//初始化构造函数 名称与结构体名称相同，且无返回值。默认的初始化。</span></span><br><span class="line">    <span class="built_in">Student</span>( <span class="comment">/* args */</span> ){</span><br><span class="line">        name = <span class="string">"test"</span>;</span><br><span class="line">        age = <span class="number">100</span>;</span><br><span class="line">        school_id = <span class="number">000001</span>;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure><blockquote><p>虽然结构体可以包含成员函数，但尽量不要这样做。尽量只把结构体当作数据类型，而在类class里面使用成员函数。</p></blockquote><hr><h3 id="c中的struct和class基本是通用的有几个不同之处">C++中的<code>struct</code>和<code>class</code>基本是通用的，有几个不同之处：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 使用 <span class="keyword">class</span> 时，类中的成员默认都是 <span class="keyword">private</span> 属性的；而使用 <span class="keyword">struct</span> 时，结构体中的成员默认都是 <span class="keyword">public</span> 属性的。</span><br><span class="line">&gt; <span class="keyword">class</span> 继承默认是 <span class="keyword">private</span> 继承，而 <span class="keyword">struct</span> 继承默认是 <span class="keyword">public</span> 继承（《C++继承与派生》一章会讲解继承）。</span><br><span class="line">&gt; <span class="keyword">class</span> 可以使用模板，而 <span class="keyword">struct</span> 不能（《模板、字符串和异常》一章会讲解模板）。</span><br></pre></td></tr></table></figure><p>在编写C++代码时，建议使用 <code>class</code> 来定义类，而使用<code>struct</code> 来定义结构体，这样做语义更加明确。</p></li></ol><h2 id="更多">更多</h2><p><a href="https://www.cnblogs.com/banluxinshou/p/11823158.html">C++中的struct 关键字详解 - banluxinshou - 博客园 (cnblogs.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> C++数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据管理基础 ch54-57</title>
      <link href="/2022/04/19/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80-ch54-57/"/>
      <url>/2022/04/19/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80-ch54-57/</url>
      
        <content type="html"><![CDATA[<h1 id="ch-54-并发控制">ch 54 并发控制</h1><h2 id="事务并发">事务并发</h2><ul><li>多用户数据库系统，允许多个用户同时使用的数据库系统<ul><li>飞机定票数据库系统</li><li>银行数据库系统</li></ul></li><li>特点：在同一时刻并发运行的事务数可达数百上千个</li><li>事务并发执行带来的问题<ul><li>会产生多个事务同时存取同一数据的情况</li><li>可能会存取和存储不正确的数据，破坏事务隔离性和数据库的一致性</li></ul></li><li>数据库管理系统必须提供并发控制机制，并发控制机制是衡量一个数据库管理系统性能的重要标志之一</li></ul><h2 id="多事务执行方式">多事务执行方式</h2><p><strong>多事务执行方式 1</strong></p><ul><li><p>事务串行执行</p><ul><li>每个时刻只有一个事务运行，其他事务必须等到这个事务结束以后方能运行</li><li>不能充分利用系统资源，发挥数据库共享资源的特点</li></ul><p><img src="https://s2.loli.net/2022/04/19/wvLj91aGogIJbCe.png"></p></li></ul><p><strong>多事务执行方式 2</strong></p><ul><li>交叉并发方式（Interleaved Concurrency）<ul><li>在单处理机系统中，事务的并行执行是这些并行事务的并行操作轮流交叉运行</li><li>单处理机系统中的并行事务并没有真正地并行运行，但能够减少处理机的空闲时间，提高系统的效率</li></ul></li></ul><p><img src="https://s2.loli.net/2022/04/19/NEqOBMGsrAvUuYe.png"></p><p><strong>多事务执行方式 3</strong></p><ul><li>同时并发方式（simultaneous concurrency）<ul><li>多处理机系统中，每个处理机可以运行一个事务，多个处理机可以同时运行多个事务，实现多个事务真正的并行运行</li><li>最理想的并发方式，但受制于硬件环境</li><li>更复杂的并发方式机制</li></ul></li></ul><h2 id="不一致性的例子">不一致性的例子</h2><p><strong>不一致性的例子 1</strong></p><ul><li>[例11.1]飞机订票系统中的一个活动序列<ol type="1"><li>甲售票点(事务T1)读出某航班的机票余额A，设A=16；</li><li>乙售票点(事务T2)读出同一航班的机票余额A，也为16；</li><li>甲售票点卖出一张机票，修改余额A←A-1，所以A为15，把A写回数据库；</li><li>乙售票点也卖出一张机票，修改余额A←A-1，所以A为15，把A写回数据库</li><li>结果明明卖出两张机票，数据库中机票余额只减少1</li></ol></li></ul><p><strong>不一致性的例子 2</strong></p><ul><li>这种情况称为数据库的不一致性，是由并发操作引起的。</li><li>在并发操作情况下，对T1、T2两个事务的操作序列的调度是随机的。</li><li>若按上面的调度序列执行， T1事务的修改就被丢失。<ul><li>原因：第4步中T2事务修改A并写回后覆盖了T1事务的修改</li></ul></li></ul><h2 id="并发操作带来的数据不一致性">并发操作带来的数据不一致性</h2><ul><li>丢失修改（Lost Update）</li><li>不可重复读（Non-repeatable Read）</li><li>读“脏”数据（Dirty Read）</li><li>记号<ul><li>R(x):读数据x</li><li>W(x):写数据x</li></ul></li></ul><h3 id="丢失修改">丢失修改</h3><ul><li>两个事务T1和T2读入同一数据并修改，T2的提交结果破坏了T1提交的结果，导致T1的修改被丢失。</li><li>上面飞机订票例子就属此类</li></ul><p><img src="https://s2.loli.net/2022/04/19/pfCdFYv62DNyb7o.png"></p><h3 id="不可重复读">不可重复读</h3><p><strong>不可重复读 1</strong></p><ul><li>不可重复读是指事务T1读取数据后，事务T2执行更新操作，使T1无法再现前一次读取结果。</li><li>不可重复读包括三种情况， 后两种不可重复读有时也称为幻影现象（PhantomRow）：<ul><li>事务T1读取某一数据后，事务T2对其做了修改，当事务T1再次读该数据时，得到与前一次不同的值</li><li>事务T1按一定条件从数据库中读取了某些数据记录后，事务T2删除了其中部分记录，当T1再次按相同条件读取数据时，发现某些记录神秘地消失了。</li><li>事务T1按一定条件从数据库中读取某些数据记录后，事务T2插入了一些记录，当T1再次按相同条件读取数据时，发现多了一些记录。</li></ul></li></ul><p><strong>不可重复读 2</strong></p><p><img src="https://s2.loli.net/2022/04/19/PWnyNQUZ7IbafiB.png"></p><ul><li>T1读取B=100进行运算</li><li>T2读取同一数据B，对其进行修改后将B=200写回数据库。</li><li>T1为了对读取值校对重读B，B已为200，与第一次读取值不一致</li></ul><h3 id="读脏数据">读“脏”数据</h3><p><strong>读“脏”数据 1</strong></p><ul><li>读“脏”数据是指：<ul><li>事务T1修改某一数据，并将其写回磁盘</li><li>事务T2读取同一数据后， T1由于某种原因被撤销</li><li>这时T1已修改过的数据恢复原值，T2读到的数据就与数据库中的数据不一致</li><li>T2读到的数据就为“脏”数据，即不正确的数据</li></ul></li></ul><p><strong>读“脏”数据 2</strong></p><ul><li>T1将C值修改为200， T2读到C为200</li><li>T1由于某种原因撤销，其修改作废，C恢复原值100</li><li>这时T2读到的C为200，与数据库内容不一致，就是“脏”数据</li></ul><p><img src="https://s2.loli.net/2022/04/19/pltRD7ZgLKX3vkf.png"></p><h2 id="数据不一致性及并发控制">数据不一致性及并发控制</h2><ul><li>数据不一致性：由于并发操作破坏了事务的隔离性</li><li>并发控制就是要用正确的方式调度并发操作，使一个用户事务的执行不受其他事务的干扰，从而避免造成数据的不一致性</li><li>对数据库的应用有时允许某些不一致性，例如有些统计工作涉及数据量很大，读到一些“脏”数据对统计精度没什么影响，可以降低对一致性的要求以减少系统开销</li></ul><h2 id="并发控制的主要技术">并发控制的主要技术</h2><ul><li>并发控制的主要技术<ul><li>封锁(Locking)</li><li>时间戳(Timestamp)</li><li>乐观控制法</li><li>多版本并发控制(MVCC)</li></ul></li></ul><h1 id="ch-55-封锁">ch 55 封锁</h1><h2 id="封锁">封锁</h2><ul><li>封锁就是事务T在对某个数据对象（例如表、记录等）操作之前，先向系统发出请求，对其加锁</li><li>加锁后事务T就对该数据对象有了一定的控制，在事务T释放它的锁之前，其它的事务不能更新此数据对象。</li><li>封锁是实现并发控制的一个非常重要的技术</li><li>一个事务对某个数据对象加锁后究竟拥有什么样的控制由封锁的类型决定。</li><li>基本封锁类型<ul><li>排它锁（Exclusive Locks，简记为X锁）</li><li>共享锁（Share Locks，简记为S锁）</li></ul></li></ul><h2 id="排它锁与共享锁">排它锁与共享锁</h2><ul><li>排它锁又称为<strong>写锁</strong><ul><li>若事务T对数据对象A加上X锁，则只允许T读取和修改A，<strong>其它任何事务都不能再对A加任何类型的锁，直到T释放A上的锁</strong></li><li>保证其他事务在T释放A上的锁之前不能再读取和修改A</li></ul></li><li>共享锁又称为<strong>读锁</strong><ul><li>若事务T对数据对象A加上S锁，则事务T可以读A但不能修改A，其它事务<strong>只能再对A加S锁，而不能加X锁</strong>，直到T释放A上的S锁</li><li>保证其他事务可以读A，但在T释放A上的S锁之前不能对A做任何修改</li></ul></li></ul><h2 id="锁的相容矩阵">锁的相容矩阵</h2><p><strong>锁的相容矩阵 1</strong></p><p><img src="https://s2.loli.net/2022/04/26/39wSpqE267RHJLM.png"></p><p><strong>锁的相容矩阵 2</strong></p><ul><li>在锁的相容矩阵中：</li><li>最左边一列表示事务T1已经获得的数据对象上的锁的类型，其中横线表示没有加锁。</li><li>最上面一行表示另一事务T2对同一数据对象发出的封锁请求。</li><li>T2的封锁请求能否被满足用矩阵中的Y和N表示<ul><li>Y表示事务T2的封锁要求与T1已持有的锁相容，封锁请求可以满足</li><li>N表示T2的封锁请求与T1已持有的锁冲突， T2的请求被拒绝</li></ul></li></ul><h2 id="封锁协议">封锁协议</h2><ul><li>在运用X锁和S锁对数据对象加锁时，需要约定一些规则，这些规则为封锁协议（LockingProtocol）。<ul><li>何时申请X锁或S锁</li><li>持锁时间</li><li>何时释放</li></ul></li><li>对封锁方式规定不同的规则，就形成了各种不同的封锁协议，它们分别在不同的程度上为并发操作的正确调度提供一定的保证。</li></ul><h2 id="一级封锁协议">一级封锁协议</h2><p><strong>一级封锁协议</strong> 1</p><ul><li>一级封锁协议<ul><li>事务T在修改数据R之前必须先对其加X锁，直到事务结束才释放。<ul><li>正常结束（COMMIT）</li><li>非正常结束（ROLLBACK）</li></ul></li></ul></li><li>一级封锁协议可防止丢失修改，并保证事务T是可恢复的。</li><li>在一级封锁协议中，如果仅仅是读数据不对其进行修改，是不需要加锁的，所以它不能保证可重复读和不读“脏”数据。</li></ul><p><strong>一级封锁协议 2</strong></p><p><img src="https://s2.loli.net/2022/04/26/mOJTFxGq76ClB9a.png"></p><ul><li>事务T1在读A进行修改之前先对A加X锁</li><li>当T2再请求对A加X锁时被拒绝</li><li>T2只能等待T1释放A上的锁后获得对A的X锁</li><li>这时T2读到的A已经是T1更新过的值15</li><li>T2按此新的A值进行运算，并将结果值A=14写回到磁盘。避免了丢失T1的更新。</li></ul><h2 id="二级封锁协议">二级封锁协议</h2><p><strong>二级封锁协议 1</strong></p><ul><li>二级封锁协议<ul><li>一级封锁协议加上事务T在读取数据R之前必须先对其加S锁，读完后即可释放S锁。</li></ul></li><li>二级封锁协议可以防止丢失修改和读“脏”数据。</li><li>在二级封锁协议中，由于读完数据后即可释放S锁，所以它不能保证可重复读。</li></ul><p><strong>二级封锁协议 2</strong></p><p><img src="https://s2.loli.net/2022/04/26/sgXaJMI4CxVEvYH.png"></p><ul><li>事务T1在对C进行修改之前，先对C加X锁，修改其值后写回磁盘</li><li>T2请求在C上加S锁，因T1已在C上加了X锁， T2只能等待</li><li>T1因某种原因被撤销，C恢复为原值100</li><li>T1释放C上的X锁后T2获得C上的S锁，读C=100。避免了T2读“脏”数据</li></ul><h2 id="三级封锁协议">三级封锁协议</h2><p><strong>三级封锁协议 1</strong></p><ul><li>三级封锁协议<ul><li>一级封锁协议加上事务T在读取数据R之前必须先对其加S锁，直到事务结束才释放。</li></ul></li><li>三级封锁协议可防止丢失修改、读脏数据和不可重复读。</li></ul><p><strong>三级封锁协议 2</strong></p><p><img src="https://s2.loli.net/2022/04/26/xa4X1Yigyd9HGlu.png"></p><ul><li>事务T1在读A，B之前，先对A，B加S锁</li><li>其他事务只能再对A，B加S锁，而不能加X锁，即其他事务只能读A，B，而不能修改</li><li>当T2为修改B而申请对B的X锁时被拒绝只能等待T1释放B上的锁</li><li>T1为验算再读A，B，这时读出的B仍是100，求和结果仍为150，即可重复读</li><li>T1结束才释放A，B上的S锁。 T2才获得对B的X锁</li></ul><h2 id="封锁协议小结">封锁协议小结</h2><ul><li>三级协议的主要区别<ul><li>什么操作需要申请封锁以及何时释放锁（即持锁时间）</li></ul></li><li>不同的封锁协议使事务达到的一致性级别不同<ul><li>封锁协议级别越高，一致性程度越高</li></ul></li></ul><p><img src="https://s2.loli.net/2022/04/26/cLHSIurQoqFBC4b.png"></p><h2 id="活锁">活锁</h2><p><strong>活锁 1</strong></p><ul><li>事务T1封锁了数据R</li><li>事务T2又请求封锁R，于是T2等待。</li><li>T3也请求封锁R，当T1释放了R上的封锁之后系统首先批准了T3的请求，T2仍然等待。</li><li>T4又请求封锁R，当T3释放了R上的封锁之后系统又批准了T4的请求……</li><li>T2有可能永远等待，这就是活锁的情形</li><li>避免活锁：采用<strong>先来先服务</strong>的策略<ul><li>当多个事务请求封锁同一数据对象时</li><li>按请求封锁的先后次序对这些事务排队</li><li>该数据对象上的锁一旦释放，首先批准申请队列中第一个事务获得锁</li></ul></li></ul><p><strong>活锁 2</strong></p><p><img src="https://s2.loli.net/2022/04/26/WI7OwFpYZcRo3tT.png"></p><h2 id="死锁">死锁</h2><p><strong>死锁 1</strong></p><ul><li>事务T1封锁了数据R1（可以认为均是X锁）</li><li>T2封锁了数据R2</li><li>T1又请求封锁R2 ，因T2已封锁了R2 ，于是T1等待T2释放R2上的锁</li><li>接着T2又申请封锁R1 ，因T1已封锁了R1 ，T2也只能等待T1释放R1上的锁</li><li>这样T1在等待T2 ，而T2又在等待T1 ，T1和T2两个事务永远不能结束，形成死锁</li></ul><p><strong>死锁 2</strong></p><p><img src="https://s2.loli.net/2022/04/26/WI7OwFpYZcRo3tT.png"></p><h2 id="死锁的预防">死锁的预防</h2><ul><li><p>产生死锁的原因是两个或多个事务都已封锁了一些数据对象，然后又都请求对已为其他事务封锁的数据对象加锁，从而出现死等待。</p></li><li><p>预防死锁的发生就是要破坏产生死锁的条件</p></li><li><p><strong>一次封锁法</strong>，要求每个事务必须一次将所有要使用的数据全部加锁，否则就不能继续执行</p></li><li><p>存在的问题</p><ul><li>降低系统并发度</li><li>难于事先精确确定封锁对象<ul><li>数据库中数据是不断变化的，原来不要求封锁的数据，在执行过程中可能会变成封锁对象，所以很难事先精确地确定每个事务所要封锁的数据对象。</li><li>解决方法：将事务在执行过程中可能要封锁的数据对象全部加锁，这就进一步降低了并发度。</li></ul></li></ul></li><li><p><strong>顺序封锁法</strong>，预先对数据对象规定一个封锁顺序，所有事务都按这个顺序实行封锁。</p></li><li><p>存在的问题</p><ul><li>维护成本<ul><li>数据库系统中封锁的数据对象极多，并且随数据的插入、删除等操作而不断地变化，要维护这样的资源的封锁顺序非常困难，成本很高。</li></ul></li><li>难以实现<ul><li>事务的封锁请求可以随着事务的执行而动态地决定，很难事先确定每一个事务要封锁哪些对象，因此也就很难按规定的顺序去施加封锁</li></ul></li></ul></li></ul><h2 id="死锁的诊断">死锁的诊断</h2><ul><li>数据库管理系统在解决死锁的问题上更普遍采用的是诊断并解除死锁的方法<ul><li>在操作系统中广为采用的预防死锁的策略并不太适合数据库的特点</li></ul></li><li><strong>超时法</strong>，如果一个事务的等待时间超过了规定的时限，就认为发生了死锁</li><li>优点<ul><li>实现简单</li></ul></li><li>缺点<ul><li>有可能误判死锁</li><li>时限若设置得太长，死锁发生后不能及时发现</li></ul></li><li><strong>等待图法</strong>，并发控制子系统周期性地（比如每隔数秒）生成事务等待图，检测事务。如果发现图中存在回路，则表示系统中出现了死锁。<ul><li>事务等待图是一个有向图G=(T，U)</li><li>T为结点的集合，每个结点表示正运行的事务</li><li>U为边的集合，每条边表示事务等待的情况</li><li>若T1等待T2 ，则T1 ， T2之间划一条有向边，从T1指向T2</li></ul></li></ul><p><img src="https://s2.loli.net/2022/04/26/U8nF5p9wKP3S7Vd.png" alt="image-20220426151508874"></p><h2 id="死锁的解除">死锁的解除</h2><ul><li><p>解除死锁</p><ul><li>选择一个处理死锁代价最小的事务，将其撤消</li><li>释放此事务持有的所有的锁，使其它事务能继续运行下去</li></ul></li></ul><h1 id="ch-56-事务调度">ch 56 事务调度</h1><h2 id="并发调度的可串行性">并发调度的可串行性</h2><ul><li>数据库管理系统对并发事务不同的调度可能会产生不同的结果</li><li>串行调度是正确的</li><li>执行结果等价于串行调度的调度也是正确的，称为可串行化调度</li></ul><h2 id="可串行化调度">可串行化调度</h2><ul><li>可串行化(Serializable)调度<ul><li>多个事务的并发执行是正确的，当且仅当其结果与按某一次序串行地执行这些事务时的结果相同</li></ul></li><li>可串行性(Serializability)<ul><li>是并发事务正确调度的准则</li><li>一个给定的并发调度，当且仅当它是可串行化的，才认为是正确调度</li></ul></li></ul><h2 id="可串行化调度的例子">可串行化调度的例子</h2><p><img src="https://s2.loli.net/2022/04/26/lFCgPjcI9xhDu12.png" alt="image-20220426151702617"></p><h2 id="串行调度正确的调度">串行调度,正确的调度</h2><p><strong>串行调度(a)</strong></p><p><img src="https://s2.loli.net/2022/04/26/1Pk6gZCvWRFGcba.png" alt="image-20220426151724290"></p><ul><li>假设A、B的初值均为2。</li><li>按T1→T2次序执行结果为A=3，B=4</li><li>串行调度策略,正确的调度</li></ul><p><strong>串行调度(b)</strong></p><p><img src="https://s2.loli.net/2022/04/26/9bBTVozWeG7k1Hl.png" alt="image-20220426151825547"></p><ul><li>假设A、B的初值均为2。</li><li>T2→T1次序执行结果为B=3，A=4</li><li>串行调度策略,正确的调度</li></ul><h2 id="不可串行化调度错误的调度">不可串行化调度，错误的调度</h2><p><img src="https://s2.loli.net/2022/04/26/2bICqiJK6wV95s1.png" alt="image-20220426152010292"></p><ul><li>执行结果与(a)、(b)的结果都不同</li><li>是错误的调度</li></ul><h2 id="可串行化调度正确的调度">可串行化调度，正确的调度</h2><p><img src="https://s2.loli.net/2022/04/26/SCFbhjAHXDO8TxE.png" alt="image-20220426152048148"></p><ul><li>执行结果与串行调度(a)的执行结果相同</li><li>是正确的调度</li></ul><h2 id="冲突可串行化">冲突可串行化</h2><p><strong>冲突可串行化 1</strong></p><ul><li><p>冲突可串行化</p><ul><li>一个比可串行化更严格的条件</li><li>商用系统中的调度器采用</li></ul></li><li><p>冲突操作：是指不同的事务对同一数据的读写操作和写写操作：</p><p><img src="https://s2.loli.net/2022/04/29/46uAF3UByZ5wrg8.png"></p></li><li><p>其他操作是不冲突操作</p></li><li><p>不能交换（Swap）的动作:</p><ul><li>同一事务的两个操作</li><li>不同事务的冲突操作</li></ul></li></ul><p><strong>冲突可串行化 2</strong></p><ul><li>一个调度Sc在保证冲突操作的次序不变的情况下，通过交换两个事务不冲突操作的次序得到另一个调度Sc’，如果Sc’是串行的，称调度Sc是冲突可串行化的调度</li><li>若一个调度是冲突可串行化，则一定是可串行化的调度</li><li>可用这种方法判断一个调度是否是冲突可串行化的</li></ul><p><strong>冲突可串行化 3</strong></p><p><img src="https://s2.loli.net/2022/04/29/EtBPd4hYM3js7J1.png"></p><h2 id="冲突可串行化调度">冲突可串行化调度</h2><ul><li><p>冲突可串行化调度是可串行化调度的充分条件，不是必要条件。还有不满足冲突可串行化条件的可串行化调度。</p><p><img src="https://s2.loli.net/2022/04/29/vMATEcIK4g2e9t1.png"></p></li></ul><h2 id="两段锁协议">两段锁协议</h2><p><strong>两段锁协议 1</strong></p><ul><li>数据库管理系统普遍采用两段锁协议的方法实现并发调度的可串行性，从而保证调度的正确性</li><li>两段锁协议，指所有事务必须分两个阶段对数据项加锁和解锁<ul><li>在对任何数据进行读、写操作之前，事务首先要获得对该数据的封锁</li><li>在释放一个封锁之后，事务不再申请和获得任何其他封锁</li></ul></li></ul><p><strong>两段锁协议 2</strong></p><ul><li>“两段”锁的含义，事务分为两个阶段<ul><li>第一阶段是获得封锁，也称为扩展阶段事务可以申请获得任何数据项上的任何类型的锁，但是不能释放任何锁</li><li>第二阶段是释放封锁，也称为收缩阶段事务可以释放任何数据项上的任何类型的锁，但是不能再申请任何锁</li></ul></li></ul><p><img src="https://s2.loli.net/2022/04/29/qx4XrcZHCmBNjDU.png"></p><p><strong>两段锁协议 3</strong></p><p><img src="https://s2.loli.net/2022/04/29/5NqIB4XZMwFT6yp.png"></p><ul><li>上图的调度是遵守两段锁协议的，因此一定是一个可串行化调度。</li><li>如何验证？</li></ul><p><strong>两段锁协议 4</strong></p><ul><li>事务遵守两段锁协议是可串行化调度的充分条件，而不是必要条件。</li><li>若并发事务都遵守两段锁协议，则对这些事务的任何并发调度策略都是可串行化的</li><li>若并发事务的一个调度是可串行化的，不一定所有事务都符合两段锁协议</li></ul><p><strong>两段锁协议 5</strong></p><ul><li>两段锁协议与防止死锁的一次封锁法<ul><li>一次封锁法要求每个事务必须一次将所有要使用的数据全部加锁，否则就不能继续执行，因此一次封锁法遵守两段锁协议</li><li>但是两段锁协议并不要求事务必须一次将所有要使用的数据全部加锁，因此遵守两段锁协议的事务可能发生死锁</li></ul></li></ul><p><strong>两段锁协议 6</strong></p><p><img src="https://s2.loli.net/2022/04/29/IGLJQKg6Ezkoexr.png"></p><h1 id="ch-57-封锁粒度">ch 57 封锁粒度</h1><h2 id="封锁粒度">封锁粒度</h2><ul><li>封锁对象的大小称为封锁粒度(Granularity)</li><li>封锁的对象:逻辑单元，物理单元</li><li>例：在关系数据库中，封锁对象：<ul><li>逻辑单元:属性值、属性值的集合、元组、关系、索引项、整个索引、整个数据库等</li><li>物理单元：页（数据页或索引页）、物理记录等</li></ul></li></ul><h2 id="选择封锁粒度原则">选择封锁粒度原则</h2><ul><li>封锁粒度与系统的并发度和并发控制的开销密切相关。<ul><li>封锁的粒度越大，数据库所能够封锁的数据单元就越少，并发度就越小，系统开销也越小；</li><li>封锁的粒度越小，并发度较高，但系统开销也就越大</li></ul></li><li>例<ul><li>若封锁粒度是数据页，事务T1需要修改元组L1，则T1必须对包含L1的整个数据页A加锁。如果T1对A加锁后事务T2要修改A中元组L2，则T2被迫等待，直到T1释放A。</li><li>如果封锁粒度是元组，则T1和T2可以同时对L1和L2加锁，不需要互相等待，提高了系统的并行度。</li></ul></li><li>又如，事务T需要读取整个表，若封锁粒度是元组，T必须对表中的每一个元组加锁，开销极大</li></ul><h2 id="多粒度封锁">多粒度封锁</h2><ul><li>多粒度封锁(Multiple Granularity Locking)<ul><li>在一个系统中同时支持多种封锁粒度供不同的事务选择</li></ul></li><li>选择封锁粒度，同时考虑封锁开销和并发度两个因素, 适当选择封锁粒度<ul><li>需要处理多个关系的大量元组的用户事务：以数据库为封锁单位</li><li>需要处理大量元组的用户事务：以关系为封锁单元</li><li>只处理少量元组的用户事务：以元组为封锁单位</li></ul></li></ul><h2 id="多粒度树">多粒度树</h2><ul><li>多粒度树<ul><li>以树形结构来表示多级封锁粒度</li><li>根结点是整个数据库，表示最大的数据粒度</li><li>叶结点表示最小的数据粒度</li></ul></li><li>例：三级粒度树。根结点为数据库，数据库的子结点为关系，关系的子结点为元组。</li></ul><h2 id="多粒度封锁协议">多粒度封<img src="https://s2.loli.net/2022/04/29/aVUkTlsKNyAROtQ.png">锁协议</h2><ul><li>允许多粒度树中的每个结点被独立地加锁</li><li>对一个结点加锁意味着这个结点的所有后裔结点也被加以同样类型的锁</li><li>在多粒度封锁中一个数据对象可能以两种方式封锁：<ul><li>显式封锁: 直接加到数据对象上的封锁</li><li>隐式封锁:是该数据对象没有独立加锁，是由于其上级结点加锁而使该数据对象加上了锁</li></ul></li><li>显式封锁和隐式封锁的效果是一样的</li></ul><h2 id="显式封锁和隐式封锁">显式封锁和隐式封锁</h2><p><strong>显式封锁和隐式封锁 1</strong></p><ul><li>系统检查封锁冲突时<ul><li>要检查显式封锁</li><li>还要检查隐式封锁</li></ul></li><li>例如，事务T要对关系R1加X锁<ul><li>系统必须搜索其上级结点数据库、关系R1</li><li>还要搜索R1的下级结点，即R1中的每一个元组</li><li>如果其中某一个数据对象已经加了不相容锁，则T必须等待</li></ul></li></ul><p><strong>显式封锁和隐式封锁 2</strong></p><ul><li>对某个数据对象加锁，系统要检查<ul><li>该数据对象</li><li>有无显式封锁与之冲突</li><li>所有上级结点</li><li>检查本事务的显式封锁是否与该数据对象上的隐式封锁冲突：(由上级结点已加的封锁造成的）</li><li>所有下级结点<ul><li>看上面的显式封锁是否与本事务的隐式封锁（将加到下级结点的封锁）冲突</li></ul></li></ul></li></ul><h2 id="意向锁">意向锁</h2><ul><li>引进意向锁（intention lock）目的<ul><li>提高对某个数据对象加锁时系统的检查效率</li></ul></li><li>如果对一个结点加意向锁，则说明该结点的下层结点正在被加锁</li><li>对任一结点加基本锁，必须先对它的上层结点加意向锁</li><li>例如，对任一元组加锁时，必须先对它所在的数据库和关系加意向锁</li></ul><h3 id="常用意向锁">常用意向锁</h3><p><strong>常用意向锁 1</strong></p><ul><li>共享意向排它锁(Share Intent Exclusive Lock，简称SIX锁)</li></ul><p><strong>常用意向锁-意向共享锁</strong></p><ul><li>意向共享锁(Intent Share Lock，简称IS锁)<ul><li>如果对一个数据对象加IS锁，表示它的后裔结点拟（意向）加S锁。</li><li>例如：事务T1要对R1中某个元组加S锁，则要首先对关系R1和数据库加IS锁</li></ul></li></ul><p><strong>常用意向锁-意向排它锁</strong></p><ul><li>意向排它锁(Intent Exclusive Lock，简称IX锁)<ul><li>如果对一个数据对象加IX锁，表示它的后裔结点拟（意向）加X锁。</li><li>例如：事务T1要对R1中某个元组加X锁，则要首先对关系R1和数据库加IX锁</li></ul></li></ul><p><strong>常用意向锁-共享意向排它锁</strong></p><ul><li>共享意向排它锁(Share Intent Exclusive Lock，简称SIX锁)<ul><li>如果对一个数据对象加SIX锁，表示对它加S锁，再加IX锁，即SIX = S +IX。</li><li>例：对某个表加SIX锁，则表示该事务要读整个表（所以要对该表加S锁），同时会更新个别元组（所以要对该表加IX锁）</li></ul></li></ul><h2 id="意向锁的相容矩阵">意向锁的相容矩阵</h2><p><img src="https://s2.loli.net/2022/04/29/qxBfRVH2zO1yZvI.png"></p><h2 id="锁的强度">锁的强度</h2><ul><li>锁的强度是指它对其他锁的排斥程度</li><li>一个事务在申请封锁时以强锁代替弱锁是安全的，反之则不然</li></ul><p><img src="https://s2.loli.net/2022/04/29/e3uWKnIacf2gOwA.png"></p><h2 id="具有意向锁的多粒度封锁方法">具有意向锁的多粒度封锁方法</h2><ul><li>申请封锁时应该按自上而下的次序进行</li><li>释放封锁时则应该按自下而上的次序进行</li><li>具有意向锁的多粒度封锁方法<ul><li>提高了系统的并发度</li><li>减少了加锁和解锁的开销</li><li>在实际的数据库管理系统产品中得到广泛应</li></ul></li><li>例如：事务T1要对关系R1加S锁<ul><li>要首先对数据库加IS锁</li><li>检查数据库和R1是否已加了不相容的锁(X或IX)</li><li>不再需要搜索和检查R1中的元组是否加了不相容的锁(X锁)</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> 数据管理基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据管理基础 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="/2022/04/17/JDBC/"/>
      <url>/2022/04/17/JDBC/</url>
      
        <content type="html"><![CDATA[<h1 id="jdbc">JDBC</h1><h2 id="导入jdbc包">导入JDBC包</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.* ;  <span class="comment">// for standard JDBC programs</span></span><br><span class="line"><span class="keyword">import</span> java.math.* ; <span class="comment">// for BigDecimal and BigInteger </span></span><br></pre></td></tr></table></figure><h2 id="注册jdbc驱动程序">注册JDBC驱动程序</h2><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="18.087ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 7994.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(760,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(1058,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1587,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(2056,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(2525,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mi" transform="translate(2969.7,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(3519.7,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(4004.7,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4455.7,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mi" transform="translate(5343.7,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(5872.7,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(6750.7,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(7216.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(7605.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> {</span><br><span class="line"> Class.forName(<span class="string">"oracle.jdbc.driver.OracleDriver"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">catch</span>(ClassNotFoundException ex) {</span><br><span class="line">   System.out.println(<span class="string">"Error: unable to load driver class!"</span>);</span><br><span class="line">   System.exit(<span class="number">1</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="使用数据库url的用户名和密码">使用数据库URL的用户名和密码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JDBC_DRIVER</span> <span class="operator">=</span> <span class="string">"com.mysql.cj.jdbc.Driver"</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DB_URL</span> <span class="operator">=</span> <span class="string">"jdbc:mysql://localhost:3306/lab"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USER</span> <span class="operator">=</span> <span class="string">"root"</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PASS</span> <span class="operator">=</span> <span class="string">"hurui011019"</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  conn = DriverManager.getConnection(DB_URL,USER,PASS);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="jdbc-statement-对象">JDBC Statement 对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span>{</span><br><span class="line">stmt = conn.createStatement();</span><br><span class="line">...</span><br><span class="line">}</span><br><span class="line"><span class="keyword">catch</span>{</span><br><span class="line"></span><br><span class="line">}<span class="keyword">finally</span>{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure><ul><li>执行SQL语句</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String sql;</span><br><span class="line">         sql = <span class="string">"SELECT emp_no, first_name, last_name, birth_date FROM Employees"</span>;</span><br><span class="line">         <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(sql);</span><br></pre></td></tr></table></figure><h2 id="jdbc结果集">JDBC结果集</h2><p>查看结果集</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(rs.next()){</span><br><span class="line">                <span class="comment">//Retrieve by column name</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">emp_no</span>  <span class="operator">=</span> rs.getInt(<span class="string">"emp_no"</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">first_name</span> <span class="operator">=</span> rs.getString(<span class="string">"first_name"</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">last_name</span> <span class="operator">=</span> rs.getString(<span class="string">"last_name"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//Display values</span></span><br><span class="line">                System.out.print(<span class="string">"ID: "</span> + emp_no);</span><br><span class="line">                System.out.print(<span class="string">", First: "</span> + first_name);</span><br><span class="line">                System.out.println(<span class="string">", Last: "</span> + last_name);</span><br><span class="line">            }</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/18/SocJ48ihRdGMksO.png" alt="image-20220418000522566" style="zoom:67%;"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见问题</title>
      <link href="/2022/04/17/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/2022/04/17/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="n数之和">n数之和</h1><table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/3sum/">15.三数之和</a></td><td><a href="https://leetcode-cn.com/problems/3sum/solution/shua-chuan-lc-pai-xu-shuang-zhi-zhen-jie-cd8r/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/3sum-closest/">16.最接近的三数之和</a></td><td><a href="https://leetcode-cn.com/problems/3sum-closest/solution/shua-chuan-lc-pai-xu-shuang-zhi-zhen-jie-p2ou/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/4sum/">18.四数之和</a></td><td><a href="https://leetcode-cn.com/problems/4sum/solution/shua-chuan-lc-pai-xu-shuang-zhi-zhen-jie-dqx7/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr></tbody></table><h1 id="组合总和">组合总和</h1><table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/combination-sum/">39.组合总和</a></td><td><a href="https://leetcode-cn.com/problems/combination-sum/solution/dfs-hui-su-suan-fa-yi-ji-ru-he-que-ding-wpbo5/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/combination-sum-ii/">40.组合总和 II</a></td><td><a href="https://leetcode-cn.com/problems/combination-sum-ii/solution/dfs-hui-su-jie-fa-yi-ji-ru-he-pan-duan-s-xlwy/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr></tbody></table><h1 id="括号问题">括号问题</h1><table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/valid-parentheses/">20.有效的括号</a></td><td><a href="https://leetcode-cn.com/problems/valid-parentheses/solution/shua-chuan-lc-zhan-ascii-chai-zhi-jie-fa-00zo/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/generate-parentheses/">22.括号生成</a></td><td><a href="https://leetcode-cn.com/problems/generate-parentheses/solution/shua-chuan-lc-dfs-jie-fa-by-ac_oier-nknl/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/longest-valid-parentheses/">32.最长有效括号</a></td><td><a href="https://leetcode-cn.com/problems/longest-valid-parentheses/solution/shua-chuan-lc-miao-dong-xi-lie-shi-yong-95ezk/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/remove-invalid-parentheses/">301.删除无效的括号</a></td><td><a href="https://leetcode-cn.com/problems/remove-invalid-parentheses/solution/yi-fen-zhong-nei-kan-dong-jiang-gua-hao-aya6k/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/valid-parenthesis-string/">678.有效的括号字符串</a></td><td><a href="https://leetcode-cn.com/problems/valid-parenthesis-string/solution/gong-shui-san-xie-yi-ti-shuang-jie-dong-801rq/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr></tbody></table><h1 id="数独问题">数独问题</h1><table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/valid-sudoku/">36.有效的数独</a></td><td><a href="https://leetcode-cn.com/problems/valid-sudoku/solution/gong-shui-san-xie-yi-ti-san-jie-ha-xi-bi-ssxp/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/sudoku-solver/">37.解数独</a></td><td><a href="https://leetcode-cn.com/problems/sudoku-solver/solution/he-n-huang-hou-yi-yang-shi-yi-dao-hui-su-lfpd/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr></tbody></table><h1 id="回文串问题">回文串问题</h1><table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/longest-palindromic-substring/">5.最长回文子串</a></td><td><a href="https://leetcode-cn.com/problems/longest-palindromic-substring/solution/shua-chuan-lc-po-su-jie-fa-manacher-suan-i2px/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/palindrome-number/">9.回文数</a></td><td><a href="https://leetcode-cn.com/problems/palindrome-number/solution/shua-chuan-lc-zi-fu-chuan-fei-zi-fu-chua-e8l0/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/palindrome-partitioning/">131.分割回文串</a></td><td><a href="https://leetcode-cn.com/problems/palindrome-partitioning/solution/wei-sha-yao-zhe-yang-bao-sou-ya-shi-ru-h-41gf/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/palindrome-partitioning-ii/">132.分割回文串 II</a></td><td><a href="https://leetcode-cn.com/problems/palindrome-partitioning-ii/solution/xiang-jie-liang-bian-dong-tai-gui-hua-ji-s5xr/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr></tbody></table><h1 id="表达式计算">表达式计算</h1><table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/evaluate-reverse-polish-notation/">150.逆波兰表达式求值</a></td><td><a href="https://leetcode-cn.com/problems/evaluate-reverse-polish-notation/solution/yi-ti-shuang-jie-xi-tong-zhan-shu-zu-mo-i1eq3/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/basic-calculator/">224.基本计算器</a></td><td><a href="https://leetcode-cn.com/problems/basic-calculator/solution/shuang-zhan-jie-jue-tong-yong-biao-da-sh-olym/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/basic-calculator-ii/">227.基本计算器 II</a></td><td><a href="https://leetcode-cn.com/problems/basic-calculator-ii/solution/shi-yong-shuang-zhan-jie-jue-jiu-ji-biao-c65k/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/clumsy-factorial/">1006.笨阶乘</a></td><td><a href="https://leetcode-cn.com/problems/clumsy-factorial/solution/gong-shui-san-xie-tong-yong-biao-da-shi-nngfp/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr></tbody></table><h1 id="扫描线">扫描线</h1><table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/the-skyline-problem/">218.天际线问题</a></td><td><a href="https://leetcode-cn.com/problems/the-skyline-problem/solution/gong-shui-san-xie-sao-miao-xian-suan-fa-0z6xc/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/perfect-rectangle/">391.完美矩形</a></td><td><a href="https://leetcode-cn.com/problems/perfect-rectangle/solution/gong-shui-san-xie-chang-gui-sao-miao-xia-p4q4/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构造</title>
      <link href="/2022/04/17/%E6%9E%84%E9%80%A0/"/>
      <url>/2022/04/17/%E6%9E%84%E9%80%A0/</url>
      
        <content type="html"><![CDATA[<table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/number-of-ways-to-reconstruct-a-tree/">1719.重构一棵树的方案数</a></td><td><a href="https://leetcode-cn.com/problems/number-of-ways-to-reconstruct-a-tree/solution/gong-shui-san-xie-gou-zao-yan-zheng-he-f-q6fc/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/find-missing-observations/">2028.找出缺失的观测数据</a></td><td><a href="https://leetcode-cn.com/problems/find-missing-observations/solution/by-ac_oier-x22k/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 构造 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓄水池抽样</title>
      <link href="/2022/04/17/%E8%93%84%E6%B0%B4%E6%B1%A0%E6%8A%BD%E6%A0%B7/"/>
      <url>/2022/04/17/%E8%93%84%E6%B0%B4%E6%B1%A0%E6%8A%BD%E6%A0%B7/</url>
      
        <content type="html"><![CDATA[<table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/linked-list-random-node/">382.链表随机节点</a></td><td><a href="https://leetcode-cn.com/problems/linked-list-random-node/solution/gong-shui-san-xie-xu-shui-chi-chou-yang-1lp9d/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/random-pick-index/">398.随机数索引</a></td><td><a href="https://leetcode-cn.com/problems/random-pick-index/solution/xu-shui-chi-chou-yang-by-dega-vu-kl8u/">Freedom的题解</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 蓄水池抽样 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高精度</title>
      <link href="/2022/04/17/%E9%AB%98%E7%B2%BE%E5%BA%A6/"/>
      <url>/2022/04/17/%E9%AB%98%E7%B2%BE%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/additive-number/">306.累加数</a></td><td><a href="https://leetcode-cn.com/problems/additive-number/solution/gong-shui-san-xie-hui-su-gao-jing-du-jia-6o6b/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 高精度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>约瑟夫环</title>
      <link href="/2022/04/17/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF/"/>
      <url>/2022/04/17/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/elimination-game/">390.消除游戏</a></td><td><a href="https://leetcode-cn.com/problems/elimination-game/solution/gong-shui-san-xie-yue-se-fu-huan-yun-yon-x60m/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 约瑟夫环 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打表</title>
      <link href="/2022/04/17/%E6%89%93%E8%A1%A8/"/>
      <url>/2022/04/17/%E6%89%93%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/power-of-three/">326.3的幂</a></td><td><a href="https://leetcode-cn.com/problems/power-of-three/solution/gong-shui-san-xie-yi-ti-san-jie-shu-xue-8oiip/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/binary-watch/">401.二进制手表</a></td><td><a href="https://leetcode-cn.com/problems/binary-watch/solution/gong-shui-san-xie-jian-dan-ti-xue-da-bia-gwn2/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/2-keys-keyboard/">650.只有两个键的键盘</a></td><td><a href="https://leetcode-cn.com/problems/2-keys-keyboard/solution/gong-shui-san-xie-yi-ti-san-jie-dong-tai-f035/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/self-dividing-numbers/">728.自除数</a></td><td><a href="https://leetcode-cn.com/problems/self-dividing-numbers/solution/by-ac_oier-pvb1/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/n-th-tribonacci-number/">1137. 第N 个泰波那契数</a></td><td><a href="https://leetcode-cn.com/problems/n-th-tribonacci-number/solution/gong-shui-san-xie-yi-ti-si-jie-die-dai-d-m1ie/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/find-the-minimum-number-of-fibonacci-numbers-whose-sum-is-k/">1414.和为 K 的最少斐波那契数字数目</a></td><td><a href="https://leetcode-cn.com/problems/find-the-minimum-number-of-fibonacci-numbers-whose-sum-is-k/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-rgty8/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/get-maximum-in-generated-array/">1646.获取生成数组中的最大值</a></td><td><a href="https://leetcode-cn.com/problems/get-maximum-in-generated-array/solution/gong-shui-san-xie-jian-dan-mo-ni-ti-by-a-sj53/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/">剑指Offer 10- I. 斐波那契数列</a></td><td><a href="https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/solution/gong-shui-san-xie-yi-ti-si-jie-dong-tai-9zip0/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/group-anagrams-lcci/">面试题10.02. 变位词组</a></td><td><a href="https://leetcode-cn.com/problems/group-anagrams-lcci/solution/gong-shui-san-xie-tong-ji-bian-wei-ci-de-0iqe/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 打表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>脑筋急转弯</title>
      <link href="/2022/04/17/%E8%84%91%E7%AD%8B%E6%80%A5%E8%BD%AC%E5%BC%AF/"/>
      <url>/2022/04/17/%E8%84%91%E7%AD%8B%E6%80%A5%E8%BD%AC%E5%BC%AF/</url>
      
        <content type="html"><![CDATA[<table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/self-crossing/">335.路径交叉</a></td><td><a href="https://leetcode-cn.com/problems/self-crossing/solution/gong-shui-san-xie-fen-qing-kuang-tao-lun-zdrb/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/battleships-in-a-board/">419.甲板上的战舰</a></td><td><a href="https://leetcode-cn.com/problems/battleships-in-a-board/solution/gong-shui-san-xie-ji-chong-sao-miao-xian-trmc/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/reconstruct-original-digits-from-english/">423.从英文中重建数字</a></td><td><a href="https://leetcode-cn.com/problems/reconstruct-original-digits-from-english/solution/gong-shui-san-xie-nao-jin-ji-zhuan-wan-m-vg7a/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/remove-colored-pieces-if-both-neighbors-are-the-same-color/">2038.如果相邻两个颜色均相同则删除当前颜色</a></td><td><a href="https://leetcode-cn.com/problems/remove-colored-pieces-if-both-neighbors-are-the-same-color/solution/gong-shui-san-xie-nao-jin-ji-zhuan-wan-y-a8xm/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/walking-robot-simulation-ii/">2069.模拟行走机器人 II</a></td><td><a href="https://leetcode-cn.com/problems/walking-robot-simulation-ii/solution/by-ac_oier-6zib/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 脑筋急转弯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找规律</title>
      <link href="/2022/04/17/%E6%89%BE%E8%A7%84%E5%BE%8B/"/>
      <url>/2022/04/17/%E6%89%BE%E8%A7%84%E5%BE%8B/</url>
      
        <content type="html"><![CDATA[<table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/self-crossing/">335.路径交叉</a></td><td><a href="https://leetcode-cn.com/problems/self-crossing/solution/gong-shui-san-xie-fen-qing-kuang-tao-lun-zdrb/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/battleships-in-a-board/">419.甲板上的战舰</a></td><td><a href="https://leetcode-cn.com/problems/battleships-in-a-board/solution/gong-shui-san-xie-ji-chong-sao-miao-xian-trmc/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/reconstruct-original-digits-from-english/">423.从英文中重建数字</a></td><td><a href="https://leetcode-cn.com/problems/reconstruct-original-digits-from-english/solution/gong-shui-san-xie-nao-jin-ji-zhuan-wan-m-vg7a/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/k-th-smallest-in-lexicographical-order/">440.字典序的第K小数字</a></td><td><a href="https://leetcode-cn.com/problems/k-th-smallest-in-lexicographical-order/solution/by-ac_oier-m3zl/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 找规律 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矩阵快速幂</title>
      <link href="/2022/04/17/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
      <url>/2022/04/17/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/</url>
      
        <content type="html"><![CDATA[<table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/student-attendance-record-ii/">552.学生出勤记录 II</a></td><td><a href="https://leetcode-cn.com/problems/student-attendance-record-ii/solution/gong-shui-san-xie-yi-ti-san-jie-ji-yi-hu-fdfx/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/n-th-tribonacci-number/">1137. 第N 个泰波那契数</a></td><td><a href="https://leetcode-cn.com/problems/n-th-tribonacci-number/solution/gong-shui-san-xie-yi-ti-si-jie-die-dai-d-m1ie/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/count-vowels-permutation/">1220.统计元音字母序列的数目</a></td><td><a href="https://leetcode-cn.com/problems/count-vowels-permutation/solution/gong-shui-san-xie-yi-ti-shuang-jie-xian-n8f4o/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/">剑指Offer 10- I. 斐波那契数列</a></td><td><a href="https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/solution/gong-shui-san-xie-yi-ti-si-jie-dong-tai-9zip0/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩🤩</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 矩阵快速幂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速幂</title>
      <link href="/2022/04/17/%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
      <url>/2022/04/17/%E5%BF%AB%E9%80%9F%E5%B9%82/</url>
      
        <content type="html"><![CDATA[<table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/super-pow/">372.超级次方</a></td><td><a href="https://leetcode-cn.com/problems/super-pow/solution/gong-shui-san-xie-di-gui-kuai-su-mi-ying-yx1j/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 快速幂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二进制枚举</title>
      <link href="/2022/04/17/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%9E%9A%E4%B8%BE/"/>
      <url>/2022/04/17/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%9E%9A%E4%B8%BE/</url>
      
        <content type="html"><![CDATA[<table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/maximum-length-of-a-concatenated-string-with-unique-characters/">1239.串联字符串的最大长度</a></td><td><a href="https://leetcode-cn.com/problems/maximum-length-of-a-concatenated-string-with-unique-characters/solution/gong-shui-san-xie-yi-ti-san-jie-jian-zhi-nfeb/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/maximum-number-of-achievable-transfer-requests/">1601.最多可达成的换楼请求数目</a></td><td><a href="https://leetcode-cn.com/problems/maximum-number-of-achievable-transfer-requests/solution/gong-shui-san-xie-er-jin-zhi-mei-ju-by-a-enef/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/count-number-of-maximum-bitwise-or-subsets/">2044.统计按位或能得到最大值的子集数目</a></td><td><a href="https://leetcode-cn.com/problems/count-number-of-maximum-bitwise-or-subsets/solution/by-ac_oier-dos6/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 二进制枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洗牌算法</title>
      <link href="/2022/04/17/%E6%B4%97%E7%89%8C%E7%AE%97%E6%B3%95/"/>
      <url>/2022/04/17/%E6%B4%97%E7%89%8C%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/shuffle-an-array/">384.打乱数组</a></td><td><a href="https://leetcode-cn.com/problems/shuffle-an-array/solution/gong-shui-san-xie-xi-pai-suan-fa-yun-yon-0qmy/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 洗牌算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三分</title>
      <link href="/2022/04/17/%E4%B8%89%E5%88%86/"/>
      <url>/2022/04/17/%E4%B8%89%E5%88%86/</url>
      
        <content type="html"><![CDATA[<table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/peak-index-in-a-mountain-array/">852.山脉数组的峰顶索引</a></td><td><a href="https://leetcode-cn.com/problems/peak-index-in-a-mountain-array/solution/gong-shui-san-xie-er-fen-san-fen-cha-zhi-5gfv/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/B1IidL/">剑指 Offer II069. 山峰数组的顶部</a></td><td><a href="https://leetcode-cn.com/problems/B1IidL/solution/gong-shui-san-xie-er-fen-san-fen-ji-zhi-lc8zl/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩🤩</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 三分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博弈论</title>
      <link href="/2022/04/17/%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
      <url>/2022/04/17/%E5%8D%9A%E5%BC%88%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/nim-game/">292. Nim游戏</a></td><td><a href="https://leetcode-cn.com/problems/nim-game/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-wmz2t/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/chalkboard-xor-game/">810.黑板异或游戏</a></td><td><a href="https://leetcode-cn.com/problems/chalkboard-xor-game/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-ges7k/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/stone-game/">877.石子游戏</a></td><td><a href="https://leetcode-cn.com/problems/stone-game/solution/gong-shui-san-xie-jing-dian-qu-jian-dp-j-wn31/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/stone-game-ix/">2029.石子游戏 IX</a></td><td><a href="https://leetcode-cn.com/problems/stone-game-ix/solution/gong-shui-san-xie-fen-qing-kuang-tao-lun-h1oa/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博弈论 </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后缀数组</title>
      <link href="/2022/04/17/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/"/>
      <url>/2022/04/17/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/longest-duplicate-substring/">1044.最长重复子串</a></td><td><a href="https://leetcode-cn.com/problems/longest-duplicate-substring/solution/gong-shui-san-xie-zi-fu-chuan-ha-xi-ying-hae9/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 后缀数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串哈希</title>
      <link href="/2022/04/17/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/"/>
      <url>/2022/04/17/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/</url>
      
        <content type="html"><![CDATA[<table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/repeated-dna-sequences/">187.重复的DNA序列</a></td><td><a href="https://leetcode-cn.com/problems/repeated-dna-sequences/solution/gong-shui-san-xie-yi-ti-shuang-jie-hua-d-30pg/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/concatenated-words/">472.连接词</a></td><td><a href="https://leetcode-cn.com/problems/concatenated-words/solution/gong-shui-san-xie-xu-lie-dpzi-fu-chuan-h-p7no/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/repeated-string-match/">686.重复叠加字符串匹配</a></td><td><a href="https://leetcode-cn.com/problems/repeated-string-match/solution/gong-shui-san-xie-yi-ti-san-jie-qia-chan-3hbr/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/longest-duplicate-substring/">1044.最长重复子串</a></td><td><a href="https://leetcode-cn.com/problems/longest-duplicate-substring/solution/gong-shui-san-xie-zi-fu-chuan-ha-xi-ying-hae9/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 字符串哈希 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字典树</title>
      <link href="/2022/04/17/%E5%AD%97%E5%85%B8%E6%A0%91/"/>
      <url>/2022/04/17/%E5%AD%97%E5%85%B8%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<table><colgroup><col style="width: 35%"><col style="width: 35%"><col style="width: 2%"><col style="width: 26%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/implement-trie-prefix-tree/">208.实现 Trie (前缀树)</a></td><td><a href="https://leetcode.cn/problems/implement-trie-prefix-tree/solution/by-dega-vu-40rx/">Freedom的题解</a></td><td>中等</td><td>😻😻😻😻😻</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/design-add-and-search-words-data-structure/">211.添加与搜索单词 - 数据结构设计</a></td><td><a href="https://leetcode-cn.com/problems/design-add-and-search-words-data-structure/solution/gong-shui-san-xie-yi-ti-shuang-jie-er-we-un94/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/word-search-ii/">212.单词搜索 II</a></td><td><a href="https://leetcode-cn.com/problems/word-search-ii/solution/gong-shui-san-xie-yi-ti-shuang-jie-hui-s-am8f/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/maximum-xor-of-two-numbers-in-an-array/">421.数组中两个数的最大异或值</a></td><td><a href="https://leetcode-cn.com/problems/maximum-xor-of-two-numbers-in-an-array/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-bmjdg/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode.cn/problems/implement-magic-dictionary/">676.实现一个魔法字典 - 力扣（LeetCode）</a></td><td><a href="https://leetcode.cn/problems/implement-magic-dictionary/solution/gou-jian-zi-dian-shu-by-dega-vu-ynyr/">Freedom的题解</a></td><td>中等</td><td>😻😻😻😻😻</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/map-sum-pairs/">677.键值映射</a></td><td><a href="https://leetcode-cn.com/problems/map-sum-pairs/solution/gong-shui-san-xie-jie-he-dfs-de-trie-yun-i4xa/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/longest-word-in-dictionary/">720.词典中最长的单词</a></td><td><a href="https://leetcode-cn.com/problems/longest-word-in-dictionary/solution/by-ac_oier-bmot/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode.cn/problems/prefix-and-suffix-search/">745.前缀和后缀搜索 - 力扣（LeetCode）</a></td><td><a href="https://leetcode.cn/problems/prefix-and-suffix-search/solution/zi-dian-shu-by-dega-vu-10py/">Freedom的题解</a></td><td>困难</td><td>😻😻😻😻😻</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/maximum-xor-with-an-element-from-array/">1707.与数组中元素的最大异或值</a></td><td><a href="https://leetcode-cn.com/problems/maximum-xor-with-an-element-from-array/solution/gong-shui-san-xie-jie-zhe-ge-wen-ti-lai-lypqr/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr></tbody></table><p>😻</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 字典树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位运算</title>
      <link href="/2022/04/17/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
      <url>/2022/04/17/%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/single-number-ii/">137.只出现一次的数字 II</a></td><td><a href="https://leetcode-cn.com/problems/single-number-ii/solution/gong-shui-san-xie-yi-ti-san-jie-ha-xi-bi-fku8/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/reverse-bits/">190.颠倒二进制位</a></td><td><a href="https://leetcode-cn.com/problems/reverse-bits/solution/yi-ti-san-jie-dui-cheng-wei-zhu-wei-fen-ub1hi/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/number-of-1-bits/">191.位1的个数</a></td><td><a href="https://leetcode-cn.com/problems/number-of-1-bits/solution/yi-ti-san-jie-wei-shu-jian-cha-you-yi-to-av1r/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/power-of-two/">231. 2的幂</a></td><td><a href="https://leetcode-cn.com/problems/power-of-two/solution/gong-shui-san-xie-2-de-mi-by-ac_oier-qm6e/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/single-number-iii/">260.只出现一次的数字 III</a></td><td><a href="https://leetcode-cn.com/problems/single-number-iii/solution/gong-shui-san-xie-yi-ti-shuang-jie-ha-xi-zgi4/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/missing-number/">268.丢失的数字</a></td><td><a href="https://leetcode-cn.com/problems/missing-number/solution/gong-shui-san-xie-yi-ti-wu-jie-pai-xu-ji-te3s/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/maximum-product-of-word-lengths/">318.最大单词长度乘积</a></td><td><a href="https://leetcode-cn.com/problems/maximum-product-of-word-lengths/solution/gong-shui-san-xie-jian-dan-wei-yun-suan-cqtxq/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/counting-bits/">338.比特位计数</a></td><td><a href="https://leetcode-cn.com/problems/counting-bits/solution/po-su-jie-fa-dong-tai-gui-hua-jie-fa-by-vvail/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/power-of-four/">342.4的幂</a></td><td><a href="https://leetcode-cn.com/problems/power-of-four/solution/gong-shui-san-xie-zhuan-hua-wei-2-de-mi-y21lq/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/sum-of-two-integers/">371.两整数之和</a></td><td><a href="https://leetcode-cn.com/problems/sum-of-two-integers/solution/gong-shui-san-xie-shi-yong-wei-yun-suan-4hpb7/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/convert-a-number-to-hexadecimal/">405.数字转换为十六进制数</a></td><td><a href="https://leetcode-cn.com/problems/convert-a-number-to-hexadecimal/solution/gong-shui-san-xie-yi-ti-shuang-jie-jin-z-d93o/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/hamming-distance/">461.汉明距离</a></td><td><a href="https://leetcode-cn.com/problems/hamming-distance/solution/gong-shui-san-xie-tong-ji-liang-shu-er-j-987a/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/number-complement/">476.数字的补数</a></td><td><a href="https://leetcode-cn.com/problems/number-complement/solution/gong-shui-san-xie-yi-ti-shuang-jie-bian-wjl0y/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/total-hamming-distance/">477.汉明距离总和</a></td><td><a href="https://leetcode-cn.com/problems/total-hamming-distance/solution/gong-shui-san-xie-ying-yong-cheng-fa-yua-g21t/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/beautiful-arrangement/">526.优美的排列</a></td><td><a href="https://leetcode-cn.com/problems/beautiful-arrangement/solution/gong-shui-san-xie-xiang-jie-liang-chong-vgsia/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/binary-number-with-alternating-bits/">693.交替位二进制数</a></td><td><a href="https://leetcode-cn.com/problems/binary-number-with-alternating-bits/solution/gong-si-shui-by-ac_oier-zuw7/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/prime-number-of-set-bits-in-binary-representation/">762.二进制表示中质数个计算置位</a></td><td><a href="https://leetcode-cn.com/problems/prime-number-of-set-bits-in-binary-representation/solution/by-ac_oier-w50x/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/number-of-valid-words-for-each-puzzle/">1178.猜字谜</a></td><td><a href="https://leetcode-cn.com/problems/number-of-valid-words-for-each-puzzle/solution/xiang-jin-zhu-shi-xiang-jie-po-su-wei-yu-3cr2/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/count-good-meals/">1711.大餐计数</a></td><td><a href="https://leetcode-cn.com/problems/count-good-meals/solution/gong-shui-san-xie-xiang-jie-san-chong-gu-nn4f/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/count-number-of-maximum-bitwise-or-subsets/">2044.统计按位或能得到最大值的子集数目</a></td><td><a href="https://leetcode-cn.com/problems/count-number-of-maximum-bitwise-or-subsets/solution/by-ac_oier-dos6/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/">剑指Offer 15. 二进制中1的个数</a></td><td><a href="https://leetcode-cn.com/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/solution/gong-shui-san-xie-yi-ti-si-jie-wei-shu-j-g9w6/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>子串匹配</title>
      <link href="/2022/04/17/%E5%AD%90%E4%B8%B2%E5%8C%B9%E9%85%8D/"/>
      <url>/2022/04/17/%E5%AD%90%E4%B8%B2%E5%8C%B9%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/implement-strstr/">28.实现 strStr()</a></td><td><a href="https://leetcode-cn.com/problems/implement-strstr/solution/shua-chuan-lc-shuang-bai-po-su-jie-fa-km-tb86/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/repeated-string-match/">686.重复叠加字符串匹配</a></td><td><a href="https://leetcode-cn.com/problems/repeated-string-match/solution/gong-shui-san-xie-yi-ti-san-jie-qia-chan-3hbr/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 子串匹配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多路并归</title>
      <link href="/2022/04/17/%E5%A4%9A%E8%B7%AF%E5%B9%B6%E5%BD%92/"/>
      <url>/2022/04/17/%E5%A4%9A%E8%B7%AF%E5%B9%B6%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/">21.合并两个有序链表</a></td><td><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/solution/shua-chuan-lc-shuang-zhi-zhen-jie-fa-sha-b22z/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/ugly-number-ii/">264. 丑数II</a></td><td><a href="https://leetcode-cn.com/problems/ugly-number-ii/solution/gong-shui-san-xie-yi-ti-shuang-jie-you-x-3nvs/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/super-ugly-number/">313.超级丑数</a></td><td><a href="https://leetcode-cn.com/problems/super-ugly-number/solution/gong-shui-san-xie-yi-ti-shuang-jie-you-x-jyow/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/find-k-pairs-with-smallest-sums/">373.查找和最小的K对数字</a></td><td><a href="https://leetcode-cn.com/problems/find-k-pairs-with-smallest-sums/solution/gong-shui-san-xie-duo-lu-gui-bing-yun-yo-pgw5/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/k-th-smallest-prime-fraction/">786.第 K 个最小的素数分数</a></td><td><a href="https://leetcode-cn.com/problems/k-th-smallest-prime-fraction/solution/gong-shui-san-xie-yi-ti-shuang-jie-you-x-8ymk/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 多路归并 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>容斥原理</title>
      <link href="/2022/04/17/%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86/"/>
      <url>/2022/04/17/%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/repeated-dna-sequences/">187.重复的DNA序列</a></td><td><a href="https://leetcode-cn.com/problems/repeated-dna-sequences/solution/gong-shui-san-xie-yi-ti-shuang-jie-hua-d-30pg/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/range-sum-query-2d-immutable/">304.二维区域和检索 - 矩阵不可变</a></td><td><a href="https://leetcode-cn.com/problems/range-sum-query-2d-immutable/solution/xia-ci-ru-he-zai-30-miao-nei-zuo-chu-lai-ptlo/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/range-sum-query-immutable/">303.区域和检索 - 数组不可变</a></td><td><a href="https://leetcode-cn.com/problems/range-sum-query-immutable/solution/sha-shi-qian-zhui-he-ya-tu-jie-qian-zhui-0rla/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/range-sum-query-mutable/">307.区域和检索 - 数组可修改</a></td><td><a href="https://leetcode-cn.com/problems/range-sum-query-mutable/solution/guan-yu-ge-lei-qu-jian-he-wen-ti-ru-he-x-41hv/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/russian-doll-envelopes/">354.俄罗斯套娃信封问题</a></td><td><a href="https://leetcode-cn.com/problems/russian-doll-envelopes/solution/zui-chang-shang-sheng-zi-xu-lie-bian-xin-6s8d/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/count-numbers-with-unique-digits/">357.统计各位数字都不同的数字个数</a></td><td><a href="https://leetcode-cn.com/problems/count-numbers-with-unique-digits/solution/by-ac_oier-6tfl/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/max-sum-of-rectangle-no-larger-than-k/">363.矩形区域不超过 K 的最大数值和</a></td><td><a href="https://leetcode-cn.com/problems/max-sum-of-rectangle-no-larger-than-k/solution/gong-shui-san-xie-you-hua-mei-ju-de-ji-b-dh8s/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/path-sum-iii/">437.路径总和 III</a></td><td><a href="https://leetcode-cn.com/problems/path-sum-iii/solution/gong-shui-san-xie-yi-ti-shuang-jie-dfs-q-usa7/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/continuous-subarray-sum/">523.连续的子数组和</a></td><td><a href="https://leetcode-cn.com/problems/continuous-subarray-sum/solution/gong-shui-san-xie-tuo-zhan-wei-qiu-fang-1juse/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/contiguous-array/">525.连续数组</a></td><td><a href="https://leetcode-cn.com/problems/contiguous-array/solution/gong-shui-san-xie-qian-zhui-he-ha-xi-bia-q400/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/random-pick-with-weight/">528.按权重随机选择</a></td><td><a href="https://leetcode-cn.com/problems/random-pick-with-weight/solution/gong-shui-san-xie-yi-ti-shuang-jie-qian-8bx50/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/non-negative-integers-without-consecutive-ones/">600.不含连续1的非负整数</a></td><td><a href="https://leetcode-cn.com/problems/non-negative-integers-without-consecutive-ones/solution/gong-shui-san-xie-jing-dian-shu-wei-dp-y-mh92/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/k-inverse-pairs-array/">629.K个逆序对数组</a></td><td><a href="https://leetcode-cn.com/problems/k-inverse-pairs-array/solution/gong-shui-san-xie-yi-dao-xu-lie-dp-zhuan-tm01/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/image-smoother/">661.图片平滑器</a></td><td><a href="https://leetcode-cn.com/problems/image-smoother/solution/by-ac_oier-nn3v/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/number-of-longest-increasing-subsequence/">673.最长递增子序列的个数</a></td><td><a href="https://leetcode-cn.com/problems/number-of-longest-increasing-subsequence/solution/gong-shui-san-xie-lis-de-fang-an-shu-wen-obuz/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/maximum-sum-of-3-non-overlapping-subarrays/">689.三个无重叠子数组的最大和</a></td><td><a href="https://leetcode-cn.com/problems/maximum-sum-of-3-non-overlapping-subarrays/solution/gong-shui-san-xie-jie-he-qian-zhui-he-de-ancx/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/find-pivot-index/">724.寻找数组的中心下标</a></td><td><a href="https://leetcode-cn.com/problems/find-pivot-index/solution/shi-yong-shao-bing-ji-qiao-liang-bian-qi-vkju/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/friends-of-appropriate-ages/">825.适龄的朋友</a></td><td><a href="https://leetcode-cn.com/problems/friends-of-appropriate-ages/solution/gong-shui-san-xie-yi-ti-shuang-jie-pai-x-maa8/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/binary-subarrays-with-sum/">930.和相同的二元子数组</a></td><td><a href="https://leetcode-cn.com/problems/binary-subarrays-with-sum/solution/gong-shui-san-xie-yi-ti-shuang-jie-qian-hfoc0/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/max-consecutive-ones-iii/">1004.最大连续1的个数 III</a></td><td><a href="https://leetcode-cn.com/problems/max-consecutive-ones-iii/solution/san-chong-jie-fa-cong-dong-tai-gui-hua-d-gxks/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/number-of-submatrices-that-sum-to-target/">1074.元素和为目标值的子矩阵数量</a></td><td><a href="https://leetcode-cn.com/problems/number-of-submatrices-that-sum-to-target/solution/gong-shui-san-xie-you-hua-mei-ju-de-ji-b-uttw/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/numbers-with-repeated-digits/">1012.至少有 1 位重复的数字</a></td><td><a href="https://leetcode-cn.com/problems/numbers-with-repeated-digits/solution/by-ac_oier-2szj/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/day-of-the-year/">1154.一年中的第几天</a></td><td><a href="https://leetcode-cn.com/problems/day-of-the-year/solution/gong-shui-san-xie-jian-dan-qian-zhui-he-lwo2g/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/get-equal-substrings-within-budget/">1208.尽可能使字符串相等</a></td><td><a href="https://leetcode-cn.com/problems/get-equal-substrings-within-budget/solution/ni-bu-ke-neng-kan-bu-dong-de-qian-zhui-h-u4l1/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/xor-queries-of-a-subarray/">1310.子数组异或查询</a></td><td><a href="https://leetcode-cn.com/problems/xor-queries-of-a-subarray/solution/gong-shui-san-xie-yi-ti-shuang-jie-shu-z-rcgu/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/count-triplets-that-can-form-two-arrays-of-equal-xor/">1442.形成两个异或相等数组的三元组数目</a></td><td><a href="https://leetcode-cn.com/problems/count-triplets-that-can-form-two-arrays-of-equal-xor/solution/gong-shui-san-xie-xiang-jie-shi-yong-qia-7gzm/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/running-sum-of-1d-array/">1480.一维数组的动态和</a></td><td><a href="https://leetcode-cn.com/problems/running-sum-of-1d-array/solution/gong-shui-san-xie-yi-wei-qian-zhui-he-mo-g8hn/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/sum-of-all-odd-length-subarrays/">1588.所有奇数长度子数组的和</a></td><td><a href="https://leetcode-cn.com/problems/sum-of-all-odd-length-subarrays/solution/gong-shui-san-xie-yi-ti-shuang-jie-qian-18jq3/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/find-kth-largest-xor-coordinate-value/">1738.找出第 K 大的异或坐标值</a></td><td><a href="https://leetcode-cn.com/problems/find-kth-largest-xor-coordinate-value/solution/gong-shui-san-xie-xiang-jie-li-yong-er-w-ai0d/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/can-you-eat-your-favorite-candy-on-your-favorite-day/">1744.你能在你最喜欢的那天吃到你最喜欢的糖果吗？</a></td><td><a href="https://leetcode-cn.com/problems/can-you-eat-your-favorite-candy-on-your-favorite-day/solution/gong-shui-san-xie-qian-zhui-he-qiu-jie-c-b38y/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/maximum-absolute-sum-of-any-subarray/">1749.任意子数组和的绝对值的最大值</a></td><td><a href="https://leetcode-cn.com/problems/maximum-absolute-sum-of-any-subarray/solution/xiang-jie-qian-zhui-he-jie-fa-fen-xi-si-yibby/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/frequency-of-the-most-frequent-element/">1838.最高频元素的频数</a></td><td><a href="https://leetcode-cn.com/problems/frequency-of-the-most-frequent-element/solution/gong-shui-san-xie-cong-mei-ju-dao-pai-xu-kxnk/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/check-if-all-the-integers-in-a-range-are-covered/">1893.检查是否区域内所有整数都被覆盖</a></td><td><a href="https://leetcode-cn.com/problems/check-if-all-the-integers-in-a-range-are-covered/solution/gong-shui-san-xie-yi-ti-shuang-jie-mo-ni-j83x/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/find-the-student-that-will-replace-the-chalk/">1894.找到需要补充粉笔的学生编号</a></td><td><a href="https://leetcode-cn.com/problems/find-the-student-that-will-replace-the-chalk/solution/gong-shui-san-xie-yi-ti-shuang-jie-qian-kpqsk/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/plates-between-candles/">2055.蜡烛之间的盘子</a></td><td><a href="https://leetcode-cn.com/problems/plates-between-candles/solution/gong-shui-san-xie-er-fen-qian-zhui-he-yu-0qt0/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/find-good-days-to-rob-the-bank/">2100.适合打劫银行的日子</a></td><td><a href="https://leetcode-cn.com/problems/find-good-days-to-rob-the-bank/solution/gong-shui-san-xie-qian-zhui-he-yun-yong-gf604/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 容斥原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学</title>
      <link href="/2022/04/17/%E6%95%B0%E5%AD%A6/"/>
      <url>/2022/04/17/%E6%95%B0%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/zigzag-conversion/">6. Z字形变换</a></td><td><a href="https://leetcode-cn.com/problems/zigzag-conversion/solution/shua-chuan-lc-zhi-guan-gui-lu-jie-fa-shu-8226/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/reverse-integer/">7.整数反转</a></td><td><a href="https://leetcode-cn.com/problems/reverse-integer/solution/shua-chuan-lc-bu-wan-mei-jie-fa-wan-mei-919rd/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/palindrome-number/">9.回文数</a></td><td><a href="https://leetcode-cn.com/problems/palindrome-number/solution/shua-chuan-lc-zi-fu-chuan-fei-zi-fu-chua-e8l0/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/divide-two-integers/">29.两数相除</a></td><td><a href="https://leetcode-cn.com/problems/divide-two-integers/solution/shua-chuan-lc-er-fen-bei-zeng-cheng-fa-j-m73b">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/next-permutation/">31.下一个排列</a></td><td><a href="https://leetcode-cn.com/problems/next-permutation/solution/miao-dong-xi-lie-100-cong-xia-yi-ge-pai-gog8j/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/trapping-rain-water/">42.接雨水</a></td><td><a href="https://leetcode-cn.com/problems/trapping-rain-water/solution/po-su-jie-fa-on2-cha-zhao-you-hua-on-dan-iu44/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/multiply-strings/">43.字符串相乘</a></td><td><a href="https://leetcode-cn.com/problems/multiply-strings/solution/zhi-yao-ni-hui-shou-suan-cheng-fa-zhe-ti-ainl/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/max-points-on-a-line/">149.直线上最多的点数</a></td><td><a href="https://leetcode-cn.com/problems/max-points-on-a-line/solution/gong-shui-san-xie-liang-chong-mei-ju-zhi-u44s/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/fraction-to-recurring-decimal/">166.分数到小数</a></td><td><a href="https://leetcode-cn.com/problems/fraction-to-recurring-decimal/solution/gong-shui-san-xie-mo-ni-shu-shi-ji-suan-kq8c4/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/factorial-trailing-zeroes/">172.阶乘后的零</a></td><td><a href="https://leetcode-cn.com/problems/factorial-trailing-zeroes/solution/by-ac_oier-1y6w/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/rectangle-area/">223.矩形面积</a></td><td><a href="https://leetcode-cn.com/problems/rectangle-area/solution/gong-shui-san-xie-yun-yong-rong-chi-yuan-hzit/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/power-of-two/">231. 2的幂</a></td><td><a href="https://leetcode-cn.com/problems/power-of-two/solution/gong-shui-san-xie-2-de-mi-by-ac_oier-qm6e/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/number-of-digit-one/">233.数字 1 的个数</a></td><td><a href="https://leetcode-cn.com/problems/number-of-digit-one/solution/gong-shui-san-xie-jiang-shu-wei-dp-wen-t-c9oi/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/add-digits/">258.各位相加</a></td><td><a href="https://leetcode-cn.com/problems/add-digits/solution/gong-shui-san-xie-yi-ti-shuang-jie-mo-ni-zdml/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/ugly-number/">263.丑数</a></td><td><a href="https://leetcode-cn.com/problems/ugly-number/solution/gong-shui-san-xie-jian-dan-de-fen-qing-k-dlvg/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/missing-number/">268.丢失的数字</a></td><td><a href="https://leetcode-cn.com/problems/missing-number/solution/gong-shui-san-xie-yi-ti-wu-jie-pai-xu-ji-te3s/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/expression-add-operators/">282.给表达式添加运算符</a></td><td><a href="https://leetcode-cn.com/problems/expression-add-operators/solution/gong-shui-san-xie-hui-su-suan-fa-yun-yon-nl9z/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/super-ugly-number/">313.超级丑数</a></td><td><a href="https://leetcode-cn.com/problems/super-ugly-number/solution/gong-shui-san-xie-yi-ti-shuang-jie-you-x-jyow/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/bulb-switcher/">319.灯泡开关</a></td><td><a href="https://leetcode-cn.com/problems/bulb-switcher/solution/gong-shui-san-xie-jing-dian-shu-lun-tui-upnnb/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/power-of-three/">326.3的幂</a></td><td><a href="https://leetcode-cn.com/problems/power-of-three/solution/gong-shui-san-xie-yi-ti-san-jie-shu-xue-8oiip/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/power-of-four/">342.4的幂</a></td><td><a href="https://leetcode-cn.com/problems/power-of-four/solution/gong-shui-san-xie-zhuan-hua-wei-2-de-mi-y21lq/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/count-numbers-with-unique-digits/">357.统计各位数字都不同的数字个数</a></td><td><a href="https://leetcode-cn.com/problems/count-numbers-with-unique-digits/solution/by-ac_oier-6tfl/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/valid-perfect-square/">367.有效的完全平方数</a></td><td><a href="https://leetcode-cn.com/problems/valid-perfect-square/solution/gong-shui-san-xie-yi-ti-shuang-jie-er-fe-g5el/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/super-pow/">372.超级次方</a></td><td><a href="https://leetcode-cn.com/problems/super-pow/solution/gong-shui-san-xie-di-gui-kuai-su-mi-ying-yx1j/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/elimination-game/">390.消除游戏</a></td><td><a href="https://leetcode-cn.com/problems/elimination-game/solution/gong-shui-san-xie-yue-se-fu-huan-yun-yon-x60m/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/nth-digit/">400. 第 N位数字</a></td><td><a href="https://leetcode-cn.com/problems/nth-digit/solution/gong-shui-san-xie-jian-dan-mo-ni-ti-by-a-w5wl/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/k-th-smallest-in-lexicographical-order/">440.字典序的第K小数字</a></td><td><a href="https://leetcode-cn.com/problems/k-th-smallest-in-lexicographical-order/solution/by-ac_oier-m3zl/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/arranging-coins/">441.排列硬币</a></td><td><a href="https://leetcode-cn.com/problems/arranging-coins/solution/gong-shui-san-xie-yi-ti-shuang-jie-shu-x-sv9o/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/arithmetic-slices-ii-subsequence/">446.等差数列划分 II - 子序列</a></td><td><a href="https://leetcode-cn.com/problems/arithmetic-slices-ii-subsequence/solution/gong-shui-san-xie-xiang-jie-ru-he-fen-xi-ykvk/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/minimum-moves-to-equal-array-elements/">453.最小操作次数使数组元素相等</a></td><td><a href="https://leetcode-cn.com/problems/minimum-moves-to-equal-array-elements/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-tt3zu/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/poor-pigs/">458.可怜的小猪</a></td><td><a href="https://leetcode-cn.com/problems/poor-pigs/solution/gong-shui-san-xie-jin-zhi-cai-xiang-xian-69fl/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/implement-rand10-using-rand7/">470.用 Rand7() 实现 Rand10()</a></td><td><a href="https://leetcode-cn.com/problems/implement-rand10-using-rand7/solution/gong-shui-san-xie-k-jin-zhi-zhu-wei-shen-zmd4/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/total-hamming-distance/">477.汉明距离总和</a></td><td><a href="https://leetcode-cn.com/problems/total-hamming-distance/solution/gong-shui-san-xie-ying-yong-cheng-fa-yua-g21t/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/largest-palindrome-product/">479.最大回文数乘积</a></td><td><a href="https://leetcode-cn.com/problems/largest-palindrome-product/solution/by-ac_oier-t8j7/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/smallest-good-base/">483.最小好进制</a></td><td><a href="https://leetcode-cn.com/problems/smallest-good-base/solution/gong-shui-san-xie-xiang-jie-ru-he-fen-xi-r94g/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/perfect-number/">507.完美数</a></td><td><a href="https://leetcode-cn.com/problems/perfect-number/solution/gong-shui-san-xie-jian-dan-mo-ni-tong-ji-e6jk/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/continuous-subarray-sum/">523.连续的子数组和</a></td><td><a href="https://leetcode-cn.com/problems/continuous-subarray-sum/solution/gong-shui-san-xie-tuo-zhan-wei-qiu-fang-1juse/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/student-attendance-record-ii/">552.学生出勤记录 II</a></td><td><a href="https://leetcode-cn.com/problems/student-attendance-record-ii/solution/gong-shui-san-xie-yi-ti-san-jie-ji-yi-hu-fdfx/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/optimal-division/">553.最优除法</a></td><td><a href="https://leetcode-cn.com/problems/optimal-division/solution/gong-shui-san-xie-shu-xue-lei-tan-xin-yu-61sq/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/sum-of-square-numbers/">633.平方数之和</a></td><td><a href="https://leetcode-cn.com/problems/sum-of-square-numbers/solution/gong-shui-san-xie-yi-ti-san-jie-mei-ju-s-7qi5/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/set-mismatch/">645.错误的集合</a></td><td><a href="https://leetcode-cn.com/problems/set-mismatch/solution/gong-shui-san-xie-yi-ti-san-jie-ji-shu-s-vnr9/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/2-keys-keyboard/">650.只有两个键的键盘</a></td><td><a href="https://leetcode-cn.com/problems/2-keys-keyboard/solution/gong-shui-san-xie-yi-ti-san-jie-dong-tai-f035/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/reaching-points/">780.到达终点</a></td><td><a href="https://leetcode-cn.com/problems/reaching-points/solution/by-ac_oier-hw11/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/escape-the-ghosts/">789.逃脱阻碍者</a></td><td><a href="https://leetcode-cn.com/problems/escape-the-ghosts/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-w69gr/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/chalkboard-xor-game/">810.黑板异或游戏</a></td><td><a href="https://leetcode-cn.com/problems/chalkboard-xor-game/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-ges7k/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/reordered-power-of-2/">869.重新排序得到 2 的幂</a></td><td><a href="https://leetcode-cn.com/problems/reordered-power-of-2/solution/gong-shui-san-xie-yi-ti-shuang-jie-dfs-c-3s1e/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/profitable-schemes/">879.盈利计划</a></td><td><a href="https://leetcode-cn.com/problems/profitable-schemes/solution/gong-shui-san-xie-te-shu-duo-wei-fei-yon-7su9/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/clumsy-factorial/">1006.笨阶乘</a></td><td><a href="https://leetcode-cn.com/problems/clumsy-factorial/solution/gong-shui-san-xie-tong-yong-biao-da-shi-nngfp/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/last-stone-weight-ii/">1049.最后一块石头的重量 II</a></td><td><a href="https://leetcode-cn.com/problems/last-stone-weight-ii/solution/gong-shui-san-xie-xiang-jie-wei-he-neng-jgxik/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/path-in-zigzag-labelled-binary-tree/">1104.二叉树寻路</a></td><td><a href="https://leetcode-cn.com/problems/path-in-zigzag-labelled-binary-tree/solution/gong-shui-san-xie-yi-ti-shuang-jie-mo-ni-rw2d/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/n-th-tribonacci-number/">1137. 第N 个泰波那契数</a></td><td><a href="https://leetcode-cn.com/problems/n-th-tribonacci-number/solution/gong-shui-san-xie-yi-ti-si-jie-die-dai-d-m1ie/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/xor-queries-of-a-subarray/">1310.子数组异或查询</a></td><td><a href="https://leetcode-cn.com/problems/xor-queries-of-a-subarray/solution/gong-shui-san-xie-yi-ti-shuang-jie-shu-z-rcgu/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/number-of-steps-to-reduce-a-number-to-zero/">1342.将数字变成 0 的操作次数</a></td><td><a href="https://leetcode-cn.com/problems/number-of-steps-to-reduce-a-number-to-zero/solution/gong-shui-san-xie-note-bie-pian-yi-ti-sh-85fb/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/count-triplets-that-can-form-two-arrays-of-equal-xor/">1442.形成两个异或相等数组的三元组数目</a></td><td><a href="https://leetcode-cn.com/problems/count-triplets-that-can-form-two-arrays-of-equal-xor/solution/gong-shui-san-xie-xiang-jie-shi-yong-qia-7gzm/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/simplified-fractions/">1447.最简分数</a></td><td><a href="https://leetcode-cn.com/problems/simplified-fractions/solution/gong-shui-san-xie-jian-dan-shu-lun-yun-y-wma5/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/xor-operation-in-an-array/">1486.数组异或操作</a></td><td><a href="https://leetcode-cn.com/problems/xor-operation-in-an-array/solution/gong-shui-san-xie-yi-ti-shuang-jie-mo-ni-dggg/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/water-bottles/">1518.换酒问题</a></td><td><a href="https://leetcode-cn.com/problems/water-bottles/solution/gong-shui-san-xie-yi-ti-shuang-jie-ji-sh-7yyo/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/sum-of-all-odd-length-subarrays/">1588.所有奇数长度子数组的和</a></td><td><a href="https://leetcode-cn.com/problems/sum-of-all-odd-length-subarrays/solution/gong-shui-san-xie-yi-ti-shuang-jie-qian-18jq3/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/maximum-number-of-visible-points/">1610.可见点的最大数目</a></td><td><a href="https://leetcode-cn.com/problems/maximum-number-of-visible-points/solution/gong-shui-san-xie-qiu-ji-jiao-ji-he-ti-b-0bid/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/calculate-money-in-leetcode-bank/">1716.计算力扣银行的钱</a></td><td><a href="https://leetcode-cn.com/problems/calculate-money-in-leetcode-bank/solution/gong-shui-san-xie-jian-dan-mo-ni-ti-by-a-ifit/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/decode-xored-array/">1720.解码异或后的数组</a></td><td><a href="https://leetcode-cn.com/problems/decode-xored-array/solution/gong-shui-san-xie-li-yong-yi-huo-xing-zh-p1bi/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/decode-xored-permutation/">1734.解码异或后的排列</a></td><td><a href="https://leetcode-cn.com/problems/decode-xored-permutation/solution/gong-shui-san-xie-note-bie-pian-li-yong-zeh6o/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/find-kth-largest-xor-coordinate-value/">1738.找出第 K 大的异或坐标值</a></td><td><a href="https://leetcode-cn.com/problems/find-kth-largest-xor-coordinate-value/solution/gong-shui-san-xie-xiang-jie-li-yong-er-w-ai0d/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/group-anagrams-lcci/">面试题10.02. 变位词组</a></td><td><a href="https://leetcode-cn.com/problems/group-anagrams-lcci/solution/gong-shui-san-xie-tong-ji-bian-wei-ci-de-0iqe/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分治</title>
      <link href="/2022/04/17/%E5%88%86%E6%B2%BB/"/>
      <url>/2022/04/17/%E5%88%86%E6%B2%BB/</url>
      
        <content type="html"><![CDATA[<table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/">4.寻找两个正序数组的中位数</a></td><td><a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/shua-chuan-lc-po-su-jie-fa-fen-zhi-jie-f-wtu2/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序</title>
      <link href="/2022/04/17/%E6%8E%92%E5%BA%8F/"/>
      <url>/2022/04/17/%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/first-missing-positive/">41.缺失的第一个正数</a></td><td><a href="https://leetcode-cn.com/problems/first-missing-positive/solution/yan-ge-on-de-tong-pai-xu-si-lu-yi-ji-wei-wm8d/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/contains-duplicate-iii/">220.存在重复元素 III</a></td><td><a href="https://leetcode-cn.com/problems/contains-duplicate-iii/solution/gong-shui-san-xie-yi-ti-shuang-jie-hua-d-dlnv/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/missing-number/">268.丢失的数字</a></td><td><a href="https://leetcode-cn.com/problems/missing-number/solution/gong-shui-san-xie-yi-ti-wu-jie-pai-xu-ji-te3s/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/third-maximum-number/">414.第三大的数</a></td><td><a href="https://leetcode-cn.com/problems/third-maximum-number/solution/gong-shui-san-xie-yi-ti-shuang-jie-pai-x-pmln/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/find-all-numbers-disappeared-in-an-array/">448.找到所有数组中消失的数字</a></td><td><a href="https://leetcode-cn.com/problems/find-all-numbers-disappeared-in-an-array/solution/li-yong-tong-pai-xu-de-si-lu-ni-huan-ke-e3t4w/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/heaters/">475.供暖器</a></td><td><a href="https://leetcode-cn.com/problems/heaters/solution/gong-shui-san-xie-er-fen-shuang-zhi-zhen-mys4/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/relative-ranks/">506.相对名次</a></td><td><a href="https://leetcode-cn.com/problems/relative-ranks/solution/gong-shui-san-xie-jian-dan-pai-xu-mo-ni-cmuzj/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/longest-word-in-dictionary-through-deleting/">524.通过删除字母匹配到字典里最长单词</a></td><td><a href="https://leetcode-cn.com/problems/longest-word-in-dictionary-through-deleting/solution/gong-shui-san-xie-xiang-jie-pai-xu-shuan-qi20/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/minimum-time-difference/">539.最小时间差</a></td><td><a href="https://leetcode-cn.com/problems/minimum-time-difference/solution/gong-shui-san-xie-jian-dan-mo-ni-ti-by-a-eygg/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/shortest-unsorted-continuous-subarray/">581.最短无序连续子数组</a></td><td><a href="https://leetcode-cn.com/problems/shortest-unsorted-continuous-subarray/solution/gong-shui-san-xie-yi-ti-shuang-jie-shuan-e1le/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/valid-triangle-number/">611.有效三角形的个数</a></td><td><a href="https://leetcode-cn.com/problems/valid-triangle-number/solution/gong-shui-san-xie-yi-ti-san-jie-jian-dan-y1we/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/set-mismatch/">645.错误的集合</a></td><td><a href="https://leetcode-cn.com/problems/set-mismatch/solution/gong-shui-san-xie-yi-ti-san-jie-ji-shu-s-vnr9/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/kth-largest-element-in-a-stream/">703.数据流中的第 K 大元素</a></td><td><a href="https://leetcode-cn.com/problems/kth-largest-element-in-a-stream/solution/jian-da-ti-de-duo-chong-jie-fa-mou-pao-p-d1qi/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/friends-of-appropriate-ages/">825.适龄的朋友</a></td><td><a href="https://leetcode-cn.com/problems/friends-of-appropriate-ages/solution/gong-shui-san-xie-yi-ti-shuang-jie-pai-x-maa8/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/array-of-doubled-pairs/">954.二倍数对数组</a></td><td><a href="https://leetcode-cn.com/problems/array-of-doubled-pairs/solution/by-ac_oier-d1z7/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/pancake-sorting/">969.煎饼排序</a></td><td><a href="https://leetcode-cn.com/problems/pancake-sorting/solution/gong-shui-san-xie-mou-pao-pai-xu-yun-yon-c0mn/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/vertical-order-traversal-of-a-binary-tree/">987.二叉树的垂序遍历</a></td><td><a href="https://leetcode-cn.com/problems/vertical-order-traversal-of-a-binary-tree/solution/gong-shui-san-xie-yi-ti-shuang-jie-dfs-h-wfm3/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/maximum-ice-cream-bars/">1833.雪糕的最大数量</a></td><td><a href="https://leetcode-cn.com/problems/maximum-ice-cream-bars/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-yrhjx/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/single-threaded-cpu/">1834.单线程 CPU</a></td><td><a href="https://leetcode-cn.com/problems/single-threaded-cpu/solution/gong-shui-san-xie-shu-ju-jie-gou-yun-yon-1qk0/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/frequency-of-the-most-frequent-element/">1838.最高频元素的频数</a></td><td><a href="https://leetcode-cn.com/problems/frequency-of-the-most-frequent-element/solution/gong-shui-san-xie-cong-mei-ju-dao-pai-xu-kxnk/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/group-anagrams-lcci/">面试题10.02. 变位词组</a></td><td><a href="https://leetcode-cn.com/problems/group-anagrams-lcci/solution/gong-shui-san-xie-tong-ji-bian-wei-ci-de-0iqe/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/smallest-k-lcci/">面试题17.14. 最小K个数</a></td><td><a href="https://leetcode-cn.com/problems/smallest-k-lcci/solution/gong-shui-san-xie-yi-ti-si-jie-you-xian-yy5k5/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区间求和</title>
      <link href="/2022/04/17/%E5%8C%BA%E9%97%B4%E6%B1%82%E5%92%8C/"/>
      <url>/2022/04/17/%E5%8C%BA%E9%97%B4%E6%B1%82%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="前缀和">前缀和</h1><table><colgroup><col style="width: 37%"><col style="width: 37%"><col style="width: 2%"><col style="width: 22%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/repeated-dna-sequences/">187.重复的DNA序列</a></td><td><a href="https://leetcode-cn.com/problems/repeated-dna-sequences/solution/gong-shui-san-xie-yi-ti-shuang-jie-hua-d-30pg/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/range-sum-query-2d-immutable/">304.二维区域和检索 - 矩阵不可变</a></td><td><a href="https://leetcode-cn.com/problems/range-sum-query-2d-immutable/solution/xia-ci-ru-he-zai-30-miao-nei-zuo-chu-lai-ptlo/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/range-sum-query-immutable/">303.区域和检索 - 数组不可变</a></td><td><a href="https://leetcode-cn.com/problems/range-sum-query-immutable/solution/sha-shi-qian-zhui-he-ya-tu-jie-qian-zhui-0rla/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/max-sum-of-rectangle-no-larger-than-k/">363.矩形区域不超过 K 的最大数值和</a></td><td><a href="https://leetcode-cn.com/problems/max-sum-of-rectangle-no-larger-than-k/solution/gong-shui-san-xie-you-hua-mei-ju-de-ji-b-dh8s/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/construct-quad-tree/">427.建立四叉树</a></td><td><a href="https://leetcode-cn.com/problems/construct-quad-tree/solution/di-gui-by-dega-vu-ny88/">Freedom的题解</a></td><td>中等</td><td>😻😻😻😻</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/path-sum-iii/">437.路径总和 III</a></td><td><a href="https://leetcode-cn.com/problems/path-sum-iii/solution/gong-shui-san-xie-yi-ti-shuang-jie-dfs-q-usa7/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/continuous-subarray-sum/">523.连续的子数组和</a></td><td><a href="https://leetcode-cn.com/problems/continuous-subarray-sum/solution/gong-shui-san-xie-tuo-zhan-wei-qiu-fang-1juse/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/contiguous-array/">525.连续数组</a></td><td><a href="https://leetcode-cn.com/problems/contiguous-array/solution/gong-shui-san-xie-qian-zhui-he-ha-xi-bia-q400/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/random-pick-with-weight/">528.按权重随机选择</a></td><td><a href="https://leetcode-cn.com/problems/random-pick-with-weight/solution/gong-shui-san-xie-yi-ti-shuang-jie-qian-8bx50/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/k-inverse-pairs-array/">629.K个逆序对数组</a></td><td><a href="https://leetcode-cn.com/problems/k-inverse-pairs-array/solution/gong-shui-san-xie-yi-dao-xu-lie-dp-zhuan-tm01/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/image-smoother/">661.图片平滑器</a></td><td><a href="https://leetcode-cn.com/problems/image-smoother/solution/by-ac_oier-nn3v/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/maximum-sum-of-3-non-overlapping-subarrays/">689.三个无重叠子数组的最大和</a></td><td><a href="https://leetcode-cn.com/problems/maximum-sum-of-3-non-overlapping-subarrays/solution/gong-shui-san-xie-jie-he-qian-zhui-he-de-ancx/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/find-pivot-index/">724.寻找数组的中心下标</a></td><td><a href="https://leetcode-cn.com/problems/find-pivot-index/solution/shi-yong-shao-bing-ji-qiao-liang-bian-qi-vkju/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/friends-of-appropriate-ages/">825.适龄的朋友</a></td><td><a href="https://leetcode-cn.com/problems/friends-of-appropriate-ages/solution/gong-shui-san-xie-yi-ti-shuang-jie-pai-x-maa8/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/binary-subarrays-with-sum/">930.和相同的二元子数组</a></td><td><a href="https://leetcode-cn.com/problems/binary-subarrays-with-sum/solution/gong-shui-san-xie-yi-ti-shuang-jie-qian-hfoc0/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/max-consecutive-ones-iii/">1004.最大连续1的个数 III</a></td><td><a href="https://leetcode-cn.com/problems/max-consecutive-ones-iii/solution/san-chong-jie-fa-cong-dong-tai-gui-hua-d-gxks/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/number-of-submatrices-that-sum-to-target/">1074.元素和为目标值的子矩阵数量</a></td><td><a href="https://leetcode-cn.com/problems/number-of-submatrices-that-sum-to-target/solution/gong-shui-san-xie-you-hua-mei-ju-de-ji-b-uttw/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/day-of-the-year/">1154.一年中的第几天</a></td><td><a href="https://leetcode-cn.com/problems/day-of-the-year/solution/gong-shui-san-xie-jian-dan-qian-zhui-he-lwo2g/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/get-equal-substrings-within-budget/">1208.尽可能使字符串相等</a></td><td><a href="https://leetcode-cn.com/problems/get-equal-substrings-within-budget/solution/ni-bu-ke-neng-kan-bu-dong-de-qian-zhui-h-u4l1/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/xor-queries-of-a-subarray/">1310.子数组异或查询</a></td><td><a href="https://leetcode-cn.com/problems/xor-queries-of-a-subarray/solution/gong-shui-san-xie-yi-ti-shuang-jie-shu-z-rcgu/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/count-triplets-that-can-form-two-arrays-of-equal-xor/">1442.形成两个异或相等数组的三元组数目</a></td><td><a href="https://leetcode-cn.com/problems/count-triplets-that-can-form-two-arrays-of-equal-xor/solution/gong-shui-san-xie-xiang-jie-shi-yong-qia-7gzm/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/running-sum-of-1d-array/">1480.一维数组的动态和</a></td><td><a href="https://leetcode-cn.com/problems/running-sum-of-1d-array/solution/gong-shui-san-xie-yi-wei-qian-zhui-he-mo-g8hn/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/sum-of-all-odd-length-subarrays/">1588.所有奇数长度子数组的和</a></td><td><a href="https://leetcode-cn.com/problems/sum-of-all-odd-length-subarrays/solution/gong-shui-san-xie-yi-ti-shuang-jie-qian-18jq3/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/find-kth-largest-xor-coordinate-value/">1738.找出第 K 大的异或坐标值</a></td><td><a href="https://leetcode-cn.com/problems/find-kth-largest-xor-coordinate-value/solution/gong-shui-san-xie-xiang-jie-li-yong-er-w-ai0d/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/can-you-eat-your-favorite-candy-on-your-favorite-day/">1744.你能在你最喜欢的那天吃到你最喜欢的糖果吗？</a></td><td><a href="https://leetcode-cn.com/problems/can-you-eat-your-favorite-candy-on-your-favorite-day/solution/gong-shui-san-xie-qian-zhui-he-qiu-jie-c-b38y/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/maximum-absolute-sum-of-any-subarray/">1749.任意子数组和的绝对值的最大值</a></td><td><a href="https://leetcode-cn.com/problems/maximum-absolute-sum-of-any-subarray/solution/xiang-jie-qian-zhui-he-jie-fa-fen-xi-si-yibby/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/frequency-of-the-most-frequent-element/">1838.最高频元素的频数</a></td><td><a href="https://leetcode-cn.com/problems/frequency-of-the-most-frequent-element/solution/gong-shui-san-xie-cong-mei-ju-dao-pai-xu-kxnk/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/find-the-student-that-will-replace-the-chalk/">1894.找到需要补充粉笔的学生编号</a></td><td><a href="https://leetcode-cn.com/problems/find-the-student-that-will-replace-the-chalk/solution/gong-shui-san-xie-yi-ti-shuang-jie-qian-kpqsk/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/plates-between-candles/">2055.蜡烛之间的盘子</a></td><td><a href="https://leetcode-cn.com/problems/plates-between-candles/solution/gong-shui-san-xie-er-fen-qian-zhui-he-yu-0qt0/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/find-good-days-to-rob-the-bank/">2100.适合打劫银行的日子</a></td><td><a href="https://leetcode-cn.com/problems/find-good-days-to-rob-the-bank/solution/gong-shui-san-xie-qian-zhui-he-yun-yong-gf604/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr></tbody></table><h1 id="差分">差分</h1><table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/smallest-rotation-with-highest-score/">798.得分最高的最小轮调</a></td><td><a href="https://leetcode-cn.com/problems/smallest-rotation-with-highest-score/solution/gong-shui-san-xie-shang-xia-jie-fen-xi-c-p6kh/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/minimum-number-of-k-consecutive-bit-flips/">995.K 连续位的最小翻转次数</a></td><td><a href="https://leetcode-cn.com/problems/minimum-number-of-k-consecutive-bit-flips/solution/po-su-tan-xin-jie-fa-yu-tan-xin-chai-fen-4lyy/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/corporate-flight-bookings/">1109.航班预订统计</a></td><td><a href="https://leetcode-cn.com/problems/corporate-flight-bookings/solution/gong-shui-san-xie-yi-ti-shuang-jie-chai-fm1ef/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr></tbody></table><h1 id="树状数组">树状数组</h1><table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/range-sum-query-mutable/">307.区域和检索 - 数组可修改</a></td><td><a href="https://leetcode-cn.com/problems/range-sum-query-mutable/solution/guan-yu-ge-lei-qu-jian-he-wen-ti-ru-he-x-41hv/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/russian-doll-envelopes/">354.俄罗斯套娃信封问题</a></td><td><a href="https://leetcode-cn.com/problems/russian-doll-envelopes/solution/zui-chang-shang-sheng-zi-xu-lie-bian-xin-6s8d/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/number-of-longest-increasing-subsequence/">673.最长递增子序列的个数</a></td><td><a href="https://leetcode-cn.com/problems/number-of-longest-increasing-subsequence/solution/gong-shui-san-xie-lis-de-fang-an-shu-wen-obuz/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/xor-queries-of-a-subarray/">1310.子数组异或查询</a></td><td><a href="https://leetcode-cn.com/problems/xor-queries-of-a-subarray/solution/gong-shui-san-xie-yi-ti-shuang-jie-shu-z-rcgu/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/check-if-all-the-integers-in-a-range-are-covered/">1893.检查是否区域内所有整数都被覆盖</a></td><td><a href="https://leetcode-cn.com/problems/check-if-all-the-integers-in-a-range-are-covered/solution/gong-shui-san-xie-yi-ti-shuang-jie-mo-ni-j83x/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr></tbody></table><h1 id="线段树">线段树</h1><table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/range-sum-query-mutable/">307.区域和检索 - 数组可修改</a></td><td><a href="https://leetcode-cn.com/problems/range-sum-query-mutable/solution/by-ac_oier-zmbn/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/corporate-flight-bookings/">1109.航班预订统计</a></td><td><a href="https://leetcode-cn.com/problems/corporate-flight-bookings/solution/gong-shui-san-xie-yi-ti-shuang-jie-chai-fm1ef/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/check-if-all-the-integers-in-a-range-are-covered/">1893.检查是否区域内所有整数都被覆盖</a></td><td><a href="https://leetcode-cn.com/problems/check-if-all-the-integers-in-a-range-are-covered/solution/gong-shui-san-xie-yi-ti-shuang-jie-mo-ni-j83x/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/longest-substring-of-one-repeating-character/">2213.由单个字符重复的最长子字符串</a></td><td><a href="https://leetcode-cn.com/problems/longest-substring-of-one-repeating-character/solution/by-ac_oier-0lso/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩🤩</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 区间求和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2022/04/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2022/04/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="树">树</h1><table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/number-of-ways-to-reconstruct-a-tree/">1719.重构一棵树的方案数</a></td><td><a href="https://leetcode-cn.com/problems/number-of-ways-to-reconstruct-a-tree/solution/gong-shui-san-xie-gou-zao-yan-zheng-he-f-q6fc/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩</td></tr></tbody></table><h1 id="二叉树">二叉树</h1><table><colgroup><col style="width: 39%"><col style="width: 39%"><col style="width: 2%"><col style="width: 17%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst/">230.二叉搜索树中第K小的元素</a></td><td><a href="https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst/solution/gong-shui-san-xie-yi-ti-san-jie-pai-xu-y-8uah/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/search-a-2d-matrix-ii/">240.搜索二维矩阵 II</a></td><td><a href="https://leetcode-cn.com/problems/search-a-2d-matrix-ii/solution/gong-shui-san-xie-yi-ti-shuang-jie-er-fe-y1ns/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/">297.二叉树的序列化与反序列化</a></td><td><a href="https://leetcode-cn.com/problems/xu-lie-hua-er-cha-shu-lcof/solution/gong-shui-san-xie-er-cha-shu-de-xu-lie-h-n89a/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/path-sum-iii/">437.路径总和 III</a></td><td><a href="https://leetcode-cn.com/problems/path-sum-iii/solution/gong-shui-san-xie-yi-ti-shuang-jie-dfs-q-usa7/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/binary-tree-tilt/">563.二叉树的坡度</a></td><td><a href="https://leetcode-cn.com/problems/binary-tree-tilt/solution/gong-shui-san-xie-jian-dan-er-cha-shu-di-ekz4/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/construct-string-from-binary-tree/">606.根据二叉树创建字符串</a></td><td><a href="https://leetcode-cn.com/problems/construct-string-from-binary-tree/solution/by-ac_oier-i2sk/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/two-sum-iv-input-is-a-bst/">653.两数之和 IV - 输入 BST</a></td><td><a href="https://leetcode-cn.com/problems/two-sum-iv-input-is-a-bst/solution/by-ac_oier-zr4o/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/minimum-distance-between-bst-nodes/">783.二叉搜索树节点最小距离</a></td><td><a href="https://leetcode-cn.com/problems/minimum-distance-between-bst-nodes/solution/zhong-xu-bian-li-er-cha-shu-by-dega-vu-lods/">Freedom的题解</a></td><td>简单</td><td>😻😻😻</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/all-nodes-distance-k-in-binary-tree/">863.二叉树中所有距离为 K 的结点</a></td><td><a href="https://leetcode-cn.com/problems/all-nodes-distance-k-in-binary-tree/solution/gong-shui-san-xie-yi-ti-shuang-jie-jian-x6hak/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/range-sum-of-bst/">938.二叉搜索树的范围和</a></td><td><a href="https://leetcode-cn.com/problems/range-sum-of-bst/solution/gong-shui-san-xie-yi-ti-shuang-jie-di-gu-q2fo/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/vertical-order-traversal-of-a-binary-tree/">987.二叉树的垂序遍历</a></td><td><a href="https://leetcode-cn.com/problems/vertical-order-traversal-of-a-binary-tree/solution/gong-shui-san-xie-yi-ti-shuang-jie-dfs-h-wfm3/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/cousins-in-binary-tree/">993.二叉树的堂兄弟节点</a></td><td><a href="https://leetcode-cn.com/problems/cousins-in-binary-tree/solution/gong-shui-san-xie-shu-de-sou-suo-dfs-bfs-b200/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/path-in-zigzag-labelled-binary-tree/">1104.二叉树寻路</a></td><td><a href="https://leetcode-cn.com/problems/path-in-zigzag-labelled-binary-tree/solution/gong-shui-san-xie-yi-ti-shuang-jie-mo-ni-rw2d/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/xu-lie-hua-er-cha-shu-lcof/">剑指Offer 37. 序列化二叉树</a></td><td><a href="https://leetcode-cn.com/problems/xu-lie-hua-er-cha-shu-lcof/solution/gong-shui-san-xie-er-cha-shu-de-xu-lie-h-n89a/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩🤩</td></tr></tbody></table><h1 id="哈希表">哈希表</h1><table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/two-sum/">1.两数之和</a></td><td><a href="https://leetcode-cn.com/problems/two-sum/solution/po-su-jie-fa-ha-xi-biao-jie-fa-by-ac_oie-yf7o/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/">3.无重复字符的最长子串</a></td><td><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/solution/shua-chuan-lc-shuang-zhi-zhen-ha-xi-biao-q08m/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/roman-to-integer/">13.罗马数字转整数</a></td><td><a href="https://leetcode-cn.com/problems/roman-to-integer/solution/shua-chuan-lc-ha-xi-biao-by-ac_oier-mooy/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/substring-with-concatenation-of-all-words/">30.串联所有单词的子串</a></td><td><a href="https://leetcode-cn.com/problems/substring-with-concatenation-of-all-words/solution/shua-chuan-lc-po-su-ha-xi-biao-jie-fa-hu-ml3x/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/valid-sudoku/">36.有效的数独</a></td><td><a href="https://leetcode-cn.com/problems/valid-sudoku/solution/gong-shui-san-xie-yi-ti-san-jie-ha-xi-bi-ssxp/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/single-number-ii/">137.只出现一次的数字 II</a></td><td><a href="https://leetcode-cn.com/problems/single-number-ii/solution/gong-shui-san-xie-yi-ti-san-jie-ha-xi-bi-fku8/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/copy-list-with-random-pointer/">138.复制带随机指针的链表</a></td><td><a href="https://leetcode-cn.com/problems/copy-list-with-random-pointer/solution/gong-shui-san-xie-yi-ti-shuang-jie-ha-xi-pqek/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/lru-cache/">146. LRU缓存机制</a></td><td><a href="https://leetcode-cn.com/problems/lru-cache/solution/gong-shui-san-xie-she-ji-shu-ju-jie-gou-68hv2/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/max-points-on-a-line/">149.直线上最多的点数</a></td><td><a href="https://leetcode-cn.com/problems/max-points-on-a-line/solution/gong-shui-san-xie-liang-chong-mei-ju-zhi-u44s/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/fraction-to-recurring-decimal/">166.分数到小数</a></td><td><a href="https://leetcode-cn.com/problems/fraction-to-recurring-decimal/solution/gong-shui-san-xie-mo-ni-shu-shi-ji-suan-kq8c4/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/repeated-dna-sequences/">187.重复的DNA序列</a></td><td><a href="https://leetcode-cn.com/problems/repeated-dna-sequences/solution/gong-shui-san-xie-yi-ti-shuang-jie-hua-d-30pg/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/contains-duplicate-ii/">219.存在重复元素 II</a></td><td><a href="https://leetcode-cn.com/problems/contains-duplicate-ii/solution/gong-shui-san-xie-hua-dong-chuang-kou-yu-q02i/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/majority-element-ii/">229.求众数 II</a></td><td><a href="https://leetcode-cn.com/problems/majority-element-ii/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-ws0rj/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/single-number-iii/">260.只出现一次的数字 III</a></td><td><a href="https://leetcode-cn.com/problems/single-number-iii/solution/gong-shui-san-xie-yi-ti-shuang-jie-ha-xi-zgi4/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/missing-number/">268.丢失的数字</a></td><td><a href="https://leetcode-cn.com/problems/missing-number/solution/gong-shui-san-xie-yi-ti-wu-jie-pai-xu-ji-te3s/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/bulls-and-cows/">299.猜数字游戏</a></td><td><a href="https://leetcode-cn.com/problems/bulls-and-cows/solution/gong-shui-san-xie-jian-dan-mo-ni-ti-by-a-tdhs/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/insert-delete-getrandom-o1/">380.O(1) 时间插入、删除和获取随机元素</a></td><td><a href="https://leetcode-cn.com/problems/insert-delete-getrandom-o1/solution/by-ac_oier-tpex/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/maximum-product-of-word-lengths/">318.最大单词长度乘积</a></td><td><a href="https://leetcode-cn.com/problems/maximum-product-of-word-lengths/solution/gong-shui-san-xie-jian-dan-wei-yun-suan-cqtxq/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/all-oone-data-structure/">432. 全O(1) 的数据结构</a></td><td><a href="https://leetcode-cn.com/problems/all-oone-data-structure/solution/by-ac_oier-t26d/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/number-of-boomerangs/">447.回旋镖的数量</a></td><td><a href="https://leetcode-cn.com/problems/number-of-boomerangs/solution/gong-shui-san-xie-shu-ju-jie-gou-yun-yon-evu2/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/sort-characters-by-frequency/">451.根据字符出现频率排序</a></td><td><a href="https://leetcode-cn.com/problems/sort-characters-by-frequency/solution/gong-shui-san-xie-shu-ju-jie-gou-yun-yon-gst9/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/lfu-cache/">460. LFU缓存</a></td><td><a href="https://leetcode-cn.com/problems/lfu-cache/solution/gong-shui-san-xie-yun-yong-tong-pai-xu-s-53m3/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/next-greater-element-i/">496.下一个更大元素 I</a></td><td><a href="https://leetcode-cn.com/problems/next-greater-element-i/solution/gong-shui-san-xie-yi-ti-shuang-jie-bian-n6nwz/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/keyboard-row/">500.键盘行</a></td><td><a href="https://leetcode-cn.com/problems/keyboard-row/solution/gong-shui-san-xie-jian-dan-zi-fu-chuan-m-zx6b/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/random-flip-matrix/">519.随机翻转矩阵</a></td><td><a href="https://leetcode-cn.com/problems/random-flip-matrix/solution/gong-shui-san-xie-note-bie-pian-yi-ti-sh-e6gi/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/brick-wall/">554.砖墙</a></td><td><a href="https://leetcode-cn.com/problems/brick-wall/solution/gong-shui-san-xie-zheng-nan-ze-fan-shi-y-gsri/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/longest-harmonious-subsequence/">594.最长和谐子序列</a></td><td><a href="https://leetcode-cn.com/problems/longest-harmonious-subsequence/solution/gong-shui-san-xie-yi-ti-shuang-jie-hua-d-quuh/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/minimum-index-sum-of-two-lists/">599.两个列表的最小索引总和</a></td><td><a href="https://leetcode-cn.com/problems/minimum-index-sum-of-two-lists/solution/by-ac_oier-oh5b/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/set-mismatch/">645.错误的集合</a></td><td><a href="https://leetcode-cn.com/problems/set-mismatch/solution/gong-shui-san-xie-yi-ti-san-jie-ji-shu-s-vnr9/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/two-sum-iv-input-is-a-bst/">653.两数之和 IV - 输入 BST</a></td><td><a href="https://leetcode-cn.com/problems/two-sum-iv-input-is-a-bst/solution/by-ac_oier-zr4o/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/map-sum-pairs/">677.键值映射</a></td><td><a href="https://leetcode-cn.com/problems/map-sum-pairs/solution/gong-shui-san-xie-jie-he-dfs-de-trie-yun-i4xa/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/top-k-frequent-words/">692.前K个高频单词</a></td><td><a href="https://leetcode-cn.com/problems/top-k-frequent-words/solution/gong-shui-san-xie-xiang-jie-shi-yong-ha-8dxt2/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/degree-of-an-array/">697.数组的度</a></td><td><a href="https://leetcode-cn.com/problems/degree-of-an-array/solution/shu-zu-ji-shu-ha-xi-biao-ji-shu-jie-fa-y-a0mg/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/design-hashset/">705.设计哈希集合</a></td><td><a href="https://leetcode-cn.com/problems/design-hashset/solution/yi-ti-san-jie-jian-dan-shu-zu-lian-biao-nj3dg/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/design-hashmap/">706.设计哈希映射</a></td><td><a href="https://leetcode-cn.com/problems/design-hashmap/solution/yi-ti-shuang-jie-jian-dan-shu-zu-lian-bi-yhiw/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/number-of-atoms/">726.原子的数量</a></td><td><a href="https://leetcode-cn.com/problems/number-of-atoms/solution/gong-shui-san-xie-shi-yong-xiao-ji-qiao-l5ak4/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/self-dividing-numbers/">728.自除数</a></td><td><a href="https://leetcode-cn.com/problems/self-dividing-numbers/solution/by-ac_oier-pvb1/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/hand-of-straights/">846.一手顺子</a></td><td><a href="https://leetcode-cn.com/problems/hand-of-straights/solution/gong-shui-san-xie-shu-ju-jie-gou-mo-ni-t-4hxw/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/reordered-power-of-2/">869.重新排序得到 2 的幂</a></td><td><a href="https://leetcode-cn.com/problems/reordered-power-of-2/solution/gong-shui-san-xie-yi-ti-shuang-jie-dfs-c-3s1e/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/uncommon-words-from-two-sentences/">884.两句话中的不常见单词</a></td><td><a href="https://leetcode-cn.com/problems/uncommon-words-from-two-sentences/solution/gong-shui-san-xie-shu-ju-jie-gou-mo-ni-t-wwam/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/fair-candy-swap/">888.公平的糖果棒交换</a></td><td><a href="https://leetcode-cn.com/problems/fair-candy-swap/solution/gong-shui-san-xie-yi-ti-shuang-jie-po-su-uant/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/binary-subarrays-with-sum/">930.和相同的二元子数组</a></td><td><a href="https://leetcode-cn.com/problems/binary-subarrays-with-sum/solution/gong-shui-san-xie-yi-ti-shuang-jie-qian-hfoc0/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/array-of-doubled-pairs/">954.二倍数对数组</a></td><td><a href="https://leetcode-cn.com/problems/array-of-doubled-pairs/solution/by-ac_oier-d1z7/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/time-based-key-value-store/">981.基于时间的键值存储</a></td><td><a href="https://leetcode-cn.com/problems/time-based-key-value-store/solution/gong-shui-san-xie-yi-ti-shuang-jie-ha-xi-h5et/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/vertical-order-traversal-of-a-binary-tree/">987.二叉树的垂序遍历</a></td><td><a href="https://leetcode-cn.com/problems/vertical-order-traversal-of-a-binary-tree/solution/gong-shui-san-xie-yi-ti-shuang-jie-dfs-h-wfm3/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/grid-illumination/">1001.网格照明</a></td><td><a href="https://leetcode-cn.com/problems/grid-illumination/solution/gong-shui-san-xie-ha-xi-biao-xian-ying-s-s48d/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/number-of-submatrices-that-sum-to-target/">1074.元素和为目标值的子矩阵数量</a></td><td><a href="https://leetcode-cn.com/problems/number-of-submatrices-that-sum-to-target/solution/gong-shui-san-xie-you-hua-mei-ju-de-ji-b-uttw/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/number-of-valid-words-for-each-puzzle/">1178.猜字谜</a></td><td><a href="https://leetcode-cn.com/problems/number-of-valid-words-for-each-puzzle/solution/xiang-jin-zhu-shi-xiang-jie-po-su-wei-yu-3cr2/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/longest-arithmetic-subsequence-of-given-difference/">1218.最长定差子序列</a></td><td><a href="https://leetcode-cn.com/problems/longest-arithmetic-subsequence-of-given-difference/solution/gong-shui-san-xie-jie-he-tan-xin-de-zhua-dj1k/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/display-table-of-food-orders-in-a-restaurant/">1418.点菜展示表</a></td><td><a href="https://leetcode-cn.com/problems/display-table-of-food-orders-in-a-restaurant/solution/gong-shui-san-xie-ha-xi-biao-yu-hong-hei-jmli/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/destination-city/">1436.旅行终点站</a></td><td><a href="https://leetcode-cn.com/problems/destination-city/solution/gong-shui-san-xie-jian-dan-fang-jia-mo-n-y47c/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/count-triplets-that-can-form-two-arrays-of-equal-xor/">1442.形成两个异或相等数组的三元组数目</a></td><td><a href="https://leetcode-cn.com/problems/count-triplets-that-can-form-two-arrays-of-equal-xor/solution/gong-shui-san-xie-xiang-jie-shi-yong-qia-7gzm/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/count-unhappy-friends/">1583.统计不开心的朋友</a></td><td><a href="https://leetcode-cn.com/problems/count-unhappy-friends/solution/gong-shui-san-xie-ha-xi-biao-mo-ni-ti-by-2qy0/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/throne-inheritance/">1600.皇位继承顺序</a></td><td><a href="https://leetcode-cn.com/problems/throne-inheritance/solution/gong-shui-san-xie-shi-yong-dan-xiang-lia-7t65/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/design-parking-system/">1603.设计停车系统</a></td><td><a href="https://leetcode-cn.com/problems/design-parking-system/solution/yi-ti-san-jie-jian-dan-bian-liang-ha-xi-0gs72/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/count-good-meals/">1711.大餐计数</a></td><td><a href="https://leetcode-cn.com/problems/count-good-meals/solution/gong-shui-san-xie-xiang-jie-san-chong-gu-nn4f/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/find-servers-that-handled-most-number-of-requests/">1606.找到处理最多请求的服务器</a></td><td><a href="https://leetcode-cn.com/problems/find-servers-that-handled-most-number-of-requests/solution/by-ac_oier-zgm6/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/restore-the-array-from-adjacent-pairs/">1743.从相邻元素对还原数组</a></td><td><a href="https://leetcode-cn.com/problems/restore-the-array-from-adjacent-pairs/solution/gong-shui-san-xie-yi-ti-shuang-jie-dan-x-elpx/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/sum-of-unique-elements/">1748.唯一元素的和</a></td><td><a href="https://leetcode-cn.com/problems/sum-of-unique-elements/solution/gong-shui-san-xie-yi-ti-shuang-jie-pai-x-atnd/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/frequency-of-the-most-frequent-element/">1838.最高频元素的频数</a></td><td><a href="https://leetcode-cn.com/problems/frequency-of-the-most-frequent-element/solution/gong-shui-san-xie-cong-mei-ju-dao-pai-xu-kxnk/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/count-special-quadruplets/">1995.统计特殊四元组</a></td><td><a href="https://leetcode-cn.com/problems/count-special-quadruplets/solution/gong-shui-san-xie-yi-ti-si-jie-mei-ju-ha-gmhv/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/count-number-of-pairs-with-absolute-difference-k/">2006.差的绝对值为 K 的数对数目</a></td><td><a href="https://leetcode-cn.com/problems/count-number-of-pairs-with-absolute-difference-k/solution/gong-shui-san-xie-jian-dan-mo-ni-ti-by-a-1jel/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/detect-squares/">2013.检测正方形</a></td><td><a href="https://leetcode-cn.com/problems/detect-squares/solution/gong-shui-san-xie-jian-dan-ha-xi-biao-yu-748e/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/stock-price-fluctuation/">2034.股票价格波动</a></td><td><a href="https://leetcode-cn.com/problems/stock-price-fluctuation/solution/gong-shui-san-xie-shu-ju-jie-gou-mo-ni-t-u6f4/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/group-anagrams-lcci/">面试题10.02. 变位词组</a></td><td><a href="https://leetcode-cn.com/problems/group-anagrams-lcci/solution/gong-shui-san-xie-tong-ji-bian-wei-ci-de-0iqe/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/find-majority-element-lcci/">面试题17.10. 主要元素</a></td><td><a href="https://leetcode-cn.com/problems/find-majority-element-lcci/solution/gong-shui-san-xie-yi-ti-shuang-jie-ha-xi-zkht/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/FortPu/">剑指 Offer II030. 插入、删除和随机访问都是 O(1) 的容器</a></td><td><a href="https://leetcode-cn.com/problems/FortPu/solution/by-ac_oier-rls4/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr></tbody></table><h1 id="红黑树">红黑树</h1><table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/find-servers-that-handled-most-number-of-requests/">1606.找到处理最多请求的服务器</a></td><td><a href="https://leetcode-cn.com/problems/find-servers-that-handled-most-number-of-requests/solution/by-ac_oier-zgm6/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/stock-price-fluctuation/">2034.股票价格波动</a></td><td><a href="https://leetcode-cn.com/problems/stock-price-fluctuation/solution/gong-shui-san-xie-shu-ju-jie-gou-mo-ni-t-u6f4/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr></tbody></table><h1 id="链表">链表</h1><table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/add-two-numbers/">2.两数相加</a></td><td><a href="https://leetcode-cn.com/problems/add-two-numbers/solution/po-su-jie-fa-shao-bing-ji-qiao-by-ac_oie-etln/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">19.删除链表的倒数第 N 个结点</a></td><td><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/solution/shua-chuan-lc-lian-biao-kuai-man-zhi-zhe-1gs1/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/">21.合并两个有序链表</a></td><td><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/solution/shua-chuan-lc-shuang-zhi-zhen-jie-fa-sha-b22z/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/merge-k-sorted-lists/">23.合并K个升序链表</a></td><td><a href="https://leetcode-cn.com/problems/merge-k-sorted-lists/solution/shua-chuan-lc-you-xian-dui-lie-jie-fa-sh-3flb/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/">24.两两交换链表中的节点</a></td><td><a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/solution/shua-chuan-lc-di-gui-die-dai-jie-fa-shao-70t3/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group/">25. K个一组翻转链表</a></td><td><a href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group/solution/shua-chuan-lc-duo-tu-jiang-jie-di-gui-gu-6wr0/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/rotate-list/">61.旋转链表</a></td><td><a href="https://leetcode-cn.com/problems/rotate-list/solution/kuai-man-zhi-zhen-ru-he-fen-bu-zou-jie-j-ns7u/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/">83.删除排序链表中的重复元素</a></td><td><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/solution/tong-yong-shan-chu-zhong-fu-jie-dian-lia-101c/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/">82.删除排序链表中的重复元素 II</a></td><td><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/solution/tong-yong-shan-chu-zhong-fu-jie-dian-lia-od9g/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/reverse-linked-list-ii/">92.反转链表 II</a></td><td><a href="https://leetcode-cn.com/problems/reverse-linked-list-ii/solution/yi-ge-neng-ying-yong-suo-you-lian-biao-t-vjx6/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/copy-list-with-random-pointer/">138.复制带随机指针的链表</a></td><td><a href="https://leetcode-cn.com/problems/copy-list-with-random-pointer/solution/gong-shui-san-xie-yi-ti-shuang-jie-ha-xi-pqek/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists/">160.相交链表</a></td><td><a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists/solution/gong-shui-san-xie-zhao-liang-tiao-lian-b-h3bd/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/lru-cache/">146. LRU缓存机制</a></td><td><a href="https://leetcode-cn.com/problems/lru-cache/solution/gong-shui-san-xie-she-ji-shu-ju-jie-gou-68hv2/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/remove-linked-list-elements/">203.移除链表元素</a></td><td><a href="https://leetcode-cn.com/problems/remove-linked-list-elements/solution/gong-shui-san-xie-yi-chu-lian-biao-yuan-ca6fu/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/delete-node-in-a-linked-list/">237.删除链表中的节点</a></td><td><a href="https://leetcode-cn.com/problems/delete-node-in-a-linked-list/solution/gong-shui-san-xie-jian-dan-lian-biao-mo-rovcb/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/linked-list-random-node/">382.链表随机节点</a></td><td><a href="https://leetcode-cn.com/problems/linked-list-random-node/solution/gong-shui-san-xie-xu-shui-chi-chou-yang-1lp9d/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/flatten-a-multilevel-doubly-linked-list/">430.扁平化多级双向链表</a></td><td><a href="https://leetcode-cn.com/problems/flatten-a-multilevel-doubly-linked-list/solution/gong-shui-san-xie-yi-ti-shuang-jie-di-gu-9wfz/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/all-oone-data-structure/">432. 全O(1) 的数据结构</a></td><td><a href="https://leetcode-cn.com/problems/all-oone-data-structure/solution/by-ac_oier-t26d/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/lfu-cache/">460. LFU缓存</a></td><td><a href="https://leetcode-cn.com/problems/lfu-cache/solution/gong-shui-san-xie-yun-yong-tong-pai-xu-s-53m3/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/split-linked-list-in-parts/">725.分隔链表</a></td><td><a href="https://leetcode-cn.com/problems/split-linked-list-in-parts/solution/gong-shui-san-xie-jing-dian-lian-biao-ju-9yj4/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/throne-inheritance/">1600.皇位继承顺序</a></td><td><a href="https://leetcode-cn.com/problems/throne-inheritance/solution/gong-shui-san-xie-shi-yong-dan-xiang-lia-7t65/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/">剑指Offer 22. 链表中倒数第k个节点</a></td><td><a href="https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/solution/gong-shui-san-xie-yi-ti-san-jie-zhan-dui-w3rz/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof/">剑指Offer 52. 两个链表的第一个公共节点</a></td><td><a href="https://leetcode-cn.com/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof/solution/gong-shui-san-xie-zhao-liang-tiao-lian-b-ifqw/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/sum-lists-lcci/">面试题02.05. 链表求和</a></td><td><a href="https://leetcode-cn.com/problems/sum-lists-lcci/solution/by-ac_oier-v1zb/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr></tbody></table><h1 id="栈">栈</h1><table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/valid-parentheses/">20.有效的括号</a></td><td><a href="https://leetcode-cn.com/problems/valid-parentheses/solution/shua-chuan-lc-zhan-ascii-chai-zhi-jie-fa-00zo/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/longest-valid-parentheses/">32.最长有效括号</a></td><td><a href="https://leetcode-cn.com/problems/longest-valid-parentheses/solution/shua-chuan-lc-miao-dong-xi-lie-shi-yong-95ezk/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/simplify-path/">71.简化路径</a></td><td><a href="https://leetcode-cn.com/problems/simplify-path/solution/gong-shui-san-xie-jian-dan-zi-fu-chuan-m-w7xi/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/min-stack/">155.最小栈</a></td><td><a href="https://leetcode-cn.com/problems/min-stack/solution/tu-li-zhan-shi-shuang-zhan-shi-xian-zui-fcwj5/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/implement-queue-using-stacks/">232.用栈实现队列</a></td><td><a href="https://leetcode-cn.com/problems/implement-queue-using-stacks/solution/sha-shi-jun-tan-fu-za-du-ya-wo-de-suan-f-gb6d/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/flatten-nested-list-iterator/">341.扁平化嵌套列表迭代器</a></td><td><a href="https://leetcode-cn.com/problems/flatten-nested-list-iterator/solution/yi-ti-shuang-jie-dfsdui-lie-di-gui-zhan-kvwhy/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/mini-parser/">385.迷你语法分析器</a></td><td><a href="https://leetcode-cn.com/problems/mini-parser/solution/by-ac_oier-zuy6/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/number-of-atoms/">726.原子的数量</a></td><td><a href="https://leetcode-cn.com/problems/number-of-atoms/solution/gong-shui-san-xie-shi-yong-xiao-ji-qiao-l5ak4/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/reverse-substrings-between-each-pair-of-parentheses/">1190.反转每对括号间的子串</a></td><td><a href="https://leetcode-cn.com/problems/reverse-substrings-between-each-pair-of-parentheses/solution/gong-shui-san-xie-shi-yong-shuang-duan-d-r35q/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/three-in-one-lcci/">面试题03.01. 三合一</a></td><td><a href="https://leetcode-cn.com/problems/three-in-one-lcci/solution/yi-ti-shuang-jie-er-wei-shu-zu-yi-wei-sh-lih7/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/sum-lists-lcci/">面试题02.05. 链表求和</a></td><td><a href="https://leetcode-cn.com/problems/sum-lists-lcci/solution/by-ac_oier-v1zb/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr></tbody></table><h1 id="单调栈">单调栈</h1><table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/trapping-rain-water/">42.接雨水</a></td><td><a href="https://leetcode-cn.com/problems/trapping-rain-water/solution/po-su-jie-fa-on2-cha-zhao-you-hua-on-dan-iu44/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/next-greater-element-i/">496.下一个更大元素 I</a></td><td><a href="https://leetcode-cn.com/problems/next-greater-element-i/solution/gong-shui-san-xie-yi-ti-shuang-jie-bian-n6nwz/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/next-greater-element-ii/">503.下一个更大元素 II</a></td><td><a href="https://leetcode-cn.com/problems/next-greater-element-ii/solution/cong-po-su-jie-fa-de-jiao-du-qu-li-jie-d-trht/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/132-pattern/">456. 132模式</a></td><td><a href="https://leetcode-cn.com/problems/132-pattern/solution/xiang-xin-ke-xue-xi-lie-xiang-jie-wei-he-95gt/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/sum-of-subarray-ranges/">2104.子数组范围和</a></td><td><a href="https://leetcode-cn.com/problems/sum-of-subarray-ranges/solution/gong-shui-san-xie-yi-ti-san-jie-qu-jian-wn84z/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr></tbody></table><h1 id="队列">队列</h1><table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/remove-all-adjacent-duplicates-in-string/">1047.删除字符串中的所有相邻重复项</a></td><td><a href="https://leetcode-cn.com/problems/remove-all-adjacent-duplicates-in-string/solution/cong-30-dao-100wu-chong-shi-xian-jie-jue-vkah/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/reverse-substrings-between-each-pair-of-parentheses/">1190.反转每对括号间的子串</a></td><td><a href="https://leetcode-cn.com/problems/reverse-substrings-between-each-pair-of-parentheses/solution/gong-shui-san-xie-shi-yong-shuang-duan-d-r35q/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr></tbody></table><h1 id="单调队列">单调队列</h1><table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit/">1438.绝对差不超过限制的最长连续子数组</a></td><td><a href="https://leetcode-cn.com/problems/longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit/solution/xiang-jie-er-fen-hua-dong-chuang-kou-dan-41g1/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr></tbody></table><h1 id="堆">堆</h1><table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/merge-k-sorted-lists/">23.合并K个升序链表</a></td><td><a href="https://leetcode-cn.com/problems/merge-k-sorted-lists/solution/shua-chuan-lc-you-xian-dui-lie-jie-fa-sh-3flb/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/the-skyline-problem/">218.天际线问题</a></td><td><a href="https://leetcode-cn.com/problems/the-skyline-problem/solution/gong-shui-san-xie-sao-miao-xian-suan-fa-0z6xc/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/ugly-number-ii/">264. 丑数II</a></td><td><a href="https://leetcode-cn.com/problems/ugly-number-ii/solution/gong-shui-san-xie-yi-ti-shuang-jie-you-x-3nvs/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/find-median-from-data-stream/">295.数据流的中位数</a></td><td><a href="https://leetcode-cn.com/problems/find-median-from-data-stream/solution/gong-shui-san-xie-jing-dian-shu-ju-jie-g-pqy8/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/super-ugly-number/">313.超级丑数</a></td><td><a href="https://leetcode-cn.com/problems/super-ugly-number/solution/gong-shui-san-xie-yi-ti-shuang-jie-you-x-jyow/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/find-k-pairs-with-smallest-sums/">373.查找和最小的K对数字</a></td><td><a href="https://leetcode-cn.com/problems/find-k-pairs-with-smallest-sums/solution/gong-shui-san-xie-duo-lu-gui-bing-yun-yo-pgw5/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/trapping-rain-water-ii/">407.接雨水 II</a></td><td><a href="https://leetcode-cn.com/problems/trapping-rain-water-ii/solution/gong-shui-san-xie-jing-dian-dijkstra-yun-13ik/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/sort-characters-by-frequency/">451.根据字符出现频率排序</a></td><td><a href="https://leetcode-cn.com/problems/sort-characters-by-frequency/solution/gong-shui-san-xie-shu-ju-jie-gou-yun-yon-gst9/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/sliding-window-median/">480.滑动窗口中位数</a></td><td><a href="https://leetcode-cn.com/problems/sliding-window-median/solution/xiang-jie-po-su-jie-fa-you-xian-dui-lie-mo397/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/ipo/">502. IPO</a></td><td><a href="https://leetcode-cn.com/problems/ipo/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-fk1ra/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/course-schedule-iii/">630.课程表 III</a></td><td><a href="https://leetcode-cn.com/problems/course-schedule-iii/solution/gong-shui-san-xie-jing-dian-tan-xin-yun-ghii2/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/top-k-frequent-words/">692.前K个高频单词</a></td><td><a href="https://leetcode-cn.com/problems/top-k-frequent-words/solution/gong-shui-san-xie-xiang-jie-shi-yong-ha-8dxt2/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/kth-largest-element-in-a-stream/">703.数据流中的第 K 大元素</a></td><td><a href="https://leetcode-cn.com/problems/kth-largest-element-in-a-stream/solution/jian-da-ti-de-duo-chong-jie-fa-mou-pao-p-d1qi/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/number-of-atoms/">726.原子的数量</a></td><td><a href="https://leetcode-cn.com/problems/number-of-atoms/solution/gong-shui-san-xie-shi-yong-xiao-ji-qiao-l5ak4/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/k-th-smallest-prime-fraction/">786.第 K 个最小的素数分数</a></td><td><a href="https://leetcode-cn.com/problems/k-th-smallest-prime-fraction/solution/gong-shui-san-xie-yi-ti-shuang-jie-you-x-8ymk/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/hand-of-straights/">846.一手顺子</a></td><td><a href="https://leetcode-cn.com/problems/hand-of-straights/solution/gong-shui-san-xie-shu-ju-jie-gou-mo-ni-t-4hxw/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/array-of-doubled-pairs/">954.二倍数对数组</a></td><td><a href="https://leetcode-cn.com/problems/array-of-doubled-pairs/solution/by-ac_oier-d1z7/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/vertical-order-traversal-of-a-binary-tree/">987.二叉树的垂序遍历</a></td><td><a href="https://leetcode-cn.com/problems/vertical-order-traversal-of-a-binary-tree/solution/gong-shui-san-xie-yi-ti-shuang-jie-dfs-h-wfm3/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/maximize-sum-of-array-after-k-negations/">1005.K 次取反后最大化的数组和</a></td><td><a href="https://leetcode-cn.com/problems/maximize-sum-of-array-after-k-negations/solution/gong-shui-san-xie-jian-dan-fen-qing-kuan-6qwu/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/the-k-weakest-rows-in-a-matrix/">1337.矩阵中战斗力最弱的 K 行</a></td><td><a href="https://leetcode-cn.com/problems/the-k-weakest-rows-in-a-matrix/solution/gong-shui-san-xie-yi-ti-shuang-jie-po-su-7okx/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/longest-happy-string/">1405.最长快乐字符串</a></td><td><a href="https://leetcode-cn.com/problems/longest-happy-string/solution/gong-shui-san-xie-jie-he-you-xian-dui-li-q6fd/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/find-servers-that-handled-most-number-of-requests/">1606.找到处理最多请求的服务器</a></td><td><a href="https://leetcode-cn.com/problems/find-servers-that-handled-most-number-of-requests/solution/by-ac_oier-zgm6/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/maximum-number-of-eaten-apples/">1705.吃苹果的最大数目</a></td><td><a href="https://leetcode-cn.com/problems/maximum-number-of-eaten-apples/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-hfdy0/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/single-threaded-cpu/">1834.单线程 CPU</a></td><td><a href="https://leetcode-cn.com/problems/single-threaded-cpu/solution/gong-shui-san-xie-shu-ju-jie-gou-yun-yon-1qk0/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/smallest-k-lcci/">面试题17.14. 最小K个数</a></td><td><a href="https://leetcode-cn.com/problems/smallest-k-lcci/solution/gong-shui-san-xie-yi-ti-si-jie-you-xian-yy5k5/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr></tbody></table><h1 id="二叉树的三种遍历">二叉树的三种遍历</h1><h2 id="前序">前序</h2><h3 id="迭代">迭代</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span></span>{</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> ret;</span><br><span class="line">        TreeNode* cur = root;</span><br><span class="line">        stack&lt;TreeNode*&gt; s;</span><br><span class="line">        <span class="keyword">while</span>(cur || !s.<span class="built_in">empty</span>()){</span><br><span class="line">            </span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="中序">中序</h2><h2 id="后序">后序</h2>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="/2022/04/17/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2022/04/17/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h1 id="记忆化搜索">记忆化搜索</h1><table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/scramble-string/">87.扰乱字符串</a></td><td><a href="https://leetcode-cn.com/problems/scramble-string/solution/gong-shui-san-xie-yi-ti-san-jie-di-gui-j-hybk/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/guess-number-higher-or-lower-ii/">375.猜数字大小 II</a></td><td><a href="https://leetcode-cn.com/problems/guess-number-higher-or-lower-ii/solution/gong-shui-san-xie-yi-ti-shuang-jie-ji-yi-92e5/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/frog-jump/">403.青蛙过河</a></td><td><a href="https://leetcode-cn.com/problems/frog-jump/solution/gong-shui-san-xie-yi-ti-duo-jie-jiang-di-74fw/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/target-sum/">494.目标和</a></td><td><a href="https://leetcode-cn.com/problems/target-sum/solution/gong-shui-san-xie-yi-ti-si-jie-dfs-ji-yi-et5b/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/student-attendance-record-ii/">552.学生出勤记录 II</a></td><td><a href="https://leetcode-cn.com/problems/student-attendance-record-ii/solution/gong-shui-san-xie-yi-ti-san-jie-ji-yi-hu-fdfx/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/out-of-boundary-paths/">576.出界的路径数</a></td><td><a href="https://leetcode-cn.com/problems/out-of-boundary-paths/solution/gong-shui-san-xie-yi-ti-shuang-jie-ji-yi-asrz/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/cat-and-mouse/">913.猫和老鼠</a></td><td><a href="https://leetcode-cn.com/problems/cat-and-mouse/solution/gong-shui-san-xie-dong-tai-gui-hua-yun-y-0bx1/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/n-th-tribonacci-number/">1137. 第N 个泰波那契数</a></td><td><a href="https://leetcode-cn.com/problems/n-th-tribonacci-number/solution/gong-shui-san-xie-yi-ti-si-jie-die-dai-d-m1ie/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/">剑指Offer 10- I. 斐波那契数列</a></td><td><a href="https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/solution/gong-shui-san-xie-yi-ti-si-jie-dong-tai-9zip0/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩🤩</td></tr></tbody></table><h1 id="线性dp">线性DP</h1><table><colgroup><col style="width: 37%"><col style="width: 37%"><col style="width: 2%"><col style="width: 22%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/regular-expression-matching">10.正则表达式匹配</a></td><td><a href="https://leetcode-cn.com/problems/regular-expression-matching/solution/shua-chuan-lc-dong-tai-gui-hua-jie-fa-by-zn9w/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/wildcard-matching/">44.通配符匹配</a></td><td><a href="https://leetcode-cn.com/problems/wildcard-matching/solution/gong-shui-san-xie-xiang-jie-dong-tai-gui-ifyx/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/jump-game-ii/">45.跳跃游戏 II</a></td><td><a href="https://leetcode-cn.com/problems/jump-game-ii/solution/xiang-jie-dp-tan-xin-shuang-zhi-zhen-jie-roh4/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/decode-ways/">91.解码方法</a></td><td><a href="https://leetcode-cn.com/problems/decode-ways/solution/gong-shui-san-xie-gen-ju-shu-ju-fan-wei-ug3dd/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/distinct-subsequences/">115.不同的子序列</a></td><td><a href="https://leetcode-cn.com/problems/distinct-subsequences/solution/xiang-jie-zi-fu-chuan-pi-pei-wen-ti-de-t-wdtk/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/pascals-triangle-ii/">119.杨辉三角 II</a></td><td><a href="https://leetcode-cn.com/problems/pascals-triangle-ii/solution/dong-tai-gui-hua-luo-ti-chang-jian-de-ko-n2xj/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/house-robber-ii/">213.打家劫舍 II</a></td><td><a href="https://leetcode-cn.com/problems/house-robber-ii/solution/gong-shui-san-xie-ru-he-jiang-xin-xian-z-zf0w/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/counting-bits/">338.比特位计数</a></td><td><a href="https://leetcode-cn.com/problems/counting-bits/solution/po-su-jie-fa-dong-tai-gui-hua-jie-fa-by-vvail/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/frog-jump/">403.青蛙过河</a></td><td><a href="https://leetcode-cn.com/problems/frog-jump/solution/gong-shui-san-xie-yi-ti-duo-jie-jiang-di-74fw/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/out-of-boundary-paths/">576.出界的路径数</a></td><td><a href="https://leetcode-cn.com/problems/out-of-boundary-paths/solution/gong-shui-san-xie-yi-ti-shuang-jie-ji-yi-asrz/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/decode-ways-ii/">639.解码方法 II</a></td><td><a href="https://leetcode-cn.com/problems/decode-ways-ii/solution/gong-shui-san-xie-fen-qing-kuang-tao-lun-902h/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/2-keys-keyboard/">650.只有两个键的键盘</a></td><td><a href="https://leetcode-cn.com/problems/2-keys-keyboard/solution/gong-shui-san-xie-yi-ti-san-jie-dong-tai-f035/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/valid-parenthesis-string/">678.有效的括号字符串</a></td><td><a href="https://leetcode-cn.com/problems/valid-parenthesis-string/solution/gong-shui-san-xie-yi-ti-shuang-jie-dong-801rq/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/knight-probability-in-chessboard/">688.骑士在棋盘上的概率</a></td><td><a href="https://leetcode-cn.com/problems/knight-probability-in-chessboard/solution/gong-shui-san-xie-jian-dan-qu-jian-dp-yu-st8l/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode.cn/problems/cherry-pickup/">741. 摘樱桃 -力扣（LeetCode）</a></td><td><a href="https://leetcode.cn/problems/cherry-pickup/solution/by-dega-vu-m8jm/">Freedom的题解</a></td><td>困难</td><td>😻😻😻😻</td></tr><tr class="even"><td><a href="https://leetcode.cn/problems/length-of-longest-fibonacci-subsequence/">873.最长的斐波那契子序列的长度 - 力扣（LeetCode）</a></td><td><a href="https://leetcode.cn/problems/length-of-longest-fibonacci-subsequence/solution/by-dega-vu-56v1/">Freedom的题解</a></td><td>中等</td><td>😻😻😻😻</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/n-th-tribonacci-number/">1137. 第N 个泰波那契数</a></td><td><a href="https://leetcode-cn.com/problems/n-th-tribonacci-number/solution/gong-shui-san-xie-yi-ti-si-jie-die-dai-d-m1ie/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/count-vowels-permutation/">1220.统计元音字母序列的数目</a></td><td><a href="https://leetcode-cn.com/problems/count-vowels-permutation/solution/gong-shui-san-xie-yi-ti-shuang-jie-xian-n8f4o/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/maximum-number-of-events-that-can-be-attended-ii/">1751.最多可以参加的会议数目 II</a></td><td><a href="https://leetcode-cn.com/problems/maximum-number-of-events-that-can-be-attended-ii/solution/po-su-dp-er-fen-dp-jie-fa-by-ac_oier-88du/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/make-the-xor-of-all-segments-equal-to-zero/">1787.使所有区间的异或结果为零</a></td><td><a href="https://leetcode-cn.com/problems/make-the-xor-of-all-segments-equal-to-zero/solution/gong-shui-san-xie-chou-xiang-cheng-er-we-ww79/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/">剑指Offer 10- I. 斐波那契数列</a></td><td><a href="https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/solution/gong-shui-san-xie-yi-ti-si-jie-dong-tai-9zip0/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/">剑指Offer 42. 连续子数组的最大和</a></td><td><a href="https://leetcode-cn.com/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/solution/gong-shui-san-xie-jian-dan-xian-xing-dp-mqk5v/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/chuan-di-xin-xi/">LCP 07.传递信息</a></td><td><a href="https://leetcode-cn.com/problems/chuan-di-xin-xi/solution/gong-shui-san-xie-tu-lun-sou-suo-yu-dong-cyxo/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr></tbody></table><h1 id="背包dp">背包DP</h1><table style="width:100%;"><colgroup><col style="width: 46%"><col style="width: 46%"><col style="width: 3%"><col style="width: 3%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th></th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/perfect-squares/">279.完全平方数</a></td><td><a href="https://leetcode-cn.com/problems/perfect-squares/solution/gong-shui-san-xie-xiang-jie-wan-quan-bei-nqes/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/coin-change/">322.零钱兑换</a></td><td><a href="https://leetcode-cn.com/problems/coin-change/solution/dong-tai-gui-hua-bei-bao-wen-ti-zhan-zai-3265/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/partition-equal-subset-sum/">416.分割等和子集</a></td><td><a href="https://leetcode-cn.com/problems/partition-equal-subset-sum/solution/gong-shui-san-xie-bei-bao-wen-ti-xia-con-mr8a/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/ones-and-zeroes/">474.一和零</a></td><td><a href="https://leetcode-cn.com/problems/ones-and-zeroes/solution/gong-shui-san-xie-xiang-jie-ru-he-zhuan-174wv/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/target-sum/">494.目标和</a></td><td><a href="https://leetcode-cn.com/problems/target-sum/solution/gong-shui-san-xie-yi-ti-si-jie-dfs-ji-yi-et5b/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/coin-change-2/">518.零钱兑换 II</a></td><td><a href="https://leetcode-cn.com/problems/coin-change-2/solution/gong-shui-san-xie-xiang-jie-wan-quan-bei-6hxv/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/shopping-offers/">638.大礼包</a></td><td><a href="https://leetcode-cn.com/problems/shopping-offers/solution/gong-shui-san-xie-yi-ti-shuang-jie-zhuan-qgk1/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/profitable-schemes/">879.盈利计划</a></td><td><a href="https://leetcode-cn.com/problems/profitable-schemes/solution/gong-shui-san-xie-te-shu-duo-wei-fei-yon-7su9/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/last-stone-weight-ii/">1049.最后一块石头的重量 II</a></td><td><a href="https://leetcode-cn.com/problems/last-stone-weight-ii/solution/gong-shui-san-xie-xiang-jie-wei-he-neng-jgxik/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/number-of-dice-rolls-with-target-sum/">1155.掷骰子的N种方法</a></td><td><a href="https://leetcode-cn.com/problems/number-of-dice-rolls-with-target-sum/solution/dong-tai-gui-hua-bei-bao-wen-ti-yun-yong-axtf/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/form-largest-integer-with-digits-that-add-up-to-target/">1449.数位成本和为目标值的最大数字</a></td><td><a href="https://leetcode-cn.com/problems/form-largest-integer-with-digits-that-add-up-to-target/solution/gong-shui-san-xie-fen-liang-bu-kao-lu-we-uy4y/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/count-special-quadruplets/">1995.统计特殊四元组</a></td><td><a href="https://leetcode-cn.com/problems/count-special-quadruplets/solution/gong-shui-san-xie-yi-ti-si-jie-mei-ju-ha-gmhv/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr></tbody></table><h1 id="序列dp">序列DP</h1><table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/increasing-triplet-subsequence/">334.递增的三元子序列</a></td><td><a href="https://leetcode-cn.com/problems/increasing-triplet-subsequence/solution/gong-shui-san-xie-zui-chang-shang-sheng-xa08h/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/russian-doll-envelopes/">354.俄罗斯套娃信封问题</a></td><td><a href="https://leetcode-cn.com/problems/russian-doll-envelopes/solution/zui-chang-shang-sheng-zi-xu-lie-bian-xin-6s8d/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/largest-divisible-subset/">368.最大整除子集</a></td><td><a href="https://leetcode-cn.com/problems/largest-divisible-subset/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-0a3jc/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/elimination-game/">390.消除游戏</a></td><td><a href="https://leetcode-cn.com/problems/elimination-game/solution/gong-shui-san-xie-yue-se-fu-huan-yun-yon-x60m/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/arithmetic-slices-ii-subsequence/">446.等差数列划分 II - 子序列</a></td><td><a href="https://leetcode-cn.com/problems/arithmetic-slices-ii-subsequence/solution/gong-shui-san-xie-xiang-jie-ru-he-fen-xi-ykvk/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/concatenated-words/">472.连接词</a></td><td><a href="https://leetcode-cn.com/problems/concatenated-words/solution/gong-shui-san-xie-xu-lie-dpzi-fu-chuan-h-p7no/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/delete-operation-for-two-strings/">583.两个字符串的删除操作</a></td><td><a href="https://leetcode-cn.com/problems/delete-operation-for-two-strings/solution/gong-shui-san-xie-cong-liang-chong-xu-li-wqv7/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/k-inverse-pairs-array/">629.K个逆序对数组</a></td><td><a href="https://leetcode-cn.com/problems/k-inverse-pairs-array/solution/gong-shui-san-xie-yi-dao-xu-lie-dp-zhuan-tm01/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/number-of-longest-increasing-subsequence/">673.最长递增子序列的个数</a></td><td><a href="https://leetcode-cn.com/problems/number-of-longest-increasing-subsequence/solution/gong-shui-san-xie-lis-de-fang-an-shu-wen-obuz/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/maximum-sum-of-3-non-overlapping-subarrays/">689.三个无重叠子数组的最大和</a></td><td><a href="https://leetcode-cn.com/problems/maximum-sum-of-3-non-overlapping-subarrays/solution/gong-shui-san-xie-jie-he-qian-zhui-he-de-ancx/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/delete-and-earn/">740.删除并获得点数</a></td><td><a href="https://leetcode-cn.com/problems/delete-and-earn/solution/gong-shui-san-xie-zhuan-huan-wei-xu-lie-6c9t0/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/longest-turbulent-subarray/">978.最长湍流子数组</a></td><td><a href="https://leetcode-cn.com/problems/longest-turbulent-subarray/solution/xiang-jie-dong-tai-gui-hua-ru-he-cai-dp-3spgj/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/uncrossed-lines/">1035.不相交的线</a></td><td><a href="https://leetcode-cn.com/problems/uncrossed-lines/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-bkaas/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/longest-common-subsequence/">1143.最长公共子序列</a></td><td><a href="https://leetcode-cn.com/problems/longest-common-subsequence/solution/gong-shui-san-xie-zui-chang-gong-gong-zi-xq0h/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/longest-arithmetic-subsequence-of-given-difference/">1218.最长定差子序列</a></td><td><a href="https://leetcode-cn.com/problems/longest-arithmetic-subsequence-of-given-difference/solution/gong-shui-san-xie-jie-he-tan-xin-de-zhua-dj1k/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/paint-house-iii/">1473.粉刷房子 III</a></td><td><a href="https://leetcode-cn.com/problems/paint-house-iii/solution/gong-shui-san-xie-san-wei-dong-tai-gui-h-ud7m/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/minimum-operations-to-make-a-subsequence/">1713.得到子序列的最少操作次数</a></td><td><a href="https://leetcode-cn.com/problems/minimum-operations-to-make-a-subsequence/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-oj7yu/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩🤩</td></tr></tbody></table><h1 id="区间dp">区间DP</h1><table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/scramble-string/">87.扰乱字符串</a></td><td><a href="https://leetcode-cn.com/problems/scramble-string/solution/gong-shui-san-xie-yi-ti-san-jie-di-gui-j-hybk/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/guess-number-higher-or-lower-ii/">375.猜数字大小 II</a></td><td><a href="https://leetcode-cn.com/problems/guess-number-higher-or-lower-ii/solution/gong-shui-san-xie-yi-ti-shuang-jie-ji-yi-92e5/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/longest-palindromic-subsequence/">516.最长回文子序列</a></td><td><a href="https://leetcode-cn.com/problems/longest-palindromic-subsequence/solution/gong-shui-san-xie-qu-jian-dp-qiu-jie-zui-h2ya/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/strange-printer/">664.奇怪的打印机</a></td><td><a href="https://leetcode-cn.com/problems/strange-printer/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-xqeo9/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/stone-game/">877.石子游戏</a></td><td><a href="https://leetcode-cn.com/problems/stone-game/solution/gong-shui-san-xie-jing-dian-qu-jian-dp-j-wn31/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/sum-of-subarray-ranges/">2104.子数组范围和</a></td><td><a href="https://leetcode-cn.com/problems/sum-of-subarray-ranges/solution/gong-shui-san-xie-yi-ti-san-jie-qu-jian-wn84z/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr></tbody></table><h1 id="状压dp">状压DP</h1><table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/beautiful-arrangement/">526.优美的排列</a></td><td><a href="https://leetcode-cn.com/problems/beautiful-arrangement/solution/gong-shui-san-xie-xiang-jie-liang-chong-vgsia/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/shortest-path-visiting-all-nodes/">847.访问所有节点的最短路径</a></td><td><a href="https://leetcode-cn.com/problems/shortest-path-visiting-all-nodes/solution/gong-shui-san-xie-yi-ti-shuang-jie-bfs-z-6p2k/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/the-number-of-good-subsets/">1994.好子集的数目</a></td><td><a href="https://leetcode-cn.com/problems/the-number-of-good-subsets/solution/gong-shui-san-xie-zhuang-ya-dp-yun-yong-gz4w5/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/count-number-of-maximum-bitwise-or-subsets/">2044.统计按位或能得到最大值的子集数目</a></td><td><a href="https://leetcode-cn.com/problems/count-number-of-maximum-bitwise-or-subsets/solution/by-ac_oier-dos6/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr></tbody></table><h1 id="状态机dp">状态机DP</h1><table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/student-attendance-record-ii/">552.学生出勤记录 II</a></td><td><a href="https://leetcode-cn.com/problems/student-attendance-record-ii/solution/gong-shui-san-xie-yi-ti-san-jie-ji-yi-hu-fdfx/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/longest-arithmetic-subsequence-of-given-difference/">1218.最长定差子序列</a></td><td><a href="https://leetcode-cn.com/problems/longest-arithmetic-subsequence-of-given-difference/solution/gong-shui-san-xie-jie-he-tan-xin-de-zhua-dj1k/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr></tbody></table><h1 id="数位dp">数位DP</h1><table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/non-negative-integers-without-consecutive-ones/">600.不含连续1的非负整数</a></td><td><a href="https://leetcode-cn.com/problems/non-negative-integers-without-consecutive-ones/solution/gong-shui-san-xie-jing-dian-shu-wei-dp-y-mh92/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩🤩</td></tr></tbody></table><h1 id="树形dp">树形DP</h1><table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/minimum-height-trees/">310.最小高度树</a></td><td><a href="https://leetcode-cn.com/problems/minimum-height-trees/solution/by-ac_oier-7xio/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>启发式搜索</title>
      <link href="/2022/04/17/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/"/>
      <url>/2022/04/17/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/word-ladder/">127.单词接龙</a></td><td><a href="https://leetcode-cn.com/problems/word-ladder/solution/gong-shui-san-xie-ru-he-shi-yong-shuang-magjd/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/zuma-game/">488.祖玛游戏</a></td><td><a href="https://leetcode-cn.com/problems/zuma-game/solution/gong-shui-san-xie-yi-ti-shuang-jie-sou-s-3ftb/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/open-the-lock/">752.打开转盘锁</a></td><td><a href="https://leetcode-cn.com/problems/open-the-lock/solution/gong-shui-san-xie-yi-ti-shuang-jie-shuan-wyr9/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/sliding-puzzle/">773.滑动谜题</a></td><td><a href="https://leetcode-cn.com/problems/sliding-puzzle/solution/gong-shui-san-xie-fa-hui-a-suan-fa-zui-d-3go8/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/shortest-path-visiting-all-nodes/">847.访问所有节点的最短路径</a></td><td><a href="https://leetcode-cn.com/problems/shortest-path-visiting-all-nodes/solution/gong-shui-san-xie-yi-ti-shuang-jie-bfs-z-6p2k/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/maximum-length-of-a-concatenated-string-with-unique-characters/">1239.串联字符串的最大长度</a></td><td><a href="https://leetcode-cn.com/problems/maximum-length-of-a-concatenated-string-with-unique-characters/solution/gong-shui-san-xie-yi-ti-san-jie-jian-zhi-nfeb/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/find-minimum-time-to-finish-all-jobs/">1723.完成所有工作的最短时间</a></td><td><a href="https://leetcode-cn.com/problems/find-minimum-time-to-finish-all-jobs/solution/gong-shui-san-xie-yi-ti-shuang-jie-jian-4epdd/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/second-minimum-time-to-reach-destination/">2045.到达目的地的第二短时间</a></td><td><a href="https://leetcode-cn.com/problems/second-minimum-time-to-reach-destination/solution/gong-shui-san-xie-yi-ti-shuang-jie-dui-y-88np/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 启发式搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并查集</title>
      <link href="/2022/04/17/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
      <url>/2022/04/17/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/couples-holding-hands/">765.情侣牵手</a></td><td><a href="https://leetcode-cn.com/problems/couples-holding-hands/solution/liang-chong-100-de-jie-fa-bing-cha-ji-ta-26a6/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/swim-in-rising-water/">778.水位上升的泳池中游泳</a></td><td><a href="https://leetcode-cn.com/problems/swim-in-rising-water/solution/gong-shui-san-xie-yi-ti-shuang-jie-krusk-7c6o/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/number-of-enclaves/">1020.飞地的数量</a></td><td><a href="https://leetcode-cn.com/problems/number-of-enclaves/solution/gong-shui-san-xie-bing-cha-ji-dfs-yun-yo-oyh1/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/path-with-minimum-effort/">1631.最小体力消耗路径</a></td><td><a href="https://leetcode-cn.com/problems/path-with-minimum-effort/solution/fan-zheng-fa-zheng-ming-si-lu-de-he-fa-x-ohby/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图论</title>
      <link href="/2022/04/17/%E5%9B%BE%E8%AE%BA/"/>
      <url>/2022/04/17/%E5%9B%BE%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="bfs">BFS</h1><table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/">17.电话号码的字母组合</a></td><td><a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/solution/shua-chuan-lc-dfs-hui-su-jie-fa-by-ac_oi-qa02/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/generate-parentheses/">22.括号生成</a></td><td><a href="https://leetcode-cn.com/problems/generate-parentheses/solution/shua-chuan-lc-dfs-jie-fa-by-ac_oier-nknl/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/sudoku-solver/">37.解数独</a></td><td><a href="https://leetcode-cn.com/problems/sudoku-solver/solution/he-n-huang-hou-yi-yang-shi-yi-dao-hui-su-lfpd/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/combination-sum/">39.组合总和</a></td><td><a href="https://leetcode-cn.com/problems/combination-sum/solution/dfs-hui-su-suan-fa-yi-ji-ru-he-que-ding-wpbo5/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/combination-sum-ii/">40.组合总和 II</a></td><td><a href="https://leetcode-cn.com/problems/combination-sum-ii/solution/dfs-hui-su-jie-fa-yi-ji-ru-he-pan-duan-s-xlwy/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/design-add-and-search-words-data-structure/">211.添加与搜索单词 - 数据结构设计</a></td><td><a href="https://leetcode-cn.com/problems/design-add-and-search-words-data-structure/solution/gong-shui-san-xie-yi-ti-shuang-jie-er-we-un94/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/expression-add-operators/">282.给表达式添加运算符</a></td><td><a href="https://leetcode-cn.com/problems/expression-add-operators/solution/gong-shui-san-xie-hui-su-suan-fa-yun-yon-nl9z/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/remove-invalid-parentheses/">301.删除无效的括号</a></td><td><a href="https://leetcode-cn.com/problems/remove-invalid-parentheses/solution/yi-fen-zhong-nei-kan-dong-jiang-gua-hao-aya6k/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/flatten-nested-list-iterator/">341.扁平化嵌套列表迭代器</a></td><td><a href="https://leetcode-cn.com/problems/flatten-nested-list-iterator/solution/yi-ti-shuang-jie-dfsdui-lie-di-gui-zhan-kvwhy/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/integer-replacement/">397.整数替换</a></td><td><a href="https://leetcode-cn.com/problems/integer-replacement/solution/gong-shui-san-xie-yi-ti-san-jie-dfsbfs-t-373h/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/frog-jump/">403.青蛙过河</a></td><td><a href="https://leetcode-cn.com/problems/frog-jump/solution/gong-shui-san-xie-yi-ti-duo-jie-jiang-di-74fw/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/path-sum-iii/">437.路径总和 III</a></td><td><a href="https://leetcode-cn.com/problems/path-sum-iii/solution/gong-shui-san-xie-yi-ti-shuang-jie-dfs-q-usa7/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/zuma-game/">488.祖玛游戏</a></td><td><a href="https://leetcode-cn.com/problems/zuma-game/solution/gong-shui-san-xie-yi-ti-shuang-jie-sou-s-3ftb/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/target-sum/">494.目标和</a></td><td><a href="https://leetcode-cn.com/problems/target-sum/solution/gong-shui-san-xie-yi-ti-si-jie-dfs-ji-yi-et5b/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/maximum-depth-of-n-ary-tree/">559.N 叉树的最大深度</a></td><td><a href="https://leetcode-cn.com/problems/maximum-depth-of-n-ary-tree/solution/gong-shui-san-xie-yi-ti-shuang-jie-dfs-b-n956/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/binary-tree-tilt/">563.二叉树的坡度</a></td><td><a href="https://leetcode-cn.com/problems/binary-tree-tilt/solution/gong-shui-san-xie-jian-dan-er-cha-shu-di-ekz4/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/n-ary-tree-preorder-traversal/">589.N 叉树的前序遍历</a></td><td><a href="https://leetcode-cn.com/problems/n-ary-tree-preorder-traversal/solution/gong-shui-san-xie-shu-de-sou-suo-yun-yon-pse1/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/n-ary-tree-postorder-traversal/">590.N 叉树的后序遍历</a></td><td><a href="https://leetcode-cn.com/problems/n-ary-tree-postorder-traversal/solution/by-ac_oier-ul7t/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/construct-string-from-binary-tree/">606.根据二叉树创建字符串</a></td><td><a href="https://leetcode-cn.com/problems/construct-string-from-binary-tree/solution/by-ac_oier-i2sk/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/shopping-offers/">638.大礼包</a></td><td><a href="https://leetcode-cn.com/problems/shopping-offers/solution/gong-shui-san-xie-yi-ti-shuang-jie-zhuan-qgk1/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/two-sum-iv-input-is-a-bst/">653.两数之和 IV - 输入 BST</a></td><td><a href="https://leetcode-cn.com/problems/two-sum-iv-input-is-a-bst/solution/by-ac_oier-zr4o/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/map-sum-pairs/">677.键值映射</a></td><td><a href="https://leetcode-cn.com/problems/map-sum-pairs/solution/gong-shui-san-xie-jie-he-dfs-de-trie-yun-i4xa/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/employee-importance/">690.员工的重要性</a></td><td><a href="https://leetcode-cn.com/problems/employee-importance/solution/gong-shui-san-xie-yi-ti-shuang-jie-di-gu-s79x/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/swim-in-rising-water/">778.水位上升的泳池中游泳</a></td><td><a href="https://leetcode-cn.com/problems/swim-in-rising-water/solution/gong-shui-san-xie-yi-ti-shuang-jie-krusk-7c6o/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/minimum-distance-between-bst-nodes/">783.二叉搜索树节点最小距离</a></td><td><a href="https://leetcode-cn.com/problems/minimum-distance-between-bst-nodes/solution/gong-shui-san-xie-yi-ti-san-jie-shu-de-s-7r17/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/reordered-power-of-2/">869.重新排序得到 2 的幂</a></td><td><a href="https://leetcode-cn.com/problems/reordered-power-of-2/solution/gong-shui-san-xie-yi-ti-shuang-jie-dfs-c-3s1e/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/leaf-similar-trees/">872.叶子相似的树</a></td><td><a href="https://leetcode-cn.com/problems/leaf-similar-trees/solution/gong-shui-san-xie-yi-ti-shuang-jie-di-gu-udfc/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/range-sum-of-bst/">938.二叉搜索树的范围和</a></td><td><a href="https://leetcode-cn.com/problems/range-sum-of-bst/solution/gong-shui-san-xie-yi-ti-shuang-jie-di-gu-q2fo/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/vertical-order-traversal-of-a-binary-tree/">987.二叉树的垂序遍历</a></td><td><a href="https://leetcode-cn.com/problems/vertical-order-traversal-of-a-binary-tree/solution/gong-shui-san-xie-yi-ti-shuang-jie-dfs-h-wfm3/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/cousins-in-binary-tree/">993.二叉树的堂兄弟节点</a></td><td><a href="https://leetcode-cn.com/problems/cousins-in-binary-tree/solution/gong-shui-san-xie-shu-de-sou-suo-dfs-bfs-b200/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/maximum-length-of-a-concatenated-string-with-unique-characters/">1239.串联字符串的最大长度</a></td><td><a href="https://leetcode-cn.com/problems/maximum-length-of-a-concatenated-string-with-unique-characters/solution/gong-shui-san-xie-yi-ti-san-jie-jian-zhi-nfeb/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/even-odd-tree/">1609.奇偶树</a></td><td><a href="https://leetcode-cn.com/problems/even-odd-tree/solution/gong-shui-san-xie-yi-ti-shuang-jie-bfs-d-kuyi/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/find-minimum-time-to-finish-all-jobs/">1723.完成所有工作的最短时间</a></td><td><a href="https://leetcode-cn.com/problems/find-minimum-time-to-finish-all-jobs/solution/gong-shui-san-xie-yi-ti-shuang-jie-jian-4epdd/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/tree-of-coprimes/">1766.互质树</a></td><td><a href="https://leetcode-cn.com/problems/tree-of-coprimes/solution/bu-tai-yi-yang-de-dfs-ji-lu-suo-you-zui-d3xeu/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/count-number-of-maximum-bitwise-or-subsets/">2044.统计按位或能得到最大值的子集数目</a></td><td><a href="https://leetcode-cn.com/problems/count-number-of-maximum-bitwise-or-subsets/solution/by-ac_oier-dos6/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr></tbody></table><h1 id="dfs">DFS</h1><table><colgroup><col style="width: 35%"><col style="width: 35%"><col style="width: 2%"><col style="width: 26%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/frog-jump/">403.青蛙过河</a></td><td><a href="https://leetcode-cn.com/problems/frog-jump/solution/gong-shui-san-xie-yi-ti-duo-jie-jiang-di-74fw/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/pacific-atlantic-water-flow/">417.太平洋大西洋水流问题</a></td><td><a href="https://leetcode-cn.com/problems/pacific-atlantic-water-flow/solution/dfshao-nan-wu-wu-by-dega-vu-3f2d/">Freedom的题解</a></td><td>中等</td><td>😻😻😻😻😻</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/swim-in-rising-water/">778.水位上升的泳池中游泳</a></td><td><a href="https://leetcode-cn.com/problems/swim-in-rising-water/solution/gong-shui-san-xie-yi-ti-shuang-jie-krusk-7c6o/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/all-paths-from-source-to-target/">797.所有可能的路径</a></td><td><a href="https://leetcode-cn.com/problems/all-paths-from-source-to-target/solution/gong-shui-san-xie-yun-yong-dfs-bao-sou-s-xlz9/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/all-nodes-distance-k-in-binary-tree/">863.二叉树中所有距离为 K 的结点</a></td><td><a href="https://leetcode-cn.com/problems/all-nodes-distance-k-in-binary-tree/solution/gong-shui-san-xie-yi-ti-shuang-jie-jian-x6hak/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/number-of-enclaves/">1020.飞地的数量</a></td><td><a href="https://leetcode-cn.com/problems/number-of-enclaves/solution/gong-shui-san-xie-bing-cha-ji-dfs-yun-yo-oyh1/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/coloring-a-border/">1034.边界着色</a></td><td><a href="https://leetcode-cn.com/problems/coloring-a-border/solution/gong-shui-san-xie-tu-lun-sou-suo-zhuan-t-snvw/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/find-minimum-time-to-finish-all-jobs/">1723.完成所有工作的最短时间</a></td><td><a href="https://leetcode-cn.com/problems/find-minimum-time-to-finish-all-jobs/solution/gong-shui-san-xie-yi-ti-shuang-jie-jian-4epdd/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/tree-of-coprimes/">1766.互质树</a></td><td><a href="https://leetcode-cn.com/problems/tree-of-coprimes/solution/bu-tai-yi-yang-de-dfs-ji-lu-suo-you-zui-d3xeu/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/count-nodes-with-the-highest-score/">2049.统计最高分的节点数目</a></td><td><a href="https://leetcode-cn.com/problems/count-nodes-with-the-highest-score/solution/gong-shui-san-xie-jian-tu-dfs-by-ac_oier-ujfo/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/chuan-di-xin-xi/">LCP 07.传递信息</a></td><td><a href="https://leetcode-cn.com/problems/chuan-di-xin-xi/solution/gong-shui-san-xie-tu-lun-sou-suo-yu-dong-cyxo/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr></tbody></table><h1 id="拓扑排序">拓扑排序</h1><table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/find-eventual-safe-states/">802.找到最终的安全状态</a></td><td><a href="https://leetcode-cn.com/problems/find-eventual-safe-states/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-isy6u/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/loud-and-rich/">851.喧闹和富有</a></td><td><a href="https://leetcode-cn.com/problems/loud-and-rich/solution/gong-shui-san-xie-tuo-bu-pai-xu-yun-yong-ylih/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr></tbody></table><h1 id="最短路">最短路</h1><table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/trapping-rain-water-ii/">407.接雨水 II</a></td><td><a href="https://leetcode-cn.com/problems/trapping-rain-water-ii/solution/gong-shui-san-xie-jing-dian-dijkstra-yun-13ik/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/network-delay-time/">743.网络延迟时间</a></td><td><a href="https://leetcode-cn.com/problems/network-delay-time/solution/gong-shui-san-xie-yi-ti-wu-jie-wu-chong-oghpz/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/cheapest-flights-within-k-stops/">787.K 站中转内最便宜的航班</a></td><td><a href="https://leetcode-cn.com/problems/cheapest-flights-within-k-stops/solution/gong-shui-san-xie-xiang-jie-bellman-ford-dc94/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/path-with-minimum-effort/">1631.最小体力消耗路径</a></td><td><a href="https://leetcode-cn.com/problems/path-with-minimum-effort/solution/fan-zheng-fa-zheng-ming-si-lu-de-he-fa-x-ohby/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/number-of-restricted-paths-from-first-to-last-node/">1786.从第一个节点出发到最后一个节点的受限路径数</a></td><td><a href="https://leetcode-cn.com/problems/number-of-restricted-paths-from-first-to-last-node/solution/xiang-jie-dui-you-hua-dijkstra-dong-tai-i6j0d/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/second-minimum-time-to-reach-destination/">2045.到达目的地的第二短时间</a></td><td><a href="https://leetcode-cn.com/problems/second-minimum-time-to-reach-destination/solution/gong-shui-san-xie-yi-ti-shuang-jie-dui-y-88np/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr></tbody></table><h1 id="最小生成树">最小生成树</h1><table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/swim-in-rising-water/">778.水位上升的泳池中游泳</a></td><td><a href="https://leetcode-cn.com/problems/swim-in-rising-water/solution/gong-shui-san-xie-yi-ti-shuang-jie-krusk-7c6o/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/path-with-minimum-effort/">1631.最小体力消耗路径</a></td><td><a href="https://leetcode-cn.com/problems/path-with-minimum-effort/solution/fan-zheng-fa-zheng-ming-si-lu-de-he-fa-x-ohby/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归 &amp; 迭代</title>
      <link href="/2022/04/17/%E9%80%92%E5%BD%92-%E8%BF%AD%E4%BB%A3/"/>
      <url>/2022/04/17/%E9%80%92%E5%BD%92-%E8%BF%AD%E4%BB%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="bfs">BFS</h2><table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/subsets-ii/">90. 子集II</a></td><td><a href="https://leetcode-cn.com/problems/subsets-ii/solution/gong-shui-san-xie-yi-ti-shuang-jie-hui-s-g77q/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/">297.二叉树的序列化与反序列化</a></td><td><a href="https://leetcode-cn.com/problems/xu-lie-hua-er-cha-shu-lcof/solution/gong-shui-san-xie-er-cha-shu-de-xu-lie-h-n89a/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/integer-replacement/">397.整数替换</a></td><td><a href="https://leetcode-cn.com/problems/integer-replacement/solution/gong-shui-san-xie-yi-ti-san-jie-dfsbfs-t-373h/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/frog-jump/">403.青蛙过河</a></td><td><a href="https://leetcode-cn.com/problems/frog-jump/solution/gong-shui-san-xie-yi-ti-duo-jie-jiang-di-74fw/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/maximum-depth-of-n-ary-tree/">559.N 叉树的最大深度</a></td><td><a href="https://leetcode-cn.com/problems/maximum-depth-of-n-ary-tree/solution/gong-shui-san-xie-yi-ti-shuang-jie-dfs-b-n956/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/n-ary-tree-preorder-traversal/">589.N 叉树的前序遍历</a></td><td><a href="https://leetcode-cn.com/problems/n-ary-tree-preorder-traversal/solution/gong-shui-san-xie-shu-de-sou-suo-yun-yon-pse1/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/n-ary-tree-postorder-traversal/">590.N 叉树的后序遍历</a></td><td><a href="https://leetcode-cn.com/problems/n-ary-tree-postorder-traversal/solution/by-ac_oier-ul7t/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/employee-importance/">690.员工的重要性</a></td><td><a href="https://leetcode-cn.com/problems/employee-importance/solution/gong-shui-san-xie-yi-ti-shuang-jie-di-gu-s79x/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/swim-in-rising-water/">778.水位上升的泳池中游泳</a></td><td><a href="https://leetcode-cn.com/problems/swim-in-rising-water/solution/gong-shui-san-xie-yi-ti-shuang-jie-krusk-7c6o/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/minimum-distance-between-bst-nodes/">783.二叉搜索树节点最小距离</a></td><td><a href="https://leetcode-cn.com/problems/minimum-distance-between-bst-nodes/solution/gong-shui-san-xie-yi-ti-san-jie-shu-de-s-7r17/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/push-dominoes/">838.推多米诺</a></td><td><a href="https://leetcode-cn.com/problems/push-dominoes/solution/gong-shui-san-xie-yi-ti-shuang-jie-bfs-y-z52w/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/range-sum-of-bst/">938.二叉搜索树的范围和</a></td><td><a href="https://leetcode-cn.com/problems/range-sum-of-bst/solution/gong-shui-san-xie-yi-ti-shuang-jie-di-gu-q2fo/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/cousins-in-binary-tree/">993.二叉树的堂兄弟节点</a></td><td><a href="https://leetcode-cn.com/problems/cousins-in-binary-tree/solution/gong-shui-san-xie-shu-de-sou-suo-dfs-bfs-b200/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/even-odd-tree/">1609.奇偶树</a></td><td><a href="https://leetcode-cn.com/problems/even-odd-tree/solution/gong-shui-san-xie-yi-ti-shuang-jie-bfs-d-kuyi/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr></tbody></table><h2 id="dfs">DFS</h2><table><colgroup><col style="width: 37%"><col style="width: 37%"><col style="width: 2%"><col style="width: 22%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/">17.电话号码的字母组合</a></td><td><a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/solution/shua-chuan-lc-dfs-hui-su-jie-fa-by-ac_oi-qa02/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/generate-parentheses/">22.括号生成</a></td><td><a href="https://leetcode-cn.com/problems/generate-parentheses/solution/shua-chuan-lc-dfs-jie-fa-by-ac_oier-nknl/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/sudoku-solver/">37.解数独</a></td><td><a href="https://leetcode-cn.com/problems/sudoku-solver/solution/he-n-huang-hou-yi-yang-shi-yi-dao-hui-su-lfpd/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/combination-sum/">39.组合总和</a></td><td><a href="https://leetcode-cn.com/problems/combination-sum/solution/dfs-hui-su-suan-fa-yi-ji-ru-he-que-ding-wpbo5/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/combination-sum-ii/">40.组合总和 II</a></td><td><a href="https://leetcode-cn.com/problems/combination-sum-ii/solution/dfs-hui-su-jie-fa-yi-ji-ru-he-pan-duan-s-xlwy/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/design-add-and-search-words-data-structure/">211.添加与搜索单词 - 数据结构设计</a></td><td><a href="https://leetcode-cn.com/problems/design-add-and-search-words-data-structure/solution/gong-shui-san-xie-yi-ti-shuang-jie-er-we-un94/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/expression-add-operators/">282.给表达式添加运算符</a></td><td><a href="https://leetcode-cn.com/problems/expression-add-operators/solution/gong-shui-san-xie-hui-su-suan-fa-yun-yon-nl9z/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/remove-invalid-parentheses/">301.删除无效的括号</a></td><td><a href="https://leetcode-cn.com/problems/remove-invalid-parentheses/solution/yi-fen-zhong-nei-kan-dong-jiang-gua-hao-aya6k/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/flatten-nested-list-iterator/">341.扁平化嵌套列表迭代器</a></td><td><a href="https://leetcode-cn.com/problems/flatten-nested-list-iterator/solution/yi-ti-shuang-jie-dfsdui-lie-di-gui-zhan-kvwhy/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/integer-replacement/">397.整数替换</a></td><td><a href="https://leetcode-cn.com/problems/integer-replacement/solution/gong-shui-san-xie-yi-ti-san-jie-dfsbfs-t-373h/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/frog-jump/">403.青蛙过河</a></td><td><a href="https://leetcode-cn.com/problems/frog-jump/solution/gong-shui-san-xie-yi-ti-duo-jie-jiang-di-74fw/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/construct-quad-tree/">427.建立四叉树</a></td><td><a href="https://leetcode-cn.com/problems/construct-quad-tree/solution/di-gui-by-dega-vu-ny88/">Freedom的题解</a></td><td>中等</td><td>😻😻😻😻</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/path-sum-iii/">437.路径总和 III</a></td><td><a href="https://leetcode-cn.com/problems/path-sum-iii/solution/gong-shui-san-xie-yi-ti-shuang-jie-dfs-q-usa7/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/zuma-game/">488.祖玛游戏</a></td><td><a href="https://leetcode-cn.com/problems/zuma-game/solution/gong-shui-san-xie-yi-ti-shuang-jie-sou-s-3ftb/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/target-sum/">494.目标和</a></td><td><a href="https://leetcode-cn.com/problems/target-sum/solution/gong-shui-san-xie-yi-ti-si-jie-dfs-ji-yi-et5b/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/maximum-depth-of-n-ary-tree/">559.N 叉树的最大深度</a></td><td><a href="https://leetcode-cn.com/problems/maximum-depth-of-n-ary-tree/solution/gong-shui-san-xie-yi-ti-shuang-jie-dfs-b-n956/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/binary-tree-tilt/">563.二叉树的坡度</a></td><td><a href="https://leetcode-cn.com/problems/binary-tree-tilt/solution/gong-shui-san-xie-jian-dan-er-cha-shu-di-ekz4/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/n-ary-tree-preorder-traversal/">589.N 叉树的前序遍历</a></td><td><a href="https://leetcode-cn.com/problems/n-ary-tree-preorder-traversal/solution/gong-shui-san-xie-shu-de-sou-suo-yun-yon-pse1/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/n-ary-tree-postorder-traversal/">590.N 叉树的后序遍历</a></td><td><a href="https://leetcode-cn.com/problems/n-ary-tree-postorder-traversal/solution/by-ac_oier-ul7t/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/construct-string-from-binary-tree/">606.根据二叉树创建字符串</a></td><td><a href="https://leetcode-cn.com/problems/construct-string-from-binary-tree/solution/by-ac_oier-i2sk/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/shopping-offers/">638.大礼包</a></td><td><a href="https://leetcode-cn.com/problems/shopping-offers/solution/gong-shui-san-xie-yi-ti-shuang-jie-zhuan-qgk1/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/two-sum-iv-input-is-a-bst/">653.两数之和 IV - 输入 BST</a></td><td><a href="https://leetcode-cn.com/problems/two-sum-iv-input-is-a-bst/solution/by-ac_oier-zr4o/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/map-sum-pairs/">677.键值映射</a></td><td><a href="https://leetcode-cn.com/problems/map-sum-pairs/solution/gong-shui-san-xie-jie-he-dfs-de-trie-yun-i4xa/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/employee-importance/">690.员工的重要性</a></td><td><a href="https://leetcode-cn.com/problems/employee-importance/solution/gong-shui-san-xie-yi-ti-shuang-jie-di-gu-s79x/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/swim-in-rising-water/">778.水位上升的泳池中游泳</a></td><td><a href="https://leetcode-cn.com/problems/swim-in-rising-water/solution/gong-shui-san-xie-yi-ti-shuang-jie-krusk-7c6o/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/minimum-distance-between-bst-nodes/">783.二叉搜索树节点最小距离</a></td><td><a href="https://leetcode-cn.com/problems/minimum-distance-between-bst-nodes/solution/gong-shui-san-xie-yi-ti-san-jie-shu-de-s-7r17/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/reordered-power-of-2/">869.重新排序得到 2 的幂</a></td><td><a href="https://leetcode-cn.com/problems/reordered-power-of-2/solution/gong-shui-san-xie-yi-ti-shuang-jie-dfs-c-3s1e/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/leaf-similar-trees/">872.叶子相似的树</a></td><td><a href="https://leetcode-cn.com/problems/leaf-similar-trees/solution/gong-shui-san-xie-yi-ti-shuang-jie-di-gu-udfc/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/range-sum-of-bst/">938.二叉搜索树的范围和</a></td><td><a href="https://leetcode-cn.com/problems/range-sum-of-bst/solution/gong-shui-san-xie-yi-ti-shuang-jie-di-gu-q2fo/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/vertical-order-traversal-of-a-binary-tree/">987.二叉树的垂序遍历</a></td><td><a href="https://leetcode-cn.com/problems/vertical-order-traversal-of-a-binary-tree/solution/gong-shui-san-xie-yi-ti-shuang-jie-dfs-h-wfm3/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/cousins-in-binary-tree/">993.二叉树的堂兄弟节点</a></td><td><a href="https://leetcode-cn.com/problems/cousins-in-binary-tree/solution/gong-shui-san-xie-shu-de-sou-suo-dfs-bfs-b200/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/maximum-length-of-a-concatenated-string-with-unique-characters/">1239.串联字符串的最大长度</a></td><td><a href="https://leetcode-cn.com/problems/maximum-length-of-a-concatenated-string-with-unique-characters/solution/gong-shui-san-xie-yi-ti-san-jie-jian-zhi-nfeb/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/even-odd-tree/">1609.奇偶树</a></td><td><a href="https://leetcode-cn.com/problems/even-odd-tree/solution/gong-shui-san-xie-yi-ti-shuang-jie-bfs-d-kuyi/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/find-minimum-time-to-finish-all-jobs/">1723.完成所有工作的最短时间</a></td><td><a href="https://leetcode-cn.com/problems/find-minimum-time-to-finish-all-jobs/solution/gong-shui-san-xie-yi-ti-shuang-jie-jian-4epdd/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/tree-of-coprimes/">1766.互质树</a></td><td><a href="https://leetcode-cn.com/problems/tree-of-coprimes/solution/bu-tai-yi-yang-de-dfs-ji-lu-suo-you-zui-d3xeu/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/count-number-of-maximum-bitwise-or-subsets/">2044.统计按位或能得到最大值的子集数目</a></td><td><a href="https://leetcode-cn.com/problems/count-number-of-maximum-bitwise-or-subsets/solution/by-ac_oier-dos6/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 迭代 &amp; 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪心算法</title>
      <link href="/2022/04/17/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
      <url>/2022/04/17/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/container-with-most-water/">11.盛最多水的容器</a></td><td><a href="https://leetcode-cn.com/problems/container-with-most-water/solution/shua-chuan-lc-shuang-zhi-zhen-tan-xin-ji-52gf/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/jump-game-ii/">45.跳跃游戏 II</a></td><td><a href="https://leetcode-cn.com/problems/jump-game-ii/solution/xiang-jie-dp-tan-xin-shuang-zhi-zhen-jie-roh4/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/largest-number/">179.最大数</a></td><td><a href="https://leetcode-cn.com/problems/largest-number/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-vn86e/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/increasing-triplet-subsequence/">334.递增的三元子序列</a></td><td><a href="https://leetcode-cn.com/problems/increasing-triplet-subsequence/solution/gong-shui-san-xie-zui-chang-shang-sheng-xa08h/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/integer-replacement/">397.整数替换</a></td><td><a href="https://leetcode-cn.com/problems/integer-replacement/solution/gong-shui-san-xie-yi-ti-san-jie-dfsbfs-t-373h/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/maximum-xor-of-two-numbers-in-an-array/">421.数组中两个数的最大异或值</a></td><td><a href="https://leetcode-cn.com/problems/maximum-xor-of-two-numbers-in-an-array/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-bmjdg/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/ipo/">502. IPO</a></td><td><a href="https://leetcode-cn.com/problems/ipo/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-fk1ra/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/super-washing-machines/">517.超级洗衣机</a></td><td><a href="https://leetcode-cn.com/problems/super-washing-machines/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-mzqia/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/longest-word-in-dictionary-through-deleting/">524.通过删除字母匹配到字典里最长单词</a></td><td><a href="https://leetcode-cn.com/problems/longest-word-in-dictionary-through-deleting/solution/gong-shui-san-xie-xiang-jie-pai-xu-shuan-qi20/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/optimal-division/">553.最优除法</a></td><td><a href="https://leetcode-cn.com/problems/optimal-division/solution/gong-shui-san-xie-shu-xue-lei-tan-xin-yu-61sq/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/array-partition-i/">561.数组拆分 I</a></td><td><a href="https://leetcode-cn.com/problems/array-partition-i/solution/jue-dui-neng-kan-dong-de-zheng-ming-fan-f7trz/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/find-the-closest-palindrome/">564.寻找最近的回文数</a></td><td><a href="https://leetcode-cn.com/problems/find-the-closest-palindrome/solution/gong-shui-san-xie-tan-xin-fen-xi-shang-x-vtr6/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/distribute-candies/">575.分糖果</a></td><td><a href="https://leetcode-cn.com/problems/distribute-candies/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-pjjxo/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/course-schedule-iii/">630.课程表 III</a></td><td><a href="https://leetcode-cn.com/problems/course-schedule-iii/solution/gong-shui-san-xie-jing-dian-tan-xin-yun-ghii2/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/couples-holding-hands/">765.情侣牵手</a></td><td><a href="https://leetcode-cn.com/problems/couples-holding-hands/solution/liang-chong-100-de-jie-fa-bing-cha-ji-ta-26a6/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/rabbits-in-forest/">781.森林中的兔子</a></td><td><a href="https://leetcode-cn.com/problems/rabbits-in-forest/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-v17p5/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/max-increase-to-keep-city-skyline/">807.保持城市天际线</a></td><td><a href="https://leetcode-cn.com/problems/max-increase-to-keep-city-skyline/solution/gong-shui-san-xie-jian-dan-tan-xin-yun-y-2f47/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/boats-to-save-people/">881.救生艇</a></td><td><a href="https://leetcode-cn.com/problems/boats-to-save-people/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-hosg8/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/minimum-number-of-k-consecutive-bit-flips/">995.K 连续位的最小翻转次数</a></td><td><a href="https://leetcode-cn.com/problems/minimum-number-of-k-consecutive-bit-flips/solution/po-su-tan-xin-jie-fa-yu-tan-xin-chai-fen-4lyy/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/maximize-sum-of-array-after-k-negations/">1005.K 次取反后最大化的数组和</a></td><td><a href="https://leetcode-cn.com/problems/maximize-sum-of-array-after-k-negations/solution/gong-shui-san-xie-jian-dan-fen-qing-kuan-6qwu/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/longest-arithmetic-subsequence-of-given-difference/">1218.最长定差子序列</a></td><td><a href="https://leetcode-cn.com/problems/longest-arithmetic-subsequence-of-given-difference/solution/gong-shui-san-xie-jie-he-tan-xin-de-zhua-dj1k/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/split-a-string-in-balanced-strings/">1221.分割平衡字符串</a></td><td><a href="https://leetcode-cn.com/problems/split-a-string-in-balanced-strings/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-wumnk/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/longest-happy-string/">1405.最长快乐字符串</a></td><td><a href="https://leetcode-cn.com/problems/longest-happy-string/solution/gong-shui-san-xie-jie-he-you-xian-dui-li-q6fd/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/find-the-minimum-number-of-fibonacci-numbers-whose-sum-is-k/">1414.和为 K 的最少斐波那契数字数目</a></td><td><a href="https://leetcode-cn.com/problems/find-the-minimum-number-of-fibonacci-numbers-whose-sum-is-k/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-rgty8/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/maximum-number-of-eaten-apples/">1705.吃苹果的最大数目</a></td><td><a href="https://leetcode-cn.com/problems/maximum-number-of-eaten-apples/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-hfdy0/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/maximum-xor-with-an-element-from-array/">1707.与数组中元素的最大异或值</a></td><td><a href="https://leetcode-cn.com/problems/maximum-xor-with-an-element-from-array/solution/gong-shui-san-xie-jie-zhe-ge-wen-ti-lai-lypqr/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/minimum-operations-to-make-a-subsequence/">1713.得到子序列的最少操作次数</a></td><td><a href="https://leetcode-cn.com/problems/minimum-operations-to-make-a-subsequence/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-oj7yu/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/latest-time-by-replacing-hidden-digits/">1736.替换隐藏数字得到的最晚时间</a></td><td><a href="https://leetcode-cn.com/problems/latest-time-by-replacing-hidden-digits/solution/gong-shui-san-xie-ti-huan-yin-cang-shu-z-2l1h/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/maximum-ice-cream-bars/">1833.雪糕的最大数量</a></td><td><a href="https://leetcode-cn.com/problems/maximum-ice-cream-bars/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-yrhjx/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/maximum-element-after-decreasing-and-rearranging/">1846.减小和重新排列数组后的最大元素</a></td><td><a href="https://leetcode-cn.com/problems/maximum-element-after-decreasing-and-rearranging/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-yh9qt/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/minimize-maximum-pair-sum-in-array/">1877.数组中最大数对和的最小值</a></td><td><a href="https://leetcode-cn.com/problems/minimize-maximum-pair-sum-in-array/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-ru29y/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/the-number-of-weak-characters-in-the-game/">1996.游戏中弱角色的数量</a></td><td><a href="https://leetcode-cn.com/problems/the-number-of-weak-characters-in-the-game/solution/gong-shui-san-xie-tan-xin-yun-yong-ti-by-5ok6/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/minimum-operations-to-make-the-array-alternating/">2170.使数组变成交替数组的最少操作数</a></td><td><a href="https://leetcode-cn.com/problems/minimum-operations-to-make-the-array-alternating/solution/gong-shui-san-xie-jian-dan-ji-shu-lei-ta-0eo4/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回溯算法</title>
      <link href="/2022/04/17/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
      <url>/2022/04/17/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<table><colgroup><col style="width: 37%"><col style="width: 37%"><col style="width: 2%"><col style="width: 22%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/">17.电话号码的字母组合</a></td><td><a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/solution/hui-su-suan-fa-by-dega-vu-01wv/">Freedom的题解</a></td><td>中等</td><td>😻😻😻😻</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/sudoku-solver/">37.解数独</a></td><td><a href="https://leetcode-cn.com/problems/sudoku-solver/solution/he-n-huang-hou-yi-yang-shi-yi-dao-hui-su-lfpd/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/combination-sum/">39.组合总和</a></td><td><a href="https://leetcode-cn.com/problems/combination-sum/solution/dfs-hui-su-suan-fa-yi-ji-ru-he-que-ding-wpbo5/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/combination-sum-ii/">40.组合总和 II</a></td><td><a href="https://leetcode-cn.com/problems/combination-sum-ii/solution/dfs-hui-su-jie-fa-yi-ji-ru-he-pan-duan-s-xlwy/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/subsets-ii/">90. 子集II</a></td><td><a href="https://leetcode-cn.com/problems/subsets-ii/solution/gong-shui-san-xie-yi-ti-shuang-jie-hui-s-g77q/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/palindrome-partitioning/">131.分割回文串</a></td><td><a href="https://leetcode-cn.com/problems/palindrome-partitioning/solution/wei-sha-yao-zhe-yang-bao-sou-ya-shi-ru-h-41gf/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/word-search-ii/">212.单词搜索 II</a></td><td><a href="https://leetcode-cn.com/problems/word-search-ii/solution/gong-shui-san-xie-yi-ti-shuang-jie-hui-s-am8f/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/remove-invalid-parentheses/">301.删除无效的括号</a></td><td><a href="https://leetcode-cn.com/problems/remove-invalid-parentheses/solution/yi-fen-zhong-nei-kan-dong-jiang-gua-hao-aya6k/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/additive-number/">306.累加数</a></td><td><a href="https://leetcode-cn.com/problems/additive-number/solution/gong-shui-san-xie-hui-su-gao-jing-du-jia-6o6b/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/all-paths-from-source-to-target/">797.所有可能的路径</a></td><td><a href="https://leetcode-cn.com/problems/all-paths-from-source-to-target/solution/gong-shui-san-xie-yun-yong-dfs-bao-sou-s-xlz9/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/path-with-maximum-gold/">1219.黄金矿工</a></td><td><a href="https://leetcode-cn.com/problems/path-with-maximum-gold/solution/gong-shui-san-xie-hui-su-suan-fa-yun-yon-scxo/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/zi-fu-chuan-de-pai-lie-lcof/">剑指Offer 38. 字符串的排列</a></td><td><a href="https://leetcode-cn.com/problems/zi-fu-chuan-de-pai-lie-lcof/solution/gong-shui-san-xie-tong-yong-shi-xian-qu-4jbkj/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树的搜索</title>
      <link href="/2022/04/17/%E6%A0%91%E7%9A%84%E6%90%9C%E7%B4%A2/"/>
      <url>/2022/04/17/%E6%A0%91%E7%9A%84%E6%90%9C%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th>题目</th><th>题解</th><th>难度</th><th>推荐指数</th></tr></thead><tbody><tr class="odd"><td><a href="https://leetcode-cn.com/problems/search-a-2d-matrix/">74.搜索二维矩阵</a></td><td><a href="https://leetcode-cn.com/problems/search-a-2d-matrix/solution/gong-shui-san-xie-yi-ti-shuang-jie-er-fe-l0pq/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/binary-search-tree-iterator/">173.二叉搜索树迭代器</a></td><td><a href="https://leetcode-cn.com/problems/binary-search-tree-iterator/solution/xiang-jie-ru-he-dui-die-dai-ban-de-zhong-4rxj/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/verify-preorder-serialization-of-a-binary-tree/">331.验证二叉树的前序序列化</a></td><td><a href="https://leetcode-cn.com/problems/verify-preorder-serialization-of-a-binary-tree/solution/xiang-xin-ke-xue-xi-lie-xiang-jie-zhi-gu-e3y9/">LeetCode题解链接</a></td><td>中等</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/two-sum-iv-input-is-a-bst/">653.两数之和 IV - 输入 BST</a></td><td><a href="https://leetcode-cn.com/problems/two-sum-iv-input-is-a-bst/solution/by-ac_oier-zr4o/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/n-ary-tree-preorder-traversal/">589.N 叉树的前序遍历</a></td><td><a href="https://leetcode-cn.com/problems/n-ary-tree-preorder-traversal/solution/gong-shui-san-xie-shu-de-sou-suo-yun-yon-pse1/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/n-ary-tree-postorder-traversal/">590.N 叉树的后序遍历</a></td><td><a href="https://leetcode-cn.com/problems/n-ary-tree-postorder-traversal/solution/by-ac_oier-ul7t/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/second-minimum-node-in-a-binary-tree/">671.二叉树中第二小的节点</a></td><td><a href="https://leetcode-cn.com/problems/second-minimum-node-in-a-binary-tree/solution/gong-shui-san-xie-yi-ti-shuang-jie-shu-d-eupu/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/search-in-a-binary-search-tree/">700.二叉搜索树中的搜索</a></td><td><a href="https://leetcode-cn.com/problems/search-in-a-binary-search-tree/solution/gong-shui-san-xie-er-cha-shu-de-sou-suo-8z7hj/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/swim-in-rising-water/">778.水位上升的泳池中游泳</a></td><td><a href="https://leetcode-cn.com/problems/swim-in-rising-water/solution/gong-shui-san-xie-yi-ti-shuang-jie-krusk-7c6o/">LeetCode题解链接</a></td><td>困难</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/minimum-distance-between-bst-nodes/">783.二叉搜索树节点最小距离</a></td><td><a href="https://leetcode-cn.com/problems/minimum-distance-between-bst-nodes/solution/gong-shui-san-xie-yi-ti-san-jie-shu-de-s-7r17/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/leaf-similar-trees/">872.叶子相似的树</a></td><td><a href="https://leetcode-cn.com/problems/leaf-similar-trees/solution/gong-shui-san-xie-yi-ti-shuang-jie-di-gu-udfc/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/increasing-order-search-tree/">897.递增顺序搜索树</a></td><td><a href="https://leetcode-cn.com/problems/increasing-order-search-tree/solution/gong-shui-san-xie-yi-ti-shuang-jie-di-gu-yc8l/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩🤩</td></tr><tr class="odd"><td><a href="https://leetcode-cn.com/problems/range-sum-of-bst/">938.二叉搜索树的范围和</a></td><td><a href="https://leetcode-cn.com/problems/range-sum-of-bst/solution/gong-shui-san-xie-yi-ti-shuang-jie-di-gu-q2fo/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩🤩</td></tr><tr class="even"><td><a href="https://leetcode-cn.com/problems/cousins-in-binary-tree/">993.二叉树的堂兄弟节点</a></td><td><a href="https://leetcode-cn.com/problems/cousins-in-binary-tree/solution/gong-shui-san-xie-shu-de-sou-suo-dfs-bfs-b200/">LeetCode题解链接</a></td><td>简单</td><td>🤩🤩</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 树的搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分</title>
      <link href="/2022/04/17/%E4%BA%8C%E5%88%86/"/>
      <url>/2022/04/17/%E4%BA%8C%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p>😻</p><table><colgroup><col style="width: 35%"><col style="width: 35%"><col style="width: 2%"><col style="width: 26%"></colgroup><thead><tr class="header"><th style="text-align: center;">题目</th><th style="text-align: center;">题解</th><th style="text-align: center;">难度</th><th style="text-align: center;">推荐指数</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/">4.寻找两个正序数组的中位数</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/er-fen-hao-nan-by-dega-vu-2brc/">Freedom的题解</a></td><td style="text-align: center;">困难</td><td style="text-align: center;">😻😻😻😻</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/divide-two-integers/">29.两数相除</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/divide-two-integers/solution/by-dega-vu-3eh6/">Freedom的题解</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">😻😻😻</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array/">33.搜索旋转排序数组</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array/solution/by-dega-vu-qvlq/">Freedom的题解</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">😻😻😻😻😻</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/">34.在排序数组中查找元素的第一个和最后一个位置</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/solution/jing-dian-er-fen-fa-by-dega-vu-8oog/">Freedom的题解</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">😻😻😻😻😻</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/search-insert-position/">35.搜索插入位置</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/search-insert-position/solution/er-fen-mo-ban-ti-by-dega-vu-z3iz/">Freedom的题解</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">😻😻😻😻😻</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/search-a-2d-matrix/">74.搜索二维矩阵</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/search-a-2d-matrix/solution/liang-ci-er-fen-by-dega-vu-hv41/">Freedom的题解</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">😻😻😻😻</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array-ii/">81.搜索旋转排序数组 II</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array-ii/solution/bi-xu-xian-pai-chu-by-dega-vu-nmg3/">Freedom的题解</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">😻😻😻😻</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/">153.寻找旋转排序数组中的最小值</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/solution/g-by-dega-vu-ih1w/">Freedom的题解</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">😻😻😻</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array-ii/">154.寻找旋转排序数组中的最小值 II</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array-ii/solution/gong-shui-san-xie-xiang-jie-wei-he-yuan-7xbty/">Freedom的题解</a></td><td style="text-align: center;">困难</td><td style="text-align: center;">😻😻😻</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/find-peak-element/">162.寻找峰值</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/find-peak-element/solution/by-dega-vu-w0tl/">Freedom的题解</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">😻😻😻😻😻</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/contains-duplicate-iii/">220.存在重复元素 III</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/contains-duplicate-iii/solution/hua-dong-chuang-kou-by-dega-vu-gjep/">Freedom的题解</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">😻😻😻</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/search-a-2d-matrix-ii/">240.搜索二维矩阵 II</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/search-a-2d-matrix-ii/solution/er-fen-or-bfs-by-dega-vu-953l/">Freedom的题解</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">😻😻😻😻</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/h-index/">274. H 指数</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/h-index/solution/er-fen-zhu-yi-bian-jie-by-dega-vu-acfh/">Freedom的题解</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">😻😻😻</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/h-index-ii/">275. H 指数II</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/h-index-ii/solution/you-hua-by-dega-vu-jli2/">Freedom的题解</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">😻😻😻</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/first-bad-version/">278.第一个错误的版本</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/first-bad-version/solution/er-fen-by-dega-vu-8vz1/">Freedom的题解</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">😻😻😻</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/increasing-triplet-subsequence/">334.递增的三元子序列</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/increasing-triplet-subsequence/solution/tan-xin-by-dega-vu-3czp/">Freedom的题解</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">😻😻😻😻</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/data-stream-as-disjoint-intervals/">352.将数据流变为多个不相交区间</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/data-stream-as-disjoint-intervals/solution/gong-shui-san-xie-yi-ti-shuang-jie-er-fe-afrk/">LeetCode题解链接</a></td><td style="text-align: center;">困难</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/russian-doll-envelopes/">354.俄罗斯套娃信封问题</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/russian-doll-envelopes/solution/zui-chang-shang-sheng-zi-xu-lie-bian-xin-6s8d/">LeetCode题解链接</a></td><td style="text-align: center;">困难</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/max-sum-of-rectangle-no-larger-than-k/">363.矩形区域不超过 K 的最大数值和</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/max-sum-of-rectangle-no-larger-than-k/solution/gong-shui-san-xie-you-hua-mei-ju-de-ji-b-dh8s/">LeetCode题解链接</a></td><td style="text-align: center;">困难</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/valid-perfect-square/">367.有效的完全平方数</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/valid-perfect-square/solution/gong-shui-san-xie-yi-ti-shuang-jie-er-fe-g5el/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/find-k-pairs-with-smallest-sums/">373.查找和最小的K对数字</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/find-k-pairs-with-smallest-sums/solution/gong-shui-san-xie-duo-lu-gui-bing-yun-yo-pgw5/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/guess-number-higher-or-lower/">374.猜数字大小</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/guess-number-higher-or-lower/solution/gong-shui-san-xie-shi-yong-jiao-hu-han-s-tocm/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/arranging-coins/">441.排列硬币</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/arranging-coins/solution/gong-shui-san-xie-yi-ti-shuang-jie-shu-x-sv9o/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/heaters/">475. 供暖器</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/heaters/solution/gong-shui-san-xie-er-fen-shuang-zhi-zhen-mys4/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/random-pick-with-weight/">528.按权重随机选择</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/random-pick-with-weight/solution/gong-shui-san-xie-yi-ti-shuang-jie-qian-8bx50/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/single-element-in-a-sorted-array/">540.有序数组中的单一元素</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/single-element-in-a-sorted-array/solution/gong-shui-san-xie-er-duan-xing-fen-xi-yu-17nv/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/valid-triangle-number/">611.有效三角形的个数</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/valid-triangle-number/solution/gong-shui-san-xie-yi-ti-san-jie-jian-dan-y1we/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/binary-search/">704.二分查找</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/binary-search/solution/gong-shui-san-xie-yun-yong-er-fen-zhao-f-5jyj/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/swim-in-rising-water/">778.水位上升的泳池中游泳</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/swim-in-rising-water/solution/gong-shui-san-xie-yi-ti-shuang-jie-krusk-7c6o/">LeetCode题解链接</a></td><td style="text-align: center;">困难</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/k-th-smallest-prime-fraction/">786.第 K 个最小的素数分数</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/k-th-smallest-prime-fraction/solution/gong-shui-san-xie-yi-ti-shuang-jie-you-x-8ymk/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/peak-index-in-a-mountain-array/">852.山脉数组的峰顶索引</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/peak-index-in-a-mountain-array/solution/gong-shui-san-xie-er-fen-san-fen-cha-zhi-5gfv/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/online-election/">911.在线选举</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/online-election/solution/gong-shui-san-xie-er-fen-yun-yong-ti-by-5y3hi/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/time-based-key-value-store/">981.基于时间的键值存储</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/time-based-key-value-store/solution/gong-shui-san-xie-yi-ti-shuang-jie-ha-xi-h5et/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/max-consecutive-ones-iii/">1004.最大连续1的个数 III</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/max-consecutive-ones-iii/solution/san-chong-jie-fa-cong-dong-tai-gui-hua-d-gxks/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/capacity-to-ship-packages-within-d-days/">1011.在 D 天内送达包裹的能力</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/capacity-to-ship-packages-within-d-days/solution/gong-shui-san-xie-li-yong-er-duan-xing-z-95zj/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/longest-duplicate-substring/">1044.最长重复子串</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/longest-duplicate-substring/solution/gong-shui-san-xie-zi-fu-chuan-ha-xi-ying-hae9/">LeetCode题解链接</a></td><td style="text-align: center;">困难</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/get-equal-substrings-within-budget/">1208.尽可能使字符串相等</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/get-equal-substrings-within-budget/solution/ni-bu-ke-neng-kan-bu-dong-de-qian-zhui-h-u4l1/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/the-k-weakest-rows-in-a-matrix/">1337.矩阵中战斗力最弱的 K 行</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/the-k-weakest-rows-in-a-matrix/solution/gong-shui-san-xie-yi-ti-shuang-jie-po-su-7okx/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/find-the-minimum-number-of-fibonacci-numbers-whose-sum-is-k/">1414.和为 K 的最少斐波那契数字数目</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/find-the-minimum-number-of-fibonacci-numbers-whose-sum-is-k/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-rgty8/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit/">1438.绝对差不超过限制的最长连续子数组</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit/solution/xiang-jie-er-fen-hua-dong-chuang-kou-dan-41g1/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/minimum-number-of-days-to-make-m-bouquets/">1482.制作 m 束花所需的最少天数</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/minimum-number-of-days-to-make-m-bouquets/solution/gong-shui-san-xie-li-yong-er-duan-xing-z-ysv4/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/maximum-xor-with-an-element-from-array/">1707.与数组中元素的最大异或值</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/maximum-xor-with-an-element-from-array/solution/gong-shui-san-xie-jie-zhe-ge-wen-ti-lai-lypqr/">LeetCode题解链接</a></td><td style="text-align: center;">困难</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/minimum-operations-to-make-a-subsequence/">1713.得到子序列的最少操作次数</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/minimum-operations-to-make-a-subsequence/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-oj7yu/">LeetCode题解链接</a></td><td style="text-align: center;">困难</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/maximum-number-of-events-that-can-be-attended-ii/">1751.最多可以参加的会议数目 II</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/maximum-number-of-events-that-can-be-attended-ii/solution/po-su-dp-er-fen-dp-jie-fa-by-ac_oier-88du/">LeetCode题解链接</a></td><td style="text-align: center;">困难</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/minimum-absolute-sum-difference/">1818.绝对差值和</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/minimum-absolute-sum-difference/solution/gong-shui-san-xie-tong-guo-er-fen-zhao-z-vrmq/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/frequency-of-the-most-frequent-element/">1838.最高频元素的频数</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/frequency-of-the-most-frequent-element/solution/gong-shui-san-xie-cong-mei-ju-dao-pai-xu-kxnk/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/find-the-student-that-will-replace-the-chalk/">1894.找到需要补充粉笔的学生编号</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/find-the-student-that-will-replace-the-chalk/solution/gong-shui-san-xie-yi-ti-shuang-jie-qian-kpqsk/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/minimum-difference-between-highest-and-lowest-of-k-scores/">1984.学生分数的最小差值</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/minimum-difference-between-highest-and-lowest-of-k-scores/solution/gong-shui-san-xie-pai-xu-hua-dong-chuang-ru6e/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/plates-between-candles/">2055.蜡烛之间的盘子</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/plates-between-candles/solution/gong-shui-san-xie-er-fen-qian-zhui-he-yu-0qt0/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/">剑指Offer 53 - I. 在排序数组中查找数字 I</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/solution/gong-shui-san-xie-liang-chong-er-fen-ton-3epx/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/B1IidL/">剑指 Offer II 069.山峰数组的顶部</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/B1IidL/solution/gong-shui-san-xie-er-fen-san-fen-ji-zhi-lc8zl/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩🤩</td></tr></tbody></table><h1 id="二分-模板">二分 模板</h1><ul><li>两种</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> l, r = <span class="number">1000009</span>;</span><br><span class="line"><span class="keyword">while</span>(l &lt; r){</span><br><span class="line"><span class="type">long</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;<span class="comment">//避免了死循环</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(mid)){</span><br><span class="line">l = mid;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line">r = mid - <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> l = <span class="number">0</span>, r = <span class="number">1000009</span>;</span><br><span class="line"><span class="keyword">while</span> (l &lt; r) {</span><br><span class="line">    <span class="type">long</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) {</span><br><span class="line">        r = mid;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        l = mid + <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p><strong>二分有一个比较容易混淆的点是</strong></p><p>当需要找目标值第一次出现的下标时，条件应该写成 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="21.662ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 9574.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1172,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2050,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(2519,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(2797,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3675,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4020,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(4540,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(5095.8,0)"><g data-mml-node="text"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="text" transform="translate(778,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g><g data-mml-node="mi" transform="translate(6929.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(7290.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(7819.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(8270.6,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(8747.6,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(9213.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container></span> 还是 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="21.662ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 9574.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1172,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2050,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(2519,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(2797,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3675,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4020,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(4540,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(5095.8,0)"><g data-mml-node="text"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="text" transform="translate(778,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g><g data-mml-node="mi" transform="translate(6929.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(7290.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(7819.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(8270.6,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(8747.6,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(9213.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container></span></p><p>其实有一个很好理解的方法：</p><p>由于二分是从中间开始找起的，所以找的必然是条件区间中靠近中心的的边界值。</p><p>文字不好理解，我们结合图片来看：</p><p><img src="https://pic.leetcode-cn.com/1611730934-iKurnj-640.png" alt="640.png"></p><h1 id="快速乘法-模板">快速乘法 模板</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">long mul (long a, long k){</span><br><span class="line">long ans = 0;</span><br><span class="line">while(k&gt;0){</span><br><span class="line">if((k&amp;1) == 1)ans+=a;</span><br><span class="line">k&gt;&gt;1;</span><br><span class="line">a&lt;&lt;1;</span><br><span class="line">}</span><br><span class="line">return ans;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p><strong>Quote by 宫水三叶</strong></p><p><strong>「二分」的本质是两段性，并非单调性。只要一段满足某个性质，另外一段不满足某个性质，就可以用「二分」。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滑动窗口</title>
      <link href="/2022/04/17/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
      <url>/2022/04/17/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<table><colgroup><col style="width: 45%"><col style="width: 45%"><col style="width: 3%"><col style="width: 6%"></colgroup><thead><tr class="header"><th style="text-align: center;">题目</th><th style="text-align: center;">题解</th><th style="text-align: center;">难度</th><th style="text-align: center;">推荐指数</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/">3.无重复字符的最长子串</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/solution/shua-chuan-lc-shuang-zhi-zhen-ha-xi-biao-q08m/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/substring-with-concatenation-of-all-words/">30.串联所有单词的子串</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/substring-with-concatenation-of-all-words/solution/shua-chuan-lc-po-su-ha-xi-biao-jie-fa-hu-ml3x/">LeetCode题解链接</a></td><td style="text-align: center;">困难</td><td style="text-align: center;">🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/repeated-dna-sequences/">187.重复的DNA序列</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/repeated-dna-sequences/solution/gong-shui-san-xie-yi-ti-shuang-jie-hua-d-30pg/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/contains-duplicate-ii/">219.存在重复元素 II</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/contains-duplicate-ii/solution/gong-shui-san-xie-hua-dong-chuang-kou-yu-q02i/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/contains-duplicate-iii/">220.存在重复元素 III</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/contains-duplicate-iii/solution/gong-shui-san-xie-yi-ti-shuang-jie-hua-d-dlnv/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/longest-repeating-character-replacement/">424.替换后的最长重复字符</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/longest-repeating-character-replacement/solution/ping-ping-wu-qi-shuang-zhi-zhen-da-bai-h-fgif/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/">438.找到字符串中所有字母异位词</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/solution/gong-shui-san-xie-shuang-zhi-zhen-shi-xi-t5hc/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/sliding-window-median/">480.滑动窗口中位数</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/sliding-window-median/solution/xiang-jie-po-su-jie-fa-you-xian-dui-lie-mo397/">LeetCode题解链接</a></td><td style="text-align: center;">困难</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/permutation-in-string/">567.字符串的排列</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/permutation-in-string/solution/an-zi-fu-hua-dong-ruo-bao-liao-lai-shi-s-h2xq/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/longest-harmonious-subsequence/">594.最长和谐子序列</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/longest-harmonious-subsequence/solution/gong-shui-san-xie-yi-ti-shuang-jie-hua-d-quuh/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/maximum-average-subarray-i/">643.子数组最大平均数 I</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/maximum-average-subarray-i/solution/hua-dong-chuang-kou-luo-ti-han-mo-ban-by-buo3/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/subarrays-with-k-different-integers/">992.K 个不同整数的子数组</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/subarrays-with-k-different-integers/solution/miao-dong-xi-lie-xiang-jie-shuang-zhi-zh-9k8w/">LeetCode题解链接</a></td><td style="text-align: center;">困难</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/max-consecutive-ones-iii/">1004.最大连续1的个数 III</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/max-consecutive-ones-iii/solution/san-chong-jie-fa-cong-dong-tai-gui-hua-d-gxks/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/grumpy-bookstore-owner/">1052.爱生气的书店老板</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/grumpy-bookstore-owner/solution/hua-dong-chuang-kou-luo-ti-by-ac_oier-nunu/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/get-equal-substrings-within-budget/">1208.尽可能使字符串相等</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/get-equal-substrings-within-budget/solution/ni-bu-ke-neng-kan-bu-dong-de-qian-zhui-h-u4l1/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/maximum-points-you-can-obtain-from-cards/">1423.可获得的最大点数</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/maximum-points-you-can-obtain-from-cards/solution/jian-dan-de-hua-dong-chuang-kou-he-kuai-1go5h/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit/">1438.绝对差不超过限制的最长连续子数组</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit/solution/xiang-jie-er-fen-hua-dong-chuang-kou-dan-41g1/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/maximum-number-of-visible-points/">1610.可见点的最大数目</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/maximum-number-of-visible-points/solution/gong-shui-san-xie-qiu-ji-jiao-ji-he-ti-b-0bid/">LeetCode题解链接</a></td><td style="text-align: center;">困难</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/frequency-of-the-most-frequent-element/">1838.最高频元素的频数</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/frequency-of-the-most-frequent-element/solution/gong-shui-san-xie-cong-mei-ju-dao-pai-xu-kxnk/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/minimum-difference-between-highest-and-lowest-of-k-scores/">1984.学生分数的最小差值</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/minimum-difference-between-highest-and-lowest-of-k-scores/solution/gong-shui-san-xie-pai-xu-hua-dong-chuang-ru6e/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/maximize-the-confusion-of-an-exam/">2024.考试的最大困扰度</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/maximize-the-confusion-of-an-exam/solution/by-ac_oier-2rii/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 滑动窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据管理基础 ch48-53</title>
      <link href="/2022/04/15/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80-ch48-53/"/>
      <url>/2022/04/15/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80-ch48-53/</url>
      
        <content type="html"><![CDATA[<p># ch 48 事务</p><ul><li>事务(Transaction)是用户定义的一个数据库操作序列，这些操作要么全做，要么全不做，是一个不可分割的工作单位。</li><li>事务和程序是两个概念<ul><li>在关系数据库中，一个事务可以是一条SQL语句，一组SQL语句或整个程序</li><li>一个程序通常包含多个事务</li></ul></li><li>事务是恢复和并发控制的基本单位</li></ul><h2 id="定义事务">定义事务</h2><p><img src="https://s2.loli.net/2022/04/15/uyXUYQtdkhWIsmN.png" alt="image-20220415143129483"></p><h2 id="事务结束">事务结束</h2><ul><li><p>commit：</p><p><img src="https://s2.loli.net/2022/04/15/tudmVIY3s2vGNXO.png" alt="image-20220415143511729"></p></li><li><p>rollback：</p><p><img src="https://s2.loli.net/2022/04/15/MNDkroX4KitdjWV.png" alt="image-20220415143207116"></p></li></ul><h2 id="事物的特性acid特性">事物的特性（ACID特性）</h2><ul><li>事务的ACID特性：<ul><li>原子性（Atomicity）<ul><li>事务是数据库的逻辑工作单位<ul><li>事务中包括的诸操作要么都做，要么都不做</li></ul></li></ul></li><li>一致性（Consistency）</li><li>隔离性（Isolation）</li><li>持续性（Durability）</li></ul></li></ul><h3 id="一致性">一致性</h3><ul><li>事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态</li><li>一致性状态<ul><li>数据库中只包含成功事务提交的结果</li></ul></li><li>不一致状态<ul><li>数据库系统运行中发生故障，有些事务尚未完成就被迫中断；</li><li>这些未完成事务对数据库所做的修改有一部分已写入物理数据库，这时数据库就处于一种不正确的状态</li></ul></li></ul><h3 id="一致性与原子性">一致性与原子性</h3><ul><li>银行转帐：从帐号A中取出一万元，存入帐号B。<ul><li>定义一个事务，该事务包括两个操作</li></ul></li></ul><table><thead><tr class="header"><th><strong>A</strong></th><th><strong>B</strong></th></tr></thead><tbody><tr class="odd"><td>A=A-1</td><td></td></tr><tr class="even"><td></td><td>B=B+1</td></tr></tbody></table><ul><li>这两个操作要么全做，要么全不做<ul><li>全做或者全不做，数据库都处于一致性状态。</li><li>如果只做一个操作，用户逻辑上就会发生错误，少了一万元，数据库就处于不一致性状态。</li></ul></li></ul><h2 id="隔离性持续性">隔离性、持续性</h2><ul><li>隔离性<ul><li>一个事务的执行不能被其他事务干扰</li><li>一个事务内部的操作及使用的数据对其他并发事务是隔离的</li><li>并发执行的各个事务之间不能互相干扰</li></ul></li><li>持续性也称永久性（Permanence）<ul><li>一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。</li><li>接下来的其他操作或故障不应该对其执行结果有任何影响。</li></ul></li></ul><h2 id="事务的特性">事务的特性</h2><ul><li>保证事务ACID特性是事务处理的任务</li><li>破坏事务ACID特性的因素<ul><li>多个事务并行运行时，不同事务的操作交叉执行<ul><li>数据库管理系统必须保证多个事务的交叉运行不影响这些事务的隔离性</li></ul></li><li>事务在运行过程中被强行停止<ul><li>数据库管理系统必须保证被强行终止的事务对数据库和其他事务没有任何影响</li></ul></li></ul></li></ul><h1 id="ch-49-故障和数据库恢复">ch 49 故障和数据库恢复</h1><h2 id="故障和数据库恢复">故障和数据库恢复</h2><ul><li>故障是不可避免的<ul><li>计算机硬件故障</li><li>软件的错误</li><li>操作员的失误</li><li>恶意的破坏</li></ul></li><li>故障的影响<ul><li>运行事务非正常中断，影响数据库中数据的正确性</li><li>破坏数据库，全部或部分丢失数据</li></ul></li><li>数据库的恢复<ul><li>数据库管理系统必须具有把数据库从错误状态恢复到某一已知的正确状态(亦称为一致状态或完整状态)的功能，这就是数据库的恢复管理系统对故障的对策</li></ul></li><li>恢复子系统是数据库管理系统的一个重要组成部分</li><li>恢复技术是衡量系统优劣的重要指标</li></ul><h2 id="故障">故障</h2><ul><li>故障的种类<ul><li>事务内部的故障</li><li>系统故障</li><li>介质故障</li><li>计算机病毒</li></ul></li><li>各类故障，对数据库的影响有两种可能性<ul><li>一是数据库本身被破坏二是数据库没有被破坏，但数据可能不正确，这是由于事务的运行被非正常终止造成的。</li></ul></li></ul><h2 id="事务内部的故障">事务内部的故障</h2><h3 id="事务内部的故障-1">事务内部的故障 1</h3><p><img src="https://s2.loli.net/2022/04/15/szjtr81SlYKD2WJ.png" alt="image-20220415145052586"></p><h3 id="事务内部的故障-2">事务内部的故障 2</h3><p><img src="https://s2.loli.net/2022/04/15/cbKUv7DBemoPWOT.png" alt="image-20220415145123897"></p><h2 id="事务故障的恢复">事务故障的恢复</h2><ul><li>事务故障意味着<ul><li>事务没有达到预期的终点(COMMIT或者显式的ROLLBACK)</li><li>数据库可能处于不正确状态。</li></ul></li><li>事务故障的恢复：事务撤消（UNDO）<ul><li>强行回滚（ROLLBACK）该事务</li><li>撤销该事务已经作出的任何对数据库的修改，使得该事务象根本没有启动一样</li></ul></li></ul><h2 id="系统故障">系统故障</h2><ul><li>系统故障，称为软故障，是指造成系统停止运转的任何事件（特定类型的硬件错误（如CPU故障）、操作系统故障、数据库管理系统代码错误、系统断电），使得系统要重新启动。</li><li>整个系统的正常运行突然被破坏</li><li>所有正在运行的事务都非正常终止</li><li>不破坏数据库</li><li>内存中数据库缓冲区的信息全部丢失</li></ul><h2 id="系统故障的恢复">系统故障的恢复</h2><ul><li>发生系统故障时，一些尚未完成的事务的结果可能已送入物理数据库，造成数据库可能处于不正确状态。恢复策略：系统重新启动时，恢复程序让所有非正常终止的事务回滚，强行撤消（UNDO）所有未完成事务</li><li>发生系统故障时，有些已完成的事务可能有一部分甚至全部留在缓冲区，尚未写回到磁盘上的物理数据库中，系统故障使得这些事务对数据库的修改部分或全部丢失<ul><li>恢复策略：系统重新启动时，恢复程序需要重做（REDO）所有已提交的事务</li></ul></li></ul><h2 id="介质故障">介质故障</h2><ul><li>介质故障，称为硬故障，指外存故障<ul><li>磁盘损坏</li><li>磁头碰撞</li><li>瞬时强磁场干扰</li></ul></li><li>介质故障破坏数据库或部分数据库，并影响正在存取这部分数据的所有事务</li><li>介质故障比前两类故障的可能性小得多，但破坏性大得多</li></ul><h2 id="计算机病毒">计算机病毒</h2><ul><li>计算机病毒<ul><li>一种人为的故障或破坏，是一些恶作剧者研制的一种计算机程序</li><li>可以繁殖和传播，造成对计算机系统包括数据库的危害</li></ul></li><li>计算机病毒已成为计算机系统的主要威胁，自然也是数据库系统的主要威胁</li><li>数据库一旦被破坏仍要用恢复技术把数据库加以恢复</li></ul><h2 id="恢复">恢复</h2><ul><li>恢复操作的基本原理：冗余<ul><li>利用存储在系统别处的冗余数据来重建数据库中已被破坏或不正确的那部分数据</li></ul></li><li>恢复的实现技术：复杂<ul><li>一个大型数据库产品，恢复子系统的代码要占全部代码的10%以上</li></ul></li><li>恢复机制涉及的关键问题<ul><li>如何建立冗余数据（数据转储，登记日志文件）如何利用这些冗余数据实施数据库恢复</li></ul></li></ul><h1 id="ch-50-数据转储和日志文件">ch 50 数据转储和日志文件</h1><h2 id="数据转储">数据转储</h2><h3 id="数据转储-1">数据转储 1</h3><ul><li>转储是指数据库管理员定期地将整个数据库复制到磁带、磁盘或其他存储介质上保存起来的过程</li><li>备用的数据文本称为后备副本(backup)或后援副本</li><li>数据库遭到破坏后可以将后备副本重新装入</li><li>重装后备副本只能将数据库恢复到转储时的状态</li><li>要想恢复到故障发生时的状态，必须重新运行自转储以后的所有更新事务</li></ul><h3 id="数据转储-2">数据转储 2</h3><p><img src="https://s2.loli.net/2022/04/15/lCWZQERr4uSVjfK.png" alt="image-20220415151943388"></p><h3 id="数据转储-3">数据转储 3</h3><ul><li>上图中：<ul><li>系统在Ta时刻停止运行事务，进行数据库转储</li><li>在Tb时刻转储完毕，得到Tb时刻的数据库一致性副本</li><li>系统运行到Tf时刻发生故障</li><li>为恢复数据库，首先由数据库管理员重装数据库后备副本，将数据库恢复至Tb时刻的状态</li><li>重新运行自Tb ～Tf时刻的所有更新事务，把数据库恢复到故障发生前的一致状态</li></ul></li></ul><h2 id="转储方法-静态转储">转储方法-静态转储</h2><ul><li>静态转储<ul><li>在系统中无运行事务时进行的转储操作</li><li>转储开始时数据库处于一致性状态</li><li>转储期间不允许对数据库的任何存取、修改活动</li><li>得到的一定是一个数据一致性的副本</li></ul></li></ul><p><img src="https://s2.loli.net/2022/04/15/qQOZ6wUhIispCKv.png" alt="image-20220415152055938"></p><h2 id="动态转储">动态转储</h2><p><img src="https://s2.loli.net/2022/04/15/XFDIn9aQ7Yy13pN.png" alt="image-20220415152109367"></p><h2 id="海量转储与增量转储">海量转储与增量转储</h2><p><img src="https://s2.loli.net/2022/04/15/AxFB42yEl8WDiV3.png" alt="image-20220415152120898"></p><h2 id="日志文件">日志文件</h2><ul><li>日志文件(log file)是用来记录事务对数据库的更新操作的文件</li><li>日志文件的格式<ul><li>以记录为单位的日志文件</li><li>以数据块为单位的日志文件</li></ul></li><li>用途<ul><li>进行事务故障恢复</li><li>进行系统故障恢复</li><li>协助后备副本进行介质故障恢复</li></ul></li></ul><h3 id="以记录为单位的日志文件-1">以记录为单位的日志文件 1</h3><ul><li>以记录为单位的日志文件内容<ul><li>日志文件中的一个日志记录 (log record)包含<ul><li>各个事务的开始标记(BEGIN TRANSACTION)</li><li>各个事务的结束标记(COMMIT或ROLLBACK)</li><li>各个事务的所有更新操作</li></ul></li></ul></li></ul><h3 id="以记录为单位的日志文件-2">以记录为单位的日志文件 2</h3><ul><li>以记录为单位的日志文件，每条日志记录的内容<ul><li>事务标识（标明是哪个事务）</li><li>操作类型（插入、删除或修改）</li><li>操作对象（记录内部标识）</li><li>更新前数据的旧值（对插入操作而言，此项为空值）</li><li>更新后数据的新值（对删除操作而言, 此项为空值）</li></ul></li></ul><h2 id="以数据块为单位的日志文件">以数据块为单位的日志文件</h2><ul><li>以数据块为单位的日志文件，每条日志记录的内容<ul><li>事务标识</li><li>被更新的数据块</li></ul></li></ul><h2 id="日志文件的作用">日志文件的作用</h2><h3 id="日志文件的作用-1">日志文件的作用 1</h3><ul><li>具体作用<ul><li>事务故障恢复和系统故障恢复必须用日志文件。</li><li>在动态转储方式中必须建立日志文件，后备副本和日志文件结合起来才能有效地恢复数据库。</li><li>在静态转储方式中，也可以建立日志文件。<ul><li>当数据库毁坏后可重新装入后援副本把数据库恢复到转储结束时刻的正确状态</li><li>利用日志文件，把已完成的事务进行重做处理</li><li>对故障发生时尚未完成的事务进行撤销处理</li><li>不必重新运行那些已完成的事务程序就可把数据库恢复到故障前某一时刻的正确状态</li></ul></li></ul></li></ul><h3 id="日志文件的作用-2">日志文件的作用 2</h3><p><img src="https://s2.loli.net/2022/04/15/6CbVTcDWEy3v8k2.png" alt="image-20220415152817351"></p><h2 id="登录日志文件">登录日志文件</h2><h3 id="登录日志文件-1">登录日志文件 1</h3><ul><li>为保证数据库是可恢复的，登记日志文件时必须遵循两条原则</li><li>登记的次序严格按并发事务执行的时间次序</li><li>必须先写日志文件，后写数据库<ul><li>写日志文件操作：把表示这个修改的日志记录写到日志文件中</li><li>写数据库操作：把对数据的修改写到数据库中</li></ul></li></ul><h3 id="登录日志文件-2">登录日志文件 2</h3><ul><li>为什么要先写日志文件<ul><li>写数据库和写日志文件是两个不同的操作</li><li>在这两个操作之间可能发生故障</li><li>如果先写了数据库修改，而在日志文件中没有登记下这个修改，则以后就无法恢复这个修改了</li><li>如果先写日志，但没有修改数据库，按日志文件恢复时只不过是多执行一次不必要的UNDO操作，并不会影响数据库的正确性</li></ul></li></ul><h1 id="ch-51-恢复策略">ch 51 恢复策略</h1><h2 id="事务故障的恢复-1">事务故障的恢复</h2><ul><li>事务故障：事务在运行至正常终点前被终止</li><li>恢复方法<ul><li>由恢复子系统利用日志文件撤销此事务对数据库的修改</li></ul></li><li>事务故障的恢复是由系统自动完成，对用户是透明的，不需要用户干预</li></ul><p><strong>事务故障的恢复步骤</strong></p><ul><li>反向扫描文件日志（即从最后向前扫描日志文件），查找该事务的更新操作。</li><li>对该事务的更新操作执行逆操作。即将日志记录中“更新前的值”写入数据库。<ul><li>插入操作， “更新前的值”为空，则相当于做删除操作</li><li>删除操作，“更新后的值”为空，则相当于做插入操作</li><li>若是修改操作，则相当于用修改前值代替修改后值</li></ul></li><li>继续反向查找该事务的其他更新操作，并做同样处理。</li><li>如此处理下去，直至读到此事务的开始标记，事务故障恢复就完成了扫描日志文件，。</li></ul><h2 id="系统故障的恢复-1">系统故障的恢复</h2><ul><li>系统故障造成数据库不一致状态的原因<ul><li>未完成事务对数据库的更新可能已写入数据库</li><li>已提交事务对数据库的更新可能还留在缓冲区没来得及写入数据库</li></ul></li><li>恢复方法<ul><li>Undo 故障发生时未完成的事务</li><li>Redo 已完成的事务</li></ul></li><li>系统故障的恢复由系统在重新启动时自动完成，不需要用户干预</li></ul><p><strong>系统故障的恢复步骤</strong></p><ul><li>正向扫描日志文件（即从头扫描日志文件）<ul><li>重做(<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="7.045ex" height="1.643ex" role="img" focusable="false" viewBox="0 -704 3114 726"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mi" transform="translate(759,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(1523,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mi" transform="translate(2351,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g></g></g></svg></mjx-container></span>) 队列:在故障发生前已经提交的事务<ul><li>这些事务既有<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="27.739ex" height="2.059ex" role="img" focusable="false" viewBox="0 -716 12260.7 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mi" transform="translate(759,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(1523,0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mi" transform="translate(2309,0)"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(2813,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(3701,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(4145.7,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(4849.7,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mi" transform="translate(5608.7,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(6358.7,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mi" transform="translate(7246.7,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(7891.7,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(8641.7,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(9401.7,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(10105.7,0)"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(10609.7,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mi" transform="translate(11372.7,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g></svg></mjx-container></span>记录，也有COMMIT记录</li></ul></li><li>撤销 (<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="7.344ex" height="1.643ex" role="img" focusable="false" viewBox="0 -704 3246 726"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"></path></g><g data-mml-node="mi" transform="translate(767,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mi" transform="translate(1655,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mi" transform="translate(2483,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g></g></g></svg></mjx-container></span>)队列:故障发生时尚未完成的事务<ul><li>这些事务只有<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="8.373ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 3701 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mi" transform="translate(759,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(1523,0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mi" transform="translate(2309,0)"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(2813,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g></svg></mjx-container></span> <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="19.366ex" height="2.059ex" role="img" focusable="false" viewBox="0 -716 8559.7 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(444.7,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(1148.7,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mi" transform="translate(1907.7,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(2657.7,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mi" transform="translate(3545.7,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(4190.7,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(4940.7,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(5700.7,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(6404.7,0)"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(6908.7,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mi" transform="translate(7671.7,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g></svg></mjx-container></span>记录，无相应的COMMIT记录</li></ul></li></ul></li><li>对撤销(UNDO)队列事务进行撤销(UNDO)处理<ul><li>反向扫描日志文件，对每个撤销事务的更新操作执行逆操作</li><li>即将日志记录中“更新前的值”写入数据库</li></ul></li><li>对重做(REDO)队列事务进行重做(REDO)处理<ul><li>正向扫描日志文件，对每个重做事务重新执行登记的操作</li><li>即将日志记录中“更新后的值”写入数据库</li></ul></li></ul><h2 id="介质故障的恢复">介质故障的恢复</h2><ul><li>介质故障的恢复的工作<ul><li>重装数据库</li><li>重做已完成的事务</li></ul></li><li>介质故障的恢复需要数据库管理员介入</li><li>数据库管理员的工作<ul><li>重装最近转储的数据库副本和有关的各日志文件副本</li><li>执行系统提供的恢复命令</li></ul></li><li>具体的恢复操作仍由数据库管理系统完成</li></ul><p><strong>介质故障的恢复步骤</strong></p><ul><li>装入最新的后备数据库副本(离故障发生时刻最近的转储副本)，使数据库恢复到最近一次转储时的一致性状态。<ul><li>对于静态转储的数据库副本，装入后数据库即处于一致性状态</li><li>对于动态转储的数据库副本，还须同时装入转储时刻的日志文件副本，利用恢复系统故障的方法（即REDO+UNDO），才能将数据库恢复到一致性状态。</li></ul></li><li>装入有关的日志文件副本(转储结束时刻的日志文件副本)，重做已完成的事务。<ul><li>首先扫描日志文件，找出故障发生时已提交的事务的标识，将其记入重做队列。</li><li>然后正向扫描日志文件，对重做队列中的所有事务进行重做处理。即将日志记录中“更新后的值”写入数据库。</li></ul></li></ul><h1 id="ch-52-具有检查点的恢复技术">ch 52 具有检查点的恢复技术</h1><h2 id="具有检查点的恢复技术">具有检查点的恢复技术</h2><ul><li>恢复的两个问题<ul><li>搜索整个日志将耗费大量的时间</li><li>重做处理：重新执行，浪费了大量时间</li></ul></li><li>具有检查点（checkpoint）的恢复技术<ul><li>在日志文件中增加检查点记录（checkpoint）</li><li>增加重新开始文件</li><li>恢复子系统在登录日志文件期间动态地维护日志</li></ul></li></ul><h1 id="检查点技术">检查点技术</h1><p><strong>检查点技术 1</strong></p><ul><li>检查点记录的内容<ul><li>建立检查点时刻所有正在执行的事务清单</li><li>这些事务最近一个日志记录的地址</li></ul></li><li>重新开始文件的内容<ul><li>记录各个检查点记录在日志文件中的地址</li></ul></li></ul><p><strong>检查点技术 2</strong></p><p><img src="https://s2.loli.net/2022/04/19/D5WhnscaEX8tMZJ.png" alt="image-20220419142707706"></p><p><img src="https://s2.loli.net/2022/04/19/4nzwmWEs67RfQrp.png" alt="image-20220419142719863"></p><h2 id="动态维护日志文件的方法">动态维护日志文件的方法</h2><ul><li>动态维护日志文件的方法</li><li>周期性地执行如下操作：建立检查点，保存数据库状态。</li><li>具体步骤是：<ul><li>将当前日志缓冲区中的所有日志记录写入磁盘的日志文件上</li><li>在日志文件中写入一个检查点记录</li><li>将当前数据缓冲区的所有数据记录写入磁盘的数据库中</li><li>把检查点记录在日志文件中的地址写入一个重新开始文件</li></ul></li></ul><h1 id="建立检查点">建立检查点</h1><ul><li>恢复子系统可以定期或不定期地建立检查点,保存数据库状态<ul><li>定期<ul><li>按照预定的一个时间间隔，如每隔一小时建立一个检查点</li></ul></li><li>不定期<ul><li>按照某种规则，如日志文件已写满一半建立一个检查点</li></ul></li></ul></li></ul><h2 id="利用检查点的恢复策略">利用检查点的恢复策略</h2><p><strong>利用检查点的恢复策略 1</strong></p><ul><li>使用检查点方法可以改善恢复效率<ul><li>当事务T在一个检查点之前提交，T对数据库所做的修改已写入数据库</li><li>写入时间是在这个检查点建立之前或在这个检查点建立之时</li><li>在进行恢复处理时，没有必要对事务T执行重做操作</li></ul></li></ul><p><strong>利用检查点的恢复策略 2</strong></p><p><img src="https://s2.loli.net/2022/04/19/kiTXpDKJmwAjnEL.png" alt="image-20220419143037368"></p><p><img src="https://s2.loli.net/2022/04/19/LBv3ayKOErMNkVg.png" alt="image-20220419143052183"></p><p><strong>利用检查点的恢复策略 3</strong></p><ul><li>故障状态<ul><li>T1 ：在检查点之前提交</li><li>T2 ：在检查点之前开始执行，在检查点之后故障点之前提交</li><li>T3 ：在检查点之前开始执行，在故障点时还未完成</li><li>T4 ：在检查点之后开始执行，在故障点之前提交</li><li>T5 ：在检查点之后开始执行，在故障点时还未完成</li></ul></li><li>恢复策略<ul><li>T3和T5在故障发生时还未完成，所以予以撤销</li><li>T2和T4在检查点之后才提交，它们对数据库所做的修改在故障发生时可能还在缓冲区中，尚未写入数据库，所以要重做</li><li>T1在检查点之前已提交，所以不必执行重做操作</li></ul></li></ul><p><strong>利用检查点的恢复步骤</strong></p><ul><li>从重新开始文件中找到最后一个检查点记录在日志文件中的地址，由该地址在日志文件中找到最后一个检查点记录</li><li>由该检查点记录得到检查点建立时刻所有正在执行的事务清单ACTIVE-LIST<ul><li>建立两个事务队列<ul><li>UNDO-LIST</li><li>REDO-LIST</li></ul></li><li>把ACTIVE-LIST暂时放入UNDO-LIST队列，REDO队列暂为空。</li></ul></li><li>从检查点开始正向扫描日志文件，直到日志文件结束<ul><li>如有新开始的事务Ti ，把Ti暂时放入UNDO-LIST队列</li><li>如有提交的事务Tj，把Tj从UNDO-LIST队列移到REDO-LIST队列;直到日志文件结束</li></ul></li><li>对UNDO-LIST中的每个事务执行UNDO操作</li><li>对REDO-LIST中的每个事务执行REDO操作</li></ul><h1 id="ch-53-数据库镜像">ch 53 数据库镜像</h1><h2 id="数据库镜像">数据库镜像</h2><p><strong>数据库镜像 1</strong></p><ul><li>介质故障是对系统影响最为严重的一种故障，严重影响数据库的可用性<ul><li>介质故障恢复比较费时</li><li>为预防介质故障，数据库管理员必须周期性地转储数据库</li></ul></li><li>提高数据库可用性的解决方案<ul><li>数据库镜像（Mirror）</li></ul></li></ul><p><strong>数据库镜像 2</strong></p><p><img src="https://s2.loli.net/2022/04/19/iOTtCHmEP2RzSnM.png" alt="image-20220419154520389"></p><ul><li>数据库镜像<ul><li>数据库管理系统自动把整个数据库或其中的关键数据复制到另一个磁盘上</li><li>数据库管理系统自动保证镜像数据与主数据的一致性</li><li>每当主数据库更新时，数据库管理系统自动把更新后的数据复制过去</li></ul></li></ul><h2 id="数据库镜像的用途">数据库镜像的用途</h2><p><strong>数据库镜像的用途 1</strong></p><ul><li>出现介质故障时<ul><li>可由镜像磁盘继续提供使用</li><li>同时数据库管理系统自动利用镜像磁盘数据进行数据库的恢复</li><li>不需要关闭系统和重装数据库副本</li></ul></li></ul><p><img src="https://s2.loli.net/2022/04/19/KUQZhRoxy8gOcas.png" alt="image-20220419154559358"></p><p><strong>数据库镜像的用途 2</strong></p><ul><li>没有出现故障时<ul><li>可用于并发操作</li><li>一个用户对数据加排他锁修改数据，其他用户可以读镜像数据库上的数据，而不必等待该用户释放锁</li></ul></li></ul><p><img src="https://s2.loli.net/2022/04/19/8Mhq2Dcs4JmFXgU.png" alt="image-20220419154622678"></p><h2 id="数据库镜像-1">数据库镜像</h2><ul><li>频繁地复制数据自然会降低系统运行效率<ul><li>在实际应用中用户往往只选择对关键数据和日志文件镜像</li><li>不是对整个数据库进行镜像</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> 数据管理基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据管理基础 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据管理基础 ch45-47</title>
      <link href="/2022/04/15/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80-ch45-47/"/>
      <url>/2022/04/15/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80-ch45-47/</url>
      
        <content type="html"><![CDATA[<h1 id="ch-45-面向驱动的数据库编程">ch 45 面向驱动的数据库编程</h1><ul><li>JAVA世界： JDBC<ul><li>w3cschool</li></ul></li><li>微软：ODBC, OLE DB等</li><li>Python： Python DB-API +各数据库模块</li></ul><h2 id="jdbc为例">JDBC为例</h2><p><img src="https://s2.loli.net/2022/04/15/iPlcFq9OZrs3AQe.png" alt="image-20220412154106016"></p><h3 id="以jdbc为例-1">以JDBC为例 1</h3><ul><li><p>加载数据库驱动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br></pre></td></tr></table></figure></li><li><p>建立连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conn = DriverManager.getConnection(</span><br><span class="line"><span class="string">"jdbc:mysql://localhost:3306/test"</span>, <span class="string">"root"</span>, <span class="string">""</span>);</span><br></pre></td></tr></table></figure></li><li><p>创建 Statement 对象，用于向数据库发送 SQL 语句；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">"SELECT * FROM `user`"</span>;</span><br><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br></pre></td></tr></table></figure></li><li><p>获取 ResultSet 对象，取出数据，此对象代表结果集；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (resultSet.next()) { </span><br><span class="line"><span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> resultSet.getInt(“id”); </span><br><span class="line">……</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li><li><p>释放资源，断开与数据库的连接。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">resultSet.close();</span><br><span class="line">statement.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure></li></ul><h1 id="ch-46-过程化sql">ch 46 过程化SQL</h1><h2 id="过程化sql">过程化SQL</h2><ul><li>过程化SQL<ul><li>SQL的扩展</li><li>增加了过程化语句功能</li><li>基本结构是块<ul><li>块之间可以互相嵌套</li><li>每个块完成一个逻辑操作</li></ul></li></ul></li></ul><h2 id="过程化sql的块结构">过程化SQL的块结构</h2><ul><li>定义部分 DECLARE 变量、常量、游标、异常等<ul><li>定义的变量、常量等只能在该基本块中使用</li><li>当基本块执行结束时，定义就不再存在</li></ul></li><li>执行部分</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SQL</span>语句、过程化<span class="keyword">SQL</span>的流程控制语句</span><br><span class="line">    EXCEPTION</span><br><span class="line">异常处理部分        </span><br><span class="line">    <span class="keyword">END</span>；</span><br></pre></td></tr></table></figure><h2 id="变量和常量的定义">变量和常量的定义</h2><ul><li>变量定义<ul><li>变量名 数据类型 [[NOT NULL]:=初值表达式]或</li><li>变量名 数据类型 [[NOT NULL] 初值表达式]</li></ul></li><li>常量定义<ul><li>常量名 数据类型 CONSTANT :=常量表达式</li><li>常量必须要给一个值，并且该值在存在期间或常量的作用域内不能改变。如果试图修改它，过程化SQL将返回一个异常</li></ul></li><li>赋值语句<ul><li>变量名称 :=表达式</li></ul></li></ul><h2 id="流程控制-条件控制语句">流程控制-条件控制语句</h2><p><img src="https://s2.loli.net/2022/04/15/QutDnX4ykBZbqoj.png" alt="image-20220415142636952"></p><h2 id="流程控制-循环控制语句">流程控制-循环控制语句</h2><p><img src="https://s2.loli.net/2022/04/15/hTlVABotmEin5b7.png" alt="image-20220415142704946"></p><h2 id="流程控制-错误处理">流程控制-错误处理</h2><ul><li><p>如果过程化SQL在执行时出现异常，则应该让程序在产生异常的语句处停下来，根据异常的类型去执行异常处理语句</p></li><li><p>SQL标准对数据库服务器提供什么样的异常处理做出了建议，要求过程化SQL管理器提供完善的异常处理机制</p></li></ul><h1 id="ch-47-存储过程和函数">ch 47 存储过程和函数</h1><h2 id="存储过程">存储过程</h2><h3 id="存储过程-1">存储过程 1</h3><ul><li>过程化SQL块类型</li><li>命名块<ul><li>编译后保存在数据库中，可以被反复调用，运行速度较快，过程和函数是命名块<br></li></ul></li><li>匿名块<ul><li>每次执行时都要进行编译，它不能被存储到数据库中，也不能在其他过程化SQL块中调用</li></ul></li></ul><h3 id="存储过程-2">存储过程 2</h3><ul><li>存储过程：由过程化SQL语句书写的过程，经编译和优化后存储在数据库服务器中，使用时只要调用即可。</li><li>存储过程的优点<ul><li>运行效率高</li><li>降低了客户机和服务器之间的通信量<br></li><li>方便实施企业规则</li></ul></li></ul><h2 id="存储过程的用户接口-创建存储过程">存储过程的用户接口-创建存储过程</h2><h3 id="存储过程的用户接口-创建存储过程-1">存储过程的用户接口-创建存储过程1</h3><p><img src="https://s2.loli.net/2022/04/15/KhCiQ3c46qyWVxg.png"></p><h3 id="存储过程的用户接口-创建存储过程-2">存储过程的用户接口-创建存储过程2</h3><ul><li><p>[例8.8]利用存储过程来实现下面的应用：从账户1转指定数额的款项到账户2中。</p></li><li><p>```SQL CREATE OR REPLACE PROCEDURE TRANSFER(inAccountINT,outAccount INT,amount FLOAT)/<em>定义存储过程TRANSFER，其参数为转入账户、转出账户、转账额度</em>/ ASDECLARE /<em>定义变量</em>/ totalDepositOut Float; totalDepositIn Float;inAccountnum INT; <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 存储过程的用户接口-创建存储过程 3</span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line">BEGIN                             /*检查转出账户的余额 */                       </span><br><span class="line">       SELECT Total INTO totalDepositOut FROM Accout </span><br><span class="line">       WHERE accountnum=outAccount; </span><br><span class="line">       IF totalDepositOut IS NULL THEN   </span><br><span class="line">                                    /*如果转出账户不存在或账户中没有存款*/</span><br><span class="line">                ROLLBACK;    /*回滚事务*/</span><br><span class="line">                RETURN;</span><br><span class="line">       END IF; </span><br><span class="line"> IF totalDeposit Out&lt; amount THEN    /*如果账户存款不足*/</span><br><span class="line">ROLLBACK; /*回滚事务*/</span><br><span class="line">RETURN;</span><br><span class="line">END IF;</span><br></pre></td></tr></table></figure></p><h3 id="存储过程的用户接口-创建存储过程-4">存储过程的用户接口-创建存储过程4</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Accountnum <span class="keyword">INTO</span> inAccountnum <span class="keyword">FROM</span> Account</span><br><span class="line"><span class="keyword">WHERE</span> accountnum<span class="operator">=</span>inAccount;</span><br><span class="line">IF inAccount <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="keyword">THEN</span>  <span class="comment">/*如果转入账户不存在*/</span>                        </span><br><span class="line"><span class="keyword">ROLLBACK</span>;           <span class="comment">/*回滚事务*/</span></span><br><span class="line"><span class="keyword">RETURN</span>;</span><br><span class="line">ENDIF;</span><br><span class="line"><span class="keyword">UPDATE</span> Account <span class="keyword">SET</span> total<span class="operator">=</span>total<span class="operator">-</span>amount <span class="keyword">WHERE</span> accountnum<span class="operator">=</span>outAccount;</span><br><span class="line"> <span class="comment">/* 修改转出账户余额，减去转出额 */</span></span><br><span class="line"><span class="keyword">UPDATE</span> Account <span class="keyword">SET</span> total<span class="operator">=</span>total <span class="operator">+</span> amount </span><br><span class="line"><span class="keyword">WHERE</span>   accountnum<span class="operator">=</span>inAccount; </span><br><span class="line"><span class="comment">/* 修改转入账户余额，增加转入额 */</span></span><br><span class="line"><span class="keyword">COMMIT</span>;                       <span class="comment">/* 提交转账事务 */</span></span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="存储过程的用户接口-执行存储过程">存储过程的用户接口-执行存储过程</h2><ul><li>执行存储过程 CALL/PERFORM PROCEDURE 过程名([参数1,参数2,...])；<ul><li>使用CALL或者PERFORM等方式激活存储过程的执行</li><li>在过程化SQL中，数据库服务器支持在过程体中调用其他存储过程</li></ul></li><li>[例8.9] 从账户01003815868转10000元到01003813828账户中。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> <span class="keyword">PROCEDURE</span> TRANSFER(<span class="number">01003813828</span>,<span class="number">01003815868</span>,<span class="number">10000</span>);</span><br></pre></td></tr></table></figure><h2 id="储过程的用户接口-其他">储过程的用户接口-其他</h2><ul><li>改存储过程<ul><li>ALTER PROCEDURE 过程名1 RENAME TO 过程名2;</li></ul></li><li>删除存储过程<ul><li>·DROP PROCEDURE 过程名()；</li></ul></li></ul><h2 id="函数">函数</h2><ul><li>函数的定义语句格式<ul><li>CREATE OR REPLACE FUNCTION 函数名 ([参数1,参数2,…]) RETURNS &lt;类型&gt;AS &lt;过程化SQL块&gt;;</li></ul></li><li>函数的执行语句格式<ul><li>CALL/SELECT 函数名 ([参数1,参数2,…]);</li></ul></li><li>修改函数<ul><li>重命名<ul><li>ALTER FUNCTION 过程名1 RENAME TO 过程名2;</li></ul></li><li>重新编译<ul><li>ALTER FUNCTION 过程名 COMPILE;</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> 数据管理基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据管理基础 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模拟</title>
      <link href="/2022/04/15/%E6%A8%A1%E6%8B%9F/"/>
      <url>/2022/04/15/%E6%A8%A1%E6%8B%9F/</url>
      
        <content type="html"><![CDATA[<table><colgroup><col style="width: 35%"><col style="width: 35%"><col style="width: 2%"><col style="width: 26%"></colgroup><thead><tr class="header"><th style="text-align: center;">题目</th><th style="text-align: center;">题解</th><th style="text-align: center;">难度</th><th style="text-align: center;">推荐指数</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/two-sum/">1. 两数之和</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/two-sum/solution/by-dega-vu-rjnq/">Freedom的题解</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">😻😻😻😻😻</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/add-two-numbers/">2.两数相加</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/add-two-numbers/solution/jing-dian-ti-by-dega-vu-p8up/">Freedom的题解</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">😻😻😻😻😻</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/longest-palindromic-substring/">5.最长回文子串</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/longest-palindromic-substring/solution/mo-ni-by-dega-vu-ggn9/">Freedom的题解</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">😻😻😻😻😻</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/zigzag-conversion/">6. Z字形变换</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/zigzag-conversion/solution/shua-chuan-lc-zhi-guan-gui-lu-jie-fa-shu-8226/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/reverse-integer/">7.整数反转</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/reverse-integer/solution/shua-chuan-lc-bu-wan-mei-jie-fa-wan-mei-919rd/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/string-to-integer-atoi/">8.字符串转换整数 (atoi)</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/string-to-integer-atoi/solution/shua-chuan-lc-jian-ji-jie-fa-by-ac_oier-69tp/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/integer-to-roman/">12.整数转罗马数字</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/integer-to-roman/solution/shua-chuan-lc-tan-xin-jie-fa-by-ac_oier-5kbw/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/roman-to-integer/">13.罗马数字转整数</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/roman-to-integer/solution/shua-chuan-lc-ha-xi-biao-by-ac_oier-mooy/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/longest-common-prefix/">14.最长公共前缀</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/longest-common-prefix/solution/shua-chuan-lc-die-dai-mo-ni-by-ac_oier-8t4q/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/next-permutation/">31.下一个排列</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/next-permutation/solution/miao-dong-xi-lie-100-cong-xia-yi-ge-pai-gog8j/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/count-and-say/">38.外观数列</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/count-and-say/solution/shua-chuan-lc-100-mo-ni-ti-shi-yong-shao-w8jl/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/multiply-strings/">43.字符串相乘</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/multiply-strings/solution/zhi-yao-ni-hui-shou-suan-cheng-fa-zhe-ti-ainl/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/spiral-matrix/">54.螺旋矩阵</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/spiral-matrix/solution/xiang-jie-xing-zhuang-jie-fa-fang-xiang-3qmhf/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/length-of-last-word/">58.最后一个单词的长度</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/length-of-last-word/solution/gong-shui-san-xie-jian-dan-zi-fu-chuan-m-tt6t/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/spiral-matrix-ii/">59. 螺旋矩阵II</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/spiral-matrix-ii/solution/yi-ti-shuang-jie-xiang-jie-xing-zhuang-j-24x8/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/valid-number/">65.有效数字</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/valid-number/solution/gong-shui-san-xie-zi-fu-chuan-mo-ni-by-a-7cgc/">LeetCode题解链接</a></td><td style="text-align: center;">困难</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/plus-one/">66. 加一</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/plus-one/solution/gong-shui-san-xie-jian-dan-mo-ni-ti-by-a-5av1/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/text-justification/">68.文本左右对齐</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/text-justification/solution/gong-shui-san-xie-zi-fu-chuan-mo-ni-by-a-s3v7/">LeetCode题解链接</a></td><td style="text-align: center;">困难</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/simplify-path/">71.简化路径</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/simplify-path/solution/gong-shui-san-xie-jian-dan-zi-fu-chuan-m-w7xi/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/set-matrix-zeroes/">73.矩阵置零</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/set-matrix-zeroes/solution/xiang-jie-fen-san-bu-de-o1-kong-jian-jie-dbxd/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/gray-code/">89. 格雷编码</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/gray-code/solution/gong-shui-san-xie-dui-cheng-xing-gou-zao-9ap1/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/compare-version-numbers/">165.比较版本号</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/compare-version-numbers/solution/gong-shui-san-xie-jian-dan-zi-fu-chuan-m-xsod/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/fraction-to-recurring-decimal/">166.分数到小数</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/fraction-to-recurring-decimal/solution/gong-shui-san-xie-mo-ni-shu-shi-ji-suan-kq8c4/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/excel-sheet-column-title/">168.Excel表列名称</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/excel-sheet-column-title/solution/gong-shui-san-xie-cong-1-kai-shi-de-26-j-g2ur/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/excel-sheet-column-number/">171.Excel表列序号</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/excel-sheet-column-number/solution/gong-shui-san-xie-tong-yong-jin-zhi-zhua-y5fm/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/reverse-bits/">190.颠倒二进制位</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/reverse-bits/solution/yi-ti-san-jie-dui-cheng-wei-zhu-wei-fen-ub1hi/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/number-of-digit-one/">233. 数字 1的个数</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/number-of-digit-one/solution/gong-shui-san-xie-jiang-shu-wei-dp-wen-t-c9oi/">LeetCode题解链接</a></td><td style="text-align: center;">困难</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/delete-node-in-a-linked-list/">237.删除链表中的节点</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/delete-node-in-a-linked-list/solution/gong-shui-san-xie-jian-dan-lian-biao-mo-rovcb/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/add-digits/">258.各位相加</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/add-digits/solution/gong-shui-san-xie-yi-ti-shuang-jie-mo-ni-zdml/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/single-number-iii/">260.只出现一次的数字 III</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/single-number-iii/solution/gong-shui-san-xie-yi-ti-shuang-jie-ha-xi-zgi4/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/ugly-number/">263. 丑数</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/ugly-number/solution/gong-shui-san-xie-jian-dan-de-fen-qing-k-dlvg/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/missing-number/">268.丢失的数字</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/missing-number/solution/gong-shui-san-xie-yi-ti-wu-jie-pai-xu-ji-te3s/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/integer-to-english-words/">273.整数转换英文表示</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/integer-to-english-words/solution/gong-shui-san-xie-zi-fu-chuan-da-mo-ni-b-0my6/">LeetCode题解链接</a></td><td style="text-align: center;">困难</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/peeking-iterator/">284.顶端迭代器</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/peeking-iterator/solution/gong-shui-san-xie-die-dai-qi-ji-ben-ren-b77lz/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/bulls-and-cows/">299.猜数字游戏</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/bulls-and-cows/solution/gong-shui-san-xie-jian-dan-mo-ni-ti-by-a-tdhs/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/maximum-product-of-word-lengths/">318.最大单词长度乘积</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/maximum-product-of-word-lengths/solution/gong-shui-san-xie-jian-dan-wei-yun-suan-cqtxq/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/self-crossing/">335.路径交叉</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/self-crossing/solution/gong-shui-san-xie-fen-qing-kuang-tao-lun-zdrb/">LeetCode题解链接</a></td><td style="text-align: center;">困难</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/reverse-vowels-of-a-string/">345.反转字符串中的元音字母</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/reverse-vowels-of-a-string/solution/gong-shui-san-xie-note-bie-pian-shuang-z-c8ii/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/linked-list-random-node/">382.链表随机节点</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/linked-list-random-node/solution/gong-shui-san-xie-xu-shui-chi-chou-yang-1lp9d/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/ransom-note/">383.赎金信</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/ransom-note/solution/gong-shui-san-xie-jian-dan-ji-shu-mo-ni-udpzn/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/mini-parser/">385.迷你语法分析器</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/mini-parser/solution/by-ac_oier-zuy6/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/utf-8-validation/">393. UTF-8编码验证</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/utf-8-validation/solution/by-ac_oier-zvoy/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/nth-digit/">400. 第 N位数字</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/nth-digit/solution/gong-shui-san-xie-jian-dan-mo-ni-ti-by-a-w5wl/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/convert-a-number-to-hexadecimal/">405.数字转换为十六进制数</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/convert-a-number-to-hexadecimal/solution/gong-shui-san-xie-yi-ti-shuang-jie-jin-z-d93o/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/fizz-buzz/">412. FizzBuzz</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/fizz-buzz/solution/gong-shui-san-xie-jian-dan-mo-ni-ti-by-a-jll0/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/arithmetic-slices/">413.等差数列划分</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/arithmetic-slices/solution/gong-shui-san-xie-shuang-zhi-zhen-qiu-ji-ef1q/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/third-maximum-number/">414.第三大的数</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/third-maximum-number/solution/gong-shui-san-xie-yi-ti-shuang-jie-pai-x-pmln/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/battleships-in-a-board/">419.甲板上的战舰</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/battleships-in-a-board/solution/gong-shui-san-xie-ji-chong-sao-miao-xian-trmc/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/strong-password-checker/">420.强密码检验器</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/strong-password-checker/solution/by-ac_oier-unp5/">LeetCode题解链接</a></td><td style="text-align: center;">困难</td><td style="text-align: center;">🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/reconstruct-original-digits-from-english/">423.从英文中重建数字</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/reconstruct-original-digits-from-english/solution/gong-shui-san-xie-nao-jin-ji-zhuan-wan-m-vg7a/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/number-of-segments-in-a-string/">434.字符串中的单词数</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/number-of-segments-in-a-string/solution/gong-shui-san-xie-jian-dan-zi-fu-mo-ni-t-0gx6/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/k-th-smallest-in-lexicographical-order/">440.字典序的第K小数字</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/k-th-smallest-in-lexicographical-order/solution/by-ac_oier-m3zl/">LeetCode题解链接</a></td><td style="text-align: center;">困难</td><td style="text-align: center;">🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/string-compression/">443.压缩字符串</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/string-compression/solution/gong-shui-san-xie-shuang-zhi-zhen-yuan-d-bppu/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/sort-characters-by-frequency/">451.根据字符出现频率排序</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/sort-characters-by-frequency/solution/gong-shui-san-xie-shu-ju-jie-gou-yun-yon-gst9/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/circular-array-loop/">457.环形数组是否存在循环</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/circular-array-loop/solution/gong-shui-san-xie-yi-ti-shuang-jie-mo-ni-ag05/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/license-key-formatting/">482.密钥格式化</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/license-key-formatting/solution/gong-shui-san-xie-jian-dan-zi-fu-chuan-m-piya/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/construct-the-rectangle/">492.构造矩形</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/construct-the-rectangle/solution/gong-shui-san-xie-jian-dan-mo-ni-ti-by-a-7ser/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/teemo-attacking/">495.提莫攻击</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/teemo-attacking/solution/gong-shui-san-xie-jian-dan-mo-ni-ti-by-a-gteh/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/keyboard-row/">500.键盘行</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/keyboard-row/solution/gong-shui-san-xie-jian-dan-zi-fu-chuan-m-zx6b/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/base-7/">504. 七进制数</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/base-7/solution/gong-shui-san-xie-jian-dan-mo-ni-ti-by-a-2759/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/relative-ranks/">506.相对名次</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/relative-ranks/solution/gong-shui-san-xie-jian-dan-pai-xu-mo-ni-cmuzj/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/perfect-number/">507.完美数</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/perfect-number/solution/gong-shui-san-xie-jian-dan-mo-ni-tong-ji-e6jk/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/detect-capital/">520.检测大写字母</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/detect-capital/solution/gong-shui-san-xie-jian-dan-zi-fu-chuan-m-rpor/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/longest-uncommon-subsequence-i/">521.最长特殊序列 Ⅰ</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/longest-uncommon-subsequence-i/solution/gong-shui-san-xie-nao-jin-ji-zhuan-wan-z-nj3w/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/random-pick-with-weight/">528.按权重随机选择</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/random-pick-with-weight/solution/gong-shui-san-xie-yi-ti-shuang-jie-qian-8bx50/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/complex-number-multiplication/">537.复数乘法</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/complex-number-multiplication/solution/gong-shui-san-xie-jian-dan-mo-ni-ti-by-a-avlh/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/minimum-time-difference/">539.最小时间差</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/minimum-time-difference/solution/gong-shui-san-xie-jian-dan-mo-ni-ti-by-a-eygg/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/reverse-string-ii/">541.反转字符串 II</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/reverse-string-ii/solution/gong-shui-san-xie-jian-dan-zi-fu-chuan-m-p88f/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/student-attendance-record-i/">551.学生出勤记录 I</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/student-attendance-record-i/solution/gong-shui-san-xie-jian-dan-mo-ni-ti-by-a-hui7/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/reshape-the-matrix/">566.重塑矩阵</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/reshape-the-matrix/solution/jian-dan-ti-zhong-quan-chu-ji-ke-yi-kan-79gv5/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/longest-harmonious-subsequence/">594.最长和谐子序列</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/longest-harmonious-subsequence/solution/gong-shui-san-xie-yi-ti-shuang-jie-hua-d-quuh/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/range-addition-ii/">598. 范围求和II</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/range-addition-ii/solution/gong-shui-san-xie-jian-dan-mo-ni-ti-by-a-006h/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/minimum-index-sum-of-two-lists/">599.两个列表的最小索引总和</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/minimum-index-sum-of-two-lists/solution/by-ac_oier-oh5b/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/set-mismatch/">645.错误的集合</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/set-mismatch/solution/gong-shui-san-xie-yi-ti-san-jie-ji-shu-s-vnr9/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/image-smoother/">661.图片平滑器</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/image-smoother/solution/by-ac_oier-nn3v/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/baseball-game/">682.棒球比赛</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/baseball-game/solution/by-ac_oier-4mhz/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/binary-number-with-alternating-bits/">693.交替位二进制数</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/binary-number-with-alternating-bits/solution/gong-si-shui-by-ac_oier-zuw7/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/to-lower-case/">709.转换成小写字母</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/to-lower-case/solution/gong-shui-san-xie-jian-dan-zi-fu-chuan-m-czpo/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/1-bit-and-2-bit-characters/">717.1比特与2比特字符</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/1-bit-and-2-bit-characters/solution/gong-shui-san-xie-jian-dan-mo-ni-ti-by-a-igh7/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/longest-word-in-dictionary/">720.词典中最长的单词</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/longest-word-in-dictionary/solution/by-ac_oier-bmot/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/number-of-atoms/">726.原子的数量</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/number-of-atoms/solution/gong-shui-san-xie-shi-yong-xiao-ji-qiao-l5ak4/">LeetCode题解链接</a></td><td style="text-align: center;">困难</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/largest-number-at-least-twice-of-others/">747.至少是其他数字两倍的最大数</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/largest-number-at-least-twice-of-others/solution/gong-shui-san-xie-jian-dan-mo-ni-ti-by-a-8179/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/shortest-completing-word/">748.最短补全词</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/shortest-completing-word/solution/gong-shui-san-xie-jian-dan-zi-fu-chuan-j-x4ao/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/prime-number-of-set-bits-in-binary-representation/">762.二进制表示中质数个计算置位</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/prime-number-of-set-bits-in-binary-representation/solution/by-ac_oier-w50x/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/toeplitz-matrix/">766.托普利茨矩阵</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/toeplitz-matrix/solution/cong-ci-pan-du-qu-cheng-ben-fen-xi-liang-f20w/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/valid-tic-tac-toe-state/">794.有效的井字游戏</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/valid-tic-tac-toe-state/solution/gong-shui-san-xie-fen-qing-kuang-tao-lun-pikn/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/rotate-string/">796.旋转字符串</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/rotate-string/solution/by-ac_oier-bnkx/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/unique-morse-code-words/">804.唯一摩尔斯密码词</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/unique-morse-code-words/solution/by-ac_oier-a9hv/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/number-of-lines-to-write-string/">806.写字符串需要的行数</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/number-of-lines-to-write-string/solution/by-ac_oier-5hg2/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/most-common-word/">819.最常见的单词</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/most-common-word/solution/by-ac_oier-6aqd/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/hand-of-straights/">846.一手顺子</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/hand-of-straights/solution/gong-shui-san-xie-shu-ju-jie-gou-mo-ni-t-4hxw/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/buddy-strings/">859.亲密字符串</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/buddy-strings/solution/gong-shui-san-xie-jian-dan-zi-fu-chuan-m-q056/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/transpose-matrix/">867.转置矩阵</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/transpose-matrix/solution/yi-you-wei-jin-huo-xu-ni-neng-kan-kan-zh-m53m/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/uncommon-words-from-two-sentences/">884.两句话中的不常见单词</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/uncommon-words-from-two-sentences/solution/gong-shui-san-xie-shu-ju-jie-gou-mo-ni-t-wwam/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/monotonic-array/">896.单调数列</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/monotonic-array/solution/wei-shi-yao-yi-ci-bian-li-yao-bi-liang-c-uglp/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/sort-array-by-parity/">905.按奇偶排序数组</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/sort-array-by-parity/solution/by-dega-vu-8z4f/">Freedom的题解</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">😻😻😻😻</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/find-the-town-judge/">997.找到小镇的法官</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/find-the-town-judge/solution/gong-shui-san-xie-jian-dan-chu-du-ru-du-5ms57/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/grid-illumination/">1001.网格照明</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/grid-illumination/solution/gong-shui-san-xie-ha-xi-biao-xian-ying-s-s48d/">LeetCode题解链接</a></td><td style="text-align: center;">困难</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/maximize-sum-of-array-after-k-negations/">1005.K 次取反后最大化的数组和</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/maximize-sum-of-array-after-k-negations/solution/gong-shui-san-xie-jian-dan-fen-qing-kuan-6qwu/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/remove-all-adjacent-duplicates-in-string/">1047.删除字符串中的所有相邻重复项</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/remove-all-adjacent-duplicates-in-string/solution/cong-30-dao-100wu-chong-shi-xian-jie-jue-vkah/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/occurrences-after-bigram/">1078.Bigram 分词</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/occurrences-after-bigram/solution/gong-shui-san-xie-jian-dan-zi-fu-chuan-m-qyki/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/path-in-zigzag-labelled-binary-tree/">1104.二叉树寻路</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/path-in-zigzag-labelled-binary-tree/solution/gong-shui-san-xie-yi-ti-shuang-jie-mo-ni-rw2d/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/day-of-the-year/">1154.一年中的第几天</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/day-of-the-year/solution/gong-shui-san-xie-jian-dan-qian-zhui-he-lwo2g/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/day-of-the-week/">1185.一周中的第几天</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/day-of-the-week/solution/gong-shui-san-xie-jian-dan-ri-qi-tong-ji-czt6/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/maximum-number-of-balloons/">1189.“气球” 的最大数量</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/maximum-number-of-balloons/solution/gong-shui-san-xie-jian-dan-mo-ni-ti-by-a-9px4/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/remove-palindromic-subsequences/">1332.删除回文子序列</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/remove-palindromic-subsequences/solution/gong-shui-san-xie-jian-dan-mo-ni-ti-by-a-0zwn/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/number-of-steps-to-reduce-a-number-to-zero/">1342.将数字变成 0 的操作次数</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/number-of-steps-to-reduce-a-number-to-zero/solution/gong-shui-san-xie-note-bie-pian-yi-ti-sh-85fb/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/lucky-numbers-in-a-matrix/">1380.矩阵中的幸运数</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/lucky-numbers-in-a-matrix/solution/gong-shui-san-xie-jian-dan-mo-ni-ti-by-a-9xwg/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/destination-city/">1436.旅行终点站</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/destination-city/solution/gong-shui-san-xie-jian-dan-fang-jia-mo-n-y47c/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/consecutive-characters/">1446.连续字符</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/consecutive-characters/solution/gong-shui-san-xie-jian-dan-shuang-zhi-zh-xtv6/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/running-sum-of-1d-array/">1480.一维数组的动态和</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/running-sum-of-1d-array/solution/gong-shui-san-xie-yi-wei-qian-zhui-he-mo-g8hn/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/xor-operation-in-an-array/">1486.数组异或操作</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/xor-operation-in-an-array/solution/gong-shui-san-xie-yi-ti-shuang-jie-mo-ni-dggg/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/water-bottles/">1518.换酒问题</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/water-bottles/solution/gong-shui-san-xie-yi-ti-shuang-jie-ji-sh-7yyo/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/replace-all-s-to-avoid-consecutive-repeating-characters/">1576.替换所有的问号</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/replace-all-s-to-avoid-consecutive-repeating-characters/solution/gong-shui-san-xie-jian-dan-zi-fu-chuan-m-fa1u/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/count-unhappy-friends/">1583.统计不开心的朋友</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/count-unhappy-friends/solution/gong-shui-san-xie-ha-xi-biao-mo-ni-ti-by-2qy0/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/find-servers-that-handled-most-number-of-requests/">1606.找到处理最多请求的服务器</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/find-servers-that-handled-most-number-of-requests/solution/by-ac_oier-zgm6/">LeetCode题解链接</a></td><td style="text-align: center;">困难</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/maximum-nesting-depth-of-the-parentheses/">1614.括号的最大嵌套深度</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/maximum-nesting-depth-of-the-parentheses/solution/gong-shui-san-xie-jian-dan-mo-ni-ti-by-a-pf5d/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/slowest-key/">1629.按键持续时间最长的键</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/slowest-key/solution/gong-shui-san-xie-jian-dan-mo-ni-ti-by-a-zjwb/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/get-maximum-in-generated-array/">1646.获取生成数组中的最大值</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/get-maximum-in-generated-array/solution/gong-shui-san-xie-jian-dan-mo-ni-ti-by-a-sj53/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/richest-customer-wealth/">1672.最富有客户的资产总量</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/richest-customer-wealth/solution/by-ac_oier-ai19/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/count-of-matches-in-tournament/">1688.比赛中的配对次数</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/count-of-matches-in-tournament/solution/gong-shui-san-xie-jian-dan-nao-jin-ji-zh-cx7a/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/where-will-the-ball-fall/">1706.球会落何处</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/where-will-the-ball-fall/solution/gong-shui-san-xie-jian-dan-mo-ni-ti-by-a-jz6f/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/calculate-money-in-leetcode-bank/">1716.计算力扣银行的钱</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/calculate-money-in-leetcode-bank/solution/gong-shui-san-xie-jian-dan-mo-ni-ti-by-a-ifit/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/decode-xored-array/">1720.解码异或后的数组</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/decode-xored-array/solution/gong-shui-san-xie-li-yong-yi-huo-xing-zh-p1bi/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/number-of-rectangles-that-can-form-the-largest-square/">1725.可以形成最大正方形的矩形数目</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/number-of-rectangles-that-can-form-the-largest-square/solution/gong-shui-san-xie-jian-dan-mo-ni-ti-by-a-7756/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/latest-time-by-replacing-hidden-digits/">1736.替换隐藏数字得到的最晚时间</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/latest-time-by-replacing-hidden-digits/solution/gong-shui-san-xie-ti-huan-yin-cang-shu-z-2l1h/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/restore-the-array-from-adjacent-pairs/">1743.从相邻元素对还原数组</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/restore-the-array-from-adjacent-pairs/solution/gong-shui-san-xie-yi-ti-shuang-jie-dan-x-elpx/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/sum-of-unique-elements/">1748.唯一元素的和</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/sum-of-unique-elements/solution/gong-shui-san-xie-yi-ti-shuang-jie-pai-x-atnd/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/longest-nice-substring/">1763.最长的美好子字符串</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/longest-nice-substring/solution/cong-shu-ju-fan-wei-xuan-ze-he-gua-suan-n3y2a/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/find-center-of-star-graph/">1791.找出星型图的中心节点</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/find-center-of-star-graph/solution/gong-shui-san-xie-jian-dan-mo-ni-ti-by-a-qoix/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/truncate-sentence/">1816.截断句子</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/truncate-sentence/solution/gong-shui-san-xie-jian-dan-zi-fu-chuan-m-l7gu/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/single-threaded-cpu/">1834.单线程 CPU</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/single-threaded-cpu/solution/gong-shui-san-xie-shu-ju-jie-gou-yun-yon-1qk0/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/check-if-all-the-integers-in-a-range-are-covered/">1893.检查是否区域内所有整数都被覆盖</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/check-if-all-the-integers-in-a-range-are-covered/solution/gong-shui-san-xie-yi-ti-shuang-jie-mo-ni-j83x/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/find-the-student-that-will-replace-the-chalk/">1894.找到需要补充粉笔的学生编号</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/find-the-student-that-will-replace-the-chalk/solution/gong-shui-san-xie-yi-ti-shuang-jie-qian-kpqsk/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/count-special-quadruplets/">1995.统计特殊四元组</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/count-special-quadruplets/solution/gong-shui-san-xie-yi-ti-si-jie-mei-ju-ha-gmhv/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/reverse-prefix-of-word/">2000.反转单词前缀</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/reverse-prefix-of-word/solution/gong-shui-san-xie-jian-dan-shuang-zhi-zh-dp9u/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/maximum-difference-between-increasing-elements/">2016.增量元素之间的最大差值</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/maximum-difference-between-increasing-elements/solution/gong-shui-san-xie-jian-dan-mo-ni-ti-by-a-gisg/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/count-number-of-pairs-with-absolute-difference-k/">2006.差的绝对值为 K 的数对数目</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/count-number-of-pairs-with-absolute-difference-k/solution/gong-shui-san-xie-jian-dan-mo-ni-ti-by-a-1jel/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/convert-1d-array-into-2d-array/">2022.将一维数组转变成二维数组</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/convert-1d-array-into-2d-array/solution/gong-shui-san-xie-jiang-2021-de-1-gai-ch-qc1a/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/find-missing-observations/">2028.找出缺失的观测数据</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/find-missing-observations/solution/by-ac_oier-x22k/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/remove-colored-pieces-if-both-neighbors-are-the-same-color/">2038.如果相邻两个颜色均相同则删除当前颜色</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/remove-colored-pieces-if-both-neighbors-are-the-same-color/solution/gong-shui-san-xie-nao-jin-ji-zhuan-wan-y-a8xm/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/simple-bank-system/">2043.简易银行系统</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/simple-bank-system/solution/by-ac_oier-9pqi/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/number-of-valid-words-in-a-sentence/">2047.句子中的有效单词数</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/number-of-valid-words-in-a-sentence/solution/gong-shui-san-xie-jian-dan-zi-fu-chuan-m-5pcz/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/walking-robot-simulation-ii/">2069.模拟行走机器人 II</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/walking-robot-simulation-ii/solution/by-ac_oier-6zib/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/group-anagrams-lcci/">面试题10.02. 变位词组</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/group-anagrams-lcci/solution/gong-shui-san-xie-tong-ji-bian-wei-ci-de-0iqe/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟 </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双指针</title>
      <link href="/2022/04/15/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
      <url>/2022/04/15/%E5%8F%8C%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<table><colgroup><col style="width: 37%"><col style="width: 37%"><col style="width: 2%"><col style="width: 22%"></colgroup><thead><tr class="header"><th style="text-align: center;">题号</th><th style="text-align: center;">题解</th><th style="text-align: center;">难度</th><th style="text-align: center;">推荐</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/">3.无重复字符的最长子串</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/solution/shua-chuan-lc-shuang-zhi-zhen-ha-xi-biao-q08m/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/container-with-most-water/">11.盛最多水的容器</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/container-with-most-water/solution/shua-chuan-lc-shuang-zhi-zhen-tan-xin-ji-52gf/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/3sum/">15. 三数之和</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/3sum/solution/shua-chuan-lc-pai-xu-shuang-zhi-zhen-jie-cd8r/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/3sum-closest/">16.最接近的三数之和</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/3sum-closest/solution/shua-chuan-lc-pai-xu-shuang-zhi-zhen-jie-p2ou/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/4sum/">18. 四数之和</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/4sum/solution/shua-chuan-lc-pai-xu-shuang-zhi-zhen-jie-dqx7/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">19.删除链表的倒数第 N 个结点</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/solution/shua-chuan-lc-lian-biao-kuai-man-zhi-zhe-1gs1/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/">26.删除有序数组中的重复项</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/solution/shua-chuan-lc-jian-ji-shuang-zhi-zhen-ji-2eg8">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/remove-element/">27.移除元素</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/remove-element/solution/shuang-zhi-zhen-by-dega-vu-99a0/">Freedom的题解</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">😻😻😻</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/jump-game-ii/">45. 跳跃游戏II</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/jump-game-ii/solution/c-by-dega-vu-vpb9/">Freedom的题解</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">😻😻😻😻</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/merge-sorted-array/">88.合并两个有序数组</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/merge-sorted-array/solution/by-dega-vu-trkn/">Freedom的题解</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">😻😻😻</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/reverse-vowels-of-a-string/">345.反转字符串中的元音字母</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/reverse-vowels-of-a-string/solution/by-dega-vu-9y71/">Freedom的题解</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">😻😻😻</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/longest-substring-with-at-least-k-repeating-characters/">395.至少有 K 个重复字符的最长子串</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/longest-substring-with-at-least-k-repeating-characters/solution/bf-by-dega-vu-uz7h/">Freedom的题解</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">😻😻😻😻</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/arithmetic-slices/">413.等差数列划分</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/arithmetic-slices/solution/s-by-dega-vu-h0kx/">Freedom的题解</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">😻😻😻</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/longest-repeating-character-replacement/">424.替换后的最长重复字符</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/longest-repeating-character-replacement/solution/c-by-dega-vu-9k6b/">Freedom的题解</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">😻😻😻😻</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/">438.找到字符串中所有字母异位词</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/solution/hua-dong-chuang-kou-shuang-zhi-zhen-by-d-buzc/">Freedom的题解</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">😻😻😻</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/heaters/">475. 供暖器</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/heaters/solution/tan-xin-shuang-zhi-zhen-by-dega-vu-625r/">Freedom的题解</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">😻😻😻</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/string-compression/">443.压缩字符串</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/string-compression/solution/jian-dan-mo-ni-ti-by-dega-vu-klum/">Freedom的题解</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">😻😻😻😻</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/max-consecutive-ones/">485.最大连续 1 的个数</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/max-consecutive-ones/solution/you-shi-yi-tian-gao-pin-jian-dan-ti-ni-d-avj1/">Freedom的题解</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">😻😻😻😻</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/random-flip-matrix/">519.随机翻转矩阵</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/random-flip-matrix/solution/by-dega-vu-eiq8/">Freedom的题解</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">😻😻😻😻</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/longest-word-in-dictionary-through-deleting/">524.通过删除字母匹配到字典里最长单词</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/longest-word-in-dictionary-through-deleting/solution/gong-shui-san-xie-xiang-jie-pai-xu-shuan-qi20/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/shortest-unsorted-continuous-subarray/">581.最短无序连续子数组</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/shortest-unsorted-continuous-subarray/solution/gong-shui-san-xie-yi-ti-shuang-jie-shuan-e1le/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/longest-harmonious-subsequence/">594.最长和谐子序列</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/longest-harmonious-subsequence/solution/gong-shui-san-xie-yi-ti-shuang-jie-hua-d-quuh/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/valid-triangle-number/">611.有效三角形的个数</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/valid-triangle-number/solution/gong-shui-san-xie-yi-ti-san-jie-jian-dan-y1we/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/sum-of-square-numbers/">633.平方数之和</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/sum-of-square-numbers/solution/gong-shui-san-xie-yi-ti-san-jie-mei-ju-s-7qi5/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/two-sum-iv-input-is-a-bst/">653.两数之和 IV - 输入 BST</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/two-sum-iv-input-is-a-bst/solution/by-ac_oier-zr4o/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/k-th-smallest-prime-fraction/">786.第 K 个最小的素数分数</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/k-th-smallest-prime-fraction/solution/gong-shui-san-xie-yi-ti-shuang-jie-you-x-8ymk/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/friends-of-appropriate-ages/">825.适龄的朋友</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/friends-of-appropriate-ages/solution/gong-shui-san-xie-yi-ti-shuang-jie-pai-x-maa8/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/flipping-an-image/">832.翻转图像</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/flipping-an-image/solution/shuang-zhi-zhen-yi-bian-chu-li-huan-you-ik0v1/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/push-dominoes/">838.推多米诺</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/push-dominoes/solution/gong-shui-san-xie-yi-ti-shuang-jie-bfs-y-z52w/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/boats-to-save-people/">881.救生艇</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/boats-to-save-people/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-hosg8/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/reverse-only-letters/">917.仅仅反转字母</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/reverse-only-letters/solution/gong-shui-san-xie-jian-dan-shuang-zhi-zh-xrpt/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/binary-subarrays-with-sum/">930.和相同的二元子数组</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/binary-subarrays-with-sum/solution/gong-shui-san-xie-yi-ti-shuang-jie-qian-hfoc0/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/subarrays-with-k-different-integers/">992.K 个不同整数的子数组</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/subarrays-with-k-different-integers/solution/miao-dong-xi-lie-xiang-jie-shuang-zhi-zh-9k8w/">LeetCode题解链接</a></td><td style="text-align: center;">困难</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/max-consecutive-ones-iii/">1004.最大连续1的个数 III</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/max-consecutive-ones-iii/solution/san-chong-jie-fa-cong-dong-tai-gui-hua-d-gxks/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/grumpy-bookstore-owner/">1052.爱生气的书店老板</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/grumpy-bookstore-owner/solution/hua-dong-chuang-kou-luo-ti-by-ac_oier-nunu/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/split-a-string-in-balanced-strings/">1221.分割平衡字符串</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/split-a-string-in-balanced-strings/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-wumnk/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/remove-palindromic-subsequences/">1332.删除回文子序列</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/remove-palindromic-subsequences/solution/gong-shui-san-xie-jian-dan-mo-ni-ti-by-a-0zwn/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/consecutive-characters/">1446.连续字符</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/consecutive-characters/solution/gong-shui-san-xie-jian-dan-shuang-zhi-zh-xtv6/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/maximum-number-of-visible-points/">1610.可见点的最大数目</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/maximum-number-of-visible-points/solution/gong-shui-san-xie-qiu-ji-jiao-ji-he-ti-b-0bid/">LeetCode题解链接</a></td><td style="text-align: center;">困难</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/restore-the-array-from-adjacent-pairs/">1743.从相邻元素对还原数组</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/restore-the-array-from-adjacent-pairs/solution/gong-shui-san-xie-yi-ti-shuang-jie-dan-x-elpx/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/sum-of-unique-elements/">1748.唯一元素的和</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/sum-of-unique-elements/solution/gong-shui-san-xie-yi-ti-shuang-jie-pai-x-atnd/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/form-array-by-concatenating-subarrays-of-another-array/">1764.通过连接另一个数组的子数组得到一个数组</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/form-array-by-concatenating-subarrays-of-another-array/solution/clean-solutionni-jue-dui-neng-kan-dong-d-l4ts/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/reverse-prefix-of-word/">2000.反转单词前缀</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/reverse-prefix-of-word/solution/gong-shui-san-xie-jian-dan-shuang-zhi-zh-dp9u/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/maximize-the-confusion-of-an-exam/">2024.考试的最大困扰度</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/maximize-the-confusion-of-an-exam/solution/by-ac_oier-2rii/">LeetCode题解链接</a></td><td style="text-align: center;">中等</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="odd"><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/number-of-valid-words-in-a-sentence/">2047.句子中的有效单词数</a></td><td style="text-align: center;"><a href="https://leetcode-cn.com/problems/number-of-valid-words-in-a-sentence/solution/gong-shui-san-xie-jian-dan-zi-fu-chuan-m-5pcz/">LeetCode题解链接</a></td><td style="text-align: center;">简单</td><td style="text-align: center;">🤩🤩🤩🤩</td></tr><tr class="even"><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一题</title>
      <link href="/2022/04/15/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
      <url>/2022/04/15/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="april">April</h1><table><colgroup><col style="width: 5%"><col style="width: 33%"><col style="width: 33%"><col style="width: 2%"><col style="width: 25%"></colgroup><thead><tr class="header"><th>日期</th><th>题目</th><th>题解</th><th>难度</th><th style="text-align: center;">推荐指数</th></tr></thead><tbody><tr class="odd"><td>2022.4.15</td><td><a href="https://leetcode-cn.com/problems/mini-parser/">385.迷你语法分析器</a></td><td><a href="https://leetcode-cn.com/problems/mini-parser/solution/by-dega-vu-6tx9/">Freedom的题解</a></td><td>中等</td><td style="text-align: center;">😻😻😻😻</td></tr><tr class="even"><td>2022.4.14</td><td><a href="https://leetcode-cn.com/problems/richest-customer-wealth/">1672.最富有客户的资产总量</a></td><td><a href="https://leetcode-cn.com/problems/richest-customer-wealth/solution/emm-by-dega-vu-ecxk/">Freedom的题解</a></td><td>简单</td><td style="text-align: center;">😻</td></tr><tr class="odd"><td>2022.4.16</td><td><a href="https://leetcode-cn.com/problems/largest-palindrome-product/">479.最大回文数乘积</a></td><td><a href="https://leetcode-cn.com/problems/largest-palindrome-product/solution/by-dega-vu-k9fe/">Freedom的题解</a></td><td>困难</td><td style="text-align: center;">😻</td></tr><tr class="even"><td>2022.4.17</td><td><a href="https://leetcode-cn.com/problems/most-common-word/">819.最常见的单词</a></td><td><a href="https://leetcode-cn.com/problems/most-common-word/solution/by-dega-vu-0wu3/">Freedom的题解</a></td><td>简单</td><td style="text-align: center;">😻😻😻</td></tr><tr class="odd"><td>2022.4.18</td><td><a href="https://leetcode-cn.com/problems/lexicographical-numbers/">386.字典序排数</a></td><td><a href="https://leetcode-cn.com/problems/lexicographical-numbers/solution/dfs-by-dega-vu-c9vt/">Freedom的题解</a></td><td>中等</td><td style="text-align: center;">😻😻😻😻</td></tr><tr class="even"><td>2022.4.19</td><td><a href="https://leetcode-cn.com/problems/shortest-distance-to-a-character/">821.字符的最短距离</a></td><td><a href="https://leetcode-cn.com/problems/shortest-distance-to-a-character/solution/by-dega-vu-aag3/">Freedom的题解</a></td><td>简单</td><td style="text-align: center;">😻</td></tr><tr class="odd"><td>2022.4.20</td><td><a href="https://leetcode-cn.com/problems/longest-absolute-file-path/">388.文件的最长绝对路径</a></td><td><a href="https://leetcode-cn.com/problems/longest-absolute-file-path/solution/zhan-by-dega-vu-gafe/">Freedom的题解</a></td><td>中等</td><td style="text-align: center;">😻😻😻😻😻</td></tr><tr class="even"><td>2022.4.21</td><td><a href="https://leetcode-cn.com/problems/goat-latin/">824.山羊拉丁文</a></td><td><a href="https://leetcode-cn.com/problems/goat-latin/solution/mo-ni-ti-zhu-yi-xi-jie-by-dega-vu-3bx0/">Freedom的题解</a></td><td>简单</td><td style="text-align: center;">😻😻</td></tr><tr class="odd"><td>2022.4.22</td><td><a href="https://leetcode-cn.com/problems/rotate-function/">396.旋转函数</a></td><td><a href="https://leetcode-cn.com/problems/rotate-function/solution/huan-chong-si-lu-by-dega-vu-2eex/">Freedom的题解</a></td><td>中等</td><td style="text-align: center;">😻😻😻😻😻</td></tr><tr class="even"><td>2022.4.24</td><td><a href="https://leetcode-cn.com/problems/binary-gap/">868.二进制间距</a></td><td><a href="https://leetcode-cn.com/problems/binary-gap/solution/mo-ni-ti-by-dega-vu-hx9o/">Freedom的题解</a></td><td>简单</td><td style="text-align: center;">😻😻</td></tr><tr class="odd"><td>2022.4.25</td><td><a href="https://leetcode-cn.com/problems/random-pick-index/">398.随机数索引</a></td><td><a href="https://leetcode-cn.com/problems/random-pick-index/solution/xu-shui-chi-chou-yang-by-dega-vu-kl8u/">Freedom的题解</a></td><td>中等</td><td style="text-align: center;">😻😻😻😻</td></tr><tr class="even"><td>2022.4.26</td><td><a href="https://leetcode-cn.com/problems/projection-area-of-3d-shapes/">883.三维形体投影面积</a></td><td><a href="https://leetcode-cn.com/problems/projection-area-of-3d-shapes/solution/mo-ni-ti-by-dega-vu-8x1l/">Freedom的题解</a></td><td>简单</td><td style="text-align: center;">😻😻😻</td></tr><tr class="odd"><td>2022.4.27</td><td><a href="https://leetcode-cn.com/problems/pacific-atlantic-water-flow/">417.太平洋大西洋水流问题</a></td><td><a href="https://leetcode-cn.com/problems/pacific-atlantic-water-flow/solution/dfshao-nan-wu-wu-by-dega-vu-3f2d/">Freedom的题解</a></td><td>中等</td><td style="text-align: center;">😻😻😻😻😻</td></tr><tr class="even"><td>2022.4.28</td><td><a href="https://leetcode-cn.com/problems/sort-array-by-parity/">905.按奇偶排序数组</a></td><td><a href="https://leetcode-cn.com/problems/sort-array-by-parity/solution/by-dega-vu-8z4f/">Freedom的题解</a></td><td>简单</td><td style="text-align: center;">😻😻😻😻</td></tr><tr class="odd"><td>2022.4.29</td><td><a href="https://leetcode-cn.com/problems/construct-quad-tree/">427.建立四叉树</a></td><td><a href="https://leetcode-cn.com/problems/construct-quad-tree/solution/di-gui-by-dega-vu-ny88/">Freedom的题解</a></td><td>中等</td><td style="text-align: center;">😻😻😻😻</td></tr><tr class="even"><td>2020.4.30</td><td><a href="https://leetcode-cn.com/problems/smallest-range-i/">908.最小差值 I</a></td><td><a href="https://leetcode-cn.com/problems/smallest-range-i/solution/jian-dan-mo-ni-by-dega-vu-mqu4/">Freedom的题解</a></td><td>简单</td><td style="text-align: center;">😻😻😻</td></tr></tbody></table><h1 id="may">May</h1><table><colgroup><col style="width: 5%"><col style="width: 33%"><col style="width: 33%"><col style="width: 2%"><col style="width: 25%"></colgroup><thead><tr class="header"><th>日期</th><th>题目</th><th>题解</th><th>难度</th><th>推荐</th></tr></thead><tbody><tr class="odd"><td>2022.5.1</td><td><a href="https://leetcode-cn.com/problems/all-elements-in-two-binary-search-trees/">1305.两棵二叉搜索树中的所有元素</a></td><td><a href="https://leetcode-cn.com/problems/all-elements-in-two-binary-search-trees/solution/by-dega-vu-k601/">Freedom的题解</a></td><td>中等</td><td>😻😻😻😻</td></tr><tr class="even"><td>2022.5.2</td><td><a href="https://leetcode.cn/problems/tag-validator/">591.标签验证器</a></td><td><a href="https://leetcode.cn/problems/tag-validator/solution/by-ac_oier-9l8z/">[宫水三叶]字符串模拟</a></td><td>困难</td><td>😻😻😻😻</td></tr><tr class="odd"><td>2022.5.3</td><td><a href="https://leetcode-cn.com/problems/reorder-data-in-log-files/">937.重新排列日志文件</a></td><td><a href="https://leetcode-cn.com/problems/reorder-data-in-log-files/solution/sort-by-dega-vu-9dbu/">Freedom的题解</a></td><td>简单</td><td>😻😻😻😻😻</td></tr><tr class="even"><td>2022.5.4</td><td><a href="https://leetcode-cn.com/problems/find-the-winner-of-the-circular-game/">1823.找出游戏的获胜者</a></td><td><a href="https://leetcode-cn.com/problems/find-the-winner-of-the-circular-game/solution/by-dega-vu-iual/">Freedom的题解</a></td><td>中单</td><td>😻😻😻</td></tr><tr class="odd"><td>2022.5.5</td><td><a href="https://leetcode-cn.com/problems/subarray-product-less-than-k/">713.乘积小于 K 的子数组</a></td><td><a href="https://leetcode-cn.com/problems/subarray-product-less-than-k/solution/hua-dong-chuang-kou-de-by-dega-vu-o307/">Freedom的题解</a></td><td>中等</td><td>😻😻😻</td></tr><tr class="even"><td>2022.5.6</td><td><a href="https://leetcode-cn.com/problems/number-of-recent-calls/">933.最近的请求次数</a></td><td><a href="https://leetcode-cn.com/problems/number-of-recent-calls/solution/guan-fang-ti-jie-by-dega-vu-bhfy/">Freedom的题解</a></td><td>简单</td><td>😻😻😻</td></tr><tr class="odd"><td>2022.5.7</td><td><a href="https://leetcode-cn.com/problems/minimum-genetic-mutation/">433.最小基因变化</a></td><td><a href="https://leetcode-cn.com/problems/minimum-genetic-mutation/submissions/">Freedom的题解</a></td><td>中等</td><td>😻😻😻😻😻</td></tr><tr class="even"><td>2022.5.8</td><td><a href="https://leetcode-cn.com/problems/find-all-duplicates-in-an-array/">442.数组中重复的数据</a></td><td><a href="https://leetcode-cn.com/problems/find-all-duplicates-in-an-array/solution/by-dega-vu-u2t9/">Freedom的题解</a></td><td>中等</td><td>😻😻😻😻</td></tr><tr class="odd"><td>2022.5.9</td><td><a href="https://leetcode.cn/problems/di-string-match/">942.增减字符串匹配</a></td><td><a href="https://leetcode.cn/problems/di-string-match/solution/jian-dan-mo-ni-ti-by-dega-vu-psta/">Freedom的题解</a></td><td>简单</td><td>😻😻</td></tr><tr class="even"><td>2022.5.10</td><td><a href="https://leetcode.cn/problems/cat-and-mouse-ii/">1728.猫和老鼠 II</a></td><td><a href="https://leetcode.cn/problems/cat-and-mouse-ii/solution/by-ac_oier-gse8/">[宫水三叶]博弈论 DP 困难题</a></td><td>困难</td><td>😻😻😻😻😻</td></tr><tr class="odd"><td>2022.5.11</td><td><a href="https://leetcode.cn/problems/serialize-and-deserialize-bst/">449.序列化和反序列化二叉搜索树</a></td><td><a href="https://leetcode.cn/problems/serialize-and-deserialize-bst/solution/xian-suo-hua-er-cha-shu-by-dega-vu-8or1/">Freedom的题解</a></td><td>中等</td><td>😻😻😻😻😻</td></tr><tr class="even"><td>2022.5.12</td><td><a href="https://leetcode.cn/problems/delete-columns-to-make-sorted/">944.删列造序</a></td><td><a href="https://leetcode.cn/problems/delete-columns-to-make-sorted/solution/by-dega-vu-wfkr/">Freedom的题解</a></td><td>简单</td><td>😻😻</td></tr><tr class="odd"><td>2022.5.13</td><td><a href="https://leetcode.cn/problems/one-away-lcci/">面试题 01.05.一次编辑</a></td><td><a href="https://leetcode.cn/problems/one-away-lcci/solution/shuang-zhi-zhen-mo-ni-or-dong-gui-by-deg-o61s/">Freedom的题解</a></td><td>中等</td><td>😻😻😻😻</td></tr><tr class="even"><td>2022.5.14</td><td><a href="https://leetcode.cn/problems/stickers-to-spell-word/">691.贴纸拼词</a></td><td><a href="https://leetcode.cn/problems/stickers-to-spell-word/solution/by-ac_oier-5vv3/">[宫水三叶]DFS + 记忆化搜索 运用题</a></td><td>困难</td><td>😻😻😻😻</td></tr><tr class="odd"><td>2022.5.15</td><td><a href="https://leetcode.cn/problems/largest-triangle-area/">812.最大三角形面积</a></td><td><a href="https://leetcode.cn/problems/largest-triangle-area/solution/easy-by-dega-vu-ez6u/">Freedom的题解</a></td><td>简单</td><td>😻😻</td></tr><tr class="even"><td>2022.5.16</td><td><a href="https://leetcode.cn/problems/successor-lcci/">面试题 04.06.后继者</a></td><td><a href="https://leetcode.cn/problems/successor-lcci/solution/zhong-xu-bian-li-by-dega-vu-5h9r/">Freedom的题解</a></td><td>中等</td><td>😻😻😻😻</td></tr><tr class="odd"><td>2022.5.17</td><td><a href="https://leetcode.cn/problems/verifying-an-alien-dictionary/">953.验证外星语词典</a></td><td><a href="https://leetcode.cn/problems/verifying-an-alien-dictionary/solution/by-dega-vu-zkf0/">Freedom的题解</a></td><td>简单</td><td>😻😻😻</td></tr><tr class="even"><td>2022.5.18</td><td><a href="https://leetcode.cn/problems/kth-smallest-number-in-multiplication-table/">668.乘法表中第k小的数</a></td><td><a href="https://leetcode.cn/problems/kth-smallest-number-in-multiplication-table/solution/er-fen-xi-jie-bao-zha-by-dega-vu-ltyl/">Freedom的题解</a></td><td>困难</td><td>😻😻😻😻😻</td></tr><tr class="odd"><td>2022.5.19</td><td><a href="https://leetcode.cn/problems/minimum-moves-to-equal-array-elements-ii/">462.最少移动次数使数组元素相等 II</a></td><td><a href="https://leetcode.cn/problems/minimum-moves-to-equal-array-elements-ii/solution/by-dega-vu-eusw/">Freedom的题解</a></td><td>中等</td><td>😻😻😻</td></tr><tr class="even"><td>2022.5.20</td><td><a href="https://leetcode.cn/problems/find-right-interval/">436.寻找右区间</a></td><td><a href="https://leetcode.cn/problems/find-right-interval/solution/er-fen-by-dega-vu-0bj8/">Freedom的题解</a></td><td>中等</td><td>😻😻😻😻</td></tr><tr class="odd"><td>2022.5.21</td><td><a href="https://leetcode.cn/problems/n-repeated-element-in-size-2n-array/">961.在长度 2N 的数组中找出重复 N 次的元素</a></td><td><a href="https://leetcode.cn/problems/n-repeated-element-in-size-2n-array/solution/by-dega-vu-tefe/">Freedom的题解</a></td><td>简单</td><td>😻😻😻</td></tr><tr class="even"><td>2022.5.22</td><td><a href="https://leetcode.cn/problems/can-i-win/">464.我能赢吗</a></td><td><a href="https://leetcode.cn/problems/can-i-win/solution/by-ac_oier-0ed9/">【宫水三叶】博弈论DP 运用题</a></td><td>中等</td><td>😻😻😻😻</td></tr><tr class="odd"><td>2022.5.23</td><td><a href="https://leetcode.cn/problems/cut-off-trees-for-golf-event/">675.为高尔夫比赛砍树</a></td><td><a href="https://leetcode.cn/problems/cut-off-trees-for-golf-event/solution/by-ac_oier-ksth/">【宫水三叶】一题三解:「BFS」&amp;「AStar 算法」&amp;「并查集预处理</a></td><td>困难</td><td>😻😻😻😻😻</td></tr><tr class="even"><td>2022.5.24</td><td><a href="https://leetcode.cn/problems/unique-substrings-in-wraparound-string/">467.环绕字符串中唯一的子字符串</a></td><td><a href="https://leetcode.cn/problems/unique-substrings-in-wraparound-string/solution/by-ac_oier-qteu/">【宫水三叶】线性DP + 树状数组 + 同字符最大长度计数 - 环绕字符串中唯一的子字符串</a></td><td>中等</td><td>😻😻😻😻😻</td></tr><tr class="odd"><td>2022.5.25</td><td><a href="https://leetcode.cn/problems/unique-substrings-in-wraparound-string/">467.环绕字符串中唯一的子字符串 - 力扣（LeetCode）</a></td><td></td><td>中等</td><td></td></tr><tr class="even"><td>2022.5.26</td><td><a href="https://leetcode.cn/problems/falling-squares/">699.掉落的方块 - 力扣（LeetCode）</a></td><td></td><td>困难</td><td></td></tr><tr class="odd"><td>2022.5.27</td><td><a href="https://leetcode.cn/problems/find-closest-lcci/">面试题17.11. 单词距离</a></td><td><a href="https://leetcode.cn/problems/find-closest-lcci/solution/by-dega-vu-w7ax/">Freedom的题解</a></td><td>中等</td><td>😻😻😻</td></tr><tr class="even"><td>2022.5.28</td><td><a href="https://leetcode.cn/problems/remove-outermost-parentheses/">1021.删除最外层的括号</a></td><td><a href="https://leetcode.cn/problems/remove-outermost-parentheses/solution/mo-ni-by-dega-vu-ddbv/">Freedom的题解</a></td><td>简单</td><td>😻😻😻😻</td></tr><tr class="odd"><td>2022.5.29</td><td><a href="https://leetcode.cn/problems/validate-ip-address/">468.验证IP地址</a></td><td><a href="https://leetcode.cn/problems/validate-ip-address/solution/bei-zi-ji-de-dai-ma-by-dega-vu-8ch0/">Freedom的题解</a></td><td>中等</td><td>😻😻😻</td></tr><tr class="even"><td>2022.5.30</td><td><a href="https://leetcode.cn/problems/sum-of-root-to-leaf-binary-numbers/">1022.从根到叶的二进制数之和</a></td><td><a href="https://leetcode.cn/problems/sum-of-root-to-leaf-binary-numbers/solution/dfs-by-dega-vu-und2/">Freedom的题解</a></td><td>简单</td><td>😻😻😻😻</td></tr><tr class="odd"><td>2022.5.31</td><td><a href="https://leetcode.cn/problems/Jf1JuT/">剑指 Offer II 114.外星文字典</a></td><td></td><td></td><td></td></tr></tbody></table><p>😻</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据管理基础 ch32-36</title>
      <link href="/2022/04/14/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80-ch32-36/"/>
      <url>/2022/04/14/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80-ch32-36/</url>
      
        <content type="html"><![CDATA[<h1 id="ch-32-关系模式及范式">ch 32 关系模式及范式</h1><h2 id="关系模式及第一范式1-nf">关系模式及第一范式（1 NF）</h2><ul><li><p>关系模式由五部分组成，是一个五元组：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">R(U,D,DOM,F)</span><br></pre></td></tr></table></figure><ul><li>关系名R是符号化的元组语义</li><li>U为一组属性</li><li>D为属性组U中的属性所来自的域</li><li>DOM为属性到域的映射</li><li>F为属性组U上的一组数据依赖</li></ul></li><li><p>由于D,DOM与模式设计关系不大，因此可以把关系模式看作一个三元组：R&lt;U,F&gt;</p><ul><li>当且仅当U上的一个关系r满足F时，r称为关系模式R&lt;U,F&gt;的一个关系</li><li>作为二维表，关系要符合一个最基本的条件，每个分量必须是不可分开的数据项，满足了这个条件的关系模式就属于第一范式（1NF）</li></ul></li><li><p>数据依赖</p><ul><li>是一个关系内部属性与属性之间的一种约束关系<ul><li>通过属性间值的相等与否体现出来的数据间相互联系</li></ul></li><li>是现实世界属性间相互联系的抽象</li><li>是数据内在的性质</li><li>是语义的体现</li></ul></li><li><p>数据以来的主要类型</p><ul><li>函数依赖（Functional Dependency,简记为FD)</li><li>多值依赖（Multi-Valued Dependency,简记为MVD）</li></ul></li></ul><h3 id="函数依赖">函数依赖</h3><ul><li><p>函数依赖普遍存在在现实生活中</p><ul><li><p>描述一个学生关系，可以有学号、姓名、系名等属性</p><ul><li><p>一个学号值对应一个学生，一个学生只在一个系中学习</p></li><li><p>“学号”值确定后，学生的姓名及所在系的值就被唯一确定</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Sname <span class="operator">=</span> f(Sno), Sdept <span class="operator">=</span> f(Sno)</span><br><span class="line"><span class="operator">-</span>记作Sno<span class="operator">-</span><span class="operator">&gt;</span>Sname,Sno<span class="operator">-</span><span class="operator">&gt;</span>Sdept</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>[例6.1] 建立一个描述学校教务的数据库。涉及的对象包括：</p><ul><li>学生的学号（Sno）</li><li>所在系（Sdept）</li><li>系主任姓名（Mname）</li><li>课程号（Cno）</li><li>成绩（Grade）</li><li><img src="https://s2.loli.net/2022/04/14/AiqPgjkp2XtIZ9R.png" alt="image-20220401190612448"></li></ul></li><li><p>假设学校教务的数据库模式用一个单一的关系模式Student来表示，则该关系模式的属性集合为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">U <span class="operator">=</span> {Sno,Sdept,Mname,Cno,Grade}</span><br></pre></td></tr></table></figure></li><li><p>现实世界已知的事实</p><ul><li>一个系有若干学生， 但一个学生只属于一个系；</li><li>一个系只有一名（正职）负责人；</li><li>一个学生可以选修多门课程，每门课程有若干学生选修；</li><li>每个学生学习每一门课程有一个成绩。</li></ul></li><li><p>由此得到属性组U上的一组函数依赖F：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">F <span class="operator">=</span> （Sno<span class="operator">-</span><span class="operator">&gt;</span>Sdept,Sdept<span class="operator">-</span><span class="operator">&gt;</span>Mname,(Sno,Cno)<span class="operator">-</span><span class="operator">&gt;</span>Grade</span><br></pre></td></tr></table></figure></li></ul><h2 id="nf的问题">1 NF的问题</h2><h3 id="nf的问题-1">1 NF的问题 1</h3><ul><li>关系模式Student&lt;U,F&gt;存在的问题：<ul><li>数据冗余<ul><li>浪费大量的存储空间</li></ul></li><li>修改复杂，更新异常（Update Anomalies)<ul><li>数据冗余，更新数据时，维护数据完整性代价大</li></ul></li><li>插入异常</li><li>删除异常</li></ul></li></ul><h3 id="nf的问题-2">1 NF的问题 2</h3><ul><li><p>结论</p><ul><li>Student关系模式不是一个好的关系模式</li></ul></li><li><p>原因</p><ul><li>由存在于模式中的某些数据依赖引起的</li></ul></li><li><p>解决方法</p><ul><li>用规范化理论改造关系模式来消除其中不合适的数据依赖</li></ul></li><li><p>把这个单一的模式分成三个关系模式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">S(Sno,Sdept,Sno-&gt;Sdept);</span><br><span class="line">SC(Sno,Cno,Grade,(Sno,Cno)-&gt;Grade);</span><br><span class="line">DEPT(Sdept,Mname,Sdept-&gt;Mname);</span><br></pre></td></tr></table></figure></li><li><p>这三个模式不会发生插入异常，删除异常的问题，数据的冗余也得到了控制</p></li></ul><h2 id="范式">范式</h2><h3 id="范式-1">范式 1</h3><ul><li>范式是符合某一种级别的关系模式的集合。</li><li>关系数据库中的关系必须满足一定的要求。满足不同程度要求的为不同范式。</li><li>范式的种类：<ul><li>第一范式(1NF)</li><li>第二范式(2NF)</li><li>第三范式(3NF)</li><li>BC范式(BCNF)</li><li>第四范式(4NF)</li><li>第五范式(5NF)</li></ul></li></ul><h3 id="范式-2">范式 2</h3><ul><li><p>各种范式之间存在联系：</p><p><img src="https://s2.loli.net/2022/04/14/qL9leMdDNHv1y2n.png" alt="image-20220401193034542"></p><ul><li><p>某一关系模式R为第n范式，可简记为R∈<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="5.061ex" height="1.57ex" role="img" focusable="false" viewBox="0 -683 2237 694"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mi" transform="translate(1488,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g></g></g></svg></mjx-container></span>。</p></li><li><p>一个低一级范式的关系模式，通过模式分解（schemadecomposition）可以转换为若干个高一级范式的关系模式的集合，这种过程就叫规范化（normalization）</p><p><img src="https://s2.loli.net/2022/04/14/TK8FajPVtXy3BIA.png" alt="image-20220401193047018"></p></li></ul></li></ul><h1 id="ch-33-函数依赖与码">ch 33 函数依赖与码</h1><h2 id="函数依赖-1">函数依赖</h2><h3 id="函数依赖-1-1">函数依赖 1</h3><ul><li><p>定义6.1设R(U)是一个属性集U上的关系模式，X和Y是U的子集。若对于R(U)的任意一个可能的关系r，r中不可能存在两个元组在X上的属性值相等， 而在Y上的属性值不等，则称“X函数确定Y”或“Y函数依赖于X”，记作X→Y，X称为这个函数依赖的决定因素（Determinant）</p></li><li><p>[例] Student(Sno, Sname, Ssex, Sage, Sdept),假设不允许重名，则有:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Sno → Ssex，      Sno → Sage</span><br><span class="line">Sno → Sdept，    Sno ←→ Sname</span><br><span class="line">Sname → Ssex， Sname → Sage</span><br><span class="line">Sname → Sdept</span><br><span class="line">但Ssex ↛ Sage, Ssex ↛ Sdept</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/14/R58zlchBYGVx7PN.png" alt="image-20220401193337176"></p></li></ul><h3 id="函数依赖-2">函数依赖 2</h3><ul><li>函数依赖不是指关系模式R的某个或某些关系实例满足的约束条件，而是指R的所有关系实例均要满足的约束条件。</li><li>函数依赖是语义范畴的概念。只能根据数据的语义来确定函数依赖。<ul><li>例如“姓名→年龄”这个函数依赖只有在不允许有同名人的条件下成立</li></ul></li><li>数据库设计者可以对现实世界作强制的规定。<ul><li>例如规定不允许同名人出现，函数依赖“姓名→年龄”成立。所插入的元组必须满足规定的函数依赖，若发现有同名人存在，则拒绝插入该元组。</li></ul></li></ul><h2 id="平凡函数依赖与非平凡函数依赖">平凡函数依赖与非平凡函数依赖</h2><ul><li><p>在关系模式R(U)中，对于U的子集X和Y，</p><ul><li>X→Y，但Y ⊈ X，则称X→Y是非平凡的函数依赖</li><li>X→Y，但Y  X, 则称X→Y是平凡的函数依赖</li></ul></li><li><p>对于任一关系模式，平凡函数依赖都是必然成立的，它不反映新的语义。因此若不特别声明，我们总是讨论非平凡函数依赖</p></li><li><p>例：在关系SC(Sno, Cno, Grade)中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">非平凡函数依赖： (Sno, Cno) → Grade</span><br><span class="line">平凡函数依赖：   (Sno, Cno) → Sno </span><br><span class="line">                (Sno, Cno) → Cno</span><br></pre></td></tr></table></figure></li></ul><h2 id="完全函数依赖与部分函数依赖">完全函数依赖与部分函数依赖</h2><ul><li>定义6.2 在R(U)中，如果X→Y，并且对于X的任何一个真子集X’, 都有 X’ ↛ Y,则称Y对X完全函数依赖，记作<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="8.559ex" height="1.934ex" role="img" focusable="false" viewBox="0 -843.8 3783.2 854.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="msup" transform="translate(1129.8,0)"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1033,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g></g></g><g data-mml-node="mi" transform="translate(3020.2,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g></g></g></svg></mjx-container></span>。</li><li>若X→Y，但Y不完全函数依赖于X，则称Y对X部分函数依赖，记作<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="8.562ex" height="1.939ex" role="img" focusable="false" viewBox="0 -846 3784.6 857"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="msup" transform="translate(1129.8,0)"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1033,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g></g></g><g data-mml-node="mi" transform="translate(3021.6,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g></g></g></svg></mjx-container></span></li></ul><h2 id="传递函数依赖">传递函数依赖</h2><p><img src="https://s2.loli.net/2022/04/14/ENrcZV4wL51JO8v.png" alt="image-20220401194302746"></p><h2 id="码">码</h2><h3 id="码-1">码 1</h3><p><img src="https://s2.loli.net/2022/04/14/1kHpFhmKPY53jel.png" alt="image-20220401194330160"></p><h3 id="码-2">码 2</h3><p><img src="https://s2.loli.net/2022/04/14/1kHpFhmKPY53jel.png" alt="image-20220401200345456"></p><h2 id="外码">外码</h2><p><img src="https://s2.loli.net/2022/04/14/Cy51uTUEeQRGoZB.png" alt="image-20220401200449172"></p><h1 id="ch-34-1nf-2nf-3nf">ch 34 1NF , 2NF, 3NF</h1><h2 id="nf">1 NF</h2><ul><li>如果一个关系模式R的所有属性都是不可分的基本数据项，则R∈1NF。</li><li>第一范式是对关系模式的最起码的要求。不满足第一范式的数据库模式不能称为关系数据库。</li><li>但是满足第一范式的关系模式并不一定是一个好的关系模式。</li></ul><h2 id="nf-1">2 NF</h2><h3 id="nf-1-1">2 NF 1</h3><p><img src="https://s2.loli.net/2022/04/14/ANXc4fGyPSOvYk6.png" alt="image-20220401200736546"></p><h3 id="nf-2">2 NF 2</h3><p><img src="https://s2.loli.net/2022/04/14/41sOGzAgLDm3RUj.png" alt="image-20220401200932450"></p><h3 id="nf-3">2 NF 3</h3><p><img src="https://s2.loli.net/2022/04/14/y2lxqGPo16nw39M.png" alt="image-20220401201152603"></p><h2 id="nf-4">3 NF</h2>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> 数据管理基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据管理基础 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据管理基础 ch26-31</title>
      <link href="/2022/04/14/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80-ch26-31/"/>
      <url>/2022/04/14/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80-ch26-31/</url>
      
        <content type="html"><![CDATA[<h1 id="ch-26-数据库完整性">ch 26 数据库完整性</h1><ul><li>数据库的完整性<ul><li>数据的正确性<ul><li>是指数据是符合现实世界语义，反映了当前实际状况的</li></ul></li><li>数据的相容性<ul><li>是指数据库同一对象在不同关系表中的数据是符合逻辑的</li></ul></li><li>例如，<ul><li>学生的学号必须唯一</li><li>性别只能是男或女</li><li>本科学生年龄的取值范围为14~50的整数</li><li>学生所选的课程必须是学校开设的课程，学生所在的院系必须是学校已成立的院系</li></ul></li></ul></li></ul><h2 id="完整性-vs.安全性">完整性 vs.安全性</h2><ul><li>数据的完整性<ul><li>防止数据库中存在不符合语义的数据，也就是防止数据库中存在不正确的数据</li><li>防范对象：不合语义的、不正确的数据</li></ul></li><li>数据的安全性<ul><li>保护数据库，防止恶意的破坏和非法的存取</li><li>防范对象：非法用户和非法操作</li></ul></li></ul><h2 id="完整性机制">完整性机制</h2><ul><li>提供定义完整性约束条件的机制<ul><li>完整性约束条件也称为完整性规则，是数据库中的数据必须满足的语义约束条件</li><li>SQL标准使用了一系列概念来描述完整性，包括关系模型的实体完整性、参照完整性和用户定义完整性</li><li>这些完整性一般由SQL的数据定义语言语句来实现</li></ul></li><li>提供完整性检查的方法<ul><li>数据库管理系统中检查数据是否满足完整性约束条件的机制称为完整性检查。</li><li>一般在INSERT、UPDATE、DELETE语句执行后开始检查，也可以在事务提交时检查</li></ul></li><li>违约处理<ul><li>数据库管理系统若发现用户的操作违背了完整性约束条件，就采取一定的动作<ul><li>拒绝（NO ACTION）执行该操作</li><li>级连（CASCADE）执行其他操作</li></ul></li></ul></li></ul><h1 id="ch-27-实体完整性">ch 27 实体完整性</h1><h2 id="实体完整性定义">实体完整性定义</h2><h3 id="实体完整性-定义1">实体完整性 定义1</h3><ul><li>关系模型的实体完整性<ul><li>CREATE TABLE中用PRIMARY KEY定义</li></ul></li><li>单属性构成的码有两种说明方法<ul><li>定义为列级约束条件</li><li>定义为表级约束条件</li></ul></li><li>对多个属性构成的码只有一种说明方法<ul><li>定义为表级约束条件</li></ul></li></ul><h3 id="实体完整性定义-2">实体完整性定义 2</h3><ul><li><p>[例5.1] 将Student表中的<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.914ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 1730 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(645,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1245,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g></g></g></svg></mjx-container></span>属性定义为码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Student</span><br><span class="line">(Sno <span class="type">CHAR</span>(<span class="number">9</span>) <span class="keyword">PRIMARY</span></span><br><span class="line">KEY,</span><br><span class="line">Sname <span class="type">CHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span></span><br><span class="line"><span class="keyword">NULL</span>,</span><br><span class="line">Ssex <span class="type">CHAR</span>(<span class="number">2</span>),</span><br><span class="line">Sage <span class="type">SMALLINT</span>,</span><br><span class="line">Sdept <span class="type">CHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Student</span><br><span class="line">(Sno <span class="type">CHAR</span>(<span class="number">9</span>),</span><br><span class="line">      Sname <span class="type">CHAR</span>(<span class="number">20</span>)</span><br><span class="line">      <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">      Ssex <span class="type">CHAR</span>(<span class="number">2</span>).</span><br><span class="line">      Sage <span class="type">SMALLINT</span>,</span><br><span class="line">      Sdept <span class="type">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">      <span class="keyword">PRIMARY</span> KEY (Sno)</span><br><span class="line">    );</span><br></pre></td></tr></table></figure></li></ul><h3 id="实体完整性定义-3">实体完整性定义 3</h3><ul><li><p>[例5.2] 将SC表中的<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.914ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 1730 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(645,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1245,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g></g></g></svg></mjx-container></span>，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="4.174ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 1845 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(760,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1360,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g></g></g></svg></mjx-container></span>属性组定义为码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SC</span><br><span class="line"> (Sno <span class="type">CHAR</span>(<span class="number">9</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  Cno <span class="type">CHAR</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  Grade <span class="type">SMALLINT</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (Sno,Cno)</span><br><span class="line">  );</span><br></pre></td></tr></table></figure></li></ul><h2 id="实体完整性检查和违约处理">实体完整性检查和违约处理</h2><ul><li>插入或对主码列进行更新操作时，关系数据库管理系统按照实体完整性规则自动进行检查。包括：<ul><li>检查主码值是否唯一，如果不唯一则拒绝插入或修改</li><li>检查主码的各个属性是否为空，只要有一个为空就拒绝插入或修改</li></ul></li></ul><h2 id="实体完整性检查">实体完整性检查</h2><h3 id="实体完整性检查-1">实体完整性检查 1</h3><ul><li>检查记录中主码值是否唯一的一种方法是进行全表扫描<ul><li>依次判断表中每一条记录的主码值与将插入记录上的主码值（或者修改的新主码值）是否相同</li><li>十分耗时</li></ul></li></ul><p><img src="https://s2.loli.net/2022/04/14/gTBRXMCfun9Whti.png" alt="image-20220321200358399"></p><h3 id="实体完整性检查-2">实体完整性检查 2</h3><ul><li>为避免对基本表进行全表扫描，RDBMS核心一般都在主码上自动建立一个索引，如B+树索引<ul><li>新插入记录的主码值是25</li><li>通过主码索引，从B+树的根结点开始查找</li><li>读取3个结点：根结点（51）、中间结点（12 30）、叶结点（15 2025）</li><li>该主码值已经存在，不能插入这条记录</li></ul></li></ul><p><img src="https://s2.loli.net/2022/04/14/XCIZWgJbLsAaVrS.png" alt="image-20220321200354694"></p><h1 id="ch-28-参照完整性">ch 28 参照完整性</h1><h2 id="参照完整性定义">参照完整性定义</h2><ul><li><p>关系模型的参照完整性定义</p><ul><li>在CREATE TABLE中用FOREIGN KEY短语定义哪些列为外码</li><li>用REFERENCES短语指明这些外码参照哪些表的主码</li></ul></li><li><p>[例5.3]定义SC中的参照完整性</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SC</span><br><span class="line">(Sno <span class="type">CHAR</span>(<span class="number">9</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> Cno <span class="type">CHAR</span>($) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> Grade <span class="type">SMALLINT</span>,</span><br><span class="line"> <span class="keyword">PRIMARY</span> KEY(Sno,Cno),</span><br><span class="line"> <span class="keyword">FOREIGN</span> KEY(Sno) <span class="keyword">REFERENCES</span> Student(Sno),</span><br><span class="line"> <span class="keyword">FOREIGN</span> KEY(Sno) <span class="keyword">REFERENCES</span> Course(Cno)</span><br><span class="line"> );</span><br></pre></td></tr></table></figure></li></ul><h2 id="参照完整性检查">参照完整性检查</h2><h3 id="参照完整性定义-1">参照完整性定义 1</h3><ul><li>一个参照完整性将两个表中的相应元组联系起来</li><li>对被参照表和参照表进行增删改操作时有可能破坏参照完整性，必须进行检查</li><li>例如，对表SC和Student有四种可能破坏参照完整性的情况 :<ul><li>SC表中增加一个元组，该元组的<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.914ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 1730 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(645,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1245,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g></g></g></svg></mjx-container></span>属性的值在表Student中找不到一个元组，其<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.914ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 1730 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(645,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1245,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g></g></g></svg></mjx-container></span>属性的值与之相等。</li><li>修改SC表中的一个元组，修改后该元组的<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.914ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 1730 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(645,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1245,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g></g></g></svg></mjx-container></span>属性的值在表Student中找不到一个元组，其<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.914ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 1730 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(645,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1245,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g></g></g></svg></mjx-container></span><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="4.525ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 2000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">属</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">性</text></g></g></g></svg></mjx-container></span>的值与之相等。</li><li>从Student表中删除一个元组，造成SC表中某些元组的<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.914ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 1730 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(645,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1245,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g></g></g></svg></mjx-container></span>属性的值在表Student中找不到一个元组，其<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.914ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 1730 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(645,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1245,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g></g></g></svg></mjx-container></span>属性的值与之相等。</li><li>修改Student表中一个元组的<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.914ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 1730 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(645,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1245,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g></g></g></svg></mjx-container></span>属性，造成SC表中某些元组的<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.914ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 1730 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(645,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1245,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g></g></g></svg></mjx-container></span>属性的值在表Student中找不到一个元组，其<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.914ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 1730 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(645,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1245,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g></g></g></svg></mjx-container></span>属性的值与之相等 。</li></ul></li></ul><h3 id="参照完整性定义-2">参照完整性定义 2</h3><table><colgroup><col style="width: 31%"><col style="width: 30%"><col style="width: 38%"></colgroup><thead><tr class="header"><th>被参照表（例如Student）</th><th>参照表（例如<strong>SC）</strong></th><th>违约处理</th></tr></thead><tbody><tr class="odd"><td><strong>可能破坏参照完整性</strong></td><td><strong>插入元组</strong></td><td><strong>拒绝</strong></td></tr><tr class="even"><td><strong>可能破坏参照完整性</strong></td><td><strong>修改外码值</strong></td><td><strong>拒绝</strong></td></tr><tr class="odd"><td><strong>删除元组</strong></td><td><strong>可能破坏参照完整性</strong></td><td><strong>拒绝</strong>/级连删除/设置为空值</td></tr><tr class="even"><td><strong>修改主码值</strong></td><td><strong>可能破坏参照完整性</strong></td><td><strong>拒绝</strong>/级连修改/设置为空值</td></tr></tbody></table><h2 id="参照完整性违约处理">参照完整性违约处理</h2><h3 id="参照完整性违约处理-1">参照完整性违约处理 1</h3><ul><li>参照完整性违约处理<ul><li>拒绝（NO ACTION）执行<ul><li>不允许该操作执行。该策略一般设置为默认策略</li></ul></li><li>级联（CASCADE）操作<ul><li>当删除或修改被参照表（Student）的一个元组造成了与参照表（SC）的不一致，则删除或修改参照表中的所有造成不一致的元组</li></ul></li><li>设置为空值（SET-NULL）<ul><li>当删除或修改被参照表的一个元组时造成了不一致，则将参照表中的所有造成不一致的元组的对应属性设置为空值。</li><li>对于参照完整性，除了应该定义外码，还应定义外码列是否允许空值</li></ul></li></ul></li></ul><h3 id="参照完整性违约处理-2">参照完整性违约处理 2</h3><ul><li><p>例如，有下面2个关系 学生（学号，姓名，性别，专业号，年龄）专业（专业号，专业名）</p><ul><li>假设专业表中某个元组被删除，专业号为12</li><li>按照设置为空值的策略，就要把学生表中专业号=12的所有元组的专业号设置为空值</li><li>对应语义：某个专业删除了，该专业的所有学生专业未定，等待重新分配专业</li></ul></li><li><p>[例5.4] 显式说明参照完整性的违约处理示例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SC</span><br><span class="line">   (  Sno   <span class="type">CHAR</span>(<span class="number">9</span>)  <span class="keyword">NOT</span> <span class="keyword">NULL</span>，</span><br><span class="line">           Cno   <span class="type">CHAR</span>(<span class="number">4</span>)  <span class="keyword">NOT</span> <span class="keyword">NULL</span>，</span><br><span class="line">           Grade  <span class="type">SMALLINT</span>,</span><br><span class="line">           <span class="keyword">PRIMARY</span> KEY(Sno,Cno)， </span><br><span class="line">           <span class="keyword">FOREIGN</span> KEY (Sno) <span class="keyword">REFERENCES</span> Student(Sno) </span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE        <span class="comment">/*级联删除SC表中相应的元组*/</span></span><br><span class="line">             <span class="keyword">ON</span> <span class="keyword">UPDATE</span> CASCADE,      <span class="comment">/*级联更新SC表中相应的元组*/</span></span><br><span class="line">           <span class="keyword">FOREIGN</span> KEY (Cno) <span class="keyword">REFERENCES</span> Course(Cno)                    </span><br><span class="line">             <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">NO</span> ACTION </span><br><span class="line">                 <span class="comment">/*当删除course 表中的元组造成了与SC表不一致时拒绝删除*/</span></span><br><span class="line">             <span class="keyword">ON</span> <span class="keyword">UPDATE</span> CASCADE   </span><br><span class="line">        <span class="comment">/*当更新course表中的cno时，级联更新SC表中相应的元组*/</span></span><br><span class="line">           );</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h1 id="ch-29-用户定义的完整性">ch 29 用户定义的完整性</h1><h2 id="用户定义的完整性">用户定义的完整性</h2><ul><li><p>用户定义的完整性是：针对某一具体应用的数据必须满足的语义要求</p><ul><li>属性上的约束条件</li><li>元组上的约束条件<ul><li>同属性值限制相比，元组级的限制可以设置不同属性之间的取值的相互约束条件</li></ul></li></ul></li><li><p>关系数据库管理系统提供了定义和检验用户定义完整性的机制，不必由应用程序承担</p><ul><li>插入元组或修改属性的值时，关系数据库管理系统检查约束条件是否被满足</li><li>如果不满足则操作被拒绝执行</li></ul></li><li><p>列值非空</p><ul><li><p>[例5.5] 在定义SC表时，说明<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.914ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 1730 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(645,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1245,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g></g></g></svg></mjx-container></span>、<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="4.174ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 1845 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(760,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1360,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g></g></g></svg></mjx-container></span>、<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="6.226ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 2752 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mi" transform="translate(786,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1237,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1766,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(2286,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></svg></mjx-container></span>属性不允许取空值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SC</span><br><span class="line">(Sno <span class="type">CHAR</span>(<span class="number">9</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">Cno <span class="type">CHAR</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">Grade SAMLLINT <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (Sno,Cno),</span><br><span class="line">...</span><br><span class="line"><span class="comment">/* 如果在表级定义实体完整性，隐含了Sno，Cno不允许取空值，则在  </span></span><br><span class="line"><span class="comment">             列级不允许取空值的定义 可以不写 * /</span></span><br><span class="line"><span class="comment">)</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>列值唯一</p></li><li><p>[例5.6]建立部门表DEPT，要求部门名称<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="7.468ex" height="1.57ex" role="img" focusable="false" viewBox="0 -683 3301 694"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mi" transform="translate(828,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1428,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1957,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2835,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></svg></mjx-container></span>列取值唯一，部门编号<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="7.337ex" height="1.984ex" role="img" focusable="false" viewBox="0 -683 3243 877"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mi" transform="translate(828,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1294,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(1797,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(2158,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2758,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g></g></g></svg></mjx-container></span>列为主码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> DEPT</span><br><span class="line">(Deptno <span class="type">NUMERIC</span>(<span class="number">2</span>),</span><br><span class="line">Dname <span class="type">CHAR</span>(<span class="number">9</span>) <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> <span class="comment">/*要求Dname列值唯一, 并且不能取空值*/</span></span><br><span class="line">Location <span class="type">CHAR</span>(<span class="number">10</span>),</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (Deptno)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="列值是否满足条件表达式-1">列值是否满足条件表达式 1</h4><ul><li><p>用CHECK短语指定列值应该满足的条件</p></li><li><p>[例5.7] Student表的<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="4.869ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 2152 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(645,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(1114,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1580,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container></span>只允许取“男”或“女”。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Student</span><br><span class="line">         ( Sno  <span class="type">CHAR</span>(<span class="number">9</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">           Sname <span class="type">CHAR</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,                     </span><br><span class="line">           Ssex  <span class="type">CHAR</span>(<span class="number">2</span>)  <span class="keyword">CHECK</span> （Ssex <span class="keyword">IN</span> （‘男’,’女’）），           </span><br><span class="line">           <span class="comment">/*性别属性Ssex只允许取'男'或'女' */</span></span><br><span class="line">           Sage  <span class="type">SMALLINT</span>,</span><br><span class="line">           Sdept  <span class="type">CHAR</span>(<span class="number">20</span>)</span><br><span class="line">         );</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li></ul><h4 id="列值是否满足条件表达式-2">列值是否满足条件表达式 2</h4></li><li><p>[例5.8] SC表的Grade的值应该在0和100之间</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">CREATE</span> <span class="keyword">TABLE</span>  SC</span><br><span class="line">        (  Sno     <span class="type">CHAR</span>(<span class="number">9</span>) ,</span><br><span class="line">           Cno    <span class="type">CHAR</span>(<span class="number">4</span>),</span><br><span class="line">Grade   <span class="type">SMALLINT</span> <span class="keyword">CHECK</span> (Grade<span class="operator">&gt;=</span><span class="number">0</span> <span class="keyword">AND</span> Grade <span class="operator">&lt;=</span><span class="number">100</span>)，      <span class="comment">/*Grade取值范围是0到100*/</span></span><br><span class="line">           <span class="keyword">PRIMARY</span> KEY (Sno,Cno),</span><br><span class="line">           <span class="keyword">FOREIGN</span> KEY (Sno) <span class="keyword">REFERENCES</span> Student(Sno),</span><br><span class="line">           <span class="keyword">FOREIGN</span> KEY (Cno) <span class="keyword">REFERENCES</span> Course(Cno)</span><br><span class="line">          );</span><br><span class="line">  </span><br></pre></td></tr></table></figure></li></ul><h4 id="元组上约束条件的定义">元组上约束条件的定义</h4><ul><li><p>[例5.9]当学生的性别是男时，其名字不能以Ms.打头</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Student</span><br><span class="line">        (  Sno    <span class="type">CHAR</span>(<span class="number">9</span>), </span><br><span class="line">           Sname  <span class="type">CHAR</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>，</span><br><span class="line">           Ssex    <span class="type">CHAR</span>(<span class="number">2</span>),</span><br><span class="line">           Sage   <span class="type">SMALLINT</span>,</span><br><span class="line">           Sdept  <span class="type">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">           <span class="keyword">PRIMARY</span> KEY (Sno),</span><br><span class="line">           <span class="keyword">CHECK</span> (Ssex<span class="operator">=</span><span class="string">'女'</span> <span class="keyword">OR</span> Sname <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">'Ms.%'</span>)</span><br><span class="line">                  <span class="comment">/*定义了元组中Sname和 Ssex两个属性值之间的约束条件*/</span></span><br><span class="line">         );</span><br><span class="line">  </span><br></pre></td></tr></table></figure></li></ul><h4 id="完整性约束命名子句">完整性约束命名子句</h4><ul><li>创建完整性约束<ul><li>完整性约束命名子句<ul><li>CONSTRAINT &lt;完整性约束条件名&gt;&lt;完整性约束条件&gt;</li><li>&lt;完整性约束条件&gt;包括NOT NULL、UNIQUE、PRIMARY KEY短语、FOREIGNKEY短语、CHECK短语等</li></ul></li></ul></li><li>修改完整性约束<ul><li>使用ALTER TABLE语句修改表中的完整性限制</li></ul></li></ul><h2 id="创建完整性约束">创建完整性约束</h2><h3 id="创建完整性约束-1">创建完整性约束 1</h3><ul><li><p>[例5.10]建立学生登记表Student，要求学号在90000~99999之间，姓名不能取空值，年龄小于30，性别只能是“男”或“女”。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Student</span><br><span class="line">    (   Sno  <span class="type">NUMERIC</span>(<span class="number">6</span>)</span><br><span class="line">        <span class="keyword">CONSTRAINT</span> C1 <span class="keyword">CHECK</span> (Sno <span class="keyword">BETWEEN</span> <span class="number">90000</span> <span class="keyword">AND</span> <span class="number">99999</span>),</span><br><span class="line">        Sname  <span class="type">CHAR</span>(<span class="number">20</span>)  </span><br><span class="line">        <span class="keyword">CONSTRAINT</span> C2 <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">        Sage  <span class="type">NUMERIC</span>(<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">CONSTRAINT</span> C3 <span class="keyword">CHECK</span> (Sage <span class="operator">&lt;</span> <span class="number">30</span>),</span><br><span class="line">        Ssex  <span class="type">CHAR</span>(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">CONSTRAINT</span> C4 <span class="keyword">CHECK</span> (Ssex <span class="keyword">IN</span> ( ‘男’,<span class="string">'女'</span>)),</span><br><span class="line">        <span class="keyword">CONSTRAINT</span> StudentKey <span class="keyword">PRIMARY</span> KEY(Sno)</span><br><span class="line">      );</span><br></pre></td></tr></table></figure></li><li><p>在Student表上建立了5个约束条件，包括主码约束（命名为<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="12.149ex" height="2.059ex" role="img" focusable="false" viewBox="0 -705 5370 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(645,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(1006,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1578,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(2098,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(2564,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3164,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(3525,0)"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="mi" transform="translate(4414,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(4880,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>）以及<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="2.851ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 1260 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mn" transform="translate(760,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></span>、<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="2.851ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 1260 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mn" transform="translate(760,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container></span>、<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="2.851ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 1260 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mn" transform="translate(760,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></svg></mjx-container></span><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="5.113ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 2260 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">、</text></g></g><g data-mml-node="mi" transform="translate(1000,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mn" transform="translate(1760,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></svg></mjx-container></span>四个列级约束。</p></li></ul><h3 id="创建完整性约束-2">创建完整性约束 2</h3><ul><li><p>[例5.11]建立教师表TEACHER，要求每个教师的应发工资不低于3000元。应发工资是工资列Sal与扣除项Deduct之和。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TEACHER</span><br><span class="line">              (   Eno    <span class="type">NUMERIC</span>(<span class="number">4</span>)  <span class="keyword">PRIMARY</span> KEY    <span class="comment">/*在列级定义主码*/</span></span><br><span class="line">                  Ename  <span class="type">CHAR</span>(<span class="number">10</span>),</span><br><span class="line">                  Job     <span class="type">CHAR</span>(<span class="number">8</span>),</span><br><span class="line">       Sal     <span class="type">NUMERIC</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line">       Deduct  <span class="type">NUMERIC</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line">       Deptno  <span class="type">NUMERIC</span>(<span class="number">2</span>),</span><br><span class="line">        <span class="keyword">CONSTRAINT</span> TEACHERFKey <span class="keyword">FOREIGN</span> KEY (Deptno)   <span class="keyword">REFERENCES</span> DEPT(Deptno),</span><br><span class="line">        <span class="keyword">CONSTRAINT</span> C1 <span class="keyword">CHECK</span> (Sal <span class="operator">+</span> Deduct <span class="operator">&gt;=</span> <span class="number">3000</span>) </span><br><span class="line">                );</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="修改完整性约束">修改完整性约束</h2><ul><li><p>[例5.12]去掉例5.10 Student表中对性别的限制。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Student </span><br><span class="line">       <span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> C4;</span><br></pre></td></tr></table></figure></li><li><p>[例5.13]修改表Student中的约束条件，要求学号改为在900000~999999之间，年龄由小于30改为小于40</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Student</span><br><span class="line">        <span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> C1;</span><br><span class="line">        <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Student</span><br><span class="line">        <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> C1 <span class="keyword">CHECK</span> (Sno <span class="keyword">BETWEEN</span> <span class="number">900000</span> <span class="keyword">AND</span> <span class="number">999999</span>),</span><br><span class="line">        <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Student</span><br><span class="line">        <span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> C3;</span><br><span class="line">        <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Student</span><br><span class="line">        <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> C3 <span class="keyword">CHECK</span>(Sage <span class="operator">&lt;</span> <span class="number">40</span>);</span><br></pre></td></tr></table></figure></li></ul><h1 id="ch-30-断言">ch 30 断言</h1><ul><li>SQL中，可以使用 CREATEASSERTION语句，通过声明性断言来指定更具一般性的约束。</li><li>可以定义涉及多个表的或聚集操作的比较复杂的完整性约束。</li><li>断言创建以后，任何对断言中所涉及的关系的操作都会触发关系数据库管理系统对断言的检查，任何使断言不为真值的操作都会被拒绝执行</li><li>如果断言很复杂，则系统在检测和维护断言的开销较高，这是在使用断言时应该注意的</li></ul><h2 id="断言相关语句">断言相关语句</h2><ul><li><p>创建断言的语句格式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> ASSERTION<span class="operator">&lt;</span>断言名<span class="operator">&gt;</span><span class="operator">&lt;</span><span class="keyword">CHECK</span> 子句<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><ul><li>每个断言都被赋予一个名字，&lt;CHECK 子句&gt;中的约束条件与WHERE子句的条件表达式类似。</li></ul></li><li><p>删除断言的语句格式</p><ul><li>```sql DROP ASSERTION &lt;断言名&gt;； <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 创建断言</span><br><span class="line"></span><br><span class="line">### 创建断言 1</span><br><span class="line"></span><br><span class="line">- [例5.18] 限制数据库课程最多60名学生选修</span><br><span class="line"></span><br><span class="line">  ```sql</span><br><span class="line">  CREATE ASSERTION ASSE_SC_DB_NUM</span><br><span class="line">  CHECK (60 &gt;= (select count(*)</span><br><span class="line">    /*此断言的谓词涉及聚集操作count的SQL语句*/</span><br><span class="line">   From Course,SC</span><br><span class="line">      Where SC.Cno=Course.Cno and Course.Cname ='数据库')</span><br><span class="line">     );</span><br><span class="line">  </span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="创建断言-2">创建断言 2</h3><ul><li><p>[例5.19]限制每一门课程最多60名学生选修</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> ASSERTION ASSE_SC_CNUM1</span><br><span class="line"><span class="keyword">CHECK</span>(<span class="number">60</span> <span class="operator">&gt;=</span> <span class="keyword">ALL</span> (<span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>)          </span><br><span class="line">                     <span class="keyword">FROM</span> SC </span><br><span class="line">          <span class="keyword">GROUP</span> <span class="keyword">by</span> cno)</span><br><span class="line">          );</span><br><span class="line">           <span class="comment">/*此断言的谓词，涉及聚集操作count 和分组函数group by的SQL语句*/</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="创建断言-3">创建断言 3</h3><ul><li><p>[例5.20]限制每个学期每一门课程最多60名学生选修。首先需要修改SC表的模式，增加一个“学期（TERM）”属性</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> SC <span class="keyword">ADD</span> TERM <span class="type">DATE</span>;</span><br><span class="line"><span class="keyword">CREATE</span> ASSERTION ASSE_SC_CNUM2</span><br><span class="line"> <span class="keyword">CHECK</span>(<span class="number">60</span> <span class="operator">&gt;=</span> <span class="keyword">ALL</span> (<span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>)                           <span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">by</span> cno,TERM)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><h1 id="ch-31-触发器">ch 31 触发器</h1><h2 id="触发器">触发器</h2><ul><li>触发器（Trigger）是用户定义在关系表上的一类由事件驱动的特殊过程<ul><li>触发器保存在数据库服务器中</li><li>任何用户对表的增、删、改操作均由服务器自动激活相应的触发器</li><li>触发器可以实施更为复杂的检查和操作，具有更精细和更强大的数据控制能力</li></ul></li><li>不同的RDBMS产品触发器语法各不相同</li></ul><h2 id="定义触发器">定义触发器</h2><h3 id="定义触发器-1">定义触发器 1</h3><ul><li><p>CREATE TRIGGER语法格式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> <span class="operator">&lt;</span>触发器名<span class="operator">&gt;</span></span><br><span class="line"> {BEFORE <span class="operator">|</span> AFTER} <span class="operator">&lt;</span>触发事件<span class="operator">&gt;</span> <span class="keyword">ON</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line">  <span class="keyword">REFERENCING</span> <span class="keyword">NEW</span><span class="operator">|</span><span class="keyword">OLD</span> <span class="type">ROW</span> <span class="keyword">AS</span><span class="operator">&lt;</span>变量<span class="operator">&gt;</span></span><br><span class="line">  <span class="keyword">FOR</span> <span class="keyword">EACH</span>  {<span class="type">ROW</span> <span class="operator">|</span> STATEMENT}</span><br><span class="line"> [<span class="keyword">WHEN</span> <span class="operator">&lt;</span>触发条件<span class="operator">&gt;</span>]<span class="operator">&lt;</span>触发动作体<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>触发器又叫做事件-条件-动作 （event-condition-action）规则。</p><ul><li>当特定的系统事件发生时，对规则的条件进行检查，如果条件成立则执行规则中的动作，否则不执行该动作。规则中的动作体可以很复杂，通常是一段SQL存储过程。</li></ul></li></ul><h3 id="定义触发器-2">定义触发器 2</h3><ul><li>表的拥有者才可以在表上创建触发器</li><li>触发器名<ul><li>触发器名可以包含模式名，也可以不包含模式名</li><li>同一模式下，触发器名必须是唯一的</li><li>触发器名和表名必须在同一模式下</li></ul></li><li>表名<ul><li>触发器只能定义在基本表上，不能定义在视图上</li><li>当基本表的数据发生变化时，将激活定义在该表上相应触发事件的触发器</li></ul></li><li>触发事件<ul><li>触发事件可以是INSERT、DELETE或UPDATE，也可以是这几个事件的组合</li><li>还可以UPDATEOF&lt;触发列，...&gt;，即进一步指明修改哪些列时激活触发器</li><li>AFTER/BEFORE是触发的时机<ul><li>AFTER表示在触发事件的操作执行之后激活触发器</li><li>BEFORE表示在触发事件的操作执行之前激活触发器</li></ul></li></ul></li><li>触发器类型<ul><li>行级触发器（FOR EACH ROW）</li><li>语句级触发器（FOR EACH STATEMENT）</li></ul></li><li>触发条件<ul><li>触发器被激活时，只有当触发条件为真时触发动作体才执行;否则触发动作体不执行。</li><li>如果省略WHEN触发条件，则触发动作体在触发器激活后立即执行</li></ul></li><li>触发动作体<ul><li>触发动作体可以是一个匿名PL/SQL过程块，也可以是对已创建存储过程的调用</li><li>如果是行级触发器，用户可以在过程体中使用NEW和OLD引用事件之后的新值和事件之前的旧值</li><li>如果是语句级触发器，则不能在触发动作体中使用NEW或OLD进行引用</li><li>如果触发动作体执行失败，激活触发器的事件就会终止执行，触发器的目标表或触发器可能影响的其他对象不发生任何变化</li></ul></li></ul><h2 id="触发器实例">触发器实例</h2><h3 id="触发器类型">触发器类型</h3><ul><li><p>例如,在例5.11的TEACHER表上创建一个AFTERUPDATE触发器，触发事件是UPDATE语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> TEACHER <span class="keyword">SET</span> Deptno <span class="operator">=</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure></li><li><p>假设表TEACHER有1000行</p><ul><li>如果是语句级触发器，那么执行完该语句后，出发的动作只发生一次</li><li>如果是行级触发器，触发动作将执行1000次</li></ul></li></ul><h3 id="触发器实例-1">触发器实例 1</h3><ul><li><p>[例5.21]当对表SC的Grade属性进行修改时，若分数增加了10%则将此次操作记录到下面表中：SC_U（<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.914ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 1730 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(645,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1245,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g></g></g></svg></mjx-container></span>,<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="4.174ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 1845 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(760,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1360,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g></g></g></svg></mjx-container></span>,<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="9.104ex" height="2.057ex" role="img" focusable="false" viewBox="0 -704 4024 909"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mi" transform="translate(763,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(1061,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(1581,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(2058,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2509,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(3038,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(3558,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></svg></mjx-container></span>,<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="10.21ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 4513 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mi" transform="translate(888,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1354,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mi" transform="translate(2070,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(2547,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2998,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(3527,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(4047,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></svg></mjx-container></span>）其中<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="9.104ex" height="2.057ex" role="img" focusable="false" viewBox="0 -704 4024 909"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mi" transform="translate(763,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(1061,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(1581,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(2058,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2509,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(3038,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(3558,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></svg></mjx-container></span>是修改前的分数，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="10.21ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 4513 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mi" transform="translate(888,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1354,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mi" transform="translate(2070,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(2547,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2998,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(3527,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(4047,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></svg></mjx-container></span>是修改后的分数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span>  SC_T</span><br><span class="line">AFTER <span class="keyword">UPDATE</span> <span class="keyword">OF</span> Grade <span class="keyword">ON</span> SC</span><br><span class="line">     <span class="keyword">REFERENCING</span></span><br><span class="line">      <span class="keyword">OLD</span> <span class="type">row</span>  <span class="keyword">AS</span>  OldTuple,</span><br><span class="line">      <span class="keyword">NEW</span> <span class="type">row</span> <span class="keyword">AS</span>  NewTuple</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> </span><br><span class="line"><span class="keyword">WHEN</span> (NewTuple.Grade <span class="operator">&gt;=</span> <span class="number">1.1</span><span class="operator">*</span>OldTuple.Grade)</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC_U(Sno,Cno,OldGrade,NewGrade)  </span><br><span class="line"><span class="keyword">VALUES</span>(OldTuple.Sno,OldTuple.Cno,OldTuple.Grade,NewTuple.Grade)</span><br></pre></td></tr></table></figure></li><li><p>[例5.22]将每次对表Student的插入操作所增加的学生个数记录到表StudentInsertLog中。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> Student_Count</span><br><span class="line">AFTER <span class="keyword">INSERT</span> <span class="keyword">ON</span> Student  </span><br><span class="line">        <span class="comment">/*指明触发器激活的时间是在执行INSERT后*/</span>     </span><br><span class="line"><span class="keyword">REFERENCING</span></span><br><span class="line">     <span class="keyword">NEW</span> <span class="keyword">TABLE</span> <span class="keyword">AS</span> DELTA</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> STATEMENT  </span><br><span class="line"><span class="comment">/*语句级触发器, 即执行完INSERT语句后下面的触发动作体才执行一次*/</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> StudentInsertLog (Numbers)</span><br><span class="line">   <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> DELTA</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>[例5.23]定义一个BEFORE行级触发器，为教师表Teacher定义完整性规则“教授的工资不得低于4000元，如果低于4000元，自动改为4000元”。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> Insert_Or_Update_Sal </span><br><span class="line">         BEFORE <span class="keyword">INSERT</span> <span class="keyword">OR</span> <span class="keyword">UPDATE</span> <span class="keyword">ON</span> Teacher  </span><br><span class="line">                      <span class="comment">/*触发事件是插入或更新操作*/</span></span><br><span class="line">          <span class="keyword">REFERENCING</span> <span class="keyword">NEW</span> <span class="type">row</span> <span class="keyword">AS</span> newTuple</span><br><span class="line">          <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span>        <span class="comment">/*行级触发器*/</span></span><br><span class="line">          <span class="keyword">BEGIN</span>                             <span class="comment">/*定义触发动作体，是PL/SQL过程块*/</span></span><br><span class="line">              IF (newTuple.Job<span class="operator">=</span><span class="string">'教授'</span>) <span class="keyword">AND</span> (newTuple.Sal <span class="operator">&lt;</span> <span class="number">4000</span>) </span><br><span class="line">              <span class="keyword">THEN</span> newTuple.Sal :<span class="operator">=</span><span class="number">4000</span>;                </span><br><span class="line">            <span class="keyword">END</span> IF;</span><br><span class="line">        <span class="keyword">END</span>;            </span><br></pre></td></tr></table></figure></li></ul><h4 id="激活触发器">激活触发器</h4><ul><li>触发器的执行，是由触发事件激活的，并由数据库服务器自动执行</li><li>一个数据表上可能定义了多个触发器，遵循如下的执行顺序:<ul><li>执行该表上的BEFORE触发器;</li><li>激活触发器的SQL语句;</li><li>执行该表上的AFTER触发器。</li></ul></li></ul><h4 id="删除触发器">删除触发器</h4><ul><li>删除触发器的SQL语法：<ul><li>DROP TRIGGER &lt;触发器名&gt; ON &lt;表名&gt;;</li></ul></li><li>触发器必须是一个已经创建的触发器，并且只能由具有相应权限的用户删除</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> 数据管理基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据管理基础 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据管理基础 ch23-25</title>
      <link href="/2022/04/14/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80-ch23-25/"/>
      <url>/2022/04/14/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80-ch23-25/</url>
      
        <content type="html"><![CDATA[<h1 id="ch23-数据库安全性">ch23 数据库安全性</h1><h2 id="数据库安全性">数据库安全性</h2><ul><li>问题的提出<ul><li>数据库的一大特点是数据可以共享</li><li>数据库的一大特点是数据可以共享</li><li>数据共享必然带来数据库的安全性问题</li><li>数据库系统中的数据共享不能是无条件的共享<ul><li>军事秘密、国家机密、新产品实验数据、市场需求分析、市场营销策略、销售计划、客户档案、医疗档案、银行储蓄数据</li></ul></li></ul></li><li>数据库的安全性是指保护数据库以防止不合法使用所造成的数据泄露、更改或破坏</li><li>系统安全保护措施是否有效是数据库系统主要的性能指标之一</li></ul><h2 id="数据库的不安全因素">数据库的不安全因素</h2><ul><li>非授权用户对数据库的恶意存取和破坏<ul><li>一些黑客（Hacker）和犯罪分子在用户存取数据库时猎取用户名和用户口令，然后假冒合法用户偷取、修改甚至破坏用户数据</li><li>数据库管理系统提供的安全措施主要包括用户身份鉴别、存取控制和视图等技术。</li></ul></li><li>数据库中重要或敏感的数据被泄露<ul><li>黑客和敌对分子千方百计盗窃数据库中的重要数据，一些机密信息被暴露。</li><li>数据库管理系统提供的主要技术有强制存取控制、数据加密存储和加密传输等。</li><li>审计日志分析</li></ul></li><li>安全环境的脆弱性<ul><li>数据库的安全性与计算机系统的安全性紧密联系<ul><li>计算机硬件、操作系统、网络系统等的安全性</li></ul></li><li>建立一套可信（Trusted）计算机系统的概念和标准</li></ul></li></ul><h2 id="tccsectdi安全级别划分">TCCSEC/TDI安全级别划分</h2><h3 id="tcsectdi安全级别划分-1">TCSEC/TDI安全级别划分 1</h3><ul><li>TCSEC/TDI安全级别划分<ul><li>按系统可靠或可信程度逐渐增高</li><li>各安全级别之间具有一种偏序向下兼容的关系</li></ul></li></ul><p><img src="https://s2.loli.net/2022/04/14/GORi1gEuy6374zr.png" alt="image-20220321192456022"></p><h3 id="tcsectdi安全级别划分-2">TCSEC/TDI安全级别划分 2</h3><ul><li>D级<ul><li>将一切不符合更高标准的系统均归于D组</li></ul></li><li>C1级<ul><li>非常初级的自主安全保护</li><li>能够实现对用户和数据的分离，进行自主存取控制（DAC），保护或限制用户权限的传播。</li><li>现有的商业系统稍作改进即可满足</li></ul></li><li>C2级<ul><li>安全产品的最低档次</li><li>提供受控的存取保护，将C1级的DAC进一步细化，以个人身份注册负责，并实施审计和资源隔离</li><li>达到C2级的产品在其名称中往往不突出“安全”（Security）这一特色</li></ul></li><li>B1级<ul><li>标记安全保护。“安全”（Security）或“可信的” （Trusted）产品。</li><li>对系统的数据加以标记，对标记的主体和客体实施强制存取控制（MAC）、审计等安全机制</li></ul></li><li>B2级<ul><li>结构化保护</li><li>建立形式化的安全策略模型并对系统内的所有主体和客体实施DAC和MAC</li></ul></li><li>B3级<ul><li>安全域</li><li>该级的TCB必须满足访问监控器的要求，审计跟踪能力更强，并提供系统恢复过程</li></ul></li><li>A1级</li><li>验证设计，即提供B3级保护的同时给出系统的形式化设计说明和验证以确信各安全保护真正实现。</li></ul><h3 id="tcsectdi安全级别划分-3">TCSEC/TDI安全级别划分 3</h3><ul><li>CC<ul><li>提出国际公认的表述信息技术安全性的结构</li><li>把信息产品的安全要求分为<ul><li>安全功能要求</li><li>安全保证要求</li></ul></li></ul></li><li>C文本组成<ul><li>简介和一般模型<ul><li>有关术语、基本概念和一般模型以及与评估有关的一些框架</li></ul></li><li>安全功能要求<ul><li>列出了一系列类、子类和组件</li></ul></li><li>安全保证要求<ul><li>列出了一系列保证类、子类和组件</li><li>提出了评估保证级（Evaluation AssuranceLevel，EAL），从EAL1至EAL7共分为七级</li></ul></li></ul></li></ul><table style="width:100%;"><colgroup><col style="width: 13%"><col style="width: 58%"><col style="width: 28%"></colgroup><thead><tr class="header"><th><strong>评估保证级</strong></th><th><strong>定　　义</strong></th><th><strong>TCSEC</strong>安全级别（近似相当）</th></tr></thead><tbody><tr class="odd"><td>EAL1</td><td>功能测试（functionally tested）</td><td></td></tr><tr class="even"><td><strong>EAL2</strong></td><td>结构测试（structurally tested）</td><td><strong>C1</strong></td></tr><tr class="odd"><td><strong>EAL3</strong></td><td>系统地测试和检查（methodically tested and checked）</td><td><strong>C2</strong></td></tr><tr class="even"><td><strong>EAL4</strong></td><td>系统地设计、测试和复查（methodically designed tested， andreviewed）</td><td><strong>B1</strong></td></tr><tr class="odd"><td><strong>EAL5</strong></td><td>半形式化设计和测试（semiformally designed and tested）</td><td><strong>B2</strong></td></tr><tr class="even"><td>EAL6</td><td>半形式化验证的设计和测试（semiformally verified design andtested）</td><td><strong>B3</strong></td></tr><tr class="odd"><td><strong>EAL7</strong></td><td>形式化验证的设计和测试（formally verified design and tested）</td><td><strong>A1</strong></td></tr></tbody></table><h2 id="计算机系统的安全模型">计算机系统的安全模型</h2><ul><li>计算机系统中，安全措施是一级一级层层设置</li><li>系统根据用户标识鉴定用户身份，合法用户才准许进入计算机系统</li><li>数据库管理系统还要进行存取控制，只允许用户执行合法操作</li><li>操作系统有自己的保护措施</li><li>数据以密码形式存储到数据库中</li></ul><p><img src="https://s2.loli.net/2022/04/14/7NBIF2oVhlMRe8H.png" alt="image-20220321193110060"></p><h2 id="数据库管理系统安全性控制模型">数据库管理系统安全性控制模型</h2><p><img src="https://s2.loli.net/2022/04/14/e8Pkl7VmSB1HpYJ.png" alt="image-20220321193135349"></p><h1 id="ch24-存取控制">ch24 存取控制</h1><h2 id="存取控制的组成">存取控制的组成</h2><ul><li>定义用户权限，并将用户权限登记到数据字典中<ul><li>用户对某一数据对象的操作权力称为权限</li><li>DBMS提供适当的语言来定义用户权限，存放在数据字典中，称为安全规则或授权规则</li></ul></li><li>合法权限检查<ul><li>用户发出存取数据库操作请求</li><li>DBMS查找数据字典，进行合法权限检查</li></ul></li></ul><p><strong>用户权限定义和合法权检查机制一起组成了数据库管理系统的存取控制子系统</strong></p><h2 id="自主存取控制-discretionary-access-control">自主存取控制（Discretionary Access Control)</h2><ul><li>C2级</li><li>用户对不同的数据对象有不同的存取权限</li><li>不同的用户对同一对象也有不同的权限</li><li>用户可将其拥有的存取权限转授给其他用户</li></ul><h3 id="自主存取控制方法1">自主存取控制方法1</h3><ul><li>SQL 的 GRANT语句和REVOKE语句实现</li><li>用户权限组成<ul><li>数据库对象</li><li>操作类型</li></ul></li><li>定义存取权限称为授权<ul><li>定义用户存取权限：定义用户可以在那些数据库对象上进行哪些操作</li></ul></li></ul><h3 id="自主存取控制方法2">自主存取控制方法2</h3><ul><li>关系数据库系统中存取控制对象</li></ul><p><img src="https://s2.loli.net/2022/04/18/oAgtzvGKPUEHrIa.png" alt="ch23"></p><h2 id="sql中的授权机制">SQL中的授权机制</h2><ul><li>数据库管理员<ul><li>拥有所有对象的所有权限</li><li>根据实际情况不同的权限授予不同的用户</li></ul></li><li>用户：<ul><li>拥有自己建立的对象的全部操作权限</li><li>可以使用GRANT，把权限授予其他用户</li></ul></li><li>被授予的用户<ul><li>如果具有"继续授权"的许可，可以把获得的权限再授予其他用户</li></ul></li><li>所有授予出去的权力在必要时可以用REVODE语句收回</li></ul><h2 id="grant-1">GRANT 1</h2><ul><li><p>GRANT语句的一般格式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="operator">&lt;</span>权限<span class="operator">&gt;</span>[,<span class="operator">&lt;</span>权限<span class="operator">&gt;</span>]...</span><br><span class="line"><span class="keyword">ON</span> <span class="operator">&lt;</span>权限类型<span class="operator">&gt;</span><span class="operator">&lt;</span>对象名<span class="operator">&gt;</span>[,<span class="operator">&lt;</span>权限类型<span class="operator">&gt;</span><span class="operator">&lt;</span>对象名<span class="operator">&gt;</span>]...</span><br><span class="line"><span class="keyword">TO</span> <span class="operator">&lt;</span>用户<span class="operator">&gt;</span>[,<span class="operator">&lt;</span>用户<span class="operator">&gt;</span>]...</span><br><span class="line">[<span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION]</span><br></pre></td></tr></table></figure></li><li><p>语义：将对指定操作对象的指定操作权限授予指定的用户</p></li><li><p>发出GRANT：</p><ul><li>数据库管理员</li><li>数据库对象创建者（属主Owner）</li><li>拥有该权限的用户</li></ul></li><li><p>按授权限的用户</p><ul><li>一个或多个具体用户</li><li>PUBLIC（全体用户）</li></ul></li></ul><h2 id="grant-2">GRANT 2</h2><ul><li><p>WITH GRANT OPTION子句：</p><ul><li>指定：可以再授予</li><li>没有指定：不能传播</li></ul></li><li><p>不允许循环授权</p></li><li><p>[例4.1] 把查询Student表权限授予用户U1</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> Student</span><br><span class="line"><span class="keyword">TO</span> U1;</span><br></pre></td></tr></table></figure></li><li><p>[例4.2] 把对Student表和Course表的全部权限授予用户U2和U3</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILIGES</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> Student，Course</span><br><span class="line"><span class="keyword">TO</span> U2,U3</span><br></pre></td></tr></table></figure></li><li><p>[例4.3]把对表SC的查询权限授予所有用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> SC</span><br><span class="line"><span class="keyword">TO</span> PUBLIC;</span><br></pre></td></tr></table></figure></li><li><p>[例4.4]把查询Student表的和修改学生学号的权限授予用户U4</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">UPDATE</span>(Sno),<span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ON</span> TBALE Student</span><br><span class="line"><span class="keyword">TO</span> U4;</span><br></pre></td></tr></table></figure></li><li><p>[例4.5]把对表SC的INSERT权限授予U5用户，并允许他再将次权限授予其他用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> SC</span><br><span class="line"><span class="keyword">TO</span> U5</span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br></pre></td></tr></table></figure></li><li><p>执行例4.5后，U5不仅拥有了对表SC的INSERT权限，还可以传播此权限；</p></li><li><p>[例4.6]</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> SC</span><br><span class="line"><span class="keyword">TO</span> U6</span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br></pre></td></tr></table></figure></li><li><p>[例4.7]同样，U6还可以将此权限授予U7，但U7不能再传播此权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> SC</span><br><span class="line"><span class="keyword">TO</span> U7;</span><br></pre></td></tr></table></figure></li></ul><h2 id="revoke-1">REVOKE 1</h2><p><strong>授予的权限可以由数据库管理员或者其他授权这用REVOKE语句收回</strong></p><ul><li><p>REVOKE语句的一般格式为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> <span class="operator">&lt;</span>权限<span class="operator">&gt;</span>[,<span class="operator">&lt;</span>权限<span class="operator">&gt;</span>]...</span><br><span class="line"><span class="keyword">ON</span> <span class="operator">&lt;</span>对象类型<span class="operator">&gt;</span><span class="operator">&lt;</span>对象名<span class="operator">&gt;</span>[,<span class="operator">&lt;</span>对象类型<span class="operator">&gt;</span><span class="operator">&lt;</span>对象名<span class="operator">&gt;</span>]...</span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>用户<span class="operator">&gt;</span>[,<span class="operator">&lt;</span>用户<span class="operator">&gt;</span>]..[CASCADE<span class="operator">|</span>RESTRICT];</span><br></pre></td></tr></table></figure></li></ul><h2 id="revoke-2">REVOKE 2</h2><ul><li><p>[例4.8]把用户U4修改学生学号的权限收回</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">UPDATE</span>(Sno)</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> Student</span><br><span class="line"><span class="keyword">FROM</span> U4;</span><br></pre></td></tr></table></figure></li><li><p>[例4.9]收回所有用户对表SC的查询权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> SC</span><br><span class="line"><span class="keyword">FROM</span> PUBLIC;</span><br></pre></td></tr></table></figure></li><li><p>[例4.10]把用户U5对SC表的INSERT权限收回</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> SC</span><br><span class="line"><span class="keyword">FROM</span> U5 CASCADE;</span><br></pre></td></tr></table></figure><ul><li>将用户U5的INSERT权限收回的时候使用CASCADE,则同时收回U6或U7的INSERT权限，否则拒绝执行该语句</li><li>如果U6或U7还从其他用户处获得对SC表的INSERT权限，则他们仍具有此权限，系统只收回直接或间接从U5处获得的权限</li></ul></li></ul><h2 id="创建数据库模式的权限-1">创建数据库模式的权限 1</h2><ul><li><p>数据库管理员在创建用户时实现</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span>语句格式</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span>  <span class="operator">&lt;</span>username<span class="operator">&gt;</span></span><br><span class="line">[<span class="keyword">WITH</span>][DBA<span class="operator">|</span>RESOURCE<span class="operator">|</span><span class="keyword">CONNECT</span>];</span><br></pre></td></tr></table></figure></li><li><p>注：CREATE USER不是SQL标准，各个系统的实现相差甚远</p></li><li><p>只有系统的超级用户才有权创建一个新的数据库用户</p></li><li><p>新创建的数据库用户有三种权限：</p><p>CONNECT、RESOURCE和DBA</p><ul><li>如没有指定创建的新用户的权限，默认该用户拥有CONNECT权限。拥有CONNECT权限的用户不能创建新用户，不能创建模式，也不能创建基本表，只能登录数据库</li><li>拥有RESOURCE权限的用户能创建基本表和视图，成为所创建对象的属主。但不能创建模式，不能创建新的用户</li><li>拥有DBA权限的用户是系统中的超级用户，可以创建新的用户、创建模式、创建基本表和视图等；DBA拥有对所有数据库对象的存取权限，还可以把这些权限授予一般用户</li></ul></li></ul><h2 id="数据库角色-1">数据库角色 1</h2><ul><li><p>数据库角色：</p><p>被命名的一组与数据库操作相关的权限</p><ul><li>角色是权限的集合</li><li>可以为一组具有相同权限的用户创建一个角色</li><li>简化授权的过程</li></ul></li><li><p>角色的创建</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> ROLE <span class="operator">&lt;</span>角色名<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>给角色授权</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="operator">&lt;&gt;</span>[,<span class="operator">&lt;&gt;</span>]...</span><br><span class="line"><span class="keyword">ON</span> <span class="operator">&lt;&gt;</span></span><br><span class="line"><span class="keyword">TO</span> <span class="operator">&lt;&gt;</span>[,<span class="operator">&lt;&gt;</span>]...</span><br></pre></td></tr></table></figure></li></ul><h2 id="数据库角色-2">数据库角色 2</h2><ul><li><p>将一个角色授予其他的角色或用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="operator">&lt;&gt;</span>[,<span class="operator">&lt;&gt;</span>]..</span><br><span class="line"><span class="keyword">TO</span> <span class="operator">&lt;&gt;</span>[,<span class="operator">&lt;&gt;</span>]...</span><br><span class="line">[<span class="keyword">WITH</span> ADMIN OPTION]</span><br></pre></td></tr></table></figure><ul><li>该语句把角色授予某用户，或授予另一个角色</li><li>授予者是角色的创建者或拥有在这个角色上的ADMIN OPTION</li><li>指定了WITH ADMINOPTION则获得某种权限的角色或用户还可以把这种权限授予其他角色</li></ul></li><li><p>一个角色的权限：直接授予这个角色的全部权限加上其他角色授予这个角色的全部权限</p></li><li><p>角色权限的收回</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> <span class="operator">&lt;&gt;</span>[,<span class="operator">&lt;&gt;</span>]..</span><br><span class="line"><span class="keyword">ON</span> <span class="operator">&lt;&gt;</span>[,<span class="operator">&lt;&gt;</span>]</span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;&gt;</span>[,<span class="operator">&lt;&gt;</span>]...</span><br></pre></td></tr></table></figure></li><li><p>用户可以回收角色的权限从而修改角色拥有的权限</p></li><li><p>REVOKE执行者时</p><ul><li>角色的创建者</li><li>拥有在这个角色上的ADMIN OPTION</li></ul></li></ul><h2 id="数据库角色-3">数据库角色 3</h2><ul><li><p>[例4.11]通过角色来实现将一组权限授予一个用户</p><ul><li><p>创建角色R1</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> ROLE R1;</span><br></pre></td></tr></table></figure></li><li><p>使用GRANT语句，使角色R1拥有Student表的SELCT、UPDATE、INSERT权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GRANT SELECT.UPDATE,INSERT</span><br><span class="line">ON TABLE Student</span><br><span class="line">TO R1；</span><br></pre></td></tr></table></figure></li><li><p>将这个角色授予王平，张明，赵玲。使他们具有角色R1所包含的全部权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> R1</span><br><span class="line"><span class="keyword">TO</span> 王平，张明，赵玲；</span><br></pre></td></tr></table></figure></li><li><p>可以一次性通过R1来回收王平的这3个权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> R1</span><br><span class="line"><span class="keyword">FROM</span> 王平</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="数据库角色-4">数据库角色 4</h2><ul><li><p>[例4.12]角色权限修改</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> Student</span><br><span class="line"><span class="keyword">TO</span> R1；</span><br></pre></td></tr></table></figure><ul><li>使角色R1增加了DELETE权限</li></ul></li><li><p>[例4.13]使R1减少了SELECT权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> Student</span><br><span class="line"><span class="keyword">FROM</span> R1；</span><br></pre></td></tr></table></figure></li></ul><h2 id="自主存取控制缺点">自主存取控制缺点</h2><ul><li>可能存在数据的“无意泄露”<ul><li>原因：这种机制仅仅通过对数据的存取权限来进行安全控制，而数据本身并无安全性标记</li><li>解决：对系统控制下的所有主客体实施强制存取控制策略</li></ul></li></ul><h2 id="强制存取控制">强制存取控制</h2><ul><li><p>强制存取控制（Mandatory Access Control，简称 MAC）</p><ul><li>B1级别，保证更高程度的安全性</li><li>每一个数据对象被标以一定的密级</li><li>每一个用户也被授予某一个级别的许可证</li><li>对于任意一个对象，只有具有合法许可证的用户才可以存取</li><li>用户不能直接感知或进行控制</li><li>适用于对数据有严格而固定密级分类的部门<ul><li>军事部门</li><li>政府部门</li></ul></li></ul></li><li><p>实体</p><p>在强制存取控制中，数据库管理系统所管理的全部实体被分为主体和客体两大类</p><ul><li>主体是系统中的活动实体<ul><li>数据库管理系统所管理的实际用户</li><li>代表用户的各进程</li></ul></li><li>客体是系统中的被动实体，受主体操纵<ul><li>文件、基本表、索引、视图</li></ul></li></ul></li><li><p>敏感度标记</p><ul><li>对于主体和客体，DBMS为它们每个实例（值）指派一个敏感度标记（Label）</li><li>敏感度标记分成若干级别<ul><li>绝密（Top Secret，TS）</li><li>机密（Secret，S）</li><li>可信（Confidential，C）</li><li>公开（Public，P）</li><li>TS&gt;=S&gt;=C&gt;=P</li></ul></li><li>主体的敏感度标记称为许可证级别（Clearance Level）</li><li>客体的敏感度标记称为密级（Classification Level）</li></ul></li><li><p>强制存取控制规则</p><ul><li>仅当主体的许可证级别大于或等于客体的密级时，该主体才能读取相应的客体</li><li>仅当主体的许可证级别小于或等于客体的密级时，该主体才能写相应的客体</li><li>强制存取控制（MAC）是对数据本身进行密级标记，无论数据如何复制，标记与数据是一个不可分的整体，只有符合密级标记要求的用户才可以操纵数据。</li></ul><h3 id="dac-mac">DAC + MAC</h3><ul><li>实现强制存取控制时要首先实现自主存取控制<ul><li>原因：较高安全性级别提供的安全保护要包含较低级别的所有保护</li></ul></li><li>自主存取控制与强制存取控制共同构成数据库管理系统的安全机制，先进行自主存取控制检查，通过自主存取控制检查的数据对象再由系统进行强制存取控制检查，只有通过强制存取控制检查的数据对象方可存取。</li></ul><p><img src="https://s2.loli.net/2022/04/18/OyYbZodlQszTph2.png" alt="ch23-2">ch25 视图机制、审计、数据加密及其他</p></li></ul><h2 id="视图机制">视图机制</h2><h3 id="视图机制-1">视图机制 1</h3><ul><li>把要保密的数据对无权存取这些数据的用户隐藏起来，对数据提供一定程度的安全保护</li><li>间接地实现支持存取谓词的用户权限定义</li></ul><h3 id="视图机制-2">视图机制 2</h3><ul><li><p>[例4.14]建立计算机系学生的视图，把对该视图的SELECT权限授于王平，把该视图上的所有操作权限授于张明</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CS_Student</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> CS_Student</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept <span class="operator">=</span> <span class="string">'CS'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ON</span> CS_Student</span><br><span class="line"><span class="keyword">TO</span> 王平；</span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILIGES</span><br><span class="line"><span class="keyword">ON</span> CS_Student</span><br><span class="line"><span class="keyword">TO</span> 张明；</span><br></pre></td></tr></table></figure></li></ul><h2 id="审计">审计</h2><ul><li><p>审计</p><ul><li>启用一个专用的审计日志（AuditLog）将用户对数据库的所有操作记录在上面</li><li>审计员利用审计日志监控数据库中的各种行为，找出非法存取数据的人、时间和内容</li><li>C2以上安全级别的DBMS必须具有审计功能</li></ul></li><li><p>审计功能的可选性</p><ul><li>审计很费时间和空间</li><li>DBA可以根据应用对安全性的要求，灵活地打开或关闭审计功能</li><li>审计功能主要用于安全性要求较高的部门</li></ul></li><li><p>服务器事件</p><p>审计数据库服务器发生的事件</p><ul><li>系统权限<ul><li>对系统拥有的结构或模式对象进行操作的审计</li><li>要求该操作的权限是通过系统权限获得的</li></ul></li><li>语句事件<ul><li>对SQL语句，如DDL,DML,DQL及DCL语句的审计</li></ul></li><li>模式对象事件<ul><li>对特定模式对象上进行的SELECT或DML操作的审计</li></ul></li></ul></li><li><p>审计功能</p><ul><li>基本功能</li><li>c多套审计规则：一般在初始化设定</li><li>提供审计分析和报表功能</li><li>审计日志管理功能<ul><li>防止审计员误删审计记录，审计日志必须先转储后删除</li><li>对转储的审计记录文件提供完整性和保密性保护</li><li>只允许审计员查阅和转储审计记录，不允许任何用户新增和修改审计记录等</li></ul></li><li>提供查询审计设置及审计记录信息的专门视图</li></ul></li><li><p>审计级别</p><ul><li>用户级审计<ul><li>任何用户可设置的审计</li><li>主要是用户针对自己创建的数据库表和视图进行审计</li></ul></li><li>系统级审计<ul><li>只能由数据库管理员设置</li><li>监测成功或失败的登录要求、监测授权和收回操作以及其他数据库级权限下的操作</li></ul></li></ul></li></ul><h4 id="审计语句">审计语句</h4><ul><li><p>AUDIT语句和NOAUDIT语句</p><ul><li>AUDIT语句：设置审计功能</li><li>NOAUDIT语句：取消审计功能</li></ul></li><li><p>[例4.15] 对修改SC表结构或修改SC表数据的操作进行审计</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AUDIIT <span class="keyword">ALTER</span>,<span class="keyword">UPDATE</span></span><br><span class="line"><span class="keyword">ON</span> SC;</span><br></pre></td></tr></table></figure></li><li><p>[例4.16] 取消对SC表的一切审计</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NOAUDIT <span class="keyword">ALTER</span>,<span class="keyword">UPDATE</span></span><br><span class="line"><span class="keyword">ON</span> SC;</span><br></pre></td></tr></table></figure></li></ul><h2 id="数据加密">数据加密</h2><p>防止数据库中数据在存储和传输中失密的有效手段</p><ul><li>加密的基本思想<ul><li>根据一定的算法将原始数据—明文（Plaintext）变换为不可直接识别的格式­—密文（Cipher text）</li></ul></li><li>加密方法<ul><li>存储加密</li><li>传输加密</li></ul></li><li>存储加密<ul><li>透明存储加密<ul><li>内核级加密保护方式，对用户完全透明</li><li>将数据在写到磁盘时对数据进行加密，授权用户读取数据时再对其进行解密</li><li>数据库的应用程序不需要做任何修改，只需在创建表语句中说明需加密的字段即可</li><li>内核级加密方法: 性能较好，安全完备性较高</li></ul></li><li>非透明存储加密<ul><li>通过多个加密函数实现</li></ul></li></ul></li><li>传输加密<ul><li>链路加密<ul><li>在链路层进行加密</li><li>传输信息由报头和报文两部分组成</li><li>报文和报头均加密</li></ul></li><li>端到端加密<ul><li>在发送端加密，接收端解密</li><li>只加密报文不加密报头</li><li>所需密码设备数量相对较少，容易被非法监听者发现并从中获取敏感信息</li></ul></li></ul></li></ul><h2 id="其他安全性保护">其他安全性保护</h2><ul><li>推理控制<ul><li>避免用户利用能够访问的数据推知更高密级的数据</li></ul></li><li>隐蔽信道<ul><li>间接数据传递</li></ul></li><li>数据隐私保护<ul><li>描述个人控制其不愿他人知道或他人不便知道的个人数据的能力</li><li>范围很广：数据收集、数据存储、数据处理和数据发布等各个阶段</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> 数据管理基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据管理基础 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据管理基础 ch11-22</title>
      <link href="/2022/04/14/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80-ch11-22/"/>
      <url>/2022/04/14/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80-ch11-22/</url>
      
        <content type="html"><![CDATA[<h1 id="ch11-sql概述">ch11 SQL概述</h1><ul><li>SQL（Structured QueryLanguage）结构化查询语言，是关系数据库的标准语言</li><li>SQL是一个通用的、功能极强的关系数据库语言<ul><li>综合统一</li><li>高度非过程化</li><li>面向集合的操作方式</li><li>以同一种语法结构提供两种使用方法</li><li>语言简洁，易学易用</li></ul></li></ul><h2 id="sql的特点">SQL的特点</h2><ol type="1"><li>综合统一<ol type="1"><li>集数据定义语言（DDL），数据操纵语言（DML），数据控制语言（DCL）功能于一体</li><li>可以独立完成数据库生命周期中的全部活动</li><li>用户数据库投入运行后，可根据需要随时逐步修改模式，不影响数据库的运行</li><li>数据操作符统一</li></ol></li><li>高度非过程化<ol type="1"><li>非关系数据模型的数据操纵语言“面向过程”，必须指定存取路径</li><li>SQL只要提出“做什么”，无须了解存取路径</li><li>存取路径的选择以及SQL的操作过程由系统自动完成</li></ol></li><li>面向集合的操作方式<ol type="1"><li>非关系数据模型采用面向记录的操作方式，操作对象是一条记录</li><li>SQL采用集合操作方式<ol type="1"><li>操作对象、查找结果可以是元组的集合</li><li>次插入、删除、更新操作的对象可以是元组的集合</li></ol></li></ol></li><li>以同一种语法结构提供多种使用方式<ol type="1"><li>SQL是独立的语言，能够独立地用于联机交互的使用方式</li><li>SQL又是嵌入式语言，能够嵌入到高级语言（例如C，C++，Java）程序中，供程序员设计程序时使用</li></ol></li><li>语言简洁，易学易用<ol type="1"><li>SQL功能极强，完成核心功能只用了9个动词:<ol type="1"><li>数据定义：CREATE，DROP，ALTER</li><li>数据查询：SELECT</li><li>数据操作：INSERT，UPDATE，DELETE</li><li>数据控制：GRANT，REVOKE</li></ol></li></ol></li></ol><h2 id="sql与关系数据库三级模式">SQL与关系数据库三级模式</h2><p><img src="https://s2.loli.net/2022/04/14/TufgM5v2Xi8Up6I.png" alt="image-20220306101019004"></p><ul><li>基本表<ul><li>本身独立存在的表</li><li>一个关系对应一个基本表</li><li>一个（或多个）基本表对应一个存储文件</li><li>一个表可以带若干索引</li></ul></li><li>存储文件<ul><li>逻辑结构组成了关系数据库的内模式</li><li>物理结构对用户是隐蔽的</li></ul></li><li>视图<ul><li>从一个或几个基本表导出的表</li><li>数据库中只存放视图的定义而不存放视图对应的数据</li><li>视图是一个虚表</li><li>用户可以在视图上再定义视图</li></ul></li></ul><h1 id="ch12-sql数据定义">ch12 SQL数据定义</h1><h2 id="层次化的数据库对象命名机制">层次化的数据库对象命名机制</h2><ul><li>一个关系数据库管理系统的实例（Instance）中可以建立多个数据库</li><li>一个数据库中可以建立多个模式</li><li>一个模式下通常包括多个表、视图和索引等数据库对象</li></ul><p><img src="https://s2.loli.net/2022/04/14/CL4yFP1Y2h3zZgI.png" alt="image-20220306101233644"></p><h2 id="数据定义">数据定义</h2><ul><li>SQL的数据定义功能:<ul><li>模式定义</li><li>表定义</li><li>视图和索引的定义</li></ul></li></ul><p><img src="https://s2.loli.net/2022/04/14/SyfdaWBxvzhC3t6.png" alt="image-20220306101305641"></p><h3 id="定义模式">定义模式</h3><ul><li>定义模式实际上定义了一个命名空间。<ul><li>在这个空间中可以定义该模式包含的数据库对象，例如基本表、视图、索引等。</li></ul></li><li>在CREATE SCHEMA中可以接受CREATE TABLE，CREATE VIEW和GRANT子句。<ul><li>CREATE SCHEMA &lt;模式名&gt; AUTHORIZATION &lt;用户名&gt; [&lt;表定义子句&gt;|&lt;视图定义子句&gt;|&lt;授权定义子句&gt;]</li><li>CREATE SCJE,A "S_T" AUTHORIZATION WANG</li></ul></li></ul><h3 id="删除模式">删除模式</h3><ul><li>DROP SCHEMA &lt;模式名&gt; &lt;CASCADE|RESTRICT&gt;<ul><li>CASCADE（级联）<ul><li>删除模式的同时把该模式中所有的数据库对象全部删除</li></ul></li><li>RESTRICT（限制）<ul><li>如果该模式中定义了下属的数据库对象（如表、视图等），则拒绝该删除语句的执行。仅当该模式中没有任何下属的对象时才能执行。</li></ul></li></ul></li></ul><h3 id="定义基本表">定义基本表</h3><ul><li><p>CREATE TABLE &lt;表名&gt; (&lt;列名&gt; &lt;数据类型&gt;[ &lt;列级完整性约束条件&gt; ][,&lt;列名&gt; &lt;数据类型&gt;[ &lt;列级完整性约束条件&gt;] ]</p></li><li><p>CREATE TABLE Student</p><p>​ (Sno CHAR(9) PRIMARY KEY</p><p>​ Sname CHAR(20) UNIQUE,</p><p>​ Ssex CHAR(2)</p><p>);</p></li></ul><h3 id="数据类型">数据类型</h3><ul><li>SQL中域的概念用数据类型来实现</li><li>定义表的属性时需要指明其数据类型及长度</li><li>选用哪种数据类型</li></ul><table><colgroup><col style="width: 36%"><col style="width: 63%"></colgroup><thead><tr class="header"><th><strong>数据类型</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr class="odd"><td><strong>CHAR(n),CHARACTER(n)</strong></td><td><strong>长度为</strong>n的定长字符串</td></tr><tr class="even"><td><strong>VARCHAR(n), CHARACTERVARYING(n)</strong></td><td><strong>最大长度为n的变长字符串</strong></td></tr><tr class="odd"><td><strong>CLOB</strong></td><td><strong>字符串大对象</strong></td></tr><tr class="even"><td><strong>BLOB</strong></td><td><strong>二进制大对象</strong></td></tr><tr class="odd"><td><strong>INT，INTEGER</strong></td><td><strong>长整数（</strong>4字节）</td></tr><tr class="even"><td><strong>SMALLINT</strong></td><td><strong>短整数（</strong>2字节）</td></tr><tr class="odd"><td><strong>BIGINT</strong></td><td>大整数（<strong>8字节）</strong></td></tr><tr class="even"><td><strong>NUMERIC</strong>(p，d)</td><td><strong>定点数，由</strong>p位数字（不包括符号、小数点）组成，小数后面有d位数字</td></tr><tr class="odd"><td><strong>DECIMAL</strong>(p, d<strong>), DEC(p,</strong> d)</td><td><strong>同</strong>NUMERIC</td></tr><tr class="even"><td><strong>REAL</strong></td><td><strong>取决于机器精度的单精度浮点数</strong></td></tr><tr class="odd"><td><strong>DOUBLE PRECISION</strong></td><td><strong>取决于机器精度的双精度浮点数</strong></td></tr><tr class="even"><td><strong>FLOAT(n)</strong></td><td><strong>可选精度的浮点数，精度至少为</strong>n位数字</td></tr><tr class="odd"><td><strong>BOOLEAN</strong></td><td><strong>逻辑布尔量</strong></td></tr><tr class="even"><td><strong>DATE</strong></td><td><strong>日期，包含年、月、日，格式为</strong>YYYY-MM-DD</td></tr><tr class="odd"><td><strong>TIME</strong></td><td><strong>时间，包含一日的时、分、秒，格式为</strong>HH:MM:SS</td></tr><tr class="even"><td><strong>TIMESTAMP</strong></td><td><strong>时间戳类型</strong></td></tr><tr class="odd"><td><strong>INTERVAL</strong></td><td><strong>时间间隔类型</strong></td></tr></tbody></table><h3 id="修改基本表">修改基本表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line">[ <span class="keyword">ADD</span>[<span class="keyword">COLUMN</span>] <span class="operator">&lt;</span>新列名<span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> [ 完整性约束 ] ]</span><br><span class="line">[ <span class="keyword">ADD</span> <span class="operator">&lt;</span>表级完整性约束<span class="operator">&gt;</span>]</span><br><span class="line">[ <span class="keyword">DROP</span> [ <span class="keyword">COLUMN</span> ] <span class="operator">&lt;</span>列名<span class="operator">&gt;</span> [CASCADE<span class="operator">|</span> RESTRICT] ]</span><br><span class="line">[ <span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span><span class="operator">&lt;</span>完整性约束名<span class="operator">&gt;</span>[ RESTRICT <span class="operator">|</span> CASCADE ] ]</span><br><span class="line">[<span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span><span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> ] ;</span><br></pre></td></tr></table></figure><h3 id="删除基本表">删除基本表</h3><ul><li>DROP TABLE &lt;表名&gt;［RESTRICT| CASCADE］;<ul><li>RESTRICT：删除表是有限制的。<ul><li>欲删除的基本表不能被其他表的约束所引用</li><li>如果存在依赖该表的对象，则此表不能被删除</li></ul></li><li>CASCADE：删除该表没有限制。<ul><li>在删除基本表的同时，相关的依赖对象一起删除</li></ul></li></ul></li></ul><h2 id="索引">索引</h2><ul><li>建立索引的目的：加快查询速度<ul><li>由数据库管理员或表的拥有者建立</li><li>由关系数据库管理系统自动完成维护</li><li>关系数据库管理系统自动使用合适的索引作为存取路径，</li><li>用户不必也不能显式地选择索引</li></ul></li><li>关系数据库管理系统中常见索引：<ul><li>顺序文件上的索引</li><li>B+树索引</li><li>散列（hash）索引</li><li>位图索引</li></ul></li></ul><h3 id="建立索引">建立索引</h3><ul><li>语句格式 CREATE [UNIQUE] [CLUSTER] INDEX &lt;索引名&gt; ON&lt;表名&gt;(&lt;列名&gt;[&lt;次序&gt;] [,&lt;列名&gt;[&lt;次序&gt;] ]…);<ul><li>&lt;表名&gt;：要建索引的基本表的名字</li><li>索引：可以建立在该表的一列或多列上，各列名之间用号分隔</li><li>&lt;次序&gt;：指定索引值的排列次序，升序：ASC，降序：DESC。缺省值：ASC</li><li>UNIQUE：此索引的每一个索引值只对应唯一的数据记录</li><li>CLUSTER：表示要建立的索引是聚簇索引</li></ul></li></ul><h2 id="数据字典">数据字典</h2><ul><li>数据字典是关系数据库管理系统内部的一组系统表，它记录了<ul><li>数据库中所有定义信息：</li><li>关系模式定义</li><li>视图定义</li><li>索引定义</li><li>完整性约束定义</li><li>各类用户对数据库的操作权限</li><li>统计信息等</li></ul></li><li>关系数据库管理系统在执行SQL的数据定义语句时，实际上就是在更新数据字典表中的相应信息</li></ul><h1 id="ch13-sql-数据查询单表">ch13 SQL 数据查询（单表）</h1><ul><li>语句格式</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span><span class="operator">|</span><span class="keyword">DISTINCT</span>] <span class="operator">&lt;</span>目标列表达式<span class="operator">&gt;</span>[,<span class="operator">&lt;</span>目标列表达式<span class="operator">&gt;</span>] …</span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表名或视图名<span class="operator">&gt;</span>[,<span class="operator">&lt;</span>表名或视图名<span class="operator">&gt;</span> ]…<span class="operator">|</span>(<span class="keyword">SELECT</span> 语句) </span><br><span class="line">                 [<span class="keyword">AS</span>]<span class="operator">&lt;</span>别名<span class="operator">&gt;</span></span><br><span class="line">[ <span class="keyword">WHERE</span> <span class="operator">&lt;</span>条件表达式<span class="operator">&gt;</span> ]</span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>列名<span class="number">1</span><span class="operator">&gt;</span> [ <span class="keyword">HAVING</span> <span class="operator">&lt;</span>条件表达式<span class="operator">&gt;</span> ] ]</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;</span> [ <span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span> ] ];</span><br></pre></td></tr></table></figure><ul><li>SELECT子句：指定要显示的属性列</li><li>FROM子句：指定查询对象（基本表或视图）</li><li>WHERE子句：指定查询条件</li><li>GROUP BY子句：对查询结果按指定列的值分组，该属性列值</li><li>相等的元组为一个组。通常会在每组中作用聚集函数。</li><li>HAVING短语：只有满足指定条件的组才予以输出</li><li>ORDER BY子句：对查询结果表按指定列值的升序或降序排序</li></ul><h2 id="查询满足条件的元组">查询满足条件的元组</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept <span class="operator">=</span> <span class="string">'CS'</span>;</span><br></pre></td></tr></table></figure><ol type="1"><li><p>比较大小</p></li><li><p>确定范围</p></li><li><p>确定集合</p><ul><li>谓词：IN &lt;值表&gt;, NOT IN &lt;值表&gt;</li></ul></li><li><p>字符匹配</p><ul><li><p>谓词： [NOT] LIKE ‘&lt;匹配串&gt;’ [ESCAPE ‘ &lt;换码字符&gt;’]</p></li><li><p>&lt;匹配串&gt;可以是一个完整的字符串，也可以含有通配符%（任意长度（长度可以为0）的字符串）和_（任意单个字符）</p><p>​ 例如：a%b表示以a开头，以b结尾的任意长度的字符串</p><p>​ 例如：a_b表示以a开头，以b结尾的长度为3的任意字符串</p></li><li><p>匹配串为固定字符串</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">-</span> [例<span class="number">3.29</span>]  查询学号为<span class="number">201215121</span>的学生的详细情况。</span><br><span class="line">       <span class="keyword">SELECT</span> <span class="operator">*</span>    </span><br><span class="line">       <span class="keyword">FROM</span>  Student  </span><br><span class="line">       <span class="keyword">WHERE</span>  Sno <span class="keyword">LIKE</span> ‘<span class="number">201215121</span><span class="string">';</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 等价于： </span></span><br><span class="line"><span class="string">        SELECT  * </span></span><br><span class="line"><span class="string">        FROM  Student </span></span><br><span class="line"><span class="string">        WHERE Sno = '</span><span class="number">201215121</span><span class="string">';</span></span><br></pre></td></tr></table></figure></li><li><p>匹配串为含通配符的字符串</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[例<span class="number">3.30</span>]  查询所有姓刘学生的姓名、学号和性别。</span><br><span class="line">​      <span class="keyword">SELECT</span> Sname, Sno, Ssex</span><br><span class="line">​      <span class="keyword">FROM</span> Student</span><br><span class="line">​      <span class="keyword">WHERE</span>  Sname <span class="keyword">LIKE</span> <span class="string">'刘%'</span>;</span><br><span class="line"></span><br><span class="line">​[例<span class="number">3.31</span>]  查询姓"欧阳"且全名为三个汉字的学生的姓名。</span><br><span class="line">​      <span class="keyword">SELECT</span> Sname</span><br><span class="line">​      <span class="keyword">FROM</span>   Student</span><br><span class="line">​      <span class="keyword">WHERE</span>  Sname <span class="keyword">LIKE</span> <span class="string">'欧阳__’;</span></span><br></pre></td></tr></table></figure></li><li><p>使用换码字符将通配符转义为普通字符</p><ul><li><p>ESCAPE '＼' 表示“ ＼” 为换码字符</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[例<span class="number">3.34</span>]  查询DB_Design课程的课程号和学分。</span><br><span class="line">     <span class="keyword">SELECT</span> Cno，Ccredit</span><br><span class="line">     <span class="keyword">FROM</span>     Course</span><br><span class="line">     <span class="keyword">WHERE</span>  Cname <span class="keyword">LIKE</span> <span class="string">'DB\_Design'</span> <span class="keyword">ESCAPE</span> <span class="string">'\ '</span> ;</span><br><span class="line">[例<span class="number">3.35</span>]  查询以"DB_"开头，且倒数第<span class="number">3</span>个字符为 i的课程的详细情况。</span><br><span class="line">      <span class="keyword">SELECT</span>  <span class="operator">*</span></span><br><span class="line">      <span class="keyword">FROM</span>    Course</span><br><span class="line">      <span class="keyword">WHERE</span>  Cname <span class="keyword">LIKE</span>  <span class="string">'DB\_%i_ _'</span> <span class="keyword">ESCAPE</span> <span class="string">'\ '</span> ;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>涉及空值的查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">谓词： <span class="keyword">IS</span> <span class="keyword">NULL</span> 或 <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line"> “<span class="keyword">IS</span>” 不能用 “<span class="operator">=</span>” 代替</span><br></pre></td></tr></table></figure></li><li><p>多重条件查询</p><ul><li>逻辑运算符：AND和 OR来连接多个查询条件<ul><li>AND的优先级高于OR</li><li>可以用括号改变优先级</li></ul></li></ul></li><li><p>对查询结果排序</p><ul><li>ORDER BY子句<ul><li>可以按一个或多个属性列排序</li><li>升序：ASC;降序：DESC;缺省值为升序</li><li>对于空值，排序时显示的次序由具体系统实现来决定</li></ul></li></ul></li></ol><h2 id="聚集函数">聚集函数</h2><ul><li>聚集函数：</li><li>统计元组个数 COUNT(*)</li><li>统计一列中值的个数 COUNT([DISTINCT|ALL] &lt;列名&gt;)</li><li>计算一列值的总和（此列必须为数值型） SUM([DISTINCT|ALL]&lt;列名&gt;)<br></li><li>计算一列值的平均值（此列必须为数值型） AVG([DISTINCT|ALL]&lt;列名&gt;)</li><li>求一列中的最大值和最小值 MAX([DISTINCT|ALL] &lt;列名&gt;)MIN([DISTINCT|ALL] &lt;列名&gt;)</li></ul><h3 id="对查询结果分组">对查询结果分组</h3><ul><li>GROUP BY子句分组<ul><li>细化聚集函数的作用对象</li><li>如果未对查询结果分组，聚集函数将作用于整个查询结果</li><li>对查询结果分组后，聚集函数将分别作用于每个组按指定的一列或多列值分组，值相等的为一组</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[例<span class="number">3.48</span> ]查询平均成绩大于等于<span class="number">90</span>分的学生学号和平均成绩</span><br><span class="line">因为<span class="keyword">WHERE</span>子句中是不能用聚集函数作为条件表达式，下面的语句是不对的：</span><br><span class="line">    <span class="keyword">SELECT</span> Sno, <span class="built_in">AVG</span>(Grade)</span><br><span class="line">    <span class="keyword">FROM</span>  SC</span><br><span class="line">    <span class="keyword">WHERE</span> <span class="built_in">AVG</span>(Grade)<span class="operator">&gt;=</span><span class="number">90</span></span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno;</span><br><span class="line">正确的查询语句应该是：</span><br><span class="line">    <span class="keyword">SELECT</span>  Sno, <span class="built_in">AVG</span>(Grade)</span><br><span class="line">    <span class="keyword">FROM</span>  SC</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno</span><br><span class="line">    <span class="keyword">HAVING</span> <span class="built_in">AVG</span>(Grade)<span class="operator">&gt;=</span><span class="number">90</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="ch14-sql-数据查询连接">ch14 SQL 数据查询（连接）</h1><h2 id="连接查询">连接查询</h2><ul><li>连接查询：同时涉及两个以上的表的查询</li><li>连接条件或连接谓词：用来连接两个表的条件</li><li>一般格式：<ul><li>[&lt;表名1&gt;.]&lt;列名1&gt; &lt;比较运算符&gt; [&lt;表名2&gt;.]&lt;列名2&gt;</li><li>[&lt;表名1&gt;.]&lt;列名1&gt; BETWEEN [&lt;表名2&gt;.]&lt;列名2&gt; AND[&lt;表名2&gt;.]&lt;列名3&gt;</li></ul></li><li>连接字段：连接谓词中的列名称<ul><li>连接条件中的各连接字段类型必须是可比的，但名字不必相同</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  Student.Sno,Sname,Ssex,Sage,Sdept,Cno,Grade</span><br><span class="line"> <span class="keyword">FROM</span>     Student,SC</span><br><span class="line"> <span class="keyword">WHERE</span>  Student.Sno <span class="operator">=</span> SC.Sno;</span><br></pre></td></tr></table></figure><h3 id="连接操作的执行过程">连接操作的执行过程</h3><p>嵌套循环法（NESTED-LOOP）</p><ul><li>首先在表1中找到第一个元组，然后从头开始扫描表2，逐一查找满足连接件的元组，找到后就将表1中的第一个元组与该元组拼接起来，形成结果表中一个元组。</li><li>表2全部查找完后，再找表1中第二个元组，然后再从头开始扫描表2，逐一查找满足连接条件的元组，找到后就将表1中的第二个元组与该元组拼接起来，形成结果表中一个元组。</li><li>重复上述操作，直到表1中的全部元组都处理完毕</li></ul><p>排序合并法（SORT-MERGE）</p><ul><li>​ 常用于=连接</li><li>首先按连接属性对表1和表2排序</li><li>对表1的第一个元组，从头开始扫描表2，顺序查找满足连接条件的元组，找到后就将表1中的第一个元组与该元组拼接起来，形成结果表中一个元组。当遇到表2中第一条大于表1连接字段值的元组时，对表2的查询不再继续</li></ul><p>索引连接（INDEX-JOIN）</p><ul><li>对表2按连接字段建立索引</li><li>对表1中的每个元组，依次根据其连接字段值查询表2的索引，从中找到满足条件的元组，找到后就将表1中的第一个元组与该元组拼接起来，形成结果表中一个元组</li></ul><h2 id="同时进行连接和选择">同时进行连接和选择</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[例 <span class="number">3.51</span>]查询选修<span class="number">2</span>号课程且成绩在<span class="number">90</span>分以上的所有学生的学号和姓名。</span><br><span class="line">    <span class="keyword">SELECT</span> Student.Sno, Sname</span><br><span class="line">    <span class="keyword">FROM</span>     Student, SC</span><br><span class="line">    <span class="keyword">WHERE</span>  Student.Sno<span class="operator">=</span>SC.Sno  <span class="keyword">AND</span>         </span><br><span class="line">           SC.Cno<span class="operator">=</span><span class="string">' 2 '</span> <span class="keyword">AND</span> SC.Grade<span class="operator">&gt;</span><span class="number">90</span>;</span><br></pre></td></tr></table></figure><ul><li>执行过程:<ul><li>先从SC中挑选出Cno='2'并且Grade&gt;90的元组形成一个中间关系</li><li>再和Student中满足连接条件的元组进行连接得到最终的结果关系</li></ul></li></ul><h2 id="自身连接">自身连接</h2><ul><li><p>自身连接：一个表与其自己进行连接</p></li><li><p>需要给表起别名以示区别</p></li><li><p>由于所有属性名都是同名属性，因此必须使用别名前缀</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[例 <span class="number">3.52</span>]查询每一门课的间接先修课（即先修课的先修课）</span><br><span class="line">    <span class="keyword">SELECT</span>  FIRST.Cno, SECOND.Cpno</span><br><span class="line">    <span class="keyword">FROM</span>  Course  <span class="keyword">FIRST</span>, Course  <span class="keyword">SECOND</span></span><br><span class="line">    <span class="keyword">WHERE</span> FIRST.Cpno <span class="operator">=</span> SECOND.Cno;</span><br></pre></td></tr></table></figure></li></ul><h2 id="外连接">外连接</h2><ul><li>外连接与普通连接的区别<ul><li>普通连接操作只输出满足连接条件的元组</li><li>外连接操作以指定表为连接主体，将主体表中不满足连接条件的元组一并输出<ul><li>左外连接 列出左边关系中所有的元组</li><li>右外连接 列出右边关系中所有的元组</li></ul></li></ul></li></ul><h2 id="多表连接">多表连接</h2><ul><li><p>多表连接：两个以上的表进行连接</p></li><li><p>[例3.54]查询每个学生的学号、姓名、选修的课程名及成绩</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Student.Sno, Sname, Cname, Grade</span><br><span class="line"><span class="keyword">FROM</span>    Student, SC, Course    <span class="comment">/*多表连接*/</span></span><br><span class="line"><span class="keyword">WHERE</span> Student.Sno <span class="operator">=</span> SC.Sno </span><br><span class="line">        <span class="keyword">AND</span> SC.Cno <span class="operator">=</span> Course.Cno;</span><br></pre></td></tr></table></figure></li></ul><h1 id="ch15-sql数据查询嵌套">ch15 SQL数据查询（嵌套）</h1><p>一个SELECT-FROM-WHERE语句称为一个查询块</p><p>将一个查询块嵌套在另一个查询块的WHERE子句或HAVING短语的条件中的查询称为嵌套查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname              <span class="comment">/*外层查询/父查询*/</span></span><br><span class="line">  <span class="keyword">FROM</span> Student</span><br><span class="line">  <span class="keyword">WHERE</span> Sno <span class="keyword">IN</span></span><br><span class="line">                     ( <span class="keyword">SELECT</span> Sno        <span class="comment">/*内层查询/子查询*/</span></span><br><span class="line">                       <span class="keyword">FROM</span> SC</span><br><span class="line">                       <span class="keyword">WHERE</span> Cno<span class="operator">=</span> <span class="string">' 2 '</span>);</span><br></pre></td></tr></table></figure><ul><li>上层的查询块称为外层查询或父查询</li><li>下层查询块称为内层查询或子查询</li><li>子查询的限制<ul><li>不能使用ORDER BY子句</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">SELECT  Sdept  </span><br><span class="line">FROM     Student                            </span><br><span class="line">WHERE  Sname= ' 刘晨 ';</span><br><span class="line">结果为： CS</span><br><span class="line"></span><br><span class="line">SELECT   Sno, Sname, Sdept     </span><br><span class="line">FROM      Student                 </span><br><span class="line">WHERE   Sdept= ' CS '; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SELECT Sno, Sname, Sdept</span><br><span class="line">FROM Student</span><br><span class="line">WHERE Sdept  IN</span><br><span class="line">   (SELECT Sdept</span><br><span class="line">    FROM Student</span><br><span class="line">    WHERE Sname= ' 刘晨 ');</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>带有IN谓词的子查询</li><li>带有比较运算符的子查询</li><li>带有ANY（SOME）或ALL谓词的子查询</li><li>带有EXISTS谓词的子查询</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> 数据管理基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据管理基础 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS144 Lab 1</title>
      <link href="/2022/04/14/CS144-Lab-1/"/>
      <url>/2022/04/14/CS144-Lab-1/</url>
      
        <content type="html"><![CDATA[<h1 id="lab-checkpoint-1-stitching-substrings-into-a-byte-stream"><strong>LabCheckpoint 1: stitching substrings into a byte stream</strong></h1><p>TCP概述</p><p><img src="https://s1.328888.xyz/2022/04/14/iiCdT.png" alt="iiCdT.png"></p><p>在实验1中，你将实现一个流重组器--一个将字节流的小片段（称为子串或片段）缝合到连续流中的模块。的小块字节流（称为子串，或段）重新拼接成一个连续的字节流。顺序正确的字节流</p><p>Interface</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造器，最多存储 Capacity个字节</span></span><br><span class="line"><span class="built_in">StreamReassembler</span>(<span class="type">const</span> <span class="type">size_t</span> capacity);</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收一个子串并将任何新的连续字节写入流中，同时保持在 "容量 "的内存限制之内。超过容量的字节 超过容量的字节将被默默地丢弃。</span></span><br><span class="line"><span class="comment">// `data`:  子串</span></span><br><span class="line"><span class="comment">// `index`  表示子串中第一个字节的索引</span></span><br><span class="line"><span class="comment">// `eof`:  子串的最后一个字节是整个字节流的结尾</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_substring</span><span class="params">(<span class="type">const</span> string &amp;data, <span class="type">const</span> <span class="type">uint64_t</span> index, <span class="type">const</span> <span class="type">bool</span> eof)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接受重组后的字节流</span></span><br><span class="line"><span class="function">ByteStream &amp;<span class="title">stream_out</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//已存储但尚未重新组合的子串中的字节数</span></span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">unassembled_bytes</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//内部状态是否为空（除输出流外）？</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="type">const</span></span>;</span><br></pre></td></tr></table></figure><p>我们的任务是实现StreamReassembler类</p><h2 id="whats-the-capacity"><strong>What’s the “capacity”?</strong></h2><p>你的push_substring方法将忽略任何会导致StreamReassembler超过其 "容量"的字符串部分</p><p>Capacity由两部分构成：（如图）</p><ol type="1"><li>重组后的ByteStream中的字节数（下面以绿色显示）</li><li>未组装的 "子串 "可使用的最大字节数（显示为 以红色显示</li></ol><p><img src="https://s1.328888.xyz/2022/04/14/ii1Ym.png" alt="ii1Ym.png"></p><p>当你实现StreamReassembler并通过测试时，你可能会发现这幅图很有用。测试时，你可能会发现这张图片很有用--"正确"的行为并不总是自然的。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> CS144 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> CS144 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS144 Lab 0</title>
      <link href="/2022/04/14/CS144-Lab-0/"/>
      <url>/2022/04/14/CS144-Lab-0/</url>
      
        <content type="html"><![CDATA[<h1 id="lab-checkpoint-0-networking-warmup"><strong>Lab Checkpoint 0:networking warmup</strong></h1><h3 id="在您的计算机上设置gnulinux">1 在您的计算机上设置GNU/Linux</h3><p>CS144的作业要求使用GNU/Linux操作系统和一个支持C++2017标准的最新C++编译器。 支持C++2017标准。请在这三个选项中选择一个。</p><h2 id="手工联网"><strong>2</strong> 手工联网</h2><h3 id="fetch-a-web-page">2.1 Fetch a Web page</h3><p>在虚拟机中打开终端，通过命令行访问 指定网页</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet cs144.keithw.org http</span><br></pre></td></tr></table></figure><p>依次输入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /hello HTTP/<span class="number">1.1</span> </span><br><span class="line">Host: cs144.keithw.org</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><p>然后两次回车</p><p>此时窗口会显示 Hello CS144 !</p><h3 id="send-yourself-an-email">2.2 Send yourself an email</h3><p>依然是命令行，注意邮箱需要换成自己的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet 148.163.153.234 smtp</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HELO mycomputer.stanford.edu</span><br><span class="line">MAIL FROM: sunetid @stanford.edu</span><br><span class="line">RCPT TO: sunetid @stanford.edu</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">From: sunetid@stanford.edu</span><br><span class="line">To: sunetid@stanford.edu</span><br><span class="line">Subject: Hello from CS144 Lab 0!</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QUIT</span><br></pre></td></tr></table></figure><h3 id="listening-and-connecting">2.3 Listening and connecting</h3><p>打开一个终端。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netcat -v -l -p 9090</span><br></pre></td></tr></table></figure><p>打开另一个终端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet localhost 9090</span><br></pre></td></tr></table></figure><p>此时两个终端可以实现通信。</p><h2 id="webget">3 WebGet</h2><p>使用TCPSocket来实现发送 http 请求，并获取响应信息，打印出来。</p><ol type="1"><li>创建一个TCPSocket并与服务器建立连接。</li><li>向服务器发送请求，格式参照前面fetch a webpage部分，注意在HTTP中每行的结尾应该为。</li><li>发送完请求后，客户端应该关闭TCPSocket的写功能，对应前面的Connection:close，告诉服务器请求已经发送完毕，服务器只要回复完数据后就可以立刻断开连接。</li><li>循环读取从服务器发送过来的信息，直到遇到 Eof (end of file)。最后记得需要关闭前面创建的TCPSocket。</li></ol><p>根据所给的API，和前面的warmup，可以实现，代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">void get_URL(const string &amp;host, const string &amp;path) {</span><br><span class="line">    TCPSocket sock;</span><br><span class="line">    sock.connect(Address(host, "http"));</span><br><span class="line">    sock.write("GET " + path + " HTTP/1.1\r\n");</span><br><span class="line">    sock.write("Host: " + host + "\r\n");</span><br><span class="line">    sock.write("Connection: close \r\n");</span><br><span class="line">    sock.write("\r\n");</span><br><span class="line"></span><br><span class="line">    while(!sock.eof()){</span><br><span class="line">        auto rsp = sock.read();</span><br><span class="line">        cout &lt;&lt; rsp;</span><br><span class="line">    }</span><br><span class="line">    sock.close();</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="an-in-memory-reliable-byte-stream">4 <strong>An in-memoryreliable byte stream</strong></h2><p>实现一个有序字节流</p><p>byte_stream.hh</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ByteStream</span> {</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// Your code here -- add private members as necessary.</span></span><br><span class="line">    std::deque&lt;<span class="type">char</span>&gt; _buffer = {};</span><br><span class="line">    <span class="type">size_t</span> _capacity = <span class="number">0</span>;</span><br><span class="line">    <span class="type">size_t</span> _read_count = <span class="number">0</span>;</span><br><span class="line">    <span class="type">size_t</span> _write_count = <span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> _input_ended_flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">bool</span> _error = <span class="literal">false</span>;  <span class="comment">//!&lt; Flag indicating that the stream suffered an error.</span></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>byte_stream.cc</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">ByteStream::<span class="built_in">ByteStream</span>(<span class="type">const</span> <span class="type">size_t</span> capacity) : _capacity(capacity) {}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">ByteStream::write</span><span class="params">(<span class="type">const</span> string &amp;data)</span> </span>{</span><br><span class="line">    <span class="type">size_t</span> len = data.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">if</span> (len &gt; _capacity - _buffer.<span class="built_in">size</span>()) {</span><br><span class="line">        len = _capacity - _buffer.<span class="built_in">size</span>();</span><br><span class="line">    }</span><br><span class="line">    _write_count += len;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; len; i++) {</span><br><span class="line">        _buffer.<span class="built_in">push_back</span>(data[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//! \param[in] len bytes will be copied from the output side of the buffer</span></span><br><span class="line"><span class="function">string <span class="title">ByteStream::peek_output</span><span class="params">(<span class="type">const</span> <span class="type">size_t</span> len)</span> <span class="type">const</span> </span>{</span><br><span class="line">    <span class="type">size_t</span> length = len;</span><br><span class="line">    <span class="keyword">if</span> (length &gt; _buffer.<span class="built_in">size</span>()) {</span><br><span class="line">        length = _buffer.<span class="built_in">size</span>();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">string</span>().<span class="built_in">assign</span>(_buffer.<span class="built_in">begin</span>(), _buffer.<span class="built_in">begin</span>() + length);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//! \param[in] len bytes will be removed from the output side of the buffer</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ByteStream::pop_output</span><span class="params">(<span class="type">const</span> <span class="type">size_t</span> len)</span> </span>{</span><br><span class="line">    <span class="type">size_t</span> length = len;</span><br><span class="line">    <span class="keyword">if</span> (length &gt; _buffer.<span class="built_in">size</span>()) {</span><br><span class="line">        length = _buffer.<span class="built_in">size</span>();</span><br><span class="line">    }</span><br><span class="line">    _read_count += length;</span><br><span class="line">    <span class="keyword">while</span> (length--) {</span><br><span class="line">        _buffer.<span class="built_in">pop_front</span>();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//! Read (i.e., copy and then pop) the next "len" bytes of the stream</span></span><br><span class="line"><span class="comment">//! \param[in] len bytes will be popped and returned</span></span><br><span class="line"><span class="comment">//! \returns a string</span></span><br><span class="line"><span class="function">std::string <span class="title">ByteStream::read</span><span class="params">(<span class="type">const</span> <span class="type">size_t</span> len)</span> </span>{</span><br><span class="line">    string msg;</span><br><span class="line">    <span class="keyword">if</span>(len &gt; _buffer.<span class="built_in">size</span>()){</span><br><span class="line">        msg = <span class="built_in">peek_output</span>(_buffer.<span class="built_in">size</span>());</span><br><span class="line">        <span class="built_in">pop_output</span>(_buffer.<span class="built_in">size</span>());</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span>{</span><br><span class="line">    msg = <span class="built_in">peek_output</span>(len);</span><br><span class="line">    <span class="built_in">pop_output</span>(len);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> msg;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ByteStream::end_input</span><span class="params">()</span> </span>{ _input_ended_flag = <span class="literal">true</span>; }</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ByteStream::input_ended</span><span class="params">()</span> <span class="type">const</span> </span>{ <span class="keyword">return</span> _input_ended_flag; }</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">ByteStream::buffer_size</span><span class="params">()</span> <span class="type">const</span> </span>{ <span class="keyword">return</span> _buffer.<span class="built_in">size</span>(); }</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ByteStream::buffer_empty</span><span class="params">()</span> <span class="type">const</span> </span>{ <span class="keyword">return</span> _buffer.<span class="built_in">size</span>() == <span class="number">0</span>; }</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ByteStream::eof</span><span class="params">()</span> <span class="type">const</span> </span>{ <span class="keyword">return</span> <span class="built_in">buffer_empty</span>() &amp;&amp; <span class="built_in">input_ended</span>(); }</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">ByteStream::bytes_written</span><span class="params">()</span> <span class="type">const</span> </span>{ <span class="keyword">return</span> _write_count; }</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">ByteStream::bytes_read</span><span class="params">()</span> <span class="type">const</span> </span>{ <span class="keyword">return</span> _read_count; }</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">ByteStream::remaining_capacity</span><span class="params">()</span> <span class="type">const</span> </span>{ <span class="keyword">return</span> _capacity - _buffer.<span class="built_in">size</span>(); }</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> CS144 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> CS144 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据管理基础 ch08-10</title>
      <link href="/2022/04/03/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80-ch08-10/"/>
      <url>/2022/04/03/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80-ch08-10/</url>
      
        <content type="html"><![CDATA[<h1 id="ch-08-关系关系模式和关系数据库">ch 08关系、关系模式和关系数据库</h1><h2 id="域domain">域（Domain）</h2><p><img src="https://s2.loli.net/2022/05/03/XIJ9lFfu3V2AD56.png"></p><h2 id="笛卡尔积">笛卡尔积</h2><p><strong>笛卡尔积 1</strong></p><p><img src="https://s2.loli.net/2022/05/03/ZKNsLh4MW1EA7JO.png"></p><p><strong>笛卡尔积 2</strong></p><p><img src="https://s2.loli.net/2022/05/03/pnxPDLfivzt9XI7.png"></p><p><strong>笛卡尔积 3</strong></p><p><img src="https://s2.loli.net/2022/05/03/h4n2WGFbclLPCyI.png"></p><p><strong>笛卡尔积 4</strong></p><ul><li>例如，给出3个域：<ul><li>D1=导师集合SUPERVISOR=｛张清玫，刘逸｝</li><li>D2=专业集合SPECIALITY=｛计算机专业，信息专业｝</li><li>D3=研究生集合POSTGRADUATE=｛李勇，刘晨，王敏｝</li></ul></li><li>D1，D2，D3的笛卡尔积（其基数为2×2×3＝12）为<ul><li>D1×D2×D3＝｛(张清玫，计算机专业，李勇)，(张清玫，计算机专业，刘晨)，(张清玫，计算机专业，王敏)，(张清玫，信息专业，李勇)，(张清玫，信息专业，刘晨)，(张清玫，信息专业，王敏)，(刘逸，计算机专业，李勇)，(刘逸，计算机专业，刘晨)，(刘逸，计算机专业，王敏)，(刘逸，信息专业，李勇)，(刘逸，信息专业，刘晨)，(刘逸，信息专业，王敏) ｝</li></ul></li></ul><p><strong>笛卡尔积 5</strong></p><p><img src="https://s2.loli.net/2022/05/03/C5Tj4PvX3YBbEm9.png"></p><h2 id="关系">关系</h2><p><strong>关系 1</strong></p><p><img src="https://s2.loli.net/2022/05/03/7aHPT5BMA9w8spn.png"></p><p><strong>关系 2</strong></p><ul><li>关系的表示<ul><li>关系也是一个二维表，表的每行对应一个元组，表的每列对应一个域</li></ul></li><li>属性<ul><li>关系中不同列可以对应相同的域</li><li>为了加以区分，必须对每列起一个名字，称为属性（Attribute）</li><li>n目关系必有n个属性</li></ul></li></ul><p><strong>关系 3</strong></p><ul><li>码<ul><li>候选码（Candidate key）<ul><li>若关系中的某一属性组的值能唯一地标识一个元组，而其子集不能，则称该属性组为候选码</li><li>简单的情况：候选码只包含一个属性</li><li>最极端的情况：关系模式的所有属性组是这个关系模式的候选码，称为全码（All-key）</li></ul></li><li>主码<ul><li>若一个关系有多个候选码，则选定其中一个为主码（Primary key）</li></ul></li><li>主属性<ul><li>候选码的诸属性称为主属性（Prime attribute）</li><li>不包含在任何侯选码中的属性称为非主属性（Non-Primeattribute）或非码属性（Non-key attribute）</li></ul></li></ul></li></ul><p><strong>关系 4</strong></p><p><img src="https://s2.loli.net/2022/05/03/UVv5dxOnwfLSJT4.png"></p><p><strong>关系的类别</strong></p><ul><li>基本关系（基本表或基表）<ul><li>实际存在的表，是实际存储数据的逻辑表示</li></ul></li><li>查询表<ul><li>查询结果对应的表</li></ul></li><li>视图表<ul><li>由基本表或其他视图表导出的表，是虚表，不对应实际存储的数据</li></ul></li></ul><h2 id="基本关系的性质">基本关系的性质</h2><ul><li>列是同质的（Homogeneous）<ul><li>每一列中的分量是同一类型的数据，来自同一个域</li></ul></li><li>不同的列可出自同一个域<ul><li>其中的每一列称为一个属性</li><li>不同的属性要给予不同的属性名</li></ul></li><li>列的顺序无所谓<ul><li>列的次序可以任意交换</li></ul></li><li>任意两个元组的候选码不能相同</li><li>行的顺序无所谓<ul><li>行的次序可以任意交换</li></ul></li><li>分量必须取原子值</li></ul><h2 id="关系模式">关系模式</h2><p><strong>关系模式 1</strong></p><ul><li>关系模式（Relation Schema）是型，关系是值</li><li>关系模式是对关系的描述<ul><li>元组集合的结构<ul><li>属性构成</li><li>属性来自的域<br></li><li>属性与域之间的映象关系</li></ul></li><li>完整性约束条件</li></ul></li></ul><p><strong>关系模式 2</strong></p><p><img src="https://s2.loli.net/2022/05/03/yUb8qSRaf1wdrWL.png"></p><h2 id="关系模式与关系">关系模式与关系</h2><ul><li>关系模式<ul><li>对关系的描述</li><li>静态的、稳定的</li></ul></li><li>关系<ul><li>关系模式在某一时刻的状态或内容</li><li>动态的、随时间不断变化的</li></ul></li><li>关系模式和关系往往笼统称为关系<ul><li>通过上下文加以区别</li></ul></li></ul><h2 id="关系数据库">关系数据库</h2><ul><li>关系数据库<ul><li>在一个给定的应用领域中，所有关系的集合构成一个关系数据库</li></ul></li><li>关系数据库的型与值<ul><li>关系数据库的型: 关系数据库模式，是对关系数据库的描述</li><li>关系数据库的值:关系模式在某一时刻对应的关系的集合，通常称为关系数据库</li></ul></li></ul><h1 id="ch-09-关系的完整性">ch 09 关系的完整性</h1><h2 id="关系的三类完整性约束">关系的三类完整性约束</h2><ul><li>实体完整性和参照完整性<ul><li>关系模型必须满足的完整性约束条件称为关系的两个不变性，应该由关系系统自动支持</li></ul></li><li>用户定义的完整性<ul><li>应用领域需要遵循的约束条件，体现了具体领域中的语义约束</li></ul></li></ul><h2 id="实体完整性">实体完整性</h2><p><strong>实体完整性 1</strong></p><ul><li>实体完整性规则（Entity Integrity）<ul><li>若属性A是基本关系R的主属性，则属性A不能取空值</li><li>空值就是“不知道”或“不存在”或“无意义”的值</li></ul></li><li>例：<ul><li>选修（学号，课程号，成绩）</li><li>“学号、课程号”为主码</li><li>“学号”和“课程号”两个属性都不能取空值</li></ul></li></ul><p><strong>实体完整性 2</strong></p><ul><li>实体完整性规则的说明<ol type="1"><li>实体完整性规则是针对基本关系而言的。一个基本表通常对应现实世界的一个实体集。</li><li>现实世界中的实体是可区分的，即它们具有某种唯一性标识。</li><li>关系模型中以主码作为唯一性标识。</li><li>主码中的属性即主属性不能取空值。<ul><li>主属性取空值，就说明存在某个不可标识的实体，即存在不可区分的实体，这与第2点相矛盾，因此这个规则称为实体完整性</li></ul></li></ol></li></ul><h2 id="关系间的引用">关系间的引用</h2><p><strong>关系间的引用 1</strong></p><p><img src="https://s2.loli.net/2022/05/03/Tu1VMKzkGrZbL84.png"></p><p><strong>关系间的引用 2</strong></p><p><img src="https://s2.loli.net/2022/05/03/zcpuvROftDbLGjr.png" alt="image-20220503213559224"></p><h2 id="外码">外码</h2><p><strong>外码 1</strong></p><p><img src="https://s2.loli.net/2022/05/03/RBy4OVYINbX9QnD.png"></p><p><strong>外码 2</strong></p><ul><li>例1中,学生关系的“专业号”与专业关系的主码“专业号”相对应<ul><li>“专业号”属性是学生关系的外码</li><li>专业关系是被参照关系，学生关系为参照关系</li></ul></li></ul><p><img src="https://s2.loli.net/2022/05/03/u8DO9VZGq1bMaxw.png"></p><p><strong>外码 3</strong></p><ul><li>例2中，选修关系的“学号”与学生关系的主码“学号”相对应，选修关系的“课程号”与课程关系的主码“课程号”相对应<ul><li>“学号”和“课程号”是选修关系的外码</li><li>学生关系和课程关系均为被参照关系</li><li>选修关系为参照关系</li></ul></li></ul><p><img src="https://s2.loli.net/2022/05/03/suUhA7ER1MmGrcJ.png"></p><p><strong>外码 4</strong></p><ul><li>例3中，“班长”与本身的主码“学号”相对应<ul><li>“班长”是外码</li><li>学生关系既是参照关系也是被参照关系</li></ul></li></ul><p><img src="https://s2.loli.net/2022/05/03/Tqic3koP5bjuUZ1.png"></p><h2 id="参照完整性规则">参照完整性规则</h2><p><strong>参照完整性规则 1</strong></p><p><img src="https://s2.loli.net/2022/05/03/3DuFRmSI5v8PfbO.png"></p><p><strong>参照完整性规则 2</strong></p><ul><li>例1中，学生关系中每个元组的“专业号”属性只取两类值：<ul><li>空值，表示尚未给该学生分配专业</li><li>非空值，这时该值必须是专业关系中某个元组的“专业号”值，表示该学生不可能分配一个不存在的专业</li></ul></li></ul><p><img src="https://s2.loli.net/2022/05/03/urkozgDiRYGCeVy.png"></p><p><strong>参照完整性规则 3</strong></p><ul><li>例2中，选修（学号，课程号，成绩）</li><li>“学号”和“课程号”可能的取值 ：<ul><li>选修关系中的主属性，不能取空值</li><li>只能取相应被参照关系中已经存在的主码值</li></ul></li></ul><p><img src="https://s2.loli.net/2022/05/03/F29B3o8r7McKu6A.png"></p><p><strong>参照完整性规则 4</strong></p><ul><li>例3中，学生（学号，姓名，性别，专业号，年龄，班长）<ul><li>“班长”属性值可以取两类值：<ul><li>空值，表示该学生所在班级尚未选出班长</li><li>非空值，该值必须是本关系中某个元组的学号值</li></ul></li></ul></li></ul><p><img src="https://s2.loli.net/2022/05/03/oVY1ZpLRUkhPQEI.png"></p><h2 id="用户定义的完整性">用户定义的完整性</h2><ul><li>针对某一具体关系数据库的约束条件，反映某一具体应用所涉及的数据必须满足的语义要求</li><li>关系模型应提供定义和检验这类完整性的机制，以便用统一的系统的方法处理它们，而不需由应用程序承担这一功能</li><li>例：课程（课程号，课程名，学分）<ul><li>“课程号”属性必须取唯一值</li><li>非主属性“课程名”也不能取空值</li><li>“学分”属性只能取值{1，2，3，4}</li></ul></li></ul><h1 id="ch-10-关系操作和关系代数">ch 10 关系操作和关系代数</h1><ul><li><ul><li><ul><li><h2 id="基本的关系操作">基本的关系操作</h2><ul><li>常用的关系操作<ul><li>查询操作：选择，投影，连接，除，并，差，交，笛卡尔积<ul><li>选择，投影，并，差，笛卡尔积是5种基本操作</li></ul></li><li>数据更新：插入，删除，修改</li></ul></li><li>关系操作的特点<ul><li>集合操作方式：操作的对象和结果都是集合，一次一集合的方式</li></ul></li></ul><h2 id="关系代数">关系代数</h2><ul><li>关系代数是一种抽象的查询语言，它用对关系的运算来表达查询<ul><li>运算对象是关系</li><li>运算结果亦为关系</li><li>关系代数的运算符有两类：集合运算符和专门的关系运算符<ul><li>传统的集合运算是从关系的“水平”方向，即行的角度进行</li><li>专门的关系运算不仅涉及行而且涉及列</li></ul></li></ul></li></ul><table><thead><tr class="header"><th>运算符</th><th></th><th>含义</th></tr></thead><tbody><tr class="odd"><td>集合运算符</td><td><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.564ex;" xmlns="http://www.w3.org/2000/svg" width="1.885ex" height="2.26ex" role="img" focusable="false" viewBox="0 -749.5 833 999"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="22C3" d="M96 750Q103 750 109 748T120 744T127 737T133 730T137 723T139 718V395L140 73L142 60Q159 -43 237 -104T416 -166Q521 -166 597 -103T690 60L692 73L694 718Q708 749 735 749Q765 749 775 720Q777 714 777 398Q777 78 776 71Q766 -51 680 -140Q571 -249 416 -249H411Q261 -249 152 -140Q66 -51 56 71Q55 78 55 398Q55 714 57 720Q60 734 70 740Q80 750 96 750Z"></path></g></g></g></svg></mjx-container></span></td><td>并</td></tr><tr class="even"><td></td><td>-</td><td>差</td></tr><tr class="odd"><td></td><td><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.564ex;" xmlns="http://www.w3.org/2000/svg" width="1.885ex" height="2.26ex" role="img" focusable="false" viewBox="0 -749.5 833 999"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="22C2" d="M139 -217Q127 -241 114 -246Q106 -249 97 -249Q67 -249 57 -220Q55 -214 55 102Q55 152 55 221T54 312Q54 422 60 464T91 554Q120 612 165 654T257 714T337 741T392 749Q393 750 402 750Q414 750 422 749Q557 749 660 659T776 430Q777 422 777 102Q777 -214 775 -220Q765 -249 735 -249Q716 -249 708 -241T694 -217L692 428L690 441Q674 540 597 603T416 666H409Q388 666 364 662T294 638T212 581Q156 523 142 441L140 428L139 105V-217Z"></path></g></g></g></svg></mjx-container></span></td><td>交</td></tr><tr class="even"><td></td><td><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0.02ex;" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.09ex" role="img" focusable="false" viewBox="0 -491 778 482"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g></g></g></svg></mjx-container></span></td><td>笛卡尔积</td></tr><tr class="odd"><td>专门的关系运算符</td><td><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.292ex" height="1ex" role="img" focusable="false" viewBox="0 -431 571 442"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></g></g></g></svg></mjx-container></span></td><td>选择</td></tr><tr class="even"><td></td><td><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.697ex" height="1.538ex" role="img" focusable="false" viewBox="0 -680 750 680"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="3A0" d="M128 619Q121 626 117 628T101 631T58 634H25V680H724V634H691Q651 633 640 631T622 619V61Q628 51 639 49T691 46H724V0H713Q692 3 569 3Q434 3 425 0H414V46H447Q489 47 498 49T517 61V634H232V348L233 61Q239 51 250 49T302 46H335V0H324Q303 3 180 3Q45 3 36 0H25V46H58Q100 47 109 49T128 61V619Z"></path></g></g></g></svg></mjx-container></span></td><td>投影</td></tr><tr class="odd"><td></td><td><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.011ex;" xmlns="http://www.w3.org/2000/svg" width="2.036ex" height="1.154ex" role="img" focusable="false" viewBox="0 -505 900 510"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="22C8" d="M833 50T833 250T832 450T659 351T487 250T658 150T832 50Q833 50 833 250ZM873 10Q866 -5 854 -5Q851 -5 845 -3L449 226L260 115Q51 -5 43 -5Q39 -5 35 -1T28 7L26 11V489Q33 505 43 505Q51 505 260 385L449 274L845 503Q851 505 853 505Q866 505 873 490V10ZM412 250L67 450Q66 450 66 250T67 50Q69 51 240 150T412 250Z"></path></g></g></g></svg></mjx-container></span></td><td>连接</td></tr><tr class="even"><td></td><td><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.081ex;" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.296ex" role="img" focusable="false" viewBox="0 -537 778 573"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="F7" d="M318 466Q318 500 339 518T386 537Q418 537 438 517T458 466Q458 438 440 417T388 396Q355 396 337 417T318 466ZM56 237T56 250T70 270H706Q721 262 721 250T706 230H70Q56 237 56 250ZM318 34Q318 68 339 86T386 105Q418 105 438 85T458 34Q458 6 440 -15T388 -36Q355 -36 337 -15T318 34Z"></path></g></g></g></svg></mjx-container></span></td><td>除</td></tr></tbody></table><h3 id="使用的记号-1">使用的记号 1</h3><ul><li><p>设关系模式为<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="17.727ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 7835.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(759,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(1148,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mn" transform="translate(783,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(2334.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(2779.2,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mn" transform="translate(783,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(3965.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(4410.4,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(4855.1,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(5299.8,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(5744.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(6189.1,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(783,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(7446.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p><ul><li><p>他的一个关系设为R</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="5.3ex" height="1.636ex" role="img" focusable="false" viewBox="0 -683 2342.6 723"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(638.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1583.6,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g></g></g></svg></mjx-container></span></p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.511ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1994 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(361,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="msub" transform="translate(639,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(783,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1716,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span>表示元组t种相应于属性<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.437ex" height="1.977ex" role="img" focusable="false" viewBox="0 -716 1077 873.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(783,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span>的一个分量</p><p>若<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="22.755ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 10057.9 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(1027.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2083.6,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="msub" transform="translate(2583.6,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="TeXAtom" transform="translate(783,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(345,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(4014.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(4458.7,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="TeXAtom" transform="translate(783,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(345,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mo" transform="translate(5889.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(6333.9,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(6778.6,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(7223.2,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(7667.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(8112.6,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="TeXAtom" transform="translate(783,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><g data-mml-node="mo" transform="translate(9557.9,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container></span>，其中<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="15.779ex" height="2.059ex" role="img" focusable="false" viewBox="0 -716 6974.4 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="TeXAtom" transform="translate(783,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(345,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1430.5,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1875.2,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="TeXAtom" transform="translate(783,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(345,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mo" transform="translate(3305.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(3750.3,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(4195,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(4639.7,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(5084.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(5529,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="TeXAtom" transform="translate(783,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g></g></svg></mjx-container></span>是<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="15.506ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6853.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="msub" transform="translate(500,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mn" transform="translate(783,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1686.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(2131.2,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mn" transform="translate(783,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(3317.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(3762.4,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(4207.1,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(4651.8,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="msub" transform="translate(5096.4,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(783,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(6353.7,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container></span>种的一部分，则称A为属性列或属性组</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="29.923ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 13225.9 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(361,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(639,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(1389,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(1944.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(3000.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(3389.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(3750.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="msub" transform="translate(4028.6,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="TeXAtom" transform="translate(783,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(345,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(5459.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(5903.7,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(6264.7,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="msub" transform="translate(6542.7,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="TeXAtom" transform="translate(783,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(345,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mo" transform="translate(7973.2,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(8251.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(8695.9,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(9140.6,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(9585.2,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(10029.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(10474.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(10835.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="msub" transform="translate(11113.6,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="TeXAtom" transform="translate(783,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><g data-mml-node="mo" transform="translate(12558.9,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(12836.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>表示元组t在属性列A上诸分量的集合</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.697ex" height="2.188ex" role="img" focusable="false" viewBox="0 -967 750 967"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(514,277) translate(-250 0)"><path data-c="AF" d="M69 544V590H430V544H69Z"></path></g></g></g></g></g></svg></mjx-container></span>则表示<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="16.512ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 7298.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="msub" transform="translate(500,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mn" transform="translate(783,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1686.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(2131.2,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mn" transform="translate(783,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(3317.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(3762.4,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(4207.1,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(4651.8,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(5096.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(5541.1,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(783,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(6798.4,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container></span>种去掉<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="18.042ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 7974.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="msub" transform="translate(500,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="TeXAtom" transform="translate(783,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(345,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1930.5,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(2375.2,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="TeXAtom" transform="translate(783,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(345,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mo" transform="translate(3805.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(4250.3,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(4695,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(5139.7,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(5584.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(6029,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="TeXAtom" transform="translate(783,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><g data-mml-node="mo" transform="translate(7474.4,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container></span>后剩余的属性组</p></li></ul></li></ul><h3 id="使用的记号2">使用的记号2</h3><ul><li><p>R为n目关系，S为m目关系。</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="6.209ex" height="1.902ex" role="img" focusable="false" viewBox="0 -683 2744.5 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(394,-150) scale(0.707)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1040.7,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1985.5,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g></g></g></svg></mjx-container></span>，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.355ex;" xmlns="http://www.w3.org/2000/svg" width="5.98ex" height="1.95ex" role="img" focusable="false" viewBox="0 -705 2643.2 862.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(394,-150) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g><g data-mml-node="mo" transform="translate(1053.4,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1998.2,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g></g></g></svg></mjx-container></span>， <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="5.268ex" height="1.799ex" role="img" focusable="false" viewBox="0 -637.4 2328.6 795.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(394,-150) scale(0.707)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="TeXAtom" transform="translate(795.9,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2322" d="M55 141Q55 149 72 174T125 234T209 303T329 360T478 388H526Q649 383 765 319Q814 291 858 250T923 179T944 141Q944 133 938 128T924 122Q914 124 912 125T902 139Q766 328 500 328Q415 328 342 308T225 258T150 199T102 148T84 124Q81 122 75 122Q55 127 55 141Z"></path></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1553,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(394,-150) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g></g></g></svg></mjx-container></span>称为元组的连接。</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="5.268ex" height="1.799ex" role="img" focusable="false" viewBox="0 -637.4 2328.6 795.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(394,-150) scale(0.707)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="TeXAtom" transform="translate(795.9,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2322" d="M55 141Q55 149 72 174T125 234T209 303T329 360T478 388H526Q649 383 765 319Q814 291 858 250T923 179T944 141Q944 133 938 128T924 122Q914 124 912 125T902 139Q766 328 500 328Q415 328 342 308T225 258T150 199T102 148T84 124Q81 122 75 122Q55 127 55 141Z"></path></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1553,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(394,-150) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g></g></g></svg></mjx-container></span>是一个n +m列的元组，前n个分量为R中的一个n元组，后m个分量为S中的一个m元组。</p></li><li><p>给定一个关系R（X，Z），X和Z为属性组。</p><ul><li>当<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.313ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3674.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(361,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(639,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(1491,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2046.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3102.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container></span>时，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container></span>在R中的象集（Images Set）为：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="26.635ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 11772.8 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mi" transform="translate(716,-150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><g data-mml-node="mo" transform="translate(1448.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2504,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mi" transform="translate(3004,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(3365,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(3643,0)"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mo" transform="translate(4366,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(4644,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(4922,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(5560.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(6505.6,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(7264.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(7709.2,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(8070.2,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(8348.2,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(9200.2,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(9756,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(10700.8,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(11272.8,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container></span></li><li>它表示R中属性组X上值为x的诸元组在Z上分量的集合</li></ul></li></ul><p><img src="https://s2.loli.net/2022/05/03/XBHLAkDO7nQ8iWG.png"></p><h3 id="并-union">并 Union</h3><ul><li><p>R 和 S</p><ul><li>具有相同的目n（即两个关系都有n个属性）</li><li>相应的属性取自同一个域</li></ul></li><li><p>R <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="1.403ex" role="img" focusable="false" viewBox="0 -598 667 620"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="222A" d="M591 598H592Q604 598 611 583V376Q611 345 611 296Q610 162 606 148Q605 146 605 145Q586 68 507 23T333 -22Q268 -22 209 -1T106 66T56 173Q55 180 55 384L56 585Q66 598 75 598Q85 598 95 585V378L96 172L98 162Q112 95 181 57T332 18Q415 18 487 58T570 175Q571 180 571 383V583Q579 598 591 598Z"></path></g></g></g></svg></mjx-container></span> S</p><ul><li><p>仍为n目关系，由属于R或属于S的元组组成</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.564ex;" xmlns="http://www.w3.org/2000/svg" width="23.01ex" height="2.26ex" role="img" focusable="false" viewBox="0 -749.5 10170.6 999"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(981.2,0)"><path data-c="222A" d="M591 598H592Q604 598 611 583V376Q611 345 611 296Q610 162 606 148Q605 146 605 145Q586 68 507 23T333 -22Q268 -22 209 -1T106 66T56 173Q55 180 55 384L56 585Q66 598 75 598Q85 598 95 585V378L96 172L98 162Q112 95 181 57T332 18Q415 18 487 58T570 175Q571 180 571 383V583Q579 598 591 598Z"></path></g><g data-mml-node="mi" transform="translate(1870.4,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(2793.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3849,0)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(361,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(639,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1277.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(2222.6,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(3203.8,0)"><path data-c="2228" d="M55 580Q56 587 61 592T75 598Q86 598 96 580L333 48L570 580Q579 596 586 597Q588 598 591 598Q609 598 611 580Q611 574 546 426T415 132T348 -15Q343 -22 333 -22T318 -15Q317 -14 252 131T121 425T55 580Z"></path></g><g data-mml-node="mi" transform="translate(4093,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(4731.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(5676.6,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g></g></g></g></svg></mjx-container></span></p></li></ul></li></ul><h3 id="差-difference">差 Difference</h3><ul><li><p>R 和 S</p><ul><li>具有相同的目n（即两个关系都有n个属性）</li><li>相应的属性取自同一个域</li></ul></li><li><p>R - S</p><ul><li><p>仍为n目关系，由属于R而不属于S的所有元组组成</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="25.525ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 11282.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(981.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1981.4,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(2904.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3960,0)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(361,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(639,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1277.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(2222.6,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mtext" fill="red" stroke="red" transform="translate(2981.6,0)"><path data-c="5C" d="M56 731Q56 740 62 745T75 750Q85 750 92 740Q96 733 270 255T444 -231Q444 -239 438 -244T424 -250Q414 -250 407 -240Q404 -236 230 242T56 731Z"></path><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(500,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(1000,0)"></path><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1556,0)"></path></g><g data-mml-node="mi" transform="translate(5093.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(5732.3,0)"><path data-c="2209" d="M196 25Q84 109 84 250Q84 372 166 450T360 539Q361 539 375 539T413 540T460 540L547 707Q550 716 563 716Q570 716 575 712T581 703T583 696T505 540H568Q583 532 583 520Q583 511 570 501L484 500L366 270H568Q583 262 583 250T568 230H346L247 38Q284 16 328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 447 -40T419 -41Q304 -41 228 3Q117 -211 115 -212Q111 -215 104 -215T92 -212T86 -204T84 -197Q84 -190 89 -183L196 25ZM214 61L301 230H124V228Q124 196 147 147T214 61ZM321 270L440 500Q353 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H321Z"></path></g><g data-mml-node="mi" transform="translate(6677.1,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g></g></g></g></svg></mjx-container></span></p></li></ul></li></ul><h3 id="交-intersection">交 Intersection</h3><ul><li><p>R 和 S</p><ul><li>具有相同的目n（即两个关系都有n个属性）</li><li>相应的属性取自同一个域</li></ul></li><li><p>R <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="1.403ex" role="img" focusable="false" viewBox="0 -598 667 620"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2229" d="M88 -21T75 -21T55 -7V200Q55 231 55 280Q56 414 60 428Q61 430 61 431Q77 500 152 549T332 598Q443 598 522 544T610 405Q611 399 611 194V-7Q604 -22 591 -22Q582 -22 572 -9L570 405Q563 433 556 449T529 485Q498 519 445 538T334 558Q251 558 179 518T96 401Q95 396 95 193V-7Q88 -21 75 -21Z"></path></g></g></g></svg></mjx-container></span> S</p><ul><li><p>仍为n目关系，由既属于R又属于S的元组组成</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="20.893ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 9234.9 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(981.2,0)"><path data-c="2229" d="M88 -21T75 -21T55 -7V200Q55 231 55 280Q56 414 60 428Q61 430 61 431Q77 500 152 549T332 598Q443 598 522 544T610 405Q611 399 611 194V-7Q604 -22 591 -22Q582 -22 572 -9L570 405Q563 433 556 449T529 485Q498 519 445 538T334 558Q251 558 179 518T96 401Q95 396 95 193V-7Q88 -21 75 -21Z"></path></g><g data-mml-node="mi" transform="translate(1870.4,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(2793.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3849,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(4830.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(5830.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(6219.4,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(7200.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(8200.9,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(8845.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p></li></ul></li></ul><h3 id="笛卡尔积-1">笛卡尔积</h3><ul><li><p>严格地讲应该是广义的笛卡尔积（Extended CartesianProduct）</p></li><li><p>R: n目关系，k1个元组 S: m目关系，k2个元组</p></li><li><p>R×S</p><ul><li><p>列：（n+m）列元组的集合</p><ul><li>元组的前n列是关系R的一个元组</li><li>后m列是关系S的一个元组</li></ul></li><li><p>行：k1×k2个元组</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="31.286ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 13828.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mi" transform="translate(759,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(1537,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(2459.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(3515.6,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mi" transform="translate(4015.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="msup" transform="translate(4376.6,0)"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(484,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2322" d="M55 141Q55 149 72 174T125 234T209 303T329 360T478 388H526Q649 383 765 319Q814 291 858 250T923 179T944 141Q944 133 938 128T924 122Q914 124 912 125T902 139Q766 328 500 328Q415 328 342 308T225 258T150 199T102 148T84 124Q81 122 75 122Q55 127 55 141Z"></path></g></g></g><g data-mml-node="mi" transform="translate(5617.7,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(5978.7,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(6447.7,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(6725.7,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(7086.7,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(7815.4,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(8760.2,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(9741.4,0)"><path data-c="2227" d="M318 591Q325 598 333 598Q344 598 348 591Q349 590 414 445T545 151T611 -4Q609 -22 591 -22Q588 -22 586 -21T581 -20T577 -17T575 -13T572 -9T570 -4L333 528L96 -4Q87 -20 80 -21Q78 -22 75 -22Q57 -22 55 -4Q55 2 120 150T251 444T318 591Z"></path></g><g data-mml-node="mi" transform="translate(10630.7,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(10991.7,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(11738.4,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(12683.2,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(13328.2,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container></span></p></li></ul></li></ul><h3 id="基础关系">基础关系</h3><ul><li><p>选择（Selection）又称为限制（Restriction）</p></li><li><p>选择运算符的含义</p><ul><li><p>在关系R中选择满足给定条件的诸元组</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="33.765ex" height="2.283ex" role="img" focusable="false" viewBox="0 -759 14924.2 1009"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></g><g data-mml-node="TeXAtom" transform="translate(604,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1183.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1572.6,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(2331.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2998.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(4054.2,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mi" transform="translate(4554.2,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(4915.2,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(5193.2,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(5832,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(6776.7,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mtext" fill="red" stroke="red" transform="translate(7535.7,0)"><path data-c="5C" d="M56 731Q56 740 62 745T75 750Q85 750 92 740Q96 733 270 255T444 -231Q444 -239 438 -244T424 -250Q414 -250 407 -240Q404 -236 230 242T56 731Z"></path><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(500,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(1000,0)"></path><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1556,0)"></path></g><g data-mml-node="mi" transform="translate(9647.7,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mo" transform="translate(10396.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(10785.7,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(11146.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="msup" transform="translate(11813.5,0)"><g data-mml-node="mo"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(811,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="msup" transform="translate(13146.7,0)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">真</text></g><g data-mml-node="mo" transform="translate(1033,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(14424.2,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container></span></p></li><li><p>F：选择条件，是一个逻辑表达式，取值为“真”或“假”</p><ul><li>基本形式为：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="6.224ex" height="1.934ex" role="img" focusable="false" viewBox="0 -705 2751.1 855"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="TeXAtom" transform="translate(861,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mi" transform="translate(1264.6,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="msub" transform="translate(1733.6,0)"><g data-mml-node="mi"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="TeXAtom" transform="translate(614,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container></span>，θ表示比较运算符，它可以是＞，≥，＜，≤，＝或&lt;&gt;</li><li>在基本的选择条件上可以进一步进行逻辑运算（与，或，非）</li></ul></li></ul></li></ul><h3 id="投影-projection">投影 Projection</h3><ul><li><p>从R中选择出若干属性列组成新的关系</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="21.542ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 9521.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="3A0" d="M128 619Q121 626 117 628T101 631T58 634H25V680H724V634H691Q651 633 640 631T622 619V61Q628 51 639 49T691 46H724V0H713Q692 3 569 3Q434 3 425 0H414V46H447Q489 47 498 49T517 61V634H232V348L233 61Q239 51 250 49T302 46H335V0H324Q303 3 180 3Q45 3 36 0H25V46H58Q100 47 109 49T128 61V619Z"></path></g><g data-mml-node="mi" transform="translate(783,-152.7) scale(0.707)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g><g data-mml-node="mo" transform="translate(1363.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1752.3,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(2511.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3178.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(4233.9,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mi" transform="translate(4733.9,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(5094.9,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(5372.9,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(6122.9,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(6400.9,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(6678.9,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(7317.7,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(8262.4,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(9021.4,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container></span></p><ul><li>A : R 中的属性列</li></ul></li><li><p>投影操作主要是从列的角度进行运算</p><p><img src="https://s2.loli.net/2022/05/03/ay9kvt1mZrOVPqH.png"></p></li><li><p>投影之后不仅取消了原关系中的某些列，而且还可能取消某些元组（避免重复行）</p></li></ul><h3 id="连接-join">连接 Join</h3><ul><li><p>连接（Join）也称为θ连接</p></li><li><p>连接运算的含义</p><ul><li><p>从两个关系的笛卡尔积中选取属性间满足一定条件的元组</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="51.596ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 22805.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(1036.8,0)"><path data-c="22C8" d="M833 50T833 250T832 450T659 351T487 250T658 150T832 50Q833 50 833 250ZM873 10Q866 -5 854 -5Q851 -5 845 -3L449 226L260 115Q51 -5 43 -5Q39 -5 35 -1T28 7L26 11V489Q33 505 43 505Q51 505 260 385L449 274L845 503Q851 505 853 505Q866 505 873 490V10ZM412 250L67 450Q66 450 66 250T67 50Q69 51 240 150T412 250Z"></path></g><g data-mml-node="mi" transform="translate(2214.6,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(3137.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(4193.1,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="msub" transform="translate(4693.1,0)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(394,-150) scale(0.707)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(5733.8,0)"><path data-c="2322" d="M55 141Q55 149 72 174T125 234T209 303T329 360T478 388H526Q649 383 765 319Q814 291 858 250T923 179T944 141Q944 133 938 128T924 122Q914 124 912 125T902 139Q766 328 500 328Q415 328 342 308T225 258T150 199T102 148T84 124Q81 122 75 122Q55 127 55 141Z"></path></g><g data-mml-node="msub" transform="translate(7011.6,0)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(394,-150) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g><g data-mml-node="mo" transform="translate(7787.2,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="msub" transform="translate(8065.2,0)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(394,-150) scale(0.707)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(9105.9,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(10050.7,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mtext" fill="red" stroke="red" transform="translate(10809.7,0)"><path data-c="5C" d="M56 731Q56 740 62 745T75 750Q85 750 92 740Q96 733 270 255T444 -231Q444 -239 438 -244T424 -250Q414 -250 407 -240Q404 -236 230 242T56 731Z"></path><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(500,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(1000,0)"></path><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1556,0)"></path></g><g data-mml-node="msub" transform="translate(12921.7,0)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(394,-150) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g><g data-mml-node="mo" transform="translate(13975.1,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(14919.9,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mtext" fill="red" stroke="red" transform="translate(15564.9,0)"><path data-c="5C" d="M56 731Q56 740 62 745T75 750Q85 750 92 740Q96 733 270 255T444 -231Q444 -239 438 -244T424 -250Q414 -250 407 -240Q404 -236 230 242T56 731Z"></path><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(500,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(1000,0)"></path><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1556,0)"></path></g><g data-mml-node="msub" transform="translate(17676.9,0)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(394,-150) scale(0.707)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(18439.8,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(18717.8,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(19467.8,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mi" transform="translate(19745.8,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="msub" transform="translate(20214.8,0)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(394,-150) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g><g data-mml-node="mo" transform="translate(20990.4,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(21268.4,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(22027.4,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(22305.4,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container></span></p><p>A和B：分别为R和S上度数相等且可比的属性组</p><p>θ：比较运算符</p></li></ul></li><li><p>连接运算从R和S的广义笛卡尔积R×S中选取R关系在A属性组上的值与S关系在B属性组上的值满足比较关系θ的元组</p></li><li><p>等值连接 （equijoin）</p></li><li><p>自然连接（Natural join）</p></li><li><p>一般的连接操作是从行的角度进行运算。</p></li><li><p>自然连接还需要取消重复列，所以是同时从行和列的角度进行运算</p></li></ul><h3 id="外连接">外连接</h3><ul><li>悬浮元组 Dangling tuple<ul><li>两个关系R和S在做自然连接时，关系R中某些元组有可能在S中不存在公共属性上值相等的元组，从而造成R中这些元组在操作时被舍弃了，这些被舍弃的元组称为悬浮元组</li></ul></li><li>外连接 Outer Join<ul><li>如果把悬浮元组也保存在结果关系中，而在其他属性上填空值(Null)，就叫做外连接</li><li>左外连接</li><li>右外连接</li></ul></li></ul><h3 id="除运算">除运算</h3><ul><li><p>给定关系R (X，Y) 和S (Y，Z)，其中X，Y，Z为属性组。</p></li><li><p>R中的Y与S中的Y可以有不同的属性名，但必须出自相同的域集</p></li><li><p>R与S的除运算得到一个新的关系P(X)，P是R中满足下列条件的元组在 X属性列上的投影：</p><ul><li><p>元组在X上分量值x的象集Yx包含S在Y上投影的集合，记作：</p><p><img src="https://s2.loli.net/2022/05/03/m4QjNhWY1B9xXr3.png"></p></li></ul></li></ul></li></ul></li></ul></li></ul><h2 id="综合举例">综合举例</h2><p><img src="https://s2.loli.net/2022/05/03/LSaUXQlYdqK9cs6.png"></p><p><img src="https://s2.loli.net/2022/05/03/8SlVLfHQWqrIydN.png"></p><p><img src="https://s2.loli.net/2022/05/03/hoNkwqHsu1tBOfI.png"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> 数据管理基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据管理基础 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据管理基础 ch00-07</title>
      <link href="/2022/04/03/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80-ch00-07/"/>
      <url>/2022/04/03/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80-ch00-07/</url>
      
        <content type="html"><![CDATA[<h1 id="ch-00-课程概要">ch 00 课程概要</h1><h2 id="自我介绍">自我介绍</h2><p><img src="https://s2.loli.net/2022/05/03/5SEitVCU7LWyQqs.png"></p><h2 id="教材">教材</h2><p><img src="https://s2.loli.net/2022/05/03/IHFcONsYEQSp5U1.png"></p><h2 id="课程概要">课程概要</h2><p><strong>课程概要 1</strong></p><ul><li>课程主页<ul><li>http://219.219.120.72/course/view.php?id=461</li></ul></li><li>必备知识体系<ul><li>数据结构</li><li>面向对象</li></ul></li><li>后继课程及应用<ul><li>商务智能</li><li>大数据及云计算</li><li>毕业设计</li></ul></li></ul><p><strong>课程概要 2</strong></p><ul><li>课程组织<ul><li>堂讲</li><li>遵循教材的课后学习</li><li>作业</li><li>习题课（课程主页论坛、邮件、不定期答疑）</li></ul></li><li>评分<ul><li>作业占课程成绩的30％~40%</li><li>考试占课程成绩的60％~70%</li><li>考勤对课程成绩进行正负加成</li></ul></li></ul><h1 id="ch-01-计算数据与数据管理">ch 01 计算、数据与数据管理</h1><h2 id="计算">计算</h2><ul><li>什么是计算？<ul><li>计算=算法+数据</li></ul></li><li>算法 vs. 数据<ul><li>以二叉树为例，在下列数据结构中完成二叉树遍历（深度/广度）</li></ul></li></ul><p><img src="https://s2.loli.net/2022/05/03/oEh3kjqaZcQGBw5.png"></p><h2 id="数据管理-人工管理">数据管理-人工管理</h2><p><strong>数据管理-人工管理 1</strong></p><p><img src="https://s2.loli.net/2022/05/03/H4IU2nwkTCxaEW6.png"></p><p><strong>数据管理-人工管理 2</strong></p><ul><li>特点<ul><li>数据的管理者：用户（程序员），数据不保存</li><li>数据面向的对象：某一应用程序<br></li><li>数据的共享程度：无共享、冗余度极大</li><li>数据的独立性：不独立，完全依赖于程序</li><li>数据的结构化：无结构</li><li>数据控制能力：应用程序自己控制</li></ul></li></ul><h2 id="我们已经做了">我们已经做了…</h2><ul><li>讨论计算中的常见数据模型<ul><li>数据结构（数组，链表，堆，栈，树，图……）</li><li>基于这些数据结构的基本操作</li><li>用于“低层级”描述计算</li></ul></li><li>描述现实世界<ul><li>对象（状态+改变状态的操作）</li><li>用于“高层级”描述计算</li></ul></li><li>能够胜任“挥发型”计算<ul><li>“持久性”计算？</li></ul></li></ul><h2 id="数据管理-文件系统">数据管理-文件系统</h2><p><strong>数据管理-文件系统 1</strong></p><p><img src="https://s2.loli.net/2022/05/03/DuZwflL18bVHNcy.png"></p><p><strong>数据管理-文件系统 2</strong></p><ul><li>特点<ul><li>数据的管理者：文件系统，数据可长期保存</li><li>数据面向的对象：某一应用<br></li><li>数据的共享程度：共享性差、冗余度大</li><li>数据的结构化：记录内有结构，整体无结构</li><li>数据的独立性：独立性差</li><li>数据控制能力：应用程序自己控制</li></ul></li></ul><p><strong>数据管理-文件系统 3</strong></p><ul><li>举例：<ul><li>Save/ Load<ul><li>文件/云/网络流</li><li>字节流/文本流</li></ul></li><li>对象持久化<ul><li>Java中的序列化/反序列化</li></ul></li></ul></li><li>能够胜任“持久性”计算<ul><li>“共享性”计算？</li></ul></li></ul><h2 id="共享数据">共享数据</h2><p><strong>共享数据 1</strong></p><ul><li>基于二进制在多个应用之间共享数据</li><li>基于文本在多个应用之间共享数据（K/V, JSON，XML）</li></ul><p><img src="https://s2.loli.net/2022/05/03/xJyVitjGnIA2s6e.png"></p><p><img src="https://s2.loli.net/2022/05/03/eSuCsxhPtvTqYKW.png"></p><p><strong>共享数据 2</strong></p><ul><li>在多个应用使用数据的前提下：<ul><li>如何确保数据结构和存储机制对于所有应用来说都是可以接受的</li><li>如何确保数据安全性，完整性</li><li>如何解决数据的并发<ul><li>i=1；i++；i=2</li><li>i=1；i=2；i++</li></ul></li><li>如何在动态条件下解决上述问题</li></ul></li><li>上述问题归结于：<ul><li>谁负责定义和管理这些数据？（应用？哪一个？）</li></ul></li></ul><h2 id="数据管理-数据库系统">数据管理-数据库系统</h2><p><img src="https://s2.loli.net/2022/05/03/4rX5EqHi7mPfa1O.png"></p><h1 id="ch-02-几个基本概念">ch 02 几个基本概念</h1><h2 id="数据">数据</h2><ul><li>数据（Data）是数据库中存储的基本对象</li><li>数据的定义<ul><li>描述事物的符号记录</li></ul></li><li>数据的种类<ul><li>数字、文字、图形、图像、音频、视频、学生的档案记录等</li></ul></li></ul><h2 id="数据举例">数据举例</h2><p><strong>数据举例 1</strong></p><p><img src="https://s2.loli.net/2022/05/03/yckJEnwYa59RDgP.png"></p><p><strong>数据举例 2</strong></p><p><img src="https://s2.loli.net/2022/05/03/asp4NuM13nFYRH2.png"></p><h2 id="数据库">数据库</h2><ul><li>数据库的定义<ul><li>数据库（Database，简称DB）是长期储存在计算机内、有组织的、可共享的大量数据的集合</li></ul></li><li>数据库的基本特征<ul><li>数据按一定的数据模型组织、描述和储存</li><li>可为各种用户共享</li><li>冗余度较小</li><li>数据独立性较高</li><li>易扩展</li></ul></li></ul><h2 id="数据库管理系统">数据库管理系统</h2><ul><li>数据库管理系统（Database Management System，简称DBMS）<ul><li>位于用户与操作系统之间的一层数据管理软件</li><li>是基础软件，是一个大型复杂的软件系统</li></ul></li><li>数据库管理系统的用途<ul><li>科学地组织和存储数据、高效地获取和维护数据</li></ul></li></ul><p><img src="https://s2.loli.net/2022/05/03/rseCfEHDbgtxQLO.png"></p><h2 id="数据库管理系统的主要功能">数据库管理系统的主要功能</h2><p><strong>数据库管理系统的主要功能 1</strong></p><ul><li>数据定义功能<ul><li>提供数据定义语言（DDL）</li><li>定义数据库中的数据对象</li></ul></li><li>数据组织、存储和管理<ul><li>分类组织、存储和管理各种数据</li><li>确定组织数据的文件结构和存取方式</li><li>实现数据之间的联系</li><li>提供多种存取方法提高存取效率</li></ul></li></ul><p><strong>数据库管理系统的主要功能 2</strong></p><ul><li>数据操纵功能<ul><li>提供数据操纵语言（DML）</li><li>实现对数据库的基本操作 （查询、插入、删除和修改）</li></ul></li><li>数据库的事务管理和运行管理<ul><li>数据库在建立、运行和维护时由数据库管理系统统一管理和控制</li><li>保证数据的安全性、完整性、多用户对数据的并发使用</li><li>发生故障后的系统恢复</li></ul></li></ul><p><strong>数据库管理系统的主要功能 3</strong></p><ul><li>数据库的建立和维护功能<ul><li>数据库初始数据的装载和转换</li><li>数据库转储、恢复功能</li><li>数据库的重组织</li><li>性能监视、分析等</li></ul></li><li>其它功能<ul><li>数据库管理系统与网络中其它软件系统的通信</li><li>数据库管理系统系统之间的数据转换</li><li>异构数据库之间的互访和互操作</li></ul></li></ul><h2 id="数据库系统">数据库系统</h2><ul><li>数据库系统（DatabaseSystem，简称DBS），在计算机系统中引入数据库后的系统构成</li><li>数据库系统的构成<ul><li>数据库</li><li>数据库管理系统（及其应用开发工具）</li><li>应用程序</li><li>数据库管理员（DBA）</li></ul></li></ul><p><img src="https://s2.loli.net/2022/05/03/fGuqSyHUw34sm6T.png"></p><h2 id="数据库的特点-数据结构化">数据库的特点-数据结构化</h2><ul><li>整体结构化<ul><li>不再仅仅针对某一个应用，而是面向全组织</li><li>不仅数据内部结构化，整体是结构化的，数据之间具有联系</li><li>数据记录可以变长</li><li>数据的最小存取单位是数据项</li></ul></li><li>数据的用数据模型描述，无需应用程序定义</li></ul><h2 id="数据库的特点--数据的共享性高冗余度低且易扩充">数据库的特点-数据的共享性高，冗余度低且易扩充</h2><ul><li>数据面向整个系统，可以被多个用户、多个应用共享使用。</li><li>数据共享的好处<ul><li>减少数据冗余，节约存储空间</li><li>避免数据之间的不相容性与不一致性</li><li>使系统易于扩充</li></ul></li></ul><h2 id="数据库的特点-数据独立性高">数据库的特点-数据独立性高</h2><ul><li>物理独立性<ul><li>指用户的应用程序与数据库中数据的物理存储是相互独立的。当数据的物理存储改变了，应用程序不用改变。</li></ul></li><li>逻辑独立性<ul><li>指用户的应用程序与数据库的逻辑结构是相互独立的。数据的逻辑结构改变了，应用程序不用改变。</li></ul></li><li>数据独立性由数据库管理系统的二级映像功能来保证。</li></ul><h2 id="数据库的特点--数据由数据管理系统统一管理和控制">数据库的特点-数据由数据管理系统统一管理和控制</h2><ul><li>数据库管理系统提供的数据控制功能<ul><li>数据的安全性（Security）保护保护数据以防止不合法的使用造成的数据的泄密和破坏。</li><li>数据的完整性（Integrity）检查保证数据的正确性、有效性和相容性。</li><li>并发（Concurrency）控制对多用户的并发操作加以控制和协调，防止相互干扰而得到错误的结果。</li><li>数据库恢复（Recovery）将数据库从错误状态恢复到某一已知的正确状态。</li></ul></li></ul><h1 id="ch-03-数据模型">ch 03 数据模型</h1><h2 id="数据模型">数据模型</h2><ul><li>数据模型是对现实世界数据特征的抽象，用以抽象、表示和处理现实世界中的数据和信息</li><li>数据模型应满足三方面要求<ul><li>能比较真实地模拟现实世界</li><li>容易为人所理解</li><li>便于在计算机上实现</li></ul></li><li>数据模型是数据库系统的核心和基础</li></ul><h2 id="概念逻辑物理模型">概念/逻辑/物理模型</h2><ul><li>概念模型，也称信息模型<ul><li>按用户的观点来对数据和信息建模，用于数据库设计</li></ul></li><li>逻辑模型<ul><li>按计算机系统的观点对数据建模，用于DBMS实现</li><li>主要包括网状模型、层次模型、关系模型、面向对象数据模型、对象关系数据模型、半结构化数据模型等。</li></ul></li><li>物理模型<ul><li>是对数据最底层的抽象，描述数据在系统内部的表示方式和存取方法。</li></ul></li></ul><h2 id="客观对象的抽象过程---两步抽象">客观对象的抽象过程---两步抽象</h2><ul><li>现实世界中的客观对象抽象为概念模型<ul><li>将现实世界抽象为信息世界</li></ul></li><li>把概念模型转换为特定DBMS支持的数据模型<ul><li>将信息世界转换为机器世界</li></ul></li></ul><p><img src="https://s2.loli.net/2022/05/03/R3uc4Zb8tVAHjSQ.png"></p><h2 id="数据模型的组成要素-数据结构">数据模型的组成要素-数据结构</h2><ul><li>数据模型的数据结构<ul><li>描述数据库的组成对象，以及对象之间的联系</li></ul></li><li>描述的内容<ul><li>与对象的类型、内容、性质有关</li><li>与数据之间联系有关</li></ul></li><li>数据结构是对系统静态特性的描述</li></ul><h2 id="数据模型的组成要素-数据操作">数据模型的组成要素-数据操作</h2><ul><li>数据操作<ul><li>对数据库中各种对象（型）的实例（值）允许执行的操作的集合，包括操作及有关的操作规则</li></ul></li><li>数据操作的类型<ul><li>查询</li><li>更新（包括插入、删除、修改）</li></ul></li><li>数据模型对操作的定义<ul><li>操作的确切含义、操作符号、操作规则（如优先级）</li><li>实现操作的语言</li></ul></li><li>数据操作是对系统动态特性的描述</li></ul><h2 id="数据模型的组成要素-数据的完整性约束条件">数据模型的组成要素-数据的完整性约束条件</h2><ul><li>数据的完整性约束条件，一组完整性规则的集合<ul><li>完整性规则：给定的数据模型中数据及其联系所具有的制约和依存规则</li><li>用以限定符合数据模型的数据库状态以及状态的变化，以保证数据的正确、有效和相容</li></ul></li><li>数据模型对完整性约束条件的定义<ul><li>反映和规定必须遵守的基本的通用的完整性约束条件。</li><li>提供定义完整性约束条件的机制，以反映具体应用所涉及的数据必须遵守的特定的语义约束条件。</li></ul></li></ul><h1 id="ch-04-概念模型">ch 04 概念模型</h1><h2 id="概念模型">概念模型</h2><ul><li>概念模型的用途<ul><li>概念模型用于信息世界的建模</li><li>是现实世界到机器世界的一个中间层次</li><li>是数据库设计的有力工具</li><li>数据库设计人员和用户之间进行交流的语言</li></ul></li><li>对概念模型的基本要求<ul><li>较强的语义表达能力</li><li>简单、清晰、易于用户理解</li></ul></li></ul><h2 id="信息世界中的基本概念">信息世界中的基本概念</h2><p><strong>信息世界中的基本概念 1</strong></p><ul><li>实体（Entity）<ul><li>客观存在并可相互区别的事物称为实体。</li><li>可以是具体的人、事、物或抽象的概念。</li></ul></li><li>属性（Attribute）<ul><li>实体所具有的某一特性称为属性。</li><li>一个实体可以由若干个属性来刻画。<br></li></ul></li><li>码（Key）<ul><li>唯一标识实体的属性集称为码</li></ul></li></ul><h2 id="信息世界中的基本概念-2">信息世界中的基本概念 2</h2><ul><li>实体型（Entity Type）<ul><li>用实体名及其属性名集合来抽象和刻画同类实体称为实体型</li></ul></li><li>实体集（Entity Set）<ul><li>同一类型实体的集合称为实体集</li></ul></li><li>联系（Relationship）<ul><li>现实世界中事物内部以及事物之间的联系在信息世界中反映为实体（型）内部的联系和实体（型）之间的联系。</li></ul></li></ul><h2 id="实体之间的联系">实体之间的联系</h2><ul><li>实体之间的联系通常是指不同实体集之间的联系</li><li>实体之间的联系有一对一、一对多和多对多等多种类型</li></ul><p><img src="https://s2.loli.net/2022/05/03/hD1cbiypG5u2QJI.png"></p><h2 id="实体内部的联系">实体内部的联系</h2><ul><li>实体内部的联系通常是指组成实体的各属性之间的联系</li></ul><p><img src="https://s2.loli.net/2022/05/03/fsxi7hMpuUTwHvr.png" style="zoom:33%;"></p><h2 id="实体-联系方法">实体-联系方法</h2><p><img src="https://s2.loli.net/2022/05/03/gKZlY5zVq9NnBrw.png"></p><h2 id="一些例子">一些例子</h2><p><img src="https://s2.loli.net/2022/05/03/d5rIwfU8FKpZCo4.png"></p><p><img src="https://s2.loli.net/2022/05/03/gGcDE8jfmdol3KR.png"></p><p><img src="https://s2.loli.net/2022/05/03/dJS4gnPQBmokRwc.png"></p><p><img src="https://s2.loli.net/2022/05/03/R1KjfaC3UsxA6PB.png"></p><h2 id="ch-05-逻辑模型">ch 05 逻辑模型</h2><h2 id="逻辑模型">逻辑模型</h2><ul><li>如何“多快好省”地将信息世界转换为机器世界？<ul><li>基本问题，如何在机器世界中表达“低层”数据结构和“高层”数据结构？</li></ul></li><li>方案1：尽量独立于应用层，采用“中立”的方式表达概念模型</li><li>方案2：在应用层中，使用特定数据结构，并在逻辑模型中高效支持这一数据结构</li><li>方案*：通用数据结构采用方案1，关键性数据结构采用方案2</li></ul><h2 id="常用数据模型">常用数据模型</h2><ul><li>格式化模型<ul><li>层次模型（Hierarchical Model）</li><li>网状模型（Network Model）</li></ul></li><li>关系模型（Relational Model)）</li><li>对象模型<ul><li>面向对象数据模型（Object Oriented Data Model）</li><li>对象关系数据模型（Object Relational Data Model）</li></ul></li></ul><h2 id="关系模型的数据结构">关系模型的数据结构</h2><p><strong>关系模型的数据结构 1</strong></p><ul><li>在用户观点下，关系模型中数据的逻辑结构是一张二维表，它由行和列组成。</li></ul><p><img src="https://s2.loli.net/2022/05/03/7dQXiCKjBSuk1nY.png"></p><p><strong>关系模型的数据结构 2</strong></p><p><img src="https://s2.loli.net/2022/05/03/ZkfdOwItbjFpJVR.png"></p><ul><li>关系必须是规范化的，满足一定的规范条件<ul><li>最基本的规范条件：关系的每一个分量必须是一个不可分的数据项,不允许表中还有表</li></ul></li></ul><p><img src="https://s2.loli.net/2022/05/03/BAcmRXlCKfrexSs.png"></p><h2 id="关系模型的操作与完整性约束">关系模型的操作与完整性约束</h2><ul><li>数据操作（查询、插入、删除、更新）是集合操作，操作对象和操作结果都是关系</li><li>存取路径对用户隐蔽，用户只要指出“干什么”，不必详细说明“怎么干”</li><li>关系的完整性约束条件<ul><li>实体完整性</li><li>参照完整性</li><li>用户定义的完整性</li></ul></li></ul><h2 id="关系模型的优缺点">关系模型的优缺点</h2><p><img src="https://s2.loli.net/2022/05/03/HRYjpmDJXhfW7Ms.png"></p><h2 id="nosql">NoSQL</h2><p><img src="https://s2.loli.net/2022/05/03/me4zfOk5bJVWPnp.png"></p><h1 id="ch-06-数据库系统的结构">ch 06 数据库系统的结构</h1><h2 id="数据库系统的结构">数据库系统的结构</h2><ul><li>从数据库应用开发人员角度看<ul><li>数据库系统通常采用三级模式结构，是数据库系统内部的系统结构</li></ul></li><li>从数据库最终用户角度看，数据库系统的结构分为:<ul><li>单用户结构</li><li>主从式结构</li><li>分布式结构</li><li>客户-服务器</li><li>浏览器-应用服务器／数据库服务器多层结构等</li></ul></li></ul><h2 id="模式和实例">模式和实例</h2><p><strong>模式和实例 1</strong></p><ul><li>模式（Schema）<ul><li>数据库逻辑结构和特征的描述</li><li>是型的描述，不涉及具体值<ul><li>反映的是数据的结构及其联系</li></ul></li><li>模式是相对稳定的</li></ul></li><li>实例（Instance）<ul><li>反映数据库某一时刻的状态<ul><li>模式的一个具体值</li></ul></li><li>同一个模式可以有很多实例</li><li>实例随数据库中的数据的更新而变动</li></ul></li></ul><p><strong>模式和实例 2</strong></p><p><img src="https://s2.loli.net/2022/05/03/qrhgEaeCuQU4FlN.png"></p><h2 id="数据库系统的三级模式结构">数据库系统的三级模式结构</h2><p><img src="https://s2.loli.net/2022/05/03/IxM2QzVTeZm4KFk.png"></p><h2 id="模式schema">模式（Schema）</h2><ul><li>模式（也称逻辑模式）<ul><li>数据库中全体数据的逻辑结构和特征的描述</li><li>所有用户的公共数据视图</li></ul></li><li><strong>一个数据库只有一个模式</strong></li><li>模式的地位：是数据库系统模式结构的中间层<ul><li>与数据的物理存储细节和硬件环境无关</li><li>与具体的应用程序、开发工具及高级程序设计语言无关</li></ul></li><li>模式的定义<ul><li>数据的逻辑结构（数据项的名字、类型、取值范围等）</li><li>数据之间的联系</li><li>数据有关的安全性、完整性要求</li></ul></li></ul><h2 id="外模式">外模式</h2><p><strong>外模式1</strong></p><ul><li>外模式（External Schema）<ul><li>也称子模式或用户模式</li><li>数据库用户（包括应用程序员和最终用户）使用的局部数据的逻辑结构和特征的描述</li><li>数据库用户的数据视图，是与某一应用有关的数据的逻辑表示</li></ul></li></ul><p><strong>外模式 2</strong></p><ul><li>外模式的地位：介于模式与应用之间<ul><li>模式与外模式的关系：一对多<ul><li>外模式通常是模式的子集</li><li>一个数据库可以有多个外模式。反映了不同的用户的应用需求、看待数据的方式、对数据保密的要求</li><li>对模式中同一数据，在外模式中的结构、类型、长度、保密级别等都可以不同</li></ul></li><li>外模式与应用的关系：一对多<ul><li>同一外模式也可以为某一用户的多个应用系统所使用</li><li>但一个应用程序只能使用一个外模式</li></ul></li></ul></li><li>外模式的用途<ul><li>保证数据库安全性的一个有力措施</li><li>每个用户只能看见和访问所对应的外模式中的数据</li></ul></li></ul><h2 id="内模式internal-schema">内模式（Internal Schema）</h2><ul><li>内模式（也称存储模式）<ul><li>是数据物理结构和存储方式的描述</li><li>是数据在数据库内部的表示方式<ul><li>记录的存储方式（例如，顺序存储，堆存储，hash存储等）</li><li>索引的组织方式</li><li>数据是否压缩存储</li><li>数据是否加密</li><li>数据存储记录结构的规定</li></ul></li></ul></li><li>一个数据库只有一个内模式</li></ul><h2 id="数据库的二级映像与数据独立性">数据库的二级映像与数据独立性</h2><ul><li>三级模式是对数据的三个抽象级别</li><li>二级映象在数据库管理系统内部实现这三个抽象层次的联系和转换<ul><li>外模式／模式映像</li><li>模式／内模式映像</li></ul></li></ul><h2 id="外模式模式映像">外模式／模式映像</h2><ul><li>模式：描述的是数据的全局逻辑结构</li><li>外模式：描述的是数据的局部逻辑结构</li><li>同一个模式可以有任意多个外模式</li><li>每一个外模式，数据库系统都有一个外模式／模式映象，定义外模式与模式之间的对应关系</li><li>映象定义通常包含在各自外模式的描述中</li><li>保证数据的逻辑独立性<ul><li>当模式改变时，数据库管理员对外模式／模式映象作相应改变，使外模式保持不变</li><li>应用程序是依据数据的外模式编写的，应用程序不必修改，保证了数据与程序的逻辑独立性，简称数据的逻辑独立性</li></ul></li></ul><h2 id="模式内模式映像">模式／内模式映像</h2><p><strong>模式／内模式映像 1</strong></p><ul><li>模式／内模式映象定义了数据全局逻辑结构与存储结构之间的对应关系。<ul><li>例如，说明逻辑记录和字段在内部是如何表示的</li></ul></li><li>数据库中模式／内模式映象是唯一的</li><li>该映象定义通常包含在模式描述中</li><li>保证数据的物理独立性<ul><li>当数据库的存储结构改变了（例如选用了另一种存储结构），数据库管理员修改模式／内模式映象，使模式保持不变。</li><li>应用程序不受影响。保证了数据与程序的物理独立性，简称数据的物理独立性。</li></ul></li></ul><h2 id="数据库的二级映像">数据库的二级映像</h2><p><strong>数据库的二级映像 1</strong></p><ul><li>数据库模式<ul><li>即全局逻辑结构是数据库的中心与关键</li><li>独立于数据库的其他层次</li><li>设计数据库模式结构时应首先确定数据库的逻辑模式</li></ul></li><li>数据库的内模式<ul><li>依赖于它的全局逻辑结构</li><li>独立于数据库的用户视图，即外模式</li><li>独立于具体的存储设备<br></li><li>将全局逻辑结构中所定义的数据结构及其联系按照一定的物理存储策略进行组织，以达到较好的时间与空间效率</li></ul></li></ul><p><strong>数据库的二级映像 2</strong></p><ul><li>数据库的外模式<ul><li>面向具体的应用程序</li><li>定义在逻辑模式之上</li><li>独立于存储模式和存储设备</li><li>当应用需求发生较大变化，相应外模式不能满足其视图要求时，该外模式就得做相应改动</li><li>设计外模式时应充分考虑到应用的扩充性</li></ul></li><li>特定的应用程序<ul><li>在外模式描述的数据结构上编制的</li><li>依赖于特定的外模式</li><li>与数据库的模式和存储结构独立</li><li>不同的应用程序有时可以共用同一个外模式</li></ul></li></ul><p><strong>数据库的二级映像 3</strong></p><ul><li>数据库的二级映像<ul><li>保证了数据库外模式的稳定性</li><li>从底层保证了应用程序的稳定性，除非应用需求本身发生变化，否则应用程序一般不需要修改</li></ul></li><li>数据与程序之间的独立性，使得数据的定义和描述可以从应用程序中分离出去</li><li>数据的存取由数据库管理系统管理<ul><li>简化了应用程序的编制</li><li>大大减少了应用程序的维护和修改</li></ul></li></ul><h1 id="ch-07-数据库系统的组成">ch 07 数据库系统的组成</h1><h2 id="数据库系统的组成-软硬件平台">数据库系统的组成-软硬件平台</h2><p><img src="https://s2.loli.net/2022/05/03/TLPjzMk95GCF2Xl.png"></p><h2 id="数据库系统的组成-人员">数据库系统的组成-人员</h2><p><img src="https://s2.loli.net/2022/05/03/eQLmPJx4lRp29NA.png"></p><h2 id="数据库管理员dba">数据库管理员（DBA）</h2><ul><li>决定数据库中的信息内容和结构</li><li>决定数据库的存储结构和存取策略</li><li>定义数据的安全性要求和完整性约束条件</li><li>监控数据库的使用和运行<ul><li>周期性转储数据库<ul><li>数据文件</li><li>日志文件</li></ul></li><li>系统故障恢复</li><li>介质故障恢复</li><li>监视审计文件</li></ul></li><li>数据库的改进和重组<ul><li>性能监控和调优</li><li>定期对数据库进行重组织，以提高系统的性能</li><li>需求增加和改变时，数据库须需要重构造</li></ul></li></ul><h2 id="系统分析员数据库设计人员">系统分析员/数据库设计人员</h2><ul><li>系统分析员<ul><li>负责应用系统的需求分析和规范说明</li><li>与用户及数据库管理员结合，确定系统的硬软件配置</li><li>参与数据库系统的概要设计</li></ul></li><li>数据库设计人员<ul><li>参加用户需求调查和系统分析</li><li>确定数据库中的数据</li><li>设计数据库各级模式</li></ul></li></ul><h2 id="应用程序员最终用户">应用程序员/最终用户</h2><p><img src="https://s2.loli.net/2022/05/03/WFotvJKcIwXErp3.png"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> 数据管理基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据管理基础 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络及其参考模型</title>
      <link href="/2022/03/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8F%8A%E5%85%B6%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B/"/>
      <url>/2022/03/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8F%8A%E5%85%B6%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="computer-network-network-reference-model">Computer Network &amp;Network Reference Model</h1><ul><li>Overview of Computer Network</li><li>OSI Reference Model (OSI参考模型)</li><li>TCP/IP Model (TCP/IP模型)</li><li>Network Topology (网络拓扑结构)</li><li>Network Devices (网络设备)</li></ul><h1 id="overview-of-computer-network">Overview of Computer Network</h1><h2 id="计算机网络-what-is-a-network">计算机网络 What is a network?</h2><ul><li><p>A network is an intricately connected system of objects, devices,or people(网络是一个错综复杂的连接系统，由物体、设备或人的复杂连接系统)</p></li><li><p>Companies created networks</p><ul><li>As companies expanded, the need for connecting networks at differentsites became very important(随着公司的扩张需要连接网络在不同地点变得非常重要)</li></ul></li></ul><h2 id="数据网络分类-data-networks-classifications">数据网络分类 DataNetworks Classifications</h2><ul><li>局域网 LAN(Local Area Networks)<ul><li>Operate locally (cover small areas) 在当地运作（覆盖小范围）。</li><li>Multi-user access 多用户访问</li><li>High speeds expected (up to Gbps/10Gbps)高速度（高达Gbps/10Gbps）。</li><li>Error rate is easily controlled 错误率容易控制</li></ul></li><li>广域网 WAN(Wide Area Networks)<ul><li>Operate over larger areas 在更大的区域内连接</li><li>Access over serial links, optical links, etc通过串行链路、光学链路等访问</li><li>Traditionally, have Lower speeds 传统上，有较低的速度</li><li>Error rate can not be easily controlled 错误率不容易控制</li></ul></li></ul><h2 id="lan-devices">LAN Devices</h2><p><img src="../../../../../../AppData/Roaming/Typora/typora-user-images/image-20220228142815482.png" alt="image-20220228142815482" style="zoom:33%;"></p><ol type="1"><li>Hub 集线器:工作在第一层<ul><li>多端口中继器(Repeater)，连接PC</li><li>重复信号</li></ul></li><li>Bridge 网桥:工作在第二层<ul><li>将局域网分段</li><li>局域网分段</li><li>进行MAC地址的计算</li></ul></li><li>Switch 交换机，多端口网桥:工作在第二层<ul><li>多端口网桥</li><li>全带宽</li><li>大规模集成电路实现:相对于网桥的优点</li></ul></li><li>Router 路由器:工作在第三层<ul><li>路径选择</li><li>分组交换</li></ul></li></ol><p><strong>局域网都是以太网的形式，其比较规范，课程重点</strong></p><ul><li>Ethernet 以太网</li><li>the most popular service 最受欢迎的设备</li></ul><h2 id="wan-devices">WAN Devices</h2><p><img src="../../../../../../AppData/Roaming/Typora/typora-user-images/image-20220228142844223.png" alt="image-20220228142844223" style="zoom:33%;"></p><ol type="1"><li>路由器<ol type="1"><li>路径选择</li><li>分组交换</li></ol></li><li>Modem CSU/DSU TA/NT1(点对点连接终端设备)<ul><li>功能一:有CSU的功能:将终端用户和本地数字电话环路相连接</li><li>功能二:有DSU的功能:把终端上物理层适配到通讯层上：模拟信号到数字信号进行转换</li><li>TA/NT1:终端适配器和网络适配器</li><li>模拟到数字</li><li>远端局域网链接</li></ul></li></ol><p><strong>广域网:各种标准会比较复杂(以下为带宽从低到高进行排序)</strong></p><ul><li>Modem</li><li>ISDN</li><li>DSL</li><li>Frame Relay</li><li>ATM</li><li>T1/E1</li><li>T3</li><li>STS-1, STS-3, STS-48 (SONET/SDH)最高速广域网标准</li></ul><h2 id="互联网-internet">互联网 Internet</h2><ol type="1"><li>internet:<strong>互连网</strong>，通用名词，泛指由多个计算机网络互连而成的网络:网络的节点也是网络(和互联网的区别)</li><li>Internet:<strong>互联网</strong>，专用名词，指当前全球最大的、开放的、由众多网络互相连接而成的特定计算机网络。<ul><li>全球最大的开放性广域网</li><li>TCP/IP作为参考标准</li><li>从ARPNET发展出来</li></ul></li></ol><h3 id="多层isp结构的互联网-internet-with-multi-layer-isp-structure">多层ISP结构的互联网Internet with Multi-layer ISP structure</h3><p>Internet Service Providers (ISP)</p><p><img src="../../../../../../AppData/Roaming/Typora/typora-user-images/image-20220228143545404.png" alt="image-20220228143545404" style="zoom: 33%;"><img src="../../../../../../AppData/Roaming/Typora/typora-user-images/image-20220228143624341.png" alt="image-20220228143624341" style="zoom: 50%;"></p><h1 id="计算机网络基本概念">计算机网络基本概念</h1><h2 id="data">Data</h2><ul><li>Data is sent in bits, 1s and 0s</li><li>Data is not the information itself数据不是信息本身，不同方式解析数据会是不同信息，比如UTF-8和GDK解码是不同的，数据都是0-1序列，需要按照一定编码格式翻译转码才成为信息</li><li>Data is an encoded form of information which is a series ofelectrical impulses/optical signals into which information istransmitted for sending(数据是一种信息的编码形式，它是一系列的电脉冲/光信号，信息被传输到其中，用于发送)</li></ul><h3 id="数据包-data-packets">数据包 Data Packets</h3><ul><li>For transmission, computer data is often broken into small, easilytransmitted units 为了传输，计算机数据通常被分解成小的、容易传输的单位<ul><li>Using the OSI model, these units can be called packets, or frames orsegments 使用OSI模型，这些单元可以被称为 称为数据包，或帧或段</li></ul></li><li>Why data packets?<ul><li>Computers can take turns sending packets</li><li>If packet is lost, only small amount of data must be retransmitted如果数据包丢失，仅有少量的数据必须重新传输</li><li>Data can take different paths. 数据可以采取不同的路径。</li></ul></li><li>不同OSI层次使用不同传输形式，在不同层次数据被称为不同的单元名称。</li></ul><table><thead><tr class="header"><th>层</th><th>单元英文</th><th>单元中文</th></tr></thead><tbody><tr class="odd"><td>网络层</td><td>packets</td><td>报文</td></tr><tr class="even"><td>数据链路层</td><td>frames</td><td>帧</td></tr><tr class="odd"><td>运输层</td><td>segments</td><td>段</td></tr></tbody></table><h2 id="协议-protocol">协议 Protocol</h2><ul><li>It is possible for different types of computer systems tocommunicate不同类型的计算机系统可以进行通信。通过不同通道，来完成对应的通信。</li><li>All devices must speak the same “language”or use the same<strong>protocol</strong> (use same set of rules)所有设备必须使用相同的"语言"或使用相同的协议(使用相同的规则)。<ul><li>上下文处理关系</li><li>单词:可以理解成为报文</li></ul></li></ul><h2 id="源地址和目标地址source-and-destination">源地址和目标地址Sourceand Destination</h2><ul><li>Source address specifies the identity of the computer sending thepacket. 源地址指定发送数据包的计算机的标识</li><li>Destination address specifies the identity of the computerdesignated to receive the packet.目标地址指定接收数据包的计算机的标识</li><li>通信往往是弱联系，要求报文携带源和目的地，以便于完成校验工作，可以在不提前通知的情况下进行通知。</li><li>存在有效性的损失，因为source和destination是实际无用的信息，但是这是不可避免的</li></ul><h2 id="传输介质-media-types">.传输介质 Media Types</h2><p><img src="../../../../../../AppData/Roaming/Typora/typora-user-images/image-20220228144920530.png" alt="image-20220228144920530" style="zoom: 50%;"></p><ol type="1"><li>介质是数据包传输所通过的介质</li><li>传输方式<ol type="1"><li>电缆方式<ul><li>铜轴有限方式</li><li>双绞线方式</li></ul></li><li>光缆方式:相对比较稳定，高速率传输都是用光缆。</li><li>空气方式</li></ol></li></ol><h2 id="数据带宽-digital-bandwidth">数据带宽 Digital Bandwidth</h2><ul><li>Bandwidth is the measure of how much information can flow from oneplace to another in a given amount of time.数据带宽使用来衡量在一段给定时间下有多少信息可以从一段流动到另一端。</li><li>带宽是传输能力的<strong>上限</strong><ul><li>单位:bps,计算时注意要将字转换为位。</li><li>相对比较理想。</li></ul></li></ul><h2 id="通量-throughput">通量 Throughput</h2><ul><li>Actual, measured, bandwidth, at a specific time实际被度量的在特定时间情况下的数据带宽</li><li><strong>Throughput</strong> <strong>≤</strong><strong>Bandwidth</strong> 通量小于等于带宽</li><li>一般是传送一个大的文件来进行计算出，实际的通量</li></ul><h1 id="osi-reference-model">OSI Reference Model</h1><h2 id="osi-open-system-interconnection-model">OSI (Open SystemInterconnection) Model</h2><ul><li>Proposed by International Organization for Standardization (ISO)国际标准化组织(ISO，International Organization forStandardization)提出</li><li>A network model that help network builders implement networks thatcould communicate and work together帮助网络建设者实现可以通信和协同工作的网络模型</li><li>Describes how information or data moves from one computer through anetwork to another computer描述信息或数据如何从一台计算机通过网络移动到另一台计算机</li><li>a layered communication process 分层通信过程<ul><li>Each layer performs a specific task每一个层次都有一个确定的任务</li></ul></li></ul><h2 id="层次模型-layered-model">层次模型 Layered Model</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec01/8.png"></p><blockquote><p>OSI是7层网络模型</p></blockquote><table><colgroup><col style="width: 14%"><col style="width: 34%"><col style="width: 34%"><col style="width: 17%"></colgroup><thead><tr class="header"><th>层次</th><th>特点</th><th>关键字</th><th>备注</th></tr></thead><tbody><tr class="odd"><td>物理层</td><td>二进制传输</td><td>信号和介质</td><td>属于数据流层</td></tr><tr class="even"><td>数据链路层</td><td>介质访问</td><td>帧和介质访问控制</td><td>属于数据流层</td></tr><tr class="odd"><td>网络层</td><td>路径选择</td><td>路径选择，最优路径</td><td>属于数据流层</td></tr><tr class="even"><td>传输层</td><td>终端到终端通信</td><td>可靠性，流控制，错误纠正</td><td>属于数据流层</td></tr><tr class="odd"><td>会话层</td><td>进程之间通信如何用户交流</td><td>对话和交流</td><td>属于应用层</td></tr><tr class="even"><td>展示层</td><td>展示</td><td>标准</td><td>属于应用层</td></tr><tr class="odd"><td>应用层</td><td>给用户展示交互接口</td><td>浏览</td><td>属于应用层</td></tr></tbody></table><h2 id="为什么设计层次模型-why-a-layered-model">为什么设计层次模型? Whya Layered Model?</h2><ol type="1"><li>Reduce Complexity 降低复杂度，使用分解法来进行操作。</li><li>Standardizes interfaces 标准化接口，每层和每层之间标准化处理</li><li>Facilitates modular engineering促进(Facilitate)模块化工程，保证各层之间可以相对独立的进行发展</li><li>Ensures interoperable technology确保交互操作的技术，可以用不同网络程序，但是都用一样的低层。</li><li>Accelerates evolution加速(Accelerate)发展，各层的公司只要关注本层的即可</li><li>Simplifies teaching and learning 简化教学和学习</li></ol><h2 id="模型">4+3模型</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec01/9.png"></p><ul><li>The top 3 layers are known as the application layers最高3层被我们记为应用层<ul><li>because they deal with the user interface, data formatting, and theapplication access. 因为他们处理了用户接口，数据格式和应用权限</li></ul></li></ul><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec01/10.png"></p><blockquote><p>Layers 1-4 are known as the data flow layers底下四层被我们称数据流层，因为他们控制着通过网络传输的数据信息</p><ul><li><p>because they control the physical delivery of</p><p>messages over the network.这部分由硬件和网络操作系统一起完成</p></li></ul></blockquote><h2 id="各层次介绍">各层次介绍</h2><ol type="1"><li>下层会为上层提供服务，上层会向下层请求服务。</li><li>考试OSI分层情况只有7层和4层的两种情况。</li></ol><h3 id="layer-1-the-physical-layer-物理层">Layer 1: The Physical Layer物理层</h3><ol type="1"><li>Keywords: Signal and Media 关键词：<strong>信号和介质</strong></li><li>defines the electrical and functional specifications for the linkbetween end systems (including media)定义终端系统(包括媒体)之间链路的电气和功能规范(specifications)</li><li>defines voltage levels, timing of voltage changes, physical datarates, maximum transmission distances, physical connectors, and other,similar attributes 定义电压电平(voltage levels)、电压变化的定时(timingof voltagechanges)、物理数据速率、最大传输距离、物理连接器和其他类似属性。(主要是定义了一些关键属性)</li><li>特点:对于信号不管理，对于信号正确性不做判断，只传递信号。</li></ol><h3 id="layer-2-the-data-link-layer-数据链路层">Layer 2: The Data LinkLayer 数据链路层</h3><ol type="1"><li>Keywords: frame, media access control关键词:<strong>帧和介质访问控制</strong></li><li>provides reliable transit of data across a physical link通过物理链路提供<strong>可靠</strong>的数据传输</li><li>is concerned with physical (as opposed to logical) addressing,network topology, network access, error notification, ordered deliveryof frames, and flow control涉及物理(而不是逻辑)寻址、网络拓扑、网络访问、错误通知、帧的有序传递和流控制，调节链路使用(涉及到一系列电路控制)</li><li>和第一层区别:需要检查电信号的正确性，点对点的线路的链接，比如A-B之间的链接</li><li>几个数据链路层:A-B,B-C,如果在两个链路则两个，反之则一个</li></ol><h3 id="layer-3-the-network-网络层">Layer 3: The NetWork 网络层</h3><ol type="1"><li>Keywords: Path selection, Routing, Addressing关键词:<strong>路径选择，最优路径</strong>，基于逻辑IP地址的路径选择、路由和寻址，第三层要基于protocol生成路由表。</li><li>Provide connectivity and path selection between two end systemswhere routing occurs 在路由发生的两个终端系统之间提供连接和路径选择</li><li>These may be located on geographically separated networks它们(终端设备)可能位于地理上(geographically)分离的网络上</li><li>和第二层区别:<ul><li>第二层只涉及到物理链路上点对点</li><li>第三层上实现的是很多链路上的数据连通和传输。可以跨很远，在广域网上进行链路控制(逻辑电路控制)。</li></ul></li><li>IP地址:逻辑地址，由本层分发IP地址。</li><li>基于Package进行逻辑数据的管理。</li></ol><h3 id="layer-4-the-transport-layer-运输层">Layer 4: The Transport Layer运输层</h3><ol type="1"><li>Keywords: Reliability, Flow control, Error correction关键词:<strong>可靠性，流控制，错误纠正</strong></li><li>segments and reassembles data into a data stream将数据分段并重新组合(reassembles)为数据流</li><li>concerned with how reliable transport over an internetwork isaccomplished 关心如何在网络上实现可靠的传输</li><li>responsible for reliable network communication between end nodes andprovides mechanisms for the establishment, maintenance, and terminationof virtual circuits, transport fault detection and recovery, andinformation flow control负责终端结点之间的可靠网络通信，并为虚拟电路的建立、维护和终止、传输故障检测和恢复以及信息流控制提供机制</li><li>和第三层区别:<ul><li>第三层实现设备到设备之间的连接，但是我们的操作系统是分时操作系统，需要网络系统进行分时处理，保证为对应的数据进程转发正确的数据。</li><li>复杂数据校验交给终端设备，而不是中间设备，中间设备能够完成转发即可，降低工程量</li><li>数据错误:请求第三层(下层)重传</li><li>互相协商:调整数据传输效率</li></ul></li></ol><h3 id="the-layer-5-the-session-layer-会话层">The Layer 5: The SessionLayer 会话层</h3><ol type="1"><li>Keywords: Dialog and Conversations关键词:<strong>对话和交流</strong></li><li>establishes, manages, and terminates sessions between communicatinghosts 建立、管理和终止通信主机之间的会话</li><li>synchronizes dialog between presentation layer entities and managestheir data exchange 同步表示层实体之间的对话框并管理其数据交换</li><li>offers provisions for efficient data transfer, class of service, andexception reporting of session, presentation, and application layerproblems提供高效的数据传输、服务类别以及会话、表示和应用层问题的异常报告</li><li>manages data exchange between presentation layer entities管理表示层实体之间的数据交换</li><li>和前四层相比:<ul><li>前四层不能处理具体的细节，所以需要我们在应用程序中完成应用的会话管理。</li><li>checkpoint:在相应时间检查数据是否同步。</li><li>多进程的逻辑控制。</li></ul></li></ol><h3 id="the-layer-6-the-presentation-layer-表示层">The Layer 6: ThePresentation Layer 表示层</h3><ol type="1"><li>Keywords: Common Format关键词:<strong>标准</strong>，不同标准有可能出现歧义</li><li>ensures that information sent by the application layer of one systemis readable by the application layer of another system确保一个系统的应用层发送的信息可以被另一个系统的应用层读取</li><li>translates between multiple data representation formats by using acommon data representation format使用通用数据表示格式在多个数据表示格式之间转换</li><li>concerned with data structures and negotiation of data transfersyntax 关注数据结构和数据传输语法(syntax)的协商</li><li>responsible for compression and encryption负责压缩和加密，防止泄密事情的出现。</li></ol><h3 id="layer-7-the-application-layer-应用层">Layer 7: The ApplicationLayer 应用层</h3><ol type="1"><li>Keyword: Browser关键词:<strong>浏览</strong>，主要处理用户界面，将操作封装成机器可以理解的形式</li><li>closest to the user 最接近用户的一层</li><li>provides network services to user applications为用户应用程序提供网络服务</li><li>does not provide services to any other OSI layer不向任何其他OSI层提供服务</li></ol><h2 id="protocols-on-iso-layers-iso-模型下对应的协议内容">Protocols onISO layers ISO 模型下对应的协议内容</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec01/11.png" style="zoom:67%;"></p><h2 id="data-encapsulation-数据封装">Data Encapsulation 数据封装</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec01/12.png" style="zoom:67%;"></p><ol type="1"><li>5层划分不是实际标准，只是教学用标准</li><li>五层划分:<ul><li>上三层:第五层，依据这三层其实是我们写的网络程序涵盖的</li><li>传输层</li><li>网络层</li><li>数据链路层</li><li>物理层</li></ul></li><li>数据封装过程<ul><li>5-&gt;4:添加首部 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.14ex" height="1.595ex" role="img" focusable="false" viewBox="0 -683 1388 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mn" transform="translate(888,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g></g></svg></mjx-container></span>，应用程序数据作为数据部分</li><li>4-&gt;3:添加首部 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="3.14ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 1388 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mn" transform="translate(888,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></svg></mjx-container></span>，第五层的作为数据部分</li><li>3-&gt;2:添加首部 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.14ex" height="1.595ex" role="img" focusable="false" viewBox="0 -683 1388 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mn" transform="translate(888,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></svg></mjx-container></span>，第四层的作为数据部分</li><li>2-&gt;1:添加首部 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="3.14ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 1388 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mn" transform="translate(888,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container></span>和尾部 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.724ex" height="1.532ex" role="img" focusable="false" viewBox="0 -677 1204 677"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mn" transform="translate(704,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container></span>(校验位)，第三层的作为数据部分</li><li>1:转成比特流进行发送</li></ul></li><li>直连线路上的操作</li></ol><h2 id="peer-to-peer-communications-点对点通信">Peer-to-PeerCommunications 点对点通信</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec01/13.png" style="zoom:50%;"></p><ol type="1"><li>各层之中交换的信息的类型是不同的</li><li>不同层之间是无法完成正常通信的，也就是不能够理解的。</li><li>现实场景:公司A和公司B签订合同，公司A的CEO对应应用层，公司B的CEO也对应应用层，传输纸质合同，通过快递来传输<ul><li>A公司由秘书来起草具体的合同，之后快递工作交给收发室来传递，收发室找快递公司来完成具体快递等等。快递公司收到之后交给本地的集散点，然后通过具体的手段进行传递</li><li>收件人可以使对应的科室</li><li>上述描述了两台主机之间进行交互的过程</li></ul></li></ol><h1 id="tcpip-model">TCP/IP Model</h1><ol type="1"><li>The U.S. Department of Defense (<em>DoD</em>) created the TCP/IPreference model 美国国防部(DoD,Department ofDefense)创建了TCP/IP参考模型</li><li>The DoD wants its packets to get through every time,under anyconditions, from any one point to any other point国防部希望其数据包在任何情况下，每次都能从一个点传输到另一个点。</li><li>It brought about the creation of the TCP/IP model它带来了TCP/IP模型的创建</li><li>TCP/IP model has since become the standard on which the Internet hasgrown TCP/IP模式已经成为互联网发展的标准</li><li>The TCP/IP model has only four layers. TCP/IPmodel只有<strong>四个</strong>层。<ul><li>应用层</li><li>传输层</li><li>互联网层</li><li>网络接入层</li></ul></li><li>TCP: Transmission Control Protocal</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec01/14.png" style="zoom:50%;"></p><h2 id="四层模型-tcpip-model">四层模型 TCP/IP Model</h2><h3 id="第四层application-layer-应用层">第四层：Application Layer应用层</h3><ol type="1"><li>Handles high-level protocols, issues of representation, encoding,and session control处理高级协议、表示(representation)、编码(encoding)和会话控制(sessioncontrol)问题，包含7层上三层:应用层、表示层、会话层的全部功能</li><li>TCP/IP combines all application-related issues into one layer, andassures this data is properly packaged for the next layer.TCP/IP将所有与应用程序相关的问题合并到一个层中，并确保将这些数据正确打包到下一层。</li></ol><h3 id="第三层transport-layer-传输层">第三层：Transport Layer传输层</h3><ol type="1"><li>处理服务质量的可靠性、流程控制和错误纠正问题。<ul><li>传输控制协议(TCP, Transmission ControlProtocol):代价比较大，效率比较低</li><li>用户数据报协议(UDP, User Datagram Protocol)</li><li>It package application layer information into units called<strong>segments</strong> 它将应用层信息打包成称为段的单元</li></ul></li><li>对应OSI的第4层：传输层</li></ol><h3 id="第二层internet-layer-互联网层">第二层：Internet Layer互联网层</h3><ol type="1"><li>Purpose: Send source packets from any network on the internetworkand have them arrive at the destination <strong>independent of the pathand networks</strong>目的：从互联网上的任何网络发送源包，使它们独立于路径和网络到达目的地</li><li><strong>Best path determination</strong> and <strong>packetswitching</strong> occur at this layer最佳路径确定和分组交换发生在这一层</li><li>网际互联协议(IP,Internet protocol)</li><li>和OSI的第三层：网络层对应，报文从一方发送给另一方，报文传输经过路由器进行路径选择，</li></ol><h3 id="第一层network-access-layer-网络接入层">第一层：Network AccessLayer 网络接入层</h3><ol type="1"><li>Is also called the <strong>host-to-network</strong><strong>layer</strong>. 也称为主机到网络层。<ul><li>合并了OSI下面两层:物理层和数据链路层</li><li>完成物理实现和物理介质控制</li></ul></li><li>It is concerned with all of the issues that an IP packet requires toactually make a physical link, and then to make another physical link它涉及到IP数据包实际建立一个物理链路，然后再建立另一个物理链路所需的所有问题。</li><li>It includes the LAN and WAN technology details, and all the detailsin the OSI physical and data link layers.它包括局域网和广域网的技术细节，以及OSI物理层和数据链路层的所有细节。</li></ol><h2 id="常见的tcpip协议">常见的TCP/IP协议</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec01/15.png" style="zoom:67%;"></p><table><colgroup><col style="width: 8%"><col style="width: 30%"><col style="width: 16%"><col style="width: 44%"></colgroup><thead><tr class="header"><th>协议名称</th><th>协议全称</th><th>中文名</th><th>备注</th></tr></thead><tbody><tr class="odd"><td>FTP</td><td>File Transfer Protocol</td><td>文件传输协议</td><td>-</td></tr><tr class="even"><td>HTTP</td><td>Hypertext Transfer Protocol</td><td>超文本传输协议</td><td>主要用于浏览器</td></tr><tr class="odd"><td>SMTP</td><td>Simple Mail Transfer protocol</td><td>简单邮件发送协议</td><td>注意是发送</td></tr><tr class="even"><td>DNS</td><td>Domain Name System</td><td>域名解析系统</td><td>将域名解析成IP地址</td></tr><tr class="odd"><td>TFTP</td><td>Trivial File Transfer Protocol</td><td>普通文件传输协议</td><td>基于UDP，在局域网发送，关于较小的文件的发送</td></tr></tbody></table><ol type="1"><li>应用需要可靠传输:TCP服务,应用需要速率:UDP服务</li></ol><h2 id="tcpip-模型-和-osi-模型的相似点">TCP/IP 模型 和 OSI模型的相似点</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec01/16.png" style="zoom:50%;"></p><ol type="1"><li>both have layers, networking professionals need to know both两者都有层次，网络专业人员需要知道两者，都通过分层的方案来完成具体的实现</li><li>both have application layers, though they include very differentservices 两者都有应用层，尽管它们包含非常不同的服务</li><li>both have comparable transport and network layers两者都有相同的传输层和网络层</li><li>packet-switched (not circuit-switched) technology is assumed假设采用分组交换(非电路交换)技术</li><li>OSI是基于报文交换来进行实现的，TCP/IP也是基于报文交换来完成实现的。</li></ol><h2 id="tcpip-模型-和-osi-模型的不同点">TCP/IP 模型 和 OSI模型的不同点</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec01/16.png" style="zoom:50%;"></p><ol type="1"><li>TCP/IP appears simpler because it has fewer layers<strong>TCP/IP看起来更简单，因为它有更少的层</strong></li><li>TCP/IP protocols are the standards around which the Internetdeveloped, so the TCP/IP model gains credibility just because of itsprotocols<strong>TCP/IP协议是Internet发展的标准，因此TCP/IP模型正是因为它的协议才获得了可信性。</strong></li><li>Typically networks aren't built on the OSI protocol, even though theOSI model is used as a guide<strong>通常网络不是建立在OSI协议之上的，即使OSI模型被用作指南。</strong></li><li><strong>TCP/IP标准是大家都在使用的标准的。(实施标准)</strong>，5层和7层都只是讲课使用的</li><li>本课程我们一般使用<strong>5层</strong>来进行分割讲解。</li></ol><h1 id="网络拓扑">网络拓扑</h1><ol type="1"><li>Defines the structure of the network 定义网络结构</li><li>物理拓扑：导线(介质)的实际布局<ul><li>总线、星形、环形、扩展星形、分层(树形)、渔网型(mesh)</li><li>如何把Node具体连接起来</li></ul></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec01/17.png" style="zoom:67%;"></p><ol type="1"><li>逻辑拓扑：定义主机如何访问媒体<ul><li>令牌传递，使用token来获取通信的权利</li><li>主要涉及到管理介质如何被访问</li></ul></li><li>逻辑拓扑:主要是指如何在逻辑上如何控制网络</li><li>局域网特点：大部分时间是没有人发送数据，但是一旦发送就会有很多数据要发送。(令牌环循环不太适合)</li></ol><h2 id="bus-总线型拓扑">Bus 总线型拓扑</h2><ol type="1"><li><strong>Physical Perspective</strong>: Each host is wired to acommon wire 物理角度: 每个主机都连接到一条公用线(总线)。<ul><li>Advantage: all hosts can communicate directly.优点：所有主机都可以直接通信。</li><li>Disadvantage: A break in the cable disconnects hosts from each other缺点：电缆断开会使主机彼此断开连接。</li><li>也就是说总线是很重要的，总线一旦断开是不能够通信的，也是不可以分成多段总线进行处理(在未处理的总线上会在断开的地方，反射电信号，形成电路震荡)</li></ul></li><li><strong>Logical Perspective</strong>: Every networking device to seeall signals from all other devices (advantage?)逻辑角度：每个网络设备都可以看到来自所有其他设备的所有信号，实际上是广播式传播</li><li>优点:比较简单，所有的设备都可以监听到总线的信号。</li><li>缺点:<ol type="1"><li>信号冲突，需要进行复杂的介质访问权限控制来保证通信正常</li><li>如果一处断开，则全部无法进行网络传输</li></ol></li></ol><h2 id="ring-环形拓扑">Ring 环形拓扑</h2><ol type="1"><li>物理角度<ul><li>所有的设备直接首尾相连，组成一个菊花链(daisy-chain)</li><li>可以将信息传送给链上的所有的设备，但是一般是固定顺时针或者逆时针进行传输</li></ul></li><li>逻辑角度<ul><li>为了使信息流动，每个站点必须将信息传递给其相邻的站点。</li><li>我们需要对于链路进行访问控制，防止很多设备同时使用环，我们使用token来进行控制访问权力</li></ul></li><li>缺点:环上只要有一个地方断开就会破坏整个环</li><li>令牌环拓扑主要用于控制领域，比较适用于实时系统的处理</li></ol><h2 id="dual-ring-双环拓扑">Dual Ring 双环拓扑</h2><ol type="1"><li>物理视角：<ul><li>双环拓扑结构与环拓扑结构相同，只是有第二个冗余环<strong>连接相同</strong>的设备。</li></ul></li><li>逻辑视角：<ul><li>双环拓扑就像两个独立的环，同一时间只有一个环被应用。</li><li>有token令牌才有发送权力发送信息(使用总线)</li></ul></li><li>优点：提供可靠性和灵活性</li><li>Eg.优先使用外环，如果外环出现物理错误，则切换到内环上使用，并且对外环进行物理修复。</li><li>双环拓扑是指一个结点有两个点，同时只能一个环在传输信息，两个环的传输时的方向是不能确定的。</li></ol><h2 id="star-星型拓扑">Star 星型拓扑</h2><ol type="1"><li>物理视角：星型拓扑结构有一个中心节点，所有的链路都从它辐射(radiating)出去。</li><li>逻辑视角：所有信息的流动将通过一个设备。</li><li>优点:优点：它允许所有其他节点相互通信，方便。出于安全或限制访问的原因，它也可能是可取的</li><li>缺点：如果中心节点出现故障，整个网络就会断开连接。根据使用的网络设备类型，冲突可能是一个问题，中心点会有很大的负担，并且容易造成通信阻塞。</li><li>扩展星型拓扑:设置次级中心结点:和Internet的层次结点类似</li></ol><h2 id="tree-树形拓扑结构">Tree 树形拓扑结构</h2><ol type="1"><li>树拓扑使用一个主干节点(Trunk Node)，从该节点分支到其他节点。<ul><li>二叉树(每个节点分成两个链接)</li><li>主干树(主干有分支节点，其上挂有链接)。</li></ul></li><li>物理观点：主干是一条有几层分支的电线。</li><li>逻辑观点：信息流是层次性的。</li><li>在根一级数据结点可以对数据进行汇总和统计</li><li>类似电信网络:中心点不仅仅是转存和发送，还要控制和统计，而星形拓扑是不需要控制统计的。</li><li>当前节点不能处理的部分，则交给父结点处理</li></ol><h2 id="completemesh-渔网型拓扑">Complete(Mesh) 渔网型拓扑</h2><ol type="1"><li>物理视角:有明显的优点和缺点</li><li>逻辑角度:完整或网格拓扑的行为在很大程度上取决于所使用的设备。</li><li>优点：最大的连接性和可靠性。</li><li>缺点：链接的媒体数量和到链接的连接数量变得非常庞大。</li><li>全连接拓扑<ul><li>缺点:成本高、路径选择多:添加选择最合理的路径的机制</li><li>优点:鲁棒性高，抗干扰能力强。</li></ul></li><li>常使用在比较使用重要的情况下:通常Internet就是使用Mesh的拓扑</li></ol><h2 id="cellular-蜂窝型拓扑">Cellular 蜂窝型拓扑</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec01/23.png"></p><ol type="1"><li>物理视角<ul><li>蜂窝拓扑结构是用于无线技术的拓扑结构</li><li>有时接收节点移动(如手机)，有时发送节点移动(如卫星)</li></ul></li><li>逻辑视角:节点之间直接通信(尽管有时非常困难)，或者只与相邻的单元通信，这是<strong>非常低效</strong>的。</li><li>每一个结点都是无线的连通方式:远结点需要进行转发</li><li>使用场景<ol type="1"><li>无线电话</li><li>卫星</li></ol></li></ol><h1 id="network-devices-网络设备">Network Devices 网络设备</h1><ol type="1"><li>ad hoc(无线网络拓扑结构)性能比较差，容易受干扰</li></ol><h2 id="拓扑的局域网设备">拓扑的局域网设备</h2><ol type="1"><li><p>Hosts—devices connected directly to network segment</p><p>Hosts(网络终端设备):主机设备直接连接到网段,网络边缘节点，比如打印机、计算机、服务器、传真机、复印机</p></li><li><p>Hosts—not part of any layer, but the functions of the OSI modelare performed in software inside host</p><p>Hosts(网络中间设备):主机不是任何层的一部分，但是OSI模型的功能是在主机内部的软件中执行的</p></li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec01/18.png" style="zoom: 67%;"></p><ol start="3" type="1"><li>两者差别:网络终端设备可能工作在比较复杂的层次上，工作在多个层次上。</li></ol><h2 id="nics---layer2-网卡-network-interface-controller网络终端设备">NICs -Layer2 网卡 Network Interface Controller(网络终端设备)</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec01/19.png" style="zoom:67%;"></p><ol type="1"><li>Carries a unique code called a MAC address携带称为MAC地址的唯一代码，固定地址，在芯片上</li><li>Is used to control data communication for the host on the network用于控制网络上主机的数据通信</li><li>Translates parallel signal produced by computer into serial formatto send over the network将计算机产生的并行信号转换成串行格式通过网络发送</li><li>Transceiver used to convert signals as well as send and receive bits用于转换信号以及发送和接收比特的收发器</li><li>Provides the host’s access to the medium提供主机对媒体的访问权限</li><li>为什么是第二层的设备:<ol type="1"><li>可以识别帧</li><li>帮助主机接入网络</li></ol></li><li>计算机母线:并行通信，网卡总线:串行通信，所以网卡需要完成两者之间的交换。</li><li>也是可以完成第一层的工作的</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec01/20.png" style="zoom:67%;"></p><h2 id="media-layer-1-介质-网络中间设备">Media – Layer 1 介质网络中间设备</h2><ol type="1"><li>Carries a flow of information in bits 以位为单位携带信息流</li><li>The means by which signals travel from one networked device toanother 信号从一个网络设备传送到另一个网络设备的方式</li><li>0-1信号变为电信号或者无线电波光信号等。</li></ol><h2 id="repeaters-layer-1-中继器-网络中间设备">Repeaters – Layer 1中继器 网络中间设备</h2><ol type="1"><li>used to extend the length of the network用于<strong>延长网络的长度</strong>，实现传输超出一段介质传输的介质</li><li>clean, amplify, and resend signals that are weakened by long cable清除(Clean)、放大(Amplify)和重发(Resend)被长电缆削弱的信号</li><li>regenerate (amplify) and retime network signals at the bit level toallow them to travel a longer distance on the media在比特级别重新生成(放大)和重定时网络信号(<strong>数字信号</strong>)，以允许它们在媒体上传播更长的距离</li><li>perform no filtering 不执行筛选，无条件中继。</li></ol><h2 id="hubs---layer-1-集线器-网络中间设备">Hubs - Layer 1 集线器网络中间设备</h2><ol type="1"><li>used to regenerate and retime network signals用于重新生成和重定时网络信号，连接多个端口，可以比repeaters做更多的事情</li><li>propagate signals传播信号，无法筛选流量，无法确定最佳路径，经常用作网络中心结点，有时候被称为多端口中继器</li><li>逻辑拓扑上:总线方式连接，一个端口入，所有端口出</li><li>不允许总线上同时有两路信号进行传输</li><li>冲突域:可能出现冲突的区域，但是hubs不进行这些控制，而是由交换机或者路由器来完成控制,不能降低了冲突概率</li><li>而放大器方法的是模拟信号。</li></ol><h3 id="中继器和集线器的不同">中继器和集线器的不同</h3><ol type="1"><li>Repeater typically has only two ports and a hub generally has fromfour to twenty or more ports.中继器通常只有两个端口，集线器通常有4到20个或更多端口。</li><li>Repeater receives on one port and repeats on the other, while hubsreceive on one port and transmit on all other ports中继器在一个端口上接收，在另一个端口上重复，而集线器在一个端口上接收，在所有其他端口上传输。</li><li>Hubs most commonly found in Ethernet 10 Base T or 100 Base Tnetworks. 集线器最常见于以太网 10 Base T或100 BaseT网络中，最近已经不怎么使用</li><li>都是转发，都不做过滤功能</li><li>两个设备之间最多有4个hubs和bridge</li></ol><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec01/21.png" style="zoom:67%;"></p><h2 id="bridges-layer-2-网桥-网络中间设备">Bridges – Layer 2 网桥网络中间设备</h2><ol type="1"><li>purpose is to filter traffic on a LAN—to keep traffic local—yetallow connectivity to other segments of the LAN for traffic that isdirected there目的是在LAN上过滤流量，以保持本地流量，但允许连接到LAN的其他部分以定向到那里的流量</li><li>keep track of MAC addresses that are on each side of the bridge andmake decisions based on this MAC address list跟踪网桥两侧的MAC地址，并根据此MAC地址列表进行决策</li><li><ul><li>目的地址如果在同一端，就不进行转发(不必进行转发，MAC Table)</li><li>而在不同侧(不同的segments)就进行尽量向外转发</li></ul></li><li>more intelligent than hubs 比集线器更智能</li><li>collect and pass packets between segments收集并在段之间传递数据包</li><li>create collision domains 创建冲突域<ul><li>通过网桥划分冲突域</li><li>每个冲突域中都有一定的主机</li><li>第一层以上的设备才能划分冲突域</li></ul></li><li>maintain address tables 维护地址表</li></ol><h2 id="switches-layer-2-交换机-网络中间设备">Switches – Layer 2 交换机网络中间设备</h2><ol type="1"><li>used to concentrate connectivity用于集中连接，将集线器的连通性与桥梁的交通管制相结合</li><li>incoming ports to outgoing ports providing each port with fullbandwidth 将帧从输入端口切换到输出端口，从而为每个端口提供全带宽</li><li>provide separate data paths 提供单独的数据路径</li><li>combine the connectivity of a hub with the traffic regulation of abridge 结合网桥和交换机的功能</li><li>为每个端口都配备MacTable：如果找到匹配的情况，在将这两个端口建立临时链接</li><li>功能上:交换机的每个端口对应一个冲突域，和网桥是一样的。交换机和hubs相比，在物理和逻辑上都是星型拓扑。</li><li>目前主要都是基于交换机来进行实现的</li><li>不能做到网络逻辑划分，IP逻辑划分是路由器的事情</li></ol><h2 id="routers-layer-3-路由器-网络中间设备">Routers – Layer 3 路由器网络中间设备</h2><ol type="1"><li>大型网络中重要的流量调节设备</li><li>根据网络地址进行决策：主要是进行网段的划分，根据网络地址(包含在IP地址中)进行转化</li><li>检查数据包(第3层数据)，为它们选择最佳路径，然后将其切换出正确的传出端口</li><li>两个主要目的：<ol type="1"><li>路径选择</li><li>将数据包切换到最佳路由</li></ol></li></ol><h2 id="网络设备和osi层次模型演变evolution">网络设备和OSI层次模型演变(Evolution)</h2><p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Internet-computing/img/lec01/22.png" style="zoom: 67%;"></p><ol type="1"><li>网络设备的工作层次和主机情况<ul><li>物理层:介质、repeaters、hubs</li><li>数据链路层:网桥、交换机、电路交换设备</li><li>网络层:路由器</li></ul></li><li>Host下层通过网卡进行实现，上层通过网络操作系统、应用实现</li><li>高层设备可以识别低层设</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> 互联网计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 互联网计算 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
