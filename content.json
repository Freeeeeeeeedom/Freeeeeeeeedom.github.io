{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"https://freeeeeeeeedom.gitee.io","root":"/"},"pages":[{"title":"关于","date":"2022-04-15T05:04:22.540Z","updated":"2022-04-15T05:04:22.540Z","comments":false,"path":"about/index.html","permalink":"https://freeeeeeeeedom.gitee.io/about/index.html","excerpt":"","text":"你好，笔者就读于南京大学软件工程 精通CSS、JavaScript、PHP、ASP、C、C＋＋、C#、Java、Ruby、Perl、Lisp、python、Objective-C、ActionScript、Pascal、spss、sas等单词的拼写，熟悉Windows系统的开关机。 QQ: 709034836 Vx: 19552624136 Email: 709034836@qq.com"},{"title":"书单","date":"2022-04-15T15:14:11.213Z","updated":"2022-04-15T15:14:11.213Z","comments":false,"path":"books/index.html","permalink":"https://freeeeeeeeedom.gitee.io/books/index.html","excerpt":"","text":""},{"title":"404 Not Found：该页无法显示","date":"2022-04-15T15:14:11.205Z","updated":"2022-04-15T15:14:11.205Z","comments":false,"path":"/404.html","permalink":"https://freeeeeeeeedom.gitee.io/404.html","excerpt":"","text":""},{"title":"分类","date":"2022-04-15T15:14:11.214Z","updated":"2022-04-15T15:14:11.214Z","comments":false,"path":"categories/index.html","permalink":"https://freeeeeeeeedom.gitee.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-04-15T15:14:11.220Z","updated":"2022-04-15T15:14:11.220Z","comments":false,"path":"tags/index.html","permalink":"https://freeeeeeeeedom.gitee.io/tags/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2022-04-15T15:14:11.218Z","updated":"2022-04-15T15:14:11.218Z","comments":false,"path":"repository/index.html","permalink":"https://freeeeeeeeedom.gitee.io/repository/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2022-04-15T15:14:11.216Z","updated":"2022-04-15T15:14:11.216Z","comments":true,"path":"links/index.html","permalink":"https://freeeeeeeeedom.gitee.io/links/index.html","excerpt":"","text":""}],"posts":[{"title":"微信小程序开发","slug":"微信小程序开发","date":"2022-04-15T16:12:31.000Z","updated":"2022-04-15T16:12:32.001Z","comments":true,"path":"2022/04/16/微信小程序开发/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/16/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"机器学习导论","slug":"机器学习导论","date":"2022-04-15T16:12:13.000Z","updated":"2022-04-15T16:12:13.028Z","comments":true,"path":"2022/04/16/机器学习导论/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/16/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AF%BC%E8%AE%BA/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"互联网计算","slug":"互联网计算","date":"2022-04-15T16:11:57.000Z","updated":"2022-04-15T16:11:57.896Z","comments":true,"path":"2022/04/16/互联网计算/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/16/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"软件工程与计算-2","slug":"软件工程与计算-2","date":"2022-04-15T16:11:09.000Z","updated":"2022-04-15T16:11:09.626Z","comments":true,"path":"2022/04/16/软件工程与计算-2/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/16/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%97-2/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"C++高级程序设计","slug":"C-高级程序设计","date":"2022-04-15T16:10:53.000Z","updated":"2022-04-15T16:10:53.851Z","comments":true,"path":"2022/04/16/C-高级程序设计/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/16/C-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2022-04-15T15:33:36.381Z","updated":"2022-04-14T08:07:17.410Z","comments":true,"path":"2022/04/15/hello-world/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/15/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new &quot;My New Post&quot; More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment","categories":[],"tags":[{"name":"Start","slug":"Start","permalink":"https://freeeeeeeeedom.gitee.io/tags/Start/"}]},{"title":"数据管理基础 ch48-53","slug":"数据管理基础-ch48-53","date":"2022-04-15T06:28:10.000Z","updated":"2022-04-15T08:24:15.034Z","comments":true,"path":"2022/04/15/数据管理基础-ch48-53/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/15/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80-ch48-53/","excerpt":"","text":"ch 48 事务 事务(Transaction)是用户定义的一个数据库操作序列，这些操作要么全做，要么全不做，是一个不可分割的工作单位。 事务和程序是两个概念 在关系数据库中，一个事务可以是一条SQL语句，一组SQL语句或整个程序 一个程序通常包含多个事务 事务是恢复和并发控制的基本单位 定义事务 事务结束 commit： rollback： 事物的特性（ACID特性） 事务的ACID特性： 原子性（Atomicity） 事务是数据库的逻辑工作单位 事务中包括的诸操作要么都做，要么都不做 一致性（Consistency） 隔离性（Isolation） 持续性（Durability） 一致性 事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态 一致性状态 数据库中只包含成功事务提交的结果 不一致状态 数据库系统运行中发生故障，有些事务尚未完成就被迫中断； 这些未完成事务对数据库所做的修改有一部分已写入物理数据库，这时数据库就处于一种不正确的状态 一致性与原子性 银行转帐：从帐号A中取出一万元，存入帐号B。 定义一个事务，该事务包括两个操作 A B A=A-1 B=B+1 这两个操作要么全做，要么全不做 全做或者全不做，数据库都处于一致性状态。 如果只做一个操作，用户逻辑上就会发生错误，少了一 万元，数据库就处于不一致性状态。 隔离性、持续性 隔离性 一个事务的执行不能被其他事务干扰 一个事务内部的操作及使用的数据对其他并发事务是隔离的 并发执行的各个事务之间不能互相干扰 持续性也称永久性（Permanence） 一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。 接下来的其他操作或故障不应该对其执行结果有任何影响。 事务的特性 保证事务ACID特性是事务处理的任务 破坏事务ACID特性的因素 多个事务并行运行时，不同事务的操作交叉执行 数据库管理系统必须保证多个事务的交叉运行不影响这些事务的隔离性 事务在运行过程中被强行停止 数据库管理系统必须保证被强行终止的事务对数据库和其他事务没有任何影响 ch 49 故障和数据库恢复 故障和数据库恢复 故障是不可避免的 计算机硬件故障 软件的错误 操作员的失误 恶意的破坏 故障的影响 运行事务非正常中断，影响数据库中数据的正确性 破坏数据库，全部或部分丢失数据 数据库的恢复 数据库管理系统必须具有把数据库从错误状态恢复到某一已知的正确状态(亦称为一致状态或完整状态)的功能，这就是数据库的恢复管理系统对故障的对策 恢复子系统是数据库管理系统的一个重要组成部分 恢复技术是衡量系统优劣的重要指标 故障 故障的种类 事务内部的故障 系统故障 介质故障 计算机病毒 各类故障，对数据库的影响有两种可能性 一是数据库本身被破坏 二是数据库没有被破坏，但数据可能不正确，这是由于事务的运行被非正常终止造成的。 事务内部的故障 事务内部的故障 1 事务内部的故障 2 事务故障的恢复 事务故障意味着 事务没有达到预期的终点(COMMIT或者显式的ROLLBACK) 数据库可能处于不正确状态。 事务故障的恢复：事务撤消（UNDO） 强行回滚（ROLLBACK）该事务 撤销该事务已经作出的任何对数据库的修改，使得该事务象根本没有启动一样 系统故障 系统故障，称为软故障，是指造成系统停止运转的任何事件（特定类型的硬件错误（如CPU故障）、操作系统故障、数据库管理系统代码错误、系统断电），使得系统要重新启动。 整个系统的正常运行突然被破坏 所有正在运行的事务都非正常终止 不破坏数据库 内存中数据库缓冲区的信息全部丢失 系统故障的恢复 发生系统故障时，一些尚未完成的事务的结果可能已送入物理数据库，造成数据库可能处于不正确状态。 恢复策略：系统重新启动时，恢复程序让所有非正常终止的事务回滚，强行撤消（UNDO）所有未完成事务 发生系统故障时，有些已完成的事务可能有一部分甚至全部留在缓冲区，尚未写回到磁盘上的物理数据库中，系统故障使得这些事务对数据库的修改部分或全部丢失 恢复策略：系统重新启动时，恢复程序需要重做（REDO）所有已提交的事务 介质故障 介质故障，称为硬故障，指外存故障 磁盘损坏 磁头碰撞 瞬时强磁场干扰 介质故障破坏数据库或部分数据库，并影响正在存取这部分数据的所有事务 介质故障比前两类故障的可能性小得多，但破坏性大得多 计算机病毒 计算机病毒 一种人为的故障或破坏，是一些恶作剧者研制的一种计算机程序 可以繁殖和传播，造成对计算机系统包括数据库的危害 计算机病毒已成为计算机系统的主要威胁，自然也是数据库系统的主要威胁 数据库一旦被破坏仍要用恢复技术把数据库加以恢复 恢复 恢复操作的基本原理：冗余 利用存储在系统别处的冗余数据来重建数据库中已被破坏或不正确的那部分数据 恢复的实现技术：复杂 一个大型数据库产品，恢复子系统的代码要占全部代码的10%以上 恢复机制涉及的关键问题 如何建立冗余数据（数据转储，登记日志文件） 如何利用这些冗余数据实施数据库恢复 ch 50 数据转储和日志文件 数据转储 数据转储 1 转储是指数据库管理员定期地将整个数据库复制到磁带、磁盘或其他存储介质上保存起来的过程 备用的数据文本称为后备副本(backup)或后援副本 数据库遭到破坏后可以将后备副本重新装入 重装后备副本只能将数据库恢复到转储时的状态 要想恢复到故障发生时的状态，必须重新运行自转储以后的所有更新事务 数据转储 2 数据转储 3 上图中： 系统在Ta时刻停止运行事务，进行数据库转储 在Tb时刻转储完毕，得到Tb时刻的数据库一致性副本 系统运行到Tf时刻发生故障 为恢复数据库，首先由数据库管理员重装数据库后备副本，将数据库恢复至Tb时刻的状态 重新运行自Tb ～ Tf时刻的所有更新事务，把数据库恢复到故障发生前的一致状态 转储方法-静态转储 静态转储 在系统中无运行事务时进行的转储操作 转储开始时数据库处于一致性状态 转储期间不允许对数据库的任何存取、修改活动 得到的一定是一个数据一致性的副本 动态转储 海量转储与增量转储 日志文件 日志文件(log file)是用来记录事务对数据库的更新操作的文件 日志文件的格式 以记录为单位的日志文件 以数据块为单位的日志文件 用途 进行事务故障恢复 进行系统故障恢复 协助后备副本进行介质故障恢复 以记录为单位的日志文件 1 以记录为单位的日志文件内容 日志文件中的一个日志记录 (log record)包含 各个事务的开始标记(BEGIN TRANSACTION) 各个事务的结束标记(COMMIT或ROLLBACK) 各个事务的所有更新操作 以记录为单位的日志文件 2 以记录为单位的日志文件，每条日志记录的内容 事务标识（标明是哪个事务） 操作类型（插入、删除或修改） 操作对象（记录内部标识） 更新前数据的旧值（对插入操作而言，此项为空值） 更新后数据的新值（对删除操作而言, 此项为空值） 以数据块为单位的日志文件 以数据块为单位的日志文件，每条日志记录的内容 事务标识 被更新的数据块 日志文件的作用 日志文件的作用 1 具体作用 事务故障恢复和系统故障恢复必须用日志文件。 在动态转储方式中必须建立日志文件，后备副本和日志文件结合起来才能有效地恢复数据库。 在静态转储方式中，也可以建立日志文件。 当数据库毁坏后可重新装入后援副本把数据库恢复到转储结束时刻的正确状态 利用日志文件，把已完成的事务进行重做处理 对故障发生时尚未完成的事务进行撤销处理 不必重新运行那些已完成的事务程序就可把数据库恢复到故障前某一时刻的正确状态 日志文件的作用 2 登录日志文件 登录日志文件 1 为保证数据库是可恢复的，登记日志文件时必须遵循两条原则 登记的次序严格按并发事务执行的时间次序 必须先写日志文件，后写数据库 写日志文件操作：把表示这个修改的日志记录写到日志文件中 写数据库操作：把对数据的修改写到数据库中 登录日志文件 2 为什么要先写日志文件 写数据库和写日志文件是两个不同的操作 在这两个操作之间可能发生故障 如果先写了数据库修改，而在日志文件中没有登记下这个修改，则以后就无法恢复这个修改了 如果先写日志，但没有修改数据库，按日志文件恢复时只不过是多执行一次不必要的UNDO操作，并不会影响数据库的正确性","categories":[{"name":"数据库","slug":"数据库","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"数据管理基础","slug":"数据管理基础","permalink":"https://freeeeeeeeedom.gitee.io/tags/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/"}]},{"title":"数据管理基础 ch45-47","slug":"数据管理基础-ch45-47","date":"2022-04-15T06:04:39.000Z","updated":"2022-04-15T15:57:45.351Z","comments":true,"path":"2022/04/15/数据管理基础-ch45-47/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/15/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80-ch45-47/","excerpt":"","text":"ch 45 面向驱动的数据库编程 JAVA世界： JDBC w3cschool 微软：ODBC, OLE DB等 Python： Python DB-API +各数据库模块 JDBC为例 以JDBC为例 1 加载数据库驱动 Class.forName(\"com.mysql.jdbc.Driver\"); &lt;!--code￼0--&gt; 创建 Statement 对象，用于向数据库发送 SQL 语句； 123String sql = &quot;SELECT * FROM `user`&quot;;Statement statement = connection.createStatement();ResultSet resultSet = statement.executeQuery(sql); 获取 ResultSet 对象，取出数据，此对象代表结果集； while (resultSet.next()) &#123; int id = resultSet.getInt(“id”); …… &#125; &lt;!--code￼2--&gt; ch 46 过程化SQL 过程化SQL 过程化SQL SQL的扩展 增加了过程化语句功能 基本结构是块 块之间可以互相嵌套 每个块完成一个逻辑操作 过程化SQL的块结构 定义部分 DECLARE 变量、常量、游标、异常等 定义的变量、常量等只能在该基本块中使用 当基本块执行结束时，定义就不再存在 执行部分 12345 BEGINSQL语句、过程化SQL的流程控制语句 EXCEPTION异常处理部分 END； 变量和常量的定义 变量定义 变量名 数据类型 [[NOT NULL]:=初值表达式]或 变量名 数据类型 [[NOT NULL] 初值表达式] 常量定义 常量名 数据类型 CONSTANT :=常量表达式 常量必须要给一个值，并且该值在存在期间或常量的作用域内不能改变。如果试图修改它，过程化SQL将返回一个异常 赋值语句 变量名称 :=表达式 流程控制-条件控制语句 流程控制-循环控制语句 流程控制-错误处理 如果过程化SQL在执行时出现异常，则应该让程序在产生异常的语句处停下来，根据异常的类型去执行异常处理语句 SQL标准对数据库服务器提供什么样的异常处理做出了建议，要求过程化SQL管理器提供完善的异常处理机制 ch 47 存储过程和函数 存储过程 存储过程 1 过程化SQL块类型 命名块 编译后保存在数据库中，可以被反复调用，运行速度较快，过程和函数是命名块 匿名块 每次执行时都要进行编译，它不能被存储到数据库中，也不能在其他过程化SQL块中调用 存储过程 2 存储过程：由过程化SQL语句书写的过程，经编译和优化后存储在数据库服务器中，使用时只要调用即可。 存储过程的优点 运行效率高 降低了客户机和服务器之间的通信量 方便实施企业规则 存储过程的用户接口-创建存储过程 存储过程的用户接口-创建存储过程 1 存储过程的用户接口-创建存储过程 2 [例8.8] 利用存储过程来实现下面的应用：从账户1转指定数额的款项到账户2中。 CREATE OR REPLACE PROCEDURE TRANSFER(inAccount INT,outAccount INT,amount FLOAT) /*定义存储过程TRANSFER，其参数为转入账户、转出账户、转账额度*/ AS DECLARE /*定义变量*/ totalDepositOut Float; totalDepositIn Float; inAccountnum INT; &lt;!--code￼4--&gt; ### 存储过程的用户接口-创建存储过程 4 &lt;!--code￼5--&gt; 存储过程的用户接口-执行存储过程 执行存储过程 CALL/PERFORM PROCEDURE 过程名([参数1,参数2,…])； 使用CALL或者PERFORM等方式激活存储过程的执行 在过程化SQL中，数据库服务器支持在过程体中调用其他存储过程 [例8.9] 从账户01003815868转10000元到01003813828账户中。 1CALL PROCEDURE TRANSFER(01003813828,01003815868,10000); 储过程的用户接口-其他 改存储过程 ALTER PROCEDURE 过程名1 RENAME TO 过程名2; 删除存储过程 ·DROP PROCEDURE 过程名()； 函数 函数的定义语句格式 CREATE OR REPLACE FUNCTION 函数名 ([参数1,参数2,…]) RETURNS &lt;类型&gt; AS &lt;过程化SQL块&gt;; 函数的执行语句格式 CALL/SELECT 函数名 ([参数1,参数2,…]); 修改函数 重命名 ALTER FUNCTION 过程名1 RENAME TO 过程名2; 重新编译 ALTER FUNCTION 过程名 COMPILE;","categories":[{"name":"数据库","slug":"数据库","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"数据管理基础","slug":"数据管理基础","permalink":"https://freeeeeeeeedom.gitee.io/tags/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/"}]},{"title":"2022-4-15","slug":"2022-4-15","date":"2022-04-15T04:03:28.000Z","updated":"2022-04-15T07:18:49.972Z","comments":true,"path":"2022/04/15/2022-4-15/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/15/2022-4-15/","excerpt":"","text":"To Do CS144 lab1 CS144 lab2 核酸检测 Leetcode 每日一题 Leetcode *3 微信小程序 计网实验 数据库JDBC 总结","categories":[{"name":"Everday","slug":"Everday","permalink":"https://freeeeeeeeedom.gitee.io/categories/Everday/"}],"tags":[{"name":"2022_Spring","slug":"2022-Spring","permalink":"https://freeeeeeeeedom.gitee.io/tags/2022-Spring/"}]},{"title":"每日一题","slug":"每日一题","date":"2022-04-15T00:24:15.000Z","updated":"2022-04-15T04:00:43.069Z","comments":true,"path":"2022/04/15/每日一题/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/15/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/","excerpt":"","text":"日期 题目 题解 难度 推荐指数 2022.4.15 385. 迷你语法分析器 Freedom的题解 中等 😻😻😻😻","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"模拟","slug":"模拟","date":"2022-04-15T00:24:02.000Z","updated":"2022-04-15T00:27:31.595Z","comments":true,"path":"2022/04/15/模拟/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/15/%E6%A8%A1%E6%8B%9F/","excerpt":"","text":"","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"双指针","slug":"双指针","date":"2022-04-15T00:23:43.000Z","updated":"2022-04-15T00:48:59.403Z","comments":true,"path":"2022/04/15/双指针/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/15/%E5%8F%8C%E6%8C%87%E9%92%88/","excerpt":"","text":"题号 题解 难度 推荐 27. 移除元素 Freedom的题解 简单 😻😻😻","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"数据管理基础 ch32-36","slug":"数据管理基础-ch32-36","date":"2022-04-14T13:59:05.000Z","updated":"2022-04-14T15:45:01.213Z","comments":true,"path":"2022/04/14/数据管理基础-ch32-36/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/14/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80-ch32-36/","excerpt":"","text":"ch 32 关系模式及范式 关系模式及第一范式（1 NF） 关系模式由五部分组成，是一个五元组： 1R(U,D,DOM,F) 关系名R是符号化的元组语义 U为一组属性 D为属性组U中的属性所来自的域 DOM为属性到域的映射 F为属性组U上的一组数据依赖 由于D,DOM与模式设计关系不大，因此可以把关系模式看作一个三元组：R&lt;U,F&gt; 当且仅当U上的一个关系r满足F时，r称为关系模式R&lt;U,F&gt;的一个关系 作为二维表，关系要符合一个最基本的条件，每个分量必须是不可分开的数据项，满足了这个条件的关系模式就属于第一范式（1 NF） 数据依赖 是一个关系内部属性与属性之间的一种约束关系 通过属性间值的相等与否体现出来的数据间相互联系 是现实世界属性间相互联系的抽象 是数据内在的性质 是语义的体现 数据以来的主要类型 函数依赖（Functional Dependency,简记为FD) 多值依赖（Multi-Valued Dependency,简记为MVD） 函数依赖 函数依赖普遍存在在现实生活中 描述一个学生关系，可以有学号、姓名、系名等属性 一个学号值对应一个学生，一个学生只在一个系中学习 “学号”值确定后，学生的姓名及所在系的值就被唯一确定 12Sname = f(Sno), Sdept = f(Sno)-记作Sno-&gt;Sname,Sno-&gt;Sdept [例6.1] 建立一个描述学校教务的数据库。涉及的对象包括： 学生的学号（Sno） 所在系（Sdept） 系主任姓名（Mname） 课程号（Cno） 成绩（Grade） 假设学校教务的数据库模式用一个单一的关系模式Student来表示，则该关系模式的属性集合为： U = &#123;Sno,Sdept,Mname,Cno,Grade&#125; &lt;!--code￼2--&gt; 1 NF的问题 1 NF的问题 1 关系模式Student&lt;U,F&gt;存在的问题： 数据冗余 浪费大量的存储空间 修改复杂，更新异常（Update Anomalies) 数据冗余，更新数据时，维护数据完整性代价大 插入异常 删除异常 1 NF的问题 2 结论 Student关系模式不是一个好的关系模式 原因 由存在于模式中的某些数据依赖引起的 解决方法 用规范化理论改造关系模式来消除其中不合适的数据依赖 把这个单一的模式分成三个关系模式： 123S(Sno,Sdept,Sno-&gt;Sdept);SC(Sno,Cno,Grade,(Sno,Cno)-&gt;Grade);DEPT(Sdept,Mname,Sdept-&gt;Mname); 这三个模式不会发生插入异常，删除异常的问题，数据的冗余也得到了控制 范式 范式 1 范式是符合某一种级别的关系模式的集合。 关系数据库中的关系必须满足一定的要求。满足不同程度要求的为不同范式。 范式的种类： 第一范式(1NF) 第二范式(2NF) 第三范式(3NF) BC范式(BCNF) 第四范式(4NF) 第五范式(5NF) 范式 2 各种范式之间存在联系： 某一关系模式R为第n范式，可简记为R∈nNFnNFnNF。 一个低一级范式的关系模式，通过模式分解（schema decomposition）可以转换为若干个高一级范式的关系模式的集合，这种过程就叫规范化（normalization） ch 33 函数依赖与码 函数依赖 函数依赖 1 定义6.1 设R(U)是一个属性集U上的关系模式，X和Y是U的子集。若对于R(U)的任意一个可能的关系r，r 中不可能存在两个元组在X上的属性值相等， 而在Y上的属性值不等， 则称“X函数确定Y”或“Y函数依赖于X”，记作X→Y，X称为这个函数依赖的决定因素（Determinant） [例] Student(Sno, Sname, Ssex, Sage, Sdept), 假设不允许重名，则有: 12345Sno → Ssex， Sno → Sage Sno → Sdept， Sno ←→ Sname Sname → Ssex， Sname → Sage Sname → Sdept 但Ssex ↛ Sage, Ssex ↛ Sdept 函数依赖 2 函数依赖不是指关系模式R的某个或某些关系实例满足的约束条件，而是指R的所有关系实例均要满足的约束条件。 函数依赖是语义范畴的概念。只能根据数据的语义来确定函数依赖。 例如“姓名→年龄”这个函数依赖只有在不允许有同名人的条件下成立 数据库设计者可以对现实世界作强制的规定。 例如规定不允许同名人出现，函数依赖“姓名→年龄”成立。所插入的元组必须满足规定的函数依赖，若发现有同名人存在， 则拒绝插入该元组。 平凡函数依赖与非平凡函数依赖 在关系模式R(U)中，对于U的子集X和Y， X→Y，但Y ⊈ X，则称X→Y是非平凡的函数依赖 X→Y，但Y  X, 则称X→Y是平凡的函数依赖 对于任一关系模式，平凡函数依赖都是必然成立的，它不反映新的语义。因此若不特别声明， 我们总是讨论非平凡函数依赖 例：在关系SC(Sno, Cno, Grade)中 123非平凡函数依赖： (Sno, Cno) → Grade平凡函数依赖： (Sno, Cno) → Sno (Sno, Cno) → Cno 完全函数依赖与部分函数依赖 定义6.2 在R(U)中，如果X→Y，并且对于X的任何一个真子集X’, 都有 X’ ↛ Y, 则称Y对X完全函数依赖，记作X→FYX\\rightarrow^{F} YX→​F​​Y。 若X→Y，但Y不完全函数依赖于X，则称Y对X部分函数依赖，记作X→PYX\\rightarrow^{P} YX→​P​​Y 传递函数依赖 码 码 1 码 2 外码 ch 34 1NF , 2NF, 3NF 1 NF 如果一个关系模式R的所有属性都是不可分的基本数据项，则R∈1NF。 第一范式是对关系模式的最起码的要求。不满足第一范式的数据库模式不能称为关系数据库。 但是满足第一范式的关系模式并不一定是一个好的关系模式。 2 NF 2 NF 1 2 NF 2 2 NF 3 3 NF","categories":[{"name":"数据库","slug":"数据库","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"数据管理基础","slug":"数据管理基础","permalink":"https://freeeeeeeeedom.gitee.io/tags/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/"}]},{"title":"数据管理基础 ch26-31","slug":"数据管理基础-ch26-31","date":"2022-04-14T13:58:53.000Z","updated":"2022-04-14T15:34:24.823Z","comments":true,"path":"2022/04/14/数据管理基础-ch26-31/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/14/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80-ch26-31/","excerpt":"","text":"ch 26 数据库完整性 数据库的完整性 数据的正确性 是指数据是符合现实世界语义，反映了当前实际状况的 数据的相容性 是指数据库同一对象在不同关系表中的数据是符合逻辑的 例如， 学生的学号必须唯一 性别只能是男或女 本科学生年龄的取值范围为14~50的整数 学生所选的课程必须是学校开设的课程，学生所在的院系必须是学校已成立的院系 完整性 vs.安全性 数据的完整性 防止数据库中存在不符合语义的数据，也就是防止数据库中存在不正确的数据 防范对象：不合语义的、不正确的数据 数据的安全性 保护数据库，防止恶意的破坏和非法的存取 防范对象：非法用户和非法操作 完整性机制 提供定义完整性约束条件的机制 完整性约束条件也称为完整性规则，是数据库中的数据必须满足的语义约束条件 SQL标准使用了一系列概念来描述完整性，包括关系模型的实体完整性、参照完整性和用户定义完整性 这些完整性一般由SQL的数据定义语言语句来实现 提供完整性检查的方法 数据库管理系统中检查数据是否满足完整性约束条件的机制称为完整性检查。 一般在INSERT、UPDATE、DELETE语句执行后开始检查，也可以在事务提交时检查 违约处理 数据库管理系统若发现用户的操作违背了完整性约束条件，就采取一定的动作 拒绝（NO ACTION）执行该操作 级连（CASCADE）执行其他操作 ch 27 实体完整性 实体完整性定义 实体完整性 定义1 关系模型的实体完整性 CREATE TABLE中用PRIMARY KEY定义 单属性构成的码有两种说明方法 定义为列级约束条件 定义为表级约束条件 对多个属性构成的码只有一种说明方法 定义为表级约束条件 实体完整性定义 2 [例5.1] 将Student表中的SnoSnoSno属性定义为码 123456789CREATE TABLE Student (Sno CHAR(9) PRIMARY KEY, Sname CHAR(20) NOT NULL, Ssex CHAR(2), Sage SMALLINT, Sdept CHAR(20) ); CREATE TABLE Student (Sno CHAR(9), Sname CHAR(20) NOT NULL, Ssex CHAR(2). Sage SMALLINT, Sdept CHAR(20), PRIMARY KEY (Sno) ); &lt;!--code￼1--&gt; 实体完整性检查和违约处理 插入或对主码列进行更新操作时，关系数据库管理系统按照实体完整性规则自动进行检查。包括： 检查主码值是否唯一，如果不唯一则拒绝插入或修改 检查主码的各个属性是否为空，只要有一个为空就拒绝插入或修改 实体完整性检查 实体完整性检查 1 检查记录中主码值是否唯一的一种方法是进行全表扫描 依次判断表中每一条记录的主码值与将插入记录上的主码值（或者修改的新主码值）是否相同 十分耗时 实体完整性检查 2 为避免对基本表进行全表扫描，RDBMS核心一般都在主码上自动建立一个索引，如B+树索引 新插入记录的主码值是25 通过主码索引，从B+树的根结点开始查找 读取3个结点：根结点（51）、中间结点（12 30）、叶结点（15 20 25） 该主码值已经存在，不能插入这条记录 ch 28 参照完整性 参照完整性定义 关系模型的参照完整性定义 在CREATE TABLE中用FOREIGN KEY短语定义哪些列为外码 用REFERENCES短语指明这些外码参照哪些表的主码 [例5.3]定义SC中的参照完整性 12345678CREATE TABLE SC(Sno CHAR(9) NOT NULL, Cno CHAR($) NOT NULL, Grade SMALLINT, PRIMARY KEY(Sno,Cno), FOREIGN KEY(Sno) REFERENCES Student(Sno), FOREIGN KEY(Sno) REFERENCES Course(Cno) ); 参照完整性检查 参照完整性定义 1 一个参照完整性将两个表中的相应元组联系起来 对被参照表和参照表进行增删改操作时有可能破坏参照完整性，必须进行检查 例如，对表SC和Student有四种可能破坏参照完整性的情况 : SC表中增加一个元组，该元组的SnoSnoSno属性的值在表Student中找不到一个元组，其SnoSnoSno属性的值与之相等。 修改SC表中的一个元组，修改后该元组的SnoSnoSno属性的值在表Student中找不到一个元组，其SnoSnoSno属性的值与之相等。 从Student表中删除一个元组，造成SC表中某些元组的SnoSnoSno属性的值在表Student中找不到一个元组，其SnoSnoSno属性的值与之相等。 修改Student表中一个元组的SnoSnoSno属性，造成SC表中某些元组的SnoSnoSno属性的值在表Student中找不到一个元组，其SnoSnoSno属性的值与之相等 。 参照完整性定义 2 被参照表（例如Student） 参照表（例如SC） 违约处理 可能破坏参照完整性 插入元组 拒绝 可能破坏参照完整性 修改外码值 拒绝 删除元组 可能破坏参照完整性 拒绝/级连删除/设置为空值 修改主码值 可能破坏参照完整性 拒绝/级连修改/设置为空值 参照完整性违约处理 参照完整性违约处理 1 参照完整性违约处理 拒绝（NO ACTION）执行 不允许该操作执行。该策略一般设置为默认策略 级联（CASCADE）操作 当删除或修改被参照表（Student）的一个元组造成了与参照表（SC）的不一致，则删除或修改参照表中的所有造成不一致的元组 设置为空值（SET-NULL） 当删除或修改被参照表的一个元组时造成了不一致，则将参照表中的所有造成不一致的元组的对应属性设置为空值。 对于参照完整性，除了应该定义外码，还应定义外码列是否允许空值 参照完整性违约处理 2 例如，有下面2个关系 学生（学号，姓名，性别，专业号，年龄） 专业（专业号，专业名） 假设专业表中某个元组被删除，专业号为12 按照设置为空值的策略，就要把学生表中专业号=12的所有元组的专业号设置为空值 对应语义：某个专业删除了，该专业的所有学生专业未定，等待重新分配专业 [例5.4] 显式说明参照完整性的违约处理示例 123456789101112131415CREATE TABLE SC ( Sno CHAR(9) NOT NULL， Cno CHAR(4) NOT NULL， Grade SMALLINT, PRIMARY KEY(Sno,Cno)， FOREIGN KEY (Sno) REFERENCES Student(Sno) ON DELETE CASCADE /*级联删除SC表中相应的元组*/ ON UPDATE CASCADE, /*级联更新SC表中相应的元组*/ FOREIGN KEY (Cno) REFERENCES Course(Cno) ON DELETE NO ACTION /*当删除course 表中的元组造成了与SC表不一致时拒绝删除*/ ON UPDATE CASCADE /*当更新course表中的cno时，级联更新SC表中相应的元组*/ ); ch 29 用户定义的完整性 用户定义的完整性 用户定义的完整性是：针对某一具体应用的数据必须满足的语义要求 属性上的约束条件 元组上的约束条件 同属性值限制相比，元组级的限制可以设置不同属性之间的取值的相互约束条件 关系数据库管理系统提供了定义和检验用户定义完整性的机制，不必由应用程序承担 插入元组或修改属性的值时，关系数据库管理系统检查约束条件是否被满足 如果不满足则操作被拒绝执行 列值非空 [例5.5] 在定义SC表时，说明SnoSnoSno、CnoCnoCno、GradeGradeGrade属性不允许取空值 123456789CREATE TABLE SC(Sno CHAR(9) NOT NULL,Cno CHAR(4) NOT NULL,Grade SAMLLINT NOT NULL,PRIMARY KEY (Sno,Cno),.../* 如果在表级定义实体完整性，隐含了Sno，Cno不允许取空值，则在 列级不允许取空值的定义 可以不写 * /) 列值唯一 [例5.6]建立部门表DEPT，要求部门名称DnameDnameDname列取值唯一，部门编号DeptnoDeptnoDeptno列为主码 1234567CREATE TABLE DEPT(Deptno NUMERIC(2),Dname CHAR(9) UNIQUE NOT NULL, /*要求Dname列值唯一, 并且不能取空值*/Location CHAR(10),PRIMARY KEY (Deptno)); 列值是否满足条件表达式 1 用CHECK短语指定列值应该满足的条件 [例5.7] Student表的SsexSsexSsex只允许取“男”或“女”。 123456789CREATE TABLE Student ( Sno CHAR(9) PRIMARY KEY, Sname CHAR(8) NOT NULL, Ssex CHAR(2) CHECK （Ssex IN （‘男’,’女’））， /*性别属性Ssex只允许取&#x27;男&#x27;或&#x27;女&#x27; */ Sage SMALLINT, Sdept CHAR(20) ); 列值是否满足条件表达式 2 [例5.8] SC表的Grade的值应该在0和100之间 123456789 CREATE TABLE SC ( Sno CHAR(9) , Cno CHAR(4),Grade SMALLINT CHECK (Grade&gt;=0 AND Grade &lt;=100)， /*Grade取值范围是0到100*/ PRIMARY KEY (Sno,Cno), FOREIGN KEY (Sno) REFERENCES Student(Sno), FOREIGN KEY (Cno) REFERENCES Course(Cno) ); 元组上约束条件的定义 [例5.9]当学生的性别是男时，其名字不能以Ms.打头 1234567891011CREATE TABLE Student ( Sno CHAR(9), Sname CHAR(8) NOT NULL， Ssex CHAR(2), Sage SMALLINT, Sdept CHAR(20), PRIMARY KEY (Sno), CHECK (Ssex=&#x27;女&#x27; OR Sname NOT LIKE &#x27;Ms.%&#x27;) /*定义了元组中Sname和 Ssex两个属性值之间的约束条件*/ ); 完整性约束命名子句 创建完整性约束 完整性约束命名子句 CONSTRAINT &lt;完整性约束条件名&gt;&lt;完整性约束条件&gt; &lt;完整性约束条件&gt;包括NOT NULL、UNIQUE、PRIMARY KEY短语、FOREIGN KEY短语、CHECK短语等 修改完整性约束 使用ALTER TABLE语句修改表中的完整性限制 创建完整性约束 创建完整性约束 1 [例5.10]建立学生登记表Student，要求学号在90000~99999之间，姓名不能取空值，年龄小于30，性别只能是“男”或“女”。 1234567891011CREATE TABLE Student ( Sno NUMERIC(6) CONSTRAINT C1 CHECK (Sno BETWEEN 90000 AND 99999), Sname CHAR(20) CONSTRAINT C2 NOT NULL, Sage NUMERIC(3) CONSTRAINT C3 CHECK (Sage &lt; 30), Ssex CHAR(2) CONSTRAINT C4 CHECK (Ssex IN ( ‘男’,&#x27;女&#x27;)), CONSTRAINT StudentKey PRIMARY KEY(Sno) ); 在Student表上建立了5个约束条件，包括主码约束（命名为StudentKeyStudentKeyStudentKey）以及C1C1C1、C2C2C2、C3C3C3、C4四个列级约束。 创建完整性约束 2 [例5.11]建立教师表TEACHER，要求每个教师的应发工资不低于3000元。应发工资是工资列Sal与扣除项Deduct之和。 1234567891011CREATE TABLE TEACHER ( Eno NUMERIC(4) PRIMARY KEY /*在列级定义主码*/ Ename CHAR(10), Job CHAR(8), Sal NUMERIC(7,2), Deduct NUMERIC(7,2), Deptno NUMERIC(2), CONSTRAINT TEACHERFKey FOREIGN KEY (Deptno) REFERENCES DEPT(Deptno), CONSTRAINT C1 CHECK (Sal + Deduct &gt;= 3000) ); 修改完整性约束 [例5.12]去掉例5.10 Student表中对性别的限制。 12ALTER TABLE Student DROP CONSTRAINT C4; [例5.13] 修改表Student中的约束条件，要求学号改为在900000~999999之间，年龄由小于30改为小于40 12345678ALTER TABLE Student DROP CONSTRAINT C1; ALTER TABLE Student ADD CONSTRAINT C1 CHECK (Sno BETWEEN 900000 AND 999999), ALTER TABLE Student DROP CONSTRAINT C3; ALTER TABLE Student ADD CONSTRAINT C3 CHECK(Sage &lt; 40); ch 30 断言 SQL中，可以使用 CREATE ASSERTION语句，通过声明性断言来指定更具一般性的约束。 可以定义涉及多个表的或聚集操作的比较复杂的完整性约束。 断言创建以后，任何对断言中所涉及的关系的操作都会触发关系数据库管理系统对断言的检查，任何使断言不为真值的操作都会被拒绝执行 如果断言很复杂，则系统在检测和维护断言的开销较高，这是在使用断言时应该注意的 断言相关语句 创建断言的语句格式 1CREATE ASSERTION&lt;断言名&gt;&lt;CHECK 子句&gt; 每个断言都被赋予一个名字，&lt;CHECK 子句&gt;中的约束条件与WHERE子句的条件表达式类似。 删除断言的语句格式 DROP ASSERTION &lt;断言名&gt;； &lt;!--code￼14--&gt; 创建断言 2 [例5.19]限制每一门课程最多60名学生选修 123456CREATE ASSERTION ASSE_SC_CNUM1 CHECK(60 &gt;= ALL (SELECT count(*) FROM SC GROUP by cno) ); /*此断言的谓词，涉及聚集操作count 和分组函数group by的SQL语句*/ 创建断言 3 [例5.20]限制每个学期每一门课程最多60名学生选修。首先需要修改SC表的模式，增加一个“学期（TERM）”属性 12345ALTER TABLE SC ADD TERM DATE;CREATE ASSERTION ASSE_SC_CNUM2 CHECK(60 &gt;= ALL (SELECT count(*) FROM SC GROUP by cno,TERM) ); ch 31 触发器 触发器 触发器（Trigger）是用户定义在关系表上的一类由事件驱动的特殊过程 触发器保存在数据库服务器中 任何用户对表的增、删、改操作均由服务器自动激活相应的触发器 触发器可以实施更为复杂的检查和操作，具有更精细和更强大的数据控制能力 不同的RDBMS产品触发器语法各不相同 定义触发器 定义触发器 1 CREATE TRIGGER语法格式 12345CREATE TRIGGER &lt;触发器名&gt; &#123;BEFORE | AFTER&#125; &lt;触发事件&gt; ON &lt;表名&gt; REFERENCING NEW|OLD ROW AS&lt;变量&gt; FOR EACH &#123;ROW | STATEMENT&#125; [WHEN &lt;触发条件&gt;]&lt;触发动作体&gt; 触发器又叫做事件-条件-动作 （event-condition-action）规则。 当特定的系统事件发生时，对规则的条件进行检查，如果条件成立则执行规则中的动作，否则不执行该动作。规则中的动作体可以很复杂，通常是一段SQL存储过程。 定义触发器 2 表的拥有者才可以在表上创建触发器 触发器名 触发器名可以包含模式名，也可以不包含模式名 同一模式下，触发器名必须是唯一的 触发器名和表名必须在同一模式下 表名 触发器只能定义在基本表上，不能定义在视图上 当基本表的数据发生变化时，将激活定义在该表上相应触发事件的触发器 触发事件 触发事件可以是INSERT、DELETE或UPDATE，也可以是这几个事件的组合 还可以UPDATE OF&lt;触发列，…&gt;，即进一步指明修改哪些列时激活触发器 AFTER/BEFORE是触发的时机 AFTER表示在触发事件的操作执行之后激活触发器 BEFORE表示在触发事件的操作执行之前激活触发器 触发器类型 行级触发器（FOR EACH ROW） 语句级触发器（FOR EACH STATEMENT） 触发条件 触发器被激活时，只有当触发条件为真时触发动作体才执行;否则触发动作体不执行。 如果省略WHEN触发条件，则触发动作体在触发器激活后立即执行 触发动作体 触发动作体可以是一个匿名PL/SQL过程块，也可以是对已创建存储过程的调用 如果是行级触发器，用户可以在过程体中使用NEW和OLD引用事件之后的新值和事件之前的旧值 如果是语句级触发器，则不能在触发动作体中使用NEW或OLD进行引用 如果触发动作体执行失败，激活触发器的事件就会终止执行，触发器的目标表或触发器可能影响的其他对象不发生任何变化 触发器实例 触发器类型 例如,在例5.11的TEACHER表上创建一个AFTER UPDATE触发器，触发事件是UPDATE语句： 1UPDATE TEACHER SET Deptno = 5; 假设表TEACHER有1000行 如果是语句级触发器，那么执行完该语句后，出发的动作只发生一次 如果是行级触发器，触发动作将执行1000次 触发器实例 1 [例5.21]当对表SC的Grade属性进行修改时，若分数增加了10%则将此次操作记录到下面表中：SC_U（SnoSnoSno,CnoCnoCno,OldgradeOldgradeOldgrade,NewgradeNewgradeNewgrade）其中OldgradeOldgradeOldgrade是修改前的分数，NewgradeNewgradeNewgrade是修改后的分数。 123456789CREATE TRIGGER SC_T AFTER UPDATE OF Grade ON SC REFERENCING OLD row AS OldTuple, NEW row AS NewTuple FOR EACH ROW WHEN (NewTuple.Grade &gt;= 1.1*OldTuple.Grade) INSERT INTO SC_U(Sno,Cno,OldGrade,NewGrade) VALUES(OldTuple.Sno,OldTuple.Cno,OldTuple.Grade,NewTuple.Grade) [例5.22] 将每次对表Student的插入操作所增加的学生个数记录到表StudentInsertLog中。 12345678910CREATE TRIGGER Student_Count AFTER INSERT ON Student /*指明触发器激活的时间是在执行INSERT后*/ REFERENCING NEW TABLE AS DELTA FOR EACH STATEMENT /*语句级触发器, 即执行完INSERT语句后下面的触发动作体才执行一次*/ INSERT INTO StudentInsertLog (Numbers) SELECT COUNT(*) FROM DELTA [例5.23] 定义一个BEFORE行级触发器，为教师表Teacher定义完整性规则“教授的工资不得低于4000元，如果低于4000元，自动改为4000元”。 12345678910CREATE TRIGGER Insert_Or_Update_Sal BEFORE INSERT OR UPDATE ON Teacher /*触发事件是插入或更新操作*/ REFERENCING NEW row AS newTuple FOR EACH ROW /*行级触发器*/ BEGIN /*定义触发动作体，是PL/SQL过程块*/ IF (newTuple.Job=&#x27;教授&#x27;) AND (newTuple.Sal &lt; 4000) THEN newTuple.Sal :=4000; END IF; END; 激活触发器 触发器的执行，是由触发事件激活的，并由数据库服务器自动执行 一个数据表上可能定义了多个触发器，遵循如下的执行顺序: 执行该表上的BEFORE触发器; 激活触发器的SQL语句; 执行该表上的AFTER触发器。 删除触发器 删除触发器的SQL语法： DROP TRIGGER &lt;触发器名&gt; ON &lt;表名&gt;; 触发器必须是一个已经创建的触发器，并且只能由具有相应权限的用户删除","categories":[{"name":"数据库","slug":"数据库","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"数据管理基础","slug":"数据管理基础","permalink":"https://freeeeeeeeedom.gitee.io/tags/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/"}]},{"title":"数据管理基础 ch23-25","slug":"数据管理基础-ch23-25","date":"2022-04-14T13:58:42.000Z","updated":"2022-04-14T14:25:04.269Z","comments":true,"path":"2022/04/14/数据管理基础-ch23-25/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/14/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80-ch23-25/","excerpt":"","text":"ch23 数据库安全性 数据库安全性 问题的提出 数据库的一大特点是数据可以共享 数据库的一大特点是数据可以共享 数据共享必然带来数据库的安全性问题 数据库系统中的数据共享不能是无条件的共享 军事秘密、国家机密、新产品实验数据、市场需求分析、市场营销策略、销售计划、客户档案、医疗档案、银行储蓄数据 数据库的安全性是指保护数据库以防止不合法使用所造成的数据泄露、更改或破坏 系统安全保护措施是否有效是数据库系统主要的性能指标之一 数据库的不安全因素 非授权用户对数据库的恶意存取和破坏 一些黑客（Hacker）和犯罪分子在用户存取数据库时猎取用户名和用户口令，然后假冒合法用户偷取、修改甚至破坏用户数据 数据库管理系统提供的安全措施主要包括用户身份鉴别、存取控制和视图等技术。 数据库中重要或敏感的数据被泄露 黑客和敌对分子千方百计盗窃数据库中的重要数据，一些机密信息被暴露。 数据库管理系统提供的主要技术有强制存取控制、数据加密存储和加密传输等。 审计日志分析 安全环境的脆弱性 数据库的安全性与计算机系统的安全性紧密联系 计算机硬件、操作系统、网络系统等的安全性 建立一套可信（Trusted）计算机系统的概念和标准 TCCSEC/TDI安全级别划分 TCSEC/TDI安全级别划分 1 TCSEC/TDI安全级别划分 按系统可靠或可信程度逐渐增高 各安全级别之间具有一种偏序向下兼容的关系 TCSEC/TDI安全级别划分 2 D级 将一切不符合更高标准的系统均归于D组 C1级 非常初级的自主安全保护 能够实现对用户和数据的分离，进行自主存取控制（DAC），保护或限制用户权限的传播。 现有的商业系统稍作改进即可满足 C2级 安全产品的最低档次 提供受控的存取保护，将C1级的DAC进一步细化，以个人身份注册负责，并实施审计和资源隔离 达到C2级的产品在其名称中往往不突出“安全”（Security）这一特色 B1级 标记安全保护。“安全”（Security）或“可信的” （Trusted）产品。 对系统的数据加以标记，对标记的主体和客体实施强制存取控制（MAC）、审计等安全机制 B2级 结构化保护 建立形式化的安全策略模型并对系统内的所有主体和客体实施DAC和MAC B3级 安全域 该级的TCB必须满足访问监控器的要求，审计跟踪能力更强，并提供系统恢复过程 A1级 验证设计，即提供B3级保护的同时给出系统的形式化设计说明和验证以确信各安全保护真正实现。 TCSEC/TDI安全级别划分 3 CC 提出国际公认的表述信息技术安全性的结构 把信息产品的安全要求分为 安全功能要求 安全保证要求 C文本组成 简介和一般模型 有关术语、基本概念和一般模型以及与评估有关的一些框架 安全功能要求 列出了一系列类、子类和组件 安全保证要求 列出了一系列保证类、子类和组件 提出了评估保证级（Evaluation Assurance Level，EAL），从EAL1至EAL7共分为七级 评估保证级 定 义 TCSEC安全级别（近似相当） EAL1 功能测试（functionally tested） EAL2 结构测试（structurally tested） C1 EAL3 系统地测试和检查（methodically tested and checked） C2 EAL4 系统地设计、测试和复查（methodically designed tested， and reviewed） B1 EAL5 半形式化设计和测试（semiformally designed and tested） B2 EAL6 半形式化验证的设计和测试（semiformally verified design and tested） B3 EAL7 形式化验证的设计和测试（formally verified design and tested） A1 计算机系统的安全模型 计算机系统中，安全措施是一级一级层层设置 系统根据用户标识鉴定用户身份，合法用户才准许进入计算机系统 数据库管理系统还要进行存取控制，只允许用户执行合法操作 操作系统有自己的保护措施 数据以密码形式存储到数据库中 数据库管理系统安全性控制模型 ch24 存取控制 存取控制的组成 定义用户权限，并将用户权限登记到数据字典中 用户对某一数据对象的操作权力称为权限 DBMS提供适当的语言来定义用户权限，存放在数据字典中，称为安全规则或授权规则 合法权限检查 用户发出存取数据库操作请求 DBMS查找数据字典，进行合法权限检查 用户权限定义和合法权检查机制一起组成了数据库管理系统的存取控制子系统 自主存取控制 （Discretionary Access Control) C2级 用户对不同的数据对象有不同的存取权限 不同的用户对同一对象也有不同的权限 用户可将其拥有的存取权限转授给其他用户 自主存取控制方法1 SQL 的 GRANT语句和REVOKE语句实现 用户权限组成 数据库对象 操作类型 定义存取权限称为授权 定义用户存取权限：定义用户可以在那些数据库对象上进行哪些操作 自主存取控制方法2 关系数据库系统中存取控制对象 SQL中的授权机制 数据库管理员 拥有所有对象的所有权限 根据实际情况不同的权限授予不同的用户 用户： 拥有自己建立的对象的全部操作权限 可以使用GRANT，把权限授予其他用户 被授予的用户 如果具有&quot;继续授权&quot;的许可，可以把获得的权限再授予其他用户 所有授予出去的权力在必要时可以用REVODE语句收回 GRANT 1 GRANT语句的一般格式 1234GRANT &lt;权限&gt;[,&lt;权限&gt;]...ON &lt;权限类型&gt;&lt;对象名&gt;[,&lt;权限类型&gt;&lt;对象名&gt;]...TO &lt;用户&gt;[,&lt;用户&gt;]...[WITH GRANT OPTION] 语义：将对指定操作对象的指定操作权限授予指定的用户 发出GRANT： 数据库管理员 数据库对象创建者（属主Owner） 拥有该权限的用户 按授权限的用户 一个或多个具体用户 PUBLIC（全体用户） GRANT 2 WITH GRANT OPTION子句： 指定：可以再授予 没有指定：不能传播 不允许循环授权 [例4.1] 把查询Student表权限授予用户U1 123GRANT SELECTON TABLE StudentTO U1; [例4.2] 把对Student表和Course表的全部权限授予用户U2和U3 123GRANT ALL PRIVILIGESON TABLE Student，CourseTO U2,U3 [例4.3]把对表SC的查询权限授予所有用户 123GRANT SELECTON TABLE SCTO PUBLIC; [例4.4]把查询Student表的和修改学生学号的权限授予用户U4 123GRANT UPDATE(Sno),SELECTON TBALE StudentTO U4; [例4.5]把对表SC的INSERT权限授予U5用户，并允许他再将次权限授予其他用户 1234GRANT INSERTON TABLE SCTO U5WITH GRANT OPTION; 执行例4.5后，U5不仅拥有了对表SC的INSERT权限，还可以传播此权限； [例4.6] 1234GRANT INSERTON TABLE SCTO U6WITH GRANT OPTION; [例4.7]同样，U6还可以将此权限授予U7，但U7不能再传播此权限 123GRANT INSERTON TABLE SCTO U7; REVOKE 1 授予的权限可以由数据库管理员或者其他授权这用REVOKE语句收回 REVOKE语句的一般格式为 123REVOKE &lt;权限&gt;[,&lt;权限&gt;]...ON &lt;对象类型&gt;&lt;对象名&gt;[,&lt;对象类型&gt;&lt;对象名&gt;]...FROM &lt;用户&gt;[,&lt;用户&gt;]..[CASCADE|RESTRICT]; REVOKE 2 [例4.8]把用户U4修改学生学号的权限收回 123REVOKE UPDATE(Sno)ON TABLE StudentFROM U4; [例4.9]收回所有用户对表SC的查询权限 123REVOKE SELECTON TABLE SCFROM PUBLIC; [例4.10]把用户U5对SC表的INSERT权限收回 123REVOKE INSERTON TABLE SCFROM U5 CASCADE; 将用户U5的INSERT权限收回的时候使用CASCADE,则同时收回U6或U7的INSERT权限，否则拒绝执行该语句 如果U6或U7还从其他用户处获得对SC表的INSERT权限，则他们仍具有此权限，系统只收回直接或间接从U5处获得的权限 创建数据库模式的权限 1 数据库管理员在创建用户时实现 123CREATE USER语句格式CREATE USER &lt;username&gt;[WITH][DBA|RESOURCE|CONNECT]; 注：CREATE USER不是SQL标准，各个系统的实现相差甚远 只有系统的超级用户才有权创建一个新的数据库用户 新创建的数据库用户有三种权限： CONNECT、RESOURCE和DBA 如没有指定创建的新用户的权限，默认该用户拥有CONNECT权限。拥有CONNECT权限的用户不能创建新用户，不能创建模式，也不能创建基本表，只能登录数据库 拥有RESOURCE权限的用户能创建基本表和视图，成为所创建对象的属主。但不能创建模式，不能创建新的用户 拥有DBA权限的用户是系统中的超级用户，可以创建新的用户、创建模式、创建基本表和视图等；DBA拥有对所有数据库对象的存取权限，还可以把这些权限授予一般用户 数据库角色 1 数据库角色： 被命名的一组与数据库操作相关的权限 角色是权限的集合 可以为一组具有相同权限的用户创建一个角色 简化授权的过程 角色的创建 1CREATE ROLE &lt;角色名&gt; 给角色授权 123GRANT &lt;&gt;[,&lt;&gt;]...ON &lt;&gt;TO &lt;&gt;[,&lt;&gt;]... 数据库角色 2 将一个角色授予其他的角色或用户 123GRANT &lt;&gt;[,&lt;&gt;]..TO &lt;&gt;[,&lt;&gt;]...[WITH ADMIN OPTION] 该语句把角色授予某用户，或授予另一个角色 授予者是角色的创建者或拥有在这个角色上的ADMIN OPTION 指定了WITH ADMIN OPTION则获得某种权限的角色或用户还可以把这种权限授予其他角色 一个角色的权限：直接授予这个角色的全部权限加上其他角色授予这个角色的全部权限 角色权限的收回 123REVOKE &lt;&gt;[,&lt;&gt;]..ON &lt;&gt;[,&lt;&gt;]FROM &lt;&gt;[,&lt;&gt;]... 用户可以回收角色的权限从而修改角色拥有的权限 REVOKE执行者时 角色的创建者 拥有在这个角色上的ADMIN OPTION 数据库角色 3 [例4.11]通过角色来实现将一组权限授予一个用户 创建角色R1 1CREATE ROLE R1; 使用GRANT语句，使角色R1拥有Student表的SELCT、UPDATE、INSERT权限 123GRANT SELECT.UPDATE,INSERTON TABLE StudentTO R1； 将这个角色授予王平，张明，赵玲。使他们具有角色R1所包含的全部权限 12GRANT R1TO 王平，张明，赵玲； 可以一次性通过R1来回收王平的这3个权限 12REVOKE R1FROM 王平 数据库角色 4 [例4.12]角色权限修改 123GRANT DELETEON TABLE StudentTO R1； 使角色R1增加了DELETE权限 [例4.13]使R1减少了SELECT权限 123REVOKE SELECTON TABLE StudentFROM R1； 自主存取控制缺点 可能存在数据的“无意泄露” 原因：这种机制仅仅通过对数据的存取权限来进行安全控制，而数据本身并无安全性标记 解决：对系统控制下的所有主客体实施强制存取控制策略 强制存取控制 强制存取控制（Mandatory Access Control，简称 MAC） B1级别，保证更高程度的安全性 每一个数据对象被标以一定的密级 每一个用户也被授予某一个级别的许可证 对于任意一个对象，只有具有合法许可证的用户才可以存取 用户不能直接感知或进行控制 适用于对数据有严格而固定密级分类的部门 军事部门 政府部门 实体 在强制存取控制中，数据库管理系统所管理的全部实体被分为主体和客体两大类 主体是系统中的活动实体 数据库管理系统所管理的实际用户 代表用户的各进程 客体是系统中的被动实体，受主体操纵 文件、基本表、索引、视图 敏感度标记 对于主体和客体，DBMS为它们每个实例（值）指派一个敏感度标记（Label） 敏感度标记分成若干级别 绝密（Top Secret，TS） 机密（Secret，S） 可信（Confidential，C） 公开（Public，P） TS&gt;=S&gt;=C&gt;=P 主体的敏感度标记称为许可证级别（Clearance Level） 客体的敏感度标记称为密级（Classification Level） 强制存取控制规则 仅当主体的许可证级别大于或等于客体的密级时，该主体才能读取相应的客体 仅当主体的许可证级别小于或等于客体的密级时，该主体才能写相应的客体 强制存取控制（MAC）是对数据本身进行密级标记，无论数据如何复制，标记与数据是一个不可分的整体，只有符合密级标记要求的用户才可以操纵数据。 DAC + MAC 实现强制存取控制时要首先实现自主存取控制 原因：较高安全性级别提供的安全保护要包含较低级别的所有保护 自主存取控制与强制存取控制共同构成数据库管理系统的安全机制，先进行自主存取控制检查，通过自主存取控制检查的数据对象再由系统进行强制存取控制检查，只有通过强制存取控制检查的数据对象方可存取。 ch25 视图机制、审计、数据加密及其他 视图机制 视图机制 1 把要保密的数据对无权存取这些数据的用户隐藏起来，对数据提供一定程度的安全保护 间接地实现支持存取谓词的用户权限定义 视图机制 2 [例4.14] 建立计算机系学生的视图，把对该视图的SELECT权限授于王平，把该视图上的所有操作权限授于张明 CS_Student CREATE VIEW CS_Student AS SELECT * FROM Student WHERE Sdept = 'CS'; &lt;!--code￼23--&gt; 审计 审计 启用一个专用的审计日志（Audit Log）将用户对数据库的所有操作记录在上面 审计员利用审计日志监控数据库中的各种行为，找出非法存取数据的人、时间和内容 C2以上安全级别的DBMS必须具有审计功能 审计功能的可选性 审计很费时间和空间 DBA可以根据应用对安全性的要求，灵活地打开或关闭审计功能 审计功能主要用于安全性要求较高的部门 服务器事件 审计数据库服务器发生的事件 系统权限 对系统拥有的结构或模式对象进行操作的审计 要求该操作的权限是通过系统权限获得的 语句事件 对SQL语句，如DDL,DML,DQL及DCL语句的审计 模式对象事件 对特定模式对象上进行的SELECT或DML操作的审计 审计功能 基本功能 c多套审计规则：一般在初始化设定 提供审计分析和报表功能 审计日志管理功能 防止审计员误删审计记录，审计日志必须先转储后删除 对转储的审计记录文件提供完整性和保密性保护 只允许审计员查阅和转储审计记录，不允许任何用户新增和修改审计记录等 提供查询审计设置及审计记录信息的专门视图 审计级别 用户级审计 任何用户可设置的审计 主要是用户针对自己创建的数据库表和视图进行审计 系统级审计 只能由数据库管理员设置 监测成功或失败的登录要求、监测授权和收回操作以及其他数据库级权限下的操作 审计语句 AUDIT语句和NOAUDIT语句 AUDIT语句：设置审计功能 NOAUDIT语句：取消审计功能 [例4.15] 对修改SC表结构或修改SC表数据的操作进行审计 12AUDIIT ALTER,UPDATEON SC; [例4.16] 取消对SC表的一切审计 12NOAUDIT ALTER,UPDATEON SC; 数据加密 防止数据库中数据在存储和传输中失密的有效手段 加密的基本思想 根据一定的算法将原始数据—明文（Plain text）变换为不可直接识别的格式­—密文（Cipher text） 加密方法 存储加密 传输加密 存储加密 透明存储加密 内核级加密保护方式，对用户完全透明 将数据在写到磁盘时对数据进行加密，授权用户读取数据时再对其进行解密 数据库的应用程序不需要做任何修改，只需在创建表语句中说明需加密的字段即可 内核级加密方法: 性能较好，安全完备性较高 非透明存储加密 通过多个加密函数实现 传输加密 链路加密 在链路层进行加密 传输信息由报头和报文两部分组成 报文和报头均加密 端到端加密 在发送端加密，接收端解密 只加密报文不加密报头 所需密码设备数量相对较少，容易被非法监听者发现并从中获取敏感信息 其他安全性保护 推理控制 避免用户利用能够访问的数据推知更高密级的数据 隐蔽信道 间接数据传递 数据隐私保护 描述个人控制其不愿他人知道或他人不便知道的个人数据的能力 范围很广：数据收集、数据存储、数据处理和数据发布等各个阶段","categories":[{"name":"数据库","slug":"数据库","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"数据管理基础","slug":"数据管理基础","permalink":"https://freeeeeeeeedom.gitee.io/tags/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/"}]},{"title":"数据管理基础 ch11-22","slug":"数据管理基础-ch11-22","date":"2022-04-14T13:58:26.000Z","updated":"2022-04-14T14:28:58.147Z","comments":true,"path":"2022/04/14/数据管理基础-ch11-22/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/14/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80-ch11-22/","excerpt":"","text":"ch11 SQL概述 SQL（Structured Query Language）结构化查询语言，是关系数据库的标准语言 SQL是一个通用的、功能极强的关系数据库语言 综合统一 高度非过程化 面向集合的操作方式 以同一种语法结构提供两种使用方法 语言简洁，易学易用 SQL的特点 综合统一 集数据定义语言（DDL），数据操纵语言（DML），数据控制语言（DCL）功能于一体 可以独立完成数据库生命周期中的全部活动 用户数据库投入运行后，可根据需要随时逐步修改模式，不影响数据库的运行 数据操作符统一 高度非过程化 非关系数据模型的数据操纵语言“面向过程”，必须指定存取路径 SQL只要提出“做什么”，无须了解存取路径 存取路径的选择以及SQL的操作过程由系统自动完成 面向集合的操作方式 非关系数据模型采用面向记录的操作方式，操作对象是一条记录 SQL采用集合操作方式 操作对象、查找结果可以是元组的集合 次插入、删除、更新操作的对象可以是元组的集合 以同一种语法结构提供多种使用方式 SQL是独立的语言，能够独立地用于联机交互的使用方式 SQL又是嵌入式语言，能够嵌入到高级语言（例如C，C++，Java）程序中，供程序员设计程序时使用 语言简洁，易学易用 SQL功能极强，完成核心功能只用了9个动词: 数据定义：CREATE，DROP，ALTER 数据查询：SELECT 数据操作：INSERT，UPDATE，DELETE 数据控制：GRANT，REVOKE SQL与关系数据库三级模式 基本表 本身独立存在的表 一个关系对应一个基本表 一个（或多个）基本表对应一个存储文件 一个表可以带若干索引 存储文件 逻辑结构组成了关系数据库的内模式 物理结构对用户是隐蔽的 视图 从一个或几个基本表导出的表 数据库中只存放视图的定义而不存放视图对应的数据 视图是一个虚表 用户可以在视图上再定义视图 ch12 SQL数据定义 层次化的数据库对象命名机制 一个关系数据库管理系统的实例（Instance）中可以建立多个数据库 一个数据库中可以建立多个模式 一个模式下通常包括多个表、视图和索引等数据库对象 数据定义 SQL的数据定义功能: 模式定义 表定义 视图和索引的定义 定义模式 定义模式实际上定义了一个命名空间。 在这个空间中可以定义该模式包含的数据库对象，例如基本表、视图、索引等。 在CREATE SCHEMA中可以接受CREATE TABLE，CREATE VIEW和GRANT子句。 CREATE SCHEMA &lt;模式名&gt; AUTHORIZATION &lt;用户名&gt; [&lt;表定义子句&gt;| &lt;视图定义子句&gt;|&lt;授权定义子句&gt;] CREATE SCJE,A “S_T” AUTHORIZATION WANG 删除模式 DROP SCHEMA &lt;模式名&gt; &lt;CASCADE|RESTRICT&gt; CASCADE（级联） 删除模式的同时把该模式中所有的数据库对象全部删除 RESTRICT（限制） 如果该模式中定义了下属的数据库对象（如表、视图等），则拒绝该删除语句的执行。 仅当该模式中没有任何下属的对象时才能执行。 定义基本表 CREATE TABLE &lt;表名&gt; (&lt;列名&gt; &lt;数据类型&gt;[ &lt;列级完整性约束条件&gt; ] [,&lt;列名&gt; &lt;数据类型&gt;[ &lt;列级完整性约束条件&gt;] ] CREATE TABLE Student ​ (Sno CHAR(9) PRIMARY KEY ​ Sname CHAR(20) UNIQUE, ​ Ssex CHAR(2) ); 数据类型 SQL中域的概念用数据类型来实现 定义表的属性时需要指明其数据类型及长度 选用哪种数据类型 数据类型 含义 CHAR(n),CHARACTER(n) 长度为n的定长字符串 VARCHAR(n), CHARACTERVARYING(n) 最大长度为n的变长字符串 CLOB 字符串大对象 BLOB 二进制大对象 INT，INTEGER **长整数（**4字节） SMALLINT **短整数（**2字节） BIGINT 大整数（8字节） NUMERIC(p，d) 定点数，由p位数字（不包括符号、小数点）组成，小数后面有d位数字 DECIMAL(p, d**), DEC(p,** d) 同NUMERIC REAL 取决于机器精度的单精度浮点数 DOUBLE PRECISION 取决于机器精度的双精度浮点数 FLOAT(n) 可选精度的浮点数，精度至少为n位数字 BOOLEAN 逻辑布尔量 DATE 日期，包含年、月、日，格式为YYYY-MM-DD TIME 时间，包含一日的时、分、秒，格式为HH:MM:SS TIMESTAMP 时间戳类型 INTERVAL 时间间隔类型 修改基本表 123456ALTER TABLE &lt;表名&gt;[ ADD[COLUMN] &lt;新列名&gt; &lt;数据类型&gt; [ 完整性约束 ] ][ ADD &lt;表级完整性约束&gt;][ DROP [ COLUMN ] &lt;列名&gt; [CASCADE| RESTRICT] ][ DROP CONSTRAINT&lt;完整性约束名&gt;[ RESTRICT | CASCADE ] ][ALTER COLUMN &lt;列名&gt;&lt;数据类型&gt; ] ; 删除基本表 DROP TABLE &lt;表名&gt;［RESTRICT| CASCADE］; RESTRICT：删除表是有限制的。 欲删除的基本表不能被其他表的约束所引用 如果存在依赖该表的对象，则此表不能被删除 CASCADE：删除该表没有限制。 在删除基本表的同时，相关的依赖对象一起删除 索引 建立索引的目的：加快查询速度 由数据库管理员或表的拥有者建立 由关系数据库管理系统自动完成维护 关系数据库管理系统自动使用合适的索引作为存取路径， 用户不必也不能显式地选择索引 关系数据库管理系统中常见索引： 顺序文件上的索引 B+树索引 散列（hash）索引 位图索引 建立索引 语句格式 CREATE [UNIQUE] [CLUSTER] INDEX &lt;索引名&gt; ON &lt;表名&gt;(&lt;列名&gt;[&lt;次序&gt;] [,&lt;列名&gt;[&lt;次序&gt;] ]…); &lt;表名&gt;：要建索引的基本表的名字 索引：可以建立在该表的一列或多列上，各列名之间用号分隔 &lt;次序&gt;：指定索引值的排列次序，升序：ASC，降序：DESC。缺省值：ASC UNIQUE：此索引的每一个索引值只对应唯一的数据记录 CLUSTER：表示要建立的索引是聚簇索引 数据字典 数据字典是关系数据库管理系统内部的一组系统表，它记录了 数据库中所有定义信息： 关系模式定义 视图定义 索引定义 完整性约束定义 各类用户对数据库的操作权限 统计信息等 关系数据库管理系统在执行SQL的数据定义语句时，实际上就是在更新数据字典表中的相应信息 ch13 SQL 数据查询（单表） 语句格式 123456SELECT [ALL|DISTINCT] &lt;目标列表达式&gt;[,&lt;目标列表达式&gt;] …FROM &lt;表名或视图名&gt;[,&lt;表名或视图名&gt; ]…|(SELECT 语句) [AS]&lt;别名&gt;[ WHERE &lt;条件表达式&gt; ][GROUP BY &lt;列名1&gt; [ HAVING &lt;条件表达式&gt; ] ][ORDER BY &lt;列名2&gt; [ ASC|DESC ] ]; SELECT子句：指定要显示的属性列 FROM子句：指定查询对象（基本表或视图） WHERE子句：指定查询条件 GROUP BY子句：对查询结果按指定列的值分组，该属性列值 相等的元组为一个组。通常会在每组中作用聚集函数。 HAVING短语：只有满足指定条件的组才予以输出 ORDER BY子句：对查询结果表按指定列值的升序或降序排序 查询满足条件的元组 123SELECT SnameFROM StudentWHERE Sdept = &#x27;CS&#x27;; 比较大小 确定范围 确定集合 谓词：IN &lt;值表&gt;, NOT IN &lt;值表&gt; 字符匹配 谓词： [NOT] LIKE ‘&lt;匹配串&gt;’ [ESCAPE ‘ &lt;换码字符&gt;’] &lt;匹配串&gt;可以是一个完整的字符串，也可以含有通配符%（任意长度（长度可以为0）的字符串）和 _（任意单个字符） ​ 例如：a%b表示以a开头，以b结尾的任意长度的字符串 ​ 例如：a_b表示以a开头，以b结尾的长度为3的任意字符串 匹配串为固定字符串 - [例3.29] 查询学号为201215121的学生的详细情况。 SELECT * FROM Student WHERE Sno LIKE ‘201215121'; - 等价于： SELECT * FROM Student WHERE Sno = '201215121'; 123456789101112131415 - 匹配串为含通配符的字符串 ```sql [例3.30] 查询所有姓刘学生的姓名、学号和性别。 ​ SELECT Sname, Sno, Ssex ​ FROM Student ​ WHERE Sname LIKE &#x27;刘%&#x27;; ​ [例3.31] 查询姓&quot;欧阳&quot;且全名为三个汉字的学生的姓名。 ​ SELECT Sname ​ FROM Student ​ WHERE Sname LIKE &#x27;欧阳__’; 使用换码字符将通配符转义为普通字符 ESCAPE ‘＼’ 表示“ ＼” 为换码字符 [例3.34] 查询DB_Design课程的课程号和学分。 SELECT Cno，Ccredit FROM Course WHERE Cname LIKE 'DB\\_Design' ESCAPE '\\ ' ; [例3.35] 查询以\"DB_\"开头，且倒数第3个字符为 i的课程的详细情况。 SELECT * FROM Course WHERE Cname LIKE 'DB\\_%i_ _' ESCAPE '\\ ' ; &lt;!--code￼4--&gt; 多重条件查询 逻辑运算符：AND和 OR来连接多个查询条件 AND的优先级高于OR 可以用括号改变优先级 对查询结果排序 ORDER BY子句 可以按一个或多个属性列排序 升序：ASC;降序：DESC;缺省值为升序 对于空值，排序时显示的次序由具体系统实现来决定 聚集函数 聚集函数： 统计元组个数 COUNT(*) 统计一列中值的个数 COUNT([DISTINCT|ALL] &lt;列名&gt;) 计算一列值的总和（此列必须为数值型） SUM([DISTINCT|ALL] &lt;列名&gt;) 计算一列值的平均值（此列必须为数值型） AVG([DISTINCT|ALL] &lt;列名&gt;) 求一列中的最大值和最小值 MAX([DISTINCT|ALL] &lt;列名&gt;) MIN([DISTINCT|ALL] &lt;列名&gt;) 对查询结果分组 GROUP BY子句分组 细化聚集函数的作用对象 如果未对查询结果分组，聚集函数将作用于整个查询结果 对查询结果分组后，聚集函数将分别作用于每个组 按指定的一列或多列值分组，值相等的为一组 123456789101112[例3.48 ]查询平均成绩大于等于90分的学生学号和平均成绩因为WHERE子句中是不能用聚集函数作为条件表达式，下面的语句是不对的： SELECT Sno, AVG(Grade) FROM SC WHERE AVG(Grade)&gt;=90 GROUP BY Sno;正确的查询语句应该是： SELECT Sno, AVG(Grade) FROM SC GROUP BY Sno HAVING AVG(Grade)&gt;=90; ch14 SQL 数据查询（连接） 连接查询 连接查询：同时涉及两个以上的表的查询 连接条件或连接谓词：用来连接两个表的条件 一般格式： [&lt;表名1&gt;.]&lt;列名1&gt; &lt;比较运算符&gt; [&lt;表名2&gt;.]&lt;列名2&gt; [&lt;表名1&gt;.]&lt;列名1&gt; BETWEEN [&lt;表名2&gt;.]&lt;列名2&gt; AND [&lt;表名2&gt;.]&lt;列名3&gt; 连接字段：连接谓词中的列名称 连接条件中的各连接字段类型必须是可比的，但名字不必相同 123SELECT Student.Sno,Sname,Ssex,Sage,Sdept,Cno,Grade FROM Student,SC WHERE Student.Sno = SC.Sno; 连接操作的执行过程 嵌套循环法（NESTED-LOOP） 首先在表1中找到第一个元组，然后从头开始扫描表2，逐一查找满足连接件的元组，找到后就将表1中的第一个元组与该元组拼接起来，形成结果表中一个元组。 表2全部查找完后，再找表1中第二个元组，然后再从头开始扫描表2，逐一查找满足连接条件的元组，找到后就将表1中的第二个元组与该元组拼接起来，形成结果表中一个元组。 重复上述操作，直到表1中的全部元组都处理完毕 排序合并法（SORT-MERGE） ​ 常用于=连接 首先按连接属性对表1和表2排序 对表1的第一个元组，从头开始扫描表2，顺序查找满足连接条件的元组，找到后就将表1中的第一个元组与该元组拼接起来，形成结果表中一个元组。当遇到表2中第一条大于表1连接字段值的元组时，对表2的查询不再继续 索引连接（INDEX-JOIN） 对表2按连接字段建立索引 对表1中的每个元组，依次根据其连接字段值查询表2的索引，从中找到满足条件的元组，找到后就将表1中的第一个元组与该元组拼接起来，形成结果表中一个元组 同时进行连接和选择 12345[例 3.51]查询选修2号课程且成绩在90分以上的所有学生的学号和姓名。 SELECT Student.Sno, Sname FROM Student, SC WHERE Student.Sno=SC.Sno AND SC.Cno=&#x27; 2 &#x27; AND SC.Grade&gt;90; 执行过程: 先从SC中挑选出Cno='2’并且Grade&gt;90的元组形成一个中间关系 再和Student中满足连接条件的元组进行连接得到最终的结果关系 自身连接 自身连接：一个表与其自己进行连接 需要给表起别名以示区别 由于所有属性名都是同名属性，因此必须使用别名前缀 1234[例 3.52]查询每一门课的间接先修课（即先修课的先修课） SELECT FIRST.Cno, SECOND.Cpno FROM Course FIRST, Course SECOND WHERE FIRST.Cpno = SECOND.Cno; 外连接 外连接与普通连接的区别 普通连接操作只输出满足连接条件的元组 外连接操作以指定表为连接主体，将主体表中不满足连接条件的元组一并输出 左外连接 列出左边关系中所有的元组 右外连接 列出右边关系中所有的元组 多表连接 多表连接：两个以上的表进行连接 [例3.54]查询每个学生的学号、姓名、选修的课程名及成绩 1234SELECT Student.Sno, Sname, Cname, GradeFROM Student, SC, Course /*多表连接*/WHERE Student.Sno = SC.Sno AND SC.Cno = Course.Cno; ch15 SQL数据查询（嵌套） 一个SELECT-FROM-WHERE语句称为一个查询块 将一个查询块嵌套在另一个查询块的WHERE子句或HAVING短语的条件中的查询称为嵌套查询 123456SELECT Sname /*外层查询/父查询*/ FROM Student WHERE Sno IN ( SELECT Sno /*内层查询/子查询*/ FROM SC WHERE Cno= &#x27; 2 &#x27;); 上层的查询块称为外层查询或父查询 下层查询块称为内层查询或子查询 子查询的限制 不能使用ORDER BY子句 1234567891011121314151617SELECT Sdept FROM Student WHERE Sname= &#x27; 刘晨 &#x27;;结果为： CSSELECT Sno, Sname, Sdept FROM Student WHERE Sdept= &#x27; CS &#x27;; SELECT Sno, Sname, SdeptFROM StudentWHERE Sdept IN (SELECT Sdept FROM Student WHERE Sname= &#x27; 刘晨 &#x27;); 带有IN谓词的子查询 带有比较运算符的子查询 带有ANY（SOME）或ALL谓词的子查询 带有EXISTS谓词的子查询","categories":[{"name":"数据库","slug":"数据库","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"数据管理基础","slug":"数据管理基础","permalink":"https://freeeeeeeeedom.gitee.io/tags/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/"}]},{"title":"2022-4-14","slug":"2022-4-14","date":"2022-04-14T10:28:54.000Z","updated":"2022-04-15T04:05:08.161Z","comments":true,"path":"2022/04/14/2022-4-14/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/14/2022-4-14/","excerpt":"","text":"To Do 搭建博客 CS144 lab1 CS144 lab2 锻炼 5km 核酸检测 Leetcode *3 微信小程序 计网实验 数据库JDBC 总结 string.assign()用法 assign方法可以理解为先将原字符串清空，然后赋予新的值作替换。 返回类型为 string类型的引用。其常用的重载也有下列几种： string&amp; assign(const string&amp; str); 替换字串 1234string a = &quot;HELLO&quot;;a.assign(&quot;Go&quot;);cout&lt;&lt;a&lt;&lt;endl;//打印结果为Go string&amp; assign ( const string&amp; str, size_t pos, size_t n ); 将str的内容从位置pos起的n个字符作为原字串的新内容赋给原字串 1234string testassign = &quot;Hello World&quot;;testassign.assign(&quot;Come on!&quot;, 5, 2);cout&lt;&lt;testassign&lt;&lt;endl;//打印结果为 on string&amp; assign ( const char* s, size_t n ); 将字符数组或者字符串的首n个字符替换原字符串内容 1234string testassign = &quot;Hello World&quot;;testassign.assign(&quot;go back to China&quot;, 7);cout&lt;&lt;testassign&lt;&lt;endl;//打印结果为go back string&amp; assign ( const char* s ); 将字符串或者字符数组作为新内容替换原字串 12345string testassign = &quot;Hello World&quot;;char ch[20] = &quot;go back to shanghai&quot;;testassign.assign(ch);cout&lt;&lt;testassign&lt;&lt;endl;//打印结果为 go back to shanghai string&amp; assign ( size_t n, char c ); 将原字串替换为n个字符c 12345string testassign = &quot;Hello World&quot;;char ch = &#x27;?&#x27;;testassign.assign(5, ch);cout&lt;&lt;testassign&lt;&lt;endl;//打印结果为????? template string&amp; assign ( InputIterator first, InputIterator last ); 需要include 12345string testassign = &quot;Hello World&quot;;testassign.assign(istream_iterator&lt;char&gt;(cin), istream_iterator&lt;char&gt;());//输入abcdecout&lt;&lt;testassign&lt;&lt;endl;//打印结果为 abcde 5km耗时 26min26s 图床SMMS+Picgo 解决了复选框的显示问题 不过今天Leetcode没刷，cs144也没完成","categories":[{"name":"Everday","slug":"Everday","permalink":"https://freeeeeeeeedom.gitee.io/categories/Everday/"}],"tags":[{"name":"2022_Spring","slug":"2022-Spring","permalink":"https://freeeeeeeeedom.gitee.io/tags/2022-Spring/"}]},{"title":"CS 144 Lab 1","slug":"CS-144-Lab-1","date":"2022-04-14T09:31:07.000Z","updated":"2022-04-14T10:02:28.526Z","comments":true,"path":"2022/04/14/CS-144-Lab-1/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/14/CS-144-Lab-1/","excerpt":"","text":"Lab Checkpoint 1: stitching substrings into a byte stream TCP概述 在实验1中，你将实现一个流重组器–一个将字节流的小片段（称为子串或片段）缝合到连续流中的模块。 的小块字节流（称为子串，或段）重新拼接成一个连续的字节流。 顺序正确的字节流 Interface 1234567891011121314151617//构造器，最多存储 Capacity个字节StreamReassembler(const size_t capacity);//接收一个子串并将任何新的连续字节写入流中，同时保持在 &quot;容量 &quot;的内存限制之内。超过容量的字节 超过容量的字节将被默默地丢弃。// `data`: 子串// `index` 表示子串中第一个字节的索引// `eof`: 子串的最后一个字节是整个字节流的结尾void push_substring(const string &amp;data, const uint64_t index, const bool eof);//接受重组后的字节流ByteStream &amp;stream_out();//已存储但尚未重新组合的子串中的字节数size_t unassembled_bytes() const;//内部状态是否为空（除输出流外）？bool empty() const; 我们的任务是实现StreamReassembler类 What’s the “capacity”? 你的push_substring方法将忽略任何会导致StreamReassembler超过其 &quot;容量 &quot;的字符串部分 Capacity由两部分构成：（如图） 重组后的ByteStream中的字节数（下面以绿色显示） 未组装的 &quot;子串 &quot;可使用的最大字节数（显示为 以红色显示 当你实现StreamReassembler并通过测试时，你可能会发现这幅图很有用。测试时，你可能会发现这张图片很有用–&quot;正确 &quot;的行为并不总是自然的。","categories":[{"name":"Computer Network","slug":"Computer-Network","permalink":"https://freeeeeeeeedom.gitee.io/categories/Computer-Network/"}],"tags":[{"name":"CS144","slug":"CS144","permalink":"https://freeeeeeeeedom.gitee.io/tags/CS144/"}]},{"title":"CS144 Lab 0","slug":"CS-144-Lab-0","date":"2022-04-14T08:53:52.000Z","updated":"2022-04-14T09:28:07.449Z","comments":true,"path":"2022/04/14/CS-144-Lab-0/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/14/CS-144-Lab-0/","excerpt":"","text":"Lab Checkpoint 0: networking warmup 1 在您的计算机上设置GNU/Linux CS144的作业要求使用GNU/Linux操作系统和一个支持C++ 2017标准的最新C编译器。 支持C 2017标准。请在这三个选项中选择一个。 2 手工联网 2.1 Fetch a Web page 在虚拟机中打开终端，通过命令行访问 指定网页 1telnet cs144.keithw.org http 依次输入 123GET /hello HTTP/1.1 Host: cs144.keithw.orgConnection: close 然后两次回车 此时窗口会显示 Hello CS144 ! 2.2 Send yourself an email 依然是命令行，注意邮箱需要换成自己的。 1telnet 148.163.153.234 smtp 123HELO mycomputer.stanford.eduMAIL FROM: sunetid @stanford.eduRCPT TO: sunetid @stanford.edu 123From: sunetid@stanford.eduTo: sunetid@stanford.eduSubject: Hello from CS144 Lab 0! 1QUIT 2.3 Listening and connecting 打开一个终端。 1netcat -v -l -p 9090 打开另一个终端 1telnet localhost 9090 此时两个终端可以实现通信。 3 WebGet 使用TCPSocket来实现发送 http 请求，并获取响应信息，打印出来。 创建一个TCPSocket并与服务器建立连接。 向服务器发送请求，格式参照前面fetch a web page部分，注意在HTTP中每行的结尾应该为\\r\\n。 发送完请求后，客户端应该关闭TCPSocket的写功能，对应前面的Connection: close，告诉服务器请求已经发送完毕，服务器只要回复完数据后就可以立刻断开连接。 循环读取从服务器发送过来的信息，直到遇到 Eof (end of file)。 最后记得需要关闭前面创建的TCPSocket。 根据所给的API，和前面的warmup，可以实现，代码如下 1234567891011121314void get_URL(const string &amp;host, const string &amp;path) &#123; TCPSocket sock; sock.connect(Address(host, &quot;http&quot;)); sock.write(&quot;GET &quot; + path + &quot; HTTP/1.1\\r\\n&quot;); sock.write(&quot;Host: &quot; + host + &quot;\\r\\n&quot;); sock.write(&quot;Connection: close \\r\\n&quot;); sock.write(&quot;\\r\\n&quot;); while(!sock.eof())&#123; auto rsp = sock.read(); cout &lt;&lt; rsp; &#125; sock.close();&#125; 4 An in-memory reliable byte stream 实现一个有序字节流 byte_stream.hh 1234567891011class ByteStream &#123; private: // Your code here -- add private members as necessary. std::deque&lt;char&gt; _buffer = &#123;&#125;; size_t _capacity = 0; size_t _read_count = 0; size_t _write_count = 0; bool _input_ended_flag = false; bool _error = false; //!&lt; Flag indicating that the stream suffered an error. //...... byte_stream.cc 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869ByteStream::ByteStream(const size_t capacity) : _capacity(capacity) &#123;&#125;size_t ByteStream::write(const string &amp;data) &#123; size_t len = data.length(); if (len &gt; _capacity - _buffer.size()) &#123; len = _capacity - _buffer.size(); &#125; _write_count += len; for (size_t i = 0; i &lt; len; i++) &#123; _buffer.push_back(data[i]); &#125; return len;&#125;//! \\param[in] len bytes will be copied from the output side of the bufferstring ByteStream::peek_output(const size_t len) const &#123; size_t length = len; if (length &gt; _buffer.size()) &#123; length = _buffer.size(); &#125; return string().assign(_buffer.begin(), _buffer.begin() + length);&#125;//! \\param[in] len bytes will be removed from the output side of the buffervoid ByteStream::pop_output(const size_t len) &#123; size_t length = len; if (length &gt; _buffer.size()) &#123; length = _buffer.size(); &#125; _read_count += length; while (length--) &#123; _buffer.pop_front(); &#125; return;&#125;//! Read (i.e., copy and then pop) the next &quot;len&quot; bytes of the stream//! \\param[in] len bytes will be popped and returned//! \\returns a stringstd::string ByteStream::read(const size_t len) &#123; string msg; if(len &gt; _buffer.size())&#123; msg = peek_output(_buffer.size()); pop_output(_buffer.size()); &#125; else&#123; msg = peek_output(len); pop_output(len); &#125; return msg;&#125;void ByteStream::end_input() &#123; _input_ended_flag = true; &#125;bool ByteStream::input_ended() const &#123; return _input_ended_flag; &#125;size_t ByteStream::buffer_size() const &#123; return _buffer.size(); &#125;bool ByteStream::buffer_empty() const &#123; return _buffer.size() == 0; &#125;bool ByteStream::eof() const &#123; return buffer_empty() &amp;&amp; input_ended(); &#125;size_t ByteStream::bytes_written() const &#123; return _write_count; &#125;size_t ByteStream::bytes_read() const &#123; return _read_count; &#125;size_t ByteStream::remaining_capacity() const &#123; return _capacity - _buffer.size(); &#125;","categories":[{"name":"Computer Network","slug":"Computer-Network","permalink":"https://freeeeeeeeedom.gitee.io/categories/Computer-Network/"}],"tags":[{"name":"CS144","slug":"CS144","permalink":"https://freeeeeeeeedom.gitee.io/tags/CS144/"}]}],"categories":[{"name":"数据库","slug":"数据库","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"Everday","slug":"Everday","permalink":"https://freeeeeeeeedom.gitee.io/categories/Everday/"},{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Computer Network","slug":"Computer-Network","permalink":"https://freeeeeeeeedom.gitee.io/categories/Computer-Network/"}],"tags":[{"name":"Start","slug":"Start","permalink":"https://freeeeeeeeedom.gitee.io/tags/Start/"},{"name":"数据管理基础","slug":"数据管理基础","permalink":"https://freeeeeeeeedom.gitee.io/tags/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/"},{"name":"2022_Spring","slug":"2022-Spring","permalink":"https://freeeeeeeeedom.gitee.io/tags/2022-Spring/"},{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"},{"name":"CS144","slug":"CS144","permalink":"https://freeeeeeeeedom.gitee.io/tags/CS144/"}]}