{"meta":{"title":"生产Buging","subtitle":"Coder && Joker","description":"Stay hungry Stay foolish","author":"WhooooRui","url":"https://freeeeeeeeedom.gitee.io","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2022-04-15T15:14:11.205Z","updated":"2022-04-15T15:14:11.205Z","comments":false,"path":"/404.html","permalink":"https://freeeeeeeeedom.gitee.io/404.html","excerpt":"","text":""},{"title":"电影","date":"2022-04-10T06:17:49.000Z","updated":"2022-04-22T03:40:10.262Z","comments":false,"path":"movies/index.html","permalink":"https://freeeeeeeeedom.gitee.io/movies/index.html","excerpt":"","text":"八恶人 美国西部版狼人杀"},{"title":"书单","date":"2022-04-10T06:17:49.000Z","updated":"2022-04-19T13:14:25.536Z","comments":false,"path":"books/index.html","permalink":"https://freeeeeeeeedom.gitee.io/books/index.html","excerpt":"","text":""},{"title":"相册","date":"2022-04-19T09:53:18.000Z","updated":"2022-04-19T14:29:15.798Z","comments":true,"path":"Gallery/index.html","permalink":"https://freeeeeeeeedom.gitee.io/Gallery/index.html","excerpt":"","text":"壁纸 收藏的一些壁纸 漫威 关于漫威的图片 OH MY GIRL 关于OH MY GIRL的图片"},{"title":"分类","date":"2022-04-10T06:17:49.000Z","updated":"2022-04-19T09:52:52.757Z","comments":true,"path":"categories/index.html","permalink":"https://freeeeeeeeedom.gitee.io/categories/index.html","excerpt":"","text":""},{"title":"音乐","date":"2022-04-10T06:17:49.000Z","updated":"2022-04-22T03:32:43.878Z","comments":false,"path":"music/index.html","permalink":"https://freeeeeeeeedom.gitee.io/music/index.html","excerpt":"","text":"卡农 经典,永不过时"},{"title":"link","date":"2022-04-19T09:53:18.000Z","updated":"2022-04-19T13:14:46.489Z","comments":true,"path":"link/index.html","permalink":"https://freeeeeeeeedom.gitee.io/link/index.html","excerpt":"","text":""},{"title":"关于","date":"2022-04-19T13:16:54.624Z","updated":"2022-04-19T13:16:54.624Z","comments":false,"path":"about/index.html","permalink":"https://freeeeeeeeedom.gitee.io/about/index.html","excerpt":"","text":"你好，笔者就读于南京大学软件工程 精通CSS、JavaScript、PHP、ASP、C、C＋＋、C#、Java、Ruby、Perl、Lisp、python、Objective-C、ActionScript、Pascal、spss、sas等单词的拼写，熟悉Windows系统的开关机。 QQ: 709034836 Vx: 19552624136 Email: 709034836@qq.com"},{"title":"Repositories","date":"2022-04-15T15:14:11.218Z","updated":"2022-04-15T15:14:11.218Z","comments":false,"path":"repository/index.html","permalink":"https://freeeeeeeeedom.gitee.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-04-10T06:17:49.000Z","updated":"2022-04-19T09:52:30.162Z","comments":false,"path":"tags/index.html","permalink":"https://freeeeeeeeedom.gitee.io/tags/index.html","excerpt":"","text":""},{"title":"八恶人","date":"2022-04-22T06:17:49.000Z","updated":"2022-04-22T04:01:22.042Z","comments":true,"path":"movies/The Hateful 8/index.html","permalink":"https://freeeeeeeeedom.gitee.io/movies/The%20Hateful%208/index.html","excerpt":"","text":"Quote by ZhiHu:Quote\\ by\\ ZhiHu:Quote by ZhiHu: https://zhuanlan.zhihu.com/p/21431202 昆汀声称自己要拍十部电影然后退出电影界。说来也巧，这部名为《八恶人》的电影恰好是昆汀的第八部作品。整个故事其实非常的简单，可以用一句话概括。讲述赏金猎人们押送女囚时，被暴风雪困在一个酒馆，与营救女囚的同伙们相遭遇的故事。 1 | 境遇之剧 如果是抱着影视电影的目光来审读这个片子，恐怕难以刺激到人的神经，甚至会觉得废话连篇，全然没有之前昆汀的那种让人心跳加速的刺激。但是如果像是品读戏剧一样，慢慢回味这部作品，你会发现这是一出出色的“境遇剧”。在暴风雪中的明妮小旅店中形成了一个境遇，每个人的恶都毫无保留的在他人的目光中呈现，无论怎样辩白，都显得苍白无力，无法赢得他者的认同与信任。他人即地狱，指的就是这种感觉。昆汀将他的角色们放置在一个极端的封闭的环境中，通过种种抉择对人性进行考量。 所有的人物背景、线索都在人物的对话中交代，几乎只有马奎斯在虐杀老史密斯儿子的时候有回溯，其他人的历史过去都在台词中。大部分的场景在一家旅店中拍摄完成，时间也在一天之内，几乎符合三一律。在结构上如果按照线性播放，将第五章放到开头，一上场就引发一个小高潮，似乎会使电影效果更好。但是昆汀采用了插叙的手法，恰恰符合了戏剧中序幕、发展、高潮的程序。当“四个路人”那一个章节放在第五章的时候，既是前面因果的交待，也是人物性格的再翻转的契机。 在这部戏剧式的电影里，最有意思的是他们讨论的话题——“正义”。从马奎斯一上车就说出了“the hangman”的由来与意义，悬赏犯的活死成为了一套完整的法律程序履行的关键。很明显，死去的悬赏犯对赏金猎人来说更安全，更方便，但是对于整个国家法律来说，是不完整的程序履行。同时在旅店中行刑官与鲁斯探讨了“正义”与“法外正义”，悬赏犯经过不带任何感情色彩的人处刑，那么就是法律的实施，如果带着私愤由私人处刑，行为上便有着谋杀的意味。通过对“正义”的理解，形成了这部“境遇剧”电影总每个人物的人性。 2 | 人性难测 首先要谈论的是马奎斯沃伦。如果一个人说他参加南北战争，是林肯笔友，如今又是赏金猎人，做着除恶扬善的事儿，你一定会觉得他是圣徒了。实际上，他仅仅为了钱去抓逃犯，林肯笔友也是捏造的，更是为了越狱而不惜烧死自己的队友，身上有高额赏金。当这一切在旅店里被揭穿，旅店中其他人的怀疑与猜测随之而来，马奎斯任何辩驳都显得苍白。他设计杀害老将军，尽管他声称是为了被屠杀的黑人兄弟，但是鉴于他的前科，很难说有没有报复与泄愤的情绪。看似“正义”的行为，蒙上了邪恶的阴影。 黛西·多莫格，外表粗糙又十分有心计的女人。她早就知道有埋伏圈，所以才无所顾忌，满不在乎的直接对鲁斯说屋内有人是她的同伙。狡诈的是，她没告诉鲁斯只有一个不是她的同伙——南方老将军。如果不是鲁斯死的太早，她会等克里斯把毒咖啡喝下去。可以想象，到那时候，不要说马奎斯，就是连老将军斯坦福·史密斯也会被杀死。在最后她都不忘用心理战，争取克里斯站到她们一方来。但是，乔·盖奇桌下的枪时刻提醒着我们，这个女魔头没想让任何帮派之外的人活着。不得不承认Jennifer Jason Leigh的演技太好，对这个角色把控得当。将一个即将活命又陷入困境的女魔头的疯狂、愤怒表现的淋漓尽致，再配上一脸的血浆更是有种诡异的癫狂。 南方老将军斯坦福·史密斯的恶，不是展现在他参战时候屠杀黑人俘虏，而是展现在面对匪徒时候的态度。当他周围的人都被杀死的时候，一个曾经参战的老将军选择缄口不言，等待着他活命的机会。匪徒要他配合演戏的时候，他甚至说出了谁死都不在乎的话，并要尽他最大努力去演好这场埋伏戏。如果你不知道他为了活命不择手段，你会以为老斯坦福死的有一点冤枉，仅仅因为当年的仇恨就被杀死了，你还会因为他作为一个寻找儿子尸骨的老父亲而感动呢。 克里斯·马尼克斯，作为反叛军首领的儿子，他始终仇视着黑人上校马奎斯。在马车上挑拨鲁斯与马奎斯的关系，不断揭露马奎斯的虚伪，撕毁了所有人对马奎斯的信任。然而在他万分崇敬的老史密斯被马奎斯射杀之后，他不要说去为老将军复仇了，连抬尸体都没有参与，相反开开心心的披上了老将军的外套。 英国人奥斯瓦尔多，乔·盖奇，与墨西哥人鲍勃，本身具有匪徒的身份。刚看影片的开头，你会真的以为这三位只是无辜的路人，顶多会觉得回家看妈妈的乔·盖奇有点不能自圆其说。但是看完第四章节以后，优雅、风趣的奥斯瓦尔多优雅，在谈笑间杀死女仆，依然能做出冷静的决断。乔·盖奇，冷峻、从容，前一秒还在请人吃糖，后一秒已经将人枪杀在地，之后更是以悠闲的步态杀死了另一名帮工。与他们相比，墨西哥人鲍勃就显得疯狂残暴的多了，他子弹打完之后迅速拔刀捅死还在惊愕中迷失的戴夫，掏枪，开枪，拔刀，一气呵成。与他之后假装的憨厚、缓慢的帮工相比判若两人。 最后要说的是鲁斯·约翰。一个粗鲁的赏金猎人。疑心重，语言粗粝，行动暴力。然而就是这样一个角色，是恶人中最具感性的。他会为心中的字句感动，也会因为欺骗而愤怒，他执着于将悬赏犯吊死，完成一套完整的法律程序。应该说，鲁斯·约翰也是所有恶人中最接近于“正义”的。 当然，影片中的每个人都坚信自己是“正义”的。马奎斯维护黑人群体，匪帮为了情义救人，老将军战功显赫，克里斯支持叛军，鲁斯尊重法律。可是他们的行动暴露出来的残忍、自私以及种种人性的阴暗面，消解了他们口中自以为是的“正义”。这行动不光展现在“境遇”中的其他人，也展现给了屏幕前的观众们。人性的斑驳杂色，严肃又可笑的变换着。真正能评价他们的是作为“他者”的观众们。 3 | 他人地狱 作为一般的人物剧情片，大多是通过一两个镜头塑造人物，然后剧情与人物性格相互依附的发展、深化。如《老炮儿》一开始，六爷对小偷的说教一下子就使人物立起来了。但是《八恶人》很难把每个角色的单独概括出来，他们看似有着自己的个性，实际上每个人都是一片混沌。萨特认为人的存在先于本质，人只有在经历过不断选择之后，形成自己的本质。电影中的八个人相互憎恶，每个人都有劣迹斑斑的历史，都不算是传统意义上的英雄与好人，但是在厮杀过后，一直杀人的匪徒也显露了人性的光辉，相互仇视的黑白种族达到了和解。一直到每个人物都死去的那一刻，他的人物塑造才算是完成。 作为一部“境遇”电影，影片开头的耶稣像的有相当深刻的讽刺意味。人只能够通过自己选择后的行为，不断填充自己的本质。人带有上帝善良的底色这类说法在影片中通过每个人的历史与现在的行为，对其产生了极大的嘲讽。 鲁斯与马夫O·B一倒地宣告了戏剧高潮的到来，猎人与猎物双方的博弈刚刚开始。之前铺垫的人物形象开始在考验生死的境遇中发生化学反应。行动最快的是那个一直以来只要活着连手铐都戴的马奎斯上校。紧接着，曾经一度揭短歧视黑人的克里斯迅速跟马奎斯达成了结盟，在生死面前，偏见什么的都烟消云散了。“你永远不能相信黑人说的任何一句话。”这句白人的真理如同倒进厕所里的手枪熄火了。没人在乎过去与未来，歧视黑人的叛军和仇视白人不再重要，以后是不是红石镇的治安官也不再重要了，重要的是谁差点被毒死，说明谁不是要害人的那一个就足够了。人与人之间的信任就是如此简单。 等到影片的最后谈判阶段，悠闲杀人的乔·盖奇温柔的对死去哥哥的黛丝说着抱歉，谈笑间杀人的英国人奥斯瓦尔多依然镇定自若的要用自己的赏金换取克里斯的帮助，而一直掩藏的黛丝·多莫格突然一反之前，变得狂躁可怕起来。人的百态在短短的几十分钟内充分演绎。当然，年轻的克里斯仍旧做出了自己的选择，尽管有金钱的诱惑，有着不知真假的15杀手的威胁，他依旧同黑人马奎斯一同吊死了黛丝，而一直枪杀偷袭赏金犯的马奎斯也使用了绞杀的方式，意味着一个法外狂徒对法律的第一次认可。最后由马奎斯重复的说“the hangman”的由来，就是回扣点题，强调了“正义”。 奥斯瓦尔多曾说过“正义”与“法外正义”的区别，但是作为法律代表的治安官克里斯同带着高额赏金的马奎斯合力绞杀的场景，这样一份“正义”是法外还是法理之中呢？ 他人即地狱，当他者被消灭之后，自我的一切行为都没有了参照的意义，有的只是一片虚无。"},{"title":"卡农","date":"2022-04-10T06:17:49.000Z","updated":"2022-04-22T03:30:46.787Z","comments":true,"path":"music/Canon/index.html","permalink":"https://freeeeeeeeedom.gitee.io/music/Canon/index.html","excerpt":"","text":""}],"posts":[{"title":"C++OOP基础","slug":"C-OOP基础","date":"2022-04-22T02:23:33.000Z","updated":"2022-04-22T02:40:34.399Z","comments":true,"path":"2022/04/22/C-OOP基础/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/22/C-OOP%E5%9F%BA%E7%A1%80/","excerpt":"","text":"","categories":[{"name":"C++","slug":"C","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/"},{"name":"C++面向对象","slug":"C/C-面向对象","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"}],"tags":[{"name":"C++高级程序设计","slug":"C-高级程序设计","permalink":"https://freeeeeeeeedom.gitee.io/tags/C-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"}]},{"title":"C++友元","slug":"C-友元","date":"2022-04-22T02:23:23.000Z","updated":"2022-04-22T03:19:42.125Z","comments":true,"path":"2022/04/22/C-友元/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/22/C-%E5%8F%8B%E5%85%83/","excerpt":"","text":"友元函数 类外部不能访问该类的 private 成员 通过该类的 public 方法 会降低对 private 成员的访问效率，缺乏灵活性:如果使用public方法使用这些成员则是实行调用函数，降低调用效率，消耗时间 例：矩阵类(Matrix)、向量类(Vector)和全局函数(multiply)，全局函数实现矩阵和向量相乘 隐藏细节、保持一致性 友元是数据保护和访问效率的折衷方案 友元可以访问private和protected的成员 1. Example:Matrix 和 Vector 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374//Matrixclass Matrix&#123; int *p_data;//逻辑二维，一维存储 int lin,col; public: Matrix(int l, int c)&#123; lin = l; col = c; p_data = new int[lin*col]; &#125; ~Matrix()&#123; delete []p_data; &#125; int &amp;element(int i, int j)&#123; return *(p_data+i*col+j);//指针类型的偏移是根据指针指向对象的类型 &#125; void dimension(int &amp;l, int &amp;c)&#123; l = lin; c = col; &#125; void display()&#123; int *p=p_data; for (int i=0; i&lt;lin; i++)&#123; for (int j=0; j&lt;col; j++)&#123; cout &lt;&lt; *p &lt;&lt; &#x27; &#x27;; p++; &#125; cout &lt;&lt; endl; &#125; &#125;;&#125;;//Vectorclass Vector&#123; int *p_data; int num; public: Vector(int n)&#123; num = n; p_data = new int[num]; &#125; ~Vector()&#123; delete []p_data; &#125; int &amp;element(int i) &#123; return p_data[i]; &#125; void dimension(int &amp;n) &#123; n = num; &#125; void display()&#123; int *p=p_data; for (int i=0; i&lt;num; i++,p++) cout &lt;&lt; *p &lt;&lt; &#x27; &#x27;; cout &lt;&lt; endl; &#125;&#125;;//实现 矩阵和一个向量进行计算，效率比较void multiply(Matrix &amp;m, Vector &amp;v, Vector &amp;r)&#123; int lin, col; m.dimension(lin,col); for (int i=0; i&lt;lin; i++)&#123; r.element(i) = 0; for (int j=0; j&lt;col; j++) r.element(i) += m.element(i,j)*v.element(j);//这里的调用效率会比较低 &#125;&#125;void main()&#123; Matrix m(10,5); Vector v(5); Vector r(10); multiply(m,v,r); m.display(); v.display(); r.display();&#125; 2. 友元的分类 2.1. 友元函数 一个全局函数是一个类的友元，如果在这之前没有声明也是可以进行声明友元函数。 2.2. 友元类 一个类是另一个类的友元 class关键字可以省略 第一种情况:friend class B: 编译器会寻找有没有类B 如果没有则会引入一个B 第二种情况:friend B 省略关键字的时候不会引入B，如果没有B会报错模板类 但是这种形式常用于模板类(T或者typedef的时候来写) 2.3. 友元类成员函数 在完整的类的声明完成之前是不能够被声明的。 3. 友元函数分类实例 12345678910void func() ;class B;//这种情况下B不是必须的class C&#123; void f();&#125;; class A&#123; friend void func();//友元函数 friend class B; //友元类:B中的每一个函数都可以访问A的成员函数 friend void C::f();//友元类成员函数&#125;; 4. 友元函数声明 友元函数在之前可以没有声明 友元函数如果之前还没有声明过，则当做已经声明了 但是友元类函数在完整的类声明出现前不能声明友元函数。 为什么友元函数和友元类成员函数的声明要求是不一样的？ 数据的一致性:避免对应类里面没有这个函数(也就是C的完整定义必须有) 成员函数依赖于类 5. 友元函数作用 作用 提高程序设计灵活性 数据保护和对数据的存取效率之间的一个折中方案 友元不具有传递性: 不能说A是B的友元，B是C的友元就可以得出A是C的友元 友元必须显式声明 123456class Matrix&#123; friend void multiply(Matrix &amp;m, Vector &amp;v, Vector &amp;r);&#125;;class Vector&#123; friend void multiply(Matrix &amp;m, Vector &amp;v, Vector &amp;r);&#125;; 上面这段代码可以编译吗？(循环依赖) 不可以编译的，要在前面先声明Vector 使用变量前必须要先声明 Matrix里面如果去掉Vector中的引用？会出现内存分配问题(不知道如何拷贝，而引用大小是相同的) 解决方案:不完全声明:class vector; 6. 声明两个类互为友元 12345678910111213141516171819class A&#123; int a; public: friend class B; void show(B &amp;b)&#123; std::cout &lt;&lt; b.b;//这里可以吗？不行，不知道B中有b &#125;&#125;class B&#123; int b; public: friend class A; void show(A &amp;a)&#123; std::cout &lt;&lt; a.a;//这里是可以的 &#125;&#125;void A::show (B &amp;b)&#123;//只能在这里面实现 std::cout &lt;&lt; b.b;&#125; 互为友元的两个类声明时是否需要前置声明 如果A和B不在一个命名空间不能通过编译 如果A和B在一个命名空间的话可以没有前置声明 7. 封装原则 避免将data member放在公开接口中(使用get和set方法) 尽量将get和set成员更加完备化 遵循迪米特法则(最小知识原则):尽量让别的类对当前类的依赖最小 123456789101112class AccessLevels &#123; public: int getReadOnly const &#123; return readOnly; &#125; void setReadWrite(int value) &#123; readWrite = value; &#125; int getReadWrite() &#123; return readWrite; &#125; void setWriteOnly(int value) &#123; writeOnly = value; &#125; private: int noAccess; int readOnly; int readWrite; int writeOnly;&#125;; 努力让接口完满 (complete) 且最小化 8. 友元和protected 12345678910111213141516class Base&#123; protected : int prot_mem;// protected 成员&#125;;class Sneaky : public Base &#123;//36min friend void clobber(Sneaky&amp;);//能访问Sneaky::prot_mem friend void clobber(Base&amp;);//不能访问Base::prot_mem，对外不可见 int j;// j 默认是private void clobber(Sneaky &amp;s) &#123; s.j = s.prot_mem = 0; &#125;//正确：clobber 能访问Sneaky对象的 private和protected成员 void clobber(Base &amp;b) &#123; b.prot_mem = 0; &#125;//错误:clobber 不能访问Base的 protected 成员&#125; 继承过程中的友元传递:友元不具有传递性，不可以访问任意基类的","categories":[{"name":"C++","slug":"C","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/"},{"name":"C++面向对象","slug":"C/C-面向对象","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"}],"tags":[{"name":"C++高级程序设计","slug":"C-高级程序设计","permalink":"https://freeeeeeeeedom.gitee.io/tags/C-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"}]},{"title":"C++虚函数","slug":"C-虚函数","date":"2022-04-22T02:23:14.000Z","updated":"2022-04-22T06:24:18.046Z","comments":true,"path":"2022/04/22/C-虚函数/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/22/C-%E8%99%9A%E5%87%BD%E6%95%B0/","excerpt":"","text":"","categories":[{"name":"C++","slug":"C","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/"},{"name":"C++面向对象","slug":"C/C-面向对象","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"}],"tags":[{"name":"C++高级程序设计","slug":"C-高级程序设计","permalink":"https://freeeeeeeeedom.gitee.io/tags/C-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"}]},{"title":"C++封装","slug":"C-封装","date":"2022-04-22T02:23:06.000Z","updated":"2022-04-22T02:37:43.042Z","comments":true,"path":"2022/04/22/C-封装/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/22/C-%E5%B0%81%E8%A3%85/","excerpt":"","text":"","categories":[{"name":"C++","slug":"C","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/"},{"name":"C++面向对象","slug":"C/C-面向对象","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"}],"tags":[{"name":"C++高级程序设计","slug":"C-高级程序设计","permalink":"https://freeeeeeeeedom.gitee.io/tags/C-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"}]},{"title":"C++类成员变量","slug":"C-类成员变量","date":"2022-04-22T02:22:53.000Z","updated":"2022-04-22T02:38:21.124Z","comments":true,"path":"2022/04/22/C-类成员变量/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/22/C-%E7%B1%BB%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F/","excerpt":"","text":"","categories":[{"name":"C++","slug":"C","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/"},{"name":"C++面向对象","slug":"C/C-面向对象","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"}],"tags":[{"name":"C++高级程序设计","slug":"C-高级程序设计","permalink":"https://freeeeeeeeedom.gitee.io/tags/C-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"}]},{"title":"C++继承","slug":"C-继承","date":"2022-04-22T02:22:43.000Z","updated":"2022-04-22T06:34:39.229Z","comments":true,"path":"2022/04/22/C-继承/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/22/C-%E7%BB%A7%E6%89%BF/","excerpt":"","text":"继承机制 继承机制 基于目标代码的复用 对事物进行分类 派生类是基类的具体化 把事务(概念)以层次结构表示出来，有利于描述和解决问题 增量开发(面向接口编程) 单继承 protected关键字 如果没有继承的话，protected和private是相同的 派生类可以访问基类中protected的属性的成员。 派生类不可以访问基类中的对象的protected的属性。 派生类含有基类的所有成员变量 struct 默认访问权限是private 代码 123456789101112131415161718192021222324252627class Student &#123; int id;//id在Undergraduated_Student中仍然是私有的 public: char nickname[16]; void set_ID (int x) &#123;id = x;&#125; void SetNickName (char *s) &#123;strcpy (nickname,s);&#125; void showInfo () &#123;cout &lt;&lt; nickname &lt;&lt; &quot;:&quot; &lt;&lt; id &lt;&lt; endl ;&#125; void showInfo(int x)&#123;cout &lt;&lt; x &lt;&lt; endl;&#125;&#125;;//基类和派生类 &lt;--&gt; 父类和子类// :bclass Undergraduated_Student: public Student &#123; int dept_no;//学院编号 public: void setDeptNo(int x)&#123;dept_no = x;&#125; void showInfo()&#123;cout &lt;&lt; dept_no &lt;&lt; &quot;:&quot; &lt;&lt; nickname &lt;&lt; endl;&#125; void set_ID (int x) &#123;……&#125; void showInfo(int x)&#123; cout &lt;&lt; dept_no &lt;&lt; &quot;:&quot; &lt;&lt; nickname &lt;&lt; endl; &#125; private: Student::nickname;//这样在才能修改可见性 void SetNickName();//新定义了一个private方法，父类对应方法被隐藏&#125;;Undergraduated_Student us;us.showInfo(10);//可以吗？不可以,因为是新的名空间，重定义后面的名空间访问不到//C++方法调用:名字匹配，匹配成功后直接调用 继承方式 public、private:访问权限只和基类中的访问权限有关 public public:class Undergraduated_Student: public Student 原来的public是public，原来的private是private 如果没有特殊需要建议使用public private private:原来所有的都是private，但是这个private是对于Undergraduate_Student大对象而言，所以他自己还是可以访问的。 默认的继承方式 protected 如果没有继承的话，protected和private是相同的 派生类可以访问基类中protected的属性的成员。 派生类不可以访问基类中的对象的protected的属性。 派生类含有基类的所有成员变量 继承声明 1234//错误声明class Undergraduated_Student : public Student;//声明的时候是不用声明继承的//正确声明class Undergraduated_Student; 基类和派生类的关系 派生类中的showInfo() showInfo()重载，隐藏基类的同名函数 不是覆盖 基类的showInfo() 如果基类中有一个void ShowInfo(int x):那么是不是从基类可以进行调用呢？ 不可以(所有函数都被隐藏) 因为重定义将名空间进行了覆盖 父类中的所有的函数都不可见:但是我们可以通过指定名空间来完成访问:using Student::showInfo,所有的版本都可以见，这时候是重写。 方法调用的顺序 首先在名空间中按照名称进行匹配 一旦名称匹配，则会校验函数参数 匹配不上是不会去别的名空间进行匹配(也就是不会去student那里去匹配) 方法覆盖 我们需要指明覆盖:virtual:在对应想要重写的函数的前面写上一个virtual 虚函数实现的是多态 不可以被继承的部分 构造函数和析构函数是不可以被继承的:是对类进行初始化的，无法继承 运算符重载函数也是不可以被继承的 访问权限的修改方法 123private: Student::nickname;//char nickname[16]语法上没有问题，没有将原来的nickname变成私有的 void SetNickName();//新定义pricate方法，父类方法被隐藏 继承的初始化 派生类对象的初始化 由基类和派生类共同完成 构造函数的执行次序 基类的构造函数 派生类对象成员类的构造函数！！！ 派生类的构造函数 析构函数的执行次序（与构造函数的执行顺序相反） 派生类的析构函数 派生类对象成员类的析构函数 基类的析构函数 基类构造函数的调用 缺省执行基类默认构造函数 如需执行基类的非默认构造函数，必须在派生类的构造函数成员初始化表中指出 123456789101112131415161718192021222324252627282930//测试执行顺序class A&#123; int x; public: A() &#123;x = 0; &#125; A(int i) &#123; x = i; &#125;&#125;;class B: public A&#123; int y; public: B()&#123;y = 0;&#125; B(int i) &#123;y = i;&#125; B(int i, int j):A(i)&#123; //成员初始化表中显式调用基类构造函数 y = j; &#125; B(const B&amp; b)&#123;//拷贝构造 //首先调用A的默认初始化构造函数 //如果想要调用对应拷贝构造函数，必须用成员初始化表声明 //拷贝构造函数 &#125;&#125;;B b1;//执行A::A()和B::B()B b2(1);//执行A::A()和B::B(int)B b3(0,1);//执行A::A(int)和B::B(int,int)class B: public A&#123; public: //继承下来多版本的构造函数 using A::A; //继承A的构造函数&#125; 多继承 友元和protected 代码 123456789101112131415class Base&#123;protected: int prot_mem;//protected成员&#125;;class Sneaky : public Base&#123; friend void clobber(Sneaky&amp;); friend void clobber(Base&amp;); int j;//默认是 pricate void clobber(Sneaky &amp; s)&#123; s.j = s.prot_mem = 0; &#125;//正确，clobber可以访问Sneaky对象的private和protected成员 void clobber(Base &amp;b)&#123; b.prot_mem = 0; &#125;//错误，clobber不能访问Base的protected成员&#125; Question : C++ 中基类和派生类的同名函数重载问题 1234567891011121314151617181920212223class A &#123; public: void fn() &#123;&#125; void fn(int a) &#123;&#125; &#125;; class B : public A &#123; public: void fn() &#123;&#125; &#125;; int main() &#123; B b; b.fn(3); //Error 编译器报错，B中不存在fn(int)的函数 return 0; &#125; ！！！ C++ 中，同名函数的重载动作，只发生在自由函数中（即非成员），以及同一个class/struct内部的函数之间，不能跨越基类和派生类，当派生类写一个和基类同名的函数时（无论参数列表是否相同），此时发生的动作叫覆盖，即积累的同名函数在派生类内将变得无法直接调用（可以间接调用） 1234567891011121314151617181920212223242526272829struct A &#123; void foo(int d) &#123; cout &lt;&lt; &quot;A::foo - int&quot; &lt;&lt; endl; cout &lt;&lt; d &lt;&lt; endl; &#125; &#125;; struct B : public A &#123; void foo(double d) //覆盖了A::foo(int d); &#123; cout &lt;&lt; &quot;B::foo - double&quot; &lt;&lt; endl; cout &lt;&lt; d &lt;&lt; endl; &#125; &#125;; int main() &#123; A a; a.foo(10); B b; b.foo(10.2); b.foo(2); //调用的仍然是B::foo，虽然2明显是个整数 return 0; &#125; 输出结果如下” 12345A::foo - int10B::foo - double10.2B::foo - double //调用的仍然是B::foo，虽然2明显是个整数 那么，如何调用基类的foo(int)呢？ Method 1: 显示调用 12B b;b.A::foo(2); Method 2: 名空间 1234567891011121314151617181920 struct B : public A &#123; using A::foo; //通过“使用声明”，引入了A::foo…… void foo(double d) &#123; cout &lt;&lt; &quot;B::foo - double&quot; &lt;&lt; endl; cout &lt;&lt; d &lt;&lt; endl; &#125; &#125;; int main(void)&#123; B b; b.A::foo(3); b.foo(2); b.foo(10.234); &#125;","categories":[{"name":"C++","slug":"C","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/"},{"name":"C++面向对象","slug":"C/C-面向对象","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"}],"tags":[{"name":"C++高级程序设计","slug":"C-高级程序设计","permalink":"https://freeeeeeeeedom.gitee.io/tags/C-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"}]},{"title":"C++多态","slug":"C-多态","date":"2022-04-22T02:22:34.000Z","updated":"2022-04-22T02:37:41.340Z","comments":true,"path":"2022/04/22/C-多态/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/22/C-%E5%A4%9A%E6%80%81/","excerpt":"","text":"","categories":[{"name":"C++","slug":"C","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/"},{"name":"C++面向对象","slug":"C/C-面向对象","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"}],"tags":[{"name":"C++高级程序设计","slug":"C-高级程序设计","permalink":"https://freeeeeeeeedom.gitee.io/tags/C-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"}]},{"title":"C++动态内存","slug":"C-动态内存","date":"2022-04-22T02:22:24.000Z","updated":"2022-04-22T02:37:38.800Z","comments":true,"path":"2022/04/22/C-动态内存/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/22/C-%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98/","excerpt":"","text":"","categories":[{"name":"C++","slug":"C","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/"},{"name":"C++面向对象","slug":"C/C-面向对象","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"}],"tags":[{"name":"C++高级程序设计","slug":"C-高级程序设计","permalink":"https://freeeeeeeeedom.gitee.io/tags/C-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"}]},{"title":"C++指针与引用","slug":"C-指针与引用","date":"2022-04-22T02:22:12.000Z","updated":"2022-04-22T02:40:29.753Z","comments":true,"path":"2022/04/22/C-指针与引用/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/22/C-%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8/","excerpt":"","text":"","categories":[{"name":"C++","slug":"C","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/"},{"name":"C++结构化编程","slug":"C/C-结构化编程","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/C-%E7%BB%93%E6%9E%84%E5%8C%96%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"C++高级程序设计","slug":"C-高级程序设计","permalink":"https://freeeeeeeeedom.gitee.io/tags/C-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"}]},{"title":"C++异常处理","slug":"C-异常处理","date":"2022-04-22T02:21:58.000Z","updated":"2022-04-22T02:40:26.713Z","comments":true,"path":"2022/04/22/C-异常处理/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/22/C-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/","excerpt":"","text":"","categories":[{"name":"C++","slug":"C","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/"},{"name":"C++结构化编程","slug":"C/C-结构化编程","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/C-%E7%BB%93%E6%9E%84%E5%8C%96%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"C++高级程序设计","slug":"C-高级程序设计","permalink":"https://freeeeeeeeedom.gitee.io/tags/C-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"}]},{"title":"C++头文件","slug":"C-头文件","date":"2022-04-22T02:21:37.000Z","updated":"2022-04-22T02:40:22.990Z","comments":true,"path":"2022/04/22/C-头文件/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/22/C-%E5%A4%B4%E6%96%87%E4%BB%B6/","excerpt":"","text":"","categories":[{"name":"C++","slug":"C","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/"},{"name":"C++结构化编程","slug":"C/C-结构化编程","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/C-%E7%BB%93%E6%9E%84%E5%8C%96%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"C++高级程序设计","slug":"C-高级程序设计","permalink":"https://freeeeeeeeedom.gitee.io/tags/C-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"}]},{"title":"C++数据","slug":"C-数据","date":"2022-04-22T02:21:21.000Z","updated":"2022-04-22T02:40:20.108Z","comments":true,"path":"2022/04/22/C-数据/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/22/C-%E6%95%B0%E6%8D%AE/","excerpt":"","text":"","categories":[{"name":"C++","slug":"C","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/"},{"name":"C++结构化编程","slug":"C/C-结构化编程","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/C-%E7%BB%93%E6%9E%84%E5%8C%96%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"C++高级程序设计","slug":"C-高级程序设计","permalink":"https://freeeeeeeeedom.gitee.io/tags/C-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"}]},{"title":"C++输出重定向到文件","slug":"C-输出重定向到文件","date":"2022-04-22T02:21:12.000Z","updated":"2022-04-22T02:40:15.177Z","comments":true,"path":"2022/04/22/C-输出重定向到文件/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/22/C-%E8%BE%93%E5%87%BA%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0%E6%96%87%E4%BB%B6/","excerpt":"","text":"","categories":[{"name":"C++","slug":"C","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/"},{"name":"C++结构化编程","slug":"C/C-结构化编程","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/C-%E7%BB%93%E6%9E%84%E5%8C%96%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"C++高级程序设计","slug":"C-高级程序设计","permalink":"https://freeeeeeeeedom.gitee.io/tags/C-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"}]},{"title":"C++输入输出","slug":"C-输入输出","date":"2022-04-22T02:20:59.000Z","updated":"2022-04-22T02:40:17.785Z","comments":true,"path":"2022/04/22/C-输入输出/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/22/C-%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/","excerpt":"","text":"","categories":[{"name":"C++","slug":"C","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/"},{"name":"C++结构化编程","slug":"C/C-结构化编程","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/C-%E7%BB%93%E6%9E%84%E5%8C%96%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"C++高级程序设计","slug":"C-高级程序设计","permalink":"https://freeeeeeeeedom.gitee.io/tags/C-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"}]},{"title":"C++命名空间","slug":"C-命名空间","date":"2022-04-22T02:20:50.000Z","updated":"2022-04-22T02:40:12.681Z","comments":true,"path":"2022/04/22/C-命名空间/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/22/C-%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/","excerpt":"","text":"","categories":[{"name":"C++","slug":"C","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/"},{"name":"C++结构化编程","slug":"C/C-结构化编程","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/C-%E7%BB%93%E6%9E%84%E5%8C%96%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"C++高级程序设计","slug":"C-高级程序设计","permalink":"https://freeeeeeeeedom.gitee.io/tags/C-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"}]},{"title":"C++环境问题","slug":"C-环境问题","date":"2022-04-22T02:20:37.000Z","updated":"2022-04-22T02:40:08.145Z","comments":true,"path":"2022/04/22/C-环境问题/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/22/C-%E7%8E%AF%E5%A2%83%E9%97%AE%E9%A2%98/","excerpt":"","text":"","categories":[{"name":"C++","slug":"C","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/"},{"name":"C++结构化编程","slug":"C/C-结构化编程","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/C-%E7%BB%93%E6%9E%84%E5%8C%96%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"C++高级程序设计","slug":"C-高级程序设计","permalink":"https://freeeeeeeeedom.gitee.io/tags/C-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"}]},{"title":"C++核心关键字","slug":"C-核心关键字","date":"2022-04-22T02:20:27.000Z","updated":"2022-04-22T02:40:04.808Z","comments":true,"path":"2022/04/22/C-核心关键字/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/22/C-%E6%A0%B8%E5%BF%83%E5%85%B3%E9%94%AE%E5%AD%97/","excerpt":"","text":"","categories":[{"name":"C++","slug":"C","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/"},{"name":"C++结构化编程","slug":"C/C-结构化编程","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/C-%E7%BB%93%E6%9E%84%E5%8C%96%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"C++高级程序设计","slug":"C-高级程序设计","permalink":"https://freeeeeeeeedom.gitee.io/tags/C-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"}]},{"title":"C++函数","slug":"C-函数","date":"2022-04-22T02:20:17.000Z","updated":"2022-04-22T02:40:01.476Z","comments":true,"path":"2022/04/22/C-函数/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/22/C-%E5%87%BD%E6%95%B0/","excerpt":"","text":"","categories":[{"name":"C++","slug":"C","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/"},{"name":"C++结构化编程","slug":"C/C-结构化编程","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/C-%E7%BB%93%E6%9E%84%E5%8C%96%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"C++高级程序设计","slug":"C-高级程序设计","permalink":"https://freeeeeeeeedom.gitee.io/tags/C-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"}]},{"title":"C++高级程序设计","slug":"C-高级程序设计","date":"2022-04-22T02:20:08.000Z","updated":"2022-04-22T02:39:58.969Z","comments":true,"path":"2022/04/22/C-高级程序设计/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/22/C-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/","excerpt":"","text":"","categories":[{"name":"C++","slug":"C","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/"},{"name":"C++结构化编程","slug":"C/C-结构化编程","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/C-%E7%BB%93%E6%9E%84%E5%8C%96%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"C++高级程序设计","slug":"C-高级程序设计","permalink":"https://freeeeeeeeedom.gitee.io/tags/C-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"}]},{"title":"C++部分特殊符号","slug":"C-部分特殊符号","date":"2022-04-22T02:19:56.000Z","updated":"2022-04-22T02:39:48.582Z","comments":true,"path":"2022/04/22/C-部分特殊符号/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/22/C-%E9%83%A8%E5%88%86%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7/","excerpt":"","text":"","categories":[{"name":"C++","slug":"C","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/"},{"name":"C++结构化编程","slug":"C/C-结构化编程","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/C-%E7%BB%93%E6%9E%84%E5%8C%96%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"C++高级程序设计","slug":"C-高级程序设计","permalink":"https://freeeeeeeeedom.gitee.io/tags/C-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"}]},{"title":"C++部分内置函数","slug":"C-部分内置函数","date":"2022-04-22T02:19:46.000Z","updated":"2022-04-22T02:39:45.246Z","comments":true,"path":"2022/04/22/C-部分内置函数/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/22/C-%E9%83%A8%E5%88%86%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/","excerpt":"","text":"","categories":[{"name":"C++","slug":"C","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/"},{"name":"C++结构化编程","slug":"C/C-结构化编程","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/C-%E7%BB%93%E6%9E%84%E5%8C%96%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"C++高级程序设计","slug":"C-高级程序设计","permalink":"https://freeeeeeeeedom.gitee.io/tags/C-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"}]},{"title":"C++表达式","slug":"C-表达式","date":"2022-04-22T02:19:36.000Z","updated":"2022-04-22T02:39:39.629Z","comments":true,"path":"2022/04/22/C-表达式/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/22/C-%E8%A1%A8%E8%BE%BE%E5%BC%8F/","excerpt":"","text":"","categories":[{"name":"C++","slug":"C","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/"},{"name":"C++结构化编程","slug":"C/C-结构化编程","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/C-%E7%BB%93%E6%9E%84%E5%8C%96%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"C++高级程序设计","slug":"C-高级程序设计","permalink":"https://freeeeeeeeedom.gitee.io/tags/C-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"}]},{"title":"C++Vector","slug":"C-Vector","date":"2022-04-22T02:19:25.000Z","updated":"2022-04-22T02:39:06.206Z","comments":true,"path":"2022/04/22/C-Vector/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/22/C-Vector/","excerpt":"","text":"","categories":[{"name":"C++","slug":"C","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/"},{"name":"C++数据结构","slug":"C/C-数据结构","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/C-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"C++高级程序设计","slug":"C-高级程序设计","permalink":"https://freeeeeeeeedom.gitee.io/tags/C-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"}]},{"title":"C++Union","slug":"C-Union","date":"2022-04-22T02:19:15.000Z","updated":"2022-04-22T02:39:04.324Z","comments":true,"path":"2022/04/22/C-Union/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/22/C-Union/","excerpt":"","text":"","categories":[{"name":"C++","slug":"C","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/"},{"name":"C++数据结构","slug":"C/C-数据结构","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/C-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"C++高级程序设计","slug":"C-高级程序设计","permalink":"https://freeeeeeeeedom.gitee.io/tags/C-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"}]},{"title":"C++String","slug":"C-String","date":"2022-04-22T02:19:05.000Z","updated":"2022-04-22T02:39:02.680Z","comments":true,"path":"2022/04/22/C-String/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/22/C-String/","excerpt":"","text":"","categories":[{"name":"C++","slug":"C","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/"},{"name":"C++数据结构","slug":"C/C-数据结构","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/C-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"C++高级程序设计","slug":"C-高级程序设计","permalink":"https://freeeeeeeeedom.gitee.io/tags/C-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"}]},{"title":"C++Stack","slug":"C-Stack","date":"2022-04-22T02:18:56.000Z","updated":"2022-04-22T02:38:59.501Z","comments":true,"path":"2022/04/22/C-Stack/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/22/C-Stack/","excerpt":"","text":"","categories":[{"name":"C++","slug":"C","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/"},{"name":"C++数据结构","slug":"C/C-数据结构","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/C-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"C++高级程序设计","slug":"C-高级程序设计","permalink":"https://freeeeeeeeedom.gitee.io/tags/C-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"}]},{"title":"C++Map","slug":"C-Map","date":"2022-04-22T02:18:44.000Z","updated":"2022-04-22T02:38:52.241Z","comments":true,"path":"2022/04/22/C-Map/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/22/C-Map/","excerpt":"","text":"","categories":[{"name":"C++","slug":"C","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/"},{"name":"C++数据结构","slug":"C/C-数据结构","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/C-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"C++高级程序设计","slug":"C-高级程序设计","permalink":"https://freeeeeeeeedom.gitee.io/tags/C-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"}]},{"title":"C++List","slug":"C-List","date":"2022-04-22T02:18:36.000Z","updated":"2022-04-22T02:38:57.460Z","comments":true,"path":"2022/04/22/C-List/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/22/C-List/","excerpt":"","text":"","categories":[{"name":"C++","slug":"C","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/"},{"name":"C++数据结构","slug":"C/C-数据结构","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/C-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"C++高级程序设计","slug":"C-高级程序设计","permalink":"https://freeeeeeeeedom.gitee.io/tags/C-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"}]},{"title":"C++数组","slug":"C-数组","date":"2022-04-22T02:18:27.000Z","updated":"2022-04-22T02:39:09.895Z","comments":true,"path":"2022/04/22/C-数组/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/22/C-%E6%95%B0%E7%BB%84/","excerpt":"","text":"","categories":[{"name":"C++","slug":"C","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/"},{"name":"C++数据结构","slug":"C/C-数据结构","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/C-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"C++高级程序设计","slug":"C-高级程序设计","permalink":"https://freeeeeeeeedom.gitee.io/tags/C-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"}]},{"title":"C++结构体","slug":"C-结构体","date":"2022-04-22T02:18:17.000Z","updated":"2022-04-22T02:39:13.128Z","comments":true,"path":"2022/04/22/C-结构体/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/22/C-%E7%BB%93%E6%9E%84%E4%BD%93/","excerpt":"","text":"","categories":[{"name":"C++","slug":"C","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/"},{"name":"C++数据结构","slug":"C/C-数据结构","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/C-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"C++高级程序设计","slug":"C-高级程序设计","permalink":"https://freeeeeeeeedom.gitee.io/tags/C-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"}]},{"title":"April 22th","slug":"April-22th","date":"2022-04-21T16:40:49.000Z","updated":"2022-04-22T03:20:31.002Z","comments":true,"path":"2022/04/22/April-22th/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/22/April-22th/","excerpt":"","text":"To Do [ ] CS144 lab2 [x] Leetcode *3 （三条二分，宫水三叶yyds） [x] Leetcode 每日一题 [ ] 微信小程序（add page of categories） [ ] 计网实验 [ ] 整理 友元 、继承 总结","categories":[{"name":"Everday","slug":"Everday","permalink":"https://freeeeeeeeedom.gitee.io/categories/Everday/"},{"name":"2022_大二下","slug":"Everday/2022-大二下","permalink":"https://freeeeeeeeedom.gitee.io/categories/Everday/2022-%E5%A4%A7%E4%BA%8C%E4%B8%8B/"}],"tags":[{"name":"2022_Spring","slug":"2022-Spring","permalink":"https://freeeeeeeeedom.gitee.io/tags/2022-Spring/"}]},{"title":"April 21th","slug":"April-21th","date":"2022-04-21T05:47:56.000Z","updated":"2022-04-21T16:40:33.844Z","comments":true,"path":"2022/04/21/April-21th/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/21/April-21th/","excerpt":"","text":"To Do [ ] CS144 lab2 [ ] Leetcode *3 （试水周赛，勉强三题） [x] Leetcode 每日一题 [ ] 微信小程序（add page of categories） [ ] 计网实验 [x] 核酸 [x] 12：30起床 总结 今天起了个早，再接再厉！！！（doge）","categories":[{"name":"Everday","slug":"Everday","permalink":"https://freeeeeeeeedom.gitee.io/categories/Everday/"},{"name":"2022_大二下","slug":"Everday/2022-大二下","permalink":"https://freeeeeeeeedom.gitee.io/categories/Everday/2022-%E5%A4%A7%E4%BA%8C%E4%B8%8B/"}],"tags":[{"name":"2022_Spring","slug":"2022-Spring","permalink":"https://freeeeeeeeedom.gitee.io/tags/2022-Spring/"}]},{"title":"April 20th","slug":"April-20th","date":"2022-04-20T09:08:02.000Z","updated":"2022-04-20T09:11:21.221Z","comments":true,"path":"2022/04/20/April-20th/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/20/April-20th/","excerpt":"","text":"To Do [ ] CS144 lab2 [x] Leetcode *3 （整理了一下） [x] Leetcode 每日一题 [ ] 微信小程序 [ ] 计网实验 [x] 体育舞蹈（好难） [ ] 核酸 总结","categories":[{"name":"Everday","slug":"Everday","permalink":"https://freeeeeeeeedom.gitee.io/categories/Everday/"},{"name":"2022_大二下","slug":"Everday/2022-大二下","permalink":"https://freeeeeeeeedom.gitee.io/categories/Everday/2022-%E5%A4%A7%E4%BA%8C%E4%B8%8B/"}],"tags":[{"name":"2022_Spring","slug":"2022-Spring","permalink":"https://freeeeeeeeedom.gitee.io/tags/2022-Spring/"}]},{"title":"数据管理基础 ch54-57","slug":"数据管理基础-ch54-57","date":"2022-04-19T07:07:55.000Z","updated":"2022-04-19T13:42:28.035Z","comments":true,"path":"2022/04/19/数据管理基础-ch54-57/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/19/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80-ch54-57/","excerpt":"","text":"ch 54 并发控制 事务并发 多用户数据库系统，允许多个用户同时使用的数据库系统 飞机定票数据库系统 银行数据库系统 特点：在同一时刻并发运行的事务数可达数百上千个 事务并发执行带来的问题 会产生多个事务同时存取同一数据的情况 可能会存取和存储不正确的数据，破坏事务隔离性和数据库的一致性 数据库管理系统必须提供并发控制机制，并发控制机制是衡量一个数据库管理系统性能的重要标志之一 多事务执行方式 多事务执行方式 1 事务串行执行 每个时刻只有一个事务运行，其他事务必须等到这个事务结束以后方能运行 不能充分利用系统资源，发挥数据库共享资源的特点 多事务执行方式 2 交叉并发方式（Interleaved Concurrency） 在单处理机系统中，事务的并行执行是这些并行事务的并行操作轮流交叉运行 单处理机系统中的并行事务并没有真正地并行运行，但能够减少处理机的空闲时间，提高系统的效率 多事务执行方式 3 同时并发方式（simultaneous concurrency） 多处理机系统中，每个处理机可以运行一个事务，多个处理机可以同时运行多个事务，实现多个事务真正的并行运行 最理想的并发方式，但受制于硬件环境 更复杂的并发方式机制 不一致性的例子 不一致性的例子 1 [例11.1]飞机订票系统中的一个活动序列 甲售票点(事务T1)读出某航班的机票余额A，设A=16； 乙售票点(事务T2)读出同一航班的机票余额A，也为16； 甲售票点卖出一张机票，修改余额A←A-1，所以A为15，把A写回数据库； 乙售票点也卖出一张机票，修改余额A←A-1，所以A为15，把A写回数据库 结果明明卖出两张机票，数据库中机票余额只减少1 不一致性的例子 2 这种情况称为数据库的不一致性，是由并发操作引起的。 在并发操作情况下，对T1、T2两个事务的操作序列的调度是随机的。 若按上面的调度序列执行， T1事务的修改就被丢失。 原因：第4步中T2事务修改A并写回后覆盖了T1事务的修改 并发操作带来的数据不一致性 丢失修改（Lost Update） 不可重复读（Non-repeatable Read） 读“脏”数据（Dirty Read） 记号 R(x):读数据x W(x):写数据x 丢失修改 两个事务T1和T2读入同一数据并修改， T2的提交结果破坏了T1提交的结果，导致T1的修改被丢失。 上面飞机订票例子就属此类 不可重复读 不可重复读 1 不可重复读是指事务T1读取数据后，事务T2执行更新操作，使T1无法再现前一次读取结果。 不可重复读包括三种情况， 后两种不可重复读有时也称为幻影现象（Phantom Row）： 事务T1读取某一数据后，事务T2对其做了修改，当事务T1再次读该数据时，得到与前一次不同的值 事务T1按一定条件从数据库中读取了某些数据记录后，事务T2删除了其中部分记录，当T1再次按相同条件读取数据时，发现某些记录神秘地消失了。 事务T1按一定条件从数据库中读取某些数据记录后，事务T2插入了一些记录，当T1再次按相同条件读取数据时，发现多了一些记录。 不可重复读 2 T1读取B=100进行运算 T2读取同一数据B，对其进行修改后将B=200写回数据库。 T1为了对读取值校对重读B，B已为200，与第一次读取值不一致 读“脏”数据 读“脏”数据 1 读“脏”数据是指： 事务T1修改某一数据，并将其写回磁盘 事务T2读取同一数据后， T1由于某种原因被撤销 这时T1已修改过的数据恢复原值， T2读到的数据就与数据库中的数据不一致 T2读到的数据就为“脏”数据，即不正确的数据 读“脏”数据 2 T1将C值修改为200， T2读到C为200 T1由于某种原因撤销，其修改作废，C恢复原值100 这时T2读到的C为200，与数据库内容不一致，就是“脏”数据 数据不一致性及并发控制 数据不一致性：由于并发操作破坏了事务的隔离性 并发控制就是要用正确的方式调度并发操作，使一个用户事务的执行不受其他事务的干扰，从而避免造成数据的不一致性 对数据库的应用有时允许某些不一致性，例如有些统计工作涉及数据量很大，读到一些“脏”数据对统计精度没什么影响，可以降低对一致性的要求以减少系统开销 并发控制的主要技术 并发控制的主要技术 封锁(Locking) 时间戳(Timestamp) 乐观控制法 多版本并发控制(MVCC)","categories":[{"name":"数据库","slug":"数据库","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"数据管理基础","slug":"数据库/数据管理基础","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"数据管理基础","slug":"数据管理基础","permalink":"https://freeeeeeeeedom.gitee.io/tags/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/"}]},{"title":"April 19th","slug":"April-19th","date":"2022-04-18T16:10:50.000Z","updated":"2022-04-20T09:10:07.289Z","comments":true,"path":"2022/04/19/April-19th/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/19/April-19th/","excerpt":"","text":"To Do [ ] CS144 lab2 [x] Leetcode *3 [x] Leetcode 每日一题 [ ] 微信小程序 [ ] 计网实验","categories":[{"name":"Everday","slug":"Everday","permalink":"https://freeeeeeeeedom.gitee.io/categories/Everday/"},{"name":"2022_大二下","slug":"Everday/2022-大二下","permalink":"https://freeeeeeeeedom.gitee.io/categories/Everday/2022-%E5%A4%A7%E4%BA%8C%E4%B8%8B/"}],"tags":[{"name":"2022_Spring","slug":"2022-Spring","permalink":"https://freeeeeeeeedom.gitee.io/tags/2022-Spring/"}]},{"title":"CS144 Lab 3","slug":"CS144-Lab-3","date":"2022-04-18T05:26:44.000Z","updated":"2022-04-19T16:02:19.761Z","comments":true,"path":"2022/04/18/CS144-Lab-3/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/18/CS144-Lab-3/","excerpt":"","text":"","categories":[{"name":"Computer-Network","slug":"Computer-Network","permalink":"https://freeeeeeeeedom.gitee.io/categories/Computer-Network/"},{"name":"CS144","slug":"Computer-Network/CS144","permalink":"https://freeeeeeeeedom.gitee.io/categories/Computer-Network/CS144/"}],"tags":[{"name":"CS144","slug":"CS144","permalink":"https://freeeeeeeeedom.gitee.io/tags/CS144/"}]},{"title":"CS144 Lab 2","slug":"CS144-Lab-2","date":"2022-04-18T05:23:44.000Z","updated":"2022-04-20T15:36:36.518Z","comments":true,"path":"2022/04/18/CS144-Lab-2/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/18/CS144-Lab-2/","excerpt":"","text":"Lab Checkpoint 2: the TCP receiver 1 Overview 在实验0中，你实现了一个流控制的字节流（ByteStream）的抽象。 在实验1中，你创建了一个StreamReassembler，它接受一连串的子串，所有这些子串都是从同一个字节流中摘录出来的，并将它们重新组合成原始流，从同一个字节流中摘录的子串，并将它们重新组装到原始流中。","categories":[{"name":"Computer-Network","slug":"Computer-Network","permalink":"https://freeeeeeeeedom.gitee.io/categories/Computer-Network/"},{"name":"CS144","slug":"Computer-Network/CS144","permalink":"https://freeeeeeeeedom.gitee.io/categories/Computer-Network/CS144/"}],"tags":[{"name":"CS144","slug":"CS144","permalink":"https://freeeeeeeeedom.gitee.io/tags/CS144/"}]},{"title":"April 18th","slug":"April-18th","date":"2022-04-17T16:54:07.000Z","updated":"2022-04-20T09:10:15.154Z","comments":true,"path":"2022/04/18/April-18th/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/18/April-18th/","excerpt":"","text":"To Do [ ] CS144 lab2 [x] Leetcode *3 [x] Leetcode 每日一题 [ ] 微信小程序 [ ] 计网实验 [x] JDBC整理","categories":[{"name":"Everday","slug":"Everday","permalink":"https://freeeeeeeeedom.gitee.io/categories/Everday/"},{"name":"2022_大二下","slug":"Everday/2022-大二下","permalink":"https://freeeeeeeeedom.gitee.io/categories/Everday/2022-%E5%A4%A7%E4%BA%8C%E4%B8%8B/"}],"tags":[{"name":"2022_Spring","slug":"2022-Spring","permalink":"https://freeeeeeeeedom.gitee.io/tags/2022-Spring/"}]},{"title":"JDBC","slug":"JDBC","date":"2022-04-17T13:38:34.000Z","updated":"2022-04-19T23:41:20.359Z","comments":true,"path":"2022/04/17/JDBC/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/17/JDBC/","excerpt":"","text":"JDBC 导入JDBC包 12import java.sql.* ; // for standard JDBC programsimport java.math.* ; // for BigDecimal and BigInteger 注册JDBC驱动程序 Class.forName()Class.forName()Class.forName() 1234567try &#123; Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;);&#125;catch(ClassNotFoundException ex) &#123; System.out.println(&quot;Error: unable to load driver class!&quot;); System.exit(1);&#125; 使用数据库URL的用户名和密码 12345678static final String JDBC_DRIVER = &quot;com.mysql.cj.jdbc.Driver&quot;;static final String DB_URL = &quot;jdbc:mysql://localhost:3306/lab&quot;;static final String USER = &quot;root&quot;;static final String PASS = &quot;hurui011019&quot;;Connection conn = null; conn = DriverManager.getConnection(DB_URL,USER,PASS); JDBC Statement 对象 12345678910Statement stmt = null;try&#123; stmt = conn.createStatement(); ...&#125;catch&#123;&#125;finally&#123;&#125; 执行SQL语句 123String sql; sql = &quot;SELECT emp_no, first_name, last_name, birth_date FROM Employees&quot;; ResultSet rs = stmt.executeQuery(sql); JDBC结果集 查看结果集 1234567891011while(rs.next())&#123; //Retrieve by column name int emp_no = rs.getInt(&quot;emp_no&quot;); String first_name = rs.getString(&quot;first_name&quot;); String last_name = rs.getString(&quot;last_name&quot;); //Display values System.out.print(&quot;ID: &quot; + emp_no); System.out.print(&quot;, First: &quot; + first_name); System.out.println(&quot;, Last: &quot; + last_name); &#125;","categories":[{"name":"数据库","slug":"数据库","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[]},{"title":"常见问题","slug":"常见问题","date":"2022-04-17T05:15:27.000Z","updated":"2022-04-19T16:06:14.870Z","comments":true,"path":"2022/04/17/常见问题/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/17/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/","excerpt":"","text":"n数之和 题目 题解 难度 推荐指数 15. 三数之和 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 16. 最接近的三数之和 LeetCode 题解链接 中等 🤩🤩🤩🤩 18. 四数之和 LeetCode 题解链接 中等 🤩🤩🤩🤩 组合总和 题目 题解 难度 推荐指数 39. 组合总和 LeetCode 题解链接 中等 🤩🤩🤩🤩 40. 组合总和 II LeetCode 题解链接 中等 🤩🤩🤩🤩 括号问题 题目 题解 难度 推荐指数 20. 有效的括号 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 22. 括号生成 LeetCode 题解链接 中等 🤩🤩🤩🤩 32. 最长有效括号 LeetCode 题解链接 困难 🤩🤩🤩🤩 301. 删除无效的括号 LeetCode 题解链接 困难 🤩🤩🤩🤩 678. 有效的括号字符串 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 数独问题 题目 题解 难度 推荐指数 36. 有效的数独 LeetCode 题解链接 中等 🤩🤩🤩🤩 37. 解数独 LeetCode 题解链接 困难 🤩🤩🤩🤩 回文串问题 题目 题解 难度 推荐指数 5. 最长回文子串 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 9. 回文数 LeetCode 题解链接 简单 🤩🤩🤩🤩 131. 分割回文串 LeetCode 题解链接 中等 🤩🤩🤩🤩 132. 分割回文串 II LeetCode 题解链接 困难 🤩🤩🤩 表达式计算 题目 题解 难度 推荐指数 150. 逆波兰表达式求值 LeetCode 题解链接 中等 🤩🤩🤩🤩 224. 基本计算器 LeetCode 题解链接 困难 🤩🤩🤩🤩 227. 基本计算器 II LeetCode 题解链接 中等 🤩🤩🤩🤩 1006. 笨阶乘 LeetCode 题解链接 中等 🤩🤩🤩 扫描线 题目 题解 难度 推荐指数 218. 天际线问题 LeetCode 题解链接 困难 🤩🤩🤩 391. 完美矩形 LeetCode 题解链接 困难 🤩🤩🤩🤩","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"数据结构与算法/Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"构造","slug":"构造","date":"2022-04-17T05:15:18.000Z","updated":"2022-04-19T16:06:39.886Z","comments":true,"path":"2022/04/17/构造/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/17/%E6%9E%84%E9%80%A0/","excerpt":"","text":"题目 题解 难度 推荐指数 1719. 重构一棵树的方案数 LeetCode 题解链接 困难 🤩🤩 2028. 找出缺失的观测数据 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"数据结构与算法/Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"蓄水池抽样","slug":"蓄水池抽样","date":"2022-04-17T05:15:09.000Z","updated":"2022-04-19T16:08:12.915Z","comments":true,"path":"2022/04/17/蓄水池抽样/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/17/%E8%93%84%E6%B0%B4%E6%B1%A0%E6%8A%BD%E6%A0%B7/","excerpt":"","text":"题目 题解 难度 推荐指数 382. 链表随机节点 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"数据结构与算法/Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"高精度","slug":"高精度","date":"2022-04-17T05:14:49.000Z","updated":"2022-04-19T16:06:37.865Z","comments":true,"path":"2022/04/17/高精度/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/17/%E9%AB%98%E7%B2%BE%E5%BA%A6/","excerpt":"","text":"题目 题解 难度 推荐指数 306. 累加数 LeetCode 题解链接 中等 🤩🤩🤩🤩","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"数据结构与算法/Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"约瑟夫环","slug":"约瑟夫环","date":"2022-04-17T05:14:41.000Z","updated":"2022-04-19T16:08:15.879Z","comments":true,"path":"2022/04/17/约瑟夫环/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/17/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF/","excerpt":"","text":"题目 题解 难度 推荐指数 390. 消除游戏 LeetCode 题解链接 中等 🤩🤩🤩🤩","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"数据结构与算法/Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"打表","slug":"打表","date":"2022-04-17T05:14:31.000Z","updated":"2022-04-19T16:06:21.498Z","comments":true,"path":"2022/04/17/打表/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/17/%E6%89%93%E8%A1%A8/","excerpt":"","text":"题目 题解 难度 推荐指数 326. 3的幂 LeetCode 题解链接 简单 🤩🤩🤩 401. 二进制手表 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 650. 只有两个键的键盘 LeetCode 题解链接 中等 🤩🤩🤩🤩 728. 自除数 LeetCode 题解链接 简单 🤩🤩🤩 1137. 第 N 个泰波那契数 LeetCode 题解链接 简单 🤩🤩🤩🤩 1414. 和为 K 的最少斐波那契数字数目 LeetCode 题解链接 中等 🤩🤩🤩🤩 1646. 获取生成数组中的最大值 LeetCode 题解链接 简单 🤩🤩🤩🤩 剑指 Offer 10- I. 斐波那契数列 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 面试题 10.02. 变位词组 LeetCode 题解链接 中等 🤩🤩🤩🤩","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"数据结构与算法/Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"脑筋急转弯","slug":"脑筋急转弯","date":"2022-04-17T05:14:22.000Z","updated":"2022-04-19T16:07:08.434Z","comments":true,"path":"2022/04/17/脑筋急转弯/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/17/%E8%84%91%E7%AD%8B%E6%80%A5%E8%BD%AC%E5%BC%AF/","excerpt":"","text":"题目 题解 难度 推荐指数 335. 路径交叉 LeetCode 题解链接 困难 🤩🤩🤩🤩 419. 甲板上的战舰 LeetCode 题解链接 中等 🤩🤩🤩🤩 423. 从英文中重建数字 LeetCode 题解链接 中等 🤩🤩🤩🤩 2038. 如果相邻两个颜色均相同则删除当前颜色 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 2069. 模拟行走机器人 II LeetCode 题解链接 中等 🤩🤩🤩🤩","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"数据结构与算法/Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"找规律","slug":"找规律","date":"2022-04-17T05:14:11.000Z","updated":"2022-04-19T16:08:26.776Z","comments":true,"path":"2022/04/17/找规律/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/17/%E6%89%BE%E8%A7%84%E5%BE%8B/","excerpt":"","text":"题目 题解 难度 推荐指数 335. 路径交叉 LeetCode 题解链接 困难 🤩🤩🤩🤩 419. 甲板上的战舰 LeetCode 题解链接 中等 🤩🤩🤩🤩 423. 从英文中重建数字 LeetCode 题解链接 中等 🤩🤩🤩🤩 440. 字典序的第K小数字 LeetCode 题解链接 困难 🤩🤩🤩","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"数据结构与算法/Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"矩阵快速幂","slug":"矩阵快速幂","date":"2022-04-17T05:14:01.000Z","updated":"2022-04-19T16:06:55.479Z","comments":true,"path":"2022/04/17/矩阵快速幂/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/17/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/","excerpt":"","text":"题目 题解 难度 推荐指数 552. 学生出勤记录 II LeetCode 题解链接 困难 🤩🤩🤩🤩 1137. 第 N 个泰波那契数 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 1220. 统计元音字母序列的数目 LeetCode 题解链接 困难 🤩🤩🤩🤩🤩 剑指 Offer 10- I. 斐波那契数列 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"数据结构与算法/Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"快速幂","slug":"快速幂","date":"2022-04-17T05:13:51.000Z","updated":"2022-04-19T16:06:57.350Z","comments":true,"path":"2022/04/17/快速幂/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/17/%E5%BF%AB%E9%80%9F%E5%B9%82/","excerpt":"","text":"题目 题解 难度 推荐指数 372. 超级次方 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"数据结构与算法/Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"二进制枚举","slug":"二进制枚举","date":"2022-04-17T05:13:42.000Z","updated":"2022-04-20T09:07:31.708Z","comments":true,"path":"2022/04/17/二进制枚举/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/17/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%9E%9A%E4%B8%BE/","excerpt":"","text":"题目 题解 难度 推荐指数 1239. 串联字符串的最大长度 LeetCode 题解链接 中等 🤩🤩🤩 1601. 最多可达成的换楼请求数目 LeetCode 题解链接 中等 🤩🤩🤩🤩 2044. 统计按位或能得到最大值的子集数目 LeetCode 题解链接 困难 🤩🤩🤩🤩","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"数据结构与算法/Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"洗牌算法","slug":"洗牌算法","date":"2022-04-17T05:13:33.000Z","updated":"2022-04-19T16:08:09.203Z","comments":true,"path":"2022/04/17/洗牌算法/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/17/%E6%B4%97%E7%89%8C%E7%AE%97%E6%B3%95/","excerpt":"","text":"题目 题解 难度 推荐指数 384. 打乱数组 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"数据结构与算法/Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"三分","slug":"三分","date":"2022-04-17T05:13:25.000Z","updated":"2022-04-19T16:07:24.180Z","comments":true,"path":"2022/04/17/三分/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/17/%E4%B8%89%E5%88%86/","excerpt":"","text":"题目 题解 难度 推荐指数 852. 山脉数组的峰顶索引 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 剑指 Offer II 069. 山峰数组的顶部 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"数据结构与算法/Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"博弈论","slug":"博弈论","date":"2022-04-17T05:13:17.000Z","updated":"2022-04-19T16:06:13.367Z","comments":true,"path":"2022/04/17/博弈论/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/17/%E5%8D%9A%E5%BC%88%E8%AE%BA/","excerpt":"","text":"题目 题解 难度 推荐指数 292. Nim 游戏 LeetCode 题解链接 中等 🤩🤩🤩🤩 810. 黑板异或游戏 LeetCode 题解链接 困难 🤩🤩🤩🤩 877. 石子游戏 LeetCode 题解链接 中等 🤩🤩🤩🤩 2029. 石子游戏 IX LeetCode 题解链接 中等 🤩🤩🤩🤩","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"数据结构与算法/Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"后缀数组","slug":"后缀数组","date":"2022-04-17T05:13:08.000Z","updated":"2022-04-19T16:06:43.005Z","comments":true,"path":"2022/04/17/后缀数组/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/17/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/","excerpt":"","text":"题目 题解 难度 推荐指数 1044. 最长重复子串 LeetCode 题解链接 困难 🤩🤩🤩🤩","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"数据结构与算法/Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"字符串哈希","slug":"字符串哈希","date":"2022-04-17T05:12:58.000Z","updated":"2022-04-19T16:09:10.316Z","comments":true,"path":"2022/04/17/字符串哈希/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/17/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/","excerpt":"","text":"题目 题解 难度 推荐指数 187. 重复的DNA序列 LeetCode 题解链接 中等 🤩🤩🤩🤩 472. 连接词 LeetCode 题解链接 困难 🤩🤩🤩🤩 686. 重复叠加字符串匹配 LeetCode 题解链接 中等 🤩🤩🤩🤩 1044. 最长重复子串 LeetCode 题解链接 困难 🤩🤩🤩🤩","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"数据结构与算法/Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"字典树","slug":"字典树","date":"2022-04-17T05:12:49.000Z","updated":"2022-04-19T16:08:23.191Z","comments":true,"path":"2022/04/17/字典树/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/17/%E5%AD%97%E5%85%B8%E6%A0%91/","excerpt":"","text":"题目 题解 难度 推荐指数 208. 实现 Trie (前缀树) LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 211. 添加与搜索单词 - 数据结构设计 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 212. 单词搜索 II LeetCode 题解链接 困难 🤩🤩🤩🤩 421. 数组中两个数的最大异或值 LeetCode 题解链接 中等 🤩🤩🤩🤩 677. 键值映射 LeetCode 题解链接 中等 🤩🤩🤩🤩 720. 词典中最长的单词 LeetCode 题解链接 简单 🤩🤩🤩🤩 1707. 与数组中元素的最大异或值 LeetCode 题解链接 困难 🤩🤩🤩","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"数据结构与算法/Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"位运算","slug":"位运算","date":"2022-04-17T05:12:40.000Z","updated":"2022-04-19T16:07:49.138Z","comments":true,"path":"2022/04/17/位运算/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/17/%E4%BD%8D%E8%BF%90%E7%AE%97/","excerpt":"","text":"题目 题解 难度 推荐指数 137. 只出现一次的数字 II LeetCode 题解链接 中等 🤩🤩🤩 190. 颠倒二进制位 LeetCode 题解链接 简单 🤩🤩🤩 191. 位1的个数 LeetCode 题解链接 简单 🤩🤩🤩 231. 2 的幂 LeetCode 题解链接 简单 🤩🤩🤩 260. 只出现一次的数字 III LeetCode 题解链接 中等 🤩🤩🤩🤩 268. 丢失的数字 LeetCode 题解链接 简单 🤩🤩🤩🤩 318. 最大单词长度乘积 LeetCode 题解链接 中等 🤩🤩🤩🤩 338. 比特位计数 LeetCode 题解链接 简单 🤩🤩🤩 342. 4的幂 LeetCode 题解链接 简单 🤩🤩🤩 371. 两整数之和 LeetCode 题解链接 中等 🤩🤩🤩🤩 405. 数字转换为十六进制数 LeetCode 题解链接 简单 🤩🤩🤩🤩 461. 汉明距离 LeetCode 题解链接 简单 🤩🤩🤩🤩 476. 数字的补数 LeetCode 题解链接 简单 🤩🤩🤩🤩 477. 汉明距离总和 LeetCode 题解链接 简单 🤩🤩🤩🤩 526. 优美的排列 LeetCode 题解链接 中等 🤩🤩🤩 693. 交替位二进制数 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 762. 二进制表示中质数个计算置位 LeetCode 题解链接 简单 🤩🤩🤩🤩 1178. 猜字谜 LeetCode 题解链接 困难 🤩🤩🤩🤩 1711. 大餐计数 LeetCode 题解链接 中等 🤩🤩🤩 2044. 统计按位或能得到最大值的子集数目 LeetCode 题解链接 困难 🤩🤩🤩🤩 剑指 Offer 15. 二进制中1的个数 LeetCode 题解链接 简单 🤩🤩🤩","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"数据结构与算法/Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"子串匹配","slug":"子串匹配","date":"2022-04-17T05:12:32.000Z","updated":"2022-04-19T16:08:28.954Z","comments":true,"path":"2022/04/17/子串匹配/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/17/%E5%AD%90%E4%B8%B2%E5%8C%B9%E9%85%8D/","excerpt":"","text":"题目 题解 难度 推荐指数 28. 实现 strStr() LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 686. 重复叠加字符串匹配 LeetCode 题解链接 中等 🤩🤩🤩🤩","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"数据结构与算法/Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"多路并归","slug":"多路并归","date":"2022-04-17T05:12:23.000Z","updated":"2022-04-19T16:06:29.250Z","comments":true,"path":"2022/04/17/多路并归/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/17/%E5%A4%9A%E8%B7%AF%E5%B9%B6%E5%BD%92/","excerpt":"","text":"题目 题解 难度 推荐指数 21. 合并两个有序链表 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 264. 丑数 II LeetCode 题解链接 中等 🤩🤩🤩🤩 313. 超级丑数 LeetCode 题解链接 中等 🤩🤩🤩 373. 查找和最小的K对数字 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 786. 第 K 个最小的素数分数 LeetCode 题解链接 中等 🤩🤩🤩","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"数据结构与算法/Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"容斥原理","slug":"容斥原理","date":"2022-04-17T05:12:08.000Z","updated":"2022-04-19T16:07:20.782Z","comments":true,"path":"2022/04/17/容斥原理/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/17/%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86/","excerpt":"","text":"题目 题解 难度 推荐指数 187. 重复的DNA序列 LeetCode 题解链接 中等 🤩🤩🤩🤩 304. 二维区域和检索 - 矩阵不可变 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 303. 区域和检索 - 数组不可变 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 307. 区域和检索 - 数组可修改 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 354. 俄罗斯套娃信封问题 LeetCode 题解链接 困难 🤩🤩🤩 357. 统计各位数字都不同的数字个数 LeetCode 题解链接 中等 🤩🤩🤩🤩 363. 矩形区域不超过 K 的最大数值和 LeetCode 题解链接 困难 🤩🤩🤩 437. 路径总和 III LeetCode 题解链接 中等 🤩🤩🤩🤩 523. 连续的子数组和 LeetCode 题解链接 中等 🤩🤩🤩🤩 525. 连续数组 LeetCode 题解链接 中等 🤩🤩🤩🤩 528. 按权重随机选择 LeetCode 题解链接 中等 🤩🤩🤩🤩 600. 不含连续1的非负整数 LeetCode 题解链接 困难 🤩🤩🤩🤩 629. K个逆序对数组 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 661. 图片平滑器 LeetCode 题解链接 简单 🤩🤩🤩🤩 673. 最长递增子序列的个数 LeetCode 题解链接 中等 🤩🤩🤩🤩 689. 三个无重叠子数组的最大和 LeetCode 题解链接 困难 🤩🤩🤩 724. 寻找数组的中心下标 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 825. 适龄的朋友 LeetCode 题解链接 中等 🤩🤩🤩🤩 930. 和相同的二元子数组 LeetCode 题解链接 中等 🤩🤩🤩 1004. 最大连续1的个数 III LeetCode 题解链接 中等 🤩🤩🤩 1074. 元素和为目标值的子矩阵数量 LeetCode 题解链接 困难 🤩🤩🤩 1012. 至少有 1 位重复的数字 LeetCode 题解链接 困难 🤩🤩🤩 1154. 一年中的第几天 LeetCode 题解链接 简单 🤩🤩🤩🤩 1208. 尽可能使字符串相等 LeetCode 题解链接 中等 🤩🤩🤩 1310. 子数组异或查询 LeetCode 题解链接 中等 🤩🤩🤩🤩 1442. 形成两个异或相等数组的三元组数目 LeetCode 题解链接 中等 🤩🤩🤩 1480. 一维数组的动态和 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 1588. 所有奇数长度子数组的和 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 1738. 找出第 K 大的异或坐标值 LeetCode 题解链接 中等 🤩🤩🤩 1744. 你能在你最喜欢的那天吃到你最喜欢的糖果吗？ LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 1749. 任意子数组和的绝对值的最大值 LeetCode 题解链接 中等 🤩🤩🤩 1838. 最高频元素的频数 LeetCode 题解链接 中等 🤩🤩🤩 1893. 检查是否区域内所有整数都被覆盖 LeetCode 题解链接 简单 🤩🤩🤩🤩 1894. 找到需要补充粉笔的学生编号 LeetCode 题解链接 中等 🤩🤩🤩🤩 2055. 蜡烛之间的盘子 LeetCode 题解链接 中等 🤩🤩🤩🤩 2100. 适合打劫银行的日子 LeetCode 题解链接 中等 🤩🤩🤩🤩","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"数据结构与算法/Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"数学","slug":"数学","date":"2022-04-17T05:11:59.000Z","updated":"2022-04-19T16:07:40.996Z","comments":true,"path":"2022/04/17/数学/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/17/%E6%95%B0%E5%AD%A6/","excerpt":"","text":"题目 题解 难度 推荐指数 6. Z 字形变换 LeetCode 题解链接 中等 🤩🤩🤩 7. 整数反转 LeetCode 题解链接 简单 🤩🤩🤩 9. 回文数 LeetCode 题解链接 简单 🤩🤩🤩🤩 29. 两数相除 LeetCode 题解链接 中等 🤩🤩🤩 31. 下一个排列 LeetCode 题解链接 中等 🤩🤩🤩 42. 接雨水 LeetCode 题解链接 困难 🤩🤩 43. 字符串相乘 LeetCode 题解链接 中等 🤩🤩🤩🤩 149. 直线上最多的点数 LeetCode 题解链接 困难 🤩🤩🤩 166. 分数到小数 LeetCode 题解链接 中等 🤩🤩🤩🤩 172. 阶乘后的零 LeetCode 题解链接 中等 🤩🤩🤩🤩 223. 矩形面积 LeetCode 题解链接 中等 🤩🤩🤩🤩 231. 2 的幂 LeetCode 题解链接 简单 🤩🤩🤩 233. 数字 1 的个数 LeetCode 题解链接 困难 🤩🤩🤩🤩 258. 各位相加 LeetCode 题解链接 简单 🤩🤩🤩 263. 丑数 LeetCode 题解链接 简单 🤩🤩 268. 丢失的数字 LeetCode 题解链接 简单 🤩🤩🤩🤩 282. 给表达式添加运算符 LeetCode 题解链接 困难 🤩🤩🤩🤩 313. 超级丑数 LeetCode 题解链接 中等 🤩🤩🤩 319. 灯泡开关 LeetCode 题解链接 中等 🤩🤩🤩 326. 3的幂 LeetCode 题解链接 简单 🤩🤩🤩 342. 4的幂 LeetCode 题解链接 简单 🤩🤩🤩 357. 统计各位数字都不同的数字个数 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 367. 有效的完全平方数 LeetCode 题解链接 简单 🤩🤩🤩🤩 372. 超级次方 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 390. 消除游戏 LeetCode 题解链接 中等 🤩🤩🤩🤩 400. 第 N 位数字 LeetCode 题解链接 中等 🤩🤩🤩🤩 440. 字典序的第K小数字 LeetCode 题解链接 困难 🤩🤩🤩🤩 441. 排列硬币 LeetCode 题解链接 简单 🤩🤩🤩 446. 等差数列划分 II - 子序列 LeetCode 题解链接 困难 🤩🤩🤩🤩🤩 453. 最小操作次数使数组元素相等 LeetCode 题解链接 中等 🤩🤩🤩 458. 可怜的小猪 LeetCode 题解链接 困难 🤩🤩🤩🤩 470. 用 Rand7() 实现 Rand10() LeetCode 题解链接 中等 🤩🤩🤩🤩 477. 汉明距离总和 LeetCode 题解链接 简单 🤩🤩🤩 479. 最大回文数乘积 LeetCode 题解链接 困难 🤩🤩🤩 483. 最小好进制 LeetCode 题解链接 困难 🤩🤩🤩🤩 507. 完美数 LeetCode 题解链接 简单 🤩🤩🤩 523. 连续的子数组和 LeetCode 题解链接 中等 🤩🤩🤩🤩 552. 学生出勤记录 II LeetCode 题解链接 困难 🤩🤩🤩🤩 553. 最优除法 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 633. 平方数之和 LeetCode 题解链接 简单 🤩🤩 645. 错误的集合 LeetCode 题解链接 简单 🤩🤩🤩 650. 只有两个键的键盘 LeetCode 题解链接 中等 🤩🤩🤩🤩 780. 到达终点 LeetCode 题解链接 困难 🤩🤩🤩🤩🤩 789. 逃脱阻碍者 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 810. 黑板异或游戏 LeetCode 题解链接 困难 🤩🤩🤩🤩 869. 重新排序得到 2 的幂 LeetCode 题解链接 中等 🤩🤩🤩🤩 879. 盈利计划 LeetCode 题解链接 困难 🤩🤩🤩🤩🤩 1006. 笨阶乘 LeetCode 题解链接 中等 🤩🤩🤩 1049. 最后一块石头的重量 II LeetCode 题解链接 中等 🤩🤩🤩🤩 1104. 二叉树寻路 LeetCode 题解链接 中等 🤩🤩🤩 1137. 第 N 个泰波那契数 LeetCode 题解链接 简单 🤩🤩🤩🤩 1310. 子数组异或查询 LeetCode 题解链接 中等 🤩🤩🤩🤩 1342. 将数字变成 0 的操作次数 LeetCode 题解链接 简单 🤩🤩🤩🤩 1442. 形成两个异或相等数组的三元组数目 LeetCode 题解链接 中等 🤩🤩🤩 1447. 最简分数 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 1486. 数组异或操作 LeetCode 题解链接 简单 🤩🤩🤩 1518. 换酒问题 LeetCode 题解链接 简单 🤩🤩🤩🤩 1588. 所有奇数长度子数组的和 LeetCode 题解链接 简单 🤩🤩🤩🤩 1610. 可见点的最大数目 LeetCode 题解链接 困难 🤩🤩🤩🤩 1716. 计算力扣银行的钱 LeetCode 题解链接 简单 🤩🤩🤩🤩 1720. 解码异或后的数组 LeetCode 题解链接 简单 🤩🤩🤩 1734. 解码异或后的排列 LeetCode 题解链接 中等 🤩🤩🤩🤩 1738. 找出第 K 大的异或坐标值 LeetCode 题解链接 中等 🤩🤩🤩 面试题 10.02. 变位词组 LeetCode 题解链接 中等 🤩🤩🤩🤩","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"数据结构与算法/Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"分治","slug":"分治","date":"2022-04-17T05:11:51.000Z","updated":"2022-04-19T16:06:36.219Z","comments":true,"path":"2022/04/17/分治/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/17/%E5%88%86%E6%B2%BB/","excerpt":"","text":"题目 题解 难度 推荐指数 4. 寻找两个正序数组的中位数 LeetCode 题解链接 困难 🤩🤩🤩🤩","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"数据结构与算法/Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"排序","slug":"排序","date":"2022-04-17T05:11:42.000Z","updated":"2022-04-19T16:07:13.240Z","comments":true,"path":"2022/04/17/排序/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/17/%E6%8E%92%E5%BA%8F/","excerpt":"","text":"题目 题解 难度 推荐指数 41. 缺失的第一个正数 LeetCode 题解链接 困难 🤩🤩🤩 220. 存在重复元素 III LeetCode 题解链接 中等 🤩🤩🤩 268. 丢失的数字 LeetCode 题解链接 简单 🤩🤩🤩🤩 414. 第三大的数 LeetCode 题解链接 中等 🤩🤩🤩🤩 448. 找到所有数组中消失的数字 LeetCode 题解链接 简单 🤩🤩🤩 475. 供暖器 LeetCode 题解链接 中等 🤩🤩🤩🤩 506. 相对名次 LeetCode 题解链接 简单 🤩🤩🤩🤩 524. 通过删除字母匹配到字典里最长单词 LeetCode 题解链接 中等 🤩🤩🤩🤩 539. 最小时间差 LeetCode 题解链接 中等 🤩🤩🤩🤩 581. 最短无序连续子数组 LeetCode 题解链接 中等 🤩🤩🤩🤩 611. 有效三角形的个数 LeetCode 题解链接 中等 🤩🤩🤩🤩 645. 错误的集合 LeetCode 题解链接 简单 🤩🤩🤩 703. 数据流中的第 K 大元素 LeetCode 题解链接 简单 🤩🤩🤩 825. 适龄的朋友 LeetCode 题解链接 中等 🤩🤩🤩🤩 954. 二倍数对数组 LeetCode 题解链接 中等 🤩🤩🤩 969. 煎饼排序 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 987. 二叉树的垂序遍历 LeetCode 题解链接 困难 🤩🤩🤩🤩🤩 1833. 雪糕的最大数量 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 1834. 单线程 CPU LeetCode 题解链接 中等 🤩🤩🤩🤩 1838. 最高频元素的频数 LeetCode 题解链接 中等 🤩🤩🤩 面试题 10.02. 变位词组 LeetCode 题解链接 中等 🤩🤩🤩🤩 面试题 17.14. 最小K个数 LeetCode 题解链接 中等 🤩🤩🤩🤩","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"数据结构与算法/Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"区间求和","slug":"区间求和","date":"2022-04-17T05:11:30.000Z","updated":"2022-04-19T16:07:18.720Z","comments":true,"path":"2022/04/17/区间求和/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/17/%E5%8C%BA%E9%97%B4%E6%B1%82%E5%92%8C/","excerpt":"","text":"前缀和 题目 题解 难度 推荐指数 187. 重复的DNA序列 LeetCode 题解链接 中等 🤩🤩🤩🤩 304. 二维区域和检索 - 矩阵不可变 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 303. 区域和检索 - 数组不可变 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 363. 矩形区域不超过 K 的最大数值和 LeetCode 题解链接 困难 🤩🤩🤩 437. 路径总和 III LeetCode 题解链接 中等 🤩🤩🤩🤩 523. 连续的子数组和 LeetCode 题解链接 中等 🤩🤩🤩🤩 525. 连续数组 LeetCode 题解链接 中等 🤩🤩🤩🤩 528. 按权重随机选择 LeetCode 题解链接 中等 🤩🤩🤩🤩 629. K个逆序对数组 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 661. 图片平滑器 LeetCode 题解链接 简单 🤩🤩🤩🤩 689. 三个无重叠子数组的最大和 LeetCode 题解链接 困难 🤩🤩🤩 724. 寻找数组的中心下标 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 825. 适龄的朋友 LeetCode 题解链接 中等 🤩🤩🤩🤩 930. 和相同的二元子数组 LeetCode 题解链接 中等 🤩🤩🤩 1004. 最大连续1的个数 III LeetCode 题解链接 中等 🤩🤩🤩 1074. 元素和为目标值的子矩阵数量 LeetCode 题解链接 困难 🤩🤩🤩 1154. 一年中的第几天 LeetCode 题解链接 简单 🤩🤩🤩🤩 1208. 尽可能使字符串相等 LeetCode 题解链接 中等 🤩🤩🤩 1310. 子数组异或查询 LeetCode 题解链接 中等 🤩🤩🤩🤩 1442. 形成两个异或相等数组的三元组数目 LeetCode 题解链接 中等 🤩🤩🤩 1480. 一维数组的动态和 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 1588. 所有奇数长度子数组的和 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 1738. 找出第 K 大的异或坐标值 LeetCode 题解链接 中等 🤩🤩🤩 1744. 你能在你最喜欢的那天吃到你最喜欢的糖果吗？ LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 1749. 任意子数组和的绝对值的最大值 LeetCode 题解链接 中等 🤩🤩🤩 1838. 最高频元素的频数 LeetCode 题解链接 中等 🤩🤩🤩 1894. 找到需要补充粉笔的学生编号 LeetCode 题解链接 中等 🤩🤩🤩🤩 2055. 蜡烛之间的盘子 LeetCode 题解链接 中等 🤩🤩🤩🤩 2100. 适合打劫银行的日子 LeetCode 题解链接 中等 🤩🤩🤩🤩 差分 题目 题解 难度 推荐指数 798. 得分最高的最小轮调 LeetCode 题解链接 困难 🤩🤩🤩🤩 995. K 连续位的最小翻转次数 LeetCode 题解链接 困难 🤩🤩🤩 1109. 航班预订统计 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 树状数组 题目 题解 难度 推荐指数 307. 区域和检索 - 数组可修改 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 354. 俄罗斯套娃信封问题 LeetCode 题解链接 困难 🤩🤩🤩 673. 最长递增子序列的个数 LeetCode 题解链接 中等 🤩🤩🤩🤩 1310. 子数组异或查询 LeetCode 题解链接 中等 🤩🤩🤩🤩 1893. 检查是否区域内所有整数都被覆盖 LeetCode 题解链接 简单 🤩🤩🤩🤩 线段树 题目 题解 难度 推荐指数 307. 区域和检索 - 数组可修改 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 1109. 航班预订统计 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 1893. 检查是否区域内所有整数都被覆盖 LeetCode 题解链接 简单 🤩🤩🤩🤩 2213. 由单个字符重复的最长子字符串 LeetCode 题解链接 困难 🤩🤩🤩🤩🤩","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"数据结构与算法/Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"数据结构","slug":"数据结构","date":"2022-04-17T05:11:19.000Z","updated":"2022-04-19T16:07:32.419Z","comments":true,"path":"2022/04/17/数据结构/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","excerpt":"","text":"树 题目 题解 难度 推荐指数 1719. 重构一棵树的方案数 LeetCode 题解链接 困难 🤩🤩 二叉树 题目 题解 难度 推荐指数 230. 二叉搜索树中第K小的元素 LeetCode 题解链接 中等 🤩🤩🤩🤩 240. 搜索二维矩阵 II LeetCode 题解链接 中等 🤩🤩🤩🤩 297. 二叉树的序列化与反序列化 LeetCode 题解链接 困难 🤩🤩🤩🤩🤩 437. 路径总和 III LeetCode 题解链接 中等 🤩🤩🤩🤩 563. 二叉树的坡度 LeetCode 题解链接 简单 🤩🤩🤩🤩 606. 根据二叉树创建字符串 LeetCode 题解链接 简单 🤩🤩🤩🤩 653. 两数之和 IV - 输入 BST LeetCode 题解链接 简单 🤩🤩🤩🤩 783. 二叉搜索树节点最小距离 LeetCode 题解链接 简单 🤩🤩🤩 863. 二叉树中所有距离为 K 的结点 LeetCode 题解链接 中等 🤩🤩🤩🤩 938. 二叉搜索树的范围和 LeetCode 题解链接 简单 🤩🤩🤩 987. 二叉树的垂序遍历 LeetCode 题解链接 困难 🤩🤩🤩🤩🤩 993. 二叉树的堂兄弟节点 LeetCode 题解链接 简单 🤩🤩 1104. 二叉树寻路 LeetCode 题解链接 中等 🤩🤩🤩 剑指 Offer 37. 序列化二叉树 LeetCode 题解链接 困难 🤩🤩🤩🤩🤩 哈希表 题目 题解 难度 推荐指数 1. 两数之和 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 3. 无重复字符的最长子串 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 13. 罗马数字转整数 LeetCode 题解链接 简单 🤩🤩 30. 串联所有单词的子串 LeetCode 题解链接 困难 🤩🤩 36. 有效的数独 LeetCode 题解链接 中等 🤩🤩🤩🤩 137. 只出现一次的数字 II LeetCode 题解链接 中等 🤩🤩🤩 138. 复制带随机指针的链表 LeetCode 题解链接 中等 🤩🤩🤩 146. LRU 缓存机制 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 149. 直线上最多的点数 LeetCode 题解链接 困难 🤩🤩🤩 166. 分数到小数 LeetCode 题解链接 中等 🤩🤩🤩🤩 187. 重复的DNA序列 LeetCode 题解链接 中等 🤩🤩🤩🤩 219. 存在重复元素 II LeetCode 题解链接 中等 🤩🤩🤩🤩 229. 求众数 II LeetCode 题解链接 中等 🤩🤩🤩🤩 260. 只出现一次的数字 III LeetCode 题解链接 中等 🤩🤩🤩🤩 268. 丢失的数字 LeetCode 题解链接 简单 🤩🤩🤩🤩 299. 猜数字游戏 LeetCode 题解链接 中等 🤩🤩🤩🤩 380. O(1) 时间插入、删除和获取随机元素 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 318. 最大单词长度乘积 LeetCode 题解链接 中等 🤩🤩🤩🤩 432. 全 O(1) 的数据结构 LeetCode 题解链接 困难 🤩🤩🤩 447. 回旋镖的数量 LeetCode 题解链接 中等 🤩🤩🤩🤩 451. 根据字符出现频率排序 LeetCode 题解链接 中等 🤩🤩🤩🤩 460. LFU 缓存 LeetCode 题解链接 困难 🤩🤩🤩🤩🤩 496. 下一个更大元素 I LeetCode 题解链接 中等 🤩🤩🤩🤩 500. 键盘行 LeetCode 题解链接 简单 🤩🤩🤩🤩 519. 随机翻转矩阵 LeetCode 题解链接 中等 🤩🤩🤩🤩 554. 砖墙 LeetCode 题解链接 中等 🤩🤩🤩 594. 最长和谐子序列 LeetCode 题解链接 简单 🤩🤩🤩🤩 599. 两个列表的最小索引总和 LeetCode 题解链接 简单 🤩🤩🤩🤩 645. 错误的集合 LeetCode 题解链接 简单 🤩🤩🤩 653. 两数之和 IV - 输入 BST LeetCode 题解链接 简单 🤩🤩🤩🤩 677. 键值映射 LeetCode 题解链接 中等 🤩🤩🤩🤩 692. 前K个高频单词 LeetCode 题解链接 中等 🤩🤩🤩 697. 数组的度 LeetCode 题解链接 简单 🤩🤩🤩 705. 设计哈希集合 LeetCode 题解链接 简单 🤩🤩🤩🤩 706. 设计哈希映射 LeetCode 题解链接 简单 🤩🤩🤩🤩 726. 原子的数量 LeetCode 题解链接 困难 🤩🤩🤩🤩 728. 自除数 LeetCode 题解链接 简单 🤩🤩🤩 846. 一手顺子 LeetCode 题解链接 中等 🤩🤩🤩 869. 重新排序得到 2 的幂 LeetCode 题解链接 中等 🤩🤩🤩🤩 884. 两句话中的不常见单词 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 888. 公平的糖果棒交换 LeetCode 题解链接 简单 🤩🤩 930. 和相同的二元子数组 LeetCode 题解链接 中等 🤩🤩🤩 954. 二倍数对数组 LeetCode 题解链接 中等 🤩🤩🤩 981. 基于时间的键值存储 LeetCode 题解链接 中等 🤩🤩🤩🤩 987. 二叉树的垂序遍历 LeetCode 题解链接 困难 🤩🤩🤩 1001. 网格照明 LeetCode 题解链接 困难 🤩🤩🤩🤩 1074. 元素和为目标值的子矩阵数量 LeetCode 题解链接 困难 🤩🤩🤩 1178. 猜字谜 LeetCode 题解链接 困难 🤩🤩🤩🤩 1218. 最长定差子序列 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 1418. 点菜展示表 LeetCode 题解链接 中等 🤩🤩🤩 1436. 旅行终点站 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 1442. 形成两个异或相等数组的三元组数目 LeetCode 题解链接 中等 🤩🤩 1583. 统计不开心的朋友 LeetCode 题解链接 中等 🤩🤩🤩🤩 1600. 皇位继承顺序 LeetCode 题解链接 中等 🤩🤩🤩 1603. 设计停车系统 LeetCode 题解链接 简单 🤩🤩 1711. 大餐计数 LeetCode 题解链接 中等 🤩🤩🤩 1606. 找到处理最多请求的服务器 LeetCode 题解链接 困难 🤩🤩🤩🤩 1743. 从相邻元素对还原数组 LeetCode 题解链接 中等 🤩🤩🤩🤩 1748. 唯一元素的和 LeetCode 题解链接 简单 🤩🤩🤩🤩 1838. 最高频元素的频数 LeetCode 题解链接 中等 🤩🤩🤩 1995. 统计特殊四元组 LeetCode 题解链接 简单 🤩🤩🤩🤩 2006. 差的绝对值为 K 的数对数目 LeetCode 题解链接 简单 🤩🤩🤩🤩 2013. 检测正方形 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 2034. 股票价格波动 LeetCode 题解链接 中等 🤩🤩🤩🤩 面试题 10.02. 变位词组 LeetCode 题解链接 中等 🤩🤩🤩🤩 面试题 17.10. 主要元素 LeetCode 题解链接 简单 🤩🤩🤩🤩 剑指 Offer II 030. 插入、删除和随机访问都是 O(1) 的容器 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 红黑树 题目 题解 难度 推荐指数 1606. 找到处理最多请求的服务器 LeetCode 题解链接 困难 🤩🤩🤩🤩 2034. 股票价格波动 LeetCode 题解链接 中等 🤩🤩🤩🤩 链表 题目 题解 难度 推荐指数 2. 两数相加 LeetCode 题解链接 中等 🤩🤩🤩 19. 删除链表的倒数第 N 个结点 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 21. 合并两个有序链表 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 23. 合并K个升序链表 LeetCode 题解链接 困难 🤩🤩🤩 24. 两两交换链表中的节点 LeetCode 题解链接 中等 🤩🤩🤩🤩 25. K 个一组翻转链表 LeetCode 题解链接 困难 🤩🤩 61. 旋转链表 LeetCode 题解链接 中等 🤩🤩🤩 83. 删除排序链表中的重复元素 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 82. 删除排序链表中的重复元素 II LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 92. 反转链表 II LeetCode 题解链接 中等 🤩🤩🤩 138. 复制带随机指针的链表 LeetCode 题解链接 中等 🤩🤩🤩 160. 相交链表 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 146. LRU 缓存机制 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 203. 移除链表元素 LeetCode 题解链接 简单 🤩🤩🤩 237. 删除链表中的节点 LeetCode 题解链接 简单 🤩🤩🤩 382. 链表随机节点 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 430. 扁平化多级双向链表 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 432. 全 O(1) 的数据结构 LeetCode 题解链接 困难 🤩🤩🤩🤩 460. LFU 缓存 LeetCode 题解链接 困难 🤩🤩🤩🤩🤩 725. 分隔链表 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 1600. 皇位继承顺序 LeetCode 题解链接 中等 🤩🤩🤩 剑指 Offer 22. 链表中倒数第k个节点 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 剑指 Offer 52. 两个链表的第一个公共节点 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 面试题 02.05. 链表求和 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 栈 题目 题解 难度 推荐指数 20. 有效的括号 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 32. 最长有效括号 LeetCode 题解链接 困难 🤩🤩🤩🤩 71. 简化路径 LeetCode 题解链接 中等 🤩🤩🤩🤩 155. 最小栈 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 232. 用栈实现队列 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 341. 扁平化嵌套列表迭代器 LeetCode 题解链接 中等 🤩🤩🤩 385. 迷你语法分析器 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 726. 原子的数量 LeetCode 题解链接 困难 🤩🤩🤩🤩 1190. 反转每对括号间的子串 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 面试题 03.01. 三合一 LeetCode 题解链接 简单 🤩🤩🤩 面试题 02.05. 链表求和 LeetCode 题解链接 中等 🤩🤩🤩 单调栈 题目 题解 难度 推荐指数 42. 接雨水 LeetCode 题解链接 困难 🤩🤩🤩🤩 496. 下一个更大元素 I LeetCode 题解链接 中等 🤩🤩🤩🤩 503. 下一个更大元素 II LeetCode 题解链接 中等 🤩🤩🤩 456. 132 模式 LeetCode 题解链接 中等 🤩🤩🤩 2104. 子数组范围和 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 队列 题目 题解 难度 推荐指数 1047. 删除字符串中的所有相邻重复项 LeetCode 题解链接 简单 🤩🤩🤩🤩 1190. 反转每对括号间的子串 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 单调队列 题目 题解 难度 推荐指数 1438. 绝对差不超过限制的最长连续子数组 LeetCode 题解链接 中等 🤩🤩🤩 堆 题目 题解 难度 推荐指数 23. 合并K个升序链表 LeetCode 题解链接 困难 🤩🤩🤩 218. 天际线问题 LeetCode 题解链接 困难 🤩🤩🤩 264. 丑数 II LeetCode 题解链接 中等 🤩🤩🤩 295. 数据流的中位数 LeetCode 题解链接 中等 🤩🤩🤩🤩 313. 超级丑数 LeetCode 题解链接 中等 🤩🤩🤩 373. 查找和最小的K对数字 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 407. 接雨水 II LeetCode 题解链接 困难 🤩🤩🤩🤩 451. 根据字符出现频率排序 LeetCode 题解链接 中等 🤩🤩🤩🤩 480. 滑动窗口中位数 LeetCode 题解链接 困难 🤩🤩🤩🤩 502. IPO LeetCode 题解链接 困难 🤩🤩🤩 630. 课程表 III LeetCode 题解链接 困难 🤩🤩🤩🤩 692. 前K个高频单词 LeetCode 题解链接 中等 🤩🤩🤩🤩 703. 数据流中的第 K 大元素 LeetCode 题解链接 简单 🤩🤩🤩 726. 原子的数量 LeetCode 题解链接 困难 🤩🤩🤩🤩 786. 第 K 个最小的素数分数 LeetCode 题解链接 中等 🤩🤩🤩 846. 一手顺子 LeetCode 题解链接 中等 🤩🤩🤩 954. 二倍数对数组 LeetCode 题解链接 中等 🤩🤩🤩🤩 987. 二叉树的垂序遍历 LeetCode 题解链接 困难 🤩🤩🤩🤩🤩 1005. K 次取反后最大化的数组和 LeetCode 题解链接 简单 🤩🤩🤩🤩 1337. 矩阵中战斗力最弱的 K 行 LeetCode 题解链接 简单 🤩🤩🤩 1405. 最长快乐字符串 LeetCode 题解链接 中等 🤩🤩🤩🤩 1606. 找到处理最多请求的服务器 LeetCode 题解链接 困难 🤩🤩🤩🤩 1705. 吃苹果的最大数目 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 1834. 单线程 CPU LeetCode 题解链接 中等 🤩🤩🤩🤩 面试题 17.14. 最小K个数 LeetCode 题解链接 中等 🤩🤩🤩🤩","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"数据结构与算法/Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"动态规划","slug":"动态规划","date":"2022-04-17T05:11:06.000Z","updated":"2022-04-19T16:06:27.451Z","comments":true,"path":"2022/04/17/动态规划/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/17/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/","excerpt":"","text":"记忆化搜索 题目 题解 难度 推荐指数 87. 扰乱字符串 LeetCode 题解链接 困难 🤩🤩🤩 375. 猜数字大小 II LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 403. 青蛙过河 LeetCode 题解链接 困难 🤩🤩🤩🤩 494. 目标和 LeetCode 题解链接 中等 🤩🤩🤩🤩 552. 学生出勤记录 II LeetCode 题解链接 困难 🤩🤩🤩🤩 576. 出界的路径数 LeetCode 题解链接 中等 🤩🤩🤩🤩 913. 猫和老鼠 LeetCode 题解链接 困难 🤩🤩🤩🤩 1137. 第 N 个泰波那契数 LeetCode 题解链接 简单 🤩🤩🤩🤩 剑指 Offer 10- I. 斐波那契数列 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 线性DP 题目 题解 难度 推荐指数 10. 正则表达式匹配 LeetCode 题解链接 困难 🤩🤩🤩🤩 44. 通配符匹配 LeetCode 题解链接 困难 🤩🤩🤩🤩 45. 跳跃游戏 II LeetCode 题解链接 中等 🤩🤩🤩🤩 91. 解码方法 LeetCode 题解链接 中等 🤩🤩🤩 115. 不同的子序列 LeetCode 题解链接 困难 🤩🤩🤩🤩 119. 杨辉三角 II LeetCode 题解链接 简单 🤩🤩🤩 213. 打家劫舍 II LeetCode 题解链接 中等 🤩🤩🤩 338. 比特位计数 LeetCode 题解链接 简单 🤩🤩🤩 403. 青蛙过河 LeetCode 题解链接 困难 🤩🤩🤩 576. 出界的路径数 LeetCode 题解链接 中等 🤩🤩🤩🤩 639. 解码方法 II LeetCode 题解链接 困难 🤩🤩🤩🤩 650. 只有两个键的键盘 LeetCode 题解链接 中等 🤩🤩🤩🤩 678. 有效的括号字符串 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 688. 骑士在棋盘上的概率 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 1137. 第 N 个泰波那契数 LeetCode 题解链接 简单 🤩🤩🤩🤩 1220. 统计元音字母序列的数目 LeetCode 题解链接 困难 🤩🤩🤩🤩 1751. 最多可以参加的会议数目 II LeetCode 题解链接 困难 🤩🤩🤩 1787. 使所有区间的异或结果为零 LeetCode 题解链接 困难 🤩🤩🤩🤩 剑指 Offer 10- I. 斐波那契数列 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 剑指 Offer 42. 连续子数组的最大和 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 LCP 07. 传递信息 LeetCode 题解链接 简单 🤩🤩🤩🤩 背包DP 题目 题解 难度 279. 完全平方数 LeetCode 题解链接 中等 🤩🤩🤩🤩 322. 零钱兑换 LeetCode 题解链接 中等 🤩🤩🤩🤩 416. 分割等和子集 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 474. 一和零 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 494. 目标和 LeetCode 题解链接 中等 🤩🤩🤩🤩 518. 零钱兑换 II LeetCode 题解链接 中等 🤩🤩🤩🤩 638. 大礼包 LeetCode 题解链接 中等 🤩🤩🤩🤩 879. 盈利计划 LeetCode 题解链接 困难 🤩🤩🤩🤩🤩 1049. 最后一块石头的重量 II LeetCode 题解链接 中等 🤩🤩🤩🤩 1155. 掷骰子的N种方法 LeetCode 题解链接 中等 🤩🤩🤩🤩 1449. 数位成本和为目标值的最大数字 LeetCode 题解链接 困难 🤩🤩🤩🤩 1995. 统计特殊四元组 LeetCode 题解链接 简单 🤩🤩🤩🤩 序列DP 题目 题解 难度 推荐指数 334. 递增的三元子序列 LeetCode 题解链接 中等 🤩🤩🤩🤩 354. 俄罗斯套娃信封问题 LeetCode 题解链接 困难 🤩🤩🤩🤩🤩 368. 最大整除子集 LeetCode 题解链接 中等 🤩🤩🤩🤩 390. 消除游戏 LeetCode 题解链接 中等 🤩🤩🤩🤩 446. 等差数列划分 II - 子序列 LeetCode 题解链接 困难 🤩🤩🤩🤩🤩 472. 连接词 LeetCode 题解链接 困难 🤩🤩🤩🤩 583. 两个字符串的删除操作 LeetCode 题解链接 中等 🤩🤩🤩🤩 629. K个逆序对数组 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 673. 最长递增子序列的个数 LeetCode 题解链接 中等 🤩🤩🤩🤩 689. 三个无重叠子数组的最大和 LeetCode 题解链接 困难 🤩🤩🤩🤩 740. 删除并获得点数 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 978. 最长湍流子数组 LeetCode 题解链接 中等 🤩🤩🤩 1035. 不相交的线 LeetCode 题解链接 中等 🤩🤩🤩🤩 1143. 最长公共子序列 LeetCode 题解链接 中等 🤩🤩🤩🤩 1218. 最长定差子序列 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 1473. 粉刷房子 III LeetCode 题解链接 困难 🤩🤩🤩🤩 1713. 得到子序列的最少操作次数 LeetCode 题解链接 困难 🤩🤩🤩🤩🤩 区间DP 题目 题解 难度 推荐指数 87. 扰乱字符串 LeetCode 题解链接 困难 🤩🤩🤩 375. 猜数字大小 II LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 516. 最长回文子序列 LeetCode 题解链接 困难 🤩🤩🤩 664. 奇怪的打印机 LeetCode 题解链接 困难 🤩🤩🤩🤩🤩 877. 石子游戏 LeetCode 题解链接 中等 🤩🤩🤩🤩 2104. 子数组范围和 LeetCode 题解链接 中等 🤩🤩🤩🤩 状压DP 题目 题解 难度 推荐指数 526. 优美的排列 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 847. 访问所有节点的最短路径 LeetCode 题解链接 困难 🤩🤩🤩🤩🤩 1994. 好子集的数目 LeetCode 题解链接 困难 🤩🤩🤩🤩 2044. 统计按位或能得到最大值的子集数目 LeetCode 题解链接 困难 🤩🤩🤩🤩 状态机DP 题目 题解 难度 推荐指数 552. 学生出勤记录 II LeetCode 题解链接 困难 🤩🤩🤩🤩 1218. 最长定差子序列 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 数位DP 题目 题解 难度 推荐指数 600. 不含连续1的非负整数 LeetCode 题解链接 困难 🤩🤩🤩🤩🤩 树形DP 题目 题解 难度 推荐指数 310. 最小高度树 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"数据结构与算法/Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"启发式搜索","slug":"启发式搜索","date":"2022-04-17T05:10:53.000Z","updated":"2022-04-19T16:07:16.602Z","comments":true,"path":"2022/04/17/启发式搜索/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/17/%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/","excerpt":"","text":"题目 题解 难度 推荐指数 127. 单词接龙 LeetCode 题解链接 困难 🤩🤩🤩🤩🤩 488. 祖玛游戏 LeetCode 题解链接 困难 🤩🤩🤩🤩 752. 打开转盘锁 LeetCode 题解链接 中等 🤩🤩🤩🤩 773. 滑动谜题 LeetCode 题解链接 困难 🤩🤩🤩🤩 847. 访问所有节点的最短路径 LeetCode 题解链接 困难 🤩🤩🤩🤩🤩 1239. 串联字符串的最大长度 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 1723. 完成所有工作的最短时间 LeetCode 题解链接 困难 🤩🤩🤩🤩 2045. 到达目的地的第二短时间 LeetCode 题解链接 困难 🤩🤩🤩🤩","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"数据结构与算法/Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"并查集","slug":"并查集","date":"2022-04-17T05:10:43.000Z","updated":"2022-04-19T16:05:37.399Z","comments":true,"path":"2022/04/17/并查集/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/17/%E5%B9%B6%E6%9F%A5%E9%9B%86/","excerpt":"","text":"题目 题解 难度 推荐指数 765. 情侣牵手 LeetCode 题解链接 困难 🤩🤩🤩 778. 水位上升的泳池中游泳 LeetCode 题解链接 困难 🤩🤩🤩 1020. 飞地的数量 LeetCode 题解链接 中等 🤩🤩🤩 1631. 最小体力消耗路径 LeetCode 题解链接 中等 🤩🤩🤩","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"数据结构与算法/Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"图论","slug":"图论","date":"2022-04-17T05:10:35.000Z","updated":"2022-04-19T16:07:45.462Z","comments":true,"path":"2022/04/17/图论/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/17/%E5%9B%BE%E8%AE%BA/","excerpt":"","text":"BFS 题目 题解 难度 推荐指数 17. 电话号码的字母组合 LeetCode 题解链接 中等 🤩🤩🤩🤩 22. 括号生成 LeetCode 题解链接 中等 🤩🤩🤩🤩 37. 解数独 LeetCode 题解链接 困难 🤩🤩🤩🤩 39. 组合总和 LeetCode 题解链接 中等 🤩🤩🤩🤩 40. 组合总和 II LeetCode 题解链接 中等 🤩🤩🤩🤩 211. 添加与搜索单词 - 数据结构设计 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 282. 给表达式添加运算符 LeetCode 题解链接 困难 🤩🤩🤩🤩 301. 删除无效的括号 LeetCode 题解链接 困难 🤩🤩🤩🤩 341. 扁平化嵌套列表迭代器 LeetCode 题解链接 中等 🤩🤩🤩 397. 整数替换 LeetCode 题解链接 中等 🤩🤩🤩🤩 403. 青蛙过河 LeetCode 题解链接 困难 🤩🤩🤩🤩 437. 路径总和 III LeetCode 题解链接 中等 🤩🤩🤩🤩 488. 祖玛游戏 LeetCode 题解链接 困难 🤩🤩🤩🤩 494. 目标和 LeetCode 题解链接 中等 🤩🤩🤩🤩 559. N 叉树的最大深度 LeetCode 题解链接 简单 🤩🤩🤩🤩 563. 二叉树的坡度 LeetCode 题解链接 简单 🤩🤩🤩🤩 589. N 叉树的前序遍历 LeetCode 题解链接 简单 🤩🤩🤩 590. N 叉树的后序遍历 LeetCode 题解链接 简单 🤩🤩🤩 606. 根据二叉树创建字符串 LeetCode 题解链接 简单 🤩🤩🤩🤩 638. 大礼包 LeetCode 题解链接 中等 🤩🤩🤩🤩 653. 两数之和 IV - 输入 BST LeetCode 题解链接 简单 🤩🤩🤩🤩 677. 键值映射 LeetCode 题解链接 中等 🤩🤩🤩🤩 690. 员工的重要性 LeetCode 题解链接 简单 🤩🤩🤩 778. 水位上升的泳池中游泳 LeetCode 题解链接 困难 🤩🤩🤩 783. 二叉搜索树节点最小距离 LeetCode 题解链接 简单 🤩🤩🤩 869. 重新排序得到 2 的幂 LeetCode 题解链接 中等 🤩🤩🤩🤩 872. 叶子相似的树 LeetCode 题解链接 简单 🤩🤩🤩 938. 二叉搜索树的范围和 LeetCode 题解链接 简单 🤩🤩🤩 987. 二叉树的垂序遍历 LeetCode 题解链接 困难 🤩🤩🤩🤩🤩 993. 二叉树的堂兄弟节点 LeetCode 题解链接 简单 🤩🤩 1239. 串联字符串的最大长度 LeetCode 题解链接 中等 🤩🤩🤩 1609. 奇偶树 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 1723. 完成所有工作的最短时间 LeetCode 题解链接 困难 🤩🤩🤩 1766. 互质树 LeetCode 题解链接 困难 🤩🤩🤩🤩 2044. 统计按位或能得到最大值的子集数目 LeetCode 题解链接 困难 🤩🤩🤩🤩 DFS 题目 题解 难度 推荐指数 403. 青蛙过河 LeetCode 题解链接 困难 🤩🤩🤩🤩 778. 水位上升的泳池中游泳 LeetCode 题解链接 困难 🤩🤩🤩 797. 所有可能的路径 LeetCode 题解链接 中等 🤩🤩🤩🤩 863. 二叉树中所有距离为 K 的结点 LeetCode 题解链接 中等 🤩🤩🤩🤩 1020. 飞地的数量 LeetCode 题解链接 中等 🤩🤩🤩 1034. 边界着色 LeetCode 题解链接 中等 🤩🤩🤩🤩 1723. 完成所有工作的最短时间 LeetCode 题解链接 困难 🤩🤩🤩 1766. 互质树 LeetCode 题解链接 困难 🤩🤩🤩🤩 2049. 统计最高分的节点数目 LeetCode 题解链接 中等 🤩🤩🤩🤩 LCP 07. 传递信息 LeetCode 题解链接 简单 🤩🤩🤩🤩 拓扑排序 题目 题解 难度 推荐指数 802. 找到最终的安全状态 LeetCode 题解链接 中等 🤩🤩🤩🤩 851. 喧闹和富有 LeetCode 题解链接 中等 🤩🤩🤩🤩 最短路 题目 题解 难度 推荐指数 407. 接雨水 II LeetCode 题解链接 困难 🤩🤩🤩🤩 743. 网络延迟时间 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 787. K 站中转内最便宜的航班 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 1631. 最小体力消耗路径 LeetCode 题解链接 中等 🤩🤩🤩 1786. 从第一个节点出发到最后一个节点的受限路径数 LeetCode 题解链接 中等 🤩🤩🤩 2045. 到达目的地的第二短时间 LeetCode 题解链接 困难 🤩🤩🤩🤩 最小生成树 题目 题解 难度 推荐指数 778. 水位上升的泳池中游泳 LeetCode 题解链接 困难 🤩🤩🤩 1631. 最小体力消耗路径 LeetCode 题解链接 中等 🤩🤩🤩","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"数据结构与算法/Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"递归 & 迭代","slug":"递归-迭代","date":"2022-04-17T05:10:26.000Z","updated":"2022-04-19T16:06:25.593Z","comments":true,"path":"2022/04/17/递归-迭代/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/17/%E9%80%92%E5%BD%92-%E8%BF%AD%E4%BB%A3/","excerpt":"","text":"BFS 题目 题解 难度 推荐指数 90. 子集 II LeetCode 题解链接 中等 🤩🤩🤩🤩 297. 二叉树的序列化与反序列化 LeetCode 题解链接 困难 🤩🤩🤩🤩 397. 整数替换 LeetCode 题解链接 中等 🤩🤩🤩🤩 403. 青蛙过河 LeetCode 题解链接 困难 🤩🤩🤩🤩 559. N 叉树的最大深度 LeetCode 题解链接 简单 🤩🤩🤩🤩 589. N 叉树的前序遍历 LeetCode 题解链接 简单 🤩🤩🤩 590. N 叉树的后序遍历 LeetCode 题解链接 简单 🤩🤩🤩 690. 员工的重要性 LeetCode 题解链接 简单 🤩🤩🤩 778. 水位上升的泳池中游泳 LeetCode 题解链接 困难 🤩🤩🤩 783. 二叉搜索树节点最小距离 LeetCode 题解链接 简单 🤩🤩🤩 838. 推多米诺 LeetCode 题解链接 中等 🤩🤩🤩🤩 938. 二叉搜索树的范围和 LeetCode 题解链接 简单 🤩🤩🤩 993. 二叉树的堂兄弟节点 LeetCode 题解链接 简单 🤩🤩 1609. 奇偶树 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 DFS 题目 题解 难度 推荐指数 17. 电话号码的字母组合 LeetCode 题解链接 中等 🤩🤩🤩🤩 22. 括号生成 LeetCode 题解链接 中等 🤩🤩🤩🤩 37. 解数独 LeetCode 题解链接 困难 🤩🤩🤩🤩 39. 组合总和 LeetCode 题解链接 中等 🤩🤩🤩🤩 40. 组合总和 II LeetCode 题解链接 中等 🤩🤩🤩🤩 211. 添加与搜索单词 - 数据结构设计 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 282. 给表达式添加运算符 LeetCode 题解链接 困难 🤩🤩🤩🤩 301. 删除无效的括号 LeetCode 题解链接 困难 🤩🤩🤩🤩 341. 扁平化嵌套列表迭代器 LeetCode 题解链接 中等 🤩🤩🤩 397. 整数替换 LeetCode 题解链接 中等 🤩🤩🤩🤩 403. 青蛙过河 LeetCode 题解链接 困难 🤩🤩🤩🤩 437. 路径总和 III LeetCode 题解链接 中等 🤩🤩🤩🤩 488. 祖玛游戏 LeetCode 题解链接 困难 🤩🤩🤩🤩 494. 目标和 LeetCode 题解链接 中等 🤩🤩🤩🤩 559. N 叉树的最大深度 LeetCode 题解链接 简单 🤩🤩🤩🤩 563. 二叉树的坡度 LeetCode 题解链接 简单 🤩🤩🤩🤩 589. N 叉树的前序遍历 LeetCode 题解链接 简单 🤩🤩🤩 590. N 叉树的后序遍历 LeetCode 题解链接 简单 🤩🤩🤩 606. 根据二叉树创建字符串 LeetCode 题解链接 简单 🤩🤩🤩🤩 638. 大礼包 LeetCode 题解链接 中等 🤩🤩🤩🤩 653. 两数之和 IV - 输入 BST LeetCode 题解链接 简单 🤩🤩🤩🤩 677. 键值映射 LeetCode 题解链接 中等 🤩🤩🤩🤩 690. 员工的重要性 LeetCode 题解链接 简单 🤩🤩🤩 778. 水位上升的泳池中游泳 LeetCode 题解链接 困难 🤩🤩🤩 783. 二叉搜索树节点最小距离 LeetCode 题解链接 简单 🤩🤩🤩 869. 重新排序得到 2 的幂 LeetCode 题解链接 中等 🤩🤩🤩🤩 872. 叶子相似的树 LeetCode 题解链接 简单 🤩🤩🤩 938. 二叉搜索树的范围和 LeetCode 题解链接 简单 🤩🤩🤩 987. 二叉树的垂序遍历 LeetCode 题解链接 困难 🤩🤩🤩🤩🤩 993. 二叉树的堂兄弟节点 LeetCode 题解链接 简单 🤩🤩 1239. 串联字符串的最大长度 LeetCode 题解链接 中等 🤩🤩🤩 1609. 奇偶树 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 1723. 完成所有工作的最短时间 LeetCode 题解链接 困难 🤩🤩🤩 1766. 互质树 LeetCode 题解链接 困难 🤩🤩🤩🤩 2044. 统计按位或能得到最大值的子集数目 LeetCode 题解链接 困难 🤩🤩🤩🤩","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"数据结构与算法/Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"贪心算法","slug":"贪心算法","date":"2022-04-17T05:10:13.000Z","updated":"2022-04-19T16:07:37.721Z","comments":true,"path":"2022/04/17/贪心算法/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/17/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/","excerpt":"","text":"题目 题解 难度 推荐指数 11. 盛最多水的容器 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 45. 跳跃游戏 II LeetCode 题解链接 中等 🤩🤩🤩🤩 179. 最大数 LeetCode 题解链接 中等 🤩🤩🤩🤩 334. 递增的三元子序列 LeetCode 题解链接 中等 🤩🤩🤩🤩 397. 整数替换 LeetCode 题解链接 中等 🤩🤩🤩🤩 421. 数组中两个数的最大异或值 LeetCode 题解链接 中等 🤩🤩🤩🤩 502. IPO LeetCode 题解链接 困难 🤩🤩🤩 517. 超级洗衣机 LeetCode 题解链接 困难 🤩🤩🤩 524. 通过删除字母匹配到字典里最长单词 LeetCode 题解链接 中等 🤩🤩🤩🤩 553. 最优除法 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 561. 数组拆分 I LeetCode 题解链接 简单 🤩🤩🤩🤩 564. 寻找最近的回文数 LeetCode 题解链接 困难 🤩🤩🤩 575. 分糖果 LeetCode 题解链接 简单 🤩🤩🤩🤩 630. 课程表 III LeetCode 题解链接 困难 🤩🤩🤩🤩 765. 情侣牵手 LeetCode 题解链接 困难 🤩🤩🤩 781. 森林中的兔子 LeetCode 题解链接 中等 🤩🤩🤩🤩 807. 保持城市天际线 LeetCode 题解链接 中等 🤩🤩🤩🤩 881. 救生艇 LeetCode 题解链接 中等 🤩🤩🤩🤩 995. K 连续位的最小翻转次数 LeetCode 题解链接 困难 🤩🤩🤩 1005. K 次取反后最大化的数组和 LeetCode 题解链接 简单 🤩🤩🤩🤩 1218. 最长定差子序列 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 1221. 分割平衡字符串 LeetCode 题解链接 简单 🤩🤩🤩🤩 1405. 最长快乐字符串 LeetCode 题解链接 中等 🤩🤩🤩🤩 1414. 和为 K 的最少斐波那契数字数目 LeetCode 题解链接 中等 🤩🤩🤩🤩 1705. 吃苹果的最大数目 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 1707. 与数组中元素的最大异或值 LeetCode 题解链接 困难 🤩🤩🤩 1713. 得到子序列的最少操作次数 LeetCode 题解链接 困难 🤩🤩🤩🤩🤩 1736. 替换隐藏数字得到的最晚时间 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 1833. 雪糕的最大数量 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 1846. 减小和重新排列数组后的最大元素 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 1877. 数组中最大数对和的最小值 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 1996. 游戏中弱角色的数量 LeetCode 题解链接 中等 🤩🤩🤩🤩 2170. 使数组变成交替数组的最少操作数 LeetCode 题解链接 中等 🤩🤩🤩🤩","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"数据结构与算法/Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"回溯算法","slug":"回溯算法","date":"2022-04-17T05:10:05.000Z","updated":"2022-04-19T16:06:53.071Z","comments":true,"path":"2022/04/17/回溯算法/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/17/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/","excerpt":"","text":"题目 题解 难度 推荐指数 17. 电话号码的字母组合 LeetCode 题解链接 中等 🤩🤩🤩🤩 37. 解数独 LeetCode 题解链接 困难 🤩🤩🤩🤩 39. 组合总和 LeetCode 题解链接 中等 🤩🤩🤩🤩 40. 组合总和 II LeetCode 题解链接 中等 🤩🤩🤩🤩 90. 子集 II LeetCode 题解链接 中等 🤩🤩🤩🤩 131. 分割回文串 LeetCode 题解链接 中等 🤩🤩🤩🤩 212. 单词搜索 II LeetCode 题解链接 困难 🤩🤩🤩 301. 删除无效的括号 LeetCode 题解链接 困难 🤩🤩🤩🤩 306. 累加数 LeetCode 题解链接 中等 🤩🤩🤩🤩 797. 所有可能的路径 LeetCode 题解链接 中等 🤩🤩🤩🤩 1219. 黄金矿工 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 剑指 Offer 38. 字符串的排列 LeetCode 题解链接 中等 🤩🤩🤩🤩","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"数据结构与算法/Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"树的搜索","slug":"树的搜索","date":"2022-04-17T05:09:52.000Z","updated":"2022-04-19T16:07:26.916Z","comments":true,"path":"2022/04/17/树的搜索/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/17/%E6%A0%91%E7%9A%84%E6%90%9C%E7%B4%A2/","excerpt":"","text":"题目 题解 难度 推荐指数 74. 搜索二维矩阵 LeetCode 题解链接 中等 🤩🤩🤩🤩 173. 二叉搜索树迭代器 LeetCode 题解链接 中等 🤩🤩🤩🤩 331. 验证二叉树的前序序列化 LeetCode 题解链接 中等 🤩🤩🤩 653. 两数之和 IV - 输入 BST LeetCode 题解链接 简单 🤩🤩🤩🤩 589. N 叉树的前序遍历 LeetCode 题解链接 简单 🤩🤩🤩 590. N 叉树的后序遍历 LeetCode 题解链接 简单 🤩🤩🤩 671. 二叉树中第二小的节点 LeetCode 题解链接 简单 🤩🤩 700. 二叉搜索树中的搜索 LeetCode 题解链接 简单 🤩🤩🤩🤩 778. 水位上升的泳池中游泳 LeetCode 题解链接 困难 🤩🤩🤩 783. 二叉搜索树节点最小距离 LeetCode 题解链接 简单 🤩🤩🤩 872. 叶子相似的树 LeetCode 题解链接 简单 🤩🤩🤩 897. 递增顺序搜索树 LeetCode 题解链接 简单 🤩🤩🤩🤩 938. 二叉搜索树的范围和 LeetCode 题解链接 简单 🤩🤩🤩 993. 二叉树的堂兄弟节点 LeetCode 题解链接 简单 🤩🤩","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"数据结构与算法/Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"二分","slug":"二分","date":"2022-04-17T05:09:41.000Z","updated":"2022-04-22T01:55:29.193Z","comments":true,"path":"2022/04/17/二分/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/17/%E4%BA%8C%E5%88%86/","excerpt":"","text":"题目 题解 难度 推荐指数 4. 寻找两个正序数组的中位数 Freedom的题解 困难 😻😻😻😻 29. 两数相除 Freedom的题解 中等 😻😻😻 33. 搜索旋转排序数组 Freedom的题解 中等 😻😻😻😻😻 34. 在排序数组中查找元素的第一个和最后一个位置 Freedom的题解 中等 😻😻😻😻😻 35. 搜索插入位置 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 74. 搜索二维矩阵 LeetCode 题解链接 中等 🤩🤩🤩🤩 81. 搜索旋转排序数组 II LeetCode 题解链接 中等 🤩🤩🤩🤩 153. 寻找旋转排序数组中的最小值 LeetCode 题解链接 中等 🤩🤩🤩 154. 寻找旋转排序数组中的最小值 II LeetCode 题解链接 困难 🤩🤩🤩 162. 寻找峰值 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 220. 存在重复元素 III LeetCode 题解链接 中等 🤩🤩🤩 240. 搜索二维矩阵 II LeetCode 题解链接 中等 🤩🤩🤩🤩 274. H 指数 LeetCode 题解链接 中等 🤩🤩🤩 275. H 指数 II LeetCode 题解链接 中等 🤩🤩🤩 278. 第一个错误的版本 LeetCode 题解链接 简单 🤩🤩🤩🤩 334. 递增的三元子序列 LeetCode 题解链接 中等 🤩🤩🤩🤩 352. 将数据流变为多个不相交区间 LeetCode 题解链接 困难 🤩🤩🤩🤩 354. 俄罗斯套娃信封问题 LeetCode 题解链接 困难 🤩🤩🤩 363. 矩形区域不超过 K 的最大数值和 LeetCode 题解链接 困难 🤩🤩🤩 367. 有效的完全平方数 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 373. 查找和最小的K对数字 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 374. 猜数字大小 LeetCode 题解链接 简单 🤩🤩🤩 441. 排列硬币 LeetCode 题解链接 简单 🤩🤩🤩 475. 供暖器 LeetCode 题解链接 中等 🤩🤩🤩🤩 528. 按权重随机选择 LeetCode 题解链接 中等 🤩🤩🤩🤩 540. 有序数组中的单一元素 LeetCode 题解链接 中等 🤩🤩🤩🤩 611. 有效三角形的个数 LeetCode 题解链接 中等 🤩🤩🤩🤩 704. 二分查找 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 778. 水位上升的泳池中游泳 LeetCode 题解链接 困难 🤩🤩🤩 786. 第 K 个最小的素数分数 LeetCode 题解链接 中等 🤩🤩🤩 852. 山脉数组的峰顶索引 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 911. 在线选举 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 981. 基于时间的键值存储 LeetCode 题解链接 中等 🤩🤩🤩🤩 1004. 最大连续1的个数 III LeetCode 题解链接 中等 🤩🤩🤩 1011. 在 D 天内送达包裹的能力 LeetCode 题解链接 中等 🤩🤩🤩🤩 1044. 最长重复子串 LeetCode 题解链接 困难 🤩🤩🤩🤩 1208. 尽可能使字符串相等 LeetCode 题解链接 中等 🤩🤩🤩 1337. 矩阵中战斗力最弱的 K 行 LeetCode 题解链接 简单 🤩🤩🤩 1414. 和为 K 的最少斐波那契数字数目 LeetCode 题解链接 中等 🤩🤩🤩🤩 1438. 绝对差不超过限制的最长连续子数组 LeetCode 题解链接 中等 🤩🤩🤩 1482. 制作 m 束花所需的最少天数 LeetCode 题解链接 中等 🤩🤩🤩 1707. 与数组中元素的最大异或值 LeetCode 题解链接 困难 🤩🤩🤩 1713. 得到子序列的最少操作次数 LeetCode 题解链接 困难 🤩🤩🤩 1751. 最多可以参加的会议数目 II LeetCode 题解链接 困难 🤩🤩🤩 1818. 绝对差值和 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 1838. 最高频元素的频数 LeetCode 题解链接 中等 🤩🤩🤩 1894. 找到需要补充粉笔的学生编号 LeetCode 题解链接 中等 🤩🤩🤩🤩 1984. 学生分数的最小差值 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 2055. 蜡烛之间的盘子 LeetCode 题解链接 中等 🤩🤩🤩🤩 剑指 Offer 53 - I. 在排序数组中查找数字 I LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 剑指 Offer II 069. 山峰数组的顶部 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 二分 模板 两种 12345678910 long l, r = 1000009; while(l &lt; r)&#123; long mid = l + r + 1 &gt;&gt; 1;//避免了死循环 if(check(mid))&#123; l = mid;&#125; else&#123; r = mid - 1; &#125;&#125; 123456789long l = 0, r = 1000009;while (l &lt; r) &#123; long mid = l + r &gt;&gt; 1; if (check(mid)) &#123; r = mid; &#125; else &#123; l = mid + 1; &#125;&#125; 二分有一个比较容易混淆的点是 当需要找目标值第一次出现的下标时，条件应该写成 nums[mid]&gt;=targetnums[mid] &gt;= targetnums[mid]&gt;=target 还是 nums[mid]&lt;=targetnums[mid] &lt;= targetnums[mid]&lt;=target 其实有一个很好理解的方法： 由于二分是从中间开始找起的，所以找的必然是条件区间中靠近中心的的边界值。 文字不好理解，我们结合图片来看： 快速乘法 模板 123456789long mul (long a, long k)&#123; long ans = 0; while(k&gt;0)&#123; if((k&amp;1) == 1)ans+=a; k&gt;&gt;1; a&lt;&lt;1; &#125; return ans;&#125; Quote by 宫水三叶 「二分」的本质是两段性，并非单调性。只要一段满足某个性质，另外一段不满足某个性质，就可以用「二分」。","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"数据结构与算法/Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"滑动窗口","slug":"滑动窗口","date":"2022-04-17T05:09:31.000Z","updated":"2022-04-19T16:06:50.785Z","comments":true,"path":"2022/04/17/滑动窗口/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/17/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/","excerpt":"","text":"题目 题解 难度 推荐指数 3. 无重复字符的最长子串 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 30. 串联所有单词的子串 LeetCode 题解链接 困难 🤩🤩 187. 重复的DNA序列 LeetCode 题解链接 中等 🤩🤩🤩🤩 219. 存在重复元素 II LeetCode 题解链接 简单 🤩🤩🤩🤩 220. 存在重复元素 III LeetCode 题解链接 中等 🤩🤩🤩 424. 替换后的最长重复字符 LeetCode 题解链接 中等 🤩🤩🤩🤩 438. 找到字符串中所有字母异位词 LeetCode 题解链接 中等 🤩🤩🤩🤩 480. 滑动窗口中位数 LeetCode 题解链接 困难 🤩🤩🤩🤩 567. 字符串的排列 LeetCode 题解链接 中等 🤩🤩🤩 594. 最长和谐子序列 LeetCode 题解链接 简单 🤩🤩🤩🤩 643. 子数组最大平均数 I LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 992. K 个不同整数的子数组 LeetCode 题解链接 困难 🤩🤩🤩🤩 1004. 最大连续1的个数 III LeetCode 题解链接 中等 🤩🤩🤩 1052. 爱生气的书店老板 LeetCode 题解链接 中等 🤩🤩🤩 1208. 尽可能使字符串相等 LeetCode 题解链接 中等 🤩🤩🤩 1423. 可获得的最大点数 LeetCode 题解链接 中等 🤩🤩🤩🤩 1438. 绝对差不超过限制的最长连续子数组 LeetCode 题解链接 中等 🤩🤩🤩 1610. 可见点的最大数目 LeetCode 题解链接 困难 🤩🤩🤩🤩 1838. 最高频元素的频数 LeetCode 题解链接 中等 🤩🤩🤩 1984. 学生分数的最小差值 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 2024. 考试的最大困扰度 LeetCode 题解链接 中等 🤩🤩🤩🤩","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"数据结构与算法/Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"April 17th","slug":"April-17th","date":"2022-04-16T16:06:54.000Z","updated":"2022-04-20T09:10:17.792Z","comments":true,"path":"2022/04/17/April-17th/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/17/April-17th/","excerpt":"","text":"To Do [ ] CS144 lab2 [x] Leetcode *3 [x] Leetcode 每日一题 [ ] 微信小程序 [ ] 计网实验 [x] 数据库JDBC [x] 练琴2h 总结 数据库JDBC需要整理一下 CS144！！！ &amp;&amp; 计网","categories":[{"name":"Everday","slug":"Everday","permalink":"https://freeeeeeeeedom.gitee.io/categories/Everday/"},{"name":"2022_大二下","slug":"Everday/2022-大二下","permalink":"https://freeeeeeeeedom.gitee.io/categories/Everday/2022-%E5%A4%A7%E4%BA%8C%E4%B8%8B/"}],"tags":[{"name":"2022_Spring","slug":"2022-Spring","permalink":"https://freeeeeeeeedom.gitee.io/tags/2022-Spring/"}]},{"title":"April 16th","slug":"April-16th","date":"2022-04-16T04:37:32.000Z","updated":"2022-04-20T09:10:19.894Z","comments":true,"path":"2022/04/16/April-16th/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/16/April-16th/","excerpt":"","text":"To Do [ ] CS144 lab2 [x] Leetcode *3 [x] Leetcode 每日一题 [ ] 微信小程序 [ ] 计网实验 [ ] 数据库JDBC [x] 练琴1h 总结 今晚月色真美 写Leetcode时间太长了，而且上午全荒废了 明天首要任务是JDMC，微信小程序和CS144 Leetcode控制在1.5h之内！","categories":[{"name":"Everday","slug":"Everday","permalink":"https://freeeeeeeeedom.gitee.io/categories/Everday/"},{"name":"2022_大二下","slug":"Everday/2022-大二下","permalink":"https://freeeeeeeeedom.gitee.io/categories/Everday/2022-%E5%A4%A7%E4%BA%8C%E4%B8%8B/"}],"tags":[{"name":"2022_Spring","slug":"2022-Spring","permalink":"https://freeeeeeeeedom.gitee.io/tags/2022-Spring/"}]},{"title":"微信小程序开发","slug":"微信小程序开发","date":"2022-04-15T16:12:31.000Z","updated":"2022-04-19T12:52:22.852Z","comments":true,"path":"2022/04/16/微信小程序开发/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/16/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"机器学习导论","slug":"机器学习导论","date":"2022-04-15T16:12:13.000Z","updated":"2022-04-19T12:51:33.075Z","comments":true,"path":"2022/04/16/机器学习导论/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/16/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AF%BC%E8%AE%BA/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"互联网计算","slug":"互联网计算","date":"2022-04-15T16:11:57.000Z","updated":"2022-04-19T16:06:47.815Z","comments":true,"path":"2022/04/16/互联网计算/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/16/%E4%BA%92%E8%81%94%E7%BD%91%E8%AE%A1%E7%AE%97/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"软件工程与计算-2","slug":"软件工程与计算-2","date":"2022-04-15T16:11:09.000Z","updated":"2022-04-19T12:51:57.839Z","comments":true,"path":"2022/04/16/软件工程与计算-2/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/16/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%97-2/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"数据管理基础 ch48-53","slug":"数据管理基础-ch48-53","date":"2022-04-15T06:28:10.000Z","updated":"2022-04-19T12:50:13.041Z","comments":true,"path":"2022/04/15/数据管理基础-ch48-53/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/15/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80-ch48-53/","excerpt":"","text":"ch 48 事务 事务(Transaction)是用户定义的一个数据库操作序列，这些操作要么全做，要么全不做，是一个不可分割的工作单位。 事务和程序是两个概念 在关系数据库中，一个事务可以是一条SQL语句，一组SQL语句或整个程序 一个程序通常包含多个事务 事务是恢复和并发控制的基本单位 定义事务 事务结束 commit： rollback： 事物的特性（ACID特性） 事务的ACID特性： 原子性（Atomicity） 事务是数据库的逻辑工作单位 事务中包括的诸操作要么都做，要么都不做 一致性（Consistency） 隔离性（Isolation） 持续性（Durability） 一致性 事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态 一致性状态 数据库中只包含成功事务提交的结果 不一致状态 数据库系统运行中发生故障，有些事务尚未完成就被迫中断； 这些未完成事务对数据库所做的修改有一部分已写入物理数据库，这时数据库就处于一种不正确的状态 一致性与原子性 银行转帐：从帐号A中取出一万元，存入帐号B。 定义一个事务，该事务包括两个操作 A B A=A-1 B=B+1 这两个操作要么全做，要么全不做 全做或者全不做，数据库都处于一致性状态。 如果只做一个操作，用户逻辑上就会发生错误，少了一 万元，数据库就处于不一致性状态。 隔离性、持续性 隔离性 一个事务的执行不能被其他事务干扰 一个事务内部的操作及使用的数据对其他并发事务是隔离的 并发执行的各个事务之间不能互相干扰 持续性也称永久性（Permanence） 一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。 接下来的其他操作或故障不应该对其执行结果有任何影响。 事务的特性 保证事务ACID特性是事务处理的任务 破坏事务ACID特性的因素 多个事务并行运行时，不同事务的操作交叉执行 数据库管理系统必须保证多个事务的交叉运行不影响这些事务的隔离性 事务在运行过程中被强行停止 数据库管理系统必须保证被强行终止的事务对数据库和其他事务没有任何影响 ch 49 故障和数据库恢复 故障和数据库恢复 故障是不可避免的 计算机硬件故障 软件的错误 操作员的失误 恶意的破坏 故障的影响 运行事务非正常中断，影响数据库中数据的正确性 破坏数据库，全部或部分丢失数据 数据库的恢复 数据库管理系统必须具有把数据库从错误状态恢复到某一已知的正确状态(亦称为一致状态或完整状态)的功能，这就是数据库的恢复管理系统对故障的对策 恢复子系统是数据库管理系统的一个重要组成部分 恢复技术是衡量系统优劣的重要指标 故障 故障的种类 事务内部的故障 系统故障 介质故障 计算机病毒 各类故障，对数据库的影响有两种可能性 一是数据库本身被破坏 二是数据库没有被破坏，但数据可能不正确，这是由于事务的运行被非正常终止造成的。 事务内部的故障 事务内部的故障 1 事务内部的故障 2 事务故障的恢复 事务故障意味着 事务没有达到预期的终点(COMMIT或者显式的ROLLBACK) 数据库可能处于不正确状态。 事务故障的恢复：事务撤消（UNDO） 强行回滚（ROLLBACK）该事务 撤销该事务已经作出的任何对数据库的修改，使得该事务象根本没有启动一样 系统故障 系统故障，称为软故障，是指造成系统停止运转的任何事件（特定类型的硬件错误（如CPU故障）、操作系统故障、数据库管理系统代码错误、系统断电），使得系统要重新启动。 整个系统的正常运行突然被破坏 所有正在运行的事务都非正常终止 不破坏数据库 内存中数据库缓冲区的信息全部丢失 系统故障的恢复 发生系统故障时，一些尚未完成的事务的结果可能已送入物理数据库，造成数据库可能处于不正确状态。 恢复策略：系统重新启动时，恢复程序让所有非正常终止的事务回滚，强行撤消（UNDO）所有未完成事务 发生系统故障时，有些已完成的事务可能有一部分甚至全部留在缓冲区，尚未写回到磁盘上的物理数据库中，系统故障使得这些事务对数据库的修改部分或全部丢失 恢复策略：系统重新启动时，恢复程序需要重做（REDO）所有已提交的事务 介质故障 介质故障，称为硬故障，指外存故障 磁盘损坏 磁头碰撞 瞬时强磁场干扰 介质故障破坏数据库或部分数据库，并影响正在存取这部分数据的所有事务 介质故障比前两类故障的可能性小得多，但破坏性大得多 计算机病毒 计算机病毒 一种人为的故障或破坏，是一些恶作剧者研制的一种计算机程序 可以繁殖和传播，造成对计算机系统包括数据库的危害 计算机病毒已成为计算机系统的主要威胁，自然也是数据库系统的主要威胁 数据库一旦被破坏仍要用恢复技术把数据库加以恢复 恢复 恢复操作的基本原理：冗余 利用存储在系统别处的冗余数据来重建数据库中已被破坏或不正确的那部分数据 恢复的实现技术：复杂 一个大型数据库产品，恢复子系统的代码要占全部代码的10%以上 恢复机制涉及的关键问题 如何建立冗余数据（数据转储，登记日志文件） 如何利用这些冗余数据实施数据库恢复 ch 50 数据转储和日志文件 数据转储 数据转储 1 转储是指数据库管理员定期地将整个数据库复制到磁带、磁盘或其他存储介质上保存起来的过程 备用的数据文本称为后备副本(backup)或后援副本 数据库遭到破坏后可以将后备副本重新装入 重装后备副本只能将数据库恢复到转储时的状态 要想恢复到故障发生时的状态，必须重新运行自转储以后的所有更新事务 数据转储 2 数据转储 3 上图中： 系统在Ta时刻停止运行事务，进行数据库转储 在Tb时刻转储完毕，得到Tb时刻的数据库一致性副本 系统运行到Tf时刻发生故障 为恢复数据库，首先由数据库管理员重装数据库后备副本，将数据库恢复至Tb时刻的状态 重新运行自Tb ～ Tf时刻的所有更新事务，把数据库恢复到故障发生前的一致状态 转储方法-静态转储 静态转储 在系统中无运行事务时进行的转储操作 转储开始时数据库处于一致性状态 转储期间不允许对数据库的任何存取、修改活动 得到的一定是一个数据一致性的副本 动态转储 海量转储与增量转储 日志文件 日志文件(log file)是用来记录事务对数据库的更新操作的文件 日志文件的格式 以记录为单位的日志文件 以数据块为单位的日志文件 用途 进行事务故障恢复 进行系统故障恢复 协助后备副本进行介质故障恢复 以记录为单位的日志文件 1 以记录为单位的日志文件内容 日志文件中的一个日志记录 (log record)包含 各个事务的开始标记(BEGIN TRANSACTION) 各个事务的结束标记(COMMIT或ROLLBACK) 各个事务的所有更新操作 以记录为单位的日志文件 2 以记录为单位的日志文件，每条日志记录的内容 事务标识（标明是哪个事务） 操作类型（插入、删除或修改） 操作对象（记录内部标识） 更新前数据的旧值（对插入操作而言，此项为空值） 更新后数据的新值（对删除操作而言, 此项为空值） 以数据块为单位的日志文件 以数据块为单位的日志文件，每条日志记录的内容 事务标识 被更新的数据块 日志文件的作用 日志文件的作用 1 具体作用 事务故障恢复和系统故障恢复必须用日志文件。 在动态转储方式中必须建立日志文件，后备副本和日志文件结合起来才能有效地恢复数据库。 在静态转储方式中，也可以建立日志文件。 当数据库毁坏后可重新装入后援副本把数据库恢复到转储结束时刻的正确状态 利用日志文件，把已完成的事务进行重做处理 对故障发生时尚未完成的事务进行撤销处理 不必重新运行那些已完成的事务程序就可把数据库恢复到故障前某一时刻的正确状态 日志文件的作用 2 登录日志文件 登录日志文件 1 为保证数据库是可恢复的，登记日志文件时必须遵循两条原则 登记的次序严格按并发事务执行的时间次序 必须先写日志文件，后写数据库 写日志文件操作：把表示这个修改的日志记录写到日志文件中 写数据库操作：把对数据的修改写到数据库中 登录日志文件 2 为什么要先写日志文件 写数据库和写日志文件是两个不同的操作 在这两个操作之间可能发生故障 如果先写了数据库修改，而在日志文件中没有登记下这个修改，则以后就无法恢复这个修改了 如果先写日志，但没有修改数据库，按日志文件恢复时只不过是多执行一次不必要的UNDO操作，并不会影响数据库的正确性 ch 51 恢复策略 事务故障的恢复 事务故障：事务在运行至正常终点前被终止 恢复方法 由恢复子系统利用日志文件撤销此事务对数据库的修改 事务故障的恢复是由系统自动完成，对用户是透明的，不需要用户干预 事务故障的恢复步骤 反向扫描文件日志（即从最后向前扫描日志文件），查找该事务的更新操作。 对该事务的更新操作执行逆操作。即将日志记录中“更新前的值” 写入数据库。 插入操作， “更新前的值”为空，则相当于做删除操作 删除操作，“更新后的值”为空，则相当于做插入操作 若是修改操作，则相当于用修改前值代替修改后值 继续反向查找该事务的其他更新操作，并做同样处理。 如此处理下去，直至读到此事务的开始标记，事务故障恢复就完成了扫描日志文件，。 系统故障的恢复 系统故障造成数据库不一致状态的原因 未完成事务对数据库的更新可能已写入数据库 已提交事务对数据库的更新可能还留在缓冲区没来得及写入数据库 恢复方法 Undo 故障发生时未完成的事务 Redo 已完成的事务 系统故障的恢复由系统在重新启动时自动完成，不需要用户干预 系统故障的恢复步骤 正向扫描日志文件（即从头扫描日志文件） 重做(REDOREDOREDO) 队列: 在故障发生前已经提交的事务 这些事务既有BEGIN,TRANSACTIONBEGIN ,TRANSACTIONBEGIN,TRANSACTION记录，也有COMMIT记录 撤销 (UNDOUNDOUNDO)队列:故障发生时尚未完成的事务 这些事务只有BEGINBEGINBEGIN ,TRANSACTION,TRANSACTION,TRANSACTION记录，无相应的COMMIT记录 对撤销(UNDO)队列事务进行撤销(UNDO)处理 反向扫描日志文件，对每个撤销事务的更新操作执行逆操作 即将日志记录中“更新前的值”写入数据库 对重做(REDO)队列事务进行重做(REDO)处理 正向扫描日志文件，对每个重做事务重新执行登记的操作 即将日志记录中“更新后的值”写入数据库 介质故障的恢复 介质故障的恢复的工作 重装数据库 重做已完成的事务 介质故障的恢复需要数据库管理员介入 数据库管理员的工作 重装最近转储的数据库副本和有关的各日志文件副本 执行系统提供的恢复命令 具体的恢复操作仍由数据库管理系统完成 介质故障的恢复步骤 装入最新的后备数据库副本(离故障发生时刻最近的转储副本) ，使数据库恢复到最近一次转储时的一致性状态。 对于静态转储的数据库副本，装入后数据库即处于一致性状态 对于动态转储的数据库副本，还须同时装入转储时刻的日志文件副本，利用恢复系统故障的方法（即REDO+UNDO），才能将数据库恢复到一致性状态。 装入有关的日志文件副本(转储结束时刻的日志文件副本) ，重做已完成的事务。 首先扫描日志文件，找出故障发生时已提交的事务的标识，将其记入重做队列。 然后正向扫描日志文件，对重做队列中的所有事务进行重做处理。即将日志记录中“更新后的值”写入数据库。 ch 52 具有检查点的恢复技术 具有检查点的恢复技术 恢复的两个问题 搜索整个日志将耗费大量的时间 重做处理：重新执行，浪费了大量时间 具有检查点（checkpoint）的恢复技术 在日志文件中增加检查点记录（checkpoint） 增加重新开始文件 恢复子系统在登录日志文件期间动态地维护日志 检查点技术 检查点技术 1 检查点记录的内容 建立检查点时刻所有正在执行的事务清单 这些事务最近一个日志记录的地址 重新开始文件的内容 记录各个检查点记录在日志文件中的地址 检查点技术 2 动态维护日志文件的方法 动态维护日志文件的方法 周期性地执行如下操作：建立检查点，保存数据库状态。 具体步骤是： 将当前日志缓冲区中的所有日志记录写入磁盘的日志文件上 在日志文件中写入一个检查点记录 将当前数据缓冲区的所有数据记录写入磁盘的数据库中 把检查点记录在日志文件中的地址写入一个重新开始文件 建立检查点 恢复子系统可以定期或不定期地建立检查点,保存数据库状态 定期 按照预定的一个时间间隔，如每隔一小时建立一个检查点 不定期 按照某种规则，如日志文件已写满一半建立一个检查点 利用检查点的恢复策略 利用检查点的恢复策略 1 使用检查点方法可以改善恢复效率 当事务T在一个检查点之前提交，T对数据库所做的修改已写入数据库 写入时间是在这个检查点建立之前或在这个检查点建立之时 在进行恢复处理时，没有必要对事务T执行重做操作 利用检查点的恢复策略 2 利用检查点的恢复策略 3 故障状态 T1 ：在检查点之前提交 T2 ：在检查点之前开始执行，在检查点之后故障点之前提交 T3 ：在检查点之前开始执行，在故障点时还未完成 T4 ：在检查点之后开始执行，在故障点之前提交 T5 ：在检查点之后开始执行，在故障点时还未完成 恢复策略 T3和T5在故障发生时还未完成，所以予以撤销 T2和T4在检查点之后才提交，它们对数据库所做的修改在故障发生时可能还在缓冲区中，尚未写入数据库，所以要重做 T1在检查点之前已提交，所以不必执行重做操作 利用检查点的恢复步骤 从重新开始文件中找到最后一个检查点记录在日志文件中的地址，由该地址在日志文件中找到最后一个检查点记录 由该检查点记录得到检查点建立时刻所有正在执行的事务清单ACTIVE-LIST 建立两个事务队列 UNDO-LIST REDO-LIST 把ACTIVE-LIST暂时放入UNDO-LIST队列，REDO队列暂为空。 从检查点开始正向扫描日志文件，直到日志文件结束 如有新开始的事务Ti ，把Ti暂时放入UNDO-LIST队列 如有提交的事务Tj，把Tj从UNDO-LIST队列移到REDO-LIST队列;直到日志文件结束 对UNDO-LIST中的每个事务执行UNDO操作 对REDO-LIST中的每个事务执行REDO操作 ch 53 数据库镜像 数据库镜像 数据库镜像 1 介质故障是对系统影响最为严重的一种故障，严重影响数据库的可用性 介质故障恢复比较费时 为预防介质故障，数据库管理员必须周期性地转储数据库 提高数据库可用性的解决方案 数据库镜像（Mirror） 数据库镜像 2 数据库镜像 数据库管理系统自动把整个数据库或其中的关键数据复制到另一个磁盘上 数据库管理系统自动保证镜像数据与主数据的一致性 每当主数据库更新时，数据库管理系统自动把更新后的数据复制过去 数据库镜像的用途 数据库镜像的用途 1 出现介质故障时 可由镜像磁盘继续提供使用 同时数据库管理系统自动利用镜像磁盘数据进行数据库的恢复 不需要关闭系统和重装数据库副本 数据库镜像的用途 2 没有出现故障时 可用于并发操作 一个用户对数据加排他锁修改数据，其他用户可以读镜像数据库上的数据，而不必等待该用户释放锁 数据库镜像 频繁地复制数据自然会降低系统运行效率 在实际应用中用户往往只选择对关键数据和日志文件镜像 不是对整个数据库进行镜像","categories":[{"name":"数据库","slug":"数据库","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"数据管理基础","slug":"数据库/数据管理基础","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"数据管理基础","slug":"数据管理基础","permalink":"https://freeeeeeeeedom.gitee.io/tags/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/"}]},{"title":"数据管理基础 ch45-47","slug":"数据管理基础-ch45-47","date":"2022-04-15T06:04:39.000Z","updated":"2022-04-19T12:50:16.831Z","comments":true,"path":"2022/04/15/数据管理基础-ch45-47/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/15/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80-ch45-47/","excerpt":"","text":"ch 45 面向驱动的数据库编程 JAVA世界： JDBC w3cschool 微软：ODBC, OLE DB等 Python： Python DB-API +各数据库模块 JDBC为例 以JDBC为例 1 加载数据库驱动 1Class.forName(&quot;com.mysql.jdbc.Driver&quot;); 建立连接 12conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test&quot;, &quot;root&quot;, &quot;&quot;); 创建 Statement 对象，用于向数据库发送 SQL 语句； 123String sql = &quot;SELECT * FROM `user`&quot;;Statement statement = connection.createStatement();ResultSet resultSet = statement.executeQuery(sql); 获取 ResultSet 对象，取出数据，此对象代表结果集； 1234while (resultSet.next()) &#123; int id = resultSet.getInt(“id”); …… &#125; 释放资源，断开与数据库的连接。 123resultSet.close(); statement.close();connection.close(); ch 46 过程化SQL 过程化SQL 过程化SQL SQL的扩展 增加了过程化语句功能 基本结构是块 块之间可以互相嵌套 每个块完成一个逻辑操作 过程化SQL的块结构 定义部分 DECLARE 变量、常量、游标、异常等 定义的变量、常量等只能在该基本块中使用 当基本块执行结束时，定义就不再存在 执行部分 12345 BEGINSQL语句、过程化SQL的流程控制语句 EXCEPTION异常处理部分 END； 变量和常量的定义 变量定义 变量名 数据类型 [[NOT NULL]:=初值表达式]或 变量名 数据类型 [[NOT NULL] 初值表达式] 常量定义 常量名 数据类型 CONSTANT :=常量表达式 常量必须要给一个值，并且该值在存在期间或常量的作用域内不能改变。如果试图修改它，过程化SQL将返回一个异常 赋值语句 变量名称 :=表达式 流程控制-条件控制语句 流程控制-循环控制语句 流程控制-错误处理 如果过程化SQL在执行时出现异常，则应该让程序在产生异常的语句处停下来，根据异常的类型去执行异常处理语句 SQL标准对数据库服务器提供什么样的异常处理做出了建议，要求过程化SQL管理器提供完善的异常处理机制 ch 47 存储过程和函数 存储过程 存储过程 1 过程化SQL块类型 命名块 编译后保存在数据库中，可以被反复调用，运行速度较快，过程和函数是命名块 匿名块 每次执行时都要进行编译，它不能被存储到数据库中，也不能在其他过程化SQL块中调用 存储过程 2 存储过程：由过程化SQL语句书写的过程，经编译和优化后存储在数据库服务器中，使用时只要调用即可。 存储过程的优点 运行效率高 降低了客户机和服务器之间的通信量 方便实施企业规则 存储过程的用户接口-创建存储过程 存储过程的用户接口-创建存储过程 1 存储过程的用户接口-创建存储过程 2 [例8.8] 利用存储过程来实现下面的应用：从账户1转指定数额的款项到账户2中。 CREATE OR REPLACE PROCEDURE TRANSFER(inAccount INT,outAccount INT,amount FLOAT) /*定义存储过程TRANSFER，其参数为转入账户、转出账户、转账额度*/ AS DECLARE /*定义变量*/ totalDepositOut Float; totalDepositIn Float; inAccountnum INT; &lt;!--code￼6--&gt; ### 存储过程的用户接口-创建存储过程 4 &lt;!--code￼7--&gt; 存储过程的用户接口-执行存储过程 执行存储过程 CALL/PERFORM PROCEDURE 过程名([参数1,参数2,…])； 使用CALL或者PERFORM等方式激活存储过程的执行 在过程化SQL中，数据库服务器支持在过程体中调用其他存储过程 [例8.9] 从账户01003815868转10000元到01003813828账户中。 1CALL PROCEDURE TRANSFER(01003813828,01003815868,10000); 储过程的用户接口-其他 改存储过程 ALTER PROCEDURE 过程名1 RENAME TO 过程名2; 删除存储过程 ·DROP PROCEDURE 过程名()； 函数 函数的定义语句格式 CREATE OR REPLACE FUNCTION 函数名 ([参数1,参数2,…]) RETURNS &lt;类型&gt; AS &lt;过程化SQL块&gt;; 函数的执行语句格式 CALL/SELECT 函数名 ([参数1,参数2,…]); 修改函数 重命名 ALTER FUNCTION 过程名1 RENAME TO 过程名2; 重新编译 ALTER FUNCTION 过程名 COMPILE;","categories":[{"name":"数据库","slug":"数据库","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"数据管理基础","slug":"数据库/数据管理基础","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"数据管理基础","slug":"数据管理基础","permalink":"https://freeeeeeeeedom.gitee.io/tags/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/"}]},{"title":"April 15th","slug":"April-15th","date":"2022-04-15T04:03:28.000Z","updated":"2022-04-20T09:10:21.746Z","comments":true,"path":"2022/04/15/April-15th/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/15/April-15th/","excerpt":"","text":"To Do [x] CS144 lab1 [ ] CS144 lab2 [x] 核酸检测 [x] Leetcode 每日一题 [ ] Leetcode *3 [ ] 微信小程序 [ ] 计网实验 [ ] 数据库JDBC 总结","categories":[{"name":"Everday","slug":"Everday","permalink":"https://freeeeeeeeedom.gitee.io/categories/Everday/"},{"name":"2022_大二下","slug":"Everday/2022-大二下","permalink":"https://freeeeeeeeedom.gitee.io/categories/Everday/2022-%E5%A4%A7%E4%BA%8C%E4%B8%8B/"}],"tags":[{"name":"2022_Spring","slug":"2022-Spring","permalink":"https://freeeeeeeeedom.gitee.io/tags/2022-Spring/"}]},{"title":"模拟","slug":"模拟","date":"2022-04-15T00:24:02.000Z","updated":"2022-04-20T09:06:32.086Z","comments":true,"path":"2022/04/15/模拟/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/15/%E6%A8%A1%E6%8B%9F/","excerpt":"","text":"题目 题解 难度 推荐指数 1. 两数之和 Freedom的题解 简单 😻😻😻😻😻 2. 两数相加 Freedom的题解 中等 😻😻😻😻😻 5. 最长回文子串 Freedom的题解 中等 😻😻😻😻😻 6. Z 字形变换 LeetCode 题解链接 中等 🤩🤩🤩 7. 整数反转 LeetCode 题解链接 简单 🤩🤩🤩 8. 字符串转换整数 (atoi) LeetCode 题解链接 中等 🤩🤩🤩 12. 整数转罗马数字 LeetCode 题解链接 中等 🤩🤩 13. 罗马数字转整数 LeetCode 题解链接 简单 🤩🤩 14. 最长公共前缀 LeetCode 题解链接 简单 🤩🤩🤩🤩 31. 下一个排列 LeetCode 题解链接 中等 🤩🤩🤩 38. 外观数列 LeetCode 题解链接 简单 🤩🤩 43. 字符串相乘 LeetCode 题解链接 中等 🤩🤩🤩🤩 54. 螺旋矩阵 LeetCode 题解链接 中等 🤩🤩🤩🤩 58. 最后一个单词的长度 LeetCode 题解链接 简单 🤩🤩🤩🤩 59. 螺旋矩阵 II LeetCode 题解链接 中等 🤩🤩🤩🤩 65. 有效数字 LeetCode 题解链接 困难 🤩🤩🤩 66. 加一 LeetCode 题解链接 简单 🤩🤩🤩🤩 68. 文本左右对齐 LeetCode 题解链接 困难 🤩🤩🤩 71. 简化路径 LeetCode 题解链接 中等 🤩🤩🤩🤩 73. 矩阵置零 LeetCode 题解链接 中等 🤩🤩🤩🤩 89. 格雷编码 LeetCode 题解链接 中等 🤩🤩🤩🤩 165. 比较版本号 LeetCode 题解链接 中等 🤩🤩🤩🤩 166. 分数到小数 LeetCode 题解链接 中等 🤩🤩🤩🤩 168. Excel表列名称 LeetCode 题解链接 简单 🤩🤩🤩 171. Excel表列序号 LeetCode 题解链接 简单 🤩🤩🤩 190. 颠倒二进制位 LeetCode 题解链接 简单 🤩🤩🤩 233. 数字 1 的个数 LeetCode 题解链接 困难 🤩🤩🤩🤩 237. 删除链表中的节点 LeetCode 题解链接 简单 🤩🤩🤩 258. 各位相加 LeetCode 题解链接 简单 🤩🤩🤩 260. 只出现一次的数字 III LeetCode 题解链接 中等 🤩🤩🤩🤩 263. 丑数 LeetCode 题解链接 简单 🤩🤩 268. 丢失的数字 LeetCode 题解链接 简单 🤩🤩🤩🤩 273. 整数转换英文表示 LeetCode 题解链接 困难 🤩🤩🤩🤩 284. 顶端迭代器 LeetCode 题解链接 中等 🤩🤩🤩🤩 299. 猜数字游戏 LeetCode 题解链接 中等 🤩🤩🤩🤩 318. 最大单词长度乘积 LeetCode 题解链接 中等 🤩🤩🤩🤩 335. 路径交叉 LeetCode 题解链接 困难 🤩🤩🤩🤩 345. 反转字符串中的元音字母 LeetCode 题解链接 简单 🤩🤩🤩 382. 链表随机节点 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 383. 赎金信 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 385. 迷你语法分析器 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 393. UTF-8 编码验证 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 400. 第 N 位数字 LeetCode 题解链接 中等 🤩🤩🤩🤩 405. 数字转换为十六进制数 LeetCode 题解链接 简单 🤩🤩🤩🤩 412. Fizz Buzz LeetCode 题解链接 简单 🤩🤩🤩🤩 413. 等差数列划分 LeetCode 题解链接 中等 🤩🤩🤩🤩 414. 第三大的数 LeetCode 题解链接 中等 🤩🤩🤩🤩 419. 甲板上的战舰 LeetCode 题解链接 中等 🤩🤩🤩🤩 420. 强密码检验器 LeetCode 题解链接 困难 🤩 423. 从英文中重建数字 LeetCode 题解链接 中等 🤩🤩🤩🤩 434. 字符串中的单词数 LeetCode 题解链接 简单 🤩🤩🤩🤩 440. 字典序的第K小数字 LeetCode 题解链接 困难 🤩🤩 443. 压缩字符串 LeetCode 题解链接 中等 🤩🤩🤩🤩 451. 根据字符出现频率排序 LeetCode 题解链接 中等 🤩🤩🤩🤩 457. 环形数组是否存在循环 LeetCode 题解链接 中等 🤩🤩🤩🤩 482. 密钥格式化 LeetCode 题解链接 简单 🤩🤩🤩🤩 492. 构造矩形 LeetCode 题解链接 简单 🤩🤩🤩🤩 495. 提莫攻击 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 500. 键盘行 LeetCode 题解链接 简单 🤩🤩🤩🤩 504. 七进制数 LeetCode 题解链接 简单 🤩🤩🤩🤩 506. 相对名次 LeetCode 题解链接 简单 🤩🤩🤩🤩 507. 完美数 LeetCode 题解链接 简单 🤩🤩🤩 520. 检测大写字母 LeetCode 题解链接 简单 🤩🤩🤩🤩 521. 最长特殊序列 Ⅰ LeetCode 题解链接 简单 🤩🤩🤩🤩 528. 按权重随机选择 LeetCode 题解链接 中等 🤩🤩🤩🤩 537. 复数乘法 LeetCode 题解链接 中等 🤩🤩🤩🤩 539. 最小时间差 LeetCode 题解链接 中等 🤩🤩🤩🤩 541. 反转字符串 II LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 551. 学生出勤记录 I LeetCode 题解链接 简单 🤩🤩🤩 566. 重塑矩阵 LeetCode 题解链接 简单 🤩🤩🤩 594. 最长和谐子序列 LeetCode 题解链接 简单 🤩🤩🤩🤩 598. 范围求和 II LeetCode 题解链接 简单 🤩🤩🤩 599. 两个列表的最小索引总和 LeetCode 题解链接 简单 🤩🤩🤩🤩 645. 错误的集合 LeetCode 题解链接 简单 🤩🤩🤩 661. 图片平滑器 LeetCode 题解链接 简单 🤩🤩🤩🤩 682. 棒球比赛 LeetCode 题解链接 简单 🤩🤩🤩🤩 693. 交替位二进制数 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 709. 转换成小写字母 LeetCode 题解链接 简单 🤩🤩🤩 717. 1比特与2比特字符 LeetCode 题解链接 简单 🤩🤩🤩 720. 词典中最长的单词 LeetCode 题解链接 简单 🤩🤩🤩🤩 726. 原子的数量 LeetCode 题解链接 困难 🤩🤩🤩🤩 747. 至少是其他数字两倍的最大数 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 748. 最短补全词 LeetCode 题解链接 简单 🤩🤩🤩🤩 762. 二进制表示中质数个计算置位 LeetCode 题解链接 简单 🤩🤩🤩🤩 766. 托普利茨矩阵 LeetCode 题解链接 简单 🤩🤩🤩 794. 有效的井字游戏 LeetCode 题解链接 中等 🤩🤩🤩🤩 796. 旋转字符串 LeetCode 题解链接 简单 🤩🤩🤩 804. 唯一摩尔斯密码词 LeetCode 题解链接 简单 🤩🤩🤩 806. 写字符串需要的行数 LeetCode 题解链接 简单 🤩🤩🤩🤩 819. 最常见的单词 LeetCode 题解链接 简单 🤩🤩🤩🤩 846. 一手顺子 LeetCode 题解链接 中等 🤩🤩🤩 859. 亲密字符串 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 867. 转置矩阵 LeetCode 题解链接 简单 🤩🤩🤩🤩 884. 两句话中的不常见单词 LeetCode 题解链接 简单 🤩🤩🤩🤩 896. 单调数列 LeetCode 题解链接 简单 🤩🤩🤩🤩 997. 找到小镇的法官 LeetCode 题解链接 简单 🤩🤩🤩🤩 1001. 网格照明 LeetCode 题解链接 困难 🤩🤩🤩🤩 1005. K 次取反后最大化的数组和 LeetCode 题解链接 简单 🤩🤩🤩🤩 1047. 删除字符串中的所有相邻重复项 LeetCode 题解链接 简单 🤩🤩🤩🤩 1078. Bigram 分词 LeetCode 题解链接 简单 🤩🤩🤩🤩 1104. 二叉树寻路 LeetCode 题解链接 中等 🤩🤩🤩 1154. 一年中的第几天 LeetCode 题解链接 简单 🤩🤩🤩🤩 1185. 一周中的第几天 LeetCode 题解链接 简单 🤩🤩🤩🤩 1189. “气球” 的最大数量 LeetCode 题解链接 简单 🤩🤩🤩🤩 1332. 删除回文子序列 LeetCode 题解链接 中等 🤩🤩🤩🤩 1342. 将数字变成 0 的操作次数 LeetCode 题解链接 简单 🤩🤩🤩🤩 1380. 矩阵中的幸运数 LeetCode 题解链接 简单 🤩🤩🤩 1436. 旅行终点站 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 1446. 连续字符 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 1480. 一维数组的动态和 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 1486. 数组异或操作 LeetCode 题解链接 简单 🤩🤩🤩 1518. 换酒问题 LeetCode 题解链接 简单 🤩🤩🤩🤩 1576. 替换所有的问号 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 1583. 统计不开心的朋友 LeetCode 题解链接 中等 🤩🤩🤩🤩 1606. 找到处理最多请求的服务器 LeetCode 题解链接 困难 🤩🤩🤩🤩 1614. 括号的最大嵌套深度 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 1629. 按键持续时间最长的键 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 1646. 获取生成数组中的最大值 LeetCode 题解链接 简单 🤩🤩🤩🤩 1672. 最富有客户的资产总量 LeetCode 题解链接 简单 🤩🤩🤩🤩 1688. 比赛中的配对次数 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 1706. 球会落何处 LeetCode 题解链接 中等 🤩🤩🤩🤩 1716. 计算力扣银行的钱 LeetCode 题解链接 简单 🤩🤩🤩🤩 1720. 解码异或后的数组 LeetCode 题解链接 简单 🤩🤩🤩 1725. 可以形成最大正方形的矩形数目 LeetCode 题解链接 简单 🤩🤩🤩🤩 1736. 替换隐藏数字得到的最晚时间 LeetCode 题解链接 简单 🤩🤩🤩🤩 1743. 从相邻元素对还原数组 LeetCode 题解链接 中等 🤩🤩🤩🤩 1748. 唯一元素的和 LeetCode 题解链接 简单 🤩🤩🤩🤩 1763. 最长的美好子字符串 LeetCode 题解链接 简单 🤩🤩🤩 1791. 找出星型图的中心节点 LeetCode 题解链接 简单 🤩🤩🤩 1816. 截断句子 LeetCode 题解链接 简单 🤩🤩🤩🤩 1834. 单线程 CPU LeetCode 题解链接 中等 🤩🤩🤩🤩 1893. 检查是否区域内所有整数都被覆盖 LeetCode 题解链接 简单 🤩🤩🤩🤩 1894. 找到需要补充粉笔的学生编号 LeetCode 题解链接 中等 🤩🤩🤩🤩 1995. 统计特殊四元组 LeetCode 题解链接 简单 🤩🤩🤩🤩 2000. 反转单词前缀 LeetCode 题解链接 简单 🤩🤩🤩🤩 2016. 增量元素之间的最大差值 LeetCode 题解链接 简单 🤩🤩🤩🤩 2006. 差的绝对值为 K 的数对数目 LeetCode 题解链接 简单 🤩🤩🤩🤩 2022. 将一维数组转变成二维数组 LeetCode 题解链接 简单 🤩🤩🤩🤩 2028. 找出缺失的观测数据 LeetCode 题解链接 中等 🤩🤩🤩🤩 2038. 如果相邻两个颜色均相同则删除当前颜色 LeetCode 题解链接 中等 🤩🤩 2043. 简易银行系统 LeetCode 题解链接 中等 🤩🤩🤩🤩 2047. 句子中的有效单词数 LeetCode 题解链接 简单 🤩🤩🤩🤩 2069. 模拟行走机器人 II LeetCode 题解链接 中等 🤩🤩🤩🤩 面试题 10.02. 变位词组 LeetCode 题解链接 中等 🤩🤩🤩🤩","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"数据结构与算法/Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"双指针","slug":"双指针","date":"2022-04-15T00:23:43.000Z","updated":"2022-04-20T08:06:17.020Z","comments":true,"path":"2022/04/15/双指针/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/15/%E5%8F%8C%E6%8C%87%E9%92%88/","excerpt":"","text":"题号 题解 难度 推荐 3. 无重复字符的最长子串 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 11. 盛最多水的容器 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 15. 三数之和 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 16. 最接近的三数之和 LeetCode 题解链接 中等 🤩🤩🤩🤩 18. 四数之和 LeetCode 题解链接 中等 🤩🤩🤩🤩 19. 删除链表的倒数第 N 个结点 LeetCode 题解链接 中等 🤩🤩🤩🤩🤩 26. 删除有序数组中的重复项 LeetCode 题解链接 简单 🤩🤩🤩🤩 27. 移除元素 Freedom的题解 简单 😻😻😻 45. 跳跃游戏 II Freedom的题解 中等 😻😻😻😻 88. 合并两个有序数组 Freedom的题解 简单 😻😻😻 345. 反转字符串中的元音字母 Freedom的题解 简单 😻😻😻 395. 至少有 K 个重复字符的最长子串 Freedom的题解 中等 😻😻😻😻 413. 等差数列划分 Freedom的题解 中等 😻😻😻 424. 替换后的最长重复字符 Freedom的题解 中等 😻😻😻😻 438. 找到字符串中所有字母异位词 Freedom的题解 中等 😻😻😻 475. 供暖器 Freedom的题解 中等 😻😻😻 443. 压缩字符串 Freedom的题解 中等 😻😻😻😻 485. 最大连续 1 的个数 Freedom的题解 简单 😻😻😻😻 519. 随机翻转矩阵 Freedom的题解 中等 😻😻😻😻 524. 通过删除字母匹配到字典里最长单词 LeetCode 题解链接 中等 🤩🤩🤩🤩 581. 最短无序连续子数组 LeetCode 题解链接 中等 🤩🤩🤩🤩 594. 最长和谐子序列 LeetCode 题解链接 简单 🤩🤩🤩🤩 611. 有效三角形的个数 LeetCode 题解链接 中等 🤩🤩🤩🤩 633. 平方数之和 LeetCode 题解链接 简单 🤩🤩 653. 两数之和 IV - 输入 BST LeetCode 题解链接 简单 🤩🤩🤩🤩 786. 第 K 个最小的素数分数 LeetCode 题解链接 中等 🤩🤩🤩 825. 适龄的朋友 LeetCode 题解链接 中等 🤩🤩🤩🤩 832. 翻转图像 LeetCode 题解链接 简单 🤩🤩 838. 推多米诺 LeetCode 题解链接 中等 🤩🤩🤩🤩 881. 救生艇 LeetCode 题解链接 中等 🤩🤩🤩🤩 917. 仅仅反转字母 LeetCode 题解链接 简单 🤩🤩🤩🤩 930. 和相同的二元子数组 LeetCode 题解链接 中等 🤩🤩🤩 992. K 个不同整数的子数组 LeetCode 题解链接 困难 🤩🤩🤩🤩 1004. 最大连续1的个数 III LeetCode 题解链接 中等 🤩🤩🤩 1052. 爱生气的书店老板 LeetCode 题解链接 中等 🤩🤩🤩 1221. 分割平衡字符串 LeetCode 题解链接 简单 🤩🤩🤩🤩 1332. 删除回文子序列 LeetCode 题解链接 中等 🤩🤩🤩🤩 1446. 连续字符 LeetCode 题解链接 简单 🤩🤩🤩🤩🤩 1610. 可见点的最大数目 LeetCode 题解链接 困难 🤩🤩🤩🤩 1743. 从相邻元素对还原数组 LeetCode 题解链接 中等 🤩🤩🤩🤩 1748. 唯一元素的和 LeetCode 题解链接 简单 🤩🤩🤩🤩 1764. 通过连接另一个数组的子数组得到一个数组 LeetCode 题解链接 中等 🤩🤩🤩🤩 2000. 反转单词前缀 LeetCode 题解链接 简单 🤩🤩🤩🤩 2024. 考试的最大困扰度 LeetCode 题解链接 中等 🤩🤩🤩🤩 2047. 句子中的有效单词数 LeetCode 题解链接 简单 🤩🤩🤩🤩","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"数据结构与算法/Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"每日一题","slug":"每日一题","date":"2022-04-14T16:24:15.000Z","updated":"2022-04-21T16:40:22.378Z","comments":true,"path":"2022/04/15/每日一题/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/15/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/","excerpt":"","text":"日期 题目 题解 难度 推荐指数 2022.4.15 385. 迷你语法分析器 Freedom的题解 中等 😻😻😻😻 2022.4.14 1672. 最富有客户的资产总量 Freedom的题解 简单 😻 2022.4.16 479. 最大回文数乘积 Freedom的题解 困难 😻 2022.4.17 819. 最常见的单词 Freedom的题解 简单 😻😻😻 2022.4.18 386. 字典序排数 Freedom的题解 中等 😻😻😻😻 2022.4.19 821. 字符的最短距离 Freedom的题解 简单 😻 2022.4.20 388. 文件的最长绝对路径 Freedom的题解 中等 😻😻😻😻😻 2022.4.21 824. 山羊拉丁文 Freedom的题解 简单 😻😻 2022.4.22 396. 旋转函数 Freedom的题解 中等 😻😻😻😻😻","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"数据结构与算法/Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Leetcode/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]},{"title":"数据管理基础 ch32-36","slug":"数据管理基础-ch32-36","date":"2022-04-14T13:59:05.000Z","updated":"2022-04-19T12:50:19.221Z","comments":true,"path":"2022/04/14/数据管理基础-ch32-36/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/14/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80-ch32-36/","excerpt":"","text":"ch 32 关系模式及范式 关系模式及第一范式（1 NF） 关系模式由五部分组成，是一个五元组： 1R(U,D,DOM,F) 关系名R是符号化的元组语义 U为一组属性 D为属性组U中的属性所来自的域 DOM为属性到域的映射 F为属性组U上的一组数据依赖 由于D,DOM与模式设计关系不大，因此可以把关系模式看作一个三元组：R&lt;U,F&gt; 当且仅当U上的一个关系r满足F时，r称为关系模式R&lt;U,F&gt;的一个关系 作为二维表，关系要符合一个最基本的条件，每个分量必须是不可分开的数据项，满足了这个条件的关系模式就属于第一范式（1 NF） 数据依赖 是一个关系内部属性与属性之间的一种约束关系 通过属性间值的相等与否体现出来的数据间相互联系 是现实世界属性间相互联系的抽象 是数据内在的性质 是语义的体现 数据以来的主要类型 函数依赖（Functional Dependency,简记为FD) 多值依赖（Multi-Valued Dependency,简记为MVD） 函数依赖 函数依赖普遍存在在现实生活中 描述一个学生关系，可以有学号、姓名、系名等属性 一个学号值对应一个学生，一个学生只在一个系中学习 “学号”值确定后，学生的姓名及所在系的值就被唯一确定 12Sname = f(Sno), Sdept = f(Sno)-记作Sno-&gt;Sname,Sno-&gt;Sdept [例6.1] 建立一个描述学校教务的数据库。涉及的对象包括： 学生的学号（Sno） 所在系（Sdept） 系主任姓名（Mname） 课程号（Cno） 成绩（Grade） 假设学校教务的数据库模式用一个单一的关系模式Student来表示，则该关系模式的属性集合为： 1U = &#123;Sno,Sdept,Mname,Cno,Grade&#125; 现实世界已知的事实 一个系有若干学生， 但一个学生只属于一个系； 一个系只有一名（正职）负责人； 一个学生可以选修多门课程，每门课程有若干学生选修； 每个学生学习每一门课程有一个成绩。 由此得到属性组U上的一组函数依赖F： 1F = （Sno-&gt;Sdept,Sdept-&gt;Mname,(Sno,Cno)-&gt;Grade 1 NF的问题 1 NF的问题 1 关系模式Student&lt;U,F&gt;存在的问题： 数据冗余 浪费大量的存储空间 修改复杂，更新异常（Update Anomalies) 数据冗余，更新数据时，维护数据完整性代价大 插入异常 删除异常 1 NF的问题 2 结论 Student关系模式不是一个好的关系模式 原因 由存在于模式中的某些数据依赖引起的 解决方法 用规范化理论改造关系模式来消除其中不合适的数据依赖 把这个单一的模式分成三个关系模式： 123S(Sno,Sdept,Sno-&gt;Sdept);SC(Sno,Cno,Grade,(Sno,Cno)-&gt;Grade);DEPT(Sdept,Mname,Sdept-&gt;Mname); 这三个模式不会发生插入异常，删除异常的问题，数据的冗余也得到了控制 范式 范式 1 范式是符合某一种级别的关系模式的集合。 关系数据库中的关系必须满足一定的要求。满足不同程度要求的为不同范式。 范式的种类： 第一范式(1NF) 第二范式(2NF) 第三范式(3NF) BC范式(BCNF) 第四范式(4NF) 第五范式(5NF) 范式 2 各种范式之间存在联系： 某一关系模式R为第n范式，可简记为R∈nNFnNFnNF。 一个低一级范式的关系模式，通过模式分解（schema decomposition）可以转换为若干个高一级范式的关系模式的集合，这种过程就叫规范化（normalization） ch 33 函数依赖与码 函数依赖 函数依赖 1 定义6.1 设R(U)是一个属性集U上的关系模式，X和Y是U的子集。若对于R(U)的任意一个可能的关系r，r 中不可能存在两个元组在X上的属性值相等， 而在Y上的属性值不等， 则称“X函数确定Y”或“Y函数依赖于X”，记作X→Y，X称为这个函数依赖的决定因素（Determinant） [例] Student(Sno, Sname, Ssex, Sage, Sdept), 假设不允许重名，则有: 12345Sno → Ssex， Sno → Sage Sno → Sdept， Sno ←→ Sname Sname → Ssex， Sname → Sage Sname → Sdept 但Ssex ↛ Sage, Ssex ↛ Sdept 函数依赖 2 函数依赖不是指关系模式R的某个或某些关系实例满足的约束条件，而是指R的所有关系实例均要满足的约束条件。 函数依赖是语义范畴的概念。只能根据数据的语义来确定函数依赖。 例如“姓名→年龄”这个函数依赖只有在不允许有同名人的条件下成立 数据库设计者可以对现实世界作强制的规定。 例如规定不允许同名人出现，函数依赖“姓名→年龄”成立。所插入的元组必须满足规定的函数依赖，若发现有同名人存在， 则拒绝插入该元组。 平凡函数依赖与非平凡函数依赖 在关系模式R(U)中，对于U的子集X和Y， X→Y，但Y ⊈ X，则称X→Y是非平凡的函数依赖 X→Y，但Y  X, 则称X→Y是平凡的函数依赖 对于任一关系模式，平凡函数依赖都是必然成立的，它不反映新的语义。因此若不特别声明， 我们总是讨论非平凡函数依赖 例：在关系SC(Sno, Cno, Grade)中 123非平凡函数依赖： (Sno, Cno) → Grade平凡函数依赖： (Sno, Cno) → Sno (Sno, Cno) → Cno 完全函数依赖与部分函数依赖 定义6.2 在R(U)中，如果X→Y，并且对于X的任何一个真子集X’, 都有 X’ ↛ Y, 则称Y对X完全函数依赖，记作X→FYX\\rightarrow^{F} YX→FY。 若X→Y，但Y不完全函数依赖于X，则称Y对X部分函数依赖，记作X→PYX\\rightarrow^{P} YX→PY 传递函数依赖 码 码 1 码 2 外码 ch 34 1NF , 2NF, 3NF 1 NF 如果一个关系模式R的所有属性都是不可分的基本数据项，则R∈1NF。 第一范式是对关系模式的最起码的要求。不满足第一范式的数据库模式不能称为关系数据库。 但是满足第一范式的关系模式并不一定是一个好的关系模式。 2 NF 2 NF 1 2 NF 2 2 NF 3 3 NF","categories":[{"name":"数据库","slug":"数据库","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"数据管理基础","slug":"数据库/数据管理基础","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"数据管理基础","slug":"数据管理基础","permalink":"https://freeeeeeeeedom.gitee.io/tags/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/"}]},{"title":"数据管理基础 ch26-31","slug":"数据管理基础-ch26-31","date":"2022-04-14T13:58:53.000Z","updated":"2022-04-19T12:50:21.794Z","comments":true,"path":"2022/04/14/数据管理基础-ch26-31/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/14/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80-ch26-31/","excerpt":"","text":"ch 26 数据库完整性 数据库的完整性 数据的正确性 是指数据是符合现实世界语义，反映了当前实际状况的 数据的相容性 是指数据库同一对象在不同关系表中的数据是符合逻辑的 例如， 学生的学号必须唯一 性别只能是男或女 本科学生年龄的取值范围为14~50的整数 学生所选的课程必须是学校开设的课程，学生所在的院系必须是学校已成立的院系 完整性 vs.安全性 数据的完整性 防止数据库中存在不符合语义的数据，也就是防止数据库中存在不正确的数据 防范对象：不合语义的、不正确的数据 数据的安全性 保护数据库，防止恶意的破坏和非法的存取 防范对象：非法用户和非法操作 完整性机制 提供定义完整性约束条件的机制 完整性约束条件也称为完整性规则，是数据库中的数据必须满足的语义约束条件 SQL标准使用了一系列概念来描述完整性，包括关系模型的实体完整性、参照完整性和用户定义完整性 这些完整性一般由SQL的数据定义语言语句来实现 提供完整性检查的方法 数据库管理系统中检查数据是否满足完整性约束条件的机制称为完整性检查。 一般在INSERT、UPDATE、DELETE语句执行后开始检查，也可以在事务提交时检查 违约处理 数据库管理系统若发现用户的操作违背了完整性约束条件，就采取一定的动作 拒绝（NO ACTION）执行该操作 级连（CASCADE）执行其他操作 ch 27 实体完整性 实体完整性定义 实体完整性 定义1 关系模型的实体完整性 CREATE TABLE中用PRIMARY KEY定义 单属性构成的码有两种说明方法 定义为列级约束条件 定义为表级约束条件 对多个属性构成的码只有一种说明方法 定义为表级约束条件 实体完整性定义 2 [例5.1] 将Student表中的SnoSnoSno属性定义为码 123456789CREATE TABLE Student (Sno CHAR(9) PRIMARY KEY, Sname CHAR(20) NOT NULL, Ssex CHAR(2), Sage SMALLINT, Sdept CHAR(20) ); 123456789CREATE TABLE Student (Sno CHAR(9), Sname CHAR(20) NOT NULL, Ssex CHAR(2). Sage SMALLINT, Sdept CHAR(20), PRIMARY KEY (Sno) ); 实体完整性定义 3 [例5.2] 将SC表中的SnoSnoSno，CnoCnoCno属性组定义为码 123456CREATE TABLE SC (Sno CHAR(9) NOT NULL, Cno CHAR(4) NOT NULL, Grade SMALLINT, PRIMARY KEY (Sno,Cno) ); 实体完整性检查和违约处理 插入或对主码列进行更新操作时，关系数据库管理系统按照实体完整性规则自动进行检查。包括： 检查主码值是否唯一，如果不唯一则拒绝插入或修改 检查主码的各个属性是否为空，只要有一个为空就拒绝插入或修改 实体完整性检查 实体完整性检查 1 检查记录中主码值是否唯一的一种方法是进行全表扫描 依次判断表中每一条记录的主码值与将插入记录上的主码值（或者修改的新主码值）是否相同 十分耗时 实体完整性检查 2 为避免对基本表进行全表扫描，RDBMS核心一般都在主码上自动建立一个索引，如B+树索引 新插入记录的主码值是25 通过主码索引，从B+树的根结点开始查找 读取3个结点：根结点（51）、中间结点（12 30）、叶结点（15 20 25） 该主码值已经存在，不能插入这条记录 ch 28 参照完整性 参照完整性定义 关系模型的参照完整性定义 在CREATE TABLE中用FOREIGN KEY短语定义哪些列为外码 用REFERENCES短语指明这些外码参照哪些表的主码 [例5.3]定义SC中的参照完整性 12345678CREATE TABLE SC(Sno CHAR(9) NOT NULL, Cno CHAR($) NOT NULL, Grade SMALLINT, PRIMARY KEY(Sno,Cno), FOREIGN KEY(Sno) REFERENCES Student(Sno), FOREIGN KEY(Sno) REFERENCES Course(Cno) ); 参照完整性检查 参照完整性定义 1 一个参照完整性将两个表中的相应元组联系起来 对被参照表和参照表进行增删改操作时有可能破坏参照完整性，必须进行检查 例如，对表SC和Student有四种可能破坏参照完整性的情况 : SC表中增加一个元组，该元组的SnoSnoSno属性的值在表Student中找不到一个元组，其SnoSnoSno属性的值与之相等。 修改SC表中的一个元组，修改后该元组的SnoSnoSno属性的值在表Student中找不到一个元组，其SnoSnoSno属性属性属性的值与之相等。 从Student表中删除一个元组，造成SC表中某些元组的SnoSnoSno属性的值在表Student中找不到一个元组，其SnoSnoSno属性的值与之相等。 修改Student表中一个元组的SnoSnoSno属性，造成SC表中某些元组的SnoSnoSno属性的值在表Student中找不到一个元组，其SnoSnoSno属性的值与之相等 。 参照完整性定义 2 被参照表（例如Student） 参照表（例如SC） 违约处理 可能破坏参照完整性 插入元组 拒绝 可能破坏参照完整性 修改外码值 拒绝 删除元组 可能破坏参照完整性 拒绝/级连删除/设置为空值 修改主码值 可能破坏参照完整性 拒绝/级连修改/设置为空值 参照完整性违约处理 参照完整性违约处理 1 参照完整性违约处理 拒绝（NO ACTION）执行 不允许该操作执行。该策略一般设置为默认策略 级联（CASCADE）操作 当删除或修改被参照表（Student）的一个元组造成了与参照表（SC）的不一致，则删除或修改参照表中的所有造成不一致的元组 设置为空值（SET-NULL） 当删除或修改被参照表的一个元组时造成了不一致，则将参照表中的所有造成不一致的元组的对应属性设置为空值。 对于参照完整性，除了应该定义外码，还应定义外码列是否允许空值 参照完整性违约处理 2 例如，有下面2个关系 学生（学号，姓名，性别，专业号，年龄） 专业（专业号，专业名） 假设专业表中某个元组被删除，专业号为12 按照设置为空值的策略，就要把学生表中专业号=12的所有元组的专业号设置为空值 对应语义：某个专业删除了，该专业的所有学生专业未定，等待重新分配专业 [例5.4] 显式说明参照完整性的违约处理示例 123456789101112131415CREATE TABLE SC ( Sno CHAR(9) NOT NULL， Cno CHAR(4) NOT NULL， Grade SMALLINT, PRIMARY KEY(Sno,Cno)， FOREIGN KEY (Sno) REFERENCES Student(Sno) ON DELETE CASCADE /*级联删除SC表中相应的元组*/ ON UPDATE CASCADE, /*级联更新SC表中相应的元组*/ FOREIGN KEY (Cno) REFERENCES Course(Cno) ON DELETE NO ACTION /*当删除course 表中的元组造成了与SC表不一致时拒绝删除*/ ON UPDATE CASCADE /*当更新course表中的cno时，级联更新SC表中相应的元组*/ ); ch 29 用户定义的完整性 用户定义的完整性 用户定义的完整性是：针对某一具体应用的数据必须满足的语义要求 属性上的约束条件 元组上的约束条件 同属性值限制相比，元组级的限制可以设置不同属性之间的取值的相互约束条件 关系数据库管理系统提供了定义和检验用户定义完整性的机制，不必由应用程序承担 插入元组或修改属性的值时，关系数据库管理系统检查约束条件是否被满足 如果不满足则操作被拒绝执行 列值非空 [例5.5] 在定义SC表时，说明SnoSnoSno、CnoCnoCno、GradeGradeGrade属性不允许取空值 123456789CREATE TABLE SC(Sno CHAR(9) NOT NULL,Cno CHAR(4) NOT NULL,Grade SAMLLINT NOT NULL,PRIMARY KEY (Sno,Cno),.../* 如果在表级定义实体完整性，隐含了Sno，Cno不允许取空值，则在 列级不允许取空值的定义 可以不写 * /) 列值唯一 [例5.6]建立部门表DEPT，要求部门名称DnameDnameDname列取值唯一，部门编号DeptnoDeptnoDeptno列为主码 1234567CREATE TABLE DEPT(Deptno NUMERIC(2),Dname CHAR(9) UNIQUE NOT NULL, /*要求Dname列值唯一, 并且不能取空值*/Location CHAR(10),PRIMARY KEY (Deptno)); 列值是否满足条件表达式 1 用CHECK短语指定列值应该满足的条件 [例5.7] Student表的SsexSsexSsex只允许取“男”或“女”。 123456789CREATE TABLE Student ( Sno CHAR(9) PRIMARY KEY, Sname CHAR(8) NOT NULL, Ssex CHAR(2) CHECK （Ssex IN （‘男’,’女’））， /*性别属性Ssex只允许取&#x27;男&#x27;或&#x27;女&#x27; */ Sage SMALLINT, Sdept CHAR(20) ); 列值是否满足条件表达式 2 [例5.8] SC表的Grade的值应该在0和100之间 123456789 CREATE TABLE SC ( Sno CHAR(9) , Cno CHAR(4),Grade SMALLINT CHECK (Grade&gt;=0 AND Grade &lt;=100)， /*Grade取值范围是0到100*/ PRIMARY KEY (Sno,Cno), FOREIGN KEY (Sno) REFERENCES Student(Sno), FOREIGN KEY (Cno) REFERENCES Course(Cno) ); 元组上约束条件的定义 [例5.9]当学生的性别是男时，其名字不能以Ms.打头 1234567891011CREATE TABLE Student ( Sno CHAR(9), Sname CHAR(8) NOT NULL， Ssex CHAR(2), Sage SMALLINT, Sdept CHAR(20), PRIMARY KEY (Sno), CHECK (Ssex=&#x27;女&#x27; OR Sname NOT LIKE &#x27;Ms.%&#x27;) /*定义了元组中Sname和 Ssex两个属性值之间的约束条件*/ ); 完整性约束命名子句 创建完整性约束 完整性约束命名子句 CONSTRAINT &lt;完整性约束条件名&gt;&lt;完整性约束条件&gt; &lt;完整性约束条件&gt;包括NOT NULL、UNIQUE、PRIMARY KEY短语、FOREIGN KEY短语、CHECK短语等 修改完整性约束 使用ALTER TABLE语句修改表中的完整性限制 创建完整性约束 创建完整性约束 1 [例5.10]建立学生登记表Student，要求学号在90000~99999之间，姓名不能取空值，年龄小于30，性别只能是“男”或“女”。 1234567891011CREATE TABLE Student ( Sno NUMERIC(6) CONSTRAINT C1 CHECK (Sno BETWEEN 90000 AND 99999), Sname CHAR(20) CONSTRAINT C2 NOT NULL, Sage NUMERIC(3) CONSTRAINT C3 CHECK (Sage &lt; 30), Ssex CHAR(2) CONSTRAINT C4 CHECK (Ssex IN ( ‘男’,&#x27;女&#x27;)), CONSTRAINT StudentKey PRIMARY KEY(Sno) ); 在Student表上建立了5个约束条件，包括主码约束（命名为StudentKeyStudentKeyStudentKey）以及C1C1C1、C2C2C2、C3C3C3、C4、C4、C4四个列级约束。 创建完整性约束 2 [例5.11]建立教师表TEACHER，要求每个教师的应发工资不低于3000元。应发工资是工资列Sal与扣除项Deduct之和。 1234567891011CREATE TABLE TEACHER ( Eno NUMERIC(4) PRIMARY KEY /*在列级定义主码*/ Ename CHAR(10), Job CHAR(8), Sal NUMERIC(7,2), Deduct NUMERIC(7,2), Deptno NUMERIC(2), CONSTRAINT TEACHERFKey FOREIGN KEY (Deptno) REFERENCES DEPT(Deptno), CONSTRAINT C1 CHECK (Sal + Deduct &gt;= 3000) ); 修改完整性约束 [例5.12]去掉例5.10 Student表中对性别的限制。 12ALTER TABLE Student DROP CONSTRAINT C4; [例5.13] 修改表Student中的约束条件，要求学号改为在900000~999999之间，年龄由小于30改为小于40 12345678ALTER TABLE Student DROP CONSTRAINT C1; ALTER TABLE Student ADD CONSTRAINT C1 CHECK (Sno BETWEEN 900000 AND 999999), ALTER TABLE Student DROP CONSTRAINT C3; ALTER TABLE Student ADD CONSTRAINT C3 CHECK(Sage &lt; 40); ch 30 断言 SQL中，可以使用 CREATE ASSERTION语句，通过声明性断言来指定更具一般性的约束。 可以定义涉及多个表的或聚集操作的比较复杂的完整性约束。 断言创建以后，任何对断言中所涉及的关系的操作都会触发关系数据库管理系统对断言的检查，任何使断言不为真值的操作都会被拒绝执行 如果断言很复杂，则系统在检测和维护断言的开销较高，这是在使用断言时应该注意的 断言相关语句 创建断言的语句格式 1CREATE ASSERTION&lt;断言名&gt;&lt;CHECK 子句&gt; 每个断言都被赋予一个名字，&lt;CHECK 子句&gt;中的约束条件与WHERE子句的条件表达式类似。 删除断言的语句格式 DROP ASSERTION &lt;断言名&gt;； &lt;!--code￼15--&gt; 创建断言 2 [例5.19]限制每一门课程最多60名学生选修 123456CREATE ASSERTION ASSE_SC_CNUM1 CHECK(60 &gt;= ALL (SELECT count(*) FROM SC GROUP by cno) ); /*此断言的谓词，涉及聚集操作count 和分组函数group by的SQL语句*/ 创建断言 3 [例5.20]限制每个学期每一门课程最多60名学生选修。首先需要修改SC表的模式，增加一个“学期（TERM）”属性 12345ALTER TABLE SC ADD TERM DATE;CREATE ASSERTION ASSE_SC_CNUM2 CHECK(60 &gt;= ALL (SELECT count(*) FROM SC GROUP by cno,TERM) ); ch 31 触发器 触发器 触发器（Trigger）是用户定义在关系表上的一类由事件驱动的特殊过程 触发器保存在数据库服务器中 任何用户对表的增、删、改操作均由服务器自动激活相应的触发器 触发器可以实施更为复杂的检查和操作，具有更精细和更强大的数据控制能力 不同的RDBMS产品触发器语法各不相同 定义触发器 定义触发器 1 CREATE TRIGGER语法格式 12345CREATE TRIGGER &lt;触发器名&gt; &#123;BEFORE | AFTER&#125; &lt;触发事件&gt; ON &lt;表名&gt; REFERENCING NEW|OLD ROW AS&lt;变量&gt; FOR EACH &#123;ROW | STATEMENT&#125; [WHEN &lt;触发条件&gt;]&lt;触发动作体&gt; 触发器又叫做事件-条件-动作 （event-condition-action）规则。 当特定的系统事件发生时，对规则的条件进行检查，如果条件成立则执行规则中的动作，否则不执行该动作。规则中的动作体可以很复杂，通常是一段SQL存储过程。 定义触发器 2 表的拥有者才可以在表上创建触发器 触发器名 触发器名可以包含模式名，也可以不包含模式名 同一模式下，触发器名必须是唯一的 触发器名和表名必须在同一模式下 表名 触发器只能定义在基本表上，不能定义在视图上 当基本表的数据发生变化时，将激活定义在该表上相应触发事件的触发器 触发事件 触发事件可以是INSERT、DELETE或UPDATE，也可以是这几个事件的组合 还可以UPDATE OF&lt;触发列，…&gt;，即进一步指明修改哪些列时激活触发器 AFTER/BEFORE是触发的时机 AFTER表示在触发事件的操作执行之后激活触发器 BEFORE表示在触发事件的操作执行之前激活触发器 触发器类型 行级触发器（FOR EACH ROW） 语句级触发器（FOR EACH STATEMENT） 触发条件 触发器被激活时，只有当触发条件为真时触发动作体才执行;否则触发动作体不执行。 如果省略WHEN触发条件，则触发动作体在触发器激活后立即执行 触发动作体 触发动作体可以是一个匿名PL/SQL过程块，也可以是对已创建存储过程的调用 如果是行级触发器，用户可以在过程体中使用NEW和OLD引用事件之后的新值和事件之前的旧值 如果是语句级触发器，则不能在触发动作体中使用NEW或OLD进行引用 如果触发动作体执行失败，激活触发器的事件就会终止执行，触发器的目标表或触发器可能影响的其他对象不发生任何变化 触发器实例 触发器类型 例如,在例5.11的TEACHER表上创建一个AFTER UPDATE触发器，触发事件是UPDATE语句： 1UPDATE TEACHER SET Deptno = 5; 假设表TEACHER有1000行 如果是语句级触发器，那么执行完该语句后，出发的动作只发生一次 如果是行级触发器，触发动作将执行1000次 触发器实例 1 [例5.21]当对表SC的Grade属性进行修改时，若分数增加了10%则将此次操作记录到下面表中：SC_U（SnoSnoSno,CnoCnoCno,OldgradeOldgradeOldgrade,NewgradeNewgradeNewgrade）其中OldgradeOldgradeOldgrade是修改前的分数，NewgradeNewgradeNewgrade是修改后的分数。 123456789CREATE TRIGGER SC_T AFTER UPDATE OF Grade ON SC REFERENCING OLD row AS OldTuple, NEW row AS NewTuple FOR EACH ROW WHEN (NewTuple.Grade &gt;= 1.1*OldTuple.Grade) INSERT INTO SC_U(Sno,Cno,OldGrade,NewGrade) VALUES(OldTuple.Sno,OldTuple.Cno,OldTuple.Grade,NewTuple.Grade) [例5.22] 将每次对表Student的插入操作所增加的学生个数记录到表StudentInsertLog中。 12345678910CREATE TRIGGER Student_Count AFTER INSERT ON Student /*指明触发器激活的时间是在执行INSERT后*/ REFERENCING NEW TABLE AS DELTA FOR EACH STATEMENT /*语句级触发器, 即执行完INSERT语句后下面的触发动作体才执行一次*/ INSERT INTO StudentInsertLog (Numbers) SELECT COUNT(*) FROM DELTA [例5.23] 定义一个BEFORE行级触发器，为教师表Teacher定义完整性规则“教授的工资不得低于4000元，如果低于4000元，自动改为4000元”。 12345678910CREATE TRIGGER Insert_Or_Update_Sal BEFORE INSERT OR UPDATE ON Teacher /*触发事件是插入或更新操作*/ REFERENCING NEW row AS newTuple FOR EACH ROW /*行级触发器*/ BEGIN /*定义触发动作体，是PL/SQL过程块*/ IF (newTuple.Job=&#x27;教授&#x27;) AND (newTuple.Sal &lt; 4000) THEN newTuple.Sal :=4000; END IF; END; 激活触发器 触发器的执行，是由触发事件激活的，并由数据库服务器自动执行 一个数据表上可能定义了多个触发器，遵循如下的执行顺序: 执行该表上的BEFORE触发器; 激活触发器的SQL语句; 执行该表上的AFTER触发器。 删除触发器 删除触发器的SQL语法： DROP TRIGGER &lt;触发器名&gt; ON &lt;表名&gt;; 触发器必须是一个已经创建的触发器，并且只能由具有相应权限的用户删除","categories":[{"name":"数据库","slug":"数据库","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"数据管理基础","slug":"数据库/数据管理基础","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"数据管理基础","slug":"数据管理基础","permalink":"https://freeeeeeeeedom.gitee.io/tags/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/"}]},{"title":"数据管理基础 ch23-25","slug":"数据管理基础-ch23-25","date":"2022-04-14T13:58:42.000Z","updated":"2022-04-19T12:50:26.855Z","comments":true,"path":"2022/04/14/数据管理基础-ch23-25/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/14/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80-ch23-25/","excerpt":"","text":"ch23 数据库安全性 数据库安全性 问题的提出 数据库的一大特点是数据可以共享 数据库的一大特点是数据可以共享 数据共享必然带来数据库的安全性问题 数据库系统中的数据共享不能是无条件的共享 军事秘密、国家机密、新产品实验数据、市场需求分析、市场营销策略、销售计划、客户档案、医疗档案、银行储蓄数据 数据库的安全性是指保护数据库以防止不合法使用所造成的数据泄露、更改或破坏 系统安全保护措施是否有效是数据库系统主要的性能指标之一 数据库的不安全因素 非授权用户对数据库的恶意存取和破坏 一些黑客（Hacker）和犯罪分子在用户存取数据库时猎取用户名和用户口令，然后假冒合法用户偷取、修改甚至破坏用户数据 数据库管理系统提供的安全措施主要包括用户身份鉴别、存取控制和视图等技术。 数据库中重要或敏感的数据被泄露 黑客和敌对分子千方百计盗窃数据库中的重要数据，一些机密信息被暴露。 数据库管理系统提供的主要技术有强制存取控制、数据加密存储和加密传输等。 审计日志分析 安全环境的脆弱性 数据库的安全性与计算机系统的安全性紧密联系 计算机硬件、操作系统、网络系统等的安全性 建立一套可信（Trusted）计算机系统的概念和标准 TCCSEC/TDI安全级别划分 TCSEC/TDI安全级别划分 1 TCSEC/TDI安全级别划分 按系统可靠或可信程度逐渐增高 各安全级别之间具有一种偏序向下兼容的关系 TCSEC/TDI安全级别划分 2 D级 将一切不符合更高标准的系统均归于D组 C1级 非常初级的自主安全保护 能够实现对用户和数据的分离，进行自主存取控制（DAC），保护或限制用户权限的传播。 现有的商业系统稍作改进即可满足 C2级 安全产品的最低档次 提供受控的存取保护，将C1级的DAC进一步细化，以个人身份注册负责，并实施审计和资源隔离 达到C2级的产品在其名称中往往不突出“安全”（Security）这一特色 B1级 标记安全保护。“安全”（Security）或“可信的” （Trusted）产品。 对系统的数据加以标记，对标记的主体和客体实施强制存取控制（MAC）、审计等安全机制 B2级 结构化保护 建立形式化的安全策略模型并对系统内的所有主体和客体实施DAC和MAC B3级 安全域 该级的TCB必须满足访问监控器的要求，审计跟踪能力更强，并提供系统恢复过程 A1级 验证设计，即提供B3级保护的同时给出系统的形式化设计说明和验证以确信各安全保护真正实现。 TCSEC/TDI安全级别划分 3 CC 提出国际公认的表述信息技术安全性的结构 把信息产品的安全要求分为 安全功能要求 安全保证要求 C文本组成 简介和一般模型 有关术语、基本概念和一般模型以及与评估有关的一些框架 安全功能要求 列出了一系列类、子类和组件 安全保证要求 列出了一系列保证类、子类和组件 提出了评估保证级（Evaluation Assurance Level，EAL），从EAL1至EAL7共分为七级 评估保证级 定 义 TCSEC安全级别（近似相当） EAL1 功能测试（functionally tested） EAL2 结构测试（structurally tested） C1 EAL3 系统地测试和检查（methodically tested and checked） C2 EAL4 系统地设计、测试和复查（methodically designed tested， and reviewed） B1 EAL5 半形式化设计和测试（semiformally designed and tested） B2 EAL6 半形式化验证的设计和测试（semiformally verified design and tested） B3 EAL7 形式化验证的设计和测试（formally verified design and tested） A1 计算机系统的安全模型 计算机系统中，安全措施是一级一级层层设置 系统根据用户标识鉴定用户身份，合法用户才准许进入计算机系统 数据库管理系统还要进行存取控制，只允许用户执行合法操作 操作系统有自己的保护措施 数据以密码形式存储到数据库中 数据库管理系统安全性控制模型 ch24 存取控制 存取控制的组成 定义用户权限，并将用户权限登记到数据字典中 用户对某一数据对象的操作权力称为权限 DBMS提供适当的语言来定义用户权限，存放在数据字典中，称为安全规则或授权规则 合法权限检查 用户发出存取数据库操作请求 DBMS查找数据字典，进行合法权限检查 用户权限定义和合法权检查机制一起组成了数据库管理系统的存取控制子系统 自主存取控制 （Discretionary Access Control) C2级 用户对不同的数据对象有不同的存取权限 不同的用户对同一对象也有不同的权限 用户可将其拥有的存取权限转授给其他用户 自主存取控制方法1 SQL 的 GRANT语句和REVOKE语句实现 用户权限组成 数据库对象 操作类型 定义存取权限称为授权 定义用户存取权限：定义用户可以在那些数据库对象上进行哪些操作 自主存取控制方法2 关系数据库系统中存取控制对象 SQL中的授权机制 数据库管理员 拥有所有对象的所有权限 根据实际情况不同的权限授予不同的用户 用户： 拥有自己建立的对象的全部操作权限 可以使用GRANT，把权限授予其他用户 被授予的用户 如果具有&quot;继续授权&quot;的许可，可以把获得的权限再授予其他用户 所有授予出去的权力在必要时可以用REVODE语句收回 GRANT 1 GRANT语句的一般格式 1234GRANT &lt;权限&gt;[,&lt;权限&gt;]...ON &lt;权限类型&gt;&lt;对象名&gt;[,&lt;权限类型&gt;&lt;对象名&gt;]...TO &lt;用户&gt;[,&lt;用户&gt;]...[WITH GRANT OPTION] 语义：将对指定操作对象的指定操作权限授予指定的用户 发出GRANT： 数据库管理员 数据库对象创建者（属主Owner） 拥有该权限的用户 按授权限的用户 一个或多个具体用户 PUBLIC（全体用户） GRANT 2 WITH GRANT OPTION子句： 指定：可以再授予 没有指定：不能传播 不允许循环授权 [例4.1] 把查询Student表权限授予用户U1 123GRANT SELECTON TABLE StudentTO U1; [例4.2] 把对Student表和Course表的全部权限授予用户U2和U3 123GRANT ALL PRIVILIGESON TABLE Student，CourseTO U2,U3 [例4.3]把对表SC的查询权限授予所有用户 123GRANT SELECTON TABLE SCTO PUBLIC; [例4.4]把查询Student表的和修改学生学号的权限授予用户U4 123GRANT UPDATE(Sno),SELECTON TBALE StudentTO U4; [例4.5]把对表SC的INSERT权限授予U5用户，并允许他再将次权限授予其他用户 1234GRANT INSERTON TABLE SCTO U5WITH GRANT OPTION; 执行例4.5后，U5不仅拥有了对表SC的INSERT权限，还可以传播此权限； [例4.6] 1234GRANT INSERTON TABLE SCTO U6WITH GRANT OPTION; [例4.7]同样，U6还可以将此权限授予U7，但U7不能再传播此权限 123GRANT INSERTON TABLE SCTO U7; REVOKE 1 授予的权限可以由数据库管理员或者其他授权这用REVOKE语句收回 REVOKE语句的一般格式为 123REVOKE &lt;权限&gt;[,&lt;权限&gt;]...ON &lt;对象类型&gt;&lt;对象名&gt;[,&lt;对象类型&gt;&lt;对象名&gt;]...FROM &lt;用户&gt;[,&lt;用户&gt;]..[CASCADE|RESTRICT]; REVOKE 2 [例4.8]把用户U4修改学生学号的权限收回 123REVOKE UPDATE(Sno)ON TABLE StudentFROM U4; [例4.9]收回所有用户对表SC的查询权限 123REVOKE SELECTON TABLE SCFROM PUBLIC; [例4.10]把用户U5对SC表的INSERT权限收回 123REVOKE INSERTON TABLE SCFROM U5 CASCADE; 将用户U5的INSERT权限收回的时候使用CASCADE,则同时收回U6或U7的INSERT权限，否则拒绝执行该语句 如果U6或U7还从其他用户处获得对SC表的INSERT权限，则他们仍具有此权限，系统只收回直接或间接从U5处获得的权限 创建数据库模式的权限 1 数据库管理员在创建用户时实现 123CREATE USER语句格式CREATE USER &lt;username&gt;[WITH][DBA|RESOURCE|CONNECT]; 注：CREATE USER不是SQL标准，各个系统的实现相差甚远 只有系统的超级用户才有权创建一个新的数据库用户 新创建的数据库用户有三种权限： CONNECT、RESOURCE和DBA 如没有指定创建的新用户的权限，默认该用户拥有CONNECT权限。拥有CONNECT权限的用户不能创建新用户，不能创建模式，也不能创建基本表，只能登录数据库 拥有RESOURCE权限的用户能创建基本表和视图，成为所创建对象的属主。但不能创建模式，不能创建新的用户 拥有DBA权限的用户是系统中的超级用户，可以创建新的用户、创建模式、创建基本表和视图等；DBA拥有对所有数据库对象的存取权限，还可以把这些权限授予一般用户 数据库角色 1 数据库角色： 被命名的一组与数据库操作相关的权限 角色是权限的集合 可以为一组具有相同权限的用户创建一个角色 简化授权的过程 角色的创建 1CREATE ROLE &lt;角色名&gt; 给角色授权 123GRANT &lt;&gt;[,&lt;&gt;]...ON &lt;&gt;TO &lt;&gt;[,&lt;&gt;]... 数据库角色 2 将一个角色授予其他的角色或用户 123GRANT &lt;&gt;[,&lt;&gt;]..TO &lt;&gt;[,&lt;&gt;]...[WITH ADMIN OPTION] 该语句把角色授予某用户，或授予另一个角色 授予者是角色的创建者或拥有在这个角色上的ADMIN OPTION 指定了WITH ADMIN OPTION则获得某种权限的角色或用户还可以把这种权限授予其他角色 一个角色的权限：直接授予这个角色的全部权限加上其他角色授予这个角色的全部权限 角色权限的收回 123REVOKE &lt;&gt;[,&lt;&gt;]..ON &lt;&gt;[,&lt;&gt;]FROM &lt;&gt;[,&lt;&gt;]... 用户可以回收角色的权限从而修改角色拥有的权限 REVOKE执行者时 角色的创建者 拥有在这个角色上的ADMIN OPTION 数据库角色 3 [例4.11]通过角色来实现将一组权限授予一个用户 创建角色R1 1CREATE ROLE R1; 使用GRANT语句，使角色R1拥有Student表的SELCT、UPDATE、INSERT权限 123GRANT SELECT.UPDATE,INSERTON TABLE StudentTO R1； 将这个角色授予王平，张明，赵玲。使他们具有角色R1所包含的全部权限 12GRANT R1TO 王平，张明，赵玲； 可以一次性通过R1来回收王平的这3个权限 12REVOKE R1FROM 王平 数据库角色 4 [例4.12]角色权限修改 123GRANT DELETEON TABLE StudentTO R1； 使角色R1增加了DELETE权限 [例4.13]使R1减少了SELECT权限 123REVOKE SELECTON TABLE StudentFROM R1； 自主存取控制缺点 可能存在数据的“无意泄露” 原因：这种机制仅仅通过对数据的存取权限来进行安全控制，而数据本身并无安全性标记 解决：对系统控制下的所有主客体实施强制存取控制策略 强制存取控制 强制存取控制（Mandatory Access Control，简称 MAC） B1级别，保证更高程度的安全性 每一个数据对象被标以一定的密级 每一个用户也被授予某一个级别的许可证 对于任意一个对象，只有具有合法许可证的用户才可以存取 用户不能直接感知或进行控制 适用于对数据有严格而固定密级分类的部门 军事部门 政府部门 实体 在强制存取控制中，数据库管理系统所管理的全部实体被分为主体和客体两大类 主体是系统中的活动实体 数据库管理系统所管理的实际用户 代表用户的各进程 客体是系统中的被动实体，受主体操纵 文件、基本表、索引、视图 敏感度标记 对于主体和客体，DBMS为它们每个实例（值）指派一个敏感度标记（Label） 敏感度标记分成若干级别 绝密（Top Secret，TS） 机密（Secret，S） 可信（Confidential，C） 公开（Public，P） TS&gt;=S&gt;=C&gt;=P 主体的敏感度标记称为许可证级别（Clearance Level） 客体的敏感度标记称为密级（Classification Level） 强制存取控制规则 仅当主体的许可证级别大于或等于客体的密级时，该主体才能读取相应的客体 仅当主体的许可证级别小于或等于客体的密级时，该主体才能写相应的客体 强制存取控制（MAC）是对数据本身进行密级标记，无论数据如何复制，标记与数据是一个不可分的整体，只有符合密级标记要求的用户才可以操纵数据。 DAC + MAC 实现强制存取控制时要首先实现自主存取控制 原因：较高安全性级别提供的安全保护要包含较低级别的所有保护 自主存取控制与强制存取控制共同构成数据库管理系统的安全机制，先进行自主存取控制检查，通过自主存取控制检查的数据对象再由系统进行强制存取控制检查，只有通过强制存取控制检查的数据对象方可存取。 ch25 视图机制、审计、数据加密及其他 视图机制 视图机制 1 把要保密的数据对无权存取这些数据的用户隐藏起来，对数据提供一定程度的安全保护 间接地实现支持存取谓词的用户权限定义 视图机制 2 [例4.14] 建立计算机系学生的视图，把对该视图的SELECT权限授于王平，把该视图上的所有操作权限授于张明 123456CS_StudentCREATE VIEW CS_StudentASSELECT *FROM StudentWHERE Sdept = &#x27;CS&#x27;; 1234567GRANT SELECTON CS_StudentTO 王平；GRANT ALL PRIVILIGESON CS_StudentTO 张明； 审计 审计 启用一个专用的审计日志（Audit Log）将用户对数据库的所有操作记录在上面 审计员利用审计日志监控数据库中的各种行为，找出非法存取数据的人、时间和内容 C2以上安全级别的DBMS必须具有审计功能 审计功能的可选性 审计很费时间和空间 DBA可以根据应用对安全性的要求，灵活地打开或关闭审计功能 审计功能主要用于安全性要求较高的部门 服务器事件 审计数据库服务器发生的事件 系统权限 对系统拥有的结构或模式对象进行操作的审计 要求该操作的权限是通过系统权限获得的 语句事件 对SQL语句，如DDL,DML,DQL及DCL语句的审计 模式对象事件 对特定模式对象上进行的SELECT或DML操作的审计 审计功能 基本功能 c多套审计规则：一般在初始化设定 提供审计分析和报表功能 审计日志管理功能 防止审计员误删审计记录，审计日志必须先转储后删除 对转储的审计记录文件提供完整性和保密性保护 只允许审计员查阅和转储审计记录，不允许任何用户新增和修改审计记录等 提供查询审计设置及审计记录信息的专门视图 审计级别 用户级审计 任何用户可设置的审计 主要是用户针对自己创建的数据库表和视图进行审计 系统级审计 只能由数据库管理员设置 监测成功或失败的登录要求、监测授权和收回操作以及其他数据库级权限下的操作 审计语句 AUDIT语句和NOAUDIT语句 AUDIT语句：设置审计功能 NOAUDIT语句：取消审计功能 [例4.15] 对修改SC表结构或修改SC表数据的操作进行审计 12AUDIIT ALTER,UPDATEON SC; [例4.16] 取消对SC表的一切审计 12NOAUDIT ALTER,UPDATEON SC; 数据加密 防止数据库中数据在存储和传输中失密的有效手段 加密的基本思想 根据一定的算法将原始数据—明文（Plain text）变换为不可直接识别的格式­—密文（Cipher text） 加密方法 存储加密 传输加密 存储加密 透明存储加密 内核级加密保护方式，对用户完全透明 将数据在写到磁盘时对数据进行加密，授权用户读取数据时再对其进行解密 数据库的应用程序不需要做任何修改，只需在创建表语句中说明需加密的字段即可 内核级加密方法: 性能较好，安全完备性较高 非透明存储加密 通过多个加密函数实现 传输加密 链路加密 在链路层进行加密 传输信息由报头和报文两部分组成 报文和报头均加密 端到端加密 在发送端加密，接收端解密 只加密报文不加密报头 所需密码设备数量相对较少，容易被非法监听者发现并从中获取敏感信息 其他安全性保护 推理控制 避免用户利用能够访问的数据推知更高密级的数据 隐蔽信道 间接数据传递 数据隐私保护 描述个人控制其不愿他人知道或他人不便知道的个人数据的能力 范围很广：数据收集、数据存储、数据处理和数据发布等各个阶段","categories":[{"name":"数据库","slug":"数据库","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"数据管理基础","slug":"数据库/数据管理基础","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"数据管理基础","slug":"数据管理基础","permalink":"https://freeeeeeeeedom.gitee.io/tags/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/"}]},{"title":"数据管理基础 ch11-22","slug":"数据管理基础-ch11-22","date":"2022-04-14T13:58:26.000Z","updated":"2022-04-19T12:50:24.176Z","comments":true,"path":"2022/04/14/数据管理基础-ch11-22/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/14/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80-ch11-22/","excerpt":"","text":"ch11 SQL概述 SQL（Structured Query Language）结构化查询语言，是关系数据库的标准语言 SQL是一个通用的、功能极强的关系数据库语言 综合统一 高度非过程化 面向集合的操作方式 以同一种语法结构提供两种使用方法 语言简洁，易学易用 SQL的特点 综合统一 集数据定义语言（DDL），数据操纵语言（DML），数据控制语言（DCL）功能于一体 可以独立完成数据库生命周期中的全部活动 用户数据库投入运行后，可根据需要随时逐步修改模式，不影响数据库的运行 数据操作符统一 高度非过程化 非关系数据模型的数据操纵语言“面向过程”，必须指定存取路径 SQL只要提出“做什么”，无须了解存取路径 存取路径的选择以及SQL的操作过程由系统自动完成 面向集合的操作方式 非关系数据模型采用面向记录的操作方式，操作对象是一条记录 SQL采用集合操作方式 操作对象、查找结果可以是元组的集合 次插入、删除、更新操作的对象可以是元组的集合 以同一种语法结构提供多种使用方式 SQL是独立的语言，能够独立地用于联机交互的使用方式 SQL又是嵌入式语言，能够嵌入到高级语言（例如C，C++，Java）程序中，供程序员设计程序时使用 语言简洁，易学易用 SQL功能极强，完成核心功能只用了9个动词: 数据定义：CREATE，DROP，ALTER 数据查询：SELECT 数据操作：INSERT，UPDATE，DELETE 数据控制：GRANT，REVOKE SQL与关系数据库三级模式 基本表 本身独立存在的表 一个关系对应一个基本表 一个（或多个）基本表对应一个存储文件 一个表可以带若干索引 存储文件 逻辑结构组成了关系数据库的内模式 物理结构对用户是隐蔽的 视图 从一个或几个基本表导出的表 数据库中只存放视图的定义而不存放视图对应的数据 视图是一个虚表 用户可以在视图上再定义视图 ch12 SQL数据定义 层次化的数据库对象命名机制 一个关系数据库管理系统的实例（Instance）中可以建立多个数据库 一个数据库中可以建立多个模式 一个模式下通常包括多个表、视图和索引等数据库对象 数据定义 SQL的数据定义功能: 模式定义 表定义 视图和索引的定义 定义模式 定义模式实际上定义了一个命名空间。 在这个空间中可以定义该模式包含的数据库对象，例如基本表、视图、索引等。 在CREATE SCHEMA中可以接受CREATE TABLE，CREATE VIEW和GRANT子句。 CREATE SCHEMA &lt;模式名&gt; AUTHORIZATION &lt;用户名&gt; [&lt;表定义子句&gt;| &lt;视图定义子句&gt;|&lt;授权定义子句&gt;] CREATE SCJE,A “S_T” AUTHORIZATION WANG 删除模式 DROP SCHEMA &lt;模式名&gt; &lt;CASCADE|RESTRICT&gt; CASCADE（级联） 删除模式的同时把该模式中所有的数据库对象全部删除 RESTRICT（限制） 如果该模式中定义了下属的数据库对象（如表、视图等），则拒绝该删除语句的执行。 仅当该模式中没有任何下属的对象时才能执行。 定义基本表 CREATE TABLE &lt;表名&gt; (&lt;列名&gt; &lt;数据类型&gt;[ &lt;列级完整性约束条件&gt; ] [,&lt;列名&gt; &lt;数据类型&gt;[ &lt;列级完整性约束条件&gt;] ] CREATE TABLE Student ​ (Sno CHAR(9) PRIMARY KEY ​ Sname CHAR(20) UNIQUE, ​ Ssex CHAR(2) ); 数据类型 SQL中域的概念用数据类型来实现 定义表的属性时需要指明其数据类型及长度 选用哪种数据类型 数据类型 含义 CHAR(n),CHARACTER(n) 长度为n的定长字符串 VARCHAR(n), CHARACTERVARYING(n) 最大长度为n的变长字符串 CLOB 字符串大对象 BLOB 二进制大对象 INT，INTEGER **长整数（**4字节） SMALLINT **短整数（**2字节） BIGINT 大整数（8字节） NUMERIC(p，d) 定点数，由p位数字（不包括符号、小数点）组成，小数后面有d位数字 DECIMAL(p, d**), DEC(p,** d) 同NUMERIC REAL 取决于机器精度的单精度浮点数 DOUBLE PRECISION 取决于机器精度的双精度浮点数 FLOAT(n) 可选精度的浮点数，精度至少为n位数字 BOOLEAN 逻辑布尔量 DATE 日期，包含年、月、日，格式为YYYY-MM-DD TIME 时间，包含一日的时、分、秒，格式为HH:MM:SS TIMESTAMP 时间戳类型 INTERVAL 时间间隔类型 修改基本表 123456ALTER TABLE &lt;表名&gt;[ ADD[COLUMN] &lt;新列名&gt; &lt;数据类型&gt; [ 完整性约束 ] ][ ADD &lt;表级完整性约束&gt;][ DROP [ COLUMN ] &lt;列名&gt; [CASCADE| RESTRICT] ][ DROP CONSTRAINT&lt;完整性约束名&gt;[ RESTRICT | CASCADE ] ][ALTER COLUMN &lt;列名&gt;&lt;数据类型&gt; ] ; 删除基本表 DROP TABLE &lt;表名&gt;［RESTRICT| CASCADE］; RESTRICT：删除表是有限制的。 欲删除的基本表不能被其他表的约束所引用 如果存在依赖该表的对象，则此表不能被删除 CASCADE：删除该表没有限制。 在删除基本表的同时，相关的依赖对象一起删除 索引 建立索引的目的：加快查询速度 由数据库管理员或表的拥有者建立 由关系数据库管理系统自动完成维护 关系数据库管理系统自动使用合适的索引作为存取路径， 用户不必也不能显式地选择索引 关系数据库管理系统中常见索引： 顺序文件上的索引 B+树索引 散列（hash）索引 位图索引 建立索引 语句格式 CREATE [UNIQUE] [CLUSTER] INDEX &lt;索引名&gt; ON &lt;表名&gt;(&lt;列名&gt;[&lt;次序&gt;] [,&lt;列名&gt;[&lt;次序&gt;] ]…); &lt;表名&gt;：要建索引的基本表的名字 索引：可以建立在该表的一列或多列上，各列名之间用号分隔 &lt;次序&gt;：指定索引值的排列次序，升序：ASC，降序：DESC。缺省值：ASC UNIQUE：此索引的每一个索引值只对应唯一的数据记录 CLUSTER：表示要建立的索引是聚簇索引 数据字典 数据字典是关系数据库管理系统内部的一组系统表，它记录了 数据库中所有定义信息： 关系模式定义 视图定义 索引定义 完整性约束定义 各类用户对数据库的操作权限 统计信息等 关系数据库管理系统在执行SQL的数据定义语句时，实际上就是在更新数据字典表中的相应信息 ch13 SQL 数据查询（单表） 语句格式 123456SELECT [ALL|DISTINCT] &lt;目标列表达式&gt;[,&lt;目标列表达式&gt;] …FROM &lt;表名或视图名&gt;[,&lt;表名或视图名&gt; ]…|(SELECT 语句) [AS]&lt;别名&gt;[ WHERE &lt;条件表达式&gt; ][GROUP BY &lt;列名1&gt; [ HAVING &lt;条件表达式&gt; ] ][ORDER BY &lt;列名2&gt; [ ASC|DESC ] ]; SELECT子句：指定要显示的属性列 FROM子句：指定查询对象（基本表或视图） WHERE子句：指定查询条件 GROUP BY子句：对查询结果按指定列的值分组，该属性列值 相等的元组为一个组。通常会在每组中作用聚集函数。 HAVING短语：只有满足指定条件的组才予以输出 ORDER BY子句：对查询结果表按指定列值的升序或降序排序 查询满足条件的元组 123SELECT SnameFROM StudentWHERE Sdept = &#x27;CS&#x27;; 比较大小 确定范围 确定集合 谓词：IN &lt;值表&gt;, NOT IN &lt;值表&gt; 字符匹配 谓词： [NOT] LIKE ‘&lt;匹配串&gt;’ [ESCAPE ‘ &lt;换码字符&gt;’] &lt;匹配串&gt;可以是一个完整的字符串，也可以含有通配符%（任意长度（长度可以为0）的字符串）和 _（任意单个字符） ​ 例如：a%b表示以a开头，以b结尾的任意长度的字符串 ​ 例如：a_b表示以a开头，以b结尾的长度为3的任意字符串 匹配串为固定字符串 123456789- [例3.29] 查询学号为201215121的学生的详细情况。 SELECT * FROM Student WHERE Sno LIKE ‘201215121&#x27;;- 等价于： SELECT * FROM Student WHERE Sno = &#x27;201215121&#x27;; 匹配串为含通配符的字符串 123456789 [例3.30] 查询所有姓刘学生的姓名、学号和性别。​ SELECT Sname, Sno, Ssex​ FROM Student​ WHERE Sname LIKE &#x27;刘%&#x27;;​ [例3.31] 查询姓&quot;欧阳&quot;且全名为三个汉字的学生的姓名。​ SELECT Sname​ FROM Student​ WHERE Sname LIKE &#x27;欧阳__’; 使用换码字符将通配符转义为普通字符 ESCAPE ‘＼’ 表示“ ＼” 为换码字符 123456789[例3.34] 查询DB_Design课程的课程号和学分。 SELECT Cno，Ccredit FROM Course WHERE Cname LIKE &#x27;DB\\_Design&#x27; ESCAPE &#x27;\\ &#x27; ;[例3.35] 查询以&quot;DB_&quot;开头，且倒数第3个字符为 i的课程的详细情况。 SELECT * FROM Course WHERE Cname LIKE &#x27;DB\\_%i_ _&#x27; ESCAPE &#x27;\\ &#x27; ; 涉及空值的查询 12谓词： IS NULL 或 IS NOT NULL “IS” 不能用 “=” 代替 多重条件查询 逻辑运算符：AND和 OR来连接多个查询条件 AND的优先级高于OR 可以用括号改变优先级 对查询结果排序 ORDER BY子句 可以按一个或多个属性列排序 升序：ASC;降序：DESC;缺省值为升序 对于空值，排序时显示的次序由具体系统实现来决定 聚集函数 聚集函数： 统计元组个数 COUNT(*) 统计一列中值的个数 COUNT([DISTINCT|ALL] &lt;列名&gt;) 计算一列值的总和（此列必须为数值型） SUM([DISTINCT|ALL] &lt;列名&gt;) 计算一列值的平均值（此列必须为数值型） AVG([DISTINCT|ALL] &lt;列名&gt;) 求一列中的最大值和最小值 MAX([DISTINCT|ALL] &lt;列名&gt;) MIN([DISTINCT|ALL] &lt;列名&gt;) 对查询结果分组 GROUP BY子句分组 细化聚集函数的作用对象 如果未对查询结果分组，聚集函数将作用于整个查询结果 对查询结果分组后，聚集函数将分别作用于每个组 按指定的一列或多列值分组，值相等的为一组 123456789101112[例3.48 ]查询平均成绩大于等于90分的学生学号和平均成绩因为WHERE子句中是不能用聚集函数作为条件表达式，下面的语句是不对的： SELECT Sno, AVG(Grade) FROM SC WHERE AVG(Grade)&gt;=90 GROUP BY Sno;正确的查询语句应该是： SELECT Sno, AVG(Grade) FROM SC GROUP BY Sno HAVING AVG(Grade)&gt;=90; ch14 SQL 数据查询（连接） 连接查询 连接查询：同时涉及两个以上的表的查询 连接条件或连接谓词：用来连接两个表的条件 一般格式： [&lt;表名1&gt;.]&lt;列名1&gt; &lt;比较运算符&gt; [&lt;表名2&gt;.]&lt;列名2&gt; [&lt;表名1&gt;.]&lt;列名1&gt; BETWEEN [&lt;表名2&gt;.]&lt;列名2&gt; AND [&lt;表名2&gt;.]&lt;列名3&gt; 连接字段：连接谓词中的列名称 连接条件中的各连接字段类型必须是可比的，但名字不必相同 123SELECT Student.Sno,Sname,Ssex,Sage,Sdept,Cno,Grade FROM Student,SC WHERE Student.Sno = SC.Sno; 连接操作的执行过程 嵌套循环法（NESTED-LOOP） 首先在表1中找到第一个元组，然后从头开始扫描表2，逐一查找满足连接件的元组，找到后就将表1中的第一个元组与该元组拼接起来，形成结果表中一个元组。 表2全部查找完后，再找表1中第二个元组，然后再从头开始扫描表2，逐一查找满足连接条件的元组，找到后就将表1中的第二个元组与该元组拼接起来，形成结果表中一个元组。 重复上述操作，直到表1中的全部元组都处理完毕 排序合并法（SORT-MERGE） ​ 常用于=连接 首先按连接属性对表1和表2排序 对表1的第一个元组，从头开始扫描表2，顺序查找满足连接条件的元组，找到后就将表1中的第一个元组与该元组拼接起来，形成结果表中一个元组。当遇到表2中第一条大于表1连接字段值的元组时，对表2的查询不再继续 索引连接（INDEX-JOIN） 对表2按连接字段建立索引 对表1中的每个元组，依次根据其连接字段值查询表2的索引，从中找到满足条件的元组，找到后就将表1中的第一个元组与该元组拼接起来，形成结果表中一个元组 同时进行连接和选择 12345[例 3.51]查询选修2号课程且成绩在90分以上的所有学生的学号和姓名。 SELECT Student.Sno, Sname FROM Student, SC WHERE Student.Sno=SC.Sno AND SC.Cno=&#x27; 2 &#x27; AND SC.Grade&gt;90; 执行过程: 先从SC中挑选出Cno='2’并且Grade&gt;90的元组形成一个中间关系 再和Student中满足连接条件的元组进行连接得到最终的结果关系 自身连接 自身连接：一个表与其自己进行连接 需要给表起别名以示区别 由于所有属性名都是同名属性，因此必须使用别名前缀 1234[例 3.52]查询每一门课的间接先修课（即先修课的先修课） SELECT FIRST.Cno, SECOND.Cpno FROM Course FIRST, Course SECOND WHERE FIRST.Cpno = SECOND.Cno; 外连接 外连接与普通连接的区别 普通连接操作只输出满足连接条件的元组 外连接操作以指定表为连接主体，将主体表中不满足连接条件的元组一并输出 左外连接 列出左边关系中所有的元组 右外连接 列出右边关系中所有的元组 多表连接 多表连接：两个以上的表进行连接 [例3.54]查询每个学生的学号、姓名、选修的课程名及成绩 1234SELECT Student.Sno, Sname, Cname, GradeFROM Student, SC, Course /*多表连接*/WHERE Student.Sno = SC.Sno AND SC.Cno = Course.Cno; ch15 SQL数据查询（嵌套） 一个SELECT-FROM-WHERE语句称为一个查询块 将一个查询块嵌套在另一个查询块的WHERE子句或HAVING短语的条件中的查询称为嵌套查询 123456SELECT Sname /*外层查询/父查询*/ FROM Student WHERE Sno IN ( SELECT Sno /*内层查询/子查询*/ FROM SC WHERE Cno= &#x27; 2 &#x27;); 上层的查询块称为外层查询或父查询 下层查询块称为内层查询或子查询 子查询的限制 不能使用ORDER BY子句 1234567891011121314151617SELECT Sdept FROM Student WHERE Sname= &#x27; 刘晨 &#x27;;结果为： CSSELECT Sno, Sname, Sdept FROM Student WHERE Sdept= &#x27; CS &#x27;; SELECT Sno, Sname, SdeptFROM StudentWHERE Sdept IN (SELECT Sdept FROM Student WHERE Sname= &#x27; 刘晨 &#x27;); 带有IN谓词的子查询 带有比较运算符的子查询 带有ANY（SOME）或ALL谓词的子查询 带有EXISTS谓词的子查询","categories":[{"name":"数据库","slug":"数据库","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"数据管理基础","slug":"数据库/数据管理基础","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"数据管理基础","slug":"数据管理基础","permalink":"https://freeeeeeeeedom.gitee.io/tags/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/"}]},{"title":"April 14th","slug":"April-14th","date":"2022-04-14T10:28:54.000Z","updated":"2022-04-20T09:10:24.393Z","comments":true,"path":"2022/04/14/April-14th/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/14/April-14th/","excerpt":"","text":"To Do [x] 搭建博客 [ ] CS144 lab1 [ ] CS144 lab2 [x] 锻炼 5km [ ] 核酸检测 [ ] Leetcode *3 [ ] 微信小程序 [ ] 计网实验 [ ] 数据库JDBC 总结 string.assign()用法 assign方法可以理解为先将原字符串清空，然后赋予新的值作替换。 返回类型为 string类型的引用。其常用的重载也有下列几种： string&amp; assign(const string&amp; str); 替换字串 1234string a = &quot;HELLO&quot;;a.assign(&quot;Go&quot;);cout&lt;&lt;a&lt;&lt;endl;//打印结果为Go string&amp; assign ( const string&amp; str, size_t pos, size_t n ); 将str的内容从位置pos起的n个字符作为原字串的新内容赋给原字串 1234string testassign = &quot;Hello World&quot;;testassign.assign(&quot;Come on!&quot;, 5, 2);cout&lt;&lt;testassign&lt;&lt;endl;//打印结果为 on string&amp; assign ( const char* s, size_t n ); 将字符数组或者字符串的首n个字符替换原字符串内容 1234string testassign = &quot;Hello World&quot;;testassign.assign(&quot;go back to China&quot;, 7);cout&lt;&lt;testassign&lt;&lt;endl;//打印结果为go back string&amp; assign ( const char* s ); 将字符串或者字符数组作为新内容替换原字串 12345string testassign = &quot;Hello World&quot;;char ch[20] = &quot;go back to shanghai&quot;;testassign.assign(ch);cout&lt;&lt;testassign&lt;&lt;endl;//打印结果为 go back to shanghai string&amp; assign ( size_t n, char c ); 将原字串替换为n个字符c 12345string testassign = &quot;Hello World&quot;;char ch = &#x27;?&#x27;;testassign.assign(5, ch);cout&lt;&lt;testassign&lt;&lt;endl;//打印结果为????? template string&amp; assign ( InputIterator first, InputIterator last ); 需要include 12345string testassign = &quot;Hello World&quot;;testassign.assign(istream_iterator&lt;char&gt;(cin), istream_iterator&lt;char&gt;());//输入abcdecout&lt;&lt;testassign&lt;&lt;endl;//打印结果为 abcde 5km耗时 26min26s 图床SMMS+Picgo 解决了复选框的显示问题 不过今天Leetcode没刷，cs144也没完成","categories":[{"name":"Everday","slug":"Everday","permalink":"https://freeeeeeeeedom.gitee.io/categories/Everday/"},{"name":"2022_大二下","slug":"Everday/2022-大二下","permalink":"https://freeeeeeeeedom.gitee.io/categories/Everday/2022-%E5%A4%A7%E4%BA%8C%E4%B8%8B/"}],"tags":[{"name":"2022_Spring","slug":"2022-Spring","permalink":"https://freeeeeeeeedom.gitee.io/tags/2022-Spring/"}]},{"title":"CS144 Lab 1","slug":"CS144-Lab-1","date":"2022-04-14T09:31:07.000Z","updated":"2022-04-19T16:02:29.034Z","comments":true,"path":"2022/04/14/CS144-Lab-1/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/14/CS144-Lab-1/","excerpt":"","text":"Lab Checkpoint 1: stitching substrings into a byte stream TCP概述 在实验1中，你将实现一个流重组器–一个将字节流的小片段（称为子串或片段）缝合到连续流中的模块。 的小块字节流（称为子串，或段）重新拼接成一个连续的字节流。 顺序正确的字节流 Interface 1234567891011121314151617//构造器，最多存储 Capacity个字节StreamReassembler(const size_t capacity);//接收一个子串并将任何新的连续字节写入流中，同时保持在 &quot;容量 &quot;的内存限制之内。超过容量的字节 超过容量的字节将被默默地丢弃。// `data`: 子串// `index` 表示子串中第一个字节的索引// `eof`: 子串的最后一个字节是整个字节流的结尾void push_substring(const string &amp;data, const uint64_t index, const bool eof);//接受重组后的字节流ByteStream &amp;stream_out();//已存储但尚未重新组合的子串中的字节数size_t unassembled_bytes() const;//内部状态是否为空（除输出流外）？bool empty() const; 我们的任务是实现StreamReassembler类 What’s the “capacity”? 你的push_substring方法将忽略任何会导致StreamReassembler超过其 &quot;容量 &quot;的字符串部分 Capacity由两部分构成：（如图） 重组后的ByteStream中的字节数（下面以绿色显示） 未组装的 &quot;子串 &quot;可使用的最大字节数（显示为 以红色显示 当你实现StreamReassembler并通过测试时，你可能会发现这幅图很有用。测试时，你可能会发现这张图片很有用–&quot;正确 &quot;的行为并不总是自然的。","categories":[{"name":"Computer-Network","slug":"Computer-Network","permalink":"https://freeeeeeeeedom.gitee.io/categories/Computer-Network/"},{"name":"CS144","slug":"Computer-Network/CS144","permalink":"https://freeeeeeeeedom.gitee.io/categories/Computer-Network/CS144/"}],"tags":[{"name":"CS144","slug":"CS144","permalink":"https://freeeeeeeeedom.gitee.io/tags/CS144/"}]},{"title":"CS144 Lab 0","slug":"CS144-Lab-0","date":"2022-04-14T08:53:52.000Z","updated":"2022-04-19T16:02:26.216Z","comments":true,"path":"2022/04/14/CS144-Lab-0/","link":"","permalink":"https://freeeeeeeeedom.gitee.io/2022/04/14/CS144-Lab-0/","excerpt":"","text":"Lab Checkpoint 0: networking warmup 1 在您的计算机上设置GNU/Linux CS144的作业要求使用GNU/Linux操作系统和一个支持C++ 2017标准的最新C编译器。 支持C 2017标准。请在这三个选项中选择一个。 2 手工联网 2.1 Fetch a Web page 在虚拟机中打开终端，通过命令行访问 指定网页 1telnet cs144.keithw.org http 依次输入 123GET /hello HTTP/1.1 Host: cs144.keithw.orgConnection: close 然后两次回车 此时窗口会显示 Hello CS144 ! 2.2 Send yourself an email 依然是命令行，注意邮箱需要换成自己的。 1telnet 148.163.153.234 smtp 123HELO mycomputer.stanford.eduMAIL FROM: sunetid @stanford.eduRCPT TO: sunetid @stanford.edu 123From: sunetid@stanford.eduTo: sunetid@stanford.eduSubject: Hello from CS144 Lab 0! 1QUIT 2.3 Listening and connecting 打开一个终端。 1netcat -v -l -p 9090 打开另一个终端 1telnet localhost 9090 此时两个终端可以实现通信。 3 WebGet 使用TCPSocket来实现发送 http 请求，并获取响应信息，打印出来。 创建一个TCPSocket并与服务器建立连接。 向服务器发送请求，格式参照前面fetch a web page部分，注意在HTTP中每行的结尾应该为\\r\\n。 发送完请求后，客户端应该关闭TCPSocket的写功能，对应前面的Connection: close，告诉服务器请求已经发送完毕，服务器只要回复完数据后就可以立刻断开连接。 循环读取从服务器发送过来的信息，直到遇到 Eof (end of file)。 最后记得需要关闭前面创建的TCPSocket。 根据所给的API，和前面的warmup，可以实现，代码如下 1234567891011121314void get_URL(const string &amp;host, const string &amp;path) &#123; TCPSocket sock; sock.connect(Address(host, &quot;http&quot;)); sock.write(&quot;GET &quot; + path + &quot; HTTP/1.1\\r\\n&quot;); sock.write(&quot;Host: &quot; + host + &quot;\\r\\n&quot;); sock.write(&quot;Connection: close \\r\\n&quot;); sock.write(&quot;\\r\\n&quot;); while(!sock.eof())&#123; auto rsp = sock.read(); cout &lt;&lt; rsp; &#125; sock.close();&#125; 4 An in-memory reliable byte stream 实现一个有序字节流 byte_stream.hh 1234567891011class ByteStream &#123; private: // Your code here -- add private members as necessary. std::deque&lt;char&gt; _buffer = &#123;&#125;; size_t _capacity = 0; size_t _read_count = 0; size_t _write_count = 0; bool _input_ended_flag = false; bool _error = false; //!&lt; Flag indicating that the stream suffered an error. //...... byte_stream.cc 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869ByteStream::ByteStream(const size_t capacity) : _capacity(capacity) &#123;&#125;size_t ByteStream::write(const string &amp;data) &#123; size_t len = data.length(); if (len &gt; _capacity - _buffer.size()) &#123; len = _capacity - _buffer.size(); &#125; _write_count += len; for (size_t i = 0; i &lt; len; i++) &#123; _buffer.push_back(data[i]); &#125; return len;&#125;//! \\param[in] len bytes will be copied from the output side of the bufferstring ByteStream::peek_output(const size_t len) const &#123; size_t length = len; if (length &gt; _buffer.size()) &#123; length = _buffer.size(); &#125; return string().assign(_buffer.begin(), _buffer.begin() + length);&#125;//! \\param[in] len bytes will be removed from the output side of the buffervoid ByteStream::pop_output(const size_t len) &#123; size_t length = len; if (length &gt; _buffer.size()) &#123; length = _buffer.size(); &#125; _read_count += length; while (length--) &#123; _buffer.pop_front(); &#125; return;&#125;//! Read (i.e., copy and then pop) the next &quot;len&quot; bytes of the stream//! \\param[in] len bytes will be popped and returned//! \\returns a stringstd::string ByteStream::read(const size_t len) &#123; string msg; if(len &gt; _buffer.size())&#123; msg = peek_output(_buffer.size()); pop_output(_buffer.size()); &#125; else&#123; msg = peek_output(len); pop_output(len); &#125; return msg;&#125;void ByteStream::end_input() &#123; _input_ended_flag = true; &#125;bool ByteStream::input_ended() const &#123; return _input_ended_flag; &#125;size_t ByteStream::buffer_size() const &#123; return _buffer.size(); &#125;bool ByteStream::buffer_empty() const &#123; return _buffer.size() == 0; &#125;bool ByteStream::eof() const &#123; return buffer_empty() &amp;&amp; input_ended(); &#125;size_t ByteStream::bytes_written() const &#123; return _write_count; &#125;size_t ByteStream::bytes_read() const &#123; return _read_count; &#125;size_t ByteStream::remaining_capacity() const &#123; return _capacity - _buffer.size(); &#125;","categories":[{"name":"Computer-Network","slug":"Computer-Network","permalink":"https://freeeeeeeeedom.gitee.io/categories/Computer-Network/"},{"name":"CS144","slug":"Computer-Network/CS144","permalink":"https://freeeeeeeeedom.gitee.io/categories/Computer-Network/CS144/"}],"tags":[{"name":"CS144","slug":"CS144","permalink":"https://freeeeeeeeedom.gitee.io/tags/CS144/"}]}],"categories":[{"name":"C++","slug":"C","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/"},{"name":"C++面向对象","slug":"C/C-面向对象","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"},{"name":"C++结构化编程","slug":"C/C-结构化编程","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/C-%E7%BB%93%E6%9E%84%E5%8C%96%E7%BC%96%E7%A8%8B/"},{"name":"C++数据结构","slug":"C/C-数据结构","permalink":"https://freeeeeeeeedom.gitee.io/categories/C/C-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"Everday","slug":"Everday","permalink":"https://freeeeeeeeedom.gitee.io/categories/Everday/"},{"name":"2022_大二下","slug":"Everday/2022-大二下","permalink":"https://freeeeeeeeedom.gitee.io/categories/Everday/2022-%E5%A4%A7%E4%BA%8C%E4%B8%8B/"},{"name":"数据库","slug":"数据库","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"数据管理基础","slug":"数据库/数据管理基础","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/"},{"name":"Computer-Network","slug":"Computer-Network","permalink":"https://freeeeeeeeedom.gitee.io/categories/Computer-Network/"},{"name":"CS144","slug":"Computer-Network/CS144","permalink":"https://freeeeeeeeedom.gitee.io/categories/Computer-Network/CS144/"},{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"Leetcode","slug":"数据结构与算法/Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Leetcode/"}],"tags":[{"name":"C++高级程序设计","slug":"C-高级程序设计","permalink":"https://freeeeeeeeedom.gitee.io/tags/C-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"},{"name":"2022_Spring","slug":"2022-Spring","permalink":"https://freeeeeeeeedom.gitee.io/tags/2022-Spring/"},{"name":"数据管理基础","slug":"数据管理基础","permalink":"https://freeeeeeeeedom.gitee.io/tags/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/"},{"name":"CS144","slug":"CS144","permalink":"https://freeeeeeeeedom.gitee.io/tags/CS144/"},{"name":"Leetcode","slug":"Leetcode","permalink":"https://freeeeeeeeedom.gitee.io/tags/Leetcode/"}]}